id,title,url,description,tags,difficulty,likes,dislikes,totalSubmission,totalAccepted,similarQuestions,dis_tags
1840,Maximum Building Height,https://leetcode.com/problems/maximum-building-height,"You want to build n new buildings in a city. The new buildings will be built in a line and are labeled from 1 to n.

However, there are city restrictions on the heights of the new buildings:


	The height of each building must be a non-negative integer.
	The height of the first building must be 0.
	The height difference between any two adjacent buildings cannot exceed 1.


Additionally, there are city restrictions on the maximum height of specific buildings. These restrictions are given as a 2D integer array restrictions where restrictions[i] = [idi, maxHeighti] indicates that building idi must have a height less than or equal to maxHeighti.

It is guaranteed that each building will appear at most once in restrictions, and building 1 will not be in restrictions.

Return the maximum possible height of the tallest building.","['binary-search', 'greedy']",Hard,124,6,7445,2476,[],"[('explained', 3), ('c++', 2), ('java', 2), ('#codeboy', 1), ('#hard', 1), ('#python', 1), ('#python 3', 1), ('javascript', 1), ('python3', 1)]"
1839,Longest Substring Of All Vowels in Order,https://leetcode.com/problems/longest-substring-of-all-vowels-in-order,"A string is considered beautiful if it satisfies the following conditions:


	Each of the 5 English vowels ('a', 'e', 'i', 'o', 'u') must appear at least once in it.
	The letters must be sorted in alphabetical order (i.e. all 'a's before 'e's, all 'e's before 'i's, etc.).


For example, strings ""aeiou"" and ""aaaaaaeiiiioou"" are considered beautiful, but ""uaeio"", ""aeoiu"", and ""aaaeeeooo"" are not beautiful.

Given a string word consisting of English vowels, return the length of the longest beautiful substring of word. If no such substring exists, return 0.

A substring is a contiguous sequence of characters in a string.","['two-pointers', 'string']",Medium,105,6,17188,8340,[],"[('python', 14), ('c++', 12), ('python3', 12), ('easy-understanding', 11), ('java', 8), ('java-solution', 4), ('javascript', 4), ('simple', 4), ('explained', 3), ('if-else', 3), ('slidingwindow', 3), ('c#', 2), ('cpp', 2), ('easy-to-understand', 2), ('groupby', 2), ('python 3', 2), ('regex', 2), ('stack', 2), ('swift', 2), ('#codeboy', 1), ('#easy', 1), ('#python', 1), ('#python 3', 1), ('#set', 1), ('#sliding-window', 1), ('2 pointers', 1), ('brute force', 1), ('bruteforce', 1), ('c++11', 1), ('contest', 1), ('dfa', 1), ('easy', 1), ('easy undestanding', 1), ('efficient solution', 1), ('expalnation', 1), ('explanation of logic', 1), ('fast-solution', 1), ('intuitive', 1), ('javascript solution', 1), ('kandane', 1), ('linear', 1), ('linear seach', 1), ('n', 1), ('naive', 1), ('no extra space', 1), ('one pass solution', 1), ('python3.8', 1), ('readable', 1), ('regex expression', 1), ('score', 1), ('set', 1), ('simple clear c++ solution', 1), ('slide window', 1), ('sliding window', 1), ('sliding window algorithm', 1), ('thought-process', 1), ('two pointers', 1), ('zip', 1)]"
1838,Frequency of the Most Frequent Element,https://leetcode.com/problems/frequency-of-the-most-frequent-element,"The frequency of an element is the number of times it occurs in an array.

You are given an integer array nums and an integer k. In one operation, you can choose an index of nums and increment the element at that index by 1.

Return the maximum possible frequency of an element after performing at most k operations.",['greedy'],Medium,319,6,21086,6641,[],"[('slidingwindow', 9), ('c++', 8), ('c#', 4), ('cpp', 3), ('explanation of logic', 3), ('java', 3), ('2pointer', 2), ('binary search', 2), ('java-solution', 2), ('python 3', 2), ('python3', 2), ('sliding window', 2), ('#codeboy', 1), ('#explanation', 1), ('#python', 1), ('#python 3', 1), ('#slidingwindow', 1), ('2-pointer', 1), ('beginner friendly', 1), ('beginner guide', 1), ('brute force', 1), ('clear explanation', 1), ('deque', 1), ('easily understandable', 1), ('easy-to-understand', 1), ('explained', 1), ('frequencyofmostfrequent', 1), ('javasccript', 1), ('javascript', 1), ('lazy-propagation', 1), ('nlogn time', 1), ('python', 1), ('segment tree', 1), ('sort', 1), ('sorting', 1), ('sqrt-n', 1), ('swift', 1)]"
1837,Sum of Digits in Base K,https://leetcode.com/problems/sum-of-digits-in-base-k,"Given an integer n (in base 10) and a base k, return the sum of the digits of n after converting n from base 10 to base k.

After converting, each digit should be interpreted as a base 10 number, and the sum should be returned in base 10.","['math', 'bit-manipulation']",Easy,56,8,13586,10206,[],"[('c++', 16), ('cpp', 10), ('java', 9), ('easy-understanding', 8), ('python', 6), ('python3', 6), ('easy', 5), ('javascript', 4), ('recursion', 3), ('swift', 3), ('algorithms', 2), ('cpp solution', 2), ('easy-to-understand', 2), ('easytounderstand', 2), ('fast and simple', 2), ('java-solution', 2), ('kotlin', 2), ('one-liner', 2), ('#codeboy', 1), ('#easy', 1), ('#python', 1), ('#python3', 1), ('base-conversion', 1), ('base-k', 1), ('beginner friendly', 1), ('c code', 1), ('c#', 1), ('constant space', 1), ('decimaltobinary convertor', 1), ('explained', 1), ('extension function', 1), ('fastest', 1), ('go', 1), ('golang', 1), ('intutive', 1), ('iterative', 1), ('javasccript', 1), ('javascript solution', 1), ('kotlin-solution', 1), ('list comprehension', 1), ('logarithmic time', 1), ('math', 1), ('number theory', 1), ('oneliner', 1), ('python 3', 1), ('rajat', 1), ('readable', 1), ('recursive', 1), ('rust', 1), ('self explanatory', 1), ('simple', 1), ('sum of series', 1), ('swift5.3', 1), ('ultra simple', 1), ('understandable', 1)]"
1835,Find XOR Sum of All Pairs Bitwise AND,https://leetcode.com/problems/find-xor-sum-of-all-pairs-bitwise-and,"The XOR sum of a list is the bitwise XOR of all its elements. If the list only contains one element, then its XOR sum will be equal to this element.


	For example, the XOR sum of [1,2,3,4] is equal to 1 XOR 2 XOR 3 XOR 4 = 4, and the XOR sum of [3] is equal to 3.


You are given two 0-indexed arrays arr1 and arr2 that consist only of non-negative integers.

Consider the list containing the result of arr1[i] AND arr2[j] (bitwise AND) for every (i, j) pair where 0 <= i < arr1.length and 0 <= j < arr2.length.

Return the XOR sum of the aforementioned list.",['math'],Hard,151,24,11232,6194,[],"[('c++', 10), ('bit-manipulation', 6), ('easy-understanding', 6), ('python', 6), ('math', 5), ('easytounderstand', 4), ('python3', 4), ('java', 3), ('cpp', 2), ('javascript', 2), ('xor operation', 2), ('#accepted', 1), ('#codeboy', 1), ('#easy solution', 1), ('#easy-understanding', 1), ('#explained', 1), ('#python', 1), ('#python 3', 1), ('#timelimitexceeded', 1), ('and operator', 1), ('associative-property', 1), ('beginner friendly', 1), ('best approach', 1), ('bit operation', 1), ('bitset', 1), ('bitwise', 1), ('bitwise operation', 1), ('boolean algebra', 1), ('c#', 1), ('cpp solution', 1), ('explanation of logic', 1), ('explanations', 1), ('intuition', 1), ('intution', 1), ('iterative', 1), ('linear time', 1), ('linear time complexity', 1), ('memory-optimized', 1), ('proof', 1), ('python 3', 1), ('rust', 1), ('simple clear c++ solution', 1), ('straight-forward', 1), ('vector', 1)]"
1834,Single-Threaded CPU,https://leetcode.com/problems/single-threaded-cpu,"You are given n​​​​​​ tasks labeled from 0 to n - 1 represented by a 2D integer array tasks, where tasks[i] = [enqueueTimei, processingTimei] means that the i​​​​​​th​​​​ task will be available to process at enqueueTimei and will take processingTimei to finish processing.

You have a single-threaded CPU that can process at most one task at a time and will act in the following way:


	If the CPU is idle and there are no available tasks to process, the CPU remains idle.
	If the CPU is idle and there are available tasks, the CPU will choose the one with the shortest processing time. If multiple tasks have the same shortest processing time, it will choose the task with the smallest index.
	Once a task is started, the CPU will process the entire task without stopping.
	The CPU can finish a task then start a new one instantly.


Return the order in which the CPU will process the tasks.",['heap'],Medium,267,58,23004,9255,[],"[('priority queue', 13), ('python', 12), ('heap', 11), ('c++', 7), ('java', 6), ('explained', 5), ('min-heap', 5), ('python3', 5), ('javascript', 4), ('priority-queue', 4), ('sort', 4), ('easy', 3), ('java-solution', 3), ('clean code', 2), ('cpp', 2), ('heapq', 2), ('readable code', 2), ('begginer friendly', 1), ('c#', 1), ('comments added', 1), ('cpu', 1), ('easy-to-understand', 1), ('event-driven', 1), ('go', 1), ('golang', 1), ('inefficient', 1), ('min heap', 1), ('pitfalls', 1), ('priorityqueue', 1), ('ruby', 1), ('rust', 1), ('self-explanatory', 1), ('simple', 1), ('simulation', 1), ('sorting', 1), ('swift', 1), ('ting', 1), ('understandable', 1)]"
1833,Maximum Ice Cream Bars,https://leetcode.com/problems/maximum-ice-cream-bars,"It is a sweltering summer day, and a boy wants to buy some ice cream bars.

At the store, there are n ice cream bars. You are given an array costs of length n, where costs[i] is the price of the ith ice cream bar in coins. The boy initially has coins coins to spend, and he wants to buy as many ice cream bars as possible. 

Return the maximum number of ice cream bars the boy can buy with coins coins.

Note: The boy can buy the ice cream bars in any order.","['array', 'sort']",Medium,104,47,23049,19808,[],"[('c++', 13), ('cpp', 10), ('python', 10), ('java', 9), ('python3', 8), ('easy-understanding', 7), ('javascript', 7), ('sort', 5), ('sorting', 5), ('beginner friendly', 4), ('java-solution', 4), ('easy-to-understand', 3), ('greedy', 3), ('simple', 3), ('swift', 3), ('c#', 2), ('clean code', 2), ('comments-added', 2), ('cpp solution', 2), ('explained', 2), ('heap', 2), ('sorted array', 2), ('#codegirl', 1), ('#easy-understand', 1), ('#easy-understanding', 1), ('#easysolution', 1), ('#explained', 1), ('#python', 1), ('#python 3', 1), ('#python-3', 1), ('100 faster runtime', 1), ('accumlulative sum', 1), ('c#-solution', 1), ('c++ code', 1), ('easy', 1), ('easy to code', 1), ('easytoundersatand', 1), ('easytounderstand', 1), ('easyundersttanding', 1), ('es6', 1), ('explained solution', 1), ('fast-solution', 1), ('golang', 1), ('gready', 1), ('greedy algorithms', 1), ('greedy approach', 1), ('intutive', 1), ('javascript solution', 1), ('kotlin', 1), ('nlogn', 1), ('one-liner', 1), ('priority queue', 1), ('pyhton', 1), ('python38', 1), ('rajat', 1), ('self explanatory', 1), ('self-explanatory', 1), ('simple clear c++ solution', 1), ('simple-solution', 1), ('straight-forward', 1), ('ultra simple', 1), ('upvote', 1), ('walrus', 1), ('with-explanation', 1)]"
1832,Check if the Sentence Is Pangram,https://leetcode.com/problems/check-if-the-sentence-is-pangram,"A pangram is a sentence where every letter of the English alphabet appears at least once.

Given a string sentence containing only lowercase English letters, return true if sentence is a pangram, or false otherwise.",['string'],Easy,115,4,22188,18751,[],"[('c++', 26), ('java', 21), ('easy-understanding', 19), ('python', 18), ('python3', 17), ('javascript', 16), ('cpp', 15), ('java-solution', 12), ('set', 10), ('beginner friendly', 7), ('easytounderstand', 7), ('swift', 6), ('c#', 4), ('explained', 4), ('pangram', 4), ('simple', 4), ('array', 3), ('easy', 3), ('python 3', 3), ('string', 3), ('100 faster runtime', 2), ('count', 2), ('cpp solution', 2), ('go', 2), ('golang', 2), ('kotlin', 2), ('map', 2), ('one-liner', 2), ('ruby', 2), ('rust', 2), ('self-explanatory', 2), ('#codeboy', 1), ('#easy-understanding', 1), ('#easysolution', 1), ('#explained', 1), ('#python', 1), ('#python 3', 1), ('#python-3', 1), ('100 memory', 1), ('100 speed', 1), ('20ms', 1), ('alphabet', 1), ('arrays', 1), ('ascii', 1), ('begineer friendly', 1), ('beginner', 1), ('beginner guide', 1), ('beginners', 1), ('bit operation', 1), ('bit-manipulation', 1), ('bit-shift', 1), ('bitmask', 1), ('bitwise', 1), ('bitwise or', 1), ('bytes', 1), ('c++ code', 1), ('clean code', 1), ('constexpr', 1), ('dictionary', 1), ('different approaches', 1), ('different solutions', 1), ('easy-to-understand', 1), ('effiecinet', 1), ('es6', 1), ('explained solution', 1), ('fast-solution', 1), ('fastest', 1), ('for technical round', 1), ('fp', 1), ('functional', 1), ('functional programming', 1), ('go-solution', 1), ('golang solution', 1), ('golang-solution', 1), ('hash', 1), ('hashmap', 1), ('hashtable', 1), ('intutive', 1), ('java ac solution', 1), ('javasccript', 1), ('javascript solution', 1), ('list-comprehension', 1), ('most appropriate', 1), ('one liner', 1), ('php', 1), ('rajat', 1), ('regx', 1), ('scala', 1), ('self explanatory', 1), ('simple clear c++ solution', 1), ('step by step', 1), ('stream', 1), ('strings', 1), ('stringview', 1), ('swift5', 1), ('ts', 1), ('typescript', 1), ('ultra simple', 1), ('understandable', 1), ('unordered map', 1), ('upvote', 1), ('vector', 1), ('walk through', 1)]"
1825,Finding MK Average,https://leetcode.com/problems/finding-mk-average,"You are given two integers, m and k, and a stream of integers. You are tasked to implement a data structure that calculates the MKAverage for the stream.

The MKAverage can be calculated using these steps:


	If the number of the elements in the stream is less than m you should consider the MKAverage to be -1. Otherwise, copy the last m elements of the stream to a separate container.
	Remove the smallest k elements and the largest k elements from the container.
	Calculate the average value for the rest of the elements rounded down to the nearest integer.


Implement the MKAverage class:


	MKAverage(int m, int k) Initializes the MKAverage object with an empty stream and the two integers m and k.
	void addElement(int num) Inserts a new element num into the stream.
	int calculateMKAverage() Calculates and returns the MKAverage for the current stream rounded down to the nearest integer.","['heap', 'design', 'queue']",Hard,92,56,10790,3373,"[""Find Median from Data Stream"", ""Kth Largest Element in a Stream""]","[('javascript', 5), ('c++', 3), ('python3', 3), ('binary-search', 2), ('deque', 2), ('sortedlist', 2), ('binary-indexed-tree', 1), ('c++11', 1), ('cpp', 1), ('easy cpp', 1), ('easy-understanding', 1), ('expalined', 1), ('fenwick tree', 1), ('hash table', 1), ('heap', 1), ('java', 1), ('lazy deletion', 1), ('multiset', 1), ('multisets', 1), ('priority queue', 1), ('python', 1), ('python 3', 1), ('queues', 1), ('segment tree', 1), ('sort', 1), ('time limit exceeded', 1), ('time-complexity', 1), ('timelimit', 1), ('tle', 1), ('tle solved', 1)]"
1824,Minimum Sideway Jumps,https://leetcode.com/problems/minimum-sideway-jumps,"There is a 3 lane road of length n that consists of n + 1 points labeled from 0 to n. A frog starts at point 0 in the second lane and wants to jump to point n. However, there could be obstacles along the way.

You are given an array obstacles of length n + 1 where each obstacles[i] (ranging from 0 to 3) describes an obstacle on the lane obstacles[i] at point i. If obstacles[i] == 0, there are no obstacles at point i. There will be at most one obstacle in the 3 lanes at each point.


	For example, if obstacles[2] == 1, then there is an obstacle on lane 1 at point 2.


The frog can only travel from point i to point i + 1 on the same lane if there is not an obstacle on the lane at point i + 1. To avoid obstacles, the frog can also perform a side jump to jump to another lane (even if they are not adjacent) at the same point if there is no obstacle on the new lane.


	For example, the frog can jump from lane 3 at point 3 to lane 1 at point 3.


Return the minimum number of side jumps the frog needs to reach any lane at point n starting from lane 2 at point 0.

Note: There will be no obstacles on points 0 and n.","['dynamic-programming', 'breadth-first-search']",Medium,259,14,17051,10085,"[""Frog Jump""]","[('c++', 18), ('dp', 14), ('dynamic programming', 14), ('memoization', 11), ('java', 9), ('python', 9), ('recursion', 9), ('python3', 6), ('cpp', 5), ('dfs', 5), ('greedy', 5), ('bfs', 4), ('javascript', 4), ('comments-added', 2), ('easy-understanding', 2), ('java-solution', 2), ('python 3', 2), ('tabulation', 2), ('#c++', 1), ('#dp', 1), ('#dynamic programming', 1), ('#memoization', 1), ('#recursion', 1), ('2d', 1), ('admin', 1), ('backtracing', 1), ('beginnerfriendly', 1), ('binary-search', 1), ('bit operation', 1), ('bottom up', 1), ('brute-force', 1), ('bt', 1), ('c++ dynamic programming', 1), ('c++11', 1), ('deque', 1), ('dp-techqique', 1), ('dynamic programmin', 1), ('easy', 1), ('go', 1), ('golang', 1), ('help', 1), ('javascript solution', 1), ('js javascript', 1), ('linear memory', 1), ('linear time', 1), ('memoiziation', 1), ('memorization', 1), ('no dp', 1), ('one pass solution', 1), ('possible-bug', 1), ('queue', 1), ('queue-approach', 1), ('simple', 1), ('stl', 1), ('swift', 1), ('top down dp', 1), ('topdown', 1), ('xor', 1)]"
1823,Find the Winner of the Circular Game,https://leetcode.com/problems/find-the-winner-of-the-circular-game,"There are n friends that are playing a game. The friends are sitting in a circle and are numbered from 1 to n in clockwise order. More formally, moving clockwise from the ith friend brings you to the (i+1)th friend for 1 <= i < n, and moving clockwise from the nth friend brings you to the 1st friend.

The rules of the game are as follows:


	Start at the 1st friend.
	Count the next k friends in the clockwise direction including the friend you started at. The counting wraps around the circle and may count some friends more than once.
	The last friend you counted leaves the circle and loses the game.
	If there is still more than one friend in the circle, go back to step 2 starting from the friend immediately clockwise of the friend who just lost and repeat.
	Else, the last friend in the circle wins the game.


Given the number of friends, n, and an integer k, return the winner of the game.",['array'],Medium,155,6,14243,10273,[],"[('c++', 17), ('java', 16), ('python', 10), ('cpp', 8), ('easytounderstand', 8), ('python3', 8), ('easy-understanding', 5), ('queue', 5), ('javascript', 4), ('recursion', 4), ('easy', 3), ('linear time', 3), ('linkedlists', 3), ('c#', 2), ('java-solution', 2), ('linked list', 2), ('list', 2), ('python 3', 2), ('self-explanatory', 2), ('simple', 2), ('swift', 2), ('vector', 2), ('1 liner', 1), ('1-liner', 1), ('5ms solution', 1), ('adjacency list', 1), ('array', 1), ('arraylist', 1), ('brute force', 1), ('c#-solution', 1), ('circular linked list', 1), ('comments-added', 1), ('cpp solution', 1), ('dll', 1), ('easy to read', 1), ('easy to understand', 1), ('easy-to-understand', 1), ('explanation with code', 1), ('go', 1), ('golang', 1), ('josephus', 1), ('kotlin', 1), ('linear', 1), ('linked-list', 1), ('modular', 1), ('modulo-arithmatic', 1), ('modulus', 1), ('node', 1), ('on', 1), ('rajat', 1), ('recurssion', 1), ('set', 1), ('simple-solution', 1), ('simulation', 1), ('stimulation', 1), ('while-loop', 1)]"
1822,Sign of the Product of an Array,https://leetcode.com/problems/sign-of-the-product-of-an-array,"There is a function signFunc(x) that returns:


	1 if x is positive.
	-1 if x is negative.
	0 if x is equal to 0.


You are given an integer array nums. Let product be the product of all values in the array nums.

Return signFunc(product).",['math'],Easy,102,16,30077,24074,[],"[('c++', 29), ('java', 18), ('cpp', 17), ('python', 15), ('python3', 14), ('easy-understanding', 11), ('easy', 8), ('easytounderstand', 7), ('c#', 6), ('simple', 6), ('java-solution', 5), ('javasccript', 4), ('go', 3), ('javascript', 3), ('one-liner', 3), ('swift', 3), ('0ms', 2), ('100 faster runtime', 2), ('array', 2), ('constant space', 2), ('cpp solution', 2), ('fasterthan100', 2), ('fastest', 2), ('go-solution', 2), ('golang', 2), ('linq', 2), ('optimal', 2), ('optimized', 2), ('python 3', 2), ('switch-case', 2), ('100', 1), ('100 space', 1), ('100 speed', 1), ('array sort', 1), ('boolean', 1), ('branchless', 1), ('brute force', 1), ('built-int lib', 1), ('c', 1), ('clean code', 1), ('count', 1), ('cpp short solution', 1), ('easiest', 1), ('explaination', 1), ('explained', 1), ('explained solution', 1), ('explanations', 1), ('fast-solution', 1), ('faster than 100.00', 1), ('fold', 1), ('for loop', 1), ('foreach', 1), ('fp', 1), ('golang solution', 1), ('golang-solution', 1), ('intutive', 1), ('iter', 1), ('iterative', 1), ('javascript solution', 1), ('linear', 1), ('linear seach', 1), ('linear time', 1), ('math', 1), ('modulus', 1), ('quickest', 1), ('rajat', 1), ('reduce', 1), ('rust', 1), ('self explanatory', 1), ('self-explanatory', 1), ('short and simple', 1), ('sorted array', 1), ('ultra simple', 1), ('upvote', 1), ('video-explanation', 1)]"
1819,Number of Different Subsequences GCDs,https://leetcode.com/problems/number-of-different-subsequences-gcds,"You are given an array nums that consists of positive integers.

The GCD of a sequence of numbers is defined as the greatest integer that divides all the numbers in the sequence evenly.


	For example, the GCD of the sequence [4,6,16] is 2.


A subsequence of an array is a sequence that can be formed by removing some elements (possibly none) of the array.


	For example, [2,5,10] is a subsequence of [1,2,1,2,4,1,5,10].


Return the number of different GCDs among all non-empty subsequences of nums.",['math'],Hard,153,33,11250,3726,[],"[('c++', 4), ('python', 4), ('javascript', 3), ('clean code', 2), ('easy-understanding', 2), ('explained', 2), ('explained solution', 2), ('java', 2), ('math', 2), ('python3', 2), ('simple', 2), ('bottomup', 1), ('clean', 1), ('clean-efficient', 1), ('clean-efficient-code', 1), ('comments-added', 1), ('cpp', 1), ('cpp solution', 1), ('dp', 1), ('explanation', 1), ('fastest', 1), ('maths', 1), ('python 3', 1), ('rust', 1), ('set', 1), ('swift', 1), ('tle', 1)]"
1818,Minimum Absolute Sum Difference,https://leetcode.com/problems/minimum-absolute-sum-difference,"You are given two positive integer arrays nums1 and nums2, both of length n.

The absolute sum difference of arrays nums1 and nums2 is defined as the sum of |nums1[i] - nums2[i]| for each 0 <= i < n (0-indexed).

You can replace at most one element of nums1 with any other element in nums1 to minimize the absolute sum difference.

Return the minimum absolute sum difference after replacing at most one element in the array nums1. Since the answer may be large, return it modulo 109 + 7.

|x| is defined as:


	x if x >= 0, or
	-x if x < 0.","['binary-search', 'greedy']",Medium,172,27,24368,10147,[],"[('c++', 15), ('binary-search', 14), ('java', 14), ('python3', 9), ('python', 8), ('clean code', 5), ('c#', 4), ('treeset', 4), ('binary search', 3), ('cpp', 3), ('easy', 3), ('javascript', 3), ('binarysearch', 2), ('java-solution', 2), ('kotlin', 2), ('lower-bound', 2), ('priority queue', 2), ('swift', 2), ('100 space', 1), ('100 speed', 1), ('begineer friendly', 1), ('beginner friendly', 1), ('commented code', 1), ('comments-added', 1), ('detailed-explanation', 1), ('easy understanding', 1), ('easy-to-understand', 1), ('easy-understanding', 1), ('exaplanation', 1), ('explained', 1), ('fast', 1), ('fast and simple', 1), ('fast-solution', 1), ('fastest', 1), ('for-loop', 1), ('greedy algorithms', 1), ('greedy approach', 1), ('heap', 1), ('intution', 1), ('java ac solution', 1), ('map', 1), ('math', 1), ('min-max', 1), ('non-working', 1), ('o-nlogn', 1), ('ruby', 1), ('simple', 1)]"
1817,Finding the Users Active Minutes,https://leetcode.com/problems/finding-the-users-active-minutes,"You are given the logs for users' actions on LeetCode, and an integer k. The logs are represented by a 2D integer array logs where each logs[i] = [IDi, timei] indicates that the user with IDi performed an action at the minute timei.

Multiple users can perform actions simultaneously, and a single user can perform multiple actions in the same minute.

The user active minutes (UAM) for a given user is defined as the number of unique minutes in which the user performed an action on LeetCode. A minute can only be counted once, even if multiple actions occur during it.

You are to calculate a 1-indexed array answer of size k such that, for each j (1 <= j <= k), answer[j] is the number of users whose UAM equals j.

Return the array answer as described above.",['hash-table'],Medium,116,31,13127,10325,[],"[('hashmap', 29), ('c++', 18), ('java', 17), ('hashset', 15), ('cpp', 9), ('easy-understanding', 9), ('python3', 8), ('set', 8), ('javascript', 5), ('c#', 4), ('java-solution', 4), ('python', 4), ('dictonary', 3), ('comments-added', 2), ('cpp solution', 2), ('easy', 2), ('easytounderstand', 2), ('map', 2), ('simple', 2), ('swift', 2), ('unordered map', 2), ('#array', 1), ('#c++', 1), ('#hashmap', 1), ('#sets', 1), ('100 faster runtime', 1), ('array', 1), ('c++ code', 1), ('clean code', 1), ('cleancode', 1), ('dictionary', 1), ('easy understanding', 1), ('es2015', 1), ('explained', 1), ('explanation', 1), ('fasterthan100', 1), ('for loops', 1), ('hash table', 1), ('hashet', 1), ('hashing', 1), ('hashtables', 1), ('java8', 1), ('javascript solution', 1), ('linear complexity', 1), ('linear memory', 1), ('linear time', 1), ('map-stl', 1), ('python 3', 1), ('rajat', 1), ('ruby', 1), ('self-explanatory', 1), ('sets', 1), ('sorted array', 1), ('straight-forward', 1), ('streamapi', 1), ('unordered set', 1), ('without-set', 1)]"
1816,Truncate Sentence,https://leetcode.com/problems/truncate-sentence,"A sentence is a list of words that are separated by a single space with no leading or trailing spaces. Each of the words consists of only uppercase and lowercase English letters (no punctuation).


	For example, ""Hello World"", ""HELLO"", and ""hello world hello world"" are all sentences.


You are given a sentence s​​​​​​ and an integer k​​​​​​. You want to truncate s​​​​​​ such that it contains only the first k​​​​​​ words. Return s​​​​​​ after truncating it.",['string'],Easy,124,3,21118,16672,[],"[('c++', 30), ('java', 27), ('easy-understanding', 18), ('cpp', 16), ('python', 14), ('python3', 14), ('java-solution', 9), ('javascript', 9), ('one-liner', 9), ('split', 8), ('c#', 6), ('easy', 6), ('simple', 5), ('string', 4), ('stringbuilder', 4), ('an7one', 3), ('golang', 3), ('linear-scan', 3), ('rust', 3), ('swift', 3), ('0ms', 2), ('array', 2), ('beginner friendly', 2), ('clean code', 2), ('cpp solution', 2), ('easytounderstand', 2), ('find', 2), ('go', 2), ('javasccript', 2), ('join', 2), ('kotlin', 2), ('python 3', 2), ('split-string', 2), ('swift5', 2), ('0ms runtime', 1), ('1-line', 1), ('100 faster runtime', 1), ('100 speed', 1), ('2 line python solution', 1), ('arrays', 1), ('c', 1), ('c++ code', 1), ('comments-added', 1), ('easy-to-understand', 1), ('efficient solution', 1), ('es2015', 1), ('explained', 1), ('fast and simple', 1), ('fasterthan100', 1), ('go-solution', 1), ('golang solution', 1), ('golang-solution', 1), ('intutive', 1), ('iterator', 1), ('java8', 1), ('js', 1), ('js javascript', 1), ('kotlin-solution', 1), ('linear complexity', 1), ('linear memory', 1), ('linear seach', 1), ('linear time', 1), ('no memory usage', 1), ('optimal', 1), ('php', 1), ('python3.8', 1), ('rajat', 1), ('ruby', 1), ('self explanatory', 1), ('self-explanatory', 1), ('slice syntax', 1), ('straight-forward', 1), ('stream', 1), ('streamapi', 1), ('streams', 1), ('string-searching', 1), ('stringbuilder in java', 1), ('strings', 1), ('truncate-sentence', 1), ('ultra simple', 1), ('upvote', 1), ('weekly contest 235', 1), ('well commented', 1), ('well explained', 1)]"
1830,Minimum Number of Operations to Make String Sorted,https://leetcode.com/problems/minimum-number-of-operations-to-make-string-sorted,"You are given a string s (0-indexed)​​​​​​. You are asked to perform the following operation on s​​​​​​ until you get a sorted string:


	Find the largest index i such that 1 <= i < s.length and s[i] < s[i - 1].
	Find the largest index j such that i <= j < s.length and s[k] < s[i - 1] for all the possible values of k in the range [i, j] inclusive.
	Swap the two characters at indices i - 1​​​​ and j​​​​​.
	Reverse the suffix starting at index i​​​​​​.


Return the number of operations needed to make the string sorted. Since the answer can be too large, return it modulo 109 + 7.","['math', 'string']",Hard,78,63,3038,1412,[],"[('java', 3), ('tle', 3), ('c++', 2), ('math', 2), ('python', 2), ('biginteger', 1), ('brute force', 1), ('combinatorics', 1), ('cpp', 1), ('easy-to-understand', 1), ('explained', 1), ('explanations', 1), ('unsolved', 1)]"
1829,Maximum XOR for Each Query,https://leetcode.com/problems/maximum-xor-for-each-query,"You are given a sorted array nums of n non-negative integers and an integer maximumBit. You want to perform the following query n times:


	Find a non-negative integer k < 2maximumBit such that nums[0] XOR nums[1] XOR ... XOR nums[nums.length-1] XOR k is maximized. k is the answer to the ith query.
	Remove the last element from the current array nums.


Return an array answer, where answer[i] is the answer to the ith query.",['bit-manipulation'],Medium,118,8,8363,6095,[],"[('c++', 17), ('bit-manipulation', 14), ('java', 12), ('easy-understanding', 9), ('python3', 9), ('cpp', 7), ('python', 6), ('xor', 6), ('easy', 5), ('javascript', 4), ('bitmask', 3), ('clean code', 3), ('explained', 3), ('c#', 2), ('dp', 2), ('explanation of logic', 2), ('java-solution', 2), ('linear time', 2), ('xor operation', 2), ('arrays', 1), ('awesome samriddhi', 1), ('bit manipulation', 1), ('bit masking', 1), ('bitmanipulation', 1), ('bitwise-xor', 1), ('biweekly-50-solutions', 1), ('biweekly-contest-50', 1), ('comments-added', 1), ('constant space', 1), ('cpp easy', 1), ('dp-easy', 1), ('dynamic programming', 1), ('easytounderstand', 1), ('fast and simple', 1), ('fasterthan100', 1), ('fastest python solution', 1), ('go', 1), ('go-solution', 1), ('golang', 1), ('golang-solution', 1), ('js', 1), ('linear memory', 1), ('math', 1), ('memoization', 1), ('memory-optimized', 1), ('one-liner', 1), ('precacluation', 1), ('pyhton', 1), ('question', 1), ('recursion', 1), ('ritik', 1), ('ruby', 1), ('scala', 1), ('self-explanatory', 1), ('simple', 1), ('simple clear c++ solution', 1), ('space-complexity-1', 1), ('stl algorithms', 1), ('swift', 1), ('toogle bits', 1)]"
1828,Queries on Number of Points Inside a Circle,https://leetcode.com/problems/queries-on-number-of-points-inside-a-circle,"You are given an array points where points[i] = [xi, yi] is the coordinates of the ith point on a 2D plane. Multiple points can have the same coordinates.

You are also given an array queries where queries[j] = [xj, yj, rj] describes a circle centered at (xj, yj) with a radius of rj.

For each query queries[j], compute the number of points inside the jth circle. Points on the border of the circle are considered inside.

Return an array answer, where answer[j] is the answer to the jth query.",['math'],Medium,82,18,9764,8583,[],"[('c++', 17), ('java', 14), ('python', 9), ('simple', 9), ('cpp', 8), ('easy-understanding', 7), ('javascript', 7), ('python3', 6), ('easy', 5), ('math', 5), ('clean code', 4), ('brutal force', 3), ('java-solution', 3), ('circle-equation', 2), ('cpp solution', 2), ('javascript solution', 2), ('kotlin', 2), ('stl', 2), ('tree', 2), ('2d', 1), ('arrays', 1), ('awesome samriddhi', 1), ('beginner friendly', 1), ('beginnerfriendly', 1), ('brainteaser', 1), ('brute force', 1), ('bruteforce', 1), ('circle', 1), ('cleancode', 1), ('easy understanding', 1), ('easy-undestand', 1), ('es6', 1), ('euclidean distance', 1), ('explanation of logic', 1), ('fasterthan100', 1), ('go', 1), ('go-solution', 1), ('golang', 1), ('golang-solution', 1), ('javascript brute force', 1), ('loop', 1), ('math geometry', 1), ('mathematics formula', 1), ('maths', 1), ('points-inside-circle', 1), ('ritik', 1), ('ruby', 1), ('short c++ code', 1), ('simple clear c++ solution', 1), ('sort', 1), ('swift', 1), ('tle', 1), ('understand', 1), ('video explanation', 1)]"
1827,Minimum Operations to Make the Array Increasing,https://leetcode.com/problems/minimum-operations-to-make-the-array-increasing,"You are given an integer array nums (0-indexed). In one operation, you can choose an element of the array and increment it by 1.


	For example, if nums = [1,2,3], you can choose to increment nums[1] to make nums = [1,3,3].


Return the minimum number of operations needed to make nums strictly increasing.

An array nums is strictly increasing if nums[i] < nums[i+1] for all 0 <= i < nums.length - 1. An array of length 1 is trivially strictly increasing.","['array', 'greedy']",Easy,115,3,13556,10701,[],"[('c++', 19), ('java', 15), ('cpp', 11), ('javascript', 8), ('easy', 7), ('java-solution', 5), ('python', 5), ('python3', 5), ('easy-understanding', 4), ('simple', 4), ('arrays', 3), ('c#', 3), ('array easy', 2), ('clean code', 2), ('cpp solution', 2), ('easytounderstand', 2), ('explanation of logic', 2), ('ruby', 2), ('rust', 2), ('#easy-understanding', 1), ('#easysolution', 1), ('#python 3', 1), ('#python-3', 1), ('0 ms solution', 1), ('100 beat', 1), ('adhoc', 1), ('array', 1), ('awesome samriddhi', 1), ('c#-solution', 1), ('commented code', 1), ('easy-to-understand', 1), ('explained solution', 1), ('fast and simple', 1), ('fast-solution', 1), ('fold', 1), ('for-loop', 1), ('fp', 1), ('go', 1), ('golang', 1), ('greedy approach', 1), ('iter', 1), ('java-8', 1), ('javasccript', 1), ('javascrip', 1), ('javascript solution', 1), ('kotlin', 1), ('logic explained', 1), ('logic explained clearly', 1), ('logic-solution', 1), ('math', 1), ('minimum operations', 1), ('optimal', 1), ('php', 1), ('pyhton3', 1), ('python 3', 1), ('python-3', 1), ('reduce', 1), ('ritik', 1), ('simple-solution', 1), ('single pass', 1), ('straight-forward', 1), ('swift', 1)]"
1808,Maximize Number of Nice Divisors,https://leetcode.com/problems/maximize-number-of-nice-divisors,"You are given a positive integer primeFactors. You are asked to construct a positive integer n that satisfies the following conditions:


  The number of prime factors of n (not necessarily distinct) is at most primeFactors.
  The number of nice divisors of n is maximized. Note that a divisor of n is nice if it is divisible by every prime factor of n. For example, if n = 12, then its prime factors are [2,2,3], then 6 and 12 are nice divisors, while 3 and 4 are not.


Return the number of nice divisors of n. Since that number can be too large, return it modulo 109 + 7.

Note that a prime number is a natural number greater than 1 that is not a product of two smaller natural numbers. The prime factors of a number n is a list of prime numbers such that their product equals n.",['math'],Hard,98,110,11834,3287,"[""Integer Break""]","[('math', 5), ('c++', 4), ('explained', 2), ('javascript', 2), ('pow', 2), ('python3', 2), ('bigint', 1), ('clean code', 1), ('comments-added', 1), ('cpp', 1), ('detailed explanation', 1), ('dp', 1), ('easy', 1), ('java', 1), ('python', 1), ('recursion', 1), ('simple', 1), ('swift', 1), ('video explanation', 1)]"
1806,Minimum Number of Operations to Reinitialize a Permutation,https://leetcode.com/problems/minimum-number-of-operations-to-reinitialize-a-permutation,"You are given an even integer n​​​​​​. You initially have a permutation perm of size n​​ where perm[i] == i​ (0-indexed)​​​​.

In one operation, you will create a new array arr, and for each i:


	If i % 2 == 0, then arr[i] = perm[i / 2].
	If i % 2 == 1, then arr[i] = perm[n / 2 + (i - 1) / 2].


You will then assign arr​​​​ to perm.

Return the minimum non-zero number of operations you need to perform on perm to return the permutation to its initial value.","['array', 'greedy']",Medium,102,65,11619,8189,[],"[('c++', 13), ('java', 10), ('python', 7), ('easy-to-understand', 5), ('brute force', 4), ('clean code', 3), ('cpp', 3), ('javascript', 3), ('linear memory', 3), ('python3', 3), ('brute force solution', 2), ('easy-understanding', 2), ('java-solution', 2), ('math', 2), ('swift', 2), ('arrays clone', 1), ('arrays-clone', 1), ('beginner friendly', 1), ('concise-solution', 1), ('cpp solution', 1), ('cycle decomposition', 1), ('detailed thinking step', 1), ('easytounderstand', 1), ('efficient', 1), ('efficient solution', 1), ('fastest', 1), ('for loop', 1), ('greedy', 1), ('kotlin', 1), ('lcm', 1), ('list', 1), ('optimized', 1), ('permutation', 1), ('python 3', 1), ('recursion', 1), ('simple', 1), ('simualtion', 1), ('simulation', 1), ('trie', 1)]"
1807,Evaluate the Bracket Pairs of a String,https://leetcode.com/problems/evaluate-the-bracket-pairs-of-a-string,"You are given a string s that contains some bracket pairs, with each pair containing a non-empty key.


	For example, in the string ""(name)is(age)yearsold"", there are two bracket pairs that contain the keys ""name"" and ""age"".


You know the values of a wide range of keys. This is represented by a 2D string array knowledge where each knowledge[i] = [keyi, valuei] indicates that key keyi has a value of valuei.

You are tasked to evaluate all of the bracket pairs. When you evaluate a bracket pair that contains some key keyi, you will:


	Replace keyi and the bracket pair with the key's corresponding valuei.
	If you do not know the value of the key, you will replace keyi and the bracket pair with a question mark ""?"" (without the quotation marks).


Each key will appear at most once in your knowledge. There will not be any nested brackets in s.

Return the resulting string after evaluating all of the bracket pairs.","['hash-table', 'string']",Medium,117,13,14266,9493,[],"[('hashmap', 21), ('java', 18), ('c++', 14), ('python', 13), ('python3', 9), ('stringbuilder', 9), ('java-solution', 7), ('easy-understanding', 6), ('linear time', 6), ('clean code', 5), ('javascript', 5), ('cpp', 4), ('python 3', 4), ('regex', 4), ('simple', 4), ('stack', 4), ('c#', 3), ('easytounderstand', 3), ('map', 3), ('string', 3), ('dict', 2), ('dictonary', 2), ('easy-to-understand', 2), ('explained', 2), ('hash table', 2), ('hashing', 2), ('kotlin', 2), ('ruby', 2), ('split', 2), ('swift', 2), ('begineer', 1), ('beginner friendly', 1), ('beginnerfriendly', 1), ('beginners level', 1), ('clean', 1), ('dictionary', 1), ('easy-explained', 1), ('explanatory-comments', 1), ('fast-solution', 1), ('golang', 1), ('hash', 1), ('help needed', 1), ('intuitive', 1), ('java ac solution', 1), ('javascrip', 1), ('js javascript', 1), ('linear memory', 1), ('linear scan', 1), ('linear-time-space', 1), ('list', 1), ('naivesolution', 1), ('recursion', 1), ('regexp', 1), ('regular expression', 1), ('regular-expression', 1), ('replace char in string', 1), ('scala', 1), ('solution-javascript', 1), ('stringbuilder in java', 1), ('strings', 1), ('substring', 1), ('tle', 1), ('trie', 1), ('two-pointer method', 1), ('typescript', 1), ('unorderedmap', 1), ('video-explanation', 1), ('whileloop', 1)]"
1805,Number of Different Integers in a String,https://leetcode.com/problems/number-of-different-integers-in-a-string,"You are given a string word that consists of digits and lowercase English letters.

You will replace every non-digit character with a space. For example, ""a123bc34d8ef34"" will become "" 123  34 8  34"". Notice that you are left with some integers that are separated by at least one space: ""123"", ""34"", ""8"", and ""34"".

Return the number of different integers after performing the replacement operations on word.

Two integers are considered different if their decimal representations without any leading zeros are different.",['string'],Easy,124,24,34230,16251,[],"[('c++', 16), ('javascript', 14), ('java', 13), ('hashset', 12), ('python', 11), ('python3', 11), ('cpp', 8), ('java-solution', 8), ('regex', 8), ('python 3', 6), ('set', 6), ('c#', 4), ('simple', 4), ('easy-understanding', 3), ('javascript solution', 3), ('one-liner', 3), ('regexp', 3), ('swift', 3), ('cpp solution', 2), ('explained', 2), ('hashmap', 2), ('intuitive', 2), ('kotlin', 2), ('ruby', 2), ('sets', 2), ('string', 2), ('100 space', 1), ('100 speed', 1), ('biginteger', 1), ('commented', 1), ('comments', 1), ('different integers', 1), ('easy understanding', 1), ('easy-understand', 1), ('easytounderstand', 1), ('efficient', 1), ('golang', 1), ('hashes', 1), ('implementation', 1), ('java regex', 1), ('linear memory', 1), ('linear time', 1), ('linear-time-space', 1), ('lineartime', 1), ('map', 1), ('no regex', 1), ('one line', 1), ('pointers', 1), ('regexmatch', 1), ('regular expression', 1), ('rust', 1), ('scala', 1), ('self explanatory', 1), ('short', 1), ('simple-solution', 1), ('stringbuilder', 1), ('stringbuilder in java', 1), ('substring', 1), ('swift5', 1), ('typescript', 1), ('ultra simple', 1), ('upvote', 1)]"
1798,Maximum Number of Consecutive Values You Can Make,https://leetcode.com/problems/maximum-number-of-consecutive-values-you-can-make,"You are given an integer array coins of length n which represents the n coins that you own. The value of the ith coin is coins[i]. You can make some value x if you can choose some of your n coins such that their values sum up to x.

Return the maximum number of consecutive integer values that you can make with your coins starting from and including 0.

Note that you may have multiple coins of the same value.",['greedy'],Medium,255,24,11445,5136,"[""Patching Array""]","[('javascript', 4), ('java', 3), ('python3', 3), ('c++', 2), ('clean code', 2), ('golang', 2), ('python', 2), ('sort', 2), ('swift', 2), ('100 percentage fastest', 1), ('c++ solution', 1), ('combination', 1), ('combination sum', 1), ('combinatorics', 1), ('cpp', 1), ('cpp solution', 1), ('dynamic programming', 1), ('go', 1), ('golang-solution', 1), ('greedy', 1), ('greedy approach', 1), ('js', 1), ('optimisation', 1), ('performance', 1), ('python-solution', 1), ('treemap', 1), ('unique solution', 1), ('without sorting', 1)]"
1802,Maximum Value at a Given Index in a Bounded Array,https://leetcode.com/problems/maximum-value-at-a-given-index-in-a-bounded-array,"You are given three positive integers: n, index, and maxSum. You want to construct an array nums (0-indexed) that satisfies the following conditions:


	nums.length == n
	nums[i] is a positive integer where 0 <= i < n.
	abs(nums[i] - nums[i+1]) <= 1 where 0 <= i < n-1.
	The sum of all the elements of nums does not exceed maxSum.
	nums[index] is maximized.


Return nums[index] of the constructed array.

Note that abs(x) equals x if x >= 0, and -x otherwise.","['binary-search', 'greedy']",Medium,231,38,20354,5650,[],"[('binary-search', 10), ('c++', 7), ('greedy', 5), ('python', 5), ('binary search', 4), ('math', 4), ('python3', 4), ('binarysearch', 3), ('java', 3), ('swift', 2), ('#greedy', 1), ('#python', 1), ('c#', 1), ('easy', 1), ('fast-solution', 1), ('golang', 1), ('implementation', 1), ('intuitive', 1), ('javascript', 1), ('ruby', 1), ('two pointer approach', 1), ('two pointers', 1)]"
1801,Number of Orders in the Backlog,https://leetcode.com/problems/number-of-orders-in-the-backlog,"You are given a 2D integer array orders, where each orders[i] = [pricei, amounti, orderTypei] denotes that amounti orders have been placed of type orderTypei at the price pricei. The orderTypei is:


	0 if it is a batch of buy orders, or
	1 if it is a batch of sell orders.


Note that orders[i] represents a batch of amounti independent orders with the same price and order type. All orders represented by orders[i] will be placed before all orders represented by orders[i+1] for all valid i.

There is a backlog that consists of orders that have not been executed. The backlog is initially empty. When an order is placed, the following happens:


	If the order is a buy order, you look at the sell order with the smallest price in the backlog. If that sell order's price is smaller than or equal to the current buy order's price, they will match and be executed, and that sell order will be removed from the backlog. Else, the buy order is added to the backlog.
	Vice versa, if the order is a sell order, you look at the buy order with the largest price in the backlog. If that buy order's price is larger than or equal to the current sell order's price, they will match and be executed, and that buy order will be removed from the backlog. Else, the sell order is added to the backlog.


Return the total amount of orders in the backlog after placing all the orders from the input. Since this number can be large, return it modulo 109 + 7.","['heap', 'greedy']",Medium,91,122,13699,5992,[],"[('priority queue', 14), ('heap', 10), ('c++', 9), ('java', 7), ('python', 6), ('python3', 5), ('treemap', 5), ('heapq', 3), ('priority-queue', 3), ('c#', 2), ('easy', 2), ('javascript', 2), ('binary-search', 1), ('clean code', 1), ('comments-added', 1), ('cpp', 1), ('dictionary', 1), ('feedback', 1), ('go', 1), ('golang', 1), ('heaps', 1), ('java-solution', 1), ('leetcode', 1), ('map', 1), ('ordered map', 1), ('priorityqueue', 1), ('python 3', 1), ('ruby', 1), ('rust', 1), ('simple', 1), ('sortedlist', 1), ('swift', 1), ('tree map', 1)]"
1800,Maximum Ascending Subarray Sum,https://leetcode.com/problems/maximum-ascending-subarray-sum,"Given an array of positive integers nums, return the maximum possible sum of an ascending subarray in nums.

A subarray is defined as a contiguous sequence of numbers in an array.

A subarray [numsl, numsl+1, ..., numsr-1, numsr] is ascending if for all i where l <= i < r, numsi  < numsi+1. Note that a subarray of size 1 is ascending.",['two-pointers'],Easy,135,4,21822,14215,[],"[('c++', 17), ('java', 13), ('python', 11), ('javascript', 8), ('cpp', 7), ('python3', 6), ('kadane algorithm', 5), ('python 3', 5), ('easy', 4), ('c#', 3), ('easy-understanding', 3), ('cpp solution', 2), ('loop', 2), ('simple', 2), ('slidingwindow', 2), ('swift', 2), ('0ms', 1), ('100 faster cpp', 1), ('arrays', 1), ('beginner friendly', 1), ('c', 1), ('comments-added', 1), ('constant space', 1), ('efficient solution', 1), ('fast and simple', 1), ('fast-solution', 1), ('for loop', 1), ('go', 1), ('go-solution', 1), ('golang', 1), ('golang solution', 1), ('golang-solution', 1), ('interview', 1), ('java-solution', 1), ('javascript solution', 1), ('js', 1), ('kadanes algo', 1), ('kotlin', 1), ('linear', 1), ('linear time', 1), ('method', 1), ('on', 1), ('one pass', 1), ('one pass solution', 1), ('optimal', 1), ('php', 1), ('recursive', 1), ('ruby', 1), ('running sum', 1), ('rust', 1), ('scala', 1), ('sliding window', 1), ('solution', 1), ('subarray', 1), ('sum', 1), ('swift5', 1), ('vector', 1), ('video-explanation', 1), ('walkthrough', 1)]"
1814,Count Nice Pairs in an Array,https://leetcode.com/problems/count-nice-pairs-in-an-array,"You are given an array nums that consists of non-negative integers. Let us define rev(x) as the reverse of the non-negative integer x. For example, rev(123) = 321, and rev(120) = 21. A pair of indices (i, j) is nice if it satisfies all of the following conditions:


	0 <= i < j < nums.length
	nums[i] + rev(nums[j]) == nums[j] + rev(nums[i])


Return the number of nice pairs of indices. Since that number can be too large, return it modulo 109 + 7.","['array', 'hash-table']",Medium,189,13,16438,6345,[],"[('c++', 17), ('hashmap', 16), ('python', 16), ('easy-understanding', 9), ('clean code', 7), ('java', 7), ('python3', 7), ('cpp', 6), ('easy-to-understand', 6), ('maths', 6), ('beginner friendly', 5), ('python 3', 4), ('java-solution', 3), ('javascript', 3), ('c++ set', 2), ('explained', 2), ('explained solution', 2), ('hashing', 2), ('linear time', 2), ('map', 2), ('math', 2), ('ruby', 2), ('simple', 2), ('swift', 2), ('clean', 1), ('clean-efficient-code', 1), ('combination', 1), ('combinatorics', 1), ('counter', 1), ('countnicepairs', 1), ('dictionary c#', 1), ('easiest', 1), ('easy', 1), ('easy explanation', 1), ('easy-undesrtanding', 1), ('easytounderstand', 1), ('easyunderstading', 1), ('explanation', 1), ('explanation with logic', 1), ('explanations', 1), ('fast-efficient-solution', 1), ('fastest', 1), ('github', 1), ('hash map', 1), ('java reverse int', 1), ('javascript solution', 1), ('kotlin', 1), ('medium', 1), ('modular', 1), ('multiset', 1), ('nice pairs', 1), ('one-liner', 1), ('optimal', 1), ('rajat', 1), ('short', 1), ('stl', 1), ('unorderedmap', 1)]"
1815,Maximum Number of Groups Getting Fresh Donuts,https://leetcode.com/problems/maximum-number-of-groups-getting-fresh-donuts,"There is a donuts shop that bakes donuts in batches of batchSize. They have a rule where they must serve all of the donuts of a batch before serving any donuts of the next batch. You are given an integer batchSize and an integer array groups, where groups[i] denotes that there is a group of groups[i] customers that will visit the shop. Each customer will get exactly one donut.

When a group visits the shop, all customers of the group must be served before serving any of the following groups. A group will be happy if they all get fresh donuts. That is, the first customer of the group does not receive a donut that was left over from the previous group.

You can freely rearrange the ordering of the groups. Return the maximum possible number of happy groups after rearranging the groups.",['dynamic-programming'],Hard,122,9,6550,2549,[],"[('dfs', 5), ('python', 5), ('dynamic programming', 4), ('c++', 2), ('dp', 2), ('explained', 2), ('fast', 2), ('java', 2), ('brute-force', 1), ('clean', 1), ('combination', 1), ('explained solution', 1), ('explanation of logic', 1), ('greedy', 1), ('memoization', 1), ('memorization', 1), ('memoziation', 1), ('python3', 1), ('simple', 1), ('trie', 1)]"
1813,Sentence Similarity III,https://leetcode.com/problems/sentence-similarity-iii,"A sentence is a list of words that are separated by a single space with no leading or trailing spaces. For example, ""Hello World"", ""HELLO"", ""hello world hello world"" are all sentences. Words consist of only uppercase and lowercase English letters.

Two sentences sentence1 and sentence2 are similar if it is possible to insert an arbitrary sentence (possibly empty) inside one of these sentences such that the two sentences become equal. For example, sentence1 = ""Hello my name is Jane"" and sentence2 = ""Hello Jane"" can be made equal by inserting ""my name is"" between ""Hello"" and ""Jane"" in sentence2.

Given two sentences sentence1 and sentence2, return true if sentence1 and sentence2 are similar. Otherwise, return false.",['string'],Medium,99,23,15667,6824,[],"[('c++', 10), ('easy-understanding', 9), ('java', 6), ('two-pointers', 6), ('python', 5), ('cpp', 4), ('simple', 4), ('clean code', 3), ('explained', 3), ('python3', 3), ('beginner friendly', 2), ('c#', 2), ('cpp solution', 2), ('deque', 2), ('easy-to-understand', 2), ('javascript', 2), ('ruby', 2), ('100 faster cpp', 1), ('beats 100', 1), ('beginnerfriendly', 1), ('clean-efficient-code', 1), ('comments', 1), ('concise', 1), ('cpp easy', 1), ('detailed explanation', 1), ('easy and simple', 1), ('easy understanding', 1), ('easytounderstand', 1), ('elegant', 1), ('elegant solution', 1), ('explained solution', 1), ('explanation', 1), ('explanation of logic', 1), ('fasterthan100', 1), ('golang', 1), ('greedy', 1), ('java-solution', 1), ('linear time', 1), ('logic', 1), ('map', 1), ('python 3', 1), ('queue', 1), ('sentencesimilarity', 1), ('split', 1), ('stringstream', 1), ('swift', 1), ('two pointer', 1), ('twopointer', 1), ('video', 1)]"
1812,Determine Color of a Chessboard Square,https://leetcode.com/problems/determine-color-of-a-chessboard-square,"You are given coordinates, a string that represents the coordinates of a square of the chessboard. Below is a chessboard for your reference.



Return true if the square is white, and false if the square is black.

The coordinate will always represent a valid chessboard square. The coordinate will always have the letter first, and the number second.",['string'],Easy,120,6,15444,12075,[],"[('c++', 24), ('java', 17), ('cpp', 14), ('python', 14), ('javascript', 13), ('javascript solution', 8), ('python3', 7), ('beginner friendly', 6), ('easy-understanding', 6), ('fasterthan100', 6), ('simple', 6), ('c#', 5), ('cpp solution', 4), ('go', 4), ('one-liner', 4), ('ruby', 4), ('easy', 3), ('golang', 3), ('java-solution', 3), ('0ms', 2), ('c', 2), ('c++11', 2), ('clean code', 2), ('explained', 2), ('go-solution', 2), ('golang-solution', 2), ('image', 2), ('swift', 2), ('#java', 1), ('100 beat', 1), ('100 percentage fastest', 1), ('3', 1), ('ascii', 1), ('ascii-art', 1), ('basic', 1), ('begginer friendly', 1), ('bit operation', 1), ('bitwise operation', 1), ('bitwise operator', 1), ('bitwise operators', 1), ('boolean', 1), ('bytes', 1), ('c#-solution', 1), ('c++ code', 1), ('c++ solution', 1), ('char', 1), ('chess', 1), ('clean', 1), ('clean solution', 1), ('clean-efficient-code', 1), ('clear explanation', 1), ('comments-added', 1), ('csharp', 1), ('detailed explanation', 1), ('detailed thinking step', 1), ('easy to underatnd', 1), ('easy undestanding', 1), ('easy-to-understand', 1), ('explaination', 1), ('explained solution', 1), ('fast-solution', 1), ('fastest', 1), ('golang solution', 1), ('image-understanding', 1), ('imageexplanation', 1), ('intutive', 1), ('javascrip', 1), ('js', 1), ('kotlin', 1), ('less than 96.46', 1), ('odd even', 1), ('one line', 1), ('onelinecode', 1), ('oneliner', 1), ('optimisation', 1), ('performance', 1), ('python 3', 1), ('rajat', 1), ('rust', 1), ('self explanatory', 1), ('self-explanatory', 1), ('single line code', 1), ('string', 1), ('swift5', 1), ('ultra simple', 1), ('upvote', 1), ('xor', 1), ('youtube', 1)]"
1793,Maximum Score of a Good Subarray,https://leetcode.com/problems/maximum-score-of-a-good-subarray,"You are given an array of integers nums (0-indexed) and an integer k.

The score of a subarray (i, j) is defined as min(nums[i], nums[i+1], ..., nums[j]) * (j - i + 1). A good subarray is a subarray where i <= k <= j.

Return the maximum possible score of a good subarray.",['greedy'],Hard,243,14,13211,6181,"[""Largest Rectangle in Histogram""]","[('c++', 9), ('two-pointers', 7), ('cpp', 4), ('linear time', 4), ('explained', 3), ('greedy', 3), ('javascript', 3), ('binary-search', 2), ('java', 2), ('python', 2), ('python3', 2), ('slidingwindow', 2), ('stack', 2), ('100 memory', 1), ('100 space', 1), ('beating-100-submission', 1), ('binary search', 1), ('brute force to optimal', 1), ('constant memory', 1), ('constant space', 1), ('cpp solution', 1), ('detailed explanation', 1), ('easy-to-understand', 1), ('easy-understanding', 1), ('easytounderstand', 1), ('go', 1), ('golang', 1), ('greedy approach', 1), ('java-solution', 1), ('kotlin', 1), ('on', 1), ('proof', 1), ('simple', 1), ('two pointer', 1)]"
1792,Maximum Average Pass Ratio,https://leetcode.com/problems/maximum-average-pass-ratio,"There is a school that has classes of students and each class will be having a final exam. You are given a 2D integer array classes, where classes[i] = [passi, totali]. You know beforehand that in the ith class, there are totali total students, but only passi number of students will pass the exam.

You are also given an integer extraStudents. There are another extraStudents brilliant students that are guaranteed to pass the exam of any class they are assigned to. You want to assign each of the extraStudents students to a class in a way that maximizes the average pass ratio across all the classes.

The pass ratio of a class is equal to the number of students of the class that will pass the exam divided by the total number of students of the class. The average pass ratio is the sum of pass ratios of all the classes divided by the number of the classes.

Return the maximum possible average pass ratio after assigning the extraStudents students. Answers within 10-5 of the actual answer will be accepted.",['heap'],Medium,262,39,17129,9566,[],"[('heap', 15), ('priority queue', 15), ('c++', 12), ('python', 10), ('cpp', 6), ('greedy', 6), ('java', 6), ('python3', 6), ('easy-to-understand', 5), ('javascript', 4), ('max heap', 3), ('comments-added', 2), ('easy-understanding', 2), ('heapq', 2), ('java-solution', 2), ('math', 2), ('maxheap', 2), ('priorityqueue', 2), ('clean', 1), ('clean code', 1), ('commetend', 1), ('double', 1), ('easy', 1), ('easy solution', 1), ('easytounderstand', 1), ('explained', 1), ('fast-solution', 1), ('golang', 1), ('greedy approach', 1), ('help', 1), ('javascript solution', 1), ('linear memory', 1), ('memoization', 1), ('nlogn time', 1), ('no lambda function', 1), ('optimized', 1), ('performance', 1), ('pitfall', 1), ('priority-queue', 1), ('recursion', 1), ('ruby', 1), ('simple', 1), ('swift', 1), ('tle', 1), ('video-explanation', 1)]"
1791,Find Center of Star Graph,https://leetcode.com/problems/find-center-of-star-graph,"There is an undirected star graph consisting of n nodes labeled from 1 to n. A star graph is a graph where there is one center node and exactly n - 1 edges that connect the center node with every other node.

You are given a 2D integer array edges where each edges[i] = [ui, vi] indicates that there is an edge between the nodes ui and vi. Return the center of the given star graph.",['graph'],Medium,95,246,22169,18719,[],"[('c++', 19), ('python', 13), ('java', 12), ('python3', 11), ('cpp', 8), ('easy', 7), ('javascript', 7), ('graph', 6), ('python 3', 5), ('set', 4), ('constant space', 3), ('constant time', 3), ('java-solution', 3), ('map', 3), ('one-liner', 3), ('simple', 3), ('cpp solution', 2), ('dictionary', 2), ('easy-understanding', 2), ('easytounderstand', 2), ('greedy approach', 2), ('one line', 2), ('#c++', 1), ('100 space', 1), ('100 speed', 1), ('2-line solution', 1), ('3 solutions', 1), ('adjacent list', 1), ('adjacent-list', 1), ('awesome samriddhi', 1), ('broken', 1), ('broken-question', 1), ('c#', 1), ('clean code', 1), ('compare', 1), ('constant', 1), ('constant memory', 1), ('constexpr', 1), ('easy to understand', 1), ('easy understanding', 1), ('es2015', 1), ('explanation of logic', 1), ('faster', 1), ('fasterthan100', 1), ('go', 1), ('golang', 1), ('hash', 1), ('hashmap', 1), ('hashset', 1), ('indegree', 1), ('intersection', 1), ('javascrip', 1), ('javascript solution', 1), ('linear', 1), ('mrmagician', 1), ('o1', 1), ('one liner', 1), ('ordered map', 1), ('php', 1), ('python3.8', 1), ('ritik', 1), ('ruby', 1), ('simple solution', 1), ('swift', 1), ('trivial', 1), ('upvote', 1), ('very easy to understand', 1)]"
1790,Check if One String Swap Can Make Strings Equal,https://leetcode.com/problems/check-if-one-string-swap-can-make-strings-equal,"You are given two strings s1 and s2 of equal length. A string swap is an operation where you choose two indices in a string (not necessarily different) and swap the characters at these indices.

Return true if it is possible to make both strings equal by performing at most one string swap on exactly one of the strings. Otherwise, return false.",['string'],Easy,140,8,32853,19265,"[""Buddy Strings""]","[('c++', 30), ('easy-understanding', 18), ('cpp', 15), ('java', 14), ('python', 14), ('javascript', 10), ('python3', 9), ('fasterthan100', 6), ('string', 5), ('explained', 4), ('java-solution', 4), ('python 3', 4), ('0ms', 3), ('c#', 3), ('easy', 3), ('linear time', 3), ('simple', 3), ('beginner friendly', 2), ('cpp solution', 2), ('golang', 2), ('sort', 2), ('swap', 2), ('zip', 2), ('1-line', 1), ('100 beat', 1), ('100 faster cpp', 1), ('100 faster runtime', 1), ('100 memory', 1), ('100 percentage fastest', 1), ('100 space', 1), ('100 speed', 1), ('arraylist', 1), ('awesome samriddhi', 1), ('beating-100-submission', 1), ('beats 100', 1), ('begginer friendly', 1), ('brute force', 1), ('c#-solution', 1), ('clean', 1), ('comments added', 1), ('comments-added', 1), ('compair', 1), ('comparison', 1), ('constant space', 1), ('constexpr', 1), ('counting-array', 1), ('deque', 1), ('dictionary', 1), ('differences', 1), ('early termination', 1), ('easy understanding', 1), ('easytounderstand', 1), ('efficient', 1), ('es2015', 1), ('explain', 1), ('explaination', 1), ('fast', 1), ('faster', 1), ('greedy approach', 1), ('intutive', 1), ('java ac solution', 1), ('java simple', 1), ('javascrip', 1), ('linear', 1), ('linear space', 1), ('list', 1), ('logic', 1), ('logic-solution', 1), ('one pass', 1), ('one-pass', 1), ('onepass', 1), ('python3.8', 1), ('rajat', 1), ('reduce', 1), ('rest parameters', 1), ('ritik', 1), ('ruby', 1), ('solution', 1), ('sorted array', 1), ('spread operator', 1), ('string-operation', 1), ('string-view', 1), ('strings', 1), ('swift', 1), ('two pointers', 1), ('typescript', 1), ('ultra simple', 1), ('unordered set', 1), ('upvote', 1), ('vector', 1), ('very fast', 1), ('video-explanation', 1)]"
1787,Make the XOR of All Segments Equal to Zero,https://leetcode.com/problems/make-the-xor-of-all-segments-equal-to-zero,"You are given an array nums​​​ and an integer k​​​​​. The XOR of a segment [left, right] where left <= right is the XOR of all the elements with indices between left and right, inclusive: nums[left] XOR nums[left+1] XOR ... XOR nums[right].

Return the minimum number of elements to change in the array such that the XOR of all segments of size k​​​​​​ is equal to zero.",['dynamic-programming'],Hard,151,6,6027,2216,[],"[('dp', 4), ('python', 4), ('c++', 3), ('dynamic programming', 3), ('python3', 2), ('dfs', 1), ('explained', 1), ('explanation with code', 1), ('explanation with logic', 1), ('javascript', 1)]"
1786,Number of Restricted Paths From First to Last Node,https://leetcode.com/problems/number-of-restricted-paths-from-first-to-last-node,"There is an undirected weighted connected graph. You are given a positive integer n which denotes that the graph has n nodes labeled from 1 to n, and an array edges where each edges[i] = [ui, vi, weighti] denotes that there is an edge between nodes ui and vi with weight equal to weighti.

A path from node start to node end is a sequence of nodes [z0, z1, z2, ..., zk] such that z0 = start and zk = end and there is an edge between zi and zi+1 where 0 <= i <= k-1.

The distance of a path is the sum of the weights on the edges of the path. Let distanceToLastNode(x) denote the shortest distance of a path between node n and node x. A restricted path is a path that also satisfies that distanceToLastNode(zi) > distanceToLastNode(zi+1) where 0 <= i <= k-1.

Return the number of restricted paths from node 1 to node n. Since that number may be too large, return it modulo 109 + 7.","['dynamic-programming', 'graph']",Medium,259,48,17546,6316,[],"[('c++', 18), ('dfs', 8), ('dijkstra', 7), ('dp', 7), ('python', 6), ('dijkstras algorithm', 5), ('dynamic programming', 5), ('cpp', 4), ('dijksta', 4), ('memoization', 4), ('dijsktra', 3), ('java', 3), ('javascript', 3), ('bad description', 2), ('bfs', 2), ('c#', 2), ('djikstra', 2), ('python3', 2), ('bad statement', 1), ('clean code', 1), ('dfs-bottomup', 1), ('easytounderstand', 1), ('memorization', 1), ('memorized-dfs', 1), ('readable code', 1), ('ruby', 1), ('set', 1), ('shortest path', 1), ('swift', 1), ('tle', 1), ('video-explanation', 1)]"
1785,Minimum Elements to Add to Form a Given Sum,https://leetcode.com/problems/minimum-elements-to-add-to-form-a-given-sum,"You are given an integer array nums and two integers limit and goal. The array nums has an interesting property that abs(nums[i]) <= limit.

Return the minimum number of elements you need to add to make the sum of the array equal to goal. The array must maintain its property that abs(nums[i]) <= limit.

Note that abs(x) equals x if x >= 0, and -x otherwise.",['greedy'],Medium,90,92,24710,9751,[],"[('c++', 10), ('java', 9), ('python', 9), ('python3', 8), ('greedy', 7), ('cpp', 5), ('javascript', 5), ('math', 4), ('python 3', 3), ('c#', 2), ('easy-understanding', 2), ('golang', 2), ('one pass solution', 2), ('100 space', 1), ('100 speed', 1), ('100faster', 1), ('1liner', 1), ('beginnerfriendly', 1), ('cpp solution', 1), ('division', 1), ('easy implementation', 1), ('easy-to-understand', 1), ('es2015', 1), ('explanations', 1), ('fastest', 1), ('go', 1), ('greedy approach', 1), ('java-solution', 1), ('linear', 1), ('ruby', 1), ('simple', 1), ('simple solution', 1), ('simple-solution', 1), ('swift', 1), ('video-explanation', 1), ('whileloop', 1)]"
1784,Check if Binary String Has at Most One Segment of Ones,https://leetcode.com/problems/check-if-binary-string-has-at-most-one-segment-of-ones,"Given a binary string s ​​​​​without leading zeros, return true​​​ if s contains at most one contiguous segment of ones. Otherwise, return false.",['greedy'],Easy,77,216,32972,13671,[],"[('c++', 19), ('cpp', 12), ('python', 12), ('python3', 11), ('java', 8), ('javascript', 8), ('easy-understanding', 6), ('python 3', 4), ('simple', 4), ('rust', 3), ('c#', 2), ('explained', 2), ('java-solution', 2), ('one-liner', 2), ('regex', 2), ('0ms', 1), ('100 faster cpp', 1), ('beats 100', 1), ('beats 100 percent', 1), ('binary-search', 1), ('c++ solution', 1), ('c++ solution simple', 1), ('c++11', 1), ('c++17', 1), ('cplusplus', 1), ('easy', 1), ('easy understanding', 1), ('easy-to-understand', 1), ('es2015', 1), ('for loop', 1), ('golang-solution', 1), ('greedy approach', 1), ('javascrip', 1), ('javascript solution', 1), ('linear time', 1), ('linq', 1), ('loop-body', 1), ('on', 1), ('one pass', 1), ('one-line', 1), ('oneliner', 1), ('onepass', 1), ('python simple', 1), ('python with explanation', 1), ('regexp', 1), ('ruby', 1), ('simple python solution', 1), ('simple solution', 1), ('string', 1), ('super-easy', 1), ('swift', 1), ('two pointers', 1)]"
1803,Count Pairs With XOR in a Range,https://leetcode.com/problems/count-pairs-with-xor-in-a-range,"Given a (0-indexed) integer array nums and two integers low and high, return the number of nice pairs.

A nice pair is a pair (i, j) where 0 <= i < j < nums.length and low <= (nums[i] XOR nums[j]) <= high.",['trie'],Hard,135,8,6558,2867,[],"[('javascript', 4), ('python3', 3), ('trie', 3), ('brute-force', 1), ('c#', 1), ('comments-added', 1), ('easy', 1), ('explanation', 1), ('fast-fourier-transform', 1), ('figure', 1), ('java', 1), ('java-solution', 1), ('python', 1), ('python 3', 1), ('simple', 1), ('xor', 1)]"
1799,Maximize Score After N Operations,https://leetcode.com/problems/maximize-score-after-n-operations,"You are given nums, an array of positive integers of size 2 * n. You must perform n operations on this array.

In the ith operation (1-indexed), you will:


	Choose two elements, x and y.
	Receive a score of i * gcd(x, y).
	Remove x and y from nums.


Return the maximum score you can receive after performing n operations.

The function gcd(x, y) is the greatest common divisor of x and y.","['dynamic-programming', 'backtracking', 'recursion']",Hard,140,8,9157,4561,[],"[('dp', 8), ('java', 6), ('dynamic programming', 5), ('c++', 4), ('bitmask', 3), ('bitmasking', 3), ('greedy', 3), ('javascript', 3), ('priority queue', 3), ('python3', 3), ('dfs', 2), ('explained', 2), ('bit manipulation', 1), ('comments-added', 1), ('cpp', 1), ('dijsktra', 1), ('dp with bitmask', 1), ('golang', 1), ('heap', 1), ('iterative', 1), ('java-solution', 1), ('kotlin', 1), ('memoization', 1), ('pruning', 1), ('recursive', 1), ('sorting', 1), ('video explanation', 1)]"
1797,Design Authentication Manager,https://leetcode.com/problems/design-authentication-manager,"There is an authentication system that works with authentication tokens. For each session, the user will receive a new authentication token that will expire timeToLive seconds after the currentTime. If the token is renewed, the expiry time will be extended to expire timeToLive seconds after the (potentially different) currentTime.

Implement the AuthenticationManager class:


	AuthenticationManager(int timeToLive) constructs the AuthenticationManager and sets the timeToLive.
	generate(string tokenId, int currentTime) generates a new token with the given tokenId at the given currentTime in seconds.
	renew(string tokenId, int currentTime) renews the unexpired token with the given tokenId at the given currentTime in seconds. If there are no unexpired tokens with the given tokenId, the request is ignored, and nothing happens.
	countUnexpiredTokens(int currentTime) returns the number of unexpired tokens at the given currentTime.


Note that if a token expires at time t, and another action happens on time t (renew or countUnexpiredTokens), the expiration takes place before the other actions.","['hash-table', 'design']",Medium,81,18,11771,5790,[],"[('hashmap', 10), ('java', 9), ('c++', 8), ('python', 5), ('java-solution', 4), ('clean code', 3), ('javascript', 3), ('python3', 3), ('clean-code', 2), ('cpp', 2), ('dictionary', 2), ('kotlin', 2), ('100 faster runtime', 1), ('100 space', 1), ('awesome samriddhi', 1), ('binary search', 1), ('c#', 1), ('c++ solution', 1), ('cpp solution', 1), ('data structure', 1), ('data structures', 1), ('design', 1), ('dictonary', 1), ('easy understanding', 1), ('easy-to-understand', 1), ('easy-understanding', 1), ('go', 1), ('golang', 1), ('golang-solution', 1), ('hashmap java', 1), ('linear memory', 1), ('map', 1), ('optimisation', 1), ('performance', 1), ('python 3', 1), ('quadratic time', 1), ('reverse', 1), ('ritik', 1), ('ruby', 1), ('short', 1), ('swift', 1), ('system design', 1), ('treemap', 1), ('unordered map', 1)]"
1796,Second Largest Digit in a String,https://leetcode.com/problems/second-largest-digit-in-a-string,"Given an alphanumeric string s, return the second largest numerical digit that appears in s, or -1 if it does not exist.

An alphanumeric string is a string consisting of lowercase English letters and digits.",['string'],Easy,78,42,21763,10460,[],"[('c++', 18), ('java', 13), ('python', 13), ('set', 13), ('cpp', 9), ('javascript', 9), ('python3', 6), ('java-solution', 5), ('sort', 5), ('string', 5), ('c#', 4), ('simple', 4), ('easy', 3), ('easy-to-understand', 3), ('easy-understanding', 3), ('hashset', 3), ('javascript solution', 3), ('linear time', 3), ('regex', 3), ('arraylist', 2), ('c++ solution', 2), ('constant memory', 2), ('constant space', 2), ('cpp solution', 2), ('easytounderstand', 2), ('explained', 2), ('golang', 2), ('ruby', 2), ('swift', 2), ('treeset', 2), ('#array', 1), ('#duplicate removing', 1), ('#sort', 1), ('#stringarray', 1), ('0ms', 1), ('100 percentage fastest', 1), ('100 speed', 1), ('ascii', 1), ('awesome samriddhi', 1), ('begginer friendly', 1), ('beginner friendly', 1), ('beginnerfriendly', 1), ('c', 1), ('c# sortedset', 1), ('c#-solution', 1), ('c++17', 1), ('char compare', 1), ('char comparison', 1), ('efficient', 1), ('fast', 1), ('fast and simple', 1), ('filter', 1), ('frequency array', 1), ('hash table', 1), ('intutive', 1), ('iterator', 1), ('kotlin', 1), ('largest', 1), ('linear time complexity', 1), ('max heap', 1), ('multiple-ways', 1), ('one-liner', 1), ('optimisation', 1), ('performance', 1), ('priority queue', 1), ('python 3', 1), ('reduce', 1), ('ritik', 1), ('rust', 1), ('scala', 1), ('self explanatory', 1), ('strings', 1), ('typescript', 1), ('ultra simple', 1), ('upvote', 1)]"
1776,Car Fleet II,https://leetcode.com/problems/car-fleet-ii,"There are n cars traveling at different speeds in the same direction along a one-lane road. You are given an array cars of length n, where cars[i] = [positioni, speedi] represents:


	positioni is the distance between the ith car and the beginning of the road in meters. It is guaranteed that positioni < positioni+1.
	speedi is the initial speed of the ith car in meters per second.


For simplicity, cars can be considered as points moving along the number line. Two cars collide when they occupy the same position. Once a car collides with another car, they unite and form a single car fleet. The cars in the formed fleet will have the same position and the same speed, which is the initial speed of the slowest car in the fleet.

Return an array answer, where answer[i] is the time, in seconds, at which the ith car collides with the next car, or -1 if the car does not collide with the next car. Answers within 10-5 of the actual answers are accepted.",['math'],Hard,196,5,10137,4825,"[""Car Fleet""]","[('stack', 8), ('python3', 6), ('c++', 3), ('python', 3), ('c#', 2), ('java', 2), ('javascript', 2), ('priority queue', 2), ('clean code', 1), ('explanations', 1), ('heap', 1), ('javascript solution', 1), ('monotonic deque', 1), ('monotonic stack', 1)]"
1775,Equal Sum Arrays With Minimum Number of Operations,https://leetcode.com/problems/equal-sum-arrays-with-minimum-number-of-operations,"You are given two arrays of integers nums1 and nums2, possibly of different lengths. The values in the arrays are between 1 and 6, inclusive.

In one operation, you can change any integer's value in any of the arrays to any value between 1 and 6, inclusive.

Return the minimum number of operations required to make the sum of values in nums1 equal to the sum of values in nums2. Return -1​​​​​ if it is not possible to make the sum of the two arrays equal.",['greedy'],Medium,229,7,14988,7593,"[""Number of Dice Rolls With Target Sum""]","[('greedy', 11), ('python', 10), ('python3', 7), ('c++', 5), ('easy-understanding', 5), ('c#', 3), ('cpp', 3), ('linear time', 3), ('constant space', 2), ('easy-to-understand', 2), ('greedy approach', 2), ('java', 2), ('priority queue', 2), ('swift', 2), ('two-pointers', 2), ('100', 1), ('beating-100-submission', 1), ('best', 1), ('c', 1), ('easy', 1), ('explanation of logic', 1), ('explanations', 1), ('golang', 1), ('greedy algorithm', 1), ('heap', 1), ('heapq', 1), ('javascrip', 1), ('javascript', 1), ('kotlin', 1), ('linear time complexity', 1), ('python 3', 1), ('ruby', 1), ('sort', 1), ('sortings', 1), ('swift5', 1), ('two pointer technique', 1), ('well-commented', 1)]"
1774,Closest Dessert Cost,https://leetcode.com/problems/closest-dessert-cost,"You would like to make dessert and are preparing to buy the ingredients. You have n ice cream base flavors and m types of toppings to choose from. You must follow these rules when making your dessert:


	There must be exactly one ice cream base.
	You can add one or more types of topping or have no toppings at all.
	There are at most two of each type of topping.


You are given three inputs:


	baseCosts, an integer array of length n, where each baseCosts[i] represents the price of the ith ice cream base flavor.
	toppingCosts, an integer array of length m, where each toppingCosts[i] is the price of one of the ith topping.
	target, an integer representing your target price for dessert.


You want to make a dessert with a total cost as close to target as possible.

Return the closest possible cost of the dessert to target. If there are multiple, return the lower one.",['greedy'],Medium,198,28,19160,11027,[],"[('backtracking', 18), ('recursion', 15), ('c++', 14), ('dfs', 13), ('easy-understanding', 11), ('python', 11), ('cpp', 7), ('java', 7), ('javascript', 7), ('python3', 6), ('c#', 2), ('clean code', 2), ('comments-added', 2), ('dp', 2), ('explained', 2), ('python 3', 2), ('all-combinations', 1), ('backtracing', 1), ('beats 100 percent', 1), ('begineer friendly', 1), ('bfs', 1), ('bitset', 1), ('brute force', 1), ('brute-force', 1), ('c++11', 1), ('clean', 1), ('combination', 1), ('complexity', 1), ('easy understanding', 1), ('easy-to-understand', 1), ('elegant', 1), ('explained solution', 1), ('explanations', 1), ('generator', 1), ('go', 1), ('go-lang', 1), ('golang', 1), ('java-solution', 1), ('kotlin', 1), ('memoization', 1), ('nice', 1), ('optimal', 1), ('priority queue', 1), ('pruning', 1), ('recurision', 1), ('set', 1), ('subset', 1), ('swift', 1), ('video-explanation', 1), ('with-comments', 1)]"
1773,Count Items Matching a Rule,https://leetcode.com/problems/count-items-matching-a-rule,"You are given an array items, where each items[i] = [typei, colori, namei] describes the type, color, and name of the ith item. You are also given a rule represented by two strings, ruleKey and ruleValue.

The ith item is said to match the rule if one of the following is true:


	ruleKey == ""type"" and ruleValue == typei.
	ruleKey == ""color"" and ruleValue == colori.
	ruleKey == ""name"" and ruleValue == namei.


Return the number of items that match the given rule.","['array', 'string']",Easy,231,38,40942,34731,[],"[('c++', 35), ('python', 32), ('python3', 31), ('javascript', 27), ('cpp', 20), ('easy-understanding', 19), ('java', 19), ('python 3', 10), ('easy', 9), ('java-solution', 9), ('c#', 8), ('cpp solution', 6), ('javascript solution', 6), ('swift', 6), ('kotlin', 5), ('simple', 4), ('array', 3), ('comments-added', 3), ('easy-to-understand', 3), ('go', 3), ('golang', 3), ('switch-case', 3), ('100 speed', 2), ('c code', 2), ('c++ solution', 2), ('c++ solution simple', 2), ('easy to understand', 2), ('go-solution', 2), ('golang-solution', 2), ('javascrip', 2), ('kotlin-solution', 2), ('map', 2), ('php', 2), ('php solution', 2), ('switch', 2), ('1-line', 1), ('100 100', 1), ('100 faster', 1), ('100 memory', 1), ('100 space', 1), ('52ms', 1), ('array easy', 1), ('asahiocean', 1), ('beginner friendly', 1), ('beginners level', 1), ('c', 1), ('c#-solution', 1), ('c++ code', 1), ('clean code', 1), ('clear-understanding', 1), ('comments added', 1), ('counter', 1), ('countingelements', 1), ('cplusplus', 1), ('easy solution', 1), ('easy to code', 1), ('easy-undestand', 1), ('easysolution', 1), ('easytounderstand', 1), ('efficient solution', 1), ('explaination', 1), ('explanations', 1), ('fast', 1), ('fast and simple', 1), ('fastest', 1), ('filter', 1), ('for-loop', 1), ('golang solution', 1), ('hashmap', 1), ('higher order functions', 1), ('intutive', 1), ('java simple', 1), ('js', 1), ('lambda', 1), ('linear', 1), ('linear time', 1), ('loop based', 1), ('no dict', 1), ('no if else', 1), ('o-n', 1), ('on', 1), ('python3.8', 1), ('pythonic', 1), ('readable code', 1), ('reduce', 1), ('ruby', 1), ('rust', 1), ('scala', 1), ('self explanatory', 1), ('simple java solution', 1), ('simple-solution', 1), ('solution', 1), ('string', 1), ('swift5', 1), ('typescript', 1), ('ultra simple', 1), ('understanding', 1), ('upvote', 1), ('vector', 1)]"
1771,Maximize Palindrome Length From Subsequences,https://leetcode.com/problems/maximize-palindrome-length-from-subsequences,"You are given two strings, word1 and word2. You want to construct a string in the following manner:


	Choose some non-empty subsequence subsequence1 from word1.
	Choose some non-empty subsequence subsequence2 from word2.
	Concatenate the subsequences: subsequence1 + subsequence2, to make the string.


Return the length of the longest palindrome that can be constructed in the described manner. If no palindromes can be constructed, return 0.

A subsequence of a string s is a string that can be made by deleting some (possibly none) characters from s without changing the order of the remaining characters.

A palindrome is a string that reads the same forward as well as backward.",['dynamic-programming'],Hard,188,5,13910,4757,"[""Longest Palindromic Subsequence""]","[('c++', 11), ('dp', 11), ('dynamic programming', 10), ('easy-understanding', 4), ('java', 3), ('javascript', 3), ('memo', 3), ('cpp', 2), ('easy', 2), ('python3', 2), ('top down dp', 2), ('clean code', 1), ('dfs', 1), ('dynamic programmin', 1), ('explanation', 1), ('explanation with code', 1), ('golang', 1), ('javascrip', 1), ('memoization', 1), ('memoized', 1), ('python', 1), ('python 3', 1), ('recursion', 1), ('recursive', 1), ('short', 1), ('video-explanation', 1)]"
1770,Maximum Score from Performing Multiplication Operations,https://leetcode.com/problems/maximum-score-from-performing-multiplication-operations,"You are given two integer arrays nums and multipliers of size n and m respectively, where n >= m. The arrays are 1-indexed.

You begin with a score of 0. You want to perform exactly m operations. On the ith operation (1-indexed), you will:


	Choose one integer x from either the start or the end of the array nums.
	Add multipliers[i] * x to your score.
	Remove x from the array nums.


Return the maximum score after performing m operations.",['dynamic-programming'],Medium,264,80,30454,9067,"[""Stone Game VII""]","[('dp', 15), ('dynamic programming', 13), ('c++', 12), ('recursion', 8), ('java', 7), ('javascript', 5), ('memoization', 5), ('python', 4), ('cpp', 3), ('python3', 3), ('swift', 3), ('algorithm interview', 2), ('backtracking', 2), ('c#', 2), ('dfs', 2), ('easy-understanding', 2), ('golang', 2), ('javascrip', 2), ('memo', 2), ('100 speed', 1), ('100memory', 1), ('2d dynamic programming', 1), ('bottom up', 1), ('bottom-up-algorithm', 1), ('cpp doubt', 1), ('dynamic programmin', 1), ('easy to follow', 1), ('easy-to-understand', 1), ('explained', 1), ('golang-solution', 1), ('help', 1), ('iteration', 1), ('iterator', 1), ('javascript solution', 1), ('javascript unionfind', 1), ('linear space', 1), ('maximum score', 1), ('multiplication', 1), ('pointer', 1), ('question need help', 1), ('simple', 1), ('timelimit', 1), ('tle solved', 1), ('top down', 1), ('top down approach', 1), ('vector', 1), ('video-explanation', 1)]"
1769,Minimum Number of Operations to Move All Balls to Each Box,https://leetcode.com/problems/minimum-number-of-operations-to-move-all-balls-to-each-box,"You have n boxes. You are given a binary string boxes of length n, where boxes[i] is '0' if the ith box is empty, and '1' if it contains one ball.

In one operation, you can move one ball from a box to an adjacent box. Box i is adjacent to box j if abs(i - j) == 1. Note that after doing so, there may be more than one ball in some boxes.

Return an array answer of size n, where answer[i] is the minimum number of operations needed to move all the balls to the ith box.

Each answer[i] is calculated considering the initial state of the boxes.","['array', 'greedy']",Medium,365,21,31725,27436,"[""Minimum Cost to Move Chips to The Same Position""]","[('c++', 26), ('python', 18), ('java', 16), ('python3', 16), ('javascript', 10), ('cpp', 8), ('easy', 7), ('dynamic programming', 6), ('java-solution', 6), ('linear time', 6), ('python 3', 4), ('easy-understanding', 3), ('simple', 3), ('swift', 3), ('two pass', 3), ('brute force', 2), ('c', 2), ('c#', 2), ('dp', 2), ('fast-solution', 2), ('go', 2), ('golang', 2), ('javascript solution', 2), ('one-liner', 2), ('prefix sum', 2), ('two-pass', 2), ('video-explanation', 2), ('#python', 1), ('#stack', 1), ('100 faster cpp', 1), ('array', 1), ('basic approach', 1), ('beats 100 percent', 1), ('c code', 1), ('clean code', 1), ('count', 1), ('cpp solution', 1), ('easiest', 1), ('easytounderstand', 1), ('explained', 1), ('explanation', 1), ('explanation of logic', 1), ('fast and simple', 1), ('fast solution', 1), ('fastest', 1), ('functional', 1), ('go-solution', 1), ('golang-solution', 1), ('greedy', 1), ('hash table', 1), ('if', 1), ('linear', 1), ('linear solution', 1), ('linear traversal', 1), ('list-comprehension', 1), ('minimum operations', 1), ('move all balls', 1), ('prefix', 1), ('presum', 1), ('racket', 1), ('rust', 1), ('scala', 1), ('solution', 1), ('string', 1), ('suffix-sum', 1), ('two-pointers', 1), ('typescript', 1), ('typescript solution', 1), ('understanding', 1), ('using for loop', 1), ('video explanation', 1), ('with-explanation', 1)]"
1768,Merge Strings Alternately,https://leetcode.com/problems/merge-strings-alternately,"You are given two strings word1 and word2. Merge the strings by adding letters in alternating order, starting with word1. If a string is longer than the other, append the additional letters onto the end of the merged string.

Return the merged string.",['string'],Easy,172,3,30442,22902,"[""Zigzag Iterator""]","[('c++', 32), ('python', 30), ('java', 27), ('javascript', 26), ('cpp', 20), ('python3', 17), ('java-solution', 11), ('easy-understanding', 10), ('easy', 6), ('c#', 5), ('easytounderstand', 5), ('python 3', 5), ('swift', 5), ('simple', 4), ('0ms', 3), ('javascript solution', 3), ('one-liner', 3), ('ruby', 3), ('stringbuilder', 3), ('100 speed', 2), ('array', 2), ('clean', 2), ('clean code', 2), ('cpp solution', 2), ('fast-solution', 2), ('go', 2), ('golang', 2), ('javascrip', 2), ('js', 2), ('kotlin', 2), ('recursion', 2), ('scala', 2), ('string', 2), ('two-pointers', 2), ('upvote', 2), ('#easy-understanding', 1), ('1 pointer', 1), ('100 faster cpp', 1), ('2 pointer', 1), ('2 pointers', 1), ('2pointers', 1), ('awesome samriddhi', 1), ('beginner friendly', 1), ('c', 1), ('c++ code', 1), ('c++11', 1), ('clean solution', 1), ('clear-understanding', 1), ('concept first then code', 1), ('easiest', 1), ('easiest solution', 1), ('esy sol', 1), ('fast and simple', 1), ('faster than 100', 1), ('go solution', 1), ('go-solution', 1), ('golang solution', 1), ('golang-solution', 1), ('intutive', 1), ('itertools', 1), ('java ac solution', 1), ('java-8', 1), ('linear time complexity', 1), ('linked list merge', 1), ('list-slicing', 1), ('one-pointer', 1), ('pattern matching', 1), ('pointer', 1), ('prasadgandhi', 1), ('python3.8', 1), ('recursive', 1), ('ritik', 1), ('rust', 1), ('self explanatory', 1), ('shift', 1), ('short', 1), ('simple clear c++ solution', 1), ('solution', 1), ('solution-python', 1), ('string-operation', 1), ('swift5', 1), ('test-case', 1), ('test-cases', 1), ('testcase', 1), ('testcases', 1), ('try-except', 1), ('two pointer technique', 1), ('typescript', 1), ('typescript javascript', 1), ('typescript solution', 1), ('ultra simple', 1), ('video explanation', 1)]"
1782,Count Pairs Of Nodes,https://leetcode.com/problems/count-pairs-of-nodes,"You are given an undirected graph represented by an integer n, which is the number of nodes, and edges, where edges[i] = [ui, vi] which indicates that there is an undirected edge between ui and vi. You are also given an integer array queries.

The answer to the jth query is the number of pairs of nodes (a, b) that satisfy the following conditions:


	a < b
	cnt is strictly greater than queries[j], where cnt is the number of edges incident to a or b.


Return an array answers such that answers.length == queries.length and answers[j] is the answer of the jth query.

Note that there can be repeated edges.",['graph'],Hard,109,84,7249,2406,[],"[('c++', 5), ('binary-search', 3), ('fast-fourier-transform', 2), ('java', 2), ('two-pointers', 2), ('binary index tree', 1), ('binary search', 1), ('c#', 1), ('description', 1), ('explained', 1), ('frequencycounting', 1), ('graph', 1), ('hard', 1), ('implementation', 1), ('javascript', 1), ('linear time', 1), ('map-stl', 1), ('polynomial', 1), ('python', 1), ('python3', 1), ('sorting', 1), ('sparse', 1), ('two pointer', 1)]"
1781,Sum of Beauty of All Substrings,https://leetcode.com/problems/sum-of-beauty-of-all-substrings,"The beauty of a string is the difference in frequencies between the most frequent and least frequent characters.


	For example, the beauty of ""abaacc"" is 3 - 1 = 2.


Given a string s, return the sum of beauty of all of its substrings.","['hash-table', 'string']",Medium,131,58,13404,7782,[],"[('c++', 21), ('cpp', 14), ('python', 12), ('java', 7), ('python3', 7), ('frequency table', 4), ('javascript', 4), ('tle', 4), ('cpp solution', 3), ('easy-understanding', 3), ('c++ solution', 2), ('fast-solution', 2), ('map', 2), ('prefix sum', 2), ('#bruteforce', 1), ('#easysolution', 1), ('#python', 1), ('#short', 1), ('#solution', 1), ('100 faster runtime', 1), ('100 speed', 1), ('2 pointer', 1), ('2 pointers', 1), ('arrays', 1), ('brute force', 1), ('brute-force', 1), ('c#', 1), ('char array', 1), ('complexity', 1), ('counter', 1), ('dict', 1), ('dp', 1), ('easy to understand', 1), ('easytounderstand', 1), ('explanation of logic', 1), ('fast', 1), ('fast-boi', 1), ('frequency count', 1), ('hashmap', 1), ('javascript solution', 1), ('loops', 1), ('optimisation', 1), ('performance', 1), ('prefix', 1), ('python 3', 1), ('recursion', 1), ('ruby', 1), ('short concise', 1), ('simple', 1), ('sliding window', 1), ('string', 1), ('swift', 1), ('traverse', 1), ('video explanation', 1)]"
1780,Check if Number is a Sum of Powers of Three,https://leetcode.com/problems/check-if-number-is-a-sum-of-powers-of-three,"Given an integer n, return true if it is possible to represent n as the sum of distinct powers of three. Otherwise, return false.

An integer y is a power of three if there exists an integer x such that y == 3x.","['math', 'backtracking', 'recursion']",Medium,218,8,16240,10249,"[""Power of Three""]","[('c++', 30), ('cpp', 20), ('recursion', 13), ('python', 12), ('python3', 11), ('java', 10), ('cpp solution', 6), ('easy-understanding', 6), ('backtracking', 5), ('dp', 5), ('easy', 4), ('greedy', 4), ('javascript', 4), ('math', 4), ('python 3', 4), ('base3', 3), ('java-solution', 3), ('recursive', 3), ('simple', 3), ('c#', 2), ('c++ solution', 2), ('clean code', 2), ('dfs', 2), ('greedy approach', 2), ('iterative', 2), ('memoization', 2), ('ruby', 2), ('100 faster runtime', 1), ('100 speed', 1), ('3line', 1), ('awesome samriddhi', 1), ('backtracking dfs', 1), ('base-conversion', 1), ('beginners', 1), ('binary-search', 1), ('bitmask', 1), ('bitwise', 1), ('clean-efficient-code', 1), ('comment', 1), ('cpp easy', 1), ('depth first search', 1), ('easy understanding', 1), ('explained solution', 1), ('explanation of logic', 1), ('fast', 1), ('fast and simple', 1), ('fasterthan100', 1), ('greedy algorithm', 1), ('help needed', 1), ('iteration', 1), ('iteration vs recursion', 1), ('iterative approch', 1), ('iteratve-recursive', 1), ('javascrpt', 1), ('kotlin', 1), ('kotlin-solution', 1), ('list', 1), ('log', 1), ('logarithmic time', 1), ('logn', 1), ('maths', 1), ('optimisation', 1), ('performance', 1), ('pre-process', 1), ('priority queue', 1), ('pyhton3', 1), ('python solution', 1), ('recursion vs iteration', 1), ('recursive vs iterative', 1), ('ritik', 1), ('set', 1), ('short', 1), ('short c++ code', 1), ('simple clear c++ solution', 1), ('solution-python', 1), ('subsetsum', 1), ('swift', 1), ('ternary', 1), ('video explanation', 1)]"
1779,Find Nearest Point That Has the Same X or Y Coordinate,https://leetcode.com/problems/find-nearest-point-that-has-the-same-x-or-y-coordinate,"You are given two integers, x and y, which represent your current location on a Cartesian grid: (x, y). You are also given an array points where each points[i] = [ai, bi] represents that a point exists at (ai, bi). A point is valid if it shares the same x-coordinate or the same y-coordinate as your location.

Return the index (0-indexed) of the valid point with the smallest Manhattan distance from your current location. If there are multiple, return the valid point with the smallest index. If there are no valid points, return -1.

The Manhattan distance between two points (x1, y1) and (x2, y2) is abs(x1 - x2) + abs(y1 - y2).",['array'],Easy,86,19,17661,11809,"[""K Closest Points to Origin""]","[('c++', 15), ('python', 11), ('python3', 11), ('javascript', 9), ('cpp', 8), ('java', 6), ('javascript solution', 3), ('abs', 2), ('c#', 2), ('cpp solution', 2), ('easy', 2), ('go', 2), ('go-solution', 2), ('golang', 2), ('golang-solution', 2), ('js', 2), ('manhattan distance', 2), ('python 3', 2), ('rust', 2), ('simple', 2), ('#cpp', 1), ('#maps', 1), ('100 faster cpp', 1), ('100 faster runtime', 1), ('100 memory', 1), ('array', 1), ('c++ solution', 1), ('c++11', 1), ('constexpr', 1), ('distance', 1), ('easy short', 1), ('easy-to-understand', 1), ('easy-understanding', 1), ('efficient', 1), ('explaination', 1), ('explained', 1), ('explanation of logic', 1), ('functional-programming', 1), ('golang solution', 1), ('hashmap', 1), ('images', 1), ('java-solution', 1), ('javascrip', 1), ('list-comprehension', 1), ('matrix', 1), ('minarg', 1), ('minimumindex', 1), ('one-liner', 1), ('optimisation', 1), ('performance', 1), ('point', 1), ('points', 1), ('priorityqueue', 1), ('ruby', 1), ('scala', 1), ('simple clear c++ solution', 1), ('sort', 1), ('sort-function', 1), ('sorted array', 1), ('straight-forward', 1), ('swift', 1), ('test-cases', 1), ('testcase error', 1), ('tuple', 1), ('vector', 1), ('video explanation', 1)]"
1761,Minimum Degree of a Connected Trio in a Graph,https://leetcode.com/problems/minimum-degree-of-a-connected-trio-in-a-graph,"You are given an undirected graph. You are given an integer n which is the number of nodes in the graph and an array edges, where each edges[i] = [ui, vi] indicates that there is an undirected edge between ui and vi.

A connected trio is a set of three nodes where there is an edge between every pair of them.

The degree of a connected trio is the number of edges where one endpoint is in the trio, and the other is not.

Return the minimum degree of a connected trio in the graph, or -1 if the graph has no connected trios.",['graph'],Hard,66,121,16217,6101,[],"[('c++', 10), ('graph', 6), ('cpp', 5), ('adjacency matrix', 4), ('java', 3), ('adjacency list', 2), ('easy-understanding', 2), ('help', 2), ('java-solution', 2), ('javascript', 2), ('python', 2), ('python3', 2), ('tle', 2), ('adjacent-list', 1), ('backtracking', 1), ('bfs', 1), ('brute force', 1), ('c#', 1), ('compute', 1), ('explanation with code', 1), ('graph coloring', 1), ('high performance', 1), ('javascript solution', 1), ('kotlin', 1), ('subset', 1), ('video', 1)]"
1760,Minimum Limit of Balls in a Bag,https://leetcode.com/problems/minimum-limit-of-balls-in-a-bag,"You are given an integer array nums where the ith bag contains nums[i] balls. You are also given an integer maxOperations.

You can perform the following operation at most maxOperations times:


	Take any bag of balls and divide it into two new bags with a positive number of balls.

	
		For example, a bag of 5 balls can become two new bags of 1 and 4 balls, or two new bags of 2 and 3 balls.
	
	


Your penalty is the maximum number of balls in a bag. You want to minimize your penalty after the operations.

Return the minimum possible penalty after performing the operations.","['binary-search', 'heap']",Medium,391,21,15117,8036,[],"[('binary-search', 17), ('c++', 6), ('java', 4), ('python', 4), ('javascript', 3), ('binarysearch', 2), ('cpp', 2), ('java-solution', 2), ('python3', 2), ('binary search', 1), ('c code', 1), ('c#', 1), ('clean code', 1), ('dynamic programming', 1), ('easy-to-understand', 1), ('easytounderstand', 1), ('golang', 1), ('hard problems', 1), ('javascrip', 1), ('math', 1), ('python 3', 1), ('question need help', 1), ('ruby', 1), ('swift', 1), ('tricky', 1), ('video', 1), ('video-explanation', 1)]"
1759,Count Number of Homogenous Substrings,https://leetcode.com/problems/count-number-of-homogenous-substrings,"Given a string s, return the number of homogenous substrings of s. Since the answer may be too large, return it modulo 109 + 7.

A string is homogenous if all the characters of the string are the same.

A substring is a contiguous sequence of characters within a string.","['string', 'greedy']",Medium,163,17,24606,10555,"[""Consecutive Characters"", ""Number of Substrings With Only 1s""]","[('python', 17), ('c++', 12), ('python3', 11), ('cpp', 8), ('java', 8), ('math', 7), ('javascript', 6), ('java-solution', 4), ('python 3', 4), ('easy-understanding', 3), ('time-complexity-n', 3), ('c#', 2), ('easy', 2), ('easy-to-understand', 2), ('easytounderstand', 2), ('fast', 2), ('groupby', 2), ('arithmetic-operations', 1), ('c', 1), ('c code', 1), ('count', 1), ('cpp solution', 1), ('detailed explanation', 1), ('dp', 1), ('dynamic programming', 1), ('easy to understandd', 1), ('efficient solution', 1), ('explained', 1), ('factorial', 1), ('fast-solution', 1), ('homogenoussubstrings', 1), ('intuitive', 1), ('javascrip', 1), ('kotlin', 1), ('map', 1), ('optimal', 1), ('optimized', 1), ('python bfs', 1), ('rust', 1), ('similarproblem', 1), ('simple', 1), ('sliding-window', 1), ('slidingwindow', 1), ('straightforward', 1), ('string', 1), ('substring', 1), ('swift', 1), ('two pointer technique', 1), ('two pointers', 1), ('two-pointers', 1), ('unordered map', 1)]"
1758,Minimum Changes To Make Alternating Binary String,https://leetcode.com/problems/minimum-changes-to-make-alternating-binary-string,"You are given a string s consisting only of the characters '0' and '1'. In one operation, you can change any '0' to '1' or vice versa.

The string is called alternating if no two adjacent characters are equal. For example, the string ""010"" is alternating, while the string ""0100"" is not.

Return the minimum number of operations needed to make s alternating.","['array', 'greedy']",Easy,203,7,25596,14855,[],"[('python', 20), ('c++', 19), ('python3', 13), ('cpp', 11), ('java', 10), ('javascript', 6), ('python 3', 5), ('0ms', 4), ('cpp solution', 4), ('easy', 4), ('c#', 3), ('java-solution', 3), ('linear time', 3), ('linear time complexity', 3), ('on', 3), ('easy understanding', 2), ('easy-to-understand', 2), ('easy-understanding', 2), ('go', 2), ('golang', 2), ('golang-solution', 2), ('simple', 2), ('swift', 2), ('xor', 2), ('0ms runtime', 1), ('approach and code', 1), ('array', 1), ('awesome samriddhi', 1), ('binary', 1), ('brute force', 1), ('brute-force', 1), ('c', 1), ('clean code', 1), ('commented', 1), ('cpp-solution', 1), ('explanation of logic', 1), ('fast', 1), ('faster than 100', 1), ('go-solution', 1), ('greedy', 1), ('image-understanding', 1), ('kotlin', 1), ('leetcode', 1), ('linear', 1), ('naivesolution', 1), ('one pass solution', 1), ('ritik', 1), ('rust', 1), ('simple-solution', 1), ('solution c++', 1), ('string', 1), ('swift5', 1), ('tricky', 1), ('video-explanation', 1)]"
1755,Closest Subsequence Sum,https://leetcode.com/problems/closest-subsequence-sum,"You are given an integer array nums and an integer goal.

You want to choose a subsequence of nums such that the sum of its elements is the closest possible to goal. That is, if the sum of the subsequence's elements is sum, then you want to minimize the absolute difference abs(sum - goal).

Return the minimum possible value of abs(sum - goal).

Note that a subsequence of an array is an array formed by removing some elements (possibly all or none) of the original array.","['divide-and-conquer', 'meet-in-the-middle']",Hard,190,40,13107,4703,[],"[('binary-search', 4), ('java', 4), ('meet-in-the-middle', 3), ('c++', 2), ('java-solution', 2), ('python', 2), ('binary search', 1), ('c#', 1), ('detailed explanation', 1), ('dfs', 1), ('dp', 1), ('dynamic programming', 1), ('kotlin', 1), ('python3', 1), ('two-pointer method', 1)]"
1754,Largest Merge Of Two Strings,https://leetcode.com/problems/largest-merge-of-two-strings,"You are given two strings word1 and word2. You want to construct a string merge in the following way: while either word1 or word2 are non-empty, choose one of the following options:


	If word1 is non-empty, append the first character in word1 to merge and delete it from word1.

	
		For example, if word1 = ""abc"" and merge = ""dv"", then after choosing this operation, word1 = ""bc"" and merge = ""dva"".
	
	
	If word2 is non-empty, append the first character in word2 to merge and delete it from word2.
	
		For example, if word2 = ""abc"" and merge = """", then after choosing this operation, word2 = ""bc"" and merge = ""a"".
	
	


Return the lexicographically largest merge you can construct.

A string a is lexicographically larger than a string b (of the same length) if in the first position where a and b differ, a has a character strictly larger than the corresponding character in b. For example, ""abcd"" is lexicographically larger than ""abcc"" because the first position they differ is at the fourth character, and d is greater than c.","['greedy', 'suffix-array']",Medium,188,36,22478,9204,[],"[('greedy', 15), ('python', 10), ('c++', 8), ('java', 7), ('string comparison', 7), ('javascript', 5), ('python3', 5), ('string', 5), ('python 3', 4), ('dp', 3), ('greedy approach', 3), ('easy-understanding', 2), ('mergesort', 2), ('recursion', 2), ('recursive', 2), ('two-pointers', 2), ('c code', 1), ('c#', 1), ('c++ code', 1), ('character compare', 1), ('clean code', 1), ('compare', 1), ('cpp', 1), ('cpp solution', 1), ('easy', 1), ('easy to understandd', 1), ('easy-to-understand', 1), ('easytounderstand', 1), ('golang', 1), ('heap', 1), ('java-solution', 1), ('memory-limited-exceeded', 1), ('merge', 1), ('priority queue', 1), ('short c++ code', 1), ('swift', 1), ('typescript', 1), ('video-explanation', 1)]"
1753,Maximum Score From Removing Stones,https://leetcode.com/problems/maximum-score-from-removing-stones,"You are playing a solitaire game with three piles of stones of sizes a​​​​​​, b,​​​​​​ and c​​​​​​ respectively. Each turn you choose two different non-empty piles, take one stone from each, and add 1 point to your score. The game stops when there are fewer than two non-empty piles (meaning there are no more available moves).

Given three integers a​​​​​, b,​​​​​ and c​​​​​, return the maximum score you can get.","['math', 'heap']",Medium,171,21,18141,11250,[],"[('c++', 21), ('math', 13), ('java', 12), ('python', 11), ('python3', 10), ('cpp', 9), ('priority queue', 9), ('greedy', 8), ('easy-understanding', 7), ('java-solution', 5), ('easy', 4), ('cpp solution', 3), ('heap', 3), ('javascript', 3), ('python 3', 3), ('priority-queue', 2), ('priorityqueue', 2), ('sorting', 2), ('#easysolution', 1), ('#fastest', 1), ('#python3', 1), ('#simplest', 1), ('#single-line', 1), ('100', 1), ('100 faster cpp', 1), ('address', 1), ('ampersand', 1), ('backtracking', 1), ('c code', 1), ('c#-solution', 1), ('clean code', 1), ('comments-added', 1), ('detailed explanation', 1), ('easy understanding', 1), ('easy-to-understand', 1), ('easytounderstand', 1), ('explanation with code', 1), ('explanations', 1), ('heapq', 1), ('heaps', 1), ('kotlin', 1), ('largest', 1), ('maths', 1), ('maxheap', 1), ('maximum', 1), ('pointer', 1), ('pointers', 1), ('proof', 1), ('pythonpython3', 1), ('recursion', 1), ('simple', 1), ('simulation', 1), ('sort', 1), ('stone', 1), ('straight-forward', 1), ('swift', 1), ('unique', 1)]"
1752,Check if Array Is Sorted and Rotated,https://leetcode.com/problems/check-if-array-is-sorted-and-rotated,"Given an array nums, return true if the array was originally sorted in non-decreasing order, then rotated some number of positions (including zero). Otherwise, return false.

There may be duplicates in the original array.

Note: An array A rotated by x positions results in an array B of the same length such that A[i] == B[(i+x) % A.length], where % is the modulo operation.",['array'],Easy,187,31,34893,20874,[],"[('python', 18), ('python3', 17), ('c++', 15), ('cpp', 9), ('easy-understanding', 8), ('java', 8), ('javascript', 7), ('easy', 6), ('python 3', 4), ('simple', 4), ('beating-100-submission', 3), ('swift', 3), ('array', 2), ('binary-search', 2), ('count', 2), ('java-solution', 2), ('100', 1), ('100 speed', 1), ('4 lines', 1), ('ac', 1), ('brute force', 1), ('c', 1), ('c code', 1), ('c#', 1), ('clean', 1), ('coding interview', 1), ('concise', 1), ('cpp solution', 1), ('easiest solution', 1), ('easy-to-understand', 1), ('easytounderstand', 1), ('explanation', 1), ('fast and simple', 1), ('gaoling', 1), ('go', 1), ('go-solution', 1), ('golang-solution', 1), ('intutive', 1), ('iterative', 1), ('javascript solution', 1), ('kotlin', 1), ('math', 1), ('one-liner', 1), ('pointer', 1), ('python-3', 1), ('pythonic', 1), ('rotated-sorted-array', 1), ('rotation', 1), ('ruby', 1), ('rust', 1), ('self explanatory', 1), ('short', 1), ('simple-solution', 1), ('space-complexity-1', 1), ('swift5', 1), ('time-complexity-n', 1), ('trick', 1), ('ultra simple', 1), ('upvote', 1), ('video-explanation', 1)]"
1765,Map of Highest Peak,https://leetcode.com/problems/map-of-highest-peak,"You are given an integer matrix isWater of size m x n that represents a map of land and water cells.


	If isWater[i][j] == 0, cell (i, j) is a land cell.
	If isWater[i][j] == 1, cell (i, j) is a water cell.


You must assign each cell a height in a way that follows these rules:


	The height of each cell must be non-negative.
	If the cell is a water cell, its height must be 0.
	Any two adjacent cells must have an absolute height difference of at most 1. A cell is adjacent to another cell if the former is directly north, east, south, or west of the latter (i.e., their sides are touching).


Find an assignment of heights such that the maximum height in the matrix is maximized.

Return an integer matrix height of size m x n where height[i][j] is cell (i, j)'s height. If there are multiple solutions, return any of them.","['breadth-first-search', 'graph']",Medium,212,18,12742,7077,[],"[('bfs', 32), ('c++', 14), ('java', 6), ('javascript', 5), ('python', 5), ('breadth first search', 4), ('c#', 4), ('cpp', 4), ('python 3', 3), ('clean code', 2), ('easy-understanding', 2), ('simple', 2), ('swift', 2), ('tle', 2), ('bfs ruby', 1), ('clean', 1), ('clean solution', 1), ('clean-efficient-code', 1), ('concise', 1), ('easy', 1), ('fasterthan100', 1), ('flood-fill', 1), ('graph', 1), ('java-solution', 1), ('javascript solution', 1), ('js', 1), ('level order traversal', 1), ('linear time', 1), ('python bfs', 1), ('python bfs iterative', 1), ('python iterative', 1), ('python python3', 1), ('python3', 1), ('queue', 1), ('self-explanatory', 1), ('simple clear c++ solution', 1), ('tree like', 1), ('video-explanation', 1)]"
1766,Tree of Coprimes,https://leetcode.com/problems/tree-of-coprimes,"There is a tree (i.e., a connected, undirected graph that has no cycles) consisting of n nodes numbered from 0 to n - 1 and exactly n - 1 edges. Each node has a value associated with it, and the root of the tree is node 0.

To represent this tree, you are given an integer array nums and a 2D array edges. Each nums[i] represents the ith node's value, and each edges[j] = [uj, vj] represents an edge between nodes uj and vj in the tree.

Two values x and y are coprime if gcd(x, y) == 1 where gcd(x, y) is the greatest common divisor of x and y.

An ancestor of a node i is any other node on the shortest path from node i to the root. A node is not considered an ancestor of itself.

Return an array ans of size n, where ans[i] is the closest ancestor to node i such that nums[i] and nums[ans[i]] are coprime, or -1 if there is no such ancestor.","['math', 'tree', 'depth-first-search', 'breadth-first-search']",Hard,127,11,8142,2987,[],"[('dfs', 10), ('c++', 7), ('java', 3), ('bfs', 2), ('javascript', 2), ('approach', 1), ('c#', 1), ('cpp', 1), ('depth first search', 1), ('direct', 1), ('help', 1), ('help needed', 1), ('java-solution', 1), ('memoization', 1), ('python 3', 1), ('python3', 1), ('simple', 1), ('stack', 1), ('tree', 1), ('video-explanation', 1)]"
1764,Form Array by Concatenating Subarrays of Another Array,https://leetcode.com/problems/form-array-by-concatenating-subarrays-of-another-array,"You are given a 2D integer array groups of length n. You are also given an integer array nums.

You are asked if you can choose n disjoint subarrays from the array nums such that the ith subarray is equal to groups[i] (0-indexed), and if i > 0, the (i-1)th subarray appears before the ith subarray in nums (i.e. the subarrays must be in the same order as groups).

Return true if you can do this task, and false otherwise.

Note that the subarrays are disjoint if and only if there is no index k such that nums[k] belongs to more than one subarray. A subarray is a contiguous sequence of elements within an array.","['array', 'greedy']",Medium,106,16,13011,7070,[],"[('c++', 13), ('c#', 4), ('cpp', 4), ('java', 4), ('kmp algorithm', 4), ('python3', 4), ('greedy', 3), ('python', 3), ('array', 2), ('easy', 2), ('javascript', 2), ('kmp', 2), ('simple', 2), ('0ms runtime', 1), ('beats 100', 1), ('biweekly contest 46', 1), ('brute force', 1), ('clean code', 1), ('comments-added', 1), ('cpp solution', 1), ('dp', 1), ('easy-to-understand', 1), ('efficient solution', 1), ('explained', 1), ('explanations', 1), ('fast-solution', 1), ('go', 1), ('golang', 1), ('golang-solution', 1), ('greedy approach', 1), ('hindi', 1), ('implementation', 1), ('kotlin', 1), ('linear time complexity', 1), ('map', 1), ('naive matching', 1), ('one-liner', 1), ('pattern matching', 1), ('regex', 1), ('ruby', 1), ('stack', 1), ('string', 1), ('swift', 1), ('two-pointers', 1), ('vector', 1), ('video', 1), ('window-sliding', 1)]"
1763,Longest Nice Substring,https://leetcode.com/problems/longest-nice-substring,"A string s is nice if, for every letter of the alphabet that s contains, it appears both in uppercase and lowercase. For example, ""abABB"" is nice because 'A' and 'a' appear, and 'B' and 'b' appear. However, ""abA"" is not because 'b' appears, but 'B' does not.

Given a string s, return the longest substring of s that is nice. If there are multiple, return the substring of the earliest occurrence. If there are none, return an empty string.",['string'],Easy,144,143,15211,9328,[],"[('c++', 12), ('java', 8), ('python', 7), ('brute force', 5), ('c#', 4), ('cpp', 4), ('javascript', 4), ('c++11', 3), ('longest substring', 3), ('python3', 3), ('substr', 3), ('easy', 2), ('golang', 2), ('hashset', 2), ('java-solution', 2), ('recursion', 2), ('set', 2), ('swift', 2), ('0ms', 1), ('bit manipulation', 1), ('bit masking', 1), ('brute force solution', 1), ('bruteforce', 1), ('bytes', 1), ('c', 1), ('c code', 1), ('clean code', 1), ('collections', 1), ('constant space', 1), ('divide and conqour', 1), ('divide and conquer', 1), ('divide-and-conquer', 1), ('easy-to-understand', 1), ('explained', 1), ('fast-solution', 1), ('go', 1), ('go-solution', 1), ('golang-solution', 1), ('javascrip', 1), ('javascript recursive', 1), ('javascript solution', 1), ('kotlin', 1), ('map', 1), ('not brute-force', 1), ('optimal', 1), ('quadratic time', 1), ('recursive', 1), ('rust', 1), ('simple', 1), ('simple-solution', 1), ('stream', 1), ('string', 1), ('video', 1), ('video-explanation', 1)]"
1744,Can You Eat Your Favorite Candy on Your Favorite Day?,https://leetcode.com/problems/can-you-eat-your-favorite-candy-on-your-favorite-day,"You are given a (0-indexed) array of positive integers candiesCount where candiesCount[i] represents the number of candies of the ith type you have. You are also given a 2D array queries where queries[i] = [favoriteTypei, favoriteDayi, dailyCapi].

You play a game with the following rules:


	You start eating candies on day 0.
	You cannot eat any candy of type i unless you have eaten all candies of type i - 1.
	You must eat at least one candy per day until you have eaten all the candies.


Construct a boolean array answer such that answer.length == queries.length and answer[i] is true if you can eat a candy of type favoriteTypei on day favoriteDayi without eating more than dailyCapi candies on any day, and false otherwise. Note that you can eat different types of candy on the same day, provided that you follow rule 2.

Return the constructed array answer.",['math'],Medium,59,190,19399,5966,[],"[('python', 5), ('prefix sum', 3), ('python3', 3), ('swift', 3), ('python 3', 2), ('accumulate', 1), ('c#', 1), ('c++', 1), ('conditions', 1), ('cpp', 1), ('explained', 1), ('java', 1), ('javascript', 1), ('math', 1), ('tse', 1), ('typescript', 1)]"
1745,Palindrome Partitioning IV,https://leetcode.com/problems/palindrome-partitioning-iv,"Given a string s, return true if it is possible to split the string s into three non-empty palindromic substrings. Otherwise, return false.​​​​​

A string is said to be palindrome if it the same string when reversed.","['string', 'dynamic-programming']",Hard,219,4,15982,7904,"[""Palindrome Partitioning"", ""Palindrome Partitioning II"", ""Palindrome Partitioning III""]","[('c++', 9), ('dynamic programming', 8), ('dp', 4), ('python', 4), ('java', 3), ('python3', 3), ('dynamic-programming', 2), ('java-solution', 2), ('kotlin', 2), ('python 3', 2), ('beginner friendly', 1), ('c#', 1), ('commented', 1), ('cpp', 1), ('easy', 1), ('easy-understanding', 1), ('help needed', 1), ('javascrip', 1), ('javascript', 1), ('linear memory', 1), ('linear-time', 1), ('lru cache', 1), ('manacher-algorithm', 1), ('memoisation', 1), ('memoization', 1), ('palindrome', 1), ('recursion palindrome', 1), ('ruby', 1), ('simple', 1), ('space-complexity', 1), ('swift', 1), ('time-complexity', 1), ('two-pointers', 1)]"
1743,Restore the Array From Adjacent Pairs,https://leetcode.com/problems/restore-the-array-from-adjacent-pairs,"There is an integer array nums that consists of n unique elements, but you have forgotten it. However, you do remember every pair of adjacent elements in nums.

You are given a 2D integer array adjacentPairs of size n - 1 where each adjacentPairs[i] = [ui, vi] indicates that the elements ui and vi are adjacent in nums.

It is guaranteed that every adjacent pair of elements nums[i] and nums[i+1] will exist in adjacentPairs, either as [nums[i], nums[i+1]] or [nums[i+1], nums[i]]. The pairs can appear in any order.

Return the original array nums. If there are multiple solutions, return any of them.",['greedy'],Medium,254,4,16534,10529,[],"[('c++', 17), ('python', 12), ('graph', 11), ('dfs', 10), ('python3', 10), ('java', 7), ('map', 6), ('cpp', 5), ('python 3', 4), ('java-solution', 3), ('adjacency list', 2), ('bfs', 2), ('hashmap', 2), ('javascript', 2), ('swift', 2), ('#bfs', 1), ('#dfs', 1), ('#java', 1), ('adjacency', 1), ('c#', 1), ('c++solution', 1), ('clean code', 1), ('cpp solution', 1), ('defaultdict', 1), ('depth first search', 1), ('dfs-iterative', 1), ('easy-to-understand', 1), ('easy-understanding', 1), ('explained', 1), ('fast-solution', 1), ('graphs', 1), ('greedy', 1), ('hash', 1), ('hash map', 1), ('indegree', 1), ('iterative', 1), ('iterative-dfs', 1), ('set', 1), ('space-complexity', 1), ('stack', 1), ('time-complexity', 1), ('topilogical sort', 1), ('ts', 1), ('typescript', 1), ('undirected graph', 1), ('video-explanation', 1)]"
1739,Building Boxes,https://leetcode.com/problems/building-boxes,"You have a cubic storeroom where the width, length, and height of the room are all equal to n units. You are asked to place n boxes in this room where each box is a cube of unit side length. There are however some rules to placing the boxes:


	You can place the boxes anywhere on the floor.
	If box x is placed on top of the box y, then each side of the four vertical sides of the box y must either be adjacent to another box or to a wall.


Given an integer n, return the minimum possible number of boxes touching the floor.","['math', 'binary-search']",Hard,139,22,6920,3423,[],"[('math', 5), ('binary-search', 4), ('cpp', 4), ('binary search', 3), ('c++', 3), ('javascript', 3), ('c#', 2), ('python3', 2), ('swift', 2), ('c', 1), ('constant space', 1), ('constant time', 1), ('csharp', 1), ('easy-understanding', 1), ('go', 1), ('java', 1), ('java-solution', 1), ('javascript solution', 1), ('mathematics', 1), ('php', 1), ('python', 1)]"
1738,Find Kth Largest XOR Coordinate Value,https://leetcode.com/problems/find-kth-largest-xor-coordinate-value,"You are given a 2D matrix of size m x n, consisting of non-negative integers. You are also given an integer k.

The value of coordinate (a, b) of the matrix is the XOR of all matrix[i][j] where 0 <= i <= a < m and 0 <= j <= b < n (0-indexed).

Find the kth largest value (1-indexed) of all the coordinates of matrix.",['array'],Medium,129,21,13705,8573,[],"[('c++', 11), ('python', 8), ('dynamic programming', 7), ('easy-understanding', 6), ('cpp', 5), ('easy-to-understand', 5), ('dp', 4), ('java', 4), ('python3', 4), ('prefix', 2), ('prefix sum', 2), ('priority queue', 2), ('swift', 2), ('video-explanation', 2), ('array', 1), ('beginner friendly', 1), ('bottomup', 1), ('brainteaser', 1), ('dynamic-programming', 1), ('easy', 1), ('explanation with logic', 1), ('fast', 1), ('fast-solution', 1), ('heap', 1), ('heapq', 1), ('java ac solution', 1), ('javascript', 1), ('kth largest element', 1), ('matrix', 1), ('maxheap', 1), ('min q', 1), ('nthelement', 1), ('prefix function', 1), ('priority-queue', 1), ('python 3', 1), ('simple', 1), ('simplest', 1), ('single pass', 1), ('timeout', 1), ('tle', 1), ('xor', 1)]"
1737,Change Minimum Characters to Satisfy One of Three Conditions,https://leetcode.com/problems/change-minimum-characters-to-satisfy-one-of-three-conditions,"You are given two strings a and b that consist of lowercase letters. In one operation, you can change any character in a or b to any lowercase letter.

Your goal is to satisfy one of the following three conditions:


	Every letter in a is strictly less than every letter in b in the alphabet.
	Every letter in b is strictly less than every letter in a in the alphabet.
	Both a and b consist of only one distinct letter.


Return the minimum number of operations needed to achieve your goal.","['string', 'greedy']",Medium,146,191,20202,6095,[],"[('python', 4), ('easy-understanding', 3), ('java', 3), ('c++', 2), ('fast-solution', 2), ('javascript', 2), ('swift', 2), ('clean code', 1), ('easy-to-understand', 1), ('explained', 1), ('fast', 1), ('greedy', 1), ('hashmap', 1), ('image-understanding', 1), ('java-solution', 1), ('javascrip', 1), ('python 3', 1), ('python3', 1), ('simple', 1)]"
1736,Latest Time by Replacing Hidden Digits,https://leetcode.com/problems/latest-time-by-replacing-hidden-digits,"You are given a string time in the form of  hh:mm, where some of the digits in the string are hidden (represented by ?).

The valid times are those inclusively between 00:00 and 23:59.

Return the latest valid time you can get from time by replacing the hidden digits.","['string', 'greedy']",Easy,107,67,34233,14105,[],"[('c++', 17), ('python', 13), ('java', 9), ('cpp', 8), ('javascript', 7), ('python3', 7), ('python 3', 6), ('explained', 4), ('simple', 4), ('comments', 3), ('easy', 3), ('easy-to-understand', 3), ('easy-understanding', 3), ('string', 3), ('c', 2), ('commented', 2), ('fasterthan100', 2), ('brute force', 1), ('brute-force', 1), ('c#', 1), ('c++ easy to understand', 1), ('c++11', 1), ('comments-added', 1), ('constant time', 1), ('constraint-satisfaction', 1), ('contest', 1), ('cpp solution', 1), ('csp', 1), ('easy-to-understad', 1), ('go', 1), ('golang', 1), ('google', 1), ('greedy', 1), ('hashmap', 1), ('intuitive', 1), ('java-solution', 1), ('javascript solution', 1), ('kotlin', 1), ('lambda function', 1), ('latest time', 1), ('latesttime', 1), ('php', 1), ('php solution', 1), ('python3.8', 1), ('pythonic', 1), ('pythonpython3', 1), ('rajat', 1), ('replacing hidden digits', 1), ('rust', 1), ('scala', 1), ('self explanatory', 1), ('solution', 1), ('stringbuilder', 1), ('swift', 1), ('ultra simple', 1), ('upvote', 1)]"
1751,Maximum Number of Events That Can Be Attended II,https://leetcode.com/problems/maximum-number-of-events-that-can-be-attended-ii,"You are given an array of events where events[i] = [startDayi, endDayi, valuei]. The ith event starts at startDayi and ends at endDayi, and if you attend this event, you will receive a value of valuei. You are also given an integer k which represents the maximum number of events you can attend.

You can only attend one event at a time. If you choose to attend an event, you must attend the entire event. Note that the end day is inclusive: that is, you cannot attend two events where one of them starts and the other ends on the same day.

Return the maximum sum of values that you can receive by attending events.","['binary-search', 'dynamic-programming']",Hard,192,3,10234,4959,"[""Maximum Number of Events That Can Be Attended""]","[('dynamic programming', 12), ('dp', 8), ('python3', 6), ('java', 4), ('c++', 3), ('memoization', 3), ('python', 3), ('recursion', 3), ('binary-search', 2), ('java-solution', 2), ('javascript', 2), ('python 3', 2), ('coordinate compression', 1), ('cpp', 1), ('dynamic', 1), ('hashmap', 1), ('javascript solution', 1), ('sort', 1), ('sorting', 1), ('tabulation', 1)]"
1750,Minimum Length of String After Deleting Similar Ends,https://leetcode.com/problems/minimum-length-of-string-after-deleting-similar-ends,"Given a string s consisting only of characters 'a', 'b', and 'c'. You are asked to apply the following algorithm on the string any number of times:


	Pick a non-empty prefix from the string s where all the characters in the prefix are equal.
	Pick a non-empty suffix from the string s where all the characters in this suffix are equal.
	The prefix and the suffix should not intersect at any index.
	The characters from the prefix and suffix must be the same.
	Delete both the prefix and the suffix.


Return the minimum length of s after performing the above operation any number of times (possibly zero times).",['two-pointers'],Medium,121,10,18748,7931,[],"[('c++', 24), ('two-pointers', 17), ('python', 11), ('cpp', 10), ('easy-understanding', 10), ('java', 6), ('python3', 5), ('easy', 4), ('java-solution', 4), ('python 3', 4), ('javascript', 3), ('two pointers', 3), ('two-pointer', 3), ('c#', 2), ('cpp solution', 2), ('deque', 2), ('greedy', 2), ('brute-force', 1), ('c++ solution', 1), ('char comparison', 1), ('character comparison', 1), ('clean code', 1), ('cpp easy', 1), ('easy solution', 1), ('easy-solution', 1), ('explain', 1), ('explained', 1), ('go', 1), ('go-solution', 1), ('golang', 1), ('golang solution', 1), ('golang-solution', 1), ('image', 1), ('javascript solution', 1), ('kotlin', 1), ('pointer', 1), ('popback', 1), ('popfront', 1), ('ruby', 1), ('space-complexity-1', 1), ('string', 1), ('string parsing', 1), ('strings', 1), ('strings parsing', 1), ('substr', 1), ('swift', 1), ('time limit exceeded', 1), ('time-complexity-n', 1), ('trim', 1), ('two-pointer method', 1), ('twopointer', 1), ('vector', 1), ('video explanation', 1)]"
1749,Maximum Absolute Sum of Any Subarray,https://leetcode.com/problems/maximum-absolute-sum-of-any-subarray,"You are given an integer array nums. The absolute sum of a subarray [numsl, numsl+1, ..., numsr-1, numsr] is abs(numsl + numsl+1 + ... + numsr-1 + numsr).

Return the maximum absolute sum of any (possibly empty) subarray of nums.

Note that abs(x) is defined as follows:


	If x is a negative integer, then abs(x) = -x.
	If x is a non-negative integer, then abs(x) = x.",['greedy'],Medium,248,7,17100,9016,"[""Maximum Subarray""]","[('c++', 12), ('kadane algorithm', 12), ('python', 10), ('easy-understanding', 8), ('python3', 8), ('java', 6), ('cpp', 5), ('cpp solution', 4), ('prefix sum', 3), ('python 3', 3), ('dp', 2), ('java-solution', 2), ('javascript', 2), ('kadanes algo', 2), ('simple', 2), ('array of vectors', 1), ('beginner friendly', 1), ('beginners level', 1), ('c', 1), ('c#', 1), ('c++ solution', 1), ('clean', 1), ('easy to understand', 1), ('easy-to-understand', 1), ('easytounderstand', 1), ('eazy', 1), ('expalanation', 1), ('fast', 1), ('interview question', 1), ('kadane', 1), ('kandane', 1), ('kotlin', 1), ('linear time', 1), ('maximum', 1), ('maxsubarray', 1), ('optimal', 1), ('optimisation', 1), ('performance', 1), ('sequence', 1), ('sequences', 1), ('series', 1), ('slidingwindow', 1), ('sort', 1), ('space-complexity-1', 1), ('subsequence', 1), ('swift', 1), ('time-complexity-n', 1), ('two passes', 1), ('two-pointer', 1)]"
1748,Sum of Unique Elements,https://leetcode.com/problems/sum-of-unique-elements,"You are given an integer array nums. The unique elements of an array are the elements that appear exactly once in the array.

Return the sum of all the unique elements of nums.","['array', 'hash-table']",Easy,257,8,39032,29103,[],"[('python', 35), ('c++', 30), ('python3', 27), ('java', 26), ('cpp', 19), ('hashmap', 19), ('javascript', 16), ('java-solution', 10), ('easy', 8), ('array', 7), ('simple', 7), ('easy-understanding', 6), ('python 3', 6), ('cpp solution', 5), ('hash table', 5), ('js', 5), ('go', 4), ('kotlin', 4), ('brute force', 3), ('fasterthan100', 3), ('javascript solution', 3), ('map', 3), ('unordered map', 3), ('100 speed', 2), ('beginner friendly', 2), ('c', 2), ('c#', 2), ('c++ solution', 2), ('c++11', 2), ('dictionary', 2), ('easytounderstand', 2), ('explained', 2), ('fast and simple', 2), ('fast-solution', 2), ('go-solution', 2), ('golang', 2), ('golang-solution', 2), ('map-stl', 2), ('multiset', 2), ('one-liner', 2), ('ruby', 2), ('set', 2), ('stl', 2), ('swift', 2), ('unorderedmap', 2), ('#dictionary', 1), ('#python', 1), ('#python 3', 1), ('0ms', 1), ('100', 1), ('100 memory', 1), ('5 lines', 1), ('ac', 1), ('array iteration', 1), ('basics', 1), ('c++ code', 1), ('constant space', 1), ('count sort', 1), ('cpp easy', 1), ('data structure', 1), ('data-structures', 1), ('dict', 1), ('easy code', 1), ('easy understanding', 1), ('es6', 1), ('fastest', 1), ('functional-programming', 1), ('github', 1), ('hash', 1), ('hashing', 1), ('intutive', 1), ('iterator', 1), ('java ac solution', 1), ('java-8', 1), ('javascriptes6', 1), ('javasript', 1), ('linear', 1), ('linear time', 1), ('linear time complexity', 1), ('long', 1), ('map stl', 1), ('multiple solution', 1), ('naive approach', 1), ('one pass', 1), ('one pass solution', 1), ('pyhton', 1), ('rust', 1), ('scala', 1), ('self-explanatory', 1), ('simple-solution', 1), ('simplest', 1), ('single-loop', 1), ('streams', 1), ('sum', 1), ('ultra simple', 1), ('unordered set', 1), ('upvote', 1), ('vector', 1)]"
1727,Largest Submatrix With Rearrangements,https://leetcode.com/problems/largest-submatrix-with-rearrangements,"You are given a binary matrix matrix of size m x n, and you are allowed to rearrange the columns of the matrix in any order.

Return the area of the largest submatrix within matrix where every element of the submatrix is 1 after reordering the columns optimally.","['greedy', 'sort']",Medium,361,12,12813,7545,"[""Max Area of Island""]","[('java', 6), ('c++', 5), ('java-solution', 5), ('python', 4), ('sort', 4), ('c#', 3), ('easy-understanding', 3), ('python3', 3), ('easy', 2), ('priority queue', 2), ('treemap', 2), ('100 faster runtime', 1), ('100 speed', 1), ('clear explanation', 1), ('comments-added', 1), ('cpp', 1), ('detailed explanation', 1), ('explain', 1), ('explained', 1), ('golang', 1), ('greedy', 1), ('javascript', 1), ('largest-submatrix', 1), ('matrix', 1), ('max histogram area', 1), ('no-sort', 1), ('optimal', 1), ('python 3', 1), ('rajawatbanna', 1), ('simple', 1), ('sorting', 1), ('suffix-sum', 1), ('swift', 1), ('video-explanation', 1)]"
1742,Maximum Number of Balls in a Box,https://leetcode.com/problems/maximum-number-of-balls-in-a-box,"You are working in a ball factory where you have n balls numbered from lowLimit up to highLimit inclusive (i.e., n == highLimit - lowLimit + 1), and an infinite number of boxes numbered from 1 to infinity.

Your job at this factory is to put each ball in the box with a number equal to the sum of digits of the ball's number. For example, the ball number 321 will be put in the box number 3 + 2 + 1 = 6 and the ball number 10 will be put in the box number 1 + 0 = 1.

Given two integers lowLimit and highLimit, return the number of balls in the box with the most balls.",['array'],Easy,160,33,28564,21012,[],"[('c++', 25), ('java', 15), ('python', 13), ('python3', 9), ('cpp', 8), ('easy-understanding', 8), ('javascript', 8), ('hashmap', 7), ('java-solution', 7), ('map', 5), ('python 3', 5), ('array', 4), ('cpp solution', 4), ('dictionary', 4), ('easy', 3), ('hash table', 3), ('js', 3), ('c', 2), ('c#', 2), ('explained', 2), ('go', 2), ('go-solution', 2), ('golang', 2), ('golang-solution', 2), ('javascript solution', 2), ('scala', 2), ('swift', 2), ('0ms', 1), ('1-line', 1), ('4ms', 1), ('c code', 1), ('c++ code', 1), ('c++11', 1), ('clean code', 1), ('constexpr', 1), ('count', 1), ('counting', 1), ('easiest', 1), ('easy-to-understand', 1), ('easytounderstand', 1), ('efficient solution', 1), ('explaination', 1), ('fastest', 1), ('float', 1), ('for loop', 1), ('frequency table', 1), ('golang solution', 1), ('hashmap java', 1), ('kotlin', 1), ('kotlin-solution', 1), ('leetcode contest', 1), ('map-stl', 1), ('maximize balls in box', 1), ('maximum balls in a box', 1), ('maximum-number-ball', 1), ('mode', 1), ('one-liner', 1), ('optimized', 1), ('rajawatbanna', 1), ('ruby', 1), ('rust', 1), ('simple', 1), ('simple clear c++ solution', 1), ('statistics', 1), ('ts', 1), ('typescript', 1), ('unordered map', 1), ('unordermap', 1), ('vector', 1), ('well commented', 1), ('well-named variables', 1)]"
1725,Number Of Rectangles That Can Form The Largest Square,https://leetcode.com/problems/number-of-rectangles-that-can-form-the-largest-square,"You are given an array rectangles where rectangles[i] = [li, wi] represents the ith rectangle of length li and width wi.

You can cut the ith rectangle to form a square with a side length of k if both k <= li and k <= wi. For example, if you have a rectangle [4,6], you can cut it to get a square with a side length of at most 4.

Let maxLen be the side length of the largest square you can obtain from any of the given rectangles.

Return the number of rectangles that can make a square with a side length of maxLen.",['greedy'],Easy,158,20,27275,21287,[],"[('c++', 31), ('python', 31), ('java', 22), ('cpp', 18), ('python3', 17), ('javascript', 14), ('python 3', 13), ('easy-understanding', 12), ('simple', 9), ('easy-to-understand', 8), ('java-solution', 6), ('hashmap', 5), ('map', 5), ('easy', 4), ('go', 4), ('golang', 4), ('algorithm', 3), ('counter', 3), ('cpp solution', 3), ('easytounderstand', 3), ('o-n', 3), ('on', 3), ('one-pass', 3), ('stl algorithms', 3), ('swift', 3), ('array', 2), ('beginnerfriendly', 2), ('big o of n', 2), ('commented', 2), ('comments-added', 2), ('dictionary', 2), ('golang-solution', 2), ('hash table', 2), ('intuitive', 2), ('javascript solution', 2), ('js', 2), ('linear', 2), ('linear time', 2), ('one-liner', 2), ('ruby', 2), ('rust', 2), ('scala', 2), ('straight-forward', 2), ('unordered map', 2), ('100', 1), ('2pass', 1), ('accepted', 1), ('begginer friendly', 1), ('c#', 1), ('c++ ac', 1), ('c++ solution', 1), ('clear-understanding', 1), ('commented code', 1), ('constant memory', 1), ('constant space', 1), ('cpp easy', 1), ('extra space', 1), ('fasterthan100', 1), ('functional programming', 1), ('functional-programming', 1), ('go-solution', 1), ('golang solution', 1), ('greedy', 1), ('greedy algorithm', 1), ('groupby', 1), ('java solution', 1), ('lambdas', 1), ('most efficient solution', 1), ('no hashmap', 1), ('no lambda function', 1), ('number-of-rectangles', 1), ('o-n2', 1), ('one pass solution', 1), ('optimal', 1), ('pyhton3', 1), ('python3.9', 1), ('rajat', 1), ('rajawatbanna', 1), ('reduce', 1), ('simple clear c++ solution', 1), ('sorted array', 1), ('two-lines', 1), ('video explanation', 1), ('without map', 1)]"
1722,Minimize Hamming Distance After Swap Operations,https://leetcode.com/problems/minimize-hamming-distance-after-swap-operations,"You are given two integer arrays, source and target, both of length n. You are also given an array allowedSwaps where each allowedSwaps[i] = [ai, bi] indicates that you are allowed to swap the elements at index ai and index bi (0-indexed) of array source. Note that you can swap elements at a specific pair of indices multiple times and in any order.

The Hamming distance of two arrays of the same length, source and target, is the number of positions where the elements are different. Formally, it is the number of indices i for 0 <= i <= n-1 where source[i] != target[i] (0-indexed).

Return the minimum Hamming distance of source and target after performing any amount of swap operations on array source.","['greedy', 'depth-first-search', 'union-find']",Medium,345,11,17236,9348,"[""Smallest String With Swaps""]","[('union find', 13), ('c++', 10), ('java', 7), ('python', 7), ('dfs', 5), ('unionfind', 5), ('javascript', 3), ('python 3', 3), ('python3', 3), ('bfs', 2), ('comments-added', 2), ('connected components', 2), ('dictionary', 2), ('disjoint-set', 2), ('easy-understanding', 2), ('graph', 2), ('100 memory', 1), ('100 speed', 1), ('anagrams', 1), ('c code', 1), ('cpp', 1), ('disjoint sets', 1), ('dsu', 1), ('easy-to-understand', 1), ('explained', 1), ('explanations', 1), ('fast-solution', 1), ('graphs', 1), ('greedy', 1), ('hashmap', 1), ('java-solution', 1), ('js', 1), ('memoization', 1), ('simple', 1), ('swift', 1), ('undirectional graph', 1), ('union-by-rank', 1), ('union-find', 1), ('video-explanation', 1)]"
1720,Decode XORed Array,https://leetcode.com/problems/decode-xored-array,"There is a hidden integer array arr that consists of n non-negative integers.

It was encoded into another integer array encoded of length n - 1, such that encoded[i] = arr[i] XOR arr[i + 1]. For example, if arr = [1,0,2,1], then encoded = [1,2,3].

You are given the encoded array. You are also given an integer first, that is the first element of arr, i.e. arr[0].

Return the original array arr. It can be proved that the answer exists and is unique.",['bit-manipulation'],Easy,236,36,31623,26936,[],"[('c++', 26), ('java', 19), ('python', 14), ('python3', 12), ('xor', 12), ('cpp', 11), ('easy', 9), ('javascript', 9), ('simple', 7), ('python 3', 6), ('java-solution', 5), ('easy-understanding', 4), ('kotlin', 4), ('array', 3), ('bit manipulation', 3), ('easy-to-understand', 3), ('golang', 3), ('rust', 3), ('bit-manipulation', 2), ('c#', 2), ('cpp solution', 2), ('efficient solution', 2), ('explained', 2), ('go', 2), ('inplace', 2), ('javascript solution', 2), ('linear time', 2), ('solved', 2), ('swift', 2), ('xor operation', 2), ('asahiocean', 1), ('beginner friendly', 1), ('bitmanipulation', 1), ('bitmaupulation', 1), ('bitwise', 1), ('bitwise operation', 1), ('c++11', 1), ('cpp clear', 1), ('cpp easy', 1), ('decode xored array', 1), ('easytounderstand', 1), ('explanation of logic', 1), ('fast-solution', 1), ('fp', 1), ('github', 1), ('golang-solution', 1), ('iter', 1), ('list comprehension', 1), ('o-n', 1), ('on', 1), ('one pass solution', 1), ('oneline', 1), ('php', 1), ('prefix sum', 1), ('python3.8', 1), ('rajawatbanna', 1), ('simple beginner friendly', 1), ('solution', 1), ('solution-javascript', 1), ('space-compexity', 1), ('withexplanation', 1)]"
1735,Count Ways to Make Array With Product,https://leetcode.com/problems/count-ways-to-make-array-with-product,"You are given a 2D integer array, queries. For each queries[i], where queries[i] = [ni, ki], find the number of different ways you can place positive integers into an array of size ni such that the product of the integers is ki. As the number of ways may be too large, the answer to the ith query is the number of ways modulo 109 + 7.

Return an integer array answer where answer.length == queries.length, and answer[i] is the answer to the ith query.",['math'],Hard,97,21,4579,2198,[],"[('python3', 3), ('brute force', 1), ('c++', 1), ('combinatorics', 1), ('combinatories', 1), ('contest', 1), ('dp', 1), ('explaines', 1), ('javascript', 1), ('math', 1), ('python', 1), ('recursive', 1), ('ruby', 1)]"
1734,Decode XORed Permutation,https://leetcode.com/problems/decode-xored-permutation,"There is an integer array perm that is a permutation of the first n positive integers, where n is always odd.

It was encoded into another integer array encoded of length n - 1, such that encoded[i] = perm[i] XOR perm[i + 1]. For example, if perm = [1,3,2], then encoded = [2,1].

Given the encoded array, return the original array perm. It is guaranteed that the answer exists and is unique.",['bit-manipulation'],Medium,276,10,10179,5555,[],"[('c++', 7), ('cpp', 5), ('java', 5), ('python', 5), ('xor', 5), ('python3', 3), ('bit manipulation', 2), ('bit-manipulation', 2), ('java-solution', 2), ('python 3', 2), ('swift', 2), ('1-line', 1), ('concise', 1), ('cpp easy', 1), ('easy-understanding', 1), ('explained', 1), ('explanation with code', 1), ('fast', 1), ('fuck noobs', 1), ('incorrect', 1), ('incorrect-description', 1), ('javascript', 1), ('kotlin', 1), ('nirala', 1), ('simple', 1), ('single pass', 1)]"
1733,Minimum Number of People to Teach,https://leetcode.com/problems/minimum-number-of-people-to-teach,"On a social network consisting of m users and some friendships between users, two users can communicate with each other if they know a common language.

You are given an integer n, an array languages, and an array friendships where:


	There are n languages numbered 1 through n,
	languages[i] is the set of languages the i​​​​​​th​​​​ user knows, and
	friendships[i] = [u​​​​​​i​​​, v​​​​​​i] denotes a friendship between the users u​​​​​​​​​​​i​​​​​ and vi.


You can choose one language and teach it to some users so that all friends can communicate with each other. Return the minimum number of users you need to teach.
Note that friendships are not transitive, meaning if x is a friend of y and y is a friend of z, this doesn't guarantee that x is a friend of z.","['array', 'greedy']",Medium,87,234,10802,4112,[],"[('c++', 5), ('logic', 3), ('python', 3), ('python3', 3), ('set', 3), ('swift', 2), ('bruteforce', 1), ('c#', 1), ('cpp', 1), ('explanation', 1), ('explanation of logic', 1), ('fast', 1), ('greedy', 1), ('hashmap', 1), ('intiution', 1), ('java', 1), ('javascript', 1), ('less', 1), ('logic-solution', 1), ('map', 1), ('memoization', 1), ('proof', 1), ('python 3', 1), ('wrong output', 1)]"
1732,Find the Highest Altitude,https://leetcode.com/problems/find-the-highest-altitude,"There is a biker going on a road trip. The road trip consists of n + 1 points at different altitudes. The biker starts his trip on point 0 with altitude equal 0.

You are given an integer array gain of length n where gain[i] is the net gain in altitude between points i​​​​​​ and i + 1 for all (0 <= i < n). Return the highest altitude of a point.",['array'],Easy,260,28,38835,30973,[],"[('c++', 34), ('java', 30), ('python', 25), ('cpp', 23), ('javascript', 21), ('python3', 17), ('easy-understanding', 14), ('java-solution', 11), ('python 3', 10), ('cpp solution', 9), ('simple', 7), ('swift', 7), ('array', 6), ('easy', 6), ('one-liner', 5), ('c', 4), ('c#', 4), ('easytounderstand', 4), ('go', 4), ('golang', 4), ('javascript solution', 4), ('prefix sum', 4), ('c code', 3), ('easy-to-understand', 3), ('fast and simple', 3), ('fast-solution', 3), ('golang-solution', 3), ('itertools', 3), ('#python', 2), ('#python 3', 2), ('100 speed', 2), ('beginner friendly', 2), ('cpp easy', 2), ('explained', 2), ('fast', 2), ('fasterthan100', 2), ('fastest', 2), ('one pass solution', 2), ('rust', 2), ('scala', 2), ('short', 2), ('simple clear c++ solution', 2), ('with-explanation', 2), ('#array', 1), ('#easy-understanding', 1), ('#easysolution', 1), ('#easyway', 1), ('#fastest', 1), ('#java', 1), ('#python #codegirl', 1), ('#python #easy', 1), ('#solution', 1), ('0ms', 1), ('100 memory', 1), ('2-line', 1), ('2-line solution', 1), ('2-liner', 1), ('2-lines', 1), ('2liner', 1), ('2lines', 1), ('accomulate', 1), ('accumulation', 1), ('accumulator', 1), ('algorithms', 1), ('basic', 1), ('best', 1), ('best-solution-ever', 1), ('c++ code', 1), ('c++ solution', 1), ('c++11', 1), ('c++17', 1), ('comments added', 1), ('constexpr', 1), ('declarative', 1), ('dp', 1), ('easy to understand', 1), ('es6', 1), ('explained solution', 1), ('explanation of logic', 1), ('for-loop', 1), ('functional', 1), ('functional programming', 1), ('github', 1), ('go-solution', 1), ('highest altitude', 1), ('intuitive', 1), ('kotlin', 1), ('kotlin-solution', 1), ('linear', 1), ('loop', 1), ('maximum', 1), ('one line', 1), ('optimal', 1), ('pattern matching', 1), ('python-3', 1), ('python3.8', 1), ('recursion', 1), ('ruby', 1), ('self explanatory', 1), ('self-explanatory', 1), ('sequence', 1), ('series', 1), ('simple-solution', 1), ('single-pass', 1), ('slidingwindow', 1), ('solution', 1), ('stl', 1), ('understandable', 1), ('upvote', 1), ('vector', 1)]"
1713,Minimum Operations to Make a Subsequence,https://leetcode.com/problems/minimum-operations-to-make-a-subsequence,"You are given an array target that consists of distinct integers and another integer array arr that can have duplicates.

In one operation, you can insert any integer at any position in arr. For example, if arr = [1,4,1,2], you can add 3 in the middle and make it [1,4,3,1,2]. Note that you can insert the integer at the very beginning or end of the array.

Return the minimum number of operations needed to make target a subsequence of arr.

A subsequence of an array is a new array generated from the original array by deleting some elements (possibly none) without changing the remaining elements' relative order. For example, [2,7,4] is a subsequence of [4,2,3,7,2,1,4] (the underlined elements), while [2,4,2] is not.",['greedy'],Hard,234,3,8887,4056,[],"[('lis', 5), ('c++', 4), ('dynamic programming', 2), ('java', 2), ('javascript', 2), ('patience-sort', 2), ('python3', 2), ('binary-indexed-tree', 1), ('binary-search', 1), ('c#', 1), ('cpp', 1), ('dp', 1), ('fenwick', 1), ('fenwick-tree', 1), ('javascrip', 1), ('minimum-operation', 1), ('patience sorting', 1), ('python', 1), ('rajawatbanna', 1), ('segment tree', 1), ('segment-tree', 1)]"
1712,Ways to Split Array Into Three Subarrays,https://leetcode.com/problems/ways-to-split-array-into-three-subarrays,"A split of an integer array is good if:


	The array is split into three non-empty contiguous subarrays - named left, mid, right respectively from left to right.
	The sum of the elements in left is less than or equal to the sum of the elements in mid, and the sum of the elements in mid is less than or equal to the sum of the elements in right.


Given nums, an array of non-negative integers, return the number of good ways to split nums. As the number may be too large, return it modulo 109 + 7.","['two-pointers', 'binary-search']",Medium,373,42,29861,8734,[],"[('binary-search', 6), ('binary search', 3), ('c++', 3), ('c#', 2), ('go', 2), ('java', 2), ('javascrip', 2), ('javascript', 2), ('python', 2), ('two-pointers', 2), ('3 pointers', 1), ('3-pointers', 1), ('cpp', 1), ('explained solution', 1), ('golang', 1), ('linear', 1), ('python3', 1), ('rajawatbanna', 1), ('stl', 1), ('three-pointers', 1), ('tle', 1), ('video-explanation', 1), ('ways to split array', 1), ('waystosplitarrayin3', 1)]"
1711,Count Good Meals,https://leetcode.com/problems/count-good-meals,"A good meal is a meal that contains exactly two different food items with a sum of deliciousness equal to a power of two.

You can pick any two different foods to make a good meal.

Given an array of integers deliciousness where deliciousness[i] is the deliciousness of the i​​​​​​th​​​​​​​​ item of food, return the number of different good meals you can make from this list modulo 109 + 7.

Note that items with different indices are considered different even if they have the same deliciousness value.","['array', 'hash-table', 'two-pointers']",Medium,252,138,51140,13545,"[""Two Sum"", ""Max Number of K-Sum Pairs""]","[('c++', 20), ('python', 9), ('python3', 9), ('hashmap', 7), ('java', 7), ('python 3', 6), ('cpp', 5), ('c#', 4), ('easy-understanding', 4), ('javascript', 3), ('map', 3), ('backtracking', 2), ('bit', 2), ('cpp solution', 2), ('easy-to-understand', 2), ('java-solution', 2), ('100 faster runtime', 1), ('90+faster', 1), ('binary-search', 1), ('contest', 1), ('count good meals', 1), ('countgoodmeals', 1), ('defaultdict', 1), ('dfs', 1), ('dictionary', 1), ('dictonary', 1), ('discussion', 1), ('dynamic programming', 1), ('easytounderstand', 1), ('fast and simple', 1), ('hash', 1), ('hashmap and sorting', 1), ('hashmaps', 1), ('heap', 1), ('help needed', 1), ('improve', 1), ('linear-time', 1), ('math', 1), ('memory less than 100', 1), ('meta', 1), ('moderator', 1), ('rajawatbanna', 1), ('recursive', 1), ('set', 1), ('simple', 1), ('sort', 1), ('swift', 1), ('tle', 1), ('two pointer', 1), ('two-pointers', 1), ('twosum', 1), ('unfair', 1), ('unordered-map', 1)]"
1710,Maximum Units on a Truck,https://leetcode.com/problems/maximum-units-on-a-truck,"You are assigned to put some amount of boxes onto one truck. You are given a 2D array boxTypes, where boxTypes[i] = [numberOfBoxesi, numberOfUnitsPerBoxi]:


	numberOfBoxesi is the number of boxes of type i.
	numberOfUnitsPerBoxi is the number of units in each box of the type i.


You are also given an integer truckSize, which is the maximum number of boxes that can be put on the truck. You can choose any boxes to put on the truck as long as the number of boxes does not exceed truckSize.

Return the maximum total number of units that can be put on the truck.","['greedy', 'sort']",Easy,314,30,45575,31857,[],"[('c++', 27), ('python', 23), ('greedy', 22), ('sort', 21), ('python 3', 19), ('java', 18), ('cpp', 15), ('python3', 10), ('simple', 10), ('javascript', 9), ('sorting', 7), ('greedy approach', 6), ('easytounderstand', 5), ('c#', 4), ('java-solution', 4), ('easy-understanding', 3), ('javascript solution', 3), ('swift', 3), ('custom sorting', 2), ('easy', 2), ('fast and simple', 2), ('go', 2), ('golang', 2), ('greedy algorithm', 2), ('knapsack', 2), ('kotlin', 2), ('sorted array', 2), ('anime', 1), ('array', 1), ('begineer friendly', 1), ('c++11', 1), ('commented code', 1), ('comparator', 1), ('cpp solution', 1), ('declarative', 1), ('dp', 1), ('easy-to-understand', 1), ('efficient solution', 1), ('explained solution', 1), ('hash map', 1), ('help needed', 1), ('intuitive', 1), ('java ac solution', 1), ('java simple', 1), ('lambda', 1), ('linear memory', 1), ('linear time', 1), ('max heap', 1), ('maxheap', 1), ('maximum units on a truck', 1), ('multimap', 1), ('nlogn time', 1), ('priority queue', 1), ('rajawatbanna', 1), ('rust', 1), ('self explanatory', 1), ('timsort', 1), ('treemap', 1), ('ultra simple', 1), ('understandable', 1), ('upvote', 1), ('vector', 1), ('with-explanation', 1)]"
1707,Maximum XOR With an Element From Array,https://leetcode.com/problems/maximum-xor-with-an-element-from-array,"You are given an array nums consisting of non-negative integers. You are also given a queries array, where queries[i] = [xi, mi].

The answer to the ith query is the maximum bitwise XOR value of xi and any element of nums that does not exceed mi. In other words, the answer is max(nums[j] XOR xi) for all j such that nums[j] <= mi. If all elements in nums are larger than mi, then the answer is -1.

Return an integer array answer where answer.length == queries.length and answer[i] is the answer to the ith query.","['bit-manipulation', 'trie']",Hard,206,10,11338,5246,"[""Maximum XOR of Two Numbers in an Array""]","[('trie', 14), ('c++', 6), ('bit manipulation', 4), ('java', 4), ('sort', 3), ('c#', 2), ('cpp', 2), ('greedy', 2), ('java-solution', 2), ('javascript', 2), ('python3', 2), ('sorting', 2), ('xor', 2), ('array', 1), ('bitwise', 1), ('brute force solution', 1), ('c++11', 1), ('go', 1), ('golang', 1), ('help needed', 1), ('leetcode challenge', 1), ('maximum xor', 1), ('tries', 1)]"
1723,Find Minimum Time to Finish All Jobs,https://leetcode.com/problems/find-minimum-time-to-finish-all-jobs,"You are given an integer array jobs, where jobs[i] is the amount of time it takes to complete the ith job.

There are k workers that you can assign jobs to. Each job should be assigned to exactly one worker. The working time of a worker is the sum of the time it takes to complete all jobs assigned to them. Your goal is to devise an optimal assignment such that the maximum working time of any worker is minimized.

Return the minimum possible maximum working time of any assignment.","['backtracking', 'recursion']",Hard,224,10,18225,7989,[],"[('backtracking', 7), ('java', 6), ('javascript', 5), ('c++', 4), ('dfs', 4), ('python', 4), ('bitmask', 3), ('dp', 3), ('python 3', 3), ('binary-search', 2), ('c#', 2), ('dynamic programming', 2), ('go', 2), ('java-solution', 2), ('python3', 2), ('backtrack', 1), ('bitmasks', 1), ('detailed thinking step', 1), ('explained', 1), ('explanation with code', 1), ('golang', 1), ('interview-friendly', 1), ('optimizations', 1), ('pruning', 1), ('recursion', 1), ('simple', 1), ('step by step explanation', 1), ('thought-process', 1)]"
1705,Maximum Number of Eaten Apples,https://leetcode.com/problems/maximum-number-of-eaten-apples,"There is a special kind of apple tree that grows apples every day for n days. On the ith day, the tree grows apples[i] apples that will rot after days[i] days, that is on day i + days[i] the apples will be rotten and cannot be eaten. On some days, the apple tree does not grow any apples, which are denoted by apples[i] == 0 and days[i] == 0.

You decided to eat at most one apple a day (to keep the doctors away). Note that you can keep eating after the first n days.

Given two integer arrays days and apples of length n, return the maximum number of apples you can eat.","['heap', 'greedy']",Medium,282,125,27607,11513,[],"[('priority queue', 14), ('heap', 12), ('java', 9), ('python', 9), ('greedy', 8), ('c++', 7), ('min-heap', 5), ('python 3', 5), ('python3', 5), ('easy', 4), ('c#', 3), ('cpp', 3), ('javascript', 3), ('priority-queue', 3), ('heapq', 2), ('java solution', 2), ('kotlin', 2), ('min heap', 2), ('ruby', 2), ('100 speed', 1), ('beginner friendly', 1), ('c++11', 1), ('clean code', 1), ('comments-added', 1), ('concise', 1), ('constant space', 1), ('counter', 1), ('cpp solution', 1), ('detailed explanation', 1), ('dynamic array', 1), ('fuse', 1), ('java-solution', 1), ('job sequencing', 1), ('job-sequence', 1), ('linear time', 1), ('map', 1), ('math', 1), ('maximum eaten apples', 1), ('pq', 1), ('priorityqueue', 1), ('rajawatbanna', 1), ('simple', 1), ('sorted map', 1), ('sorting', 1), ('swift', 1), ('zea7ot', 1)]"
1704,Determine if String Halves Are Alike,https://leetcode.com/problems/determine-if-string-halves-are-alike,"You are given a string s of even length. Split this string into two halves of equal lengths, and let a be the first half and b be the second half.

Two strings are alike if they have the same number of vowels ('a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'). Notice that s contains uppercase and lowercase letters.

Return true if a and b are alike. Otherwise, return false.",['string'],Easy,279,29,70188,55451,[],"[('c++', 63), ('java', 43), ('python', 36), ('cpp', 35), ('easy-understanding', 27), ('javascript', 26), ('python3', 21), ('python 3', 19), ('java-solution', 16), ('easy', 12), ('string', 12), ('simple', 10), ('c#', 9), ('set', 8), ('easytounderstand', 6), ('go', 6), ('golang', 6), ('easy-to-understand', 5), ('fast and simple', 5), ('rust', 5), ('unordered set', 5), ('cpp solution', 4), ('explained', 4), ('golang-solution', 4), ('javascript solution', 4), ('beginner friendly', 3), ('clean code', 3), ('ruby', 3), ('swift', 3), ('two-pointers', 3), ('video-explanation', 3), ('comments-added', 2), ('fast', 2), ('faster', 2), ('go-solution', 2), ('javascrip', 2), ('javascript-solution', 2), ('one-liner', 2), ('regex', 2), ('scala', 2), ('stl', 2), ('string-operation', 2), ('typescript', 2), ('#codeboy', 1), ('#easy-understanding', 1), ('#java', 1), ('#python', 1), ('#python 3', 1), ('#strings', 1), ('#video-explanation', 1), ('#video-solution', 1), ('0ms-4ms', 1), ('1 line', 1), ('1-line', 1), ('100 memory', 1), ('100 space', 1), ('100 speed', 1), ('2ms', 1), ('accumulate', 1), ('beginners', 1), ('brute force', 1), ('c code', 1), ('c++ code', 1), ('c++ solution', 1), ('c++11', 1), ('char', 1), ('char compare', 1), ('char comparison', 1), ('character', 1), ('cpp clear', 1), ('cpp easy', 1), ('declarative', 1), ('dummy', 1), ('easiest', 1), ('easy to understand', 1), ('easy understanding', 1), ('es2015', 1), ('es6', 1), ('explaination', 1), ('explanation with code', 1), ('fast-solution', 1), ('faster than 100', 1), ('fastest', 1), ('for loop', 1), ('generator expression', 1), ('halves', 1), ('hash set', 1), ('hashset', 1), ('if-else', 1), ('indexof', 1), ('intutive', 1), ('java ac solution', 1), ('js', 1), ('kotlin', 1), ('leetcode contest', 1), ('linear time', 1), ('loops', 1), ('oneloop', 1), ('optimisation', 1), ('performance', 1), ('php', 1), ('python3.8', 1), ('python38', 1), ('pythonic', 1), ('reccursion', 1), ('reduce', 1), ('regexp', 1), ('self explanatory', 1), ('shenanigans', 1), ('short', 1), ('simple clear c++ solution', 1), ('simple java solution', 1), ('simple python accepted', 1), ('straight-forward', 1), ('straightforwardlogic', 1), ('stream', 1), ('string manipulation', 1), ('string operation', 1), ('string parsing', 1), ('strings', 1), ('two-poinnters', 1), ('twopointer', 1), ('twopointers', 1), ('ultra easy', 1), ('unorderedset', 1), ('upvote', 1), ('very easy to understand', 1), ('video explanation', 1), ('vowels', 1), ('zip', 1)]"
1719,Number Of Ways To Reconstruct A Tree,https://leetcode.com/problems/number-of-ways-to-reconstruct-a-tree,"You are given an array pairs, where pairs[i] = [xi, yi], and:


	There are no duplicates.
	xi < yi


Let ways be the number of rooted trees that satisfy the following conditions:


	The tree consists of nodes whose values appeared in pairs.
	A pair [xi, yi] exists in pairs if and only if xi is an ancestor of yi or yi is an ancestor of xi.
	Note: the tree does not have to be a binary tree.


Two ways are considered to be different if there is at least one node that has different parents in both ways.

Return:


	0 if ways == 0
	1 if ways == 1
	2 if ways > 1


A rooted tree is a tree that has a single root node, and all edges are oriented to be outgoing from the root.

An ancestor of a node is any node on the path from the root to that node (excluding the node itself). The root has no ancestors.","['tree', 'graph']",Hard,69,52,4075,1600,[],"[('dfs', 2), ('connected components', 1), ('graph', 1), ('java', 1), ('python', 1), ('python3', 1), ('tree', 1)]"
1718,Construct the Lexicographically Largest Valid Sequence,https://leetcode.com/problems/construct-the-lexicographically-largest-valid-sequence,"Given an integer n, find a sequence that satisfies all of the following:


	The integer 1 occurs once in the sequence.
	Each integer between 2 and n occurs twice in the sequence.
	For every integer i between 2 and n, the distance between the two occurrences of i is exactly i.


The distance between two numbers on the sequence, a[i] and a[j], is the absolute difference of their indices, |j - i|.

Return the lexicographically largest sequence. It is guaranteed that under the given constraints, there is always a solution. 

A sequence a is lexicographically larger than a sequence b (of the same length) if in the first position where a and b differ, sequence a has a number greater than the corresponding number in b. For example, [0,1,9,0] is lexicographically larger than [0,1,5,6] because the first position they differ is at the third number, and 9 is greater than 5.","['backtracking', 'recursion']",Medium,212,16,10691,5035,[],"[('backtracking', 21), ('c++', 8), ('python', 8), ('greedy', 7), ('easy-understanding', 5), ('java', 5), ('python3', 4), ('bitmask', 2), ('dfs', 2), ('java-solution', 2), ('javascript', 2), ('100 speed', 1), ('backtrack', 1), ('c#', 1), ('comments-added', 1), ('easy', 1), ('easy-to-understand', 1), ('easytounderstand', 1), ('golang', 1), ('javascrip', 1), ('python 3', 1), ('recursion', 1), ('redable', 1), ('swift', 1)]"
1717,Maximum Score From Removing Substrings,https://leetcode.com/problems/maximum-score-from-removing-substrings,"You are given a string s and two integers x and y. You can perform two types of operations any number of times.


	Remove substring ""ab"" and gain x points.

	
		For example, when removing ""ab"" from ""cabxbae"" it becomes ""cxbae"".
	
	
	Remove substring ""ba"" and gain y points.
	
		For example, when removing ""ba"" from ""cabxbae"" it becomes ""cabxe"".
	
	


Return the maximum points you can gain after applying the above operations on s.",['greedy'],Medium,225,15,13889,5723,[],"[('greedy', 20), ('stack', 20), ('c++', 10), ('python', 10), ('java', 8), ('javascript', 6), ('python 3', 5), ('cpp', 4), ('greedy approach', 4), ('python3.8', 4), ('string', 4), ('stacks', 3), ('c#', 2), ('python3', 2), ('stack-based', 2), ('string-operation', 2), ('swift', 2), ('beginners', 1), ('bug', 1), ('c++ stack', 1), ('constant space', 1), ('deque', 1), ('greedyapproach', 1), ('hard', 1), ('hard problems', 1), ('implementation', 1), ('java-solution', 1), ('leetcode', 1), ('linear time', 1), ('maximum score', 1), ('proof', 1), ('rajawatbanna', 1), ('single pass', 1), ('stringbuilder', 1), ('substrings', 1), ('video explanation', 1)]"
1716,Calculate Money in Leetcode Bank,https://leetcode.com/problems/calculate-money-in-leetcode-bank,"Hercy wants to save money for his first car. He puts money in the Leetcode bank every day.

He starts by putting in $1 on Monday, the first day. Every day from Tuesday to Sunday, he will put in $1 more than the day before. On every subsequent Monday, he will put in $1 more than the previous Monday. 

Given n, return the total amount of money he will have in the Leetcode bank at the end of the nth day.","['math', 'greedy']",Easy,239,6,26290,16978,[],"[('c++', 39), ('math', 27), ('cpp', 24), ('java', 24), ('python', 24), ('python3', 18), ('python 3', 15), ('simple', 10), ('easy', 9), ('javascript', 9), ('easy-understanding', 8), ('c#', 6), ('easy-to-understand', 6), ('commented', 5), ('java-solution', 5), ('constant time', 4), ('easytounderstand', 4), ('o1', 3), ('one-liner', 3), ('ruby', 3), ('100 speed', 2), ('arithmetic progression', 2), ('constant space', 2), ('cpp easy', 2), ('cpp solution', 2), ('dynamic programming', 2), ('fast', 2), ('fast and simple', 2), ('linear time', 2), ('one line', 2), ('rust', 2), ('simulation', 2), ('swift', 2), ('0ms', 1), ('100 faster cpp', 1), ('2-liner', 1), ('3 lines', 1), ('ad-hoc', 1), ('addition', 1), ('bloc', 1), ('c', 1), ('c++ solution', 1), ('calculate money in bank', 1), ('clean', 1), ('comments-added', 1), ('cycle', 1), ('easy code', 1), ('easy understand', 1), ('easytoundersatand', 1), ('explained', 1), ('explanation of logic', 1), ('extreme', 1), ('fast-solution', 1), ('fasterthan100', 1), ('fastest c# solution', 1), ('gauss', 1), ('gauss formula', 1), ('go', 1), ('golang', 1), ('golang-solution', 1), ('greedy', 1), ('greedy approach', 1), ('incremental addition', 1), ('intuitive', 1), ('itertools', 1), ('javascript solution', 1), ('js', 1), ('kotlin', 1), ('kotlin-solution', 1), ('linear', 1), ('loop', 1), ('lucid', 1), ('mathematics', 1), ('maths', 1), ('modulo-arithmatic', 1), ('no lambda function', 1), ('operator', 1), ('optimisation', 1), ('pattern', 1), ('python3.8', 1), ('python3.9', 1), ('rajat', 1), ('rajawatbanna', 1), ('readable code', 1), ('recursion', 1), ('self-explanatory', 1), ('sequence', 1), ('series', 1), ('short c++ code', 1), ('simple math', 1), ('simplemath', 1), ('single-liner', 1), ('stack', 1), ('stl', 1), ('sum', 1), ('sum of series', 1), ('summation', 1), ('understandable', 1), ('with-explanation', 1)]"
1697,Checking Existence of Edge Length Limited Paths,https://leetcode.com/problems/checking-existence-of-edge-length-limited-paths,"An undirected graph of n nodes is defined by edgeList, where edgeList[i] = [ui, vi, disi] denotes an edge between nodes ui and vi with distance disi. Note that there may be multiple edges between two nodes.

Given an array queries, where queries[j] = [pj, qj, limitj], your task is to determine for each queries[j] whether there is a path between pj and qj such that each edge on the path has a distance strictly less than limitj .

Return a boolean array answer, where answer.length == queries.length and the jth value of answer is true if there is a path for queries[j] is true, and false otherwise.","['sort', 'union-find']",Hard,277,6,10503,5675,"[""Checking Existence of Edge Length Limited Paths II""]","[('union-find', 5), ('python3', 4), ('c++', 3), ('union find', 3), ('javascript', 2), ('python', 2), ('union-by-rank', 2), ('unionfind', 2), ('c#', 1), ('cpp', 1), ('error message', 1), ('greedy', 1), ('java', 1), ('need-help', 1), ('path-compression', 1), ('ruby', 1), ('simple', 1), ('sort', 1), ('tle', 1), ('zea7ot', 1)]"
1696,Jump Game VI,https://leetcode.com/problems/jump-game-vi,"You are given a 0-indexed integer array nums and an integer k.

You are initially standing at index 0. In one move, you can jump at most k steps forward without going outside the boundaries of the array. That is, you can jump from index i to any index in the range [i + 1, min(n - 1, i + k)] inclusive.

You want to reach the last index of the array (index n - 1). Your score is the sum of all nums[j] for each index j you visited in the array.

Return the maximum score you can get.",['dequeue'],Medium,358,21,25239,12885,"[""Sliding Window Maximum""]","[('c++', 9), ('deque', 9), ('java', 9), ('python', 9), ('dp', 7), ('python 3', 5), ('slidingwindow', 5), ('c#', 4), ('dynamic programming', 4), ('javascript', 3), ('javascript solution', 3), ('priority queue', 3), ('dequeue', 2), ('greedy', 2), ('memoization', 2), ('monotonic queue', 2), ('python3', 2), ('testcase-missing', 2), ('arraydeque', 1), ('bfs', 1), ('binary-search', 1), ('binarysearch', 1), ('brute force', 1), ('doubly linked list', 1), ('easy', 1), ('easy to understand', 1), ('explanation of logic', 1), ('explanation with code', 1), ('greedy approach', 1), ('heap', 1), ('java-solution', 1), ('kotlin', 1), ('linear time', 1), ('linkedlists', 1), ('minimalist', 1), ('missing test case', 1), ('monoqueue', 1), ('monotone queue', 1), ('monotonic deque', 1), ('monotonic-stack', 1), ('o-nlogk', 1), ('optimal solution', 1), ('picture explanation', 1), ('queue', 1), ('ruby', 1), ('simple and elegant', 1), ('sliding window', 1), ('swift', 1), ('test-case-too-weak', 1), ('thought-process', 1), ('treeset', 1), ('two-pointers', 1), ('video-explanation', 1), ('with-explanation', 1)]"
1695,Maximum Erasure Value,https://leetcode.com/problems/maximum-erasure-value,"You are given an array of positive integers nums and want to erase a subarray containing unique elements. The score you get by erasing the subarray is equal to the sum of its elements.

Return the maximum score you can get by erasing exactly one subarray.

An array b is called to be a subarray of a if it forms a contiguous subsequence of a, that is, if it is equal to a[l],a[l+1],...,a[r] for some (l,r).",['two-pointers'],Medium,236,7,25357,12460,"[""Longest Substring Without Repeating Characters""]","[('slidingwindow', 19), ('c++', 14), ('two-pointers', 13), ('java', 11), ('python', 7), ('easy', 6), ('set', 6), ('hashset', 5), ('prefix sum', 5), ('python3', 5), ('c#', 4), ('javascript', 4), ('clean code', 3), ('easy-understanding', 3), ('hashmap', 3), ('python 3', 3), ('simple', 3), ('sliding window', 3), ('cpp', 2), ('easytounderstand', 2), ('ruby', 2), ('sliding-window', 2), ('swift', 2), ('99.46', 1), ('array', 1), ('beats 95 percent', 1), ('beginner friendly', 1), ('c++11', 1), ('clean code with comments', 1), ('cpp solution', 1), ('defuse', 1), ('deque', 1), ('easy-to-understand', 1), ('efficient', 1), ('efficient solution', 1), ('fast and simple', 1), ('fast-solution', 1), ('fuck noobs', 1), ('greedy', 1), ('hashmap java', 1), ('java-solution', 1), ('javascript solution', 1), ('kotlin', 1), ('map', 1), ('map-stl', 1), ('maximum subarray', 1), ('o-n', 1), ('php', 1), ('python set', 1), ('queue', 1), ('s', 1), ('short code', 1), ('simple to understand', 1), ('simple-solution', 1), ('stl', 1), ('thought-process', 1), ('two pointer', 1), ('two pointers', 1), ('understand', 1), ('unique', 1), ('unordered map', 1), ('window-sliding', 1), ('zea7ot', 1)]"
1694,Reformat Phone Number,https://leetcode.com/problems/reformat-phone-number,"You are given a phone number as a string number. number consists of digits, spaces ' ', and/or dashes '-'.

You would like to reformat the phone number in a certain manner. Firstly, remove all spaces and dashes. Then, group the digits from left to right into blocks of length 3 until there are 4 or fewer digits. The final digits are then grouped as follows:


	2 digits: A single block of length 2.
	3 digits: A single block of length 3.
	4 digits: Two blocks of length 2 each.


The blocks are then joined by dashes. Notice that the reformatting process should never produce any blocks of length 1 and produce at most two blocks of length 2.

Return the phone number after formatting.",['string'],Easy,114,100,23653,15329,[],"[('java', 20), ('python', 18), ('c++', 17), ('python 3', 13), ('cpp', 9), ('python3', 8), ('javascript', 7), ('simple', 6), ('easy', 5), ('ruby', 4), ('string', 4), ('swift', 4), ('defuse', 3), ('iterative', 3), ('java-solution', 3), ('regex', 3), ('stringbuilder', 3), ('c#', 2), ('easy-to-understand', 2), ('easy-understanding', 2), ('go', 2), ('go-solution', 2), ('golang', 2), ('javascript solution', 2), ('rust', 2), ('#replace', 1), ('#string', 1), ('#strip', 1), ('0ms runtime', 1), ('1-line', 1), ('1-liner', 1), ('arrays', 1), ('brutal force', 1), ('coding', 1), ('concise', 1), ('explanations', 1), ('fast', 1), ('intutive', 1), ('java ac solution', 1), ('javascrip', 1), ('javascript recursive', 1), ('kotlin', 1), ('library', 1), ('linear memory', 1), ('linear time', 1), ('linear-scan', 1), ('naive-solution', 1), ('optimization', 1), ('php', 1), ('programming', 1), ('python2', 1), ('python3.8', 1), ('pythonpython3', 1), ('re.sub', 1), ('recurision', 1), ('recursive', 1), ('regexp', 1), ('self explanatory', 1), ('string-operation', 1), ('strings', 1), ('substring', 1), ('ultra easy', 1), ('understandable', 1), ('upvote', 1), ('zea7ot', 1)]"
1690,Stone Game VII,https://leetcode.com/problems/stone-game-vii,"Alice and Bob take turns playing a game, with Alice starting first.

There are n stones arranged in a row. On each player's turn, they can remove either the leftmost stone or the rightmost stone from the row and receive points equal to the sum of the remaining stones' values in the row. The winner is the one with the higher score when there are no stones left to remove.

Bob found that he will always lose this game (poor Bob, he always loses), so he decided to minimize the score's difference. Alice's goal is to maximize the difference in the score.

Given an array of integers stones where stones[i] represents the value of the ith stone from the left, return the difference in Alice and Bob's score if they both play optimally.",['dynamic-programming'],Medium,228,71,15065,7414,"[""Stone Game"", ""Stone Game II"", ""Stone Game III"", ""Stone Game IV"", ""Stone Game V"", ""Stone Game VI"", ""Maximum Score from Performing Multiplication Operations""]","[('dynamic programming', 12), ('dp', 8), ('python', 7), ('memoization', 6), ('c++', 5), ('java', 5), ('easy-understanding', 3), ('python3', 3), ('c#', 2), ('cpp', 2), ('javascript', 2), ('python 3', 2), ('bottomup', 1), ('c++ ac', 1), ('clean code', 1), ('confusion', 1), ('cpp solution', 1), ('dfs', 1), ('dp bottom up', 1), ('dp-table', 1), ('dp-techqique', 1), ('easytounderstand', 1), ('fastest', 1), ('help needed', 1), ('java-solution', 1), ('logic explained clearly', 1), ('optimal substructure', 1), ('prefix sum', 1), ('quadratic time', 1), ('recursion', 1), ('ruby', 1), ('straight-forward', 1), ('top down dp', 1), ('top-down dp', 1), ('video-explanation', 1)]"
1689,Partitioning Into Minimum Number Of Deci-Binary Numbers,https://leetcode.com/problems/partitioning-into-minimum-number-of-deci-binary-numbers,"A decimal number is called deci-binary if each of its digits is either 0 or 1 without any leading zeros. For example, 101 and 1100 are deci-binary, while 112 and 3001 are not.

Given a string n that represents a positive decimal integer, return the minimum number of positive deci-binary numbers needed so that they sum up to n.",['greedy'],Medium,207,183,26434,23017,[],"[('java', 14), ('c++', 12), ('python', 12), ('python 3', 12), ('python3', 7), ('simple', 7), ('javascript', 6), ('one-liner', 6), ('c#', 4), ('cpp', 4), ('easy', 4), ('swift', 4), ('easy-understanding', 3), ('explanation', 3), ('ruby', 3), ('set', 3), ('3lines', 2), ('easytounderstand', 2), ('greedy', 2), ('java-solution', 2), ('javascript solution', 2), ('sort', 2), ('28ms', 1), ('4 solutions', 1), ('beginner friendly', 1), ('brute force solution', 1), ('c', 1), ('c language', 1), ('c#-solution', 1), ('cheating', 1), ('easy to understand', 1), ('easy understanding', 1), ('expalanation', 1), ('explanation of logic', 1), ('explanations', 1), ('faster', 1), ('go', 1), ('golang', 1), ('golang-solution', 1), ('greedy approach', 1), ('iterative', 1), ('linear', 1), ('matrix', 1), ('mrmagician', 1), ('o-n', 1), ('one line', 1), ('php', 1), ('python3.8', 1), ('rajat', 1), ('recursion', 1), ('rust', 1), ('simple beginner friendly', 1), ('single-line', 1), ('solution', 1), ('string', 1), ('swift5', 1), ('trick', 1), ('understand', 1), ('upvote', 1)]"
1688,Count of Matches in Tournament,https://leetcode.com/problems/count-of-matches-in-tournament,"You are given an integer n, the number of teams in a tournament that has strange rules:


	If the current number of teams is even, each team gets paired with another team. A total of n / 2 matches are played, and n / 2 teams advance to the next round.
	If the current number of teams is odd, one team randomly advances in the tournament, and the rest gets paired. A total of (n - 1) / 2 matches are played, and (n - 1) / 2 + 1 teams advance to the next round.


Return the number of matches played in the tournament until a winner is decided.",['backtracking'],Easy,281,63,45435,37020,[],"[('c++', 39), ('java', 33), ('cpp', 26), ('easy', 17), ('javascript', 17), ('easy-understanding', 15), ('python', 15), ('python 3', 13), ('javascript solution', 10), ('java-solution', 9), ('python3', 8), ('recursion', 8), ('c#', 7), ('simple', 6), ('easy-to-understand', 5), ('math', 5), ('recursive', 5), ('swift', 5), ('cpp solution', 4), ('0ms', 3), ('backtracking', 3), ('fastest', 3), ('go', 3), ('recurision', 3), ('ruby', 3), ('100', 2), ('100 faster cpp', 2), ('100 faster runtime', 2), ('100 speed', 2), ('brute force', 2), ('constant time', 2), ('easiest', 2), ('easy to understand', 2), ('easytounderstand', 2), ('golang', 2), ('golang-solution', 2), ('iterative', 2), ('rust', 2), ('1line', 1), ('2 lines', 1), ('back tracking', 1), ('binarytree', 1), ('brute force to optimal', 1), ('c', 1), ('c code', 1), ('c++ code', 1), ('commented', 1), ('constant', 1), ('countmatches', 1), ('cpp easy', 1), ('dead-easy', 1), ('easy c++', 1), ('easy understanding', 1), ('elegant', 1), ('explaination', 1), ('explaines', 1), ('explanation of logic', 1), ('explanations', 1), ('explanied', 1), ('fast', 1), ('fast and simple', 1), ('faster', 1), ('fasterthan100', 1), ('go-solution', 1), ('intuitive', 1), ('izaac', 1), ('java simple', 1), ('javascript-solution', 1), ('javscript', 1), ('js', 1), ('kotlin', 1), ('log', 1), ('loops', 1), ('mathematical', 1), ('matrix', 1), ('nobranching', 1), ('numberofmatches', 1), ('o1 time', 1), ('odd-even', 1), ('olog n', 1), ('one line solution', 1), ('one-liner', 1), ('php', 1), ('question need help', 1), ('question-not-clear', 1), ('rajat', 1), ('reccursion', 1), ('scala', 1), ('shift bit', 1), ('short code', 1), ('simple clear c++ solution', 1), ('simplest', 1), ('simulation', 1), ('singleline', 1), ('solution', 1), ('straight-forward', 1), ('time-complexity', 1), ('top', 1), ('ultra easy', 1), ('understandable', 1)]"
1703,Minimum Adjacent Swaps for K Consecutive Ones,https://leetcode.com/problems/minimum-adjacent-swaps-for-k-consecutive-ones,"You are given an integer array, nums, and an integer k. nums comprises of only 0's and 1's. In one move, you can choose two adjacent indices and swap their values.

Return the minimum number of moves required so that nums has k consecutive 1's.",['stack'],Hard,198,9,7579,3026,"[""Minimum Swaps to Group All 1's Together""]","[('slidingwindow', 4), ('java', 3), ('python', 3), ('median', 2), ('pictures', 2), ('binarysearch', 1), ('easy-to-understand', 1), ('greedy', 1), ('observations', 1), ('python3', 1), ('sliding window', 1), ('sliding-window-median', 1)]"
1702,Maximum Binary String After Change,https://leetcode.com/problems/maximum-binary-string-after-change,"You are given a binary string binary consisting of only 0's or 1's. You can apply each of the following operations any number of times:


	Operation 1: If the number contains the substring ""00"", you can replace it with ""10"".

	
		For example, ""00010"" -> ""10010""
	
	
	Operation 2: If the number contains the substring ""10"", you can replace it with ""01"".
	
		For example, ""00010"" -> ""00001""
	
	


Return the maximum binary string you can obtain after any number of operations. Binary string x is greater than binary string y if x's decimal representation is greater than y's decimal representation.",['greedy'],Medium,204,24,13500,7986,[],"[('c++', 9), ('cpp', 6), ('python3', 4), ('python 3', 3), ('string', 3), ('javascript', 2), ('python', 2), ('simple', 2), ('2 line python solution', 1), ('4-line', 1), ('beats 100', 1), ('binary', 1), ('bits', 1), ('c++ solution', 1), ('c++ solution simple', 1), ('comments-added', 1), ('cpp solution', 1), ('double pass', 1), ('easy-understanding', 1), ('explained solution', 1), ('greedy algorithm', 1), ('greedy approach', 1), ('java', 1), ('java-solution', 1), ('javascript solution', 1), ('linear', 1), ('linear time', 1), ('no extra space', 1), ('o-n', 1), ('observation', 1), ('observations', 1), ('one-liner', 1), ('php', 1), ('python deque', 1), ('ruby', 1), ('simple-solution', 1), ('string manipulation', 1), ('string parsing', 1), ('strings', 1), ('swift', 1)]"
1701,Average Waiting Time,https://leetcode.com/problems/average-waiting-time,"There is a restaurant with a single chef. You are given an array customers, where customers[i] = [arrivali, timei]:


	arrivali is the arrival time of the ith customer. The arrival times are sorted in non-decreasing order.
	timei is the time needed to prepare the order of the ith customer.


When a customer arrives, he gives the chef his order, and the chef starts preparing it once he is idle. The customer waits till the chef finishes preparing his order. The chef does not prepare food for more than one customer at a time. The chef prepares food for customers in the order they were given in the input.

Return the average waiting time of all customers. Solutions within 10-5 from the actual answer are considered accepted.",['array'],Medium,176,18,18914,11566,[],"[('c++', 26), ('cpp', 19), ('python', 15), ('java', 11), ('python 3', 11), ('easy-understanding', 10), ('python3', 6), ('beginner friendly', 5), ('easy', 5), ('simple', 4), ('brute force', 3), ('cpp solution', 3), ('java-solution', 3), ('javascript', 3), ('python3.8', 3), ('array', 2), ('easy-to-understand', 2), ('straight-forward', 2), ('100 faster', 1), ('2ms', 1), ('array easy', 1), ('average', 1), ('average waiting time', 1), ('c', 1), ('c#', 1), ('c++ solution', 1), ('constant space', 1), ('double', 1), ('dp', 1), ('easy understandcpp', 1), ('efficient solution', 1), ('explaination', 1), ('explanation of logic', 1), ('fast', 1), ('fast and simple', 1), ('faster', 1), ('githb', 1), ('go', 1), ('go-solution', 1), ('golang', 1), ('help needed', 1), ('if-else', 1), ('interval', 1), ('interval scheduling', 1), ('intervals', 1), ('intutive', 1), ('iterative', 1), ('javasccript', 1), ('javascript solution', 1), ('linear time', 1), ('o-n', 1), ('one traversal', 1), ('optimal', 1), ('optimized solution', 1), ('php', 1), ('python3.3', 1), ('python3.9', 1), ('pythonic', 1), ('rajat', 1), ('ruby', 1), ('scheduling-problem', 1), ('self explanatory', 1), ('simple clear c++ solution', 1), ('simulation', 1), ('swift', 1), ('time', 1), ('ultra simple', 1), ('understand', 1), ('understanding', 1), ('upvote', 1), ('vector 2d', 1), ('video explanation', 1)]"
1700,Number of Students Unable to Eat Lunch,https://leetcode.com/problems/number-of-students-unable-to-eat-lunch,"The school cafeteria offers circular and square sandwiches at lunch break, referred to by numbers 0 and 1 respectively. All students stand in a queue. Each student either prefers square or circular sandwiches.

The number of sandwiches in the cafeteria is equal to the number of students. The sandwiches are placed in a stack. At each step:


	If the student at the front of the queue prefers the sandwich on the top of the stack, they will take it and leave the queue.
	Otherwise, they will leave it and go to the queue's end.


This continues until none of the queue students want to take the top sandwich and are thus unable to eat.

You are given two integer arrays students and sandwiches where sandwiches[i] is the type of the i​​​​​​th sandwich in the stack (i = 0 is the top of the stack) and students[j] is the preference of the j​​​​​​th student in the initial queue (j = 0 is the front of the queue). Return the number of students that are unable to eat.",['array'],Easy,256,21,22456,15166,[],"[('c++', 19), ('python', 17), ('python 3', 13), ('python3', 12), ('cpp', 10), ('java', 10), ('queue', 10), ('javascript', 7), ('java-solution', 6), ('easy-understanding', 5), ('simple', 5), ('beginner friendly', 4), ('easy-to-understand', 4), ('stack', 4), ('c#', 3), ('easy', 3), ('ruby', 3), ('swift', 3), ('array', 2), ('c', 2), ('clear-understanding', 2), ('cpp solution', 2), ('easy to understand', 2), ('easytounderstand', 2), ('fast and simple', 2), ('hack', 2), ('optimal', 2), ('python3.8', 2), ('speed', 2), ('2 pointer', 1), ('2 pointer approach', 1), ('2pointer', 1), ('2pointers', 1), ('begginerfriendly', 1), ('c code', 1), ('c++ solution', 1), ('clear explanation', 1), ('commented', 1), ('constant memory', 1), ('constant space', 1), ('deque', 1), ('easiest', 1), ('easy logic', 1), ('easy understand', 1), ('fast', 1), ('fasterthan100', 1), ('fold', 1), ('fp', 1), ('go', 1), ('go-solution', 1), ('golang', 1), ('golang-solution', 1), ('intutive', 1), ('javascript recursive', 1), ('javascript solution', 1), ('js', 1), ('kotlin', 1), ('linear time', 1), ('list', 1), ('lunch', 1), ('o-n', 1), ('php', 1), ('pointer', 1), ('pyhton 3', 1), ('queue and stack', 1), ('rajat', 1), ('rust', 1), ('self explanatory', 1), ('self-explanatory', 1), ('sentinel', 1), ('sentinel-node', 1), ('stl', 1), ('straightforward', 1), ('ultra simple', 1), ('understandable', 1), ('upvote', 1), ('while', 1)]"
1680,Concatenation of Consecutive Binary Numbers,https://leetcode.com/problems/concatenation-of-consecutive-binary-numbers,"Given an integer n, return the decimal value of the binary string formed by concatenating the binary representations of 1 to n in order, modulo 109 + 7.",['math'],Medium,238,170,53355,27908,[],"[('python', 17), ('c++', 15), ('python 3', 14), ('bit manipulation', 11), ('java', 11), ('cpp', 9), ('easy', 7), ('easy-understanding', 7), ('python3', 6), ('math', 5), ('ruby', 4), ('simple', 4), ('bitmanipulation', 3), ('c#', 3), ('explained', 3), ('java-solution', 3), ('javascript', 3), ('left-shift', 3), ('bin', 2), ('golang', 2), ('rust', 2), ('swift', 2), ('100 faster runtime', 1), ('100 memory', 1), ('100 space', 1), ('100 speed', 1), ('1line', 1), ('bad comments', 1), ('beats 100', 1), ('beginner friendly', 1), ('binarynumbers', 1), ('bit operation', 1), ('bit-manipulation', 1), ('bitwise', 1), ('bitwise operation', 1), ('bitwise operator', 1), ('bitwise operators', 1), ('bottom up', 1), ('brute force solution', 1), ('c++ solution', 1), ('cast', 1), ('clean', 1), ('clean code', 1), ('concatenationconsecutive', 1), ('cpp easy', 1), ('cpp solution', 1), ('dynamic programming', 1), ('easy-to-understand', 1), ('easytounderstand', 1), ('explanation', 1), ('fast-solution', 1), ('fasterthan100', 1), ('formula', 1), ('functools', 1), ('go', 1), ('golang-solution', 1), ('int', 1), ('java-8', 1), ('javascript solution', 1), ('kotlin', 1), ('lazy', 1), ('linear', 1), ('linear time', 1), ('lru-cache', 1), ('math-solution', 1), ('matrix operation', 1), ('memoization', 1), ('nlogn', 1), ('o-n', 1), ('oneline', 1), ('optimisation', 1), ('performance', 1), ('python2', 1), ('pythonpython3', 1), ('rajat', 1), ('recurision', 1), ('recursion', 1), ('recursive', 1), ('self-explanatory', 1), ('tle', 1), ('video-explanation', 1)]"
1681,Minimum Incompatibility,https://leetcode.com/problems/minimum-incompatibility,"You are given an integer array nums​​​ and an integer k. You are asked to distribute this array into k subsets of equal size such that there are no two equal elements in the same subset.

A subset's incompatibility is the difference between the maximum and minimum elements in that array.

Return the minimum possible sum of incompatibilities of the k subsets after distributing the array optimally, or return -1 if it is not possible.

A subset is a group integers that appear in the array with no particular order.","['backtracking', 'greedy']",Hard,111,78,12384,4442,[],"[('backtracking', 5), ('python', 5), ('python 3', 4), ('dp', 3), ('golang', 3), ('bitmask', 2), ('c++', 2), ('dynamic programming', 2), ('javascript', 2), ('python3', 2), ('beats 100', 1), ('bit manipulation', 1), ('bitwise', 1), ('c#', 1), ('dfs-memo', 1), ('easy-understanding', 1), ('go', 1), ('memoziation', 1), ('nomask', 1), ('nomemo', 1), ('pre-process', 1), ('pythonpython3', 1), ('recursive', 1), ('ruby', 1), ('rust', 1), ('swift', 1), ('video-explanation', 1)]"
1679,Max Number of K-Sum Pairs,https://leetcode.com/problems/max-number-of-k-sum-pairs,"You are given an integer array nums and an integer k.

In one operation, you can pick two numbers from the array whose sum equals k and remove them from the array.

Return the maximum number of operations you can perform on the array.",['hash-table'],Medium,412,18,69192,37172,"[""Two Sum"", ""Count Good Meals""]","[('c++', 36), ('java', 33), ('hashmap', 31), ('cpp', 22), ('python', 21), ('easy-understanding', 14), ('python 3', 14), ('java-solution', 12), ('python3', 11), ('javascript', 8), ('simple', 7), ('two-pointers', 7), ('c#', 6), ('map', 6), ('two-pointer', 5), ('cpp solution', 4), ('dictionary', 4), ('explained', 4), ('javascript solution', 4), ('ruby', 4), ('sort', 4), ('2 pointers', 3), ('easy', 3), ('golang', 3), ('hash table', 3), ('hindi', 3), ('javasloution', 3), ('linear time', 3), ('map-stl', 3), ('swift', 3), ('two pointers', 3), ('unordered map', 3), ('array-sort', 2), ('clean code', 2), ('counter', 2), ('easy-to-understand', 2), ('explanation', 2), ('fast-solution', 2), ('fastest', 2), ('go', 2), ('interview', 2), ('kotlin', 2), ('rust', 2), ('sorting', 2), ('video-explanation', 2), ('#easy-understanding', 1), ('#java', 1), ('#java-solution', 1), ('#sort', 1), ('1-line', 1), ('100 faster runtime', 1), ('100 fastest', 1), ('100 memory', 1), ('99.32 less memory', 1), ('99.80 faster', 1), ('add numbers', 1), ('array', 1), ('beginner friendly', 1), ('brute force', 1), ('c', 1), ('c++ solution', 1), ('commented', 1), ('comments', 1), ('constant memory', 1), ('constant space', 1), ('count', 1), ('counting', 1), ('cplusplus', 1), ('dictionary c#', 1), ('dictonary', 1), ('easy to underatnd', 1), ('easy-implementation', 1), ('easytounderstand', 1), ('explained solution', 1), ('fast', 1), ('fast and simple', 1), ('fasterthan100', 1), ('frequencies', 1), ('frequency count', 1), ('frequency map', 1), ('frequency table', 1), ('go-solution', 1), ('golang-solution', 1), ('greedy', 1), ('hashing', 1), ('hashtable', 1), ('intutive', 1), ('java ac solution', 1), ('java-8', 1), ('linear', 1), ('linear memory', 1), ('max-number', 1), ('maxnumofkpairs', 1), ('n time', 1), ('nlogn time', 1), ('o-n', 1), ('one pass solution', 1), ('one-liner', 1), ('php', 1), ('python-dictionary', 1), ('python3.8', 1), ('pythonpython3', 1), ('rajat', 1), ('rajawatbanna', 1), ('recursion', 1), ('reduce', 1), ('remove-element', 1), ('self explanatory', 1), ('single pass', 1), ('single-pass', 1), ('straightforward', 1), ('testcase', 1), ('two pointer approach', 1), ('two pointer technique', 1), ('two-sum', 1), ('twopointer', 1), ('ultra simple', 1), ('understandable', 1), ('upvote', 1)]"
1678,Goal Parser Interpretation,https://leetcode.com/problems/goal-parser-interpretation,"You own a Goal Parser that can interpret a string command. The command consists of an alphabet of ""G"", ""()"" and/or ""(al)"" in some order. The Goal Parser will interpret ""G"" as the string ""G"", ""()"" as the string ""o"", and ""(al)"" as the string ""al"". The interpreted strings are then concatenated in the original order.

Given the string command, return the Goal Parser's interpretation of command.",['string'],Easy,258,31,57747,49187,[],"[('c++', 50), ('java', 33), ('cpp', 31), ('javascript', 22), ('python', 22), ('easy', 20), ('python3', 19), ('python 3', 15), ('easy-understanding', 13), ('string', 12), ('c#', 10), ('java-solution', 8), ('easy-to-understand', 7), ('golang', 7), ('simple', 7), ('go', 6), ('0ms', 5), ('easytounderstand', 5), ('string-operation', 5), ('swift', 5), ('one-liner', 4), ('replace', 4), ('stringbuilder', 4), ('brute force', 3), ('c code', 3), ('cpp solution', 3), ('fast', 3), ('fast and simple', 3), ('golang-solution', 3), ('javascript solution', 3), ('js', 3), ('one line', 3), ('python3.8', 3), ('regex', 3), ('ruby', 3), ('#easy-understanding', 2), ('#python 3', 2), ('array', 2), ('built-in', 2), ('c', 2), ('easy understanding', 2), ('fasterthan100', 2), ('if else', 2), ('regexp', 2), ('regular-expression', 2), ('rust', 2), ('simple and easy solution', 2), ('string parsing', 2), ('substring', 2), ('#easytounderstand', 1), ('#simplecode', 1), ('#simpleidea', 1), ('0ms runtime', 1), ('0ms-solution', 1), ('100 faster cpp', 1), ('100 faster runtime', 1), ('100 memory', 1), ('100 speed', 1), ('9 lines', 1), ('93.71 faster', 1), ('arraylist', 1), ('asahiocean', 1), ('begginer friendly', 1), ('brute-force', 1), ('c programming', 1), ('c++ code', 1), ('condition-variable', 1), ('dictonary', 1), ('easy java solution', 1), ('easy to understand', 1), ('easy understand', 1), ('explained', 1), ('explanations', 1), ('fast-solution', 1), ('generalised algorithm', 1), ('greedy', 1), ('hash table', 1), ('if-else', 1), ('ifelse', 1), ('intutive', 1), ('iterate', 1), ('iterative', 1), ('javascrip', 1), ('kotlin', 1), ('libraries', 1), ('linear', 1), ('linear time', 1), ('map', 1), ('methods', 1), ('naive approach', 1), ('newreplacer', 1), ('one pass', 1), ('one pass solution', 1), ('parser', 1), ('php', 1), ('rajat', 1), ('regex expression', 1), ('replace char in string', 1), ('replace elements', 1), ('self explanatory', 1), ('self-explanatory', 1), ('simple-af', 1), ('solution', 1), ('solution-sharing-cpp', 1), ('stack', 1), ('stacks', 1), ('straightforward', 1), ('string-builder', 1), ('string-replace', 1), ('string-searching', 1), ('string.replace', 1), ('test-cases', 1), ('two-liner', 1), ('ultra easy', 1), ('understandable', 1), ('upvote', 1), ('very easy to understand', 1), ('while', 1), ('with-explanation', 1)]"
1675,Minimize Deviation in Array,https://leetcode.com/problems/minimize-deviation-in-array,"You are given an array nums of n positive integers.

You can perform two types of operations on any element of the array any number of times:


	If the element is even, divide it by 2.

	
		For example, if the array is [1,2,3,4], then you can do this operation on the last element, and the array will be [1,2,3,2].
	
	
	If the element is odd, multiply it by 2.
	
		For example, if the array is [1,2,3,4], then you can do this operation on the first element, and the array will be [2,2,3,4].
	
	


The deviation of the array is the maximum difference between any two elements in the array.

Return the minimum deviation the array can have after performing some number of operations.","['heap', 'ordered-map']",Hard,414,18,32913,15851,[],"[('c++', 14), ('priority queue', 12), ('heap', 7), ('cpp', 6), ('java', 5), ('java-solution', 5), ('c#', 4), ('javascript', 4), ('treeset', 4), ('explained', 3), ('multiset', 3), ('cpp solution', 2), ('maxheap', 2), ('python', 2), ('python3', 2), ('ruby', 2), ('swift', 2), ('2-pointer', 1), ('2-pointer approach', 1), ('beats 100', 1), ('c# sortedset', 1), ('easy-to-understand', 1), ('easy-understanding', 1), ('explained solution', 1), ('explanation of logic', 1), ('explanations', 1), ('go', 1), ('golang', 1), ('golang-solution', 1), ('greedy approach', 1), ('heap sort', 1), ('heapq', 1), ('interview', 1), ('java treeset dfs', 1), ('kotlin', 1), ('kotlin-solution', 1), ('mathematical solution', 1), ('maths', 1), ('max heap', 1), ('minimizedeviationinarray', 1), ('priority-queue', 1), ('python 3', 1), ('rust', 1), ('set', 1), ('sets', 1), ('simple', 1), ('simulation', 1), ('sort', 1), ('sorted set', 1), ('testcase error', 1), ('video-explanation', 1)]"
1674,Minimum Moves to Make Array Complementary,https://leetcode.com/problems/minimum-moves-to-make-array-complementary,"You are given an integer array nums of even length n and an integer limit. In one move, you can replace any integer from nums with another integer between 1 and limit, inclusive.

The array nums is complementary if for all indices i (0-indexed), nums[i] + nums[n - 1 - i] equals the same number. For example, the array [1,2,3,4] is complementary because for all indices i, nums[i] + nums[n - 1 - i] = 5.

Return the minimum number of moves required to make nums complementary.",['greedy'],Medium,282,37,11384,3980,[],"[('explanation of logic', 2), ('java', 2), ('prefix sum', 2), ('python', 2), ('c++', 1), ('doubts', 1), ('golang', 1), ('help needed', 1), ('java-solution', 1), ('javascript', 1), ('line-sweep', 1), ('please', 1), ('python3', 1), ('suffix sum', 1), ('swift', 1)]"
1673,Find the Most Competitive Subsequence,https://leetcode.com/problems/find-the-most-competitive-subsequence,"Given an integer array nums and a positive integer k, return the most competitive subsequence of nums of size k.

An array's subsequence is a resulting sequence obtained by erasing some (possibly zero) elements from the array.

We define that a subsequence a is more competitive than a subsequence b (of the same length) if in the first position where a and b differ, subsequence a has a number less than the corresponding number in b. For example, [1,3,4] is more competitive than [1,3,5] because the first position they differ is at the final number, and 4 is less than 5.","['stack', 'heap', 'greedy', 'queue']",Medium,757,43,65955,30039,"[""Remove K Digits"", ""Smallest Subsequence of Distinct Characters""]","[('stack', 35), ('c++', 24), ('java', 16), ('cpp', 13), ('python 3', 9), ('javascript', 8), ('java-solution', 6), ('priority queue', 6), ('python', 6), ('python3', 6), ('stacks', 6), ('easy-understanding', 5), ('c#', 4), ('cpp solution', 4), ('linear time', 4), ('deque', 3), ('golang', 3), ('javascript solution', 3), ('kotlin', 3), ('monotonic-stack', 3), ('ruby', 3), ('dequeue', 2), ('explanation of logic', 2), ('go', 2), ('min-heap', 2), ('priorityqueue', 2), ('segment tree', 2), ('simple', 2), ('subsequence', 2), ('vector', 2), ('video-explanation', 2), ('zea7ot', 2), ('100 faster', 1), ('100 faster runtime', 1), ('accepted solution', 1), ('backtracking', 1), ('beginner friendly', 1), ('brute-force', 1), ('c++ solution', 1), ('c++11', 1), ('clean code', 1), ('code for beginners', 1), ('comments', 1), ('competitivesubsequence', 1), ('cplusplus', 1), ('depth first search', 1), ('dp', 1), ('easy', 1), ('easy to understandd', 1), ('expalanation', 1), ('explained', 1), ('explanation with code', 1), ('explanation with logic', 1), ('fast and simple', 1), ('fast-solution', 1), ('fastest', 1), ('fuse', 1), ('greedy', 1), ('hint', 1), ('in-place', 1), ('interview', 1), ('intution', 1), ('java 8', 1), ('java-8', 1), ('javascrip', 1), ('js', 1), ('leetcode', 1), ('linear memory', 1), ('linear time complexity', 1), ('linked list', 1), ('monotone stack', 1), ('monotonic array', 1), ('monotonic queue', 1), ('monotonic stack', 1), ('one pass solution', 1), ('optimisation', 1), ('performance', 1), ('priority-queue', 1), ('python3.8', 1), ('rust', 1), ('series', 1), ('sliding window', 1), ('slidingwindow', 1), ('stack-based', 1), ('straightforward', 1), ('subarray', 1), ('subsequences', 1), ('swift', 1), ('tle', 1), ('typescript', 1), ('video explanation', 1), ('without stack', 1)]"
1672,Richest Customer Wealth,https://leetcode.com/problems/richest-customer-wealth,"You are given an m x n integer grid accounts where accounts[i][j] is the amount of money the i​​​​​​​​​​​th​​​​ customer has in the j​​​​​​​​​​​th​​​​ bank. Return the wealth that the richest customer has.

A customer's wealth is the amount of money they have in all their bank accounts. The richest customer is the customer that has the maximum wealth.",['array'],Easy,453,95,119683,105487,[],"[('c++', 46), ('java', 44), ('python', 36), ('javascript', 32), ('python 3', 23), ('cpp', 21), ('easy', 18), ('python3', 16), ('java-solution', 13), ('javascript solution', 11), ('easy-understanding', 10), ('one-liner', 10), ('swift', 10), ('c#', 9), ('simple', 9), ('kotlin', 6), ('one line', 6), ('c', 5), ('clean code', 4), ('easy-to-understand', 4), ('fast', 4), ('scala', 4), ('0ms', 3), ('array', 3), ('c code', 3), ('max', 3), ('python3.8', 3), ('reduce', 3), ('solution', 3), ('stl', 3), ('#list comprehension', 2), ('#python', 2), ('1 line', 2), ('comments-added', 2), ('cpp solution', 2), ('dynamic programming', 2), ('easytounderstand', 2), ('fast and simple', 2), ('faster', 2), ('faster than 100', 2), ('for loops', 2), ('golang', 2), ('linq', 2), ('matrix', 2), ('numpy', 2), ('readable code', 2), ('ruby', 2), ('rust', 2), ('simple python solution', 2), ('straight-forward', 2), ('swift5', 2), ('#easy', 1), ('#iterator', 1), ('#python 3', 1), ('0ms runtime', 1), ('0ms-solution', 1), ('1-line', 1), ('1-line solution', 1), ('100 faster', 1), ('2d-array', 1), ('4ms', 1), ('9 lines', 1), ('arrays', 1), ('asahiocean', 1), ('basic', 1), ('beginner friendly', 1), ('beginnerfriendly', 1), ('beginners level', 1), ('best-solution-ever', 1), ('brute force', 1), ('brute-force', 1), ('built-in-function', 1), ('c solution', 1), ('c#-solution', 1), ('c++ code', 1), ('c++ easy to understand', 1), ('c++ solution', 1), ('clean', 1), ('concise', 1), ('constant time', 1), ('contest', 1), ('dichotomy', 1), ('easy to undersstand', 1), ('efficient', 1), ('es6', 1), ('esy sol', 1), ('explained', 1), ('explanation', 1), ('explanation of logic', 1), ('fast-solution', 1), ('for loop', 1), ('functional', 1), ('generator expression', 1), ('go-solution', 1), ('golang-solution', 1), ('grid', 1), ('intutive', 1), ('iterate', 1), ('java ac solution', 1), ('javacript', 1), ('javascriptes6', 1), ('javsacript', 1), ('js', 1), ('kotlin-solution', 1), ('list comprehension', 1), ('loop', 1), ('loops', 1), ('map', 1), ('mapreduce', 1), ('maximum', 1), ('memory efficient', 1), ('negative infinity', 1), ('o1 space', 1), ('one-line', 1), ('oneline', 1), ('php', 1), ('priority queue', 1), ('question need help', 1), ('readable', 1), ('recursive', 1), ('rescursive', 1), ('self-explanatory', 1), ('short', 1), ('simple java solution', 1), ('solution-javascript', 1), ('space complexity', 1), ('std', 1), ('stl algorithms', 1), ('straightforward', 1), ('stream', 1), ('sum', 1), ('time complexity', 1), ('time-complexity-o', 1), ('typescript', 1), ('ultra easy', 1), ('understandable', 1), ('upvote', 1), ('vector', 1)]"
1687,Delivering Boxes from Storage to Ports,https://leetcode.com/problems/delivering-boxes-from-storage-to-ports,"You have the task of delivering some boxes from storage to their ports using only one ship. However, this ship has a limit on the number of boxes and the total weight that it can carry.

You are given an array boxes, where boxes[i] = [ports​​i​, weighti], and three integers portsCount, maxBoxes, and maxWeight.


	ports​​i is the port where you need to deliver the ith box and weightsi is the weight of the ith box.
	portsCount is the number of ports.
	maxBoxes and maxWeight are the respective box and weight limits of the ship.


The boxes need to be delivered in the order they are given. The ship will follow these steps:


	The ship will take some number of boxes from the boxes queue, not violating the maxBoxes and maxWeight constraints.
	For each loaded box in order, the ship will make a trip to the port the box needs to be delivered to and deliver it. If the ship is already at the correct port, no trip is needed, and the box can immediately be delivered.
	The ship then makes a return trip to storage to take more boxes from the queue.


The ship must end at storage after all the boxes have been delivered.

Return the minimum number of trips the ship needs to make to deliver all boxes to their respective ports.","['two-pointers', 'dynamic-programming', 'segment-tree', 'dequeue']",Hard,136,12,6181,2188,[],"[('dp', 3), ('deque', 2), ('dynamic programming', 2), ('python', 2), ('sliding window', 2), ('backtracking', 1), ('c#', 1), ('clean', 1), ('cpp', 1), ('greedy', 1), ('greedy approach', 1), ('intuition', 1), ('java', 1), ('memoization', 1), ('memoziation', 1), ('monotone queue', 1), ('pythonpython3', 1), ('recursion', 1), ('recursive', 1), ('slide window', 1), ('two-pointers', 1)]"
1686,Stone Game VI,https://leetcode.com/problems/stone-game-vi,"Alice and Bob take turns playing a game, with Alice starting first.

There are n stones in a pile. On each player's turn, they can remove a stone from the pile and receive points based on the stone's value. Alice and Bob may value the stones differently.

You are given two integer arrays of length n, aliceValues and bobValues. Each aliceValues[i] and bobValues[i] represents how Alice and Bob, respectively, value the ith stone.

The winner is the person with the most points after all the stones are chosen. If both players have the same amount of points, the game results in a draw. Both players will play optimally. Both players know the other's values.

Determine the result of the game, and:


	If Alice wins, return 1.
	If Bob wins, return -1.
	If the game results in a draw, return 0.",['greedy'],Medium,235,15,11462,5732,"[""Stone Game"", ""Stone Game II"", ""Stone Game III"", ""Stone Game IV"", ""Stone Game V"", ""Stone Game VII""]","[('c++', 7), ('cpp', 6), ('greedy approach', 3), ('java', 3), ('python', 3), ('sort', 3), ('c#', 2), ('easy-understanding', 2), ('javascript', 2), ('proof', 2), ('python 3', 2), ('python3', 2), ('swift', 2), ('#csharp', 1), ('#greedy', 1), ('array', 1), ('beats 100', 1), ('c++ solution', 1), ('cpp solution', 1), ('data structure', 1), ('data structures', 1), ('dp', 1), ('easy', 1), ('easytounderstand', 1), ('exchange-arguments', 1), ('explained', 1), ('explanation', 1), ('fast and simple', 1), ('fastest', 1), ('game', 1), ('golang', 1), ('greedy', 1), ('help needed', 1), ('javascript solution', 1), ('lambda expression', 1), ('linear', 1), ('need help', 1), ('optimisation', 1), ('performance', 1), ('priority queue', 1), ('rajat', 1), ('recursive', 1), ('score', 1), ('simple', 1), ('sorted array', 1)]"
1685,Sum of Absolute Differences in a Sorted Array,https://leetcode.com/problems/sum-of-absolute-differences-in-a-sorted-array,"You are given an integer array nums sorted in non-decreasing order.

Build and return an integer array result with the same length as nums such that result[i] is equal to the summation of absolute differences between nums[i] and all the other elements in the array.

In other words, result[i] is equal to sum(|nums[i]-nums[j]|) where 0 <= j < nums.length and j != i (0-indexed).","['math', 'greedy']",Medium,324,8,16743,10596,[],"[('c++', 20), ('java', 12), ('python', 8), ('cpp', 7), ('prefix sum', 7), ('easytounderstand', 6), ('java-solution', 5), ('python 3', 5), ('easy', 4), ('easy-understanding', 4), ('javascript', 4), ('cpp solution', 3), ('linear time', 3), ('array', 2), ('beginner friendly', 2), ('c#', 2), ('easy-to-understand', 2), ('explanation of logic', 2), ('maths', 2), ('prefix', 2), ('python3', 2), ('simple', 2), ('#cpp', 1), ('#math', 1), ('2ms', 1), ('99.5 faster', 1), ('absolute value', 1), ('arrays', 1), ('beats 100 percent', 1), ('c++ solution', 1), ('consice', 1), ('csharp', 1), ('dynamic programming', 1), ('exceptional', 1), ('explained', 1), ('explanation', 1), ('go', 1), ('golang', 1), ('illustration', 1), ('java ac solution', 1), ('kotlin', 1), ('leftsum rightsum', 1), ('logic explained clearly', 1), ('math', 1), ('modulo', 1), ('postfix prefix', 1), ('prefix-array', 1), ('rajat', 1), ('ruby', 1), ('sequence', 1), ('series', 1), ('short code', 1), ('slidingwindow', 1), ('subsequence', 1), ('suffix', 1), ('suffix sum', 1), ('suffix-sum', 1), ('swift', 1), ('vector', 1), ('video explanation', 1)]"
1684,Count the Number of Consistent Strings,https://leetcode.com/problems/count-the-number-of-consistent-strings,"You are given a string allowed consisting of distinct characters and an array of strings words. A string is consistent if all characters in the string appear in the string allowed.

Return the number of consistent strings in the array words.",['string'],Easy,288,24,47798,39105,[],"[('python', 36), ('java', 34), ('c++', 30), ('python 3', 25), ('cpp', 22), ('easy-understanding', 20), ('javascript', 19), ('set', 17), ('python3', 15), ('easy', 10), ('c#', 9), ('brute force', 7), ('easy-to-understand', 7), ('hashset', 6), ('cpp solution', 5), ('simple', 5), ('easytounderstand', 4), ('golang', 4), ('java-solution', 4), ('rust', 4), ('string', 4), ('beginner friendly', 3), ('javascript solution', 3), ('kotlin', 3), ('regex', 3), ('ruby', 3), ('1-line', 2), ('c', 2), ('clean', 2), ('comments-added', 2), ('go', 2), ('golang-solution', 2), ('hashmap', 2), ('intuitive', 2), ('loop', 2), ('map', 2), ('reduce', 2), ('self-explanatory', 2), ('string-operation', 2), ('understandable', 2), ('#easy #java', 1), ('#javascript', 1), ('#typescript', 1), ('1line', 1), ('1liner', 1), ('28ms', 1), ('array', 1), ('beats 100', 1), ('bit manipulation', 1), ('bit mask', 1), ('bitflags', 1), ('bitset', 1), ('bitwise operation', 1), ('bytes', 1), ('c code', 1), ('c#-solution', 1), ('c++ code', 1), ('c++ solution', 1), ('c++11', 1), ('char', 1), ('char compare', 1), ('character', 1), ('chars', 1), ('clean solution', 1), ('consitent strings', 1), ('countconsistentstrings', 1), ('counters', 1), ('cpp easy', 1), ('csharp', 1), ('easy to understandd', 1), ('efficent approach', 1), ('es6', 1), ('every', 1), ('explained', 1), ('fast and simple', 1), ('fast-solution', 1), ('fasterthan100', 1), ('filter', 1), ('fold', 1), ('for-else', 1), ('functional programming', 1), ('github', 1), ('hashing', 1), ('hashtable', 1), ('implementation', 1), ('includes', 1), ('iterative', 1), ('javascript recursive', 1), ('js', 1), ('label loop', 1), ('linear time', 1), ('loops', 1), ('one-liner', 1), ('optimal', 1), ('optimisation', 1), ('performance', 1), ('python solution', 1), ('python2', 1), ('python3.8', 1), ('rajat', 1), ('scala', 1), ('set-difference', 1), ('short', 1), ('simple solution', 1), ('simple-solution', 1), ('solution', 1), ('solution-python', 1), ('space-complexity-1', 1), ('strspn', 1), ('superset', 1), ('swift', 1), ('tight', 1), ('ultra easy', 1), ('upvote', 1), ('vector', 1), ('video explanation', 1), ('with-explanation', 1)]"
1665,Minimum Initial Energy to Finish Tasks,https://leetcode.com/problems/minimum-initial-energy-to-finish-tasks,"You are given an array tasks where tasks[i] = [actuali, minimumi]:


	actuali is the actual amount of energy you spend to finish the ith task.
	minimumi is the minimum amount of energy you require to begin the ith task.


For example, if the task is [10, 12] and your current energy is 11, you cannot start this task. However, if your current energy is 13, you can complete this task, and your energy will be 3 after finishing it.

You can finish the tasks in any order you like.

Return the minimum initial amount of energy you will need to finish all the tasks.",['greedy'],Hard,218,24,14547,9406,[],"[('greedy', 13), ('java', 9), ('c++', 8), ('binary-search', 6), ('sort', 6), ('python3', 5), ('sorting', 4), ('java-solution', 3), ('python', 3), ('python 3', 3), ('sorted array', 3), ('binary-search-explanation', 2), ('easy-understanding', 2), ('easytounderstand', 2), ('golang', 2), ('greedy approach', 2), ('javascript solution', 2), ('binary search', 1), ('c#', 1), ('c++11', 1), ('comments added', 1), ('comparator', 1), ('concise', 1), ('cpp solution', 1), ('csharp', 1), ('decrease', 1), ('easy', 1), ('easy-to-understand', 1), ('explanations', 1), ('heap', 1), ('help needed', 1), ('implementation', 1), ('javascript', 1), ('kotlin', 1), ('linear time', 1), ('math', 1), ('o-nlogn', 1), ('python2', 1), ('ruby', 1), ('rust', 1), ('similar-problems', 1), ('simple', 1), ('space-optimized', 1), ('swift', 1), ('time-limit-exceeded-c++', 1), ('time-optimized', 1), ('video-explanation', 1)]"
1664,Ways to Make a Fair Array,https://leetcode.com/problems/ways-to-make-a-fair-array,"You are given an integer array nums. You can choose exactly one index (0-indexed) and remove the element. Notice that the index of the elements may change after the removal.

For example, if nums = [6,1,7,4,1]:


	Choosing to remove index 1 results in nums = [6,7,4,1].
	Choosing to remove index 2 results in nums = [6,1,4,1].
	Choosing to remove index 4 results in nums = [6,1,7,4].


An array is fair if the sum of the odd-indexed values equals the sum of the even-indexed values.

Return the number of indices that you could choose such that after the removal, nums is fair.","['dynamic-programming', 'greedy']",Medium,432,13,22722,14068,[],"[('c++', 13), ('prefix sum', 11), ('python 3', 11), ('java', 8), ('java-solution', 8), ('python', 7), ('javascript', 6), ('cpp', 5), ('python3', 5), ('dynamic programming', 4), ('explanation of logic', 4), ('c#', 3), ('cpp solution', 3), ('dp', 3), ('fast-solution', 3), ('linear time', 3), ('cplusplus', 2), ('easy-understanding', 2), ('explained', 2), ('fast and simple', 2), ('ruby', 2), ('simple', 2), ('suffix sum', 2), ('swift', 2), ('1-line', 1), ('100 memory', 1), ('100 space', 1), ('accepted solution', 1), ('array', 1), ('c', 1), ('c+', 1), ('clear explanation', 1), ('comments-added', 1), ('cpp easy', 1), ('cpp with explanation', 1), ('easy-to-understand', 1), ('golang', 1), ('java ac solution', 1), ('linear memory', 1), ('linear-time', 1), ('linertime', 1), ('logic exlpained', 1), ('logic explained clearly', 1), ('math', 1), ('o-n', 1), ('prefix-sum', 1), ('prefixsum', 1), ('reduce', 1), ('running sum', 1), ('two arrays', 1), ('waystomakeafairarray', 1)]"
1663,Smallest String With A Given Numeric Value,https://leetcode.com/problems/smallest-string-with-a-given-numeric-value,"The numeric value of a lowercase character is defined as its position (1-indexed) in the alphabet, so the numeric value of a is 1, the numeric value of b is 2, the numeric value of c is 3, and so on.

The numeric value of a string consisting of lowercase characters is defined as the sum of its characters' numeric values. For example, the numeric value of the string ""abe"" is equal to 1 + 2 + 5 = 8.

You are given two integers n and k. Return the lexicographically smallest string with length equal to n and numeric value equal to k.

Note that a string x is lexicographically smaller than string y if x comes before y in dictionary order, that is, either x is a prefix of y, or if i is the first position such that x[i] != y[i], then x[i] comes before y[i] in alphabetic order.",['greedy'],Medium,400,10,48934,31435,[],"[('c++', 29), ('greedy', 25), ('java', 25), ('python', 20), ('python 3', 18), ('cpp', 17), ('greedy approach', 11), ('python3', 11), ('java-solution', 9), ('explained', 8), ('easy', 7), ('javascript', 7), ('math', 6), ('simple', 5), ('c#', 4), ('cpp solution', 4), ('easy-understanding', 4), ('golang', 3), ('kotlin', 3), ('linear time', 3), ('python3.8', 3), ('efficient solution', 2), ('one-liner', 2), ('python2', 2), ('recursion', 2), ('ruby', 2), ('string', 2), ('swift', 2), ('video-explanation', 2), ('basic maths', 1), ('brute force', 1), ('brute force to optimal', 1), ('c', 1), ('c++ solution', 1), ('c++11', 1), ('clean code', 1), ('combinatorics', 1), ('commented', 1), ('comments-added', 1), ('constant memory', 1), ('cpp easy', 1), ('divide and conquer', 1), ('easy to understandd', 1), ('easy-to-understand', 1), ('explained solution', 1), ('explanation with code', 1), ('explanations', 1), ('fast', 1), ('fast-solution', 1), ('go', 1), ('golang-solution', 1), ('greedy algorithm', 1), ('javascript solution', 1), ('lexicographical order', 1), ('loop', 1), ('math solution', 1), ('math-solution', 1), ('math.min', 1), ('mathematical', 1), ('o-n', 1), ('one-line', 1), ('optimisation', 1), ('performance', 1), ('permutation', 1), ('permutations', 1), ('precacluation', 1), ('pythonpython3', 1), ('recurision', 1), ('redirect21', 1), ('reverse', 1), ('rust', 1), ('simple clear c++ solution', 1), ('single pass', 1), ('smalleststrwithnumericval', 1), ('tail-recursion', 1), ('thought-process', 1), ('two-lines', 1), ('typescript', 1), ('video explanation', 1), ('video-explaination', 1)]"
1662,Check If Two String Arrays are Equivalent,https://leetcode.com/problems/check-if-two-string-arrays-are-equivalent,"Given two string arrays word1 and word2, return true if the two arrays represent the same string, and false otherwise.

A string is represented by an array if the array elements concatenated in order forms the string.",['string'],Easy,355,80,99100,81716,[],"[('java', 65), ('python', 45), ('c++', 43), ('python 3', 32), ('easy-understanding', 30), ('easy', 27), ('java-solution', 27), ('javascript', 25), ('cpp', 21), ('python3', 16), ('string', 16), ('simple', 12), ('c#', 11), ('cpp solution', 9), ('easy-to-understand', 8), ('javascript solution', 6), ('join', 6), ('one-liner', 6), ('swift', 6), ('c', 5), ('explained', 5), ('golang', 5), ('stringbuilder', 5), ('iterator', 4), ('linear time', 4), ('ruby', 4), ('0ms', 3), ('100 speed', 3), ('c code', 3), ('constant space', 3), ('fast', 3), ('js', 3), ('kotlin', 3), ('one line', 3), ('pointers', 3), ('simple-solution', 3), ('beginner friendly', 2), ('brute force', 2), ('comments-added', 2), ('constant memory', 2), ('easytounderstand', 2), ('fastest', 2), ('generator', 2), ('go', 2), ('linear', 2), ('php', 2), ('python3.8', 2), ('rust', 2), ('solution', 2), ('string builder', 2), ('string parsing', 2), ('string-operation', 2), ('strings', 2), ('swift5', 2), ('two-pointers', 2), ('1 line', 1), ('1-liner', 1), ('100', 1), ('100 faster runtime', 1), ('100 memory', 1), ('1liner', 1), ('4lines', 1), ('accumulate', 1), ('array', 1), ('arrays', 1), ('arraystringsareequal', 1), ('beginners', 1), ('boolean', 1), ('brute force to optimal', 1), ('c++ code', 1), ('c++ easy to understand', 1), ('c++ solution', 1), ('char compare', 1), ('char comparison', 1), ('character compare', 1), ('character comparison', 1), ('check-two-string', 1), ('compare', 1), ('cpp easy', 1), ('easiest', 1), ('easysolution', 1), ('efficient', 1), ('efficient algorithm', 1), ('enumeration', 1), ('es6', 1), ('explained solution', 1), ('explanations', 1), ('fast-solution', 1), ('fasterthan100', 1), ('flatten', 1), ('functional', 1), ('generators', 1), ('github', 1), ('go-solution', 1), ('golang-solution', 1), ('hash', 1), ('intutive', 1), ('iterator design pattern', 1), ('itertools', 1), ('java ac solution', 1), ('java simple', 1), ('joke', 1), ('js javascript', 1), ('kotlin-solution', 1), ('kotllin', 1), ('lambdas', 1), ('lazy', 1), ('less memory than 100', 1), ('list comprehension', 1), ('lists', 1), ('lucid', 1), ('o1 space', 1), ('object oriented solution', 1), ('one line solution', 1), ('oneliner', 1), ('oops', 1), ('pointer', 1), ('python tricks', 1), ('python-2', 1), ('rajawatbanna', 1), ('scala', 1), ('self explanatory', 1), ('self-explanatory', 1), ('short', 1), ('simple clear c++ solution', 1), ('space-complexity', 1), ('stl', 1), ('stl algorithms', 1), ('string operation', 1), ('stringbuffer', 1), ('stringbuilder in java', 1), ('strings parsing', 1), ('two string', 1), ('ultra easy', 1), ('upvote', 1), ('video interview', 1), ('video solution', 1), ('video-explaination', 1), ('video-explanation', 1)]"
1659,Maximize Grid Happiness,https://leetcode.com/problems/maximize-grid-happiness,"You are given four integers, m, n, introvertsCount, and extrovertsCount. You have an m x n grid, and there are two types of people: introverts and extroverts. There are introvertsCount introverts and extrovertsCount extroverts.

You should decide how many people you want to live in the grid and assign each of them one grid cell. Note that you do not have to have all the people living in the grid.

The happiness of each person is calculated as follows:


	Introverts start with 120 happiness and lose 30 happiness for each neighbor (introvert or extrovert).
	Extroverts start with 40 happiness and gain 20 happiness for each neighbor (introvert or extrovert).


Neighbors live in the directly adjacent cells north, east, south, and west of a person's cell.

The grid happiness is the sum of each person's happiness. Return the maximum possible grid happiness.","['dynamic-programming', 'backtracking']",Hard,136,42,7322,2609,[],"[('dp', 3), ('bit masking', 2), ('c#', 1), ('dynamic programming', 1), ('explained', 1), ('explanation', 1), ('java', 1), ('mask', 1), ('pruning', 1), ('python3', 1)]"
1657,Determine if Two Strings Are Close,https://leetcode.com/problems/determine-if-two-strings-are-close,"Two strings are considered close if you can attain one from the other using the following operations:


	Operation 1: Swap any two existing characters.

	
		For example, abcde -> aecdb
	
	
	Operation 2: Transform every occurrence of one existing character into another existing character, and do the same with the other character.
	
		For example, aacabb -> bbcbaa (all a's turn into b's, and all b's turn into a's)
	
	


You can use the operations on either string as many times as necessary.

Given two strings, word1 and word2, return true if word1 and word2 are close, and false otherwise.",['greedy'],Medium,431,30,58318,32122,"[""Buddy Strings"", ""Minimum Swaps to Make Strings Equal"", ""Minimum Number of Steps to Make Two Strings Anagram""]","[('c++', 27), ('java', 20), ('cpp', 14), ('python', 11), ('python3', 10), ('easy-understanding', 9), ('python 3', 9), ('counter', 8), ('javascript', 7), ('cpp solution', 6), ('hashmap', 6), ('c#', 5), ('sorting', 5), ('array-sort', 4), ('easy', 4), ('golang', 4), ('java-solution', 4), ('go', 3), ('sets', 3), ('simple', 3), ('swift', 3), ('video-explanation', 3), ('clean code', 2), ('easiest', 2), ('explained', 2), ('frequency', 2), ('frequency-count', 2), ('go-solution', 2), ('golang-solution', 2), ('greedy', 2), ('linear time', 2), ('map', 2), ('sort', 2), ('xor', 2), ('100 faster runtime', 1), ('array', 1), ('bit manipulation', 1), ('c++ solution', 1), ('char compare', 1), ('char comparison', 1), ('character compare', 1), ('character comparison', 1), ('collections', 1), ('constant space', 1), ('count', 1), ('counting-sort', 1), ('cpp easy', 1), ('dict', 1), ('dictionary', 1), ('easy-to-understand', 1), ('easytounderstand', 1), ('explained solution', 1), ('facebook', 1), ('fast and simple', 1), ('fast-solution', 1), ('frequency array', 1), ('frequency table', 1), ('frequencycounting', 1), ('google', 1), ('hash table', 1), ('hash-function', 1), ('hashmaps', 1), ('hashtable', 1), ('intuitive', 1), ('java ac solution', 1), ('java-8', 1), ('javascript solution', 1), ('kotlin', 1), ('leetcode 1657', 1), ('leetcode-issue-only', 1), ('linear memory', 1), ('linear-time-space', 1), ('map-stl', 1), ('microsoft-india', 1), ('occurrence', 1), ('one liner', 1), ('oneline', 1), ('optimized', 1), ('python 2', 1), ('python2', 1), ('python3.8', 1), ('raviinroorkee', 1), ('ruby', 1), ('rust', 1), ('set', 1), ('short c++ code', 1), ('string', 1), ('string-operation', 1), ('twostringsareclose', 1), ('typescript', 1), ('vectors', 1), ('video explaination', 1)]"
1658,Minimum Operations to Reduce X to Zero,https://leetcode.com/problems/minimum-operations-to-reduce-x-to-zero,"You are given an integer array nums and an integer x. In one operation, you can either remove the leftmost or the rightmost element from the array nums and subtract its value from x. Note that this modifies the array for future operations.

Return the minimum number of operations to reduce x to exactly 0 if it's possible, otherwise, return -1.","['two-pointers', 'binary-search', 'greedy', 'sliding-window']",Medium,832,19,96200,32040,"[""Minimum Size Subarray Sum"", ""Subarray Sum Equals K""]","[('c++', 18), ('java', 15), ('prefix sum', 12), ('slidingwindow', 10), ('javascript', 8), ('two-pointers', 7), ('python', 6), ('c#', 5), ('hashmap', 5), ('python3', 5), ('cpp', 4), ('python 3', 4), ('sliding window', 4), ('sliding-window', 4), ('discuss', 3), ('greedy', 3), ('java-solution', 3), ('javascript solution', 3), ('linear', 3), ('100 faster runtime', 2), ('100 percentage fastest', 2), ('100 space', 2), ('100 speed', 2), ('binary-search', 2), ('clean code', 2), ('cpp solution', 2), ('cumulative sum', 2), ('dfs', 2), ('fast and simple', 2), ('fastest', 2), ('iterator', 2), ('suffix-map', 2), ('unordered map', 2), ('video explanation', 2), ('video-explanation', 2), ('100 memory', 1), ('c#-solution', 1), ('c++ solution', 1), ('constant', 1), ('constant memory', 1), ('cumulative sums', 1), ('easy-to-understand', 1), ('easy-understanding', 1), ('explain', 1), ('explained', 1), ('explained solution', 1), ('explanation with logic', 1), ('fast-solution', 1), ('go', 1), ('golang', 1), ('golang-solution', 1), ('interview', 1), ('interview experience', 1), ('iterative', 1), ('java-8', 1), ('kotlin', 1), ('linear time', 1), ('logic explained clearly', 1), ('map', 1), ('minoperationstoreduceto0', 1), ('optimisation', 1), ('performance', 1), ('prefix-array', 1), ('recursion', 1), ('recursive approach', 1), ('ruby', 1), ('simple', 1), ('sliding window algorithm', 1), ('subarray', 1), ('subarray sum', 1), ('subarray sum equals', 1), ('subarray sum equals k', 1), ('swift', 1), ('top down dp', 1), ('window-sliding', 1)]"
1656,Design an Ordered Stream,https://leetcode.com/problems/design-an-ordered-stream,"There is a stream of n (idKey, value) pairs arriving in an arbitrary order, where idKey is an integer between 1 and n and value is a string. No two pairs have the same id.

Design a stream that returns the values in increasing order of their IDs by returning a chunk (list) of values after each insertion. The concatenation of all the chunks should result in a list of the sorted values.

Implement the OrderedStream class:


	OrderedStream(int n) Constructs the stream to take n values.
	String[] insert(int idKey, String value) Inserts the pair (idKey, value) into the stream, then returns the largest possible chunk of currently inserted values that appear next in the order.","['array', 'design']",Easy,96,730,21638,17721,[],"[('python3', 10), ('c++', 9), ('java', 9), ('python', 8), ('javascript', 6), ('python 3', 6), ('c#', 5), ('simple', 5), ('cpp', 3), ('swift', 3), ('array', 2), ('clean code', 2), ('easy', 2), ('easy-to-understand', 2), ('easy-understanding', 2), ('golang', 2), ('python3.8', 2), ('beginner friendly', 1), ('c++ code', 1), ('comments', 1), ('comments-added', 1), ('dp-techqique', 1), ('easy to read', 1), ('easy to undersstand', 1), ('easy to understand', 1), ('easytounderstand', 1), ('explained', 1), ('fasterthan100', 1), ('go', 1), ('golang-solution', 1), ('javascript solution', 1), ('linear', 1), ('list', 1), ('oop', 1), ('pointer', 1), ('question explanation', 1), ('question-not-clear', 1), ('ruby', 1), ('rust', 1), ('scala', 1), ('solution', 1), ('yield', 1)]"
1649,Create Sorted Array through Instructions,https://leetcode.com/problems/create-sorted-array-through-instructions,"Given an integer array instructions, you are asked to create a sorted array from the elements in instructions. You start with an empty container nums. For each element from left to right in instructions, insert it into nums. The cost of each insertion is the minimum of the following:


	The number of elements currently in nums that are strictly less than instructions[i].
	The number of elements currently in nums that are strictly greater than instructions[i].


For example, if inserting element 3 into nums = [1,2,3,5], the cost of insertion is min(2, 1) (elements 1 and 2 are less than 3, element 5 is greater than 3) and nums will become [1,2,3,3,5].

Return the total cost to insert all elements from instructions into nums. Since the answer may be large, return it modulo 109 + 7","['binary-search', 'binary-indexed-tree', 'segment-tree', 'ordered-map']",Hard,353,50,47138,17313,[],"[('c++', 9), ('fenwick-tree', 6), ('segment tree', 6), ('javascript', 4), ('python', 4), ('binary-search', 3), ('java', 3), ('binary index tree', 2), ('binary indexed tree', 2), ('binary search tree', 2), ('binary-indexed-tree', 2), ('bit', 2), ('bit tree', 2), ('bst', 2), ('c#', 2), ('explained', 2), ('go', 2), ('golang', 2), ('python3', 2), ('avl tree', 1), ('binary search', 1), ('binary-tree', 1), ('cpp', 1), ('easy-to-understand', 1), ('easy-understanding', 1), ('explained solution', 1), ('explanation with code', 1), ('gcc', 1), ('gnupbds', 1), ('go-solution', 1), ('golang-solution', 1), ('help needed', 1), ('inbuilt functions', 1), ('inbuilt method', 1), ('java-solution', 1), ('javascript solution', 1), ('linearithmic', 1), ('list', 1), ('merge sort', 1), ('modern', 1), ('ordered sets', 1), ('ordered-dict', 1), ('pointer manipulation', 1), ('python 3', 1), ('ruby', 1), ('rust', 1), ('sorted-list', 1), ('sortedarrthruinstructions', 1), ('sortedlist', 1), ('tle', 1), ('video explanation', 1)]"
1648,Sell Diminishing-Valued Colored Balls,https://leetcode.com/problems/sell-diminishing-valued-colored-balls,"You have an inventory of different colored balls, and there is a customer that wants orders balls of any color.

The customer weirdly values the colored balls. Each colored ball's value is the number of balls of that color you currently have in your inventory. For example, if you own 6 yellow balls, the customer would pay 6 for the first yellow ball. After the transaction, there are only 5 yellow balls left, so the next yellow ball is then valued at 5 (i.e., the value of the balls decreases as you sell more to the customer).

You are given an integer array, inventory, where inventory[i] represents the number of balls of the ith color that you initially own. You are also given an integer orders, which represents the total number of balls that the customer wants. You can sell the balls in any order.

Return the maximum total value that you can attain after selling orders colored balls. As the answer may be too large, return it modulo 109 + 7.","['math', 'greedy', 'sort']",Medium,273,67,28984,8914,[],"[('java', 5), ('binary-search', 4), ('python', 4), ('c++', 3), ('greedy', 3), ('math', 3), ('python3', 3), ('sorting', 3), ('javascript', 2), ('maths', 2), ('maxheap', 2), ('python 3', 2), ('sort', 2), ('c#', 1), ('easy', 1), ('explanation of logic', 1), ('golang', 1), ('heap', 1), ('importantobservation', 1), ('interval', 1), ('modulo-arithmatic', 1), ('ruby', 1), ('rust', 1), ('sorted dictionary', 1), ('swift', 1), ('video-explanation', 1)]"
1647,Minimum Deletions to Make Character Frequencies Unique,https://leetcode.com/problems/minimum-deletions-to-make-character-frequencies-unique,"A string s is called good if there are no two different characters in s that have the same frequency.

Given a string s, return the minimum number of characters you need to delete to make s good.

The frequency of a character in a string is the number of times it appears in the string. For example, in the string ""aab"", the frequency of 'a' is 2, while the frequency of 'b' is 1.","['greedy', 'sort']",Medium,402,14,46370,25784,[],"[('java', 14), ('c++', 13), ('easy-understanding', 12), ('python', 8), ('python 3', 8), ('greedy', 7), ('c#', 5), ('hashmap', 5), ('javascript', 5), ('python3', 5), ('cpp solution', 4), ('cpp', 3), ('easy-to-understand', 3), ('easytounderstand', 3), ('priority queue', 3), ('simple', 3), ('easy', 2), ('golang', 2), ('map-stl', 2), ('swift', 2), ('arrays.sort', 1), ('asahiocean', 1), ('brute force', 1), ('c#-solution', 1), ('dictionary c#', 1), ('expalanation', 1), ('explained', 1), ('explained solution', 1), ('frequency count', 1), ('github', 1), ('greedy approach', 1), ('hash', 1), ('hash set', 1), ('hash table', 1), ('hashing', 1), ('hashset', 1), ('heap', 1), ('heapq', 1), ('index based', 1), ('intuitive', 1), ('java simple', 1), ('java-solution', 1), ('javascript solution', 1), ('kotlin', 1), ('linear time', 1), ('lowerbound', 1), ('map', 1), ('map entry', 1), ('mindeletecharfrequnique', 1), ('no extra space', 1), ('optimal', 1), ('python2', 1), ('set', 1), ('solution', 1), ('sort', 1), ('sorting', 1), ('string', 1), ('typescript', 1), ('understandable', 1), ('unordered map', 1)]"
1646,Get Maximum in Generated Array,https://leetcode.com/problems/get-maximum-in-generated-array,"You are given an integer n. An array nums of length n + 1 is generated in the following way:


	nums[0] = 0
	nums[1] = 1
	nums[2 * i] = nums[i] when 2 <= 2 * i <= n
	nums[2 * i + 1] = nums[i] + nums[i + 1] when 2 <= 2 * i + 1 <= n


Return the maximum integer in the array nums​​​.",['array'],Easy,155,240,63138,33535,[],"[('c++', 34), ('cpp', 22), ('java', 18), ('easy-understanding', 12), ('python', 10), ('python 3', 10), ('cpp solution', 8), ('easy', 8), ('javascript', 8), ('easytounderstand', 7), ('java-solution', 7), ('python3', 6), ('dp', 5), ('100 faster runtime', 4), ('array', 4), ('simple', 4), ('swift', 4), ('dynamic programming', 3), ('arrays', 2), ('c++ solution', 2), ('clean code', 2), ('cpp easy', 2), ('explained', 2), ('fast and simple', 2), ('fast-solution', 2), ('fasterthan100', 2), ('golang', 2), ('javascript solution', 2), ('ruby', 2), ('scala', 2), ('simulation', 2), ('upvote', 2), ('video-explanation', 2), ('0ms-solution', 1), ('100 fastest', 1), ('100 memory', 1), ('100 speed', 1), ('1ms runtime', 1), ('brute force to optimal', 1), ('c', 1), ('c#', 1), ('comments-added', 1), ('concept', 1), ('contest', 1), ('dict', 1), ('dictonary', 1), ('dp made easy', 1), ('dp-techqique', 1), ('dynamic-programming', 1), ('easy to understand', 1), ('easy-to-understand', 1), ('easy-understand', 1), ('element', 1), ('expalanation', 1), ('explaination', 1), ('faster', 1), ('go', 1), ('go-solution', 1), ('golang-solution', 1), ('image', 1), ('interview', 1), ('intutive', 1), ('iteration', 1), ('iterative', 1), ('java-8', 1), ('js', 1), ('kotlin', 1), ('lazy seq', 1), ('linear time', 1), ('malloc', 1), ('math', 1), ('maximum', 1), ('memoization', 1), ('odd-even', 1), ('one pass', 1), ('optimisation', 1), ('performance', 1), ('php', 1), ('python2', 1), ('readable', 1), ('recursion', 1), ('recursive', 1), ('recusion', 1), ('rust', 1), ('self-referential', 1), ('sequence', 1), ('series', 1), ('simple-solution', 1), ('slice', 1), ('speed', 1), ('static', 1), ('straightforward', 1), ('top-down', 1), ('ultra easy', 1), ('understandable', 1), ('vec', 1), ('vector', 1), ('video', 1), ('video explaination', 1), ('video solution', 1)]"
1670,Design Front Middle Back Queue,https://leetcode.com/problems/design-front-middle-back-queue,"Design a queue that supports push and pop operations in the front, middle, and back.

Implement the FrontMiddleBack class:


	FrontMiddleBack() Initializes the queue.
	void pushFront(int val) Adds val to the front of the queue.
	void pushMiddle(int val) Adds val to the middle of the queue.
	void pushBack(int val) Adds val to the back of the queue.
	int popFront() Removes the front element of the queue and returns it. If the queue is empty, return -1.
	int popMiddle() Removes the middle element of the queue and returns it. If the queue is empty, return -1.
	int popBack() Removes the back element of the queue and returns it. If the queue is empty, return -1.


Notice that when there are two middle position choices, the operation is performed on the frontmost middle position choice. For example:


	Pushing 6 into the middle of [1, 2, 3, 4, 5] results in [1, 2, 6, 3, 4, 5].
	Popping the middle from [1, 2, 3, 4, 5, 6] returns 3 and results in [1, 2, 4, 5, 6].","['linked-list', 'design', 'dequeue']",Medium,197,42,14203,7665,"[""Design Circular Deque"", ""Design Circular Queue""]","[('c++', 15), ('java', 11), ('easy-understanding', 9), ('vector', 8), ('cpp', 7), ('deque', 6), ('simple', 6), ('doubly linked list', 5), ('python', 5), ('linked-list', 4), ('c#', 3), ('doubly-linked list', 3), ('doubly-linked-list', 3), ('python 3', 3), ('python3', 3), ('fast-solution', 2), ('golang', 2), ('golang-solution', 2), ('java-solution', 2), ('javascript', 2), ('linkedlists', 2), ('optimal', 2), ('simple clear c++ solution', 2), ('simualtion', 2), ('stl', 2), ('100 speed', 1), ('clean code', 1), ('comments-added', 1), ('constant space', 1), ('constant time', 1), ('cpp solution', 1), ('csharp', 1), ('design', 1), ('double-linked-list', 1), ('doublylinkedlist', 1), ('easytounderstand', 1), ('fasterthan100', 1), ('fastest', 1), ('frontmiddlebackqueue', 1), ('go', 1), ('go lang', 1), ('linear memory', 1), ('linear time', 1), ('linked list', 1), ('linkedlist', 1), ('list', 1), ('queue', 1), ('rajat', 1), ('swift', 1), ('three-pointers', 1), ('vector of queue', 1), ('why', 1)]"
1671,Minimum Number of Removals to Make Mountain Array,https://leetcode.com/problems/minimum-number-of-removals-to-make-mountain-array,"You may recall that an array arr is a mountain array if and only if:


	arr.length >= 3
	There exists some index i (0-indexed) with 0 < i < arr.length - 1 such that:
	
		arr[0] < arr[1] < ... < arr[i - 1] < arr[i]
		arr[i] > arr[i + 1] > ... > arr[arr.length - 1]
	
	


Given an integer array nums​​​, return the minimum number of elements to remove to make nums​​​ a mountain array.",['dynamic-programming'],Hard,270,4,12855,5784,"[""Longest Increasing Subsequence"", ""Longest Mountain in Array"", ""Peak Index in a Mountain Array"", ""Valid Mountain Array"", ""Find in Mountain Array""]","[('c++', 10), ('dp', 10), ('dynamic programming', 9), ('java', 9), ('lis', 9), ('c#', 3), ('cpp', 3), ('easy-understanding', 3), ('java-solution', 2), ('python', 2), ('python 3', 2), ('python3', 2), ('#binarysearch', 1), ('#list', 1), ('#no-explanation', 1), ('awesome samriddhi', 1), ('binary search', 1), ('binary-search', 1), ('dp-techqique', 1), ('easytounderstand', 1), ('explained', 1), ('explanations', 1), ('javascript', 1), ('javascript solution', 1), ('ritik', 1), ('video explanation', 1), ('video-explanation', 1)]"
1669,Merge In Between Linked Lists,https://leetcode.com/problems/merge-in-between-linked-lists,"You are given two linked lists: list1 and list2 of sizes n and m respectively.

Remove list1's nodes from the ath node to the bth node, and put list2 in their place.

The blue edges and nodes in the following figure incidate the result:

Build the result list and return its head.",['linked-list'],Medium,321,57,27870,21048,[],"[('c++', 30), ('java', 24), ('cpp', 19), ('easy-understanding', 15), ('easy', 9), ('python', 9), ('python 3', 9), ('linkedlists', 8), ('linked-list', 7), ('javascript', 6), ('python3', 5), ('c#', 4), ('cpp solution', 4), ('linked list', 4), ('c', 3), ('comments-added', 3), ('linkedlist', 3), ('simple', 3), ('fast and simple', 2), ('golang', 2), ('java-solution', 2), ('linear time', 2), ('linked lists', 2), ('ruby', 2), ('straightforward', 2), ('#linkedlist', 1), ('100 faster runtime', 1), ('1ms', 1), ('2ms', 1), ('c++ code', 1), ('c++ solution', 1), ('c++11', 1), ('clean code', 1), ('commented code', 1), ('comments', 1), ('constant space', 1), ('constant-space', 1), ('cpp doubt', 1), ('cpp easy', 1), ('csharp', 1), ('easy-to-understand', 1), ('easytounderstand', 1), ('efficient approach', 1), ('explaination', 1), ('explained', 1), ('explained solution', 1), ('go', 1), ('go-solution', 1), ('golang solution', 1), ('golang-solution', 1), ('iterative', 1), ('javascript solution', 1), ('js', 1), ('linear-time', 1), ('linked-lists', 1), ('list', 1), ('merge-linklist', 1), ('mergebwlinkedlist', 1), ('pointer arithmetic', 1), ('pointers', 1), ('python2', 1), ('pythonpython3', 1), ('rajat', 1), ('rust', 1), ('short', 1), ('single linked list', 1), ('single-linked-list', 1), ('slowfast pointers', 1), ('swift', 1), ('swift5', 1), ('two pointer approach', 1), ('two pointer technique', 1), ('two-pointers', 1)]"
1668,Maximum Repeating Substring,https://leetcode.com/problems/maximum-repeating-substring,"For a string sequence, a string word is k-repeating if word concatenated k times is a substring of sequence. The word's maximum k-repeating value is the highest value k where word is k-repeating in sequence. If word is not a substring of sequence, word's maximum k-repeating value is 0.

Given strings sequence and word, return the maximum k-repeating value of word in sequence.",['string'],Easy,162,53,31162,12030,"[""Detect Pattern of Length M Repeated K or More Times""]","[('java', 14), ('python 3', 12), ('c++', 11), ('cpp', 10), ('python', 10), ('python3', 5), ('javascript', 4), ('brute force', 3), ('c#', 3), ('easy', 3), ('easy-understanding', 3), ('ruby', 3), ('cpp solution', 2), ('easy-to-understand', 2), ('golang', 2), ('golang-solution', 2), ('java-solution', 2), ('rust', 2), ('string', 2), ('substring', 2), ('swift', 2), ('1-line', 1), ('brute-force', 1), ('c++ solution', 1), ('char', 1), ('char compare', 1), ('clean code', 1), ('count', 1), ('csharp', 1), ('efficient solution', 1), ('explained solution', 1), ('explanation of logic', 1), ('fast', 1), ('fasterthan100', 1), ('fastest', 1), ('go-solution', 1), ('intutive', 1), ('js', 1), ('kmp', 1), ('knuth morris pratt', 1), ('kotlin', 1), ('linear time', 1), ('loop', 1), ('max consecutive ones', 1), ('maxreaptingsubstring', 1), ('naive', 1), ('non brute force', 1), ('one-liner', 1), ('python3.8', 1), ('pythonpython3', 1), ('rajat', 1), ('recrusive', 1), ('repeated-string', 1), ('self-explanatory', 1), ('short', 1), ('simple', 1), ('string builder', 1), ('string comparison', 1), ('string parsing', 1), ('string-operation', 1), ('strings', 1), ('test-case', 1), ('test-case-too-weak', 1), ('testcase error', 1), ('ultra easy', 1), ('upvote', 1), ('while', 1)]"
1642,Furthest Building You Can Reach,https://leetcode.com/problems/furthest-building-you-can-reach,"You are given an integer array heights representing the heights of buildings, some bricks, and some ladders.

You start your journey from building 0 and move to the next building by possibly using bricks or ladders.

While moving from building i to building i+1 (0-indexed),


	If the current building's height is greater than or equal to the next building's height, you do not need a ladder or bricks.
	If the current building's height is less than the next building's height, you can either use one ladder or (h[i+1] - h[i]) bricks.


Return the furthest building index (0-indexed) you can reach if you use the given ladders and bricks optimally.","['binary-search', 'heap']",Medium,923,41,65321,30634,[],"[('c++', 26), ('priority queue', 26), ('java', 19), ('heap', 17), ('python', 12), ('simple', 11), ('cpp', 8), ('java-solution', 8), ('javascript', 8), ('min heap', 8), ('easy', 7), ('comments-added', 6), ('cpp solution', 6), ('greedy', 6), ('max heap', 6), ('min-heap', 6), ('python3', 6), ('c#', 5), ('rust', 5), ('binary-search', 4), ('clean code', 4), ('greedy approach', 4), ('binary search', 3), ('dynamic programming', 3), ('easy-understanding', 3), ('easytounderstand', 3), ('explained', 3), ('priority-queue', 3), ('python 3', 3), ('100 speed', 2), ('explanation of logic', 2), ('maxheap', 2), ('multiset', 2), ('priorityqueue', 2), ('swift', 2), ('video-explanation', 2), ('#python', 1), ('#python 3', 1), ('100', 1), ('100 faster runtime', 1), ('100 space', 1), ('1642', 1), ('accepted', 1), ('an7one', 1), ('awesome samriddhi', 1), ('backtracking', 1), ('big o of n', 1), ('bricks first', 1), ('bug-test-case', 1), ('c#-solution', 1), ('c++ solution', 1), ('commented', 1), ('comments', 1), ('constant space', 1), ('cpp soltuion', 1), ('dp', 1), ('dp pattern', 1), ('dp-programming', 1), ('easiest', 1), ('easy to understand', 1), ('easy-to-understand', 1), ('es6', 1), ('explained-solution', 1), ('furthestbuildingreachable', 1), ('go', 1), ('golang', 1), ('greedy algorithm', 1), ('heapq', 1), ('help needed', 1), ('iteration', 1), ('kotlin', 1), ('kotllin', 1), ('linear time', 1), ('meiyaowen', 1), ('memoization', 1), ('memoziation', 1), ('multisets', 1), ('one pass solution', 1), ('optimal', 1), ('optimisation', 1), ('performance', 1), ('problem', 1), ('recursive', 1), ('ritik', 1), ('ruby', 1), ('scala', 1), ('sets', 1), ('simple clear c++ solution', 1), ('single pass', 1), ('single-pass', 1), ('sortedset', 1), ('straight-forward', 1), ('superlinear time', 1), ('two solutions', 1), ('typescript', 1)]"
1641,Count Sorted Vowel Strings,https://leetcode.com/problems/count-sorted-vowel-strings,"Given an integer n, return the number of strings of length n that consist only of vowels (a, e, i, o, u) and are lexicographically sorted.

A string s is lexicographically sorted if for all valid i, s[i] is the same as or comes before s[i+1] in the alphabet.","['math', 'dynamic-programming', 'backtracking']",Medium,916,26,66999,50522,[],"[('dynamic programming', 56), ('c++', 52), ('dp', 27), ('java', 23), ('python', 23), ('python 3', 23), ('cpp', 19), ('backtracking', 17), ('easy-understanding', 16), ('java-solution', 13), ('javascript', 11), ('python3', 11), ('recursion', 10), ('cpp solution', 9), ('memoization', 9), ('math', 8), ('easy', 6), ('combination', 5), ('simple', 5), ('100 faster runtime', 4), ('bottom-up-algorithm', 4), ('c#', 4), ('dynamic programmin', 4), ('easytounderstand', 4), ('javascript solution', 4), ('dfs', 3), ('explanation of logic', 3), ('non-recursion', 3), ('one-liner', 3), ('ruby', 3), ('100 memory', 2), ('100 speed', 2), ('bottomup', 2), ('c', 2), ('combinatories', 2), ('cpp easy', 2), ('dp pattern', 2), ('dp-techqique', 2), ('efficient solution', 2), ('explained', 2), ('fastest', 2), ('golang', 2), ('prefix sum', 2), ('python2', 2), ('python3.8', 2), ('recurision', 2), ('recursive', 2), ('rust', 2), ('swift', 2), ('video-explanation', 2), ('vowels', 2), ('#explanation', 1), ('#pentatope', 1), ('#problem', 1), ('0ms', 1), ('0ms runtime', 1), ('100 beat', 1), ('100 faster cpp', 1), ('2d dp', 1), ('accepted solution', 1), ('accumulate', 1), ('back tracking', 1), ('backtracing', 1), ('backtrack', 1), ('beginner friendly', 1), ('bfs', 1), ('bottom-up', 1), ('bottoms-up', 1), ('brute force', 1), ('c code', 1), ('c-code', 1), ('c++ solution', 1), ('c++11', 1), ('combination formula', 1), ('combinations', 1), ('combinatorics', 1), ('combinators', 1), ('comments', 1), ('commetend', 1), ('count-vowels', 1), ('countsortedvowelstrings', 1), ('cpp 100', 1), ('cpp clear', 1), ('cpp-solution', 1), ('dp-programming', 1), ('dyanmic programming', 1), ('dynamic programing', 1), ('easyway', 1), ('efficient approach', 1), ('fastest java solution', 1), ('fastest solution', 1), ('figure', 1), ('go', 1), ('google', 1), ('google-india', 1), ('interview', 1), ('intuitive', 1), ('intutive', 1), ('java ac solution', 1), ('java-8', 1), ('javascript recursive', 1), ('javscript', 1), ('js', 1), ('kotlin', 1), ('kotlin-solution', 1), ('kotllin', 1), ('linear-time', 1), ('linked-list', 1), ('linkedlists', 1), ('math solution', 1), ('mathematics', 1), ('mathematics formula', 1), ('memoized', 1), ('non-optimized', 1), ('observations', 1), ('pascals triangle', 1), ('pattern recognition', 1), ('permutation', 1), ('permutations', 1), ('prefix-array', 1), ('pythom', 1), ('pythonic', 1), ('pythonpython3', 1), ('rajawatbanna', 1), ('recursive dp', 1), ('recusion', 1), ('self-explanatory', 1), ('short-code', 1), ('simple to understand', 1), ('simple-solution', 1), ('stars and bars', 1), ('string-operation', 1), ('suffix sum', 1), ('typescript', 1), ('unbounded-knapsack', 1)]"
1640,Check Array Formation Through Concatenation,https://leetcode.com/problems/check-array-formation-through-concatenation,"You are given an array of distinct integers arr and an array of integer arrays pieces, where the integers in pieces are distinct. Your goal is to form arr by concatenating the arrays in pieces in any order. However, you are not allowed to reorder the integers in each array pieces[i].

Return true if it is possible to form the array arr from pieces. Otherwise, return false.","['array', 'hash-table', 'sort']",Easy,476,91,97898,58422,[],"[('c++', 30), ('java', 28), ('python', 26), ('hashmap', 23), ('javascript', 20), ('python 3', 18), ('cpp', 14), ('python3', 14), ('java-solution', 10), ('array', 7), ('c#', 7), ('easy-understanding', 6), ('easy', 5), ('simple', 5), ('cpp solution', 4), ('dictonary', 4), ('explained', 4), ('golang', 4), ('linear time', 4), ('binary-search', 3), ('easy-to-understand', 3), ('javascript solution', 3), ('map', 3), ('ruby', 3), ('0ms', 2), ('easytounderstand', 2), ('kotlin', 2), ('rust', 2), ('scala', 2), ('swift', 2), ('understandable', 2), ('vector', 2), ('video-explanation', 2), ('#easy-understand', 1), ('#easysolution', 1), ('#python', 1), ('#sets', 1), ('1 line', 1), ('1640', 1), ('2-line', 1), ('accepted solution', 1), ('array map', 1), ('array-concatenation', 1), ('arrays', 1), ('backtracking', 1), ('beginner friendly', 1), ('binary search', 1), ('c', 1), ('c++ solution', 1), ('check', 1), ('clean code', 1), ('commented code', 1), ('comments-added', 1), ('constant memory', 1), ('dict', 1), ('dynamic programming', 1), ('easy solution', 1), ('easy to code', 1), ('efficent approach', 1), ('efficient solution', 1), ('explain', 1), ('explaination', 1), ('facebook-india', 1), ('fold', 1), ('fp', 1), ('functional-programming', 1), ('go', 1), ('go-solution', 1), ('golag', 1), ('golang-solution', 1), ('hash', 1), ('hash table', 1), ('hashset', 1), ('hints', 1), ('hot', 1), ('interview', 1), ('interview explanation', 1), ('iteration', 1), ('iterator', 1), ('js', 1), ('kotlinvim', 1), ('linked-list', 1), ('list', 1), ('maps', 1), ('memory optimized', 1), ('most votes', 1), ('one line', 1), ('one-liner', 1), ('optimisation', 1), ('performance', 1), ('php', 1), ('php solution', 1), ('python3.8', 1), ('rajawatbanna', 1), ('replace', 1), ('sequence', 1), ('series', 1), ('set', 1), ('short code', 1), ('simple and elegant', 1), ('simple-solution', 1), ('sliding-window', 1), ('smart', 1), ('solution', 1), ('solution-sharing-cpp', 1), ('solved', 1), ('space', 1), ('stl', 1), ('string', 1), ('subsequences', 1), ('time', 1), ('typescript', 1), ('unique solution', 1), ('unordered map', 1), ('video explanation', 1), ('video-explained', 1)]"
1655,Distribute Repeating Integers,https://leetcode.com/problems/distribute-repeating-integers,"You are given an array of n integers, nums, where there are at most 50 unique values in the array. You are also given an array of m customer order quantities, quantity, where quantity[i] is the amount of integers the ith customer ordered. Determine if it is possible to distribute nums such that:


	The ith customer gets exactly quantity[i] integers,
	The integers the ith customer gets are all equal, and
	Every customer is satisfied.


Return true if it is possible to distribute nums according to the above conditions.","['dynamic-programming', 'backtracking']",Hard,120,11,11536,4612,[],"[('backtracking', 7), ('c++', 2), ('dynamic programming', 2), ('python 3', 2), ('bit manipulation', 1), ('bit masking', 1), ('bitmasking', 1), ('detailed explanation', 1), ('dfs solution', 1), ('greedy', 1), ('java', 1), ('javascript solution', 1), ('python3', 1), ('rust', 1)]"
1654,Minimum Jumps to Reach Home,https://leetcode.com/problems/minimum-jumps-to-reach-home,"A certain bug's home is on the x-axis at position x. Help them get there from position 0.

The bug jumps according to the following rules:


	It can jump exactly a positions forward (to the right).
	It can jump exactly b positions backward (to the left).
	It cannot jump backward twice in a row.
	It cannot jump to any forbidden positions.


The bug may jump forward beyond its home, but it cannot jump to positions numbered with negative integers.

Given an array of integers forbidden, where forbidden[i] means that the bug cannot jump to the position forbidden[i], and integers a, b, and x, return the minimum number of jumps needed for the bug to reach its home. If there is no possible sequence of jumps that lands the bug on position x, return -1.","['dynamic-programming', 'breadth-first-search']",Medium,272,70,32939,8201,[],"[('bfs', 18), ('c++', 11), ('python', 7), ('memoization', 6), ('python 3', 6), ('easy-understanding', 5), ('cpp', 3), ('queue', 3), ('bfs simple solution', 2), ('breadth first search', 2), ('dfs', 2), ('dfs solution', 2), ('dp', 2), ('dynamic programming', 2), ('java', 2), ('python deque', 2), ('python3', 2), ('bfs vs dfs', 1), ('bottoms-up', 1), ('c#', 1), ('c++ ac', 1), ('detailed-explanation', 1), ('dfs-topdown', 1), ('explanations', 1), ('hashset', 1), ('help-wanted', 1), ('javascript', 1), ('kotlin', 1), ('logical', 1), ('memoisation', 1), ('python3.8', 1), ('pythonpython3', 1), ('queues', 1), ('raviinroorkee', 1), ('recurision', 1), ('recursion', 1), ('ruby', 1), ('rust', 1), ('solution', 1), ('swift', 1), ('wrong-test-cases', 1)]"
1653,Minimum Deletions to Make String Balanced,https://leetcode.com/problems/minimum-deletions-to-make-string-balanced,"You are given a string s consisting only of characters 'a' and 'b'​​​​.

You can delete any number of characters in s to make s balanced. s is balanced if there is no pair of indices (i,j) such that i < j and s[i] = 'b' and s[j]= 'a'.

Return the minimum number of deletions needed to make s balanced.","['string', 'greedy']",Medium,298,8,16213,8416,[],"[('c++', 9), ('dp', 6), ('dynamic programming', 6), ('python', 5), ('cpp', 4), ('python 3', 4), ('python3', 3), ('clean code', 2), ('easy-understanding', 2), ('java', 2), ('javascript', 2), ('kotlin', 2), ('prefixsums', 2), ('stack', 2), ('accepted', 1), ('accepted solution', 1), ('binary-search', 1), ('constant space', 1), ('cpp solution', 1), ('dictonary', 1), ('easy', 1), ('easytounderstand', 1), ('explained', 1), ('greedy approach', 1), ('java simple', 1), ('java-solution', 1), ('kotlin-solution', 1), ('linear', 1), ('mathematics', 1), ('one pass solution', 1), ('optimization process', 1), ('python2', 1), ('rajat', 1), ('simple', 1), ('suffix sum', 1), ('swift', 1), ('top down dp', 1)]"
1652,Defuse the Bomb,https://leetcode.com/problems/defuse-the-bomb,"You have a bomb to defuse, and your time is running out! Your informer will provide you with a circular array code of length of n and a key k.

To decrypt the code, you must replace every number. All the numbers are replaced simultaneously.


	If k > 0, replace the ith number with the sum of the next k numbers.
	If k < 0, replace the ith number with the sum of the previous k numbers.
	If k == 0, replace the ith number with 0.


As code is circular, the next element of code[n-1] is code[0], and the previous element of code[0] is code[n-1].

Given the circular array code and an integer key k, return the decrypted code to defuse the bomb!",['array'],Easy,223,30,22980,14127,[],"[('python', 15), ('java', 11), ('javascript', 11), ('python 3', 9), ('c++', 8), ('python3', 8), ('c#', 4), ('cpp', 4), ('swift', 4), ('brute force', 3), ('c', 3), ('c code', 3), ('easy-to-understand', 3), ('easy-understanding', 3), ('java-solution', 3), ('simple', 3), ('100 speed', 2), ('easy', 2), ('golang', 2), ('iteration', 2), ('sliding-window', 2), ('slidingwindow', 2), ('100 memory', 1), ('100 space', 1), ('array', 1), ('beats 100', 1), ('c solution', 1), ('circular-array', 1), ('clear-understanding', 1), ('cpp easy', 1), ('defuse-the-bomb', 1), ('efficient solution', 1), ('explanation', 1), ('explanations', 1), ('explanatory comments', 1), ('fast-solution', 1), ('go', 1), ('go-solution', 1), ('golang-solution', 1), ('intutive', 1), ('kotlin', 1), ('lineartime', 1), ('php', 1), ('prefix sum', 1), ('presum', 1), ('pyhton3', 1), ('python3.8', 1), ('ruby', 1), ('rust', 1), ('self explanatory', 1), ('short code', 1), ('simple c', 1), ('simple-solution', 1), ('solution', 1), ('straight-forward', 1), ('swift5', 1), ('ultra simple', 1), ('upvote', 1), ('video explanation', 1)]"
1631,Path With Minimum Effort,https://leetcode.com/problems/path-with-minimum-effort,"You are a hiker preparing for an upcoming hike. You are given heights, a 2D array of size rows x columns, where heights[row][col] represents the height of cell (row, col). You are situated in the top-left cell, (0, 0), and you hope to travel to the bottom-right cell, (rows-1, columns-1) (i.e., 0-indexed). You can move up, down, left, or right, and you wish to find a route that requires the minimum effort.

A route's effort is the maximum absolute difference in heights between two consecutive cells of the route.

Return the minimum effort required to travel from the top-left cell to the bottom-right cell.","['binary-search', 'depth-first-search', 'union-find', 'graph']",Medium,1107,52,81060,40504,"[""Path With Maximum Minimum Value""]","[('c++', 18), ('bfs', 17), ('python', 16), ('binary-search', 15), ('dijkstras algorithm', 9), ('java', 9), ('dijkstra', 8), ('cpp', 7), ('dfs', 7), ('dijsktra', 7), ('priority queue', 7), ('python 3', 7), ('javascript', 5), ('c#', 4), ('clean code', 4), ('python3', 4), ('djikstra algorithm', 3), ('easy-understanding', 3), ('explained', 3), ('golang', 3), ('graph', 3), ('min-heap', 3), ('simple', 3), ('swift', 3), ('100 speed', 2), ('binary search', 2), ('binarysearch', 2), ('breadth-first-search', 2), ('dfs simple solution', 2), ('dfs traversal', 2), ('djikstra', 2), ('dp', 2), ('greedy', 2), ('heap', 2), ('kruskals algorithm', 2), ('union find', 2), ('unionfind', 2), ('#c++', 1), ('#cpp', 1), ('#dijikstra', 1), ('100 faster runtime', 1), ('1102', 1), ('3 approaches', 1), ('ada', 1), ('balanced tree', 1), ('bellman-ford', 1), ('best-first search', 1), ('breadth first search', 1), ('c++ solution', 1), ('clean', 1), ('comments added', 1), ('comments-added', 1), ('comparator', 1), ('cpp solution', 1), ('depth first search', 1), ('dfs solution', 1), ('dijikstra', 1), ('dijkstra algorithm', 1), ('djiktras', 1), ('dynamic programming', 1), ('early termination', 1), ('easy-to-understand', 1), ('expalanation', 1), ('fast', 1), ('fast and simple', 1), ('go', 1), ('graph theory', 1), ('graph traversal', 1), ('heapq', 1), ('java-solution', 1), ('javascript solution', 1), ('kotlin', 1), ('legal concerns', 1), ('maze', 1), ('minheap', 1), ('optimisation', 1), ('path compression', 1), ('pathwithmineffort', 1), ('performance', 1), ('pq', 1), ('priority-queue', 1), ('python3.8', 1), ('pythonpython3', 1), ('question building', 1), ('question practices', 1), ('ruby', 1), ('rust', 1), ('template', 1), ('timothy h chang', 1), ('ting', 1), ('tle', 1), ('video-explanation', 1)]"
1630,Arithmetic Subarrays,https://leetcode.com/problems/arithmetic-subarrays,"A sequence of numbers is called arithmetic if it consists of at least two elements, and the difference between every two consecutive elements is the same. More formally, a sequence s is arithmetic if and only if s[i+1] - s[i] == s[1] - s[0] for all valid i.

For example, these are arithmetic sequences:


1, 3, 5, 7, 9
7, 7, 7, 7
3, -1, -5, -9

The following sequence is not arithmetic:


1, 1, 2, 5, 7

You are given an array of n integers, nums, and two arrays of m integers each, l and r, representing the m range queries, where the ith query is the range [l[i], r[i]]. All the arrays are 0-indexed.

Return a list of boolean elements answer, where answer[i] is true if the subarray nums[l[i]], nums[l[i]+1], ... , nums[r[i]] can be rearranged to form an arithmetic sequence, and false otherwise.",['sort'],Medium,224,34,21521,16678,"[""Arithmetic Slices"", ""Can Make Arithmetic Progression From Sequence""]","[('c++', 17), ('python 3', 12), ('easy-understanding', 9), ('java', 9), ('cpp', 8), ('python', 8), ('python3', 8), ('sort', 7), ('cpp solution', 4), ('java-solution', 4), ('javascript', 4), ('sorting', 4), ('c#', 3), ('easy', 3), ('list', 3), ('brute force', 2), ('brute-force', 2), ('kotlin', 2), ('python2', 2), ('python3.8', 2), ('1-line', 1), ('arithmeticsubarrays', 1), ('array', 1), ('beginnerfriendly', 1), ('c++ code', 1), ('commented', 1), ('cpp easy', 1), ('easy to understand', 1), ('expected sum', 1), ('explained', 1), ('golang', 1), ('hashset', 1), ('heap', 1), ('heapq', 1), ('math', 1), ('maths', 1), ('php', 1), ('php solution', 1), ('priority queue', 1), ('pythonpython3', 1), ('simple', 1), ('sort-function', 1), ('sorted', 1), ('straight-forward', 1), ('subarray', 1), ('swift', 1), ('tricky', 1), ('with comments', 1)]"
1629,Slowest Key,https://leetcode.com/problems/slowest-key,"A newly designed keypad was tested, where a tester pressed a sequence of n keys, one at a time.

You are given a string keysPressed of length n, where keysPressed[i] was the ith key pressed in the testing sequence, and a sorted list releaseTimes, where releaseTimes[i] was the time the ith key was released. Both arrays are 0-indexed. The 0th key was pressed at the time 0, and every subsequent key was pressed at the exact time the previous key was released.

The tester wants to know the key of the keypress that had the longest duration. The ith keypress had a duration of releaseTimes[i] - releaseTimes[i - 1], and the 0th keypress had a duration of releaseTimes[0].

Note that the same key could have been pressed multiple times during the test, and these multiple presses of the same key may not have had the same duration.

Return the key of the keypress that had the longest duration. If there are multiple such keypresses, return the lexicographically largest key of the keypresses.",['array'],Easy,204,38,50940,30135,[],"[('python', 22), ('java', 20), ('c++', 15), ('python 3', 13), ('java-solution', 11), ('javascript', 11), ('easy-understanding', 8), ('linear time', 8), ('python3', 8), ('cpp', 7), ('c#', 5), ('easy', 4), ('array', 3), ('cpp solution', 3), ('dictionary', 3), ('fast and simple', 3), ('fastest', 3), ('javascript solution', 3), ('ruby', 3), ('simple', 3), ('constant space', 2), ('explanation of logic', 2), ('java simple', 2), ('kotlin', 2), ('map', 2), ('readable', 2), ('swift', 2), ('1-line', 1), ('100 faster runtime', 1), ('100 memory', 1), ('100 speed', 1), ('1629', 1), ('1ms runtime', 1), ('apl', 1), ('bubble-sort', 1), ('char array', 1), ('codedecks', 1), ('commented', 1), ('commented code', 1), ('comments-added', 1), ('easy-to-understand', 1), ('easytounderstand', 1), ('fold', 1), ('golang', 1), ('hash set', 1), ('haskell', 1), ('intuitive', 1), ('java ac solution', 1), ('linear', 1), ('math', 1), ('maximum', 1), ('memory-optimized', 1), ('multimap', 1), ('no-sort', 1), ('php', 1), ('pointer approach', 1), ('python3.8', 1), ('pythonpython3', 1), ('rust', 1), ('simple-solution', 1), ('slowest-key', 1), ('slowestkey', 1), ('sort', 1), ('string', 1), ('typescript', 1), ('understandable', 1), ('using-maxheap', 1), ('video explanation', 1), ('zip', 1)]"
1626,Best Team With No Conflicts,https://leetcode.com/problems/best-team-with-no-conflicts,"You are the manager of a basketball team. For the upcoming tournament, you want to choose the team with the highest overall score. The score of the team is the sum of scores of all the players in the team.

However, the basketball team is not allowed to have conflicts. A conflict exists if a younger player has a strictly higher score than an older player. A conflict does not occur between players of the same age.

Given two lists, scores and ages, where each scores[i] and ages[i] represents the score and age of the ith player, respectively, return the highest overall score of all possible basketball teams.",['dynamic-programming'],Medium,431,20,28716,11096,[],"[('dp', 12), ('dynamic programming', 9), ('c++', 5), ('python', 5), ('cpp solution', 3), ('dynamic-programming', 3), ('java', 3), ('lis', 3), ('memoization', 3), ('python3', 3), ('binary-search', 2), ('c#', 2), ('ruby', 2), ('sorting', 2), ('treemap', 2), ('#c++', 1), ('#cpp', 1), ('#dp', 1), ('#dynamic programming', 1), ('cpp', 1), ('dp-programming', 1), ('easy', 1), ('es6', 1), ('fast-solution', 1), ('golang', 1), ('increasing subsequence', 1), ('java-solution', 1), ('javascript', 1), ('o-nlogn', 1), ('python 3', 1), ('readable', 1), ('recurision', 1), ('recursion', 1), ('recursion memoization', 1), ('recursive', 1), ('russian doll', 1), ('top down dp', 1), ('top-down dp', 1)]"
1625,Lexicographically Smallest String After Applying Operations,https://leetcode.com/problems/lexicographically-smallest-string-after-applying-operations,"You are given a string s of even length consisting of digits from 0 to 9, and two integers a and b.

You can apply either of the following two operations any number of times and in any order on s:


	Add a to all odd indices of s (0-indexed). Digits post 9 are cycled back to 0. For example, if s = ""3456"" and a = 5, s becomes ""3951"".
	Rotate s to the right by b positions. For example, if s = ""3456"" and b = 1, s becomes ""6345"".


Return the lexicographically smallest string you can obtain by applying the above operations any number of times on s.

A string a is lexicographically smaller than a string b (of the same length) if in the first position where a and b differ, string a has a letter that appears earlier in the alphabet than the corresponding letter in b. For example, ""0158"" is lexicographically smaller than ""0190"" because the first position they differ is at the third letter, and '5' comes before '9'.","['depth-first-search', 'breadth-first-search']",Medium,144,186,11575,7453,[],"[('c++', 7), ('bfs', 5), ('python', 5), ('javascript', 3), ('python3', 3), ('brute force', 2), ('c#', 2), ('python 3', 2), ('bfs simple solution', 1), ('breadth first search', 1), ('depth first search', 1), ('dfs', 1), ('dfs solution', 1), ('dfs traversal', 1), ('easy-to-understand', 1), ('easy-understanding', 1), ('explained', 1), ('golang', 1), ('graph', 1), ('javascript solution', 1), ('kotllin', 1), ('memoization', 1), ('python2', 1), ('recursion', 1), ('ruby', 1), ('sets', 1), ('stack-based', 1), ('swift', 1), ('tle', 1), ('zea7ot', 1)]"
1624,Largest Substring Between Two Equal Characters,https://leetcode.com/problems/largest-substring-between-two-equal-characters,"Given a string s, return the length of the longest substring between two equal characters, excluding the two characters. If there is no such substring return -1.

A substring is a contiguous sequence of characters within a string.",['string'],Easy,218,14,33934,19851,[],"[('c++', 27), ('python 3', 19), ('python', 17), ('java', 16), ('cpp', 14), ('javascript', 8), ('easy', 7), ('python3', 7), ('hashmap', 6), ('java-solution', 5), ('simple', 4), ('cpp solution', 3), ('dictonary', 3), ('linear', 3), ('linear time', 3), ('swift', 3), ('0ms', 2), ('brute force', 2), ('c', 2), ('c#', 2), ('clean', 2), ('easy-understanding', 2), ('javascript solution', 2), ('kotlin', 2), ('php', 2), ('python2', 2), ('ruby', 2), ('string', 2), ('unordered map', 2), ('#python', 1), ('100 faster runtime', 1), ('100 speed', 1), ('2ms', 1), ('5 lines', 1), ('8lines', 1), ('best-solution', 1), ('brute force to optimal', 1), ('c++ solution', 1), ('c++11', 1), ('collections', 1), ('constant space', 1), ('cpp easy', 1), ('declarative', 1), ('defaultdict', 1), ('dict', 1), ('dictionary c#', 1), ('easy solutions', 1), ('easytounderstand', 1), ('explain', 1), ('explaination', 1), ('explanation', 1), ('faster', 1), ('fastest', 1), ('functional programming', 1), ('go-solution', 1), ('golang', 1), ('golang-solution', 1), ('hash table', 1), ('intuitive', 1), ('iteration', 1), ('java ac solution', 1), ('java simple', 1), ('javascrip', 1), ('linear memory', 1), ('linear-scan', 1), ('map-stl', 1), ('naive approach', 1), ('o1 space', 1), ('one pass solution', 1), ('onepass', 1), ('optimized solution', 1), ('pair', 1), ('programming', 1), ('python3.8', 1), ('pythonpython3', 1), ('rajat', 1), ('rfind', 1), ('rust', 1), ('self explanatory', 1), ('self-explanatory', 1), ('short', 1), ('simple-solution', 1), ('sliding window', 1), ('slidingwindow', 1), ('solution', 1), ('stl', 1), ('stringbuilder', 1), ('two passes', 1), ('two-pointers', 1), ('ultra easy', 1), ('unreadable', 1), ('upvote', 1), ('zea7ot', 1)]"
1639,Number of Ways to Form a Target String Given a Dictionary,https://leetcode.com/problems/number-of-ways-to-form-a-target-string-given-a-dictionary,"You are given a list of strings of the same length words and a string target.

Your task is to form target using the given words under the following rules:


	target should be formed from left to right.
	To form the ith character (0-indexed) of target, you can choose the kth character of the jth string in words if target[i] = words[j][k].
	Once you use the kth character of the jth string of words, you can no longer use the xth character of any string in words where x <= k. In other words, all characters to the left of or at index k become unusuable for every string.
	Repeat the process until you form the string target.


Notice that you can use multiple characters from the same string in words provided the conditions above are met.

Return the number of ways to form target from words. Since the answer may be too large, return it modulo 109 + 7.",['dynamic-programming'],Hard,132,8,10018,4009,[],"[('dp', 4), ('dynamic programming', 4), ('java', 4), ('bottom up', 2), ('python3', 2), ('recursion memoization', 2), ('top down dp', 2), ('beginner friendly', 1), ('c#', 1), ('c++', 1), ('dynammic programming', 1), ('explained', 1), ('hash table', 1), ('python', 1), ('python 3', 1), ('simple', 1), ('space-optimized', 1), ('top-down dp', 1)]"
1638,Count Substrings That Differ by One Character,https://leetcode.com/problems/count-substrings-that-differ-by-one-character,"Given two strings s and t, find the number of ways you can choose a non-empty substring of s and replace a single character by a different character such that the resulting substring is a substring of t. In other words, find the number of substrings in s that differ from some substring in t by exactly one character.

For example, the underlined substrings in ""computer"" and ""computation"" only differ by the 'e'/'a', so this is a valid way.

Return the number of substrings that satisfy the condition above.

A substring is a contiguous sequence of characters within a string.","['hash-table', 'string', 'trie', 'rolling-hash']",Medium,215,116,11738,8269,[],"[('java', 7), ('brute force', 6), ('python 3', 5), ('c++', 4), ('python', 4), ('java-solution', 3), ('dynamic programming', 2), ('easy-understanding', 2), ('brute-force', 1), ('bruteforce', 1), ('c#', 1), ('comments-added', 1), ('cpp', 1), ('cpp solution', 1), ('easy', 1), ('explained', 1), ('golang', 1), ('hash', 1), ('iterative', 1), ('javascript', 1), ('python3', 1), ('rust', 1), ('simple', 1), ('string', 1), ('swift', 1), ('tries', 1)]"
1637,Widest Vertical Area Between Two Points Containing No Points,https://leetcode.com/problems/widest-vertical-area-between-two-points-containing-no-points,"Given n points on a 2D plane where points[i] = [xi, yi], Return the widest vertical area between two points such that no points are inside the area.

A vertical area is an area of fixed-width extending infinitely along the y-axis (i.e., infinite height). The widest vertical area is the one with the maximum width.

Note that points on the edge of a vertical area are not considered included in the area.",['sort'],Medium,72,243,18543,15519,[],"[('c++', 12), ('java', 10), ('python', 10), ('python 3', 10), ('sort', 7), ('cpp', 5), ('python3', 5), ('javascript', 4), ('cpp solution', 3), ('sorting', 3), ('c#', 2), ('comments-added', 2), ('easy', 2), ('faster', 2), ('go', 2), ('golang', 2), ('java-solution', 2), ('simple', 2), ('100 speed', 1), ('array', 1), ('cpp easy', 1), ('csharp', 1), ('easy to understand', 1), ('easy-to-understand', 1), ('easy-understanding', 1), ('explaination', 1), ('fast', 1), ('fast-solution', 1), ('fastest', 1), ('github', 1), ('go-solution', 1), ('golang-solution', 1), ('images', 1), ('iterative', 1), ('javascript solution', 1), ('memory-efficient', 1), ('mrmagician', 1), ('one-liner', 1), ('python2', 1), ('reduce', 1), ('set', 1), ('short code', 1), ('sort-function', 1), ('stl', 1), ('upvote', 1), ('x-axis', 1)]"
1636,Sort Array by Increasing Frequency,https://leetcode.com/problems/sort-array-by-increasing-frequency,"Given an array of integers nums, sort the array in increasing order based on the frequency of the values. If multiple values have the same frequency, sort them in decreasing order.

Return the sorted array.","['array', 'sort']",Easy,424,20,34160,22897,"[""Sort Characters By Frequency""]","[('c++', 22), ('java', 21), ('python', 19), ('javascript', 13), ('python 3', 13), ('cpp', 12), ('hashmap', 12), ('sort', 11), ('java-solution', 9), ('c#', 8), ('python3', 7), ('comparator', 5), ('easy', 3), ('golang', 3), ('priority queue', 3), ('simple', 3), ('sorting', 3), ('swift', 3), ('custom sorting', 2), ('dictonary', 2), ('explained', 2), ('go', 2), ('heap', 2), ('javascript solution', 2), ('kotlin', 2), ('map', 2), ('one-liner', 2), ('priority-queue', 2), ('ruby', 2), ('rust', 2), ('sorted array', 2), ('100 faster runtime', 1), ('ac', 1), ('array', 1), ('array-sort', 1), ('arraylist', 1), ('arrays', 1), ('c++14', 1), ('commentary', 1), ('comments', 1), ('comparartor', 1), ('counter', 1), ('cpp solution', 1), ('csharp', 1), ('customcomparetor', 1), ('dict', 1), ('dictionaries', 1), ('dictionary', 1), ('easy-to-understand', 1), ('easy-understanding', 1), ('easytounderstand', 1), ('efficient solution', 1), ('explaination', 1), ('go-solution', 1), ('golang solution', 1), ('golang-solution', 1), ('hashtable', 1), ('images', 1), ('javascriptes6', 1), ('lambda', 1), ('lambda expression', 1), ('linq', 1), ('map-stl', 1), ('min-heap', 1), ('minheap', 1), ('pairs', 1), ('priorityqueue', 1), ('readable', 1), ('simple-solution', 1), ('solution', 1), ('sortarrayincreasingfreq', 1), ('sorted', 1), ('streamapi', 1), ('swift5', 1), ('thinking', 1), ('thinking process', 1), ('understandable', 1)]"
1617,Count Subtrees With Max Distance Between Cities,https://leetcode.com/problems/count-subtrees-with-max-distance-between-cities,"There are n cities numbered from 1 to n. You are given an array edges of size n-1, where edges[i] = [ui, vi] represents a bidirectional edge between cities ui and vi. There exists a unique path between each pair of cities. In other words, the cities form a tree.

A subtree is a subset of cities where every city is reachable from every other city in the subset, where the path between each pair passes through only the cities from the subset. Two subtrees are different if there is a city in one subtree that is not present in the other.

For each d from 1 to n-1, find the number of subtrees in which the maximum distance between any two cities in the subtree is equal to d.

Return an array of size n-1 where the dth element (1-indexed) is the number of subtrees in which the maximum distance between any two cities is equal to d.

Notice that the distance between the two cities is the number of edges in the path between them.",['backtracking'],Hard,157,23,6886,4361,"[""Tree Diameter""]","[('dfs', 10), ('bfs', 5), ('bit masking', 5), ('c++', 5), ('python 3', 5), ('java', 3), ('bitmask', 2), ('c#', 2), ('depth first search', 2), ('dynamic programming', 2), ('floyd-warshall', 2), ('python3', 2), ('recursive', 2), ('bit manipulation', 1), ('bitmasking', 1), ('brute force', 1), ('dfs pre-order traversal', 1), ('dp', 1), ('easy', 1), ('easy-understanding', 1), ('graph', 1), ('intuitive', 1), ('ptyhon3', 1), ('python', 1), ('ruby', 1), ('subset', 1), ('tree diameter', 1)]"
1616,Split Two Strings to Make Palindrome,https://leetcode.com/problems/split-two-strings-to-make-palindrome,"You are given two strings a and b of the same length. Choose an index and split both strings at the same index, splitting a into two strings: aprefix and asuffix where a = aprefix + asuffix, and splitting b into two strings: bprefix and bsuffix where b = bprefix + bsuffix. Check if aprefix + bsuffix or bprefix + asuffix forms a palindrome.

When you split a string s into sprefix and ssuffix, either ssuffix or sprefix is allowed to be empty. For example, if s = ""abc"", then """" + ""abc"", ""a"" + ""bc"", ""ab"" + ""c"" , and ""abc"" + """" are valid splits.

Return true if it is possible to form a palindrome string, otherwise return false.

Notice that x + y denotes the concatenation of strings x and y.","['two-pointers', 'string', 'greedy']",Medium,306,161,38000,13721,[],"[('c++', 11), ('python 3', 9), ('greedy', 6), ('two-pointers', 5), ('cpp', 4), ('easy-understanding', 3), ('java', 3), ('python', 3), ('python3', 3), ('c#', 2), ('easy', 2), ('golang', 2), ('javascript', 2), ('0ms', 1), ('1line', 1), ('brute force to optimal', 1), ('c++ solution', 1), ('c++ solution simple', 1), ('comments-added', 1), ('cpp easy', 1), ('cpp solution', 1), ('dfs', 1), ('easiest', 1), ('easytounderstand', 1), ('esay-understand', 1), ('explained', 1), ('fast-solution', 1), ('faster than 100.00', 1), ('fastest', 1), ('greedy approach', 1), ('image-understanding', 1), ('java-solution', 1), ('kotlin', 1), ('leetcode contest', 1), ('linear time', 1), ('one line', 1), ('palindrome', 1), ('palindrome-check', 1), ('rajat', 1), ('readable', 1), ('short', 1), ('string', 1), ('swift', 1), ('video-explanation', 1), ('visualization', 1), ('weak-tests', 1)]"
1615,Maximal Network Rank,https://leetcode.com/problems/maximal-network-rank,"There is an infrastructure of n cities with some number of roads connecting these cities. Each roads[i] = [ai, bi] indicates that there is a bidirectional road between cities ai and bi.

The network rank of two different cities is defined as the total number of directly connected roads to either city. If a road is directly connected to both cities, it is only counted once.

The maximal network rank of the infrastructure is the maximum network rank of all pairs of different cities.

Given the integer n and the array roads, return the maximal network rank of the entire infrastructure.",['graph'],Medium,243,48,29935,15928,[],"[('c++', 15), ('graph', 13), ('python 3', 7), ('cpp', 6), ('hashmap', 6), ('easy-understanding', 5), ('python', 5), ('easy', 4), ('java', 4), ('dictionary', 3), ('javascript', 3), ('c#', 2), ('comments-added', 2), ('python3', 2), ('bitmask', 1), ('bitset', 1), ('bruteforce', 1), ('clean code', 1), ('commented', 1), ('concat', 1), ('cpp solution', 1), ('early stopping', 1), ('easy-uderstanding', 1), ('fast', 1), ('filter', 1), ('golang', 1), ('iterative', 1), ('kotlin', 1), ('map', 1), ('matrix', 1), ('meiyaowen', 1), ('push', 1), ('reduce', 1), ('ruby', 1), ('set', 1), ('sets', 1), ('simple', 1), ('slice', 1), ('some', 1), ('sort', 1), ('swift', 1), ('typescript', 1), ('understandable', 1)]"
1614,Maximum Nesting Depth of the Parentheses,https://leetcode.com/problems/maximum-nesting-depth-of-the-parentheses,"A string is a valid parentheses string (denoted VPS) if it meets one of the following:


	It is an empty string """", or a single character not equal to ""("" or "")"",
	It can be written as AB (A concatenated with B), where A and B are VPS's, or
	It can be written as (A), where A is a VPS.


We can similarly define the nesting depth depth(S) of any VPS S as follows:


	depth("""") = 0
	depth(C) = 0, where C is a string with a single character not equal to ""("" or "")"".
	depth(A + B) = max(depth(A), depth(B)), where A and B are VPS's.
	depth(""("" + A + "")"") = 1 + depth(A), where A is a VPS.


For example, """", ""()()"", and ""()(()())"" are VPS's (with nesting depths 0, 1, and 2), and "")("" and ""(()"" are not VPS's.

Given a VPS represented as string s, return the nesting depth of s.",['string'],Easy,327,82,47967,39661,"[""Maximum Nesting Depth of Two Valid Parentheses Strings""]","[('c++', 37), ('python', 27), ('java', 25), ('python 3', 23), ('cpp', 19), ('easy-understanding', 16), ('javascript', 16), ('easy', 15), ('python3', 13), ('java-solution', 9), ('simple', 8), ('stack', 8), ('c#', 7), ('cpp solution', 6), ('golang', 5), ('stacks', 5), ('c', 4), ('ruby', 4), ('string', 4), ('easy-to-understand', 3), ('stack-based', 3), ('beginner friendly', 2), ('comments-added', 2), ('counter', 2), ('easytounderstand', 2), ('go', 2), ('go-solution', 2), ('golang-solution', 2), ('javascript solution', 2), ('kotlin', 2), ('parentheses', 2), ('scala', 2), ('swift', 2), ('#fast-enough', 1), ('#fasterthan100percent', 1), ('#fastest', 1), ('#java', 1), ('#java-solution', 1), ('0ms', 1), ('100 speed', 1), ('2 ways', 1), ('99 faster', 1), ('apl', 1), ('array', 1), ('basic', 1), ('brute force', 1), ('c code', 1), ('c++ code', 1), ('clean code', 1), ('clear code', 1), ('codedecks', 1), ('cpp easy', 1), ('easiest solution', 1), ('easy to code', 1), ('easy to read', 1), ('easy to undertsand', 1), ('esay-understand', 1), ('expalanation', 1), ('explanatory comments', 1), ('fastest', 1), ('foreach', 1), ('github', 1), ('good variable names', 1), ('google', 1), ('google interview', 1), ('greedy approach', 1), ('hashmap', 1), ('java ac solution', 1), ('javascriptes6', 1), ('leetcode 1614', 1), ('linear time', 1), ('logn', 1), ('loop', 1), ('meiyaowen', 1), ('no stack', 1), ('one line', 1), ('pattern matching', 1), ('python2', 1), ('rajat', 1), ('reduce', 1), ('rust', 1), ('self-explanatory', 1), ('space o1', 1), ('stl', 1), ('string-operation', 1)]"
1610,Maximum Number of Visible Points,https://leetcode.com/problems/maximum-number-of-visible-points,"You are given an array points, an integer angle, and your location, where location = [posx, posy] and points[i] = [xi, yi] both denote integral coordinates on the X-Y plane.

Initially, you are facing directly east from your position. You cannot move from your position, but you can rotate. In other words, posx and posy cannot be changed. Your field of view in degrees is represented by angle, determining how wide you can see from any given view direction. Let d be the amount in degrees that you rotate counterclockwise. Then, your field of view is the inclusive range of angles [d - angle/2, d + angle/2].


Your browser does not support the video tag or this video format.


You can see some set of points if, for each point, the angle formed by the point, your position, and the immediate east direction from your position is in your field of view.

There can be multiple points at one coordinate. There may be points at your location, and you can always see these points regardless of your rotation. Points do not obstruct your vision to other points.

Return the maximum number of points you can see.","['two-pointers', 'geometry']",Hard,164,231,26717,8379,[],"[('slidingwindow', 9), ('c++', 5), ('javascript', 5), ('python', 4), ('geometry', 3), ('sliding window', 3), ('python3', 2), ('2 pointer', 1), ('binary search', 1), ('c#', 1), ('c++ solution', 1), ('clean code', 1), ('cpp', 1), ('cpp solution', 1), ('degree', 1), ('easy-understanding', 1), ('es2015', 1), ('java', 1), ('javascript solution', 1), ('math', 1), ('numpy', 1), ('python3.8', 1), ('rust', 1)]"
1611,Minimum One Bit Operations to Make Integers Zero,https://leetcode.com/problems/minimum-one-bit-operations-to-make-integers-zero,"Given an integer n, you must transform it into 0 using the following operations any number of times:


	Change the rightmost (0th) bit in the binary representation of n.
	Change the ith bit in the binary representation of n if the (i-1)th bit is set to 1 and the (i-2)th through 0th bits are set to 0.


Return the minimum number of operations to transform n into 0.","['dynamic-programming', 'bit-manipulation']",Hard,155,103,6824,3965,[],"[('c++', 4), ('bit manipulation', 2), ('python', 2), ('python 3', 2), ('bit-manipulation', 1), ('c#', 1), ('es6', 1), ('golang', 1), ('gray-code', 1), ('grey code', 1), ('inclusion-exclusion', 1), ('java', 1), ('javascript', 1), ('javascript solution', 1), ('math', 1), ('pyhton', 1), ('python3', 1), ('recursive', 1), ('recurson', 1), ('ruby', 1)]"
1609,Even Odd Tree,https://leetcode.com/problems/even-odd-tree,"A binary tree is named Even-Odd if it meets the following conditions:


	The root of the binary tree is at level index 0, its children are at level index 1, their children are at level index 2, etc.
	For every even-indexed level, all nodes at the level have odd integer values in strictly increasing order (from left to right).
	For every odd-indexed level, all nodes at the level have even integer values in strictly decreasing order (from left to right).


Given the root of a binary tree, return true if the binary tree is Even-Odd, otherwise return false.",['tree'],Medium,287,19,34722,18120,[],"[('bfs', 40), ('c++', 28), ('cpp', 17), ('level-order-traversal', 16), ('java', 14), ('python 3', 11), ('queue', 11), ('python', 8), ('java-solution', 7), ('level order traversal', 6), ('c#', 4), ('javascript', 4), ('swift', 4), ('bfs simple solution', 3), ('binary-tree', 3), ('breadth first search', 3), ('dfs', 3), ('python3', 3), ('simple', 3), ('tree-traversal', 3), ('binary tree', 2), ('cpp solution', 2), ('easy-understanding', 2), ('recursion', 2), ('tree', 2), ('100 speed', 1), ('11ms', 1), ('2 ways', 1), ('accepted solution', 1), ('beginner friendly', 1), ('bfs-cpp', 1), ('breadth-first-search', 1), ('clean code', 1), ('cpp-solution', 1), ('csharp', 1), ('depth first search', 1), ('dfs-in-order', 1), ('dfs-recursive', 1), ('easytounderstand', 1), ('es2015', 1), ('even odd', 1), ('expalanation', 1), ('explanation of logic', 1), ('fastest', 1), ('go', 1), ('golang', 1), ('helper class', 1), ('intutive', 1), ('iterative', 1), ('iterative-bfs', 1), ('javasccript', 1), ('js', 1), ('kotlin', 1), ('leetcode contest', 1), ('level order', 1), ('linear', 1), ('linear time', 1), ('php', 1), ('pre order', 1), ('python deque', 1), ('pythonpython3', 1), ('queue-approach', 1), ('rajat', 1), ('recursively', 1), ('rust', 1), ('self explanatory', 1), ('sorted array', 1), ('stack', 1), ('step wise', 1), ('tree traversal', 1), ('ultra simple', 1), ('understand', 1), ('upvote', 1), ('vector-operation', 1), ('very simple', 1)]"
1608,Special Array With X Elements Greater Than or Equal X,https://leetcode.com/problems/special-array-with-x-elements-greater-than-or-equal-x,"You are given an array nums of non-negative integers. nums is considered special if there exists a number x such that there are exactly x numbers in nums that are greater than or equal to x.

Notice that x does not have to be an element in nums.

Return x if the array is special, otherwise, return -1. It can be proven that if nums is special, the value for x is unique.",['array'],Easy,251,46,31914,19588,[],"[('c++', 20), ('java', 17), ('python', 16), ('python 3', 12), ('cpp', 11), ('easy-understanding', 9), ('javascript', 7), ('java-solution', 5), ('brute-force', 4), ('cpp easy', 4), ('python3', 4), ('simple', 4), ('binary-search', 3), ('linear time', 3), ('brute force', 2), ('c', 2), ('c#', 2), ('constant space', 2), ('cpp solution', 2), ('easytounderstand', 2), ('go', 2), ('lower-bound', 2), ('simplest', 2), ('sort', 2), ('special array', 2), ('1-line', 1), ('2 ways', 1), ('ac', 1), ('array', 1), ('beats 100', 1), ('bisect', 1), ('brute force to optimal', 1), ('bucket sort', 1), ('c programming', 1), ('counting algorithm', 1), ('dictonary', 1), ('easy-to-understand', 1), ('es2015', 1), ('expalanation', 1), ('explained', 1), ('fast and simple', 1), ('faster than 100.00', 1), ('frequency-count', 1), ('golang', 1), ('golang-solution', 1), ('h-index', 1), ('hashmap', 1), ('java-8', 1), ('javascript solution', 1), ('linear', 1), ('on', 1), ('pigeonhole principle', 1), ('priority queue', 1), ('pythonpython3', 1), ('rajat', 1), ('recursion', 1), ('ruby', 1), ('simple-solution', 1), ('solution', 1), ('sort-function', 1), ('swift', 1), ('unordered map', 1), ('variants', 1)]"
1622,Fancy Sequence,https://leetcode.com/problems/fancy-sequence,"Write an API that generates fancy sequences using the append, addAll, and multAll operations.

Implement the Fancy class:


	Fancy() Initializes the object with an empty sequence.
	void append(val) Appends an integer val to the end of the sequence.
	void addAll(inc) Increments all existing values in the sequence by an integer inc.
	void multAll(m) Multiplies all existing values in the sequence by an integer m.
	int getIndex(idx) Gets the current value at index idx (0-indexed) of the sequence modulo 109 + 7. If the index is greater or equal than the length of the sequence, return -1.","['math', 'design']",Hard,177,59,27265,4048,[],"[('c++', 4), ('c#', 2), ('golang', 2), ('javascript', 2), ('modulo-arithmatic', 2), ('segment tree', 2), ('accumulator', 1), ('algorithm', 1), ('arrays', 1), ('class', 1), ('cpp', 1), ('explanation of logic', 1), ('fast-solution', 1), ('help', 1), ('help needed', 1), ('java', 1), ('java-solution', 1), ('lazy propagation', 1), ('math', 1), ('math solution', 1), ('python3', 1), ('tle', 1), ('vector', 1)]"
1728,Cat and Mouse II,https://leetcode.com/problems/cat-and-mouse-ii,"A game is played by a cat and a mouse named Cat and Mouse.

The environment is represented by a grid of size rows x cols, where each element is a wall, floor, player (Cat, Mouse), or food.


	Players are represented by the characters 'C'(Cat),'M'(Mouse).
	Floors are represented by the character '.' and can be walked on.
	Walls are represented by the character '#' and cannot be walked on.
	Food is represented by the character 'F' and can be walked on.
	There is only one of each character 'C', 'M', and 'F' in grid.


Mouse and Cat play according to the following rules:


	Mouse moves first, then they take turns to move.
	During each turn, Cat and Mouse can jump in one of the four directions (left, right, up, down). They cannot jump over the wall nor outside of the grid.
	catJump, mouseJump are the maximum lengths Cat and Mouse can jump at a time, respectively. Cat and Mouse can jump less than the maximum length.
	Staying in the same position is allowed.
	Mouse can jump over Cat.


The game can end in 4 ways:


	If Cat occupies the same position as Mouse, Cat wins.
	If Cat reaches the food first, Cat wins.
	If Mouse reaches the food first, Mouse wins.
	If Mouse cannot get to the food within 1000 turns, Cat wins.


Given a rows x cols matrix grid and two integers catJump and mouseJump, return true if Mouse can win the game if both Cat and Mouse play optimally, otherwise return false.",['dynamic-programming'],Hard,80,18,7499,3076,"[""Escape The Ghosts"", ""Cat and Mouse""]","[('dynamic programming', 3), ('python3', 3), ('dp', 2), ('python', 2), ('bottom-up-algorithm', 1), ('breadth first search', 1), ('c++', 1), ('dfs', 1), ('game theory', 1), ('java', 1), ('javascript', 1), ('minimax', 1)]"
1620,Coordinate With Maximum Network Quality,https://leetcode.com/problems/coordinate-with-maximum-network-quality,"You are given an array of network towers towers and an integer radius, where towers[i] = [xi, yi, qi] denotes the ith network tower with location (xi, yi) and quality factor qi. All the coordinates are integral coordinates on the X-Y plane, and the distance between two coordinates is the Euclidean distance.

The integer radius denotes the maximum distance in which the tower is reachable. The tower is reachable if the distance is less than or equal to radius. Outside that distance, the signal becomes garbled, and the tower is not reachable.

The signal quality of the ith tower at a coordinate (x, y) is calculated with the formula ⌊qi / (1 + d)⌋, where d is the distance between the tower and the coordinate. The network quality at a coordinate is the sum of the signal qualities from all the reachable towers.

Return the integral coordinate where the network quality is maximum. If there are multiple coordinates with the same network quality, return the lexicographically minimum coordinate.

Note:


	A coordinate (x1, y1) is lexicographically smaller than (x2, y2) if either x1 < x2 or x1 == x2 and y1 < y2.
	⌊val⌋ is the greatest integer less than or equal to val (the floor function).",['greedy'],Medium,45,150,13663,5075,[],"[('c#', 4), ('c++', 4), ('cpp', 2), ('greedy', 2), ('javascript', 2), ('python 3', 2), ('100 space', 1), ('100 speed', 1), ('brute force', 1), ('cpp solution', 1), ('doubt', 1), ('greedy approach', 1), ('java', 1), ('php', 1), ('python', 1), ('python3', 1), ('ruby', 1), ('wrong input', 1)]"
1621,Number of Sets of K Non-Overlapping Line Segments,https://leetcode.com/problems/number-of-sets-of-k-non-overlapping-line-segments,"Given n points on a 1-D plane, where the ith point (from 0 to n-1) is at x = i, find the number of ways we can draw exactly k non-overlapping line segments such that each segment covers two or more points. The endpoints of each segment must have integral coordinates. The k line segments do not have to cover all n points, and they are allowed to share endpoints.

Return the number of ways we can draw k non-overlapping line segments. Since this number can be huge, return it modulo 109 + 7.",['dynamic-programming'],Medium,204,21,10991,4579,[],"[('dynamic programming', 10), ('c++', 5), ('dp', 4), ('java', 4), ('python 3', 4), ('javascript', 3), ('combinatorics', 2), ('c#', 1), ('cpp', 1), ('easy', 1), ('es6', 1), ('explaination', 1), ('explained solution', 1), ('explanation of logic', 1), ('fast and simple', 1), ('math-solution', 1), ('memoization', 1), ('memoziation', 1), ('optimization', 1), ('prefix sum', 1), ('python3', 1), ('ruby', 1)]"
1601,Maximum Number of Achievable Transfer Requests,https://leetcode.com/problems/maximum-number-of-achievable-transfer-requests,"We have n buildings numbered from 0 to n - 1. Each building has a number of employees. It's transfer season, and some employees want to change the building they reside in.

You are given an array requests where requests[i] = [fromi, toi] represents an employee's request to transfer from building fromi to building toi.

All buildings are full, so a list of requests is achievable only if for each building, the net change in employee transfers is zero. This means the number of employees leaving is equal to the number of employees moving in. For example if n = 3 and two employees are leaving building 0, one is leaving building 1, and one is leaving building 2, there should be two employees moving to building 0, one employee moving to building 1, and one employee moving to building 2.

Return the maximum number of achievable requests.",['dynamic-programming'],Hard,174,21,11944,5730,[],"[('bitmasking', 4), ('backtracking', 3), ('bitmask', 3), ('java', 3), ('python', 3), ('dfs', 2), ('easy', 2), ('python3', 2), ('100 speed', 1), ('beats 100', 1), ('brute force', 1), ('c', 1), ('c code', 1), ('c#', 1), ('c++', 1), ('cant understand', 1), ('combinations', 1), ('cpp', 1), ('cpp solution', 1), ('divide and conquer', 1), ('dynamic programming', 1), ('easy-to-understand', 1), ('expalanation', 1), ('golang', 1), ('help', 1), ('indegree', 1), ('iterative', 1), ('itertools', 1), ('javascript', 1), ('outdegree', 1), ('python 3', 1), ('pythonpython3', 1), ('simple', 1), ('wrong testcase', 1)]"
1600,Throne Inheritance,https://leetcode.com/problems/throne-inheritance,"A kingdom consists of a king, his children, his grandchildren, and so on. Every once in a while, someone in the family dies or a child is born.

The kingdom has a well-defined order of inheritance that consists of the king as the first member. Let's define the recursive function Successor(x, curOrder), which given a person x and the inheritance order so far, returns who should be the next person after x in the order of inheritance.


Successor(x, curOrder):
    if x has no children or all of x's children are in curOrder:
        if x is the king return null
        else return Successor(x's parent, curOrder)
    else return x's oldest child who's not in curOrder


For example, assume we have a kingdom that consists of the king, his children Alice and Bob (Alice is older than Bob), and finally Alice's son Jack.


	In the beginning, curOrder will be [""king""].
	Calling Successor(king, curOrder) will return Alice, so we append to curOrder to get [""king"", ""Alice""].
	Calling Successor(Alice, curOrder) will return Jack, so we append to curOrder to get [""king"", ""Alice"", ""Jack""].
	Calling Successor(Jack, curOrder) will return Bob, so we append to curOrder to get [""king"", ""Alice"", ""Jack"", ""Bob""].
	Calling Successor(Bob, curOrder) will return null. Thus the order of inheritance will be [""king"", ""Alice"", ""Jack"", ""Bob""].


Using the above function, we can always obtain a unique order of inheritance.

Implement the ThroneInheritance class:


	ThroneInheritance(string kingName) Initializes an object of the ThroneInheritance class. The name of the king is given as part of the constructor.
	void birth(string parentName, string childName) Indicates that parentName gave birth to childName.
	void death(string name) Indicates the death of name. The death of the person doesn't affect the Successor function nor the current inheritance order. You can treat it as just marking the person as dead.
	string[] getInheritanceOrder() Returns a list representing the current order of inheritance excluding dead people.","['tree', 'design']",Medium,109,171,13780,8367,[],"[('hashmap', 11), ('c++', 10), ('java', 7), ('dfs', 6), ('c#', 5), ('cpp', 5), ('dfs pre-order traversal', 5), ('python', 5), ('golang', 4), ('python 3', 4), ('python3', 4), ('map', 3), ('stack', 3), ('cpp solution', 2), ('dfs-iterative', 2), ('dictonary', 2), ('easy-understanding', 2), ('javascript', 2), ('n-ary', 2), ('n-ary tree', 2), ('python3.8', 2), ('queue', 2), ('100 faster runtime', 1), ('100 space', 1), ('bfs', 1), ('c', 1), ('c code', 1), ('comments-added', 1), ('design pattern', 1), ('dfs simple solution', 1), ('dfs-topdown', 1), ('dictionary', 1), ('easy', 1), ('explained', 1), ('go', 1), ('graph', 1), ('hasmap', 1), ('inorder traversal', 1), ('kotlin', 1), ('lineartime', 1), ('listnode', 1), ('no recursion', 1), ('pointers', 1), ('pre-order traversal', 1), ('preorder', 1), ('preorder traversal', 1), ('recursion', 1), ('set', 1), ('sets', 1), ('simple', 1), ('simplest', 1), ('straight-forward', 1), ('swift', 1), ('tree', 1), ('tree-traversal', 1), ('unordered map', 1), ('worst', 1)]"
1599,Maximum Profit of Operating a Centennial Wheel,https://leetcode.com/problems/maximum-profit-of-operating-a-centennial-wheel,"You are the operator of a Centennial Wheel that has four gondolas, and each gondola has room for up to four people. You have the ability to rotate the gondolas counterclockwise, which costs you runningCost dollars.

You are given an array customers of length n where customers[i] is the number of new customers arriving just before the ith rotation (0-indexed). This means you must rotate the wheel i times before the customers[i] customers arrive. You cannot make customers wait if there is room in the gondola. Each customer pays boardingCost dollars when they board on the gondola closest to the ground and will exit once that gondola reaches the ground again.

You can stop the wheel at any time, including before serving all customers. If you decide to stop serving customers, all subsequent rotations are free in order to get all the customers down safely. Note that if there are currently more than four customers waiting at the wheel, only four will board the gondola, and the rest will wait for the next rotation.

Return the minimum number of rotations you need to perform to maximize your profit. If there is no scenario where the profit is positive, return -1.",['greedy'],Medium,53,184,19078,8335,[],"[('c++', 10), ('python 3', 6), ('c#', 4), ('easy-understanding', 4), ('python', 4), ('golang', 3), ('python3', 3), ('greedy', 2), ('iterative', 2), ('java', 2), ('1ms', 1), ('begginer friendly', 1), ('beginner friendly', 1), ('cpp', 1), ('cpp easy', 1), ('cpp solution', 1), ('easy', 1), ('efficient solution', 1), ('go-solution', 1), ('implementation', 1), ('incorrect-description', 1), ('intuitive', 1), ('javascript', 1), ('kotlin', 1), ('linear time', 1), ('lineartime', 1), ('logic explained clearly', 1), ('optimized', 1), ('ptyhon3', 1), ('python3.8', 1), ('simulation', 1), ('swift', 1), ('unclear', 1)]"
1598,Crawler Log Folder,https://leetcode.com/problems/crawler-log-folder,"The Leetcode file system keeps a log each time some user performs a change folder operation.

The operations are described below:


	""../"" : Move to the parent folder of the current folder. (If you are already in the main folder, remain in the same folder).
	""./"" : Remain in the same folder.
	""x/"" : Move to the child folder named x (This folder is guaranteed to always exist).


You are given a list of strings logs where logs[i] is the operation performed by the user at the ith step.

The file system starts in the main folder, then the operations in logs are performed.

Return the minimum number of operations needed to go back to the main folder after the change folder operations.",['stack'],Easy,214,20,35116,22380,"[""Baseball Game"", ""Backspace String Compare""]","[('c++', 32), ('python 3', 19), ('easy-understanding', 16), ('java', 15), ('python', 15), ('cpp', 13), ('stack', 13), ('javascript', 11), ('linear time', 9), ('easy', 7), ('java-solution', 6), ('python3', 6), ('cpp solution', 4), ('simple', 3), ('swift', 3), ('100 speed', 2), ('c', 2), ('c#', 2), ('cpp easy', 2), ('fast and simple', 2), ('golang', 2), ('pythonpython3', 2), ('stack-based', 2), ('stacks', 2), ('straight-forward', 2), ('1-line', 1), ('100', 1), ('100 memory', 1), ('3ways', 1), ('beginners', 1), ('c programming', 1), ('clean code', 1), ('codedecks', 1), ('commented code', 1), ('concise', 1), ('constant memory', 1), ('constant space', 1), ('count', 1), ('detailed explanation', 1), ('different solutions', 1), ('easytounderstand', 1), ('explained', 1), ('faster', 1), ('fastest', 1), ('fastest solution', 1), ('go-solutiong', 1), ('golang-solution', 1), ('implementation', 1), ('iterative way', 1), ('java ac solution', 1), ('js', 1), ('linear solution', 1), ('linear-time', 1), ('no stack', 1), ('one pass', 1), ('one-liner', 1), ('python easy', 1), ('python2', 1), ('python3.8', 1), ('rajat', 1), ('recursive', 1), ('regex', 1), ('regular-expression', 1), ('ruby', 1), ('self explanatory', 1), ('short code', 1), ('simple and fast', 1), ('simple-solution', 1), ('string', 1)]"
1595,Minimum Cost to Connect Two Groups of Points,https://leetcode.com/problems/minimum-cost-to-connect-two-groups-of-points,"You are given two groups of points where the first group has size1 points, the second group has size2 points, and size1 >= size2.

The cost of the connection between any two points are given in an size1 x size2 matrix where cost[i][j] is the cost of connecting point i of the first group and point j of the second group. The groups are connected if each point in both groups is connected to one or more points in the opposite group. In other words, each point in the first group must be connected to at least one point in the second group, and each point in the second group must be connected to at least one point in the first group.

Return the minimum cost it takes to connect the two groups.","['dynamic-programming', 'graph']",Hard,212,8,10344,4505,[],"[('bitmask', 2), ('dynamic programming', 2), ('java-solution', 2), ('bfs', 1), ('bipartite-matching', 1), ('bit manipulation', 1), ('brute force', 1), ('c#', 1), ('c++', 1), ('c++ solution', 1), ('dfs solution', 1), ('dp', 1), ('java', 1), ('python 3', 1), ('python3', 1), ('swift', 1)]"
1594,Maximum Non Negative Product in a Matrix,https://leetcode.com/problems/maximum-non-negative-product-in-a-matrix,"You are given a rows x cols matrix grid. Initially, you are located at the top-left corner (0, 0), and in each step, you can only move right or down in the matrix.

Among all possible paths starting from the top-left corner (0, 0) and ending in the bottom-right corner (rows - 1, cols - 1), find the path with the maximum non-negative product. The product of a path is the product of all integers in the grid cells visited along the path.

Return the maximum non-negative product modulo 109 + 7. If the maximum product is negative return -1.

Notice that the modulo is performed after getting the maximum product.","['dynamic-programming', 'greedy']",Medium,311,19,36541,11858,[],"[('dynamic programming', 18), ('dp', 16), ('c++', 9), ('python 3', 8), ('python', 7), ('java', 5), ('python3', 5), ('c#', 4), ('dfs simple solution', 3), ('dfs solution', 3), ('javascript', 3), ('cpp', 2), ('cpp solution', 2), ('easy', 2), ('golang', 2), ('recursion', 2), ('swift', 2), ('top down dp', 2), ('bfs', 1), ('bottom-up', 1), ('brute force', 1), ('depth first search', 1), ('dfs', 1), ('dynamic-programming', 1), ('easy-understanding', 1), ('explanations', 1), ('help needed', 1), ('java-solution', 1), ('kotlin', 1), ('memoization', 1), ('recursive', 1), ('test-cases', 1), ('video-explanation', 1), ('visualization', 1), ('with explanation', 1)]"
1593,Split a String Into the Max Number of Unique Substrings,https://leetcode.com/problems/split-a-string-into-the-max-number-of-unique-substrings,"Given a string s, return the maximum number of unique substrings that the given string can be split into.

You can split string s into any list of non-empty substrings, where the concatenation of the substrings forms the original string. However, you must split the substrings such that all of them are unique.

A substring is a contiguous sequence of characters within a string.",['backtracking'],Medium,316,11,25037,12547,[],"[('backtracking', 21), ('c++', 10), ('java', 10), ('javascript', 4), ('python 3', 4), ('c#', 3), ('cpp', 3), ('dfs', 3), ('explained', 3), ('python', 3), ('python3', 3), ('bfs', 2), ('explanations', 2), ('pruning', 2), ('recursion', 2), ('ruby', 2), ('swift', 2), ('100 memory', 1), ('100 speed', 1), ('backrtracking', 1), ('beats 100', 1), ('binary-search', 1), ('bitmask', 1), ('bitset', 1), ('c', 1), ('commented code', 1), ('cplusplus', 1), ('cpp easy', 1), ('cpp solution', 1), ('dfs simple solution', 1), ('dfs solution', 1), ('easiest', 1), ('easy-understanding', 1), ('easytounderstand', 1), ('explained solution', 1), ('fast-solution', 1), ('fastest', 1), ('golang', 1), ('greedy', 1), ('hashset', 1), ('java-solution', 1), ('kotlin', 1), ('optimized', 1), ('preorder traversal', 1), ('python3.8', 1), ('rabin-karp', 1), ('recursive', 1), ('rolling hash', 1), ('sets', 1), ('thought-process', 1), ('trie', 1)]"
1592,Rearrange Spaces Between Words,https://leetcode.com/problems/rearrange-spaces-between-words,"You are given a string text of words that are placed among some number of spaces. Each word consists of one or more lowercase English letters and are separated by at least one space. It's guaranteed that text contains at least one word.

Rearrange the spaces so that there is an equal number of spaces between every pair of adjacent words and that number is maximized. If you cannot redistribute all the spaces equally, place the extra spaces at the end, meaning the returned string should be the same length as text.

Return the string after rearranging the spaces.",['string'],Easy,137,141,46226,20117,"[""Text Justification""]","[('python 3', 14), ('c++', 13), ('java', 13), ('python', 11), ('cpp', 10), ('javascript', 10), ('python3', 7), ('string', 5), ('cpp easy', 4), ('easy-understanding', 4), ('golang', 4), ('swift', 4), ('c#', 3), ('cpp solution', 3), ('easy', 3), ('fast', 3), ('java-solution', 3), ('python2', 2), ('simple', 2), ('1592', 1), ('best solution in c++', 1), ('brute force', 1), ('brute-force', 1), ('c', 1), ('c++11', 1), ('codedecks', 1), ('easytounderstand', 1), ('explanations', 1), ('fastest c++ solution', 1), ('go', 1), ('go-solution', 1), ('golang solution', 1), ('golang-solution', 1), ('in-place', 1), ('intutive', 1), ('java ac solution', 1), ('java-8', 1), ('javascript solution', 1), ('leetcode', 1), ('loop method', 1), ('observations', 1), ('one-liner', 1), ('practical solution', 1), ('queue-approach', 1), ('regular expression', 1), ('ruby', 1), ('self explanatory', 1), ('split', 1), ('straight-forward', 1), ('string-builder', 1), ('ultra easy', 1), ('upvote', 1), ('video explanation', 1), ('weird', 1)]"
1605,Find Valid Matrix Given Row and Column Sums,https://leetcode.com/problems/find-valid-matrix-given-row-and-column-sums,"You are given two arrays rowSum and colSum of non-negative integers where rowSum[i] is the sum of the elements in the ith row and colSum[j] is the sum of the elements of the jth column of a 2D matrix. In other words, you do not know the elements of the matrix, but you do know the sums of each row and column.

Find any matrix of non-negative integers of size rowSum.length x colSum.length that satisfies the rowSum and colSum requirements.

Return a 2D array representing any matrix that fulfills the requirements. It's guaranteed that at least one matrix that fulfills the requirements exists.",['greedy'],Medium,444,16,16252,12537,"[""Reconstruct a 2-Row Binary Matrix""]","[('greedy', 12), ('c++', 10), ('python 3', 7), ('greedy approach', 5), ('java', 5), ('python', 5), ('python3', 5), ('javascript', 4), ('easy-understanding', 3), ('c#', 2), ('cpp solution', 2), ('easy', 2), ('faster than 100.00', 2), ('greedy algorithm', 2), ('single-loop', 2), ('c', 1), ('cpp', 1), ('easytounderstand', 1), ('fast', 1), ('heaps', 1), ('illustration', 1), ('iteration', 1), ('js javascript', 1), ('math-solution', 1), ('matrix', 1), ('matrix operation', 1), ('priority queue', 1), ('simple', 1), ('vector-operation', 1), ('video explanation', 1)]"
1606,Find Servers That Handled Most Number of Requests,https://leetcode.com/problems/find-servers-that-handled-most-number-of-requests,"You have k servers numbered from 0 to k-1 that are being used to handle multiple requests simultaneously. Each server has infinite computational capacity but cannot handle more than one request at a time. The requests are assigned to servers according to a specific algorithm:


	The ith (0-indexed) request arrives.
	If all servers are busy, the request is dropped (not handled at all).
	If the (i % k)th server is available, assign the request to that server.
	Otherwise, assign the request to the next available server (wrapping around the list of servers and starting from 0 if necessary). For example, if the ith server is busy, try to assign the request to the (i+1)th server, then the (i+2)th server, and so on.


You are given a strictly increasing array arrival of positive integers, where arrival[i] represents the arrival time of the ith request, and another array load, where load[i] represents the load of the ith request (the time it takes to complete). Your goal is to find the busiest server(s). A server is considered busiest if it handled the most number of requests successfully among all the servers.

Return a list containing the IDs (0-indexed) of the busiest server(s). You may return the IDs in any order.",['ordered-map'],Hard,196,7,10801,4063,[],"[('heaps', 4), ('python', 4), ('c++', 3), ('easy', 3), ('python 3', 3), ('python3', 2), ('avl tree', 1), ('binary-heap', 1), ('btreeset', 1), ('commented code', 1), ('easy-understanding', 1), ('fenwick-tree', 1), ('golang', 1), ('golang-solution', 1), ('help needed', 1), ('implementation', 1), ('java', 1), ('javascript', 1), ('optimized', 1), ('priority queue', 1), ('ruby', 1), ('rust', 1), ('segment-tree', 1), ('set', 1)]"
1604,Alert Using Same Key-Card Three or More Times in a One Hour Period,https://leetcode.com/problems/alert-using-same-key-card-three-or-more-times-in-a-one-hour-period,"LeetCode company workers use key-cards to unlock office doors. Each time a worker uses their key-card, the security system saves the worker's name and the time when it was used. The system emits an alert if any worker uses the key-card three or more times in a one-hour period.

You are given a list of strings keyName and keyTime where [keyName[i], keyTime[i]] corresponds to a person's name and the time when their key-card was used in a single day.

Access times are given in the 24-hour time format ""HH:MM"", such as ""23:51"" and ""09:49"".

Return a list of unique worker names who received an alert for frequent keycard use. Sort the names in ascending order alphabetically.

Notice that ""10:00"" - ""11:00"" is considered to be within a one-hour period, while ""22:51"" - ""23:52"" is not considered to be within a one-hour period.","['string', 'ordered-map']",Medium,85,155,18105,7785,[],"[('c++', 10), ('python 3', 6), ('hashmap', 5), ('java', 5), ('c#', 4), ('easy', 3), ('easy-understanding', 3), ('javascript', 3), ('python', 3), ('sorting', 3), ('unordered map', 3), ('map', 2), ('python3', 2), ('set', 2), ('sliding-window', 2), ('slidingwindow', 2), ('treeset', 2), ('vector', 2), ('100 faster runtime', 1), ('clean code', 1), ('concise', 1), ('concise-solution', 1), ('cpp', 1), ('defaultdict', 1), ('deque', 1), ('dictonary', 1), ('easy-to-understand', 1), ('golang', 1), ('hash table', 1), ('java-solution', 1), ('kotlin', 1), ('kotlin-solution', 1), ('linear time', 1), ('php', 1), ('self-explanatory', 1), ('simple understanding', 1), ('sort', 1), ('video explanation', 1)]"
1603,Design Parking System,https://leetcode.com/problems/design-parking-system,"Design a parking system for a parking lot. The parking lot has three kinds of parking spaces: big, medium, and small, with a fixed number of slots for each size.

Implement the ParkingSystem class:


	ParkingSystem(int big, int medium, int small) Initializes object of the ParkingSystem class. The number of slots for each parking space are given as part of the constructor.
	bool addCar(int carType) Checks whether there is a parking space of carType for the car that wants to get into the parking lot. carType can be of three kinds: big, medium, or small, which are represented by 1, 2, and 3 respectively. A car can only park in a parking space of its carType. If there is no space available, return false, else park the car in that size space and return true.",['design'],Easy,295,148,66006,56964,[],"[('java', 25), ('c++', 21), ('python', 17), ('easy-understanding', 15), ('java-solution', 14), ('cpp', 13), ('python 3', 13), ('javascript', 12), ('c#', 10), ('python3', 8), ('cpp solution', 7), ('easy', 6), ('cpp easy', 5), ('array', 4), ('easy-to-understand', 4), ('arrays', 3), ('c', 3), ('dictonary', 3), ('oops', 3), ('simple', 3), ('c++ easy to understand', 2), ('design', 2), ('easytounderstand', 2), ('efficient solution', 2), ('golang', 2), ('kotlin', 2), ('python2', 2), ('scala', 2), ('swift', 2), ('#python 3', 1), ('1 liner', 1), ('asahiocean', 1), ('beats 99', 1), ('beats 99 pc', 1), ('brute force', 1), ('brute force to optimal', 1), ('c code', 1), ('c programming', 1), ('c++ ac', 1), ('c++ set', 1), ('class definition', 1), ('clear', 1), ('concise', 1), ('constant space', 1), ('constant time', 1), ('constructor', 1), ('cpp-functional', 1), ('dict', 1), ('dictionary c#', 1), ('easy to understand', 1), ('explained', 1), ('fast', 1), ('fastest', 1), ('go', 1), ('golang-solution', 1), ('golfing', 1), ('if else', 1), ('if-else', 1), ('intutive', 1), ('java-8', 1), ('javascript solution', 1), ('kotlin-solution', 1), ('leetcode', 1), ('list', 1), ('map', 1), ('noob', 1), ('one line', 1), ('parking', 1), ('pyton', 1), ('queue', 1), ('ruby', 1), ('rust', 1), ('self explanatory', 1), ('simple python accepted', 1), ('simpler', 1), ('solution', 1), ('super-easy', 1), ('switch case', 1), ('switch-case', 1), ('system', 1), ('this keyword', 1), ('top', 1), ('ultra simple', 1), ('upvote', 1), ('vector', 1), ('vector-operation', 1), ('video explanation', 1)]"
1585,Check If String Is Transformable With Substring Sort Operations,https://leetcode.com/problems/check-if-string-is-transformable-with-substring-sort-operations,"Given two strings s and t, you want to transform string s into string t using the following operation any number of times:


	Choose a non-empty substring in s and sort it in-place so the characters are in ascending order.


For example, applying the operation on the underlined substring in ""14234"" results in ""12344"".

Return true if it is possible to transform string s into string t. Otherwise, return false.

A substring is a contiguous sequence of characters within a string.","['string', 'greedy']",Hard,240,4,9910,4809,[],"[('c++', 1), ('c++17', 1), ('constructive', 1), ('java', 1), ('java ac solution', 1), ('java-solution', 1), ('prefix sum', 1), ('python3', 1), ('queue', 1)]"
1584,Min Cost to Connect All Points,https://leetcode.com/problems/min-cost-to-connect-all-points,"You are given an array points representing integer coordinates of some points on a 2D-plane, where points[i] = [xi, yi].

The cost of connecting two points [xi, yi] and [xj, yj] is the manhattan distance between them: |xi - xj| + |yi - yj|, where |val| denotes the absolute value of val.

Return the minimum cost to make all points connected. All points are connected if there is exactly one simple path between any two points.",['union-find'],Medium,429,26,28909,15507,[],"[('minimum spanning tree', 16), ('kruskals algorithm', 13), ('c++', 12), ('mst', 11), ('prims', 11), ('union find', 11), ('java', 10), ('prim', 8), ('python', 8), ('python 3', 6), ('cpp', 5), ('java-solution', 4), ('javascript', 4), ('greedy', 3), ('kruskal algorithm', 3), ('python3', 3), ('unionfind', 3), ('c#', 2), ('easy-understanding', 2), ('graph', 2), ('heap', 2), ('krukasal', 2), ('path compression', 2), ('priorityqueue', 2), ('union-by-rank', 2), ('#graph', 1), ('#priority-queue', 1), ('awesome samriddhi', 1), ('beginner friendly', 1), ('brute force', 1), ('c++14', 1), ('c++17', 1), ('complete graph', 1), ('dijkstras algorithm', 1), ('easytounderstand', 1), ('explanation of logic', 1), ('explanations', 1), ('fast', 1), ('golang', 1), ('greedy algorithm', 1), ('heapq', 1), ('kotlin', 1), ('optimized', 1), ('priority queue', 1), ('priority-queue', 1), ('python2', 1), ('ritik', 1), ('sets', 1), ('simple', 1), ('spanning tree', 1), ('swift', 1), ('video-explanation', 1), ('visualization', 1)]"
1583,Count Unhappy Friends,https://leetcode.com/problems/count-unhappy-friends,"You are given a list of preferences for n friends, where n is always even.

For each person i, preferences[i] contains a list of friends sorted in the order of preference. In other words, a friend earlier in the list is more preferred than a friend later in the list. Friends in each list are denoted by integers from 0 to n-1.

All the friends are divided into pairs. The pairings are given in a list pairs, where pairs[i] = [xi, yi] denotes xi is paired with yi and yi is paired with xi.

However, this pairing may cause some of the friends to be unhappy. A friend x is unhappy if x is paired with y and there exists a friend u who is paired with v but:


	x prefers u over y, and
	u prefers x over v.


Return the number of unhappy friends.",['array'],Medium,108,406,19963,11018,[],"[('java', 8), ('python', 8), ('c++', 7), ('python 3', 7), ('hashmap', 6), ('python3', 6), ('c#', 3), ('easy-understanding', 2), ('golang', 2), ('javascript', 2), ('100speed', 1), ('4ms', 1), ('brutal force', 1), ('brute force', 1), ('code for beginners', 1), ('cpp', 1), ('cpp easy', 1), ('cpp solution', 1), ('dictonary', 1), ('directed graph', 1), ('easytounderstand', 1), ('explanation of logic', 1), ('explanations', 1), ('fastest', 1), ('go', 1), ('golang-solution', 1), ('graph', 1), ('hash table', 1), ('input-error', 1), ('iterative', 1), ('java simple', 1), ('javasccript', 1), ('logic explained clearly', 1), ('map', 1), ('output', 1), ('readable code', 1), ('scala', 1), ('search', 1), ('swift', 1), ('unorderedmap', 1), ('visual', 1)]"
1582,Special Positions in a Binary Matrix,https://leetcode.com/problems/special-positions-in-a-binary-matrix,"Given a rows x cols matrix mat, where mat[i][j] is either 0 or 1, return the number of special positions in mat.

A position (i,j) is called special if mat[i][j] == 1 and all other elements in row i and column j are 0 (rows and columns are 0-indexed).",['array'],Easy,246,8,33900,21713,[],"[('c++', 28), ('python 3', 20), ('java', 16), ('easy-understanding', 14), ('python', 14), ('python3', 11), ('cpp', 9), ('c#', 6), ('brute force', 5), ('javascript', 5), ('cpp solution', 4), ('easy', 4), ('explanation of logic', 4), ('java-solution', 4), ('array', 3), ('hashmap', 3), ('matrix', 3), ('ruby', 3), ('brute-force', 2), ('clean', 2), ('code for beginners', 2), ('easiest', 2), ('easy-to-understand', 2), ('hash table', 2), ('js', 2), ('js javascript', 2), ('logic explained clearly', 2), ('python2', 2), ('special positions', 2), ('special-positions', 2), ('specialpositionsinmatrix', 2), ('2 pass', 1), ('apl', 1), ('arrays', 1), ('bfs', 1), ('binary matrix', 1), ('binary-matrix', 1), ('c', 1), ('c programming', 1), ('clean code', 1), ('contest', 1), ('dictionary', 1), ('dictonary', 1), ('easy to understandd', 1), ('explained', 1), ('explained solution', 1), ('explanations', 1), ('fast and simple', 1), ('go-solution', 1), ('golang', 1), ('golang-solution', 1), ('implementation', 1), ('intuition', 1), ('intutive', 1), ('iteration', 1), ('kotlin', 1), ('lambda function', 1), ('no-builtin', 1), ('one line', 1), ('python 2', 1), ('pythonpython3', 1), ('recursion', 1), ('rust', 1), ('self explanatory', 1), ('simple', 1), ('simple solution', 1), ('simple-solution', 1), ('single loop', 1), ('solution', 1), ('solution c++', 1), ('swift', 1), ('ultra easy', 1), ('understandable', 1), ('upvote', 1), ('video explanation', 1), ('whileloop', 1)]"
1579,Remove Max Number of Edges to Keep Graph Fully Traversable,https://leetcode.com/problems/remove-max-number-of-edges-to-keep-graph-fully-traversable,"Alice and Bob have an undirected graph of n nodes and 3 types of edges:


	Type 1: Can be traversed by Alice only.
	Type 2: Can be traversed by Bob only.
	Type 3: Can by traversed by both Alice and Bob.


Given an array edges where edges[i] = [typei, ui, vi] represents a bidirectional edge of type typei between nodes ui and vi, find the maximum number of edges you can remove so that after removing the edges, the graph can still be fully traversed by both Alice and Bob. The graph is fully traversed by Alice and Bob if starting from any node, they can reach all other nodes.

Return the maximum number of edges you can remove, or return -1 if it's impossible for the graph to be fully traversed by Alice and Bob.",['union-find'],Hard,315,3,14579,6766,[],"[('union find', 10), ('python', 6), ('unionfind', 6), ('easy-understanding', 4), ('java', 4), ('easy-to-understand', 3), ('c++', 2), ('disjoint-set', 2), ('graph', 2), ('javascript', 2), ('kruskal algorithm', 2), ('beats 100', 1), ('bfs', 1), ('bfs simple solution', 1), ('c#', 1), ('c++ solution', 1), ('comments-added', 1), ('connected components', 1), ('cpp', 1), ('debugging', 1), ('dfs', 1), ('dsu', 1), ('easy to understand', 1), ('fast and simple', 1), ('heap', 1), ('hinglish', 1), ('kotlin', 1), ('kruskals algorithm', 1), ('leetcode684', 1), ('minimum spanning tree', 1), ('prim', 1), ('prims', 1), ('python 3', 1), ('python2', 1), ('python3', 1), ('ruby', 1), ('simple', 1), ('simple clear c++ solution', 1), ('spanning tree', 1), ('union-find', 1)]"
1578,Minimum Deletion Cost to Avoid Repeating Letters,https://leetcode.com/problems/minimum-deletion-cost-to-avoid-repeating-letters,"Given a string s and an array of integers cost where cost[i] is the cost of deleting the ith character in s.

Return the minimum cost of deletions such that there are no two identical letters next to each other.

Notice that you will delete the chosen characters at the same time, in other words, after deleting a character, the costs of deleting other characters will not change.",['greedy'],Medium,406,19,45398,27557,[],"[('c++', 24), ('greedy', 17), ('cpp', 11), ('easy-understanding', 11), ('java', 10), ('python', 10), ('python 3', 10), ('python3', 10), ('javascript', 9), ('greedy approach', 7), ('c#', 5), ('two-pointers', 5), ('linear time', 4), ('cpp solution', 3), ('easy', 3), ('easytounderstand', 3), ('easy-to-understand', 2), ('golang', 2), ('intuitive', 2), ('java-solution', 2), ('single pass', 2), ('stack', 2), ('understanding', 2), ('video-explanation', 2), ('100 faster runtime', 1), ('2pointers', 1), ('best', 1), ('best explaination', 1), ('c# solution', 1), ('clean code', 1), ('clean-efficient-code', 1), ('clear-understanding', 1), ('code for beginners', 1), ('codility', 1), ('constant space', 1), ('explained', 1), ('explanations', 1), ('fast-solution', 1), ('heap', 1), ('image-understanding', 1), ('itereative', 1), ('javascript solution', 1), ('library', 1), ('linear', 1), ('microsoft', 1), ('no extra space', 1), ('observation', 1), ('on', 1), ('one pass solution', 1), ('optimal', 1), ('priority queue', 1), ('python2', 1), ('scala', 1), ('short', 1), ('simple', 1), ('simple clear c++ solution', 1), ('simpler', 1), ('stack-based', 1), ('swap', 1), ('swift', 1), ('two-pointer', 1), ('whiteboard', 1)]"
1577,Number of Ways Where Square of Number Is Equal to Product of Two Numbers,https://leetcode.com/problems/number-of-ways-where-square-of-number-is-equal-to-product-of-two-numbers,"Given two arrays of integers nums1 and nums2, return the number of triplets formed (type 1 and type 2) under the following rules:


	Type 1: Triplet (i, j, k) if nums1[i]2 == nums2[j] * nums2[k] where 0 <= i < nums1.length and 0 <= j < k < nums2.length.
	Type 2: Triplet (i, j, k) if nums2[i]2 == nums1[j] * nums1[k] where 0 <= i < nums2.length and 0 <= j < k < nums1.length.","['hash-table', 'math']",Medium,148,36,31295,11875,[],"[('c++', 9), ('hashmap', 8), ('python', 7), ('java', 6), ('easy-understanding', 4), ('python3', 4), ('cpp', 3), ('javascript', 3), ('python 3', 3), ('binary-search', 2), ('c#', 2), ('dictionary', 2), ('java-solution', 2), ('map', 2), ('2 pointers', 1), ('3 sum', 1), ('approach', 1), ('begginer friendly', 1), ('c++ map', 1), ('c++ solution', 1), ('clean solution', 1), ('complexity-analysis', 1), ('contest', 1), ('counter', 1), ('dict', 1), ('dictonary', 1), ('easy', 1), ('explained', 1), ('hash table', 1), ('hashing', 1), ('hashing algorithm', 1), ('interview', 1), ('lodash', 1), ('logic explained clearly', 1), ('loop', 1), ('map in c++', 1), ('math', 1), ('memorization', 1), ('ruby', 1), ('sets', 1), ('sort', 1), ('sorting', 1), ('swift', 1), ('triplet', 1), ('two-pointers', 1)]"
1576,Replace All ?'s to Avoid Consecutive Repeating Characters,https://leetcode.com/problems/replace-all-s-to-avoid-consecutive-repeating-characters,"Given a string s containing only lower case English letters and the '?' character, convert all the '?' characters into lower case letters such that the final string does not contain any consecutive repeating characters. You cannot modify the non '?' characters.

It is guaranteed that there are no consecutive repeating characters in the given string except for '?'.

Return the final string after all the conversions (possibly zero) have been made. If there is more than one solution, return any of them. It can be shown that an answer is always possible with the given constraints.",['string'],Easy,222,104,56199,28157,[],"[('c++', 22), ('java', 15), ('easy-understanding', 10), ('python 3', 10), ('cpp', 9), ('javascript', 9), ('python', 7), ('c#', 6), ('python3', 5), ('easy', 4), ('java-solution', 4), ('string', 4), ('linear time', 3), ('beginner friendly', 2), ('golang', 2), ('iterative', 2), ('random', 2), ('repeatingproblem', 2), ('replace', 2), ('#java #easy-understand', 1), ('100 faster cpp', 1), ('100 space', 1), ('100 speed', 1), ('24ms', 1), ('c', 1), ('c programming', 1), ('code for beginners', 1), ('consecutive', 1), ('cpp solution', 1), ('dp', 1), ('easy to read', 1), ('easy to understand', 1), ('explained', 1), ('faster than 100.00', 1), ('go-solution', 1), ('golang-solution', 1), ('help needed', 1), ('intutive', 1), ('java ac solution', 1), ('js', 1), ('js javascript', 1), ('kotlin', 1), ('logical thinking', 1), ('map', 1), ('observations', 1), ('php', 1), ('python2', 1), ('queue', 1), ('random pick', 1), ('recursive', 1), ('regular expression', 1), ('ruby', 1), ('self-explanatory', 1), ('simple clear c++ solution', 1), ('stringbuilder', 1), ('swift', 1), ('ultra easy', 1), ('upvote', 1)]"
1591,Strange Printer II,https://leetcode.com/problems/strange-printer-ii,"There is a strange printer with the following two special requirements:


	On each turn, the printer will print a solid rectangular pattern of a single color on the grid. This will cover up the existing colors in the rectangle.
	Once the printer has used a color for the above operation, the same color cannot be used again.


You are given a m x n matrix targetGrid, where targetGrid[row][col] is the color in the position (row, col) of the grid.

Return true if it is possible to print the matrix targetGrid, otherwise, return false.",['greedy'],Hard,185,6,6331,3523,"[""Strange Printer""]","[('dfs', 3), ('circle-detection', 1), ('clean code', 1), ('contest', 1), ('cpp solution', 1), ('cycle detection', 1), ('dfs coloring', 1), ('iteratve-recursive', 1), ('java', 1), ('javascript', 1), ('python 3', 1), ('python3.8', 1), ('topological-sorting', 1)]"
1589,Maximum Sum Obtained of Any Permutation,https://leetcode.com/problems/maximum-sum-obtained-of-any-permutation,"We have an array of integers, nums, and an array of requests where requests[i] = [starti, endi]. The ith request asks for the sum of nums[starti] + nums[starti + 1] + ... + nums[endi - 1] + nums[endi]. Both starti and endi are 0-indexed.

Return the maximum total sum of all requests among all permutations of nums.

Since the answer may be too large, return it modulo 109 + 7.",['greedy'],Medium,308,19,22911,8014,[],"[('python', 6), ('python 3', 4), ('greedy', 3), ('javascript', 3), ('c#', 2), ('c++', 2), ('c++14', 2), ('easy-understanding', 2), ('greedy algorithm', 2), ('sorting', 2), ('brute force', 1), ('brute-force', 1), ('comments-added', 1), ('cpp', 1), ('cpp solution', 1), ('differencearray', 1), ('fast', 1), ('golang', 1), ('greedy approach', 1), ('java', 1), ('js', 1), ('linear', 1), ('linear space', 1), ('logarithmic time', 1), ('numpy', 1), ('prefix sum', 1), ('python2', 1), ('python3', 1), ('segment tree', 1), ('simple', 1), ('simple clear c++ solution', 1), ('video explanation', 1)]"
1590,Make Sum Divisible by P,https://leetcode.com/problems/make-sum-divisible-by-p,"Given an array of positive integers nums, remove the smallest subarray (possibly empty) such that the sum of the remaining elements is divisible by p. It is not allowed to remove the whole array.

Return the length of the smallest subarray that you need to remove, or -1 if it's impossible.

A subarray is defined as a contiguous block of elements in the array.","['array', 'hash-table', 'math', 'binary-search']",Medium,490,22,35150,9426,"[""Subarray Sums Divisible by K""]","[('c++', 5), ('hashmap', 4), ('python 3', 4), ('prefix sum', 3), ('python', 3), ('c#', 2), ('easy-understanding', 2), ('java', 2), ('java-solution', 2), ('javascript', 2), ('#python', 1), ('arrays', 1), ('begineer friendly', 1), ('brute force', 1), ('brute-force', 1), ('curious', 1), ('explained', 1), ('extra', 1), ('golang', 1), ('hash table', 1), ('help needed', 1), ('intuitive', 1), ('optimization', 1), ('prefix-sums', 1), ('prefixsum', 1), ('python3', 1), ('questions', 1), ('single pass', 1), ('slidingwindow', 1), ('subarray sum equals k', 1), ('tle', 1), ('unordered map', 1), ('well-explained', 1)]"
1588,Sum of All Odd Length Subarrays,https://leetcode.com/problems/sum-of-all-odd-length-subarrays,"Given an array of positive integers arr, calculate the sum of all possible odd-length subarrays.

A subarray is a contiguous subsequence of the array.

Return the sum of all odd-length subarrays of arr.",['array'],Easy,754,85,54718,44701,[],"[('c++', 28), ('python 3', 26), ('java', 25), ('python', 21), ('javascript', 18), ('cpp', 14), ('easy-understanding', 11), ('python3', 10), ('c#', 9), ('java-solution', 9), ('prefix sum', 8), ('array', 6), ('c', 6), ('golang', 6), ('brute force', 5), ('c code', 5), ('cpp solution', 5), ('golang-solution', 4), ('ruby', 4), ('beginner friendly', 3), ('c programming', 3), ('constant space', 3), ('dp', 3), ('fast-solution', 3), ('go', 3), ('linear time', 3), ('rust', 3), ('simple', 3), ('sliding-window', 3), ('array nesting', 2), ('arrays', 2), ('easy', 2), ('easy-to-understand', 2), ('explained', 2), ('faster than 100.00', 2), ('go-solution', 2), ('javascript solution', 2), ('kotlin', 2), ('sliding window', 2), ('sliding window algorithm', 2), ('slidingwindow', 2), ('subarray', 2), ('#bruteforce', 1), ('#java', 1), ('#optimized', 1), ('arr', 1), ('brute-force', 1), ('c language', 1), ('c++ code', 1), ('clear explanation', 1), ('cpp easy', 1), ('declarative', 1), ('dynamic programming', 1), ('easytounderstand', 1), ('es6', 1), ('expalanation', 1), ('explanation', 1), ('explanation with logic', 1), ('fast', 1), ('functional', 1), ('functional-programming', 1), ('general solution', 1), ('iterators', 1), ('javascipt', 1), ('js', 1), ('linear-time', 1), ('logic explained clearly', 1), ('loop', 1), ('loops', 1), ('math', 1), ('nodejs', 1), ('noob', 1), ('on', 1), ('optimization', 1), ('prefix', 1), ('prefix-array', 1), ('prefixsum', 1), ('prefixsums', 1), ('python2', 1), ('pythonpython3', 1), ('ranges', 1), ('recursion', 1), ('reduce', 1), ('short', 1), ('simple solution', 1), ('slide window', 1), ('subarrays', 1), ('sum', 1), ('super simple', 1), ('swift', 1), ('two pointers', 1), ('two-pointers', 1), ('understandable', 1), ('very easy', 1), ('video explanation', 1), ('while', 1)]"
1569,Number of Ways to Reorder Array to Get Same BST,https://leetcode.com/problems/number-of-ways-to-reorder-array-to-get-same-bst,"Given an array nums that represents a permutation of integers from 1 to n. We are going to construct a binary search tree (BST) by inserting the elements of nums in order into an initially empty BST. Find the number of different ways to reorder nums so that the constructed BST is identical to that formed from the original array nums.

For example, given nums = [2,1,3], we will have 2 as the root, 1 as a left child, and 3 as a right child. The array [2,3,1] also yields the same BST but [3,2,1] yields a different BST.

Return the number of ways to reorder nums such that the BST formed is identical to the original BST formed from nums.

Since the answer may be very large, return it modulo 10^9 + 7.",['dynamic-programming'],Hard,189,27,11167,5576,[],"[('c++', 3), ('binary-tree', 2), ('c#', 2), ('recursion', 2), ('binary search tree', 1), ('clean code', 1), ('combinatorics', 1), ('combinatories', 1), ('cpp', 1), ('divide and conquer', 1), ('dynamic programming', 1), ('easy to understand', 1), ('easy-understanding', 1), ('functional programming', 1), ('java', 1), ('java-solution', 1), ('maths', 1), ('modular arithmetic', 1), ('modulo-arithmatic', 1), ('pascals triangle', 1), ('python', 1), ('python3', 1), ('scala', 1)]"
1568,Minimum Number of Days to Disconnect Island,https://leetcode.com/problems/minimum-number-of-days-to-disconnect-island,"Given a 2D grid consisting of 1s (land) and 0s (water).  An island is a maximal 4-directionally (horizontal or vertical) connected group of 1s.

The grid is said to be connected if we have exactly one island, otherwise is said disconnected.

In one day, we are allowed to change any single land cell (1) into a water cell (0).

Return the minimum number of days to disconnect the grid.",['greedy'],Hard,188,100,11525,5779,[],"[('bfs', 5), ('c++', 5), ('dfs', 5), ('articulation point', 4), ('connected components', 4), ('python', 4), ('brute force', 3), ('java', 3), ('javascript', 3), ('graph', 2), ('python3', 2), ('bridge', 1), ('dfs simple solution', 1), ('easy', 1), ('easy-understanding', 1), ('java-solution', 1), ('python 3', 1), ('tarjan', 1), ('tarjans algorithm', 1), ('union-find', 1), ('video explanation', 1)]"
1567,Maximum Length of Subarray With Positive Product,https://leetcode.com/problems/maximum-length-of-subarray-with-positive-product,"Given an array of integers nums, find the maximum length of a subarray where the product of all its elements is positive.

A subarray of an array is a consecutive sequence of zero or more values taken out of that array.

Return the maximum length of a subarray with positive product.",['greedy'],Medium,395,6,35660,13230,[],"[('c++', 13), ('dynamic programming', 9), ('python', 9), ('python 3', 9), ('cpp solution', 6), ('java', 6), ('cpp', 5), ('easy-understanding', 5), ('python3', 5), ('javascript', 4), ('greedy', 3), ('ruby', 3), ('2 pointer', 2), ('c#', 2), ('dp', 2), ('java-solution', 2), ('linear time', 2), ('simple solution', 2), ('sliding window', 2), ('two-pointers', 2), ('array', 1), ('beginner friendly', 1), ('bottom up', 1), ('c++ ac', 1), ('comments added', 1), ('constant space', 1), ('counter', 1), ('dp-techqique', 1), ('dynamic programmin', 1), ('dynamic-programming', 1), ('easiest', 1), ('easy', 1), ('explained', 1), ('explained solution', 1), ('fast-solution', 1), ('golang', 1), ('hash table', 1), ('java ac solution', 1), ('linear complexity', 1), ('linear-time', 1), ('maths', 1), ('one pass solution', 1), ('php', 1), ('php solution', 1), ('rust', 1), ('solution', 1), ('straightforward', 1), ('two pointer', 1), ('video explanation', 1), ('video-explanation', 1), ('window-sliding', 1)]"
1566,Detect Pattern of Length M Repeated K or More Times,https://leetcode.com/problems/detect-pattern-of-length-m-repeated-k-or-more-times,"Given an array of positive integers arr,  find a pattern of length m that is repeated k or more times.

A pattern is a subarray (consecutive sub-sequence) that consists of one or more values, repeated multiple times consecutively without overlapping. A pattern is defined by its length and the number of repetitions.

Return true if there exists a pattern of length m that is repeated k or more times, otherwise return false.",['array'],Easy,306,53,40856,17411,"[""Maximum Repeating Substring""]","[('c++', 16), ('cpp', 9), ('python3', 9), ('javascript', 8), ('java', 6), ('python', 6), ('python 3', 5), ('cpp solution', 4), ('easy-understanding', 4), ('c#', 3), ('iterative', 3), ('easy', 2), ('go-solution', 2), ('golang', 2), ('pattern matching', 2), ('ruby', 2), ('rust', 2), ('slidingwindow', 2), ('string', 2), ('swift', 2), ('0ms', 1), ('2 pointer', 1), ('array', 1), ('brute force', 1), ('c', 1), ('c++ solution', 1), ('code c', 1), ('detectkpatternoflenm', 1), ('easiest', 1), ('easy-to-understand', 1), ('fast-solution', 1), ('fastest', 1), ('go', 1), ('golang solution', 1), ('hashmap', 1), ('image', 1), ('iterator', 1), ('iteratve', 1), ('java simple', 1), ('java-solution', 1), ('js', 1), ('js javascript', 1), ('one-liner', 1), ('pattern', 1), ('pattern-matching', 1), ('php', 1), ('recursion', 1), ('regex', 1), ('repeated', 1), ('short', 1), ('simple', 1), ('slicing', 1), ('subsequence', 1), ('subsequences', 1), ('two pointers', 1), ('vector', 1)]"
1563,Stone Game V,https://leetcode.com/problems/stone-game-v,"There are several stones arranged in a row, and each stone has an associated value which is an integer given in the array stoneValue.

In each round of the game, Alice divides the row into two non-empty rows (i.e. left row and right row), then Bob calculates the value of each row which is the sum of the values of all the stones in this row. Bob throws away the row which has the maximum value, and Alice's score increases by the value of the remaining row. If the value of the two rows are equal, Bob lets Alice decide which row will be thrown away. The next round starts with the remaining row.

The game ends when there is only one stone remaining. Alice's is initially zero.

Return the maximum score that Alice can obtain.",['dynamic-programming'],Hard,210,45,21915,8750,"[""Stone Game"", ""Stone Game II"", ""Stone Game III"", ""Stone Game IV"", ""Stone Game VI"", ""Stone Game VII""]","[('dp', 5), ('dynamic programming', 5), ('memoization', 5), ('java', 4), ('python3', 4), ('c++', 3), ('python', 3), ('c#', 2), ('cpp', 2), ('easy-understanding', 2), ('javascript', 2), ('python 3', 2), ('top down dp', 2), ('100', 1), ('binary search', 1), ('binary-search', 1), ('dfs', 1), ('dfs solution', 1), ('dfs-in-order', 1), ('dp-programming', 1), ('dyanmic programming', 1), ('easy', 1), ('golang', 1), ('help me', 1), ('hindi', 1), ('js javascript', 1), ('prefix sum', 1), ('recurision', 1), ('recursive dp', 1), ('rust', 1), ('simple solution', 1), ('thinking process', 1), ('tle', 1), ('video explanation', 1), ('youtube', 1)]"
1562,Find Latest Group of Size M,https://leetcode.com/problems/find-latest-group-of-size-m,"Given an array arr that represents a permutation of numbers from 1 to n. You have a binary string of size n that initially has all its bits set to zero.

At each step i (assuming both the binary string and arr are 1-indexed) from 1 to n, the bit at position arr[i] is set to 1. You are given an integer m and you need to find the latest step at which there exists a group of ones of length m. A group of ones is a contiguous substring of 1s such that it cannot be extended in either direction.

Return the latest step at which there exists a group of ones of length exactly m. If no such group exists, return -1.",['binary-search'],Medium,330,74,24995,9938,[],"[('python', 10), ('c++', 8), ('python 3', 4), ('java', 3), ('sets', 3), ('union find', 3), ('binary search', 2), ('cpp', 2), ('dsu', 2), ('javascript', 2), ('nlogn', 2), ('python3', 2), ('tle', 2), ('treeset', 2), ('array', 1), ('c#', 1), ('c++ set', 1), ('confusion', 1), ('dfs-topdown', 1), ('dict', 1), ('disjoint-set', 1), ('easy-to-understand', 1), ('easy-understanding', 1), ('explanations', 1), ('golang', 1), ('horrible', 1), ('iteration', 1), ('java-solution', 1), ('optimal', 1), ('question need help', 1), ('scala', 1), ('simple', 1), ('simple clear c++ solution', 1), ('simple solution', 1), ('sortedcontainers', 1), ('string-operation', 1), ('unionfind', 1), ('video-explanation', 1)]"
1561,Maximum Number of Coins You Can Get,https://leetcode.com/problems/maximum-number-of-coins-you-can-get,"There are 3n piles of coins of varying size, you and your friends will take piles of coins as follows:


	In each step, you will choose any 3 piles of coins (not necessarily consecutive).
	Of your choice, Alice will pick the pile with the maximum number of coins.
	You will pick the next pile with maximum number of coins.
	Your friend Bob will pick the last pile.
	Repeat until there are no more piles of coins.


Given an array of integers piles where piles[i] is the number of coins in the ith pile.

Return the maximum number of coins which you can have.",['sort'],Medium,248,54,33331,25739,[],"[('c++', 19), ('java', 18), ('python 3', 17), ('cpp', 11), ('python', 11), ('sorting', 11), ('python3', 10), ('java-solution', 8), ('sorted array', 7), ('javascript', 6), ('sort', 6), ('c#', 3), ('easy', 3), ('explained solution', 3), ('simple', 3), ('simple solution', 3), ('swift', 3), ('cpp solution', 2), ('easy-understanding', 2), ('easytounderstand', 2), ('golang', 2), ('greedy', 2), ('greedy approach', 2), ('kotlin', 2), ('one-liner', 2), ('array-sort', 1), ('beginner friendly', 1), ('c', 1), ('clear explanation', 1), ('commented code', 1), ('counting', 1), ('detailed explanation', 1), ('east-to-understand', 1), ('easy to understand', 1), ('easy understanding', 1), ('easy-to-understand', 1), ('efficient', 1), ('explain', 1), ('explained', 1), ('functional', 1), ('functional-programming', 1), ('golang-solution', 1), ('greedy algorithm', 1), ('heap', 1), ('heaps', 1), ('intuitive', 1), ('kotlin-solution', 1), ('lambda expresses', 1), ('math-solution', 1), ('mediocre solution', 1), ('one pass solution', 1), ('pointer', 1), ('priority queue', 1), ('priority-queue', 1), ('quick sort', 1), ('rust', 1), ('scala', 1), ('simulation', 1), ('swift5', 1), ('two-pointer', 1), ('two-pointers', 1), ('typescript', 1), ('video explanation', 1)]"
1560,Most Visited Sector in  a Circular Track,https://leetcode.com/problems/most-visited-sector-in-a-circular-track,"Given an integer n and an integer array rounds. We have a circular track which consists of n sectors labeled from 1 to n. A marathon will be held on this track, the marathon consists of m rounds. The ith round starts at sector rounds[i - 1] and ends at sector rounds[i]. For example, round 1 starts at sector rounds[0] and ends at sector rounds[1]

Return an array of the most visited sectors sorted in ascending order.

Notice that you circulate the track in ascending order of sector numbers in the counter-clockwise direction (See the first example).",['array'],Easy,128,311,27030,15382,[],"[('c++', 11), ('python 3', 8), ('cpp', 7), ('python', 6), ('c#', 4), ('easy-to-understand', 3), ('easy-understanding', 3), ('java', 3), ('javascript', 3), ('go', 2), ('golang', 2), ('golang-solution', 2), ('java-solution', 2), ('python3', 2), ('ruby', 2), ('swift', 2), ('brute force', 1), ('bruteforce', 1), ('cpp solution', 1), ('detailed explanation', 1), ('easytounderstand', 1), ('explanations', 1), ('go-solution', 1), ('intuition', 1), ('js', 1), ('js javascript', 1), ('kotlin', 1), ('math', 1), ('mostvisitedsector', 1), ('prefix sum', 1), ('ptyhon3', 1), ('python2', 1), ('python3.8', 1), ('pythonpython3', 1), ('rust', 1), ('short code', 1)]"
1575,Count All Possible Routes,https://leetcode.com/problems/count-all-possible-routes,"You are given an array of distinct positive integers locations where locations[i] represents the position of city i. You are also given integers start, finish and fuel representing the starting city, ending city, and the initial amount of fuel you have, respectively.

At each step, if you are at city i, you can pick any city j such that j != i and 0 <= j < locations.length and move to city j. Moving from city i to city j reduces the amount of fuel you have by |locations[i] - locations[j]|. Please notice that |x| denotes the absolute value of x.

Notice that fuel cannot become negative at any point in time, and that you are allowed to visit any city more than once (including start and finish).

Return the count of all possible routes from start to finish.

Since the answer may be too large, return it modulo 10^9 + 7.",['dynamic-programming'],Hard,219,10,11525,6573,[],"[('dynamic programming', 11), ('c++', 7), ('memoization', 5), ('dp', 4), ('javascript', 4), ('java', 3), ('python 3', 3), ('cpp solution', 2), ('dfs solution', 2), ('easy-understanding', 2), ('python', 2), ('bottom up dp', 1), ('cpp', 1), ('decorator', 1), ('dfs', 1), ('easytounderstand', 1), ('graph', 1), ('memoziation', 1), ('naive solution', 1), ('python3', 1), ('recurrance', 1), ('recursion', 1), ('recursive dp', 1), ('recursive-dfs', 1), ('top down dp', 1)]"
1574,Shortest Subarray to be Removed to Make Array Sorted,https://leetcode.com/problems/shortest-subarray-to-be-removed-to-make-array-sorted,"Given an integer array arr, remove a subarray (can be empty) from arr such that the remaining elements in arr are non-decreasing.

A subarray is a contiguous subsequence of the array.

Return the length of the shortest subarray to remove.","['array', 'binary-search']",Medium,556,17,32731,11182,[],"[('c++', 8), ('two-pointers', 8), ('binary-search', 5), ('java', 5), ('python3', 5), ('cpp', 4), ('explained', 4), ('python', 4), ('dynamic programming', 3), ('python 3', 3), ('easy', 2), ('easy-understanding', 2), ('easytounderstand', 2), ('java-solution', 2), ('prefix', 2), ('understandable', 2), ('2 stacks', 1), ('c#', 1), ('c++11', 1), ('code for beginners', 1), ('commented code', 1), ('cpp solution', 1), ('easy-to-understand', 1), ('golang', 1), ('hint', 1), ('intuition', 1), ('iterative', 1), ('javascript', 1), ('kotlinvim', 1), ('logic explained clearly', 1), ('math based solution', 1), ('rajat', 1), ('shortestsubarraytoremove', 1), ('simple and elegant', 1), ('subarray', 1), ('suffix based', 1), ('tomakearraysorted', 1), ('two pointer technique', 1), ('with-comments', 1), ('with-explanation', 1)]"
1573,Number of Ways to Split a String,https://leetcode.com/problems/number-of-ways-to-split-a-string,"Given a binary string s (a string consisting only of '0's and '1's), we can split s into 3 non-empty strings s1, s2, s3 (s1+ s2+ s3 = s).

Return the number of ways s can be split such that the number of characters '1' is the same in s1, s2, and s3.

Since the answer may be too large, return it modulo 10^9 + 7.",['string'],Medium,267,44,40381,12672,"[""Split Array with Equal Sum""]","[('c++', 14), ('python', 9), ('easy-understanding', 8), ('explained', 6), ('python 3', 6), ('math', 5), ('maths', 5), ('cpp', 4), ('python3', 4), ('approach', 3), ('java', 3), ('javascript', 3), ('easytounderstand', 2), ('explained solution', 2), ('linear time', 2), ('one pass solution', 2), ('binary-search', 1), ('bitset', 1), ('c#', 1), ('clean code', 1), ('code for beginners', 1), ('combination', 1), ('combinatorics', 1), ('commented code', 1), ('constant space', 1), ('cpp solution', 1), ('easiest', 1), ('easiest solution', 1), ('easy', 1), ('easy to understand', 1), ('easy-to-understand', 1), ('faster than 100.00', 1), ('hashmap', 1), ('image-understanding', 1), ('intuitive', 1), ('java simple', 1), ('java-solution', 1), ('naive solution', 1), ('prefix sum', 1), ('pythonpython3', 1), ('rajat', 1), ('ruby', 1), ('string', 1), ('well-commented-code', 1)]"
1572,Matrix Diagonal Sum,https://leetcode.com/problems/matrix-diagonal-sum,"Given a square matrix mat, return the sum of the matrix diagonals.

Only include the sum of all the elements on the primary diagonal and all the elements on the secondary diagonal that are not part of the primary diagonal.",['array'],Easy,441,8,65571,50954,[],"[('java', 46), ('c++', 41), ('python', 38), ('javascript', 31), ('python 3', 29), ('easy-understanding', 26), ('cpp', 21), ('easy', 21), ('java-solution', 21), ('python3', 19), ('c#', 10), ('c', 8), ('easy-to-understand', 8), ('linear time', 8), ('matrix', 8), ('simple', 8), ('cpp easy', 6), ('cpp solution', 6), ('golang', 6), ('2d-array', 4), ('array', 4), ('easytounderstand', 4), ('golang-solution', 4), ('javascript solution', 4), ('one-liner', 4), ('100 speed', 3), ('constant space', 3), ('iterative', 3), ('js', 3), ('c++11', 2), ('clean code', 2), ('easy to understand', 2), ('es6', 2), ('explained', 2), ('explained solution', 2), ('explanation of logic', 2), ('fast and simple', 2), ('fastest', 2), ('functional-programming', 2), ('go', 2), ('kotlin', 2), ('linear', 2), ('linear time complexity', 2), ('scala', 2), ('typescript', 2), ('upvote', 2), ('#numpy', 1), ('#python3', 1), ('0ms', 1), ('100 faster runtime', 1), ('amazon sde', 1), ('best', 1), ('brute force to optimal', 1), ('c code', 1), ('c programming', 1), ('clear-understanding', 1), ('code comments', 1), ('codedecks', 1), ('comments added', 1), ('comments-added', 1), ('constant memory', 1), ('contest', 1), ('diagonal', 1), ('diagonal-sum', 1), ('divide and conquer', 1), ('easiest', 1), ('easy python', 1), ('easy to read', 1), ('easytoundersatand', 1), ('efficient solution', 1), ('explanation with code', 1), ('explanations4problem', 1), ('fast-solution', 1), ('faster', 1), ('foldleft', 1), ('for loops', 1), ('for-loop', 1), ('go-solution', 1), ('hash set', 1), ('index-array', 1), ('intutive', 1), ('iteration', 1), ('java ac solution', 1), ('java simple', 1), ('js javascript', 1), ('kotlin-solution', 1), ('leetcode 1572', 1), ('leetcode contest', 1), ('linear memory', 1), ('list comprehension', 1), ('loop', 1), ('matrix diagonal sum', 1), ('matrix-diagonal-sum', 1), ('matrix-problem-solving', 1), ('matrix-traverse', 1), ('mrmagician', 1), ('one pass solution', 1), ('php', 1), ('pointers', 1), ('python 2', 1), ('python2', 1), ('pythonpython3', 1), ('recursive', 1), ('ruby', 1), ('rust', 1), ('self explanatory', 1), ('short code', 1), ('simple solution', 1), ('simple-solution', 1), ('single loop', 1), ('sum', 1), ('swift', 1), ('ts', 1), ('two-pointers', 1), ('ultra simple', 1), ('understandable', 1), ('vector', 1), ('while-loop', 1)]"
1553,Minimum Number of Days to Eat N Oranges,https://leetcode.com/problems/minimum-number-of-days-to-eat-n-oranges,"There are n oranges in the kitchen and you decided to eat some of these oranges every day as follows:


	Eat one orange.
	If the number of remaining oranges (n) is divisible by 2 then you can eat  n/2 oranges.
	If the number of remaining oranges (n) is divisible by 3 then you can eat  2*(n/3) oranges.


You can only choose one of the actions per day.

Return the minimum number of days to eat n oranges.",['dynamic-programming'],Hard,413,33,49170,14747,[],"[('dp', 12), ('dynamic programming', 12), ('c++', 8), ('bfs', 7), ('python', 7), ('python 3', 6), ('java', 5), ('memoization', 4), ('python3', 4), ('explained', 3), ('top down dp', 3), ('cpp', 2), ('dfs', 2), ('dfs recursive', 2), ('logarithmic time', 2), ('100 speed', 1), ('beginner friendly', 1), ('bottom-up', 1), ('c#', 1), ('cache', 1), ('comments', 1), ('cpp solution', 1), ('dp-programming', 1), ('dp-techqique', 1), ('easy to read', 1), ('easy to understand', 1), ('easy-understanding', 1), ('explained solution', 1), ('explanation with code', 1), ('generator-expression', 1), ('golang', 1), ('golang-solution', 1), ('help needed', 1), ('java-solution', 1), ('python bfs', 1), ('python2', 1), ('recursive dp', 1), ('ruby', 1), ('simple and elegant', 1), ('simple c++', 1), ('swift', 1), ('video', 1), ('video explaination', 1)]"
1552,Magnetic Force Between Two Balls,https://leetcode.com/problems/magnetic-force-between-two-balls,"In universe Earth C-137, Rick discovered a special form of magnetic force between two balls if they are put in his new invented basket. Rick has n empty baskets, the ith basket is at position[i], Morty has m balls and needs to distribute the balls into the baskets such that the minimum magnetic force between any two balls is maximum.

Rick stated that magnetic force between two different balls at positions x and y is |x - y|.

Given the integer array position and the integer m. Return the required force.","['array', 'binary-search']",Medium,521,53,26568,13135,[],"[('binary-search', 21), ('c++', 10), ('binary search', 7), ('python', 7), ('easy-understanding', 6), ('cpp', 4), ('python 3', 4), ('cpp solution', 3), ('java', 3), ('javascript', 3), ('binarysearch', 2), ('python3', 2), ('#binary-search', 1), ('#binarysearch', 1), ('#intuition', 1), ('100 speed', 1), ('agorithms', 1), ('c#', 1), ('commented code', 1), ('cpp easy', 1), ('dynamic programming', 1), ('fast', 1), ('golang', 1), ('java-solution', 1), ('memoization', 1), ('optimal', 1), ('ruby', 1), ('simple clear c++ solution', 1), ('swift', 1), ('template', 1), ('video description', 1), ('video explanation', 1), ('video-explanation', 1)]"
1551,Minimum Operations to Make Array Equal,https://leetcode.com/problems/minimum-operations-to-make-array-equal,"You have an array arr of length n where arr[i] = (2 * i) + 1 for all valid values of i (i.e. 0 <= i < n).

In one operation, you can select two indices x and y where 0 <= x, y < n and subtract 1 from arr[x] and add 1 to arr[y] (i.e. perform arr[x] -=1 and arr[y] += 1). The goal is to make all the elements of the array equal. It is guaranteed that all the elements of the array can be made equal using some operations.

Given an integer n, the length of the array. Return the minimum number of operations needed to make all the elements of arr equal.",['math'],Medium,461,94,60291,48692,[],"[('c++', 47), ('java', 45), ('easy-understanding', 24), ('cpp', 23), ('math', 23), ('python', 18), ('python 3', 13), ('simple solution', 13), ('javascript', 12), ('one-liner', 11), ('simple', 11), ('easy', 10), ('java-solution', 10), ('explained', 9), ('constant time', 8), ('linear time', 8), ('python3', 8), ('c#', 6), ('cpp solution', 6), ('constant space', 4), ('easy-to-understand', 4), ('easytounderstand', 4), ('0ms', 3), ('arithmetic progression', 3), ('cpp easy', 3), ('fast-solution', 3), ('golang', 3), ('maths', 3), ('swift', 3), ('two-pointers', 3), ('video-explanation', 3), ('average', 2), ('beginner friendly', 2), ('clean code', 2), ('comments-added', 2), ('constant memory', 2), ('explanation of logic', 2), ('intuitive', 2), ('js javascript', 2), ('math solution', 2), ('optimal', 2), ('sequence', 2), ('sum', 2), ('typescript', 2), ('100 faster cpp', 1), ('2 pointer', 1), ('arithmetic-progression', 1), ('array', 1), ('awesome samriddhi', 1), ('basic-math', 1), ('beats 100 percent', 1), ('best explaination', 1), ('bitwise', 1), ('brute force', 1), ('c++ solution', 1), ('clear explanation', 1), ('clear-understanding', 1), ('commented', 1), ('cp', 1), ('csharp', 1), ('dynamic programming', 1), ('easy to understand', 1), ('easy to understandd', 1), ('easy understand', 1), ('easy understanding', 1), ('easytounderstamd', 1), ('easyunderstanding', 1), ('es6', 1), ('even odd', 1), ('examples', 1), ('explain', 1), ('explained solution', 1), ('explanations', 1), ('fast', 1), ('fast and simple', 1), ('faster than 100.00', 1), ('fastest', 1), ('go', 1), ('intuition', 1), ('java simple', 1), ('javascrip', 1), ('javascript solution', 1), ('kotlin', 1), ('less memory than 96.33', 1), ('less space', 1), ('linear', 1), ('linear memory', 1), ('linear-time', 1), ('math-solution', 1), ('mathematical solution', 1), ('mathematics', 1), ('mathematics formula', 1), ('o1 time', 1), ('oneliner', 1), ('operationtomakearrequal', 1), ('optimisation', 1), ('pencil and paper', 1), ('performance', 1), ('pyhton3', 1), ('python2', 1), ('ritik', 1), ('ruby', 1), ('short c++ code', 1), ('simple and fast', 1), ('simple python solution', 1), ('single-pass', 1), ('straight-forward', 1), ('video explanation', 1), ('visualization', 1)]"
1547,Minimum Cost to Cut a Stick,https://leetcode.com/problems/minimum-cost-to-cut-a-stick,"Given a wooden stick of length n units. The stick is labelled from 0 to n. For example, a stick of length 6 is labelled as follows:

Given an integer array cuts where cuts[i] denotes a position you should perform a cut at.

You should perform the cuts in order, you can change the order of the cuts as you wish.

The cost of one cut is the length of the stick to be cut, the total cost is the sum of costs of all cuts. When you cut a stick, it will be split into two smaller sticks (i.e. the sum of their lengths is the length of the stick before the cut). Please refer to the first example for a better explanation.

Return the minimum total cost of the cuts.",['dynamic-programming'],Hard,445,8,21044,11118,[],"[('dynamic programming', 12), ('c++', 7), ('dp', 6), ('java', 6), ('memoization', 4), ('python', 4), ('easy-understanding', 3), ('python 3', 3), ('python3', 3), ('top down dp', 3), ('#helpneeded', 1), ('arrays', 1), ('bottom-up', 1), ('bottoms-up', 1), ('bottomup', 1), ('c#', 1), ('divide and conquer', 1), ('easy', 1), ('explanation of logic', 1), ('indexes', 1), ('java-solution', 1), ('javascript', 1), ('kotlin', 1), ('recurrance', 1), ('recursive easy', 1), ('recusive', 1), ('scala', 1), ('short', 1), ('simple solution', 1), ('tle', 1)]"
1542,Find Longest Awesome Substring,https://leetcode.com/problems/find-longest-awesome-substring,"Given a string s. An awesome substring is a non-empty substring of s such that we can make any number of swaps in order to make it palindrome.

Return the length of the maximum length awesome substring of s.","['string', 'bit-manipulation']",Hard,328,7,15575,5720,[],"[('bit manipulation', 2), ('bit masking', 2), ('dynamic programming', 2), ('javascript', 2), ('bit mask', 1), ('bitmanipulation', 1), ('bitwise', 1), ('c#', 1), ('c++', 1), ('efficient', 1), ('fast', 1), ('hashmap', 1), ('memoization', 1), ('prefix sum', 1), ('prefix xor', 1), ('python', 1), ('python3', 1), ('recursion', 1), ('substrings', 1), ('top down approach', 1), ('top down dp', 1)]"
1545,Find Kth Bit in Nth Binary String,https://leetcode.com/problems/find-kth-bit-in-nth-binary-string,"Given two positive integers n and k, the binary string  Sn is formed as follows:


	S1 = ""0""
	Si = Si-1 + ""1"" + reverse(invert(Si-1)) for i > 1


Where + denotes the concatenation operation, reverse(x) returns the reversed string x, and invert(x) inverts all the bits in x (0 changes to 1 and 1 changes to 0).

For example, the first 4 strings in the above sequence are:


	S1 = ""0""
	S2 = ""011""
	S3 = ""0111001""
	S4 = ""011100110110001""


Return the kth bit in Sn. It is guaranteed that k is valid for the given n.",['string'],Medium,219,20,26648,15379,[],"[('c++', 12), ('recursion', 12), ('java', 10), ('python 3', 9), ('python', 8), ('cpp', 6), ('javascript', 6), ('easy-understanding', 5), ('python3', 4), ('bruteforce', 3), ('c#', 3), ('simple solution', 3), ('brute force', 2), ('dp', 2), ('easy-to-understand', 2), ('java-solution', 2), ('recursive', 2), ('stringbuilder', 2), ('swift', 2), ('0ms', 1), ('binary-search', 1), ('brute-force', 1), ('clean code', 1), ('comments', 1), ('cpp solution', 1), ('dynamic programming', 1), ('easy', 1), ('explanation of logic', 1), ('functions', 1), ('golang-solution', 1), ('hashmap', 1), ('intutive', 1), ('javascript recursive', 1), ('kotlin', 1), ('lol', 1), ('mapping', 1), ('memoization', 1), ('mywish', 1), ('optimized', 1), ('ptyhon3', 1), ('recursive approach', 1), ('recursive easy', 1), ('recusion', 1), ('scala', 1), ('self explanatory', 1), ('straight-forward', 1), ('string-operation', 1), ('ultra simple', 1), ('understandable', 1), ('upvote', 1), ('visualization', 1)]"
1544,Make The String Great,https://leetcode.com/problems/make-the-string-great,"Given a string s of lower and upper case English letters.

A good string is a string which doesn't have two adjacent characters s[i] and s[i + 1] where:


	0 <= i <= s.length - 2
	s[i] is a lower-case letter and s[i + 1] is the same letter but in upper-case or vice-versa.


To make the string good, you can choose two adjacent characters that make the string bad and remove them. You can keep doing this until the string becomes good.

Return the string after making it good. The answer is guaranteed to be unique under the given constraints.

Notice that an empty string is also good.","['string', 'stack']",Easy,416,41,56879,31567,[],"[('c++', 44), ('stack', 36), ('python', 26), ('python 3', 25), ('java', 22), ('cpp', 20), ('stacks', 14), ('cpp solution', 10), ('easy-understanding', 10), ('javascript', 9), ('python3', 9), ('easy', 8), ('java-solution', 7), ('recursion', 7), ('c#', 6), ('simple', 6), ('comments', 4), ('easytounderstand', 4), ('simple solution', 4), ('stack-based', 4), ('c', 3), ('easy-to-understand', 3), ('php', 3), ('recursive', 3), ('string', 3), ('stringbuilder', 3), ('swift', 3), ('1ms', 2), ('ascii', 2), ('c code', 2), ('c++ solution', 2), ('c++11', 2), ('clean code', 2), ('explained', 2), ('explanation of logic', 2), ('fast and simple', 2), ('fasterthan100', 2), ('js', 2), ('onepass', 2), ('ruby', 2), ('solution', 2), ('0ms', 1), ('100 speed', 1), ('1ms runtime', 1), ('4 liner', 1), ('4ms', 1), ('ascii-art', 1), ('beginner friendly', 1), ('brute force', 1), ('c# solutions', 1), ('c++ easy to understand', 1), ('constantspace', 1), ('cpp doubt', 1), ('deque', 1), ('easy java solution', 1), ('easy understand', 1), ('easy-understand', 1), ('efficient', 1), ('expalanation', 1), ('explaination', 1), ('explained solution', 1), ('explanation with logic', 1), ('explanatory comments', 1), ('fast', 1), ('fast-solution', 1), ('fastest', 1), ('golang', 1), ('good variable names', 1), ('inplace', 1), ('intuitive', 1), ('intutive', 1), ('iteratively', 1), ('java solution', 1), ('javasccript', 1), ('js javascript', 1), ('kotlin', 1), ('list', 1), ('makethestringgreat', 1), ('multiple solution', 1), ('nostack', 1), ('one pass', 1), ('optimised', 1), ('php solution', 1), ('pointer', 1), ('recursively', 1), ('rust', 1), ('scala', 1), ('self explanatory', 1), ('simple-solution', 1), ('solution-sharing-cpp', 1), ('space-complexity', 1), ('straightforward', 1), ('string manipulation', 1), ('string parsing', 1), ('stringbuilder in java', 1), ('strings', 1), ('strings manipulation', 1), ('structured code', 1), ('substr', 1), ('time-complexity', 1), ('two-pointers', 1), ('ultra easy', 1), ('upvote', 1), ('while loop', 1), ('while-loop', 1)]"
1559,Detect Cycles in 2D Grid,https://leetcode.com/problems/detect-cycles-in-2d-grid,"Given a 2D array of characters grid of size m x n, you need to find if there exists any cycle consisting of the same value in grid.

A cycle is a path of length 4 or more in the grid that starts and ends at the same cell. From a given cell, you can move to one of the cells adjacent to it - in one of the four directions (up, down, left, or right), if it has the same value of the current cell.

Also, you cannot move to the cell that you visited in your last move. For example, the cycle (1, 1) -> (1, 2) -> (1, 1) is invalid because from (1, 2) we visited (1, 1) which was the last visited cell.

Return true if any cycle of the same value exists in grid, otherwise, return false.",['depth-first-search'],Hard,273,9,22344,9977,[],"[('dfs', 20), ('c++', 9), ('python', 9), ('java', 8), ('cpp', 6), ('javascript', 6), ('python 3', 6), ('union find', 6), ('c#', 4), ('dfs solution', 3), ('easy', 3), ('python3', 3), ('bfs', 2), ('cycle detection', 2), ('easy-understanding', 2), ('java-solution', 2), ('1visitor', 1), ('backtracking', 1), ('c++17', 1), ('comments added', 1), ('concise', 1), ('connected components', 1), ('cpp solution', 1), ('depth first search', 1), ('detectcyclesin2dgrid', 1), ('dfs simple solution', 1), ('dfs traversal', 1), ('dfs-recursive', 1), ('dfs-topdown', 1), ('dfsbfs simple version', 1), ('disjoint union set', 1), ('easy-to-understand', 1), ('explained', 1), ('explanation of logic', 1), ('explanations', 1), ('go', 1), ('golang', 1), ('golang-solution', 1), ('kotlin', 1), ('recursion', 1), ('recursive', 1), ('simpe', 1), ('union-find', 1), ('video explanation', 1), ('video-explanation', 1)]"
1558,Minimum Numbers of Function Calls to Make Target Array,https://leetcode.com/problems/minimum-numbers-of-function-calls-to-make-target-array,"Your task is to form an integer array nums from an initial array of zeros arr that is the same size as nums.

Return the minimum number of function calls to make nums from arr.

The answer is guaranteed to fit in a 32-bit signed integer.",['greedy'],Medium,254,15,17706,11208,[],"[('c++', 9), ('java', 9), ('python', 6), ('greedy', 5), ('python 3', 5), ('java-solution', 4), ('cpp', 3), ('easy-understanding', 3), ('golang', 3), ('javascript', 3), ('python3', 3), ('bit manipulation', 2), ('cpp solution', 2), ('golang-solution', 2), ('linear time', 2), ('arrays', 1), ('binary', 1), ('bit-shift', 1), ('bitset', 1), ('brute force', 1), ('brute-force', 1), ('bug report', 1), ('built-in-function', 1), ('c#', 1), ('clean code', 1), ('commented code', 1), ('commentedcppcode', 1), ('constant memory', 1), ('counting', 1), ('dp', 1), ('easy', 1), ('easytounderstand', 1), ('error in question', 1), ('explained', 1), ('explained solution', 1), ('intuition based solution', 1), ('rajat', 1), ('recursive easy', 1), ('simple clear c++ solution', 1), ('simple solution', 1), ('simple-explanation', 1), ('straight-forward', 1), ('swift', 1), ('video explanation', 1), ('whatever', 1)]"
1557,Minimum Number of Vertices to Reach All Nodes,https://leetcode.com/problems/minimum-number-of-vertices-to-reach-all-nodes,"Given a directed acyclic graph, with n vertices numbered from 0 to n-1, and an array edges where edges[i] = [fromi, toi] represents a directed edge from node fromi to node toi.

Find the smallest set of vertices from which all nodes in the graph are reachable. It's guaranteed that a unique solution exists.

Notice that you can return the vertices in any order.",['graph'],Medium,545,39,34694,26295,[],"[('c++', 22), ('graph', 19), ('python 3', 17), ('java', 15), ('python', 14), ('indegree', 13), ('javascript', 13), ('cpp', 9), ('python3', 8), ('easy-understanding', 6), ('simple', 5), ('c#', 4), ('explained', 4), ('golang', 4), ('in-degree', 4), ('one-liner', 4), ('set', 4), ('easy', 3), ('easytounderstand', 3), ('explained solution', 3), ('simple solution', 3), ('cpp solution', 2), ('dfs', 2), ('fast', 2), ('java-solution', 2), ('linear time', 2), ('map', 2), ('straightforward', 2), ('typescript', 2), ('1-line', 1), ('1-liner', 1), ('100 faster', 1), ('2-line solution', 1), ('array', 1), ('bfs', 1), ('c', 1), ('c code', 1), ('clean code', 1), ('commented code', 1), ('comments', 1), ('comments added', 1), ('comments-added', 1), ('concise-solution', 1), ('count', 1), ('cycle', 1), ('dag', 1), ('dfs solution', 1), ('dsa', 1), ('easy understand', 1), ('easy-to-understand', 1), ('edges', 1), ('efficient solution', 1), ('example', 1), ('expalanation', 1), ('fast and simple', 1), ('fastest', 1), ('golang-solution', 1), ('intuitive', 1), ('js', 1), ('js javascript', 1), ('kotlin', 1), ('linear', 1), ('optimal', 1), ('rajat', 1), ('ruby', 1), ('sets', 1), ('straight-forward', 1), ('streams', 1), ('topological-sorting', 1), ('union find', 1), ('vector', 1), ('video explanation', 1)]"
1556,Thousand Separator,https://leetcode.com/problems/thousand-separator,"Given an integer n, add a dot (""."") as the thousands separator and return it in string format.",['string'],Easy,205,8,39687,22657,[],"[('c++', 33), ('java', 22), ('python', 18), ('python 3', 16), ('cpp', 14), ('python3', 14), ('javascript', 13), ('simple solution', 9), ('string', 9), ('easy-understanding', 7), ('java-solution', 7), ('c#', 5), ('golang', 4), ('iterative', 4), ('simple', 4), ('swift', 4), ('c', 3), ('easy', 3), ('golang-solution', 3), ('one-liner', 3), ('100 speed', 2), ('c code', 2), ('explained', 2), ('go', 2), ('go-solution', 2), ('javascript solution', 2), ('js', 2), ('kotlin', 2), ('modulo', 2), ('regex', 2), ('straightforward', 2), ('stringbuilder', 2), ('stringbuilder in java', 2), ('strings', 2), ('stringstream', 2), ('video explanation', 2), ('0 ms solution', 1), ('0ms', 1), ('100 faster', 1), ('100 memory', 1), ('2pointers', 1), ('4ms', 1), ('ac', 1), ('beats 100', 1), ('begginerfriendly', 1), ('beginner friendly', 1), ('brute force', 1), ('clean code', 1), ('cpp easy', 1), ('csharp', 1), ('easy understanding', 1), ('easy-to-understand', 1), ('explain', 1), ('explaination', 1), ('fast', 1), ('fast and simple', 1), ('fasterthan100', 1), ('for-loop', 1), ('functional', 1), ('help needed', 1), ('integer to string', 1), ('intutive', 1), ('itereative', 1), ('java string builder', 1), ('javascrip', 1), ('js javascript', 1), ('linked-list', 1), ('no-insert-used', 1), ('optimal', 1), ('php', 1), ('python2', 1), ('pythonpython3', 1), ('queue', 1), ('readable', 1), ('reverse', 1), ('ruby', 1), ('runtime', 1), ('rust', 1), ('self explanatory', 1), ('simple-solution', 1), ('solution', 1), ('space', 1), ('string builder', 1), ('string-operation', 1), ('stringbuffer', 1), ('stringto int', 1), ('ultra easy', 1), ('upvote', 1), ('vector', 1), ('very easy to understand', 1)]"
1537,Get the Maximum Score,https://leetcode.com/problems/get-the-maximum-score,"You are given two sorted arrays of distinct integers nums1 and nums2.

A valid path is defined as follows:


	Choose array nums1 or nums2 to traverse (from index-0).
	Traverse the current array from left to right.
	If you are reading any value that is present in nums1 and nums2 you are allowed to change your path to the other array. (Only one repeated value is considered in the valid path).


Score is defined as the sum of uniques values in a valid path.

Return the maximum score you can obtain of all possible valid paths.

Since the answer may be too large, return it modulo 10^9 + 7.",['dynamic-programming'],Hard,334,22,27837,10204,[],"[('c++', 10), ('java', 10), ('easy-understanding', 9), ('two-pointers', 9), ('python', 6), ('dp', 5), ('cpp', 4), ('cpp solution', 4), ('dynamic programming', 4), ('python 3', 3), ('two pointer approach', 3), ('two pointers', 3), ('linear time', 2), ('merge sort', 2), ('backtracking', 1), ('beats 100', 1), ('bfs', 1), ('c#', 1), ('clean code', 1), ('clean solution', 1), ('constant memory', 1), ('constant space', 1), ('dag', 1), ('dfs-iterative', 1), ('dynamic-programming', 1), ('easy to understand', 1), ('easytounderstand', 1), ('explained', 1), ('fast', 1), ('greedy', 1), ('hindi', 1), ('howto', 1), ('intuition', 1), ('javascript', 1), ('kotlin', 1), ('memoization', 1), ('merge', 1), ('priority queue', 1), ('python3', 1), ('simple clear c++ solution', 1), ('simple solution', 1), ('thinking process', 1), ('topological-sort', 1), ('two pointer', 1), ('video explanation', 1), ('video-explanation', 1), ('visualization', 1), ('youtube', 1)]"
1536,Minimum Swaps to Arrange a Binary Grid,https://leetcode.com/problems/minimum-swaps-to-arrange-a-binary-grid,"Given an n x n binary grid, in one step you can choose two adjacent rows of the grid and swap them.

A grid is said to be valid if all the cells above the main diagonal are zeros.

Return the minimum number of steps needed to make the grid valid, or -1 if the grid cannot be valid.

The main diagonal of a grid is the diagonal that starts at cell (1, 1) and ends at cell (n, n).",['greedy'],Medium,285,53,19998,8732,[],"[('greedy', 12), ('java', 10), ('c++', 5), ('greedy approach', 5), ('java-solution', 5), ('python 3', 4), ('javascript', 3), ('python', 3), ('c#', 2), ('100 space', 1), ('100 time', 1), ('1ms runtime', 1), ('binary grid', 1), ('binary indexed tree', 1), ('bubble sort', 1), ('c++ code', 1), ('cpp', 1), ('cpp solution', 1), ('description', 1), ('easy-to-understand', 1), ('efficient', 1), ('fenwick-tree', 1), ('golang', 1), ('implementation', 1), ('minimum swaps to arrange', 1), ('n square complexity', 1), ('python3', 1), ('swift', 1)]"
1535,Find the Winner of an Array Game,https://leetcode.com/problems/find-the-winner-of-an-array-game,"Given an integer array arr of distinct integers and an integer k.

A game will be played between the first two elements of the array (i.e. arr[0] and arr[1]). In each round of the game, we compare arr[0] with arr[1], the larger integer wins and remains at position 0 and the smaller integer moves to the end of the array. The game ends when an integer wins k consecutive rounds.

Return the integer which will win the game.

It is guaranteed that there will be a winner of the game.",['array'],Medium,333,24,40524,19314,[],"[('java', 21), ('c++', 15), ('java-solution', 8), ('javascript', 8), ('python', 7), ('single pass', 7), ('cpp', 6), ('easy', 5), ('easytounderstand', 5), ('linear time', 5), ('python 3', 5), ('simple solution', 4), ('c#', 3), ('deque', 3), ('easy-understanding', 3), ('2 pointers', 2), ('comments', 2), ('constant space', 2), ('cpp solution', 2), ('dictonary', 2), ('explained', 2), ('go', 2), ('golang', 2), ('js', 2), ('one pass', 2), ('python3', 2), ('array nesting', 1), ('begginer friendly', 1), ('c', 1), ('c++ code', 1), ('cpp easy', 1), ('easy to understand', 1), ('easy understanding', 1), ('easy-to-understand', 1), ('easy-undestand', 1), ('effecient', 1), ('explanation', 1), ('find the winner', 1), ('go-solution', 1), ('implementation', 1), ('intuitional', 1), ('iterative', 1), ('iterative way', 1), ('java simple', 1), ('js javascript', 1), ('kotlin', 1), ('less space', 1), ('linear search', 1), ('linear-time', 1), ('linked-list', 1), ('medium', 1), ('one-loop', 1), ('onepass', 1), ('optimal', 1), ('python deque', 1), ('pythonpython3', 1), ('queue', 1), ('rajawatbanna', 1), ('ruby', 1), ('rust', 1), ('short c++ code', 1), ('simple', 1), ('simple clear c++ solution', 1), ('stacks', 1), ('straight forward', 1), ('sweet', 1), ('two-pointers', 1), ('two-solutions', 1), ('video explaination', 1), ('video explanation', 1), ('winnerofarraygame', 1)]"
1534,Count Good Triplets,https://leetcode.com/problems/count-good-triplets,"Given an array of integers arr, and three integers a, b and c. You need to find the number of good triplets.

A triplet (arr[i], arr[j], arr[k]) is good if the following conditions are true:


	0 <= i < j < k < arr.length
	|arr[i] - arr[j]| <= a
	|arr[j] - arr[k]| <= b
	|arr[i] - arr[k]| <= c


Where |x| denotes the absolute value of x.

Return the number of good triplets.",['array'],Easy,222,603,62407,50079,[],"[('brute force', 27), ('c++', 27), ('python 3', 21), ('python', 17), ('java', 16), ('javascript', 14), ('python3', 11), ('clean code', 9), ('cpp', 9), ('c', 8), ('cpp solution', 8), ('easy-understanding', 7), ('c#', 6), ('simple solution', 6), ('golang', 5), ('go-solution', 4), ('golang-solution', 4), ('swift', 4), ('array', 3), ('count good triplet', 3), ('easytounderstand', 3), ('java-solution', 3), ('javascript solution', 3), ('brute-force', 2), ('c programming', 2), ('easy', 2), ('easy-to-understand', 2), ('fastest', 2), ('go', 2), ('one line', 2), ('one-liner', 2), ('optimized', 2), ('ruby', 2), ('simple', 2), ('triplet', 2), ('#java', 1), ('100 space', 1), ('92.31', 1), ('absolute value', 1), ('best-solution-ever', 1), ('bf', 1), ('binary indexed tree', 1), ('c code', 1), ('c++ code', 1), ('comments', 1), ('complex', 1), ('defaultdict', 1), ('dictonary', 1), ('easy-understand', 1), ('explanation', 1), ('explanatory comments', 1), ('fast and simple', 1), ('faster', 1), ('fenwick', 1), ('for loops', 1), ('functional programming', 1), ('generator expression', 1), ('good variable names', 1), ('iteration', 1), ('iterative way', 1), ('itertools', 1), ('java solution', 1), ('javascrip', 1), ('javascript brute force', 1), ('list comprehension', 1), ('loops', 1), ('naive solution', 1), ('o n3', 1), ('o3', 1), ('o3n', 1), ('optimal', 1), ('php', 1), ('php solution', 1), ('pruning', 1), ('rajawatbanna', 1), ('rust', 1), ('scala', 1), ('set', 1), ('simple java solution', 1), ('simpler', 1), ('solution-python', 1), ('structured code', 1), ('sum', 1), ('swift5', 1), ('three pointers', 1), ('video explanation', 1)]"
1530,Number of Good Leaf Nodes Pairs,https://leetcode.com/problems/number-of-good-leaf-nodes-pairs,"Given the root of a binary tree and an integer distance. A pair of two different leaf nodes of a binary tree is said to be good if the length of the shortest path between them is less than or equal to distance.

Return the number of good leaf node pairs in the tree.","['tree', 'depth-first-search']",Medium,679,13,28965,16429,[],"[('c++', 24), ('dfs', 13), ('java', 11), ('dfs recursive', 9), ('bfs', 8), ('javascript', 7), ('python', 7), ('python 3', 6), ('map', 4), ('cpp', 3), ('dfs solution', 3), ('graph', 3), ('hashmap', 3), ('python3', 3), ('recursion', 3), ('backtracking', 2), ('binary-tree', 2), ('depth first search', 2), ('dfs simple solution', 2), ('easy', 2), ('golang', 2), ('post-order-traversal', 2), ('postorder-traversal', 2), ('ruby', 2), ('tree traversal', 2), ('brute force', 1), ('c#', 1), ('dfs-bfs', 1), ('dfs-in-order', 1), ('dfs-tree', 1), ('dfs+bfs', 1), ('easy to understand', 1), ('easy-understanding', 1), ('greedy', 1), ('huffman encoding', 1), ('intuition based solution', 1), ('intuitive', 1), ('java-solution', 1), ('javascript solution', 1), ('lca', 1), ('most efficient solution', 1), ('path comparison', 1), ('post-order', 1), ('postoder-iterative', 1), ('postorder', 1), ('postorder traversal', 1), ('python2', 1), ('pythonpython3', 1), ('recurssion', 1), ('root to leaf path', 1), ('tree', 1), ('tree-traversal', 1), ('unordered map', 1), ('video explanation', 1)]"
1529,Bulb Switcher IV,https://leetcode.com/problems/bulb-switcher-iv,"There is a room with n bulbs, numbered from 0 to n-1, arranged in a row from left to right. Initially all the bulbs are turned off.

Your task is to obtain the configuration represented by target where target[i] is '1' if the i-th bulb is turned on and is '0' if it is turned off.

You have a switch to flip the state of the bulb, a flip operation is defined as follows:


	Choose any bulb (index i) of your current configuration.
	Flip each bulb from index i to n-1.


When any bulb is flipped it means that if it is 0 it changes to 1 and if it is 1 it changes to 0.

Return the minimum number of flips required to form target.",['string'],Medium,377,19,31496,22354,[],"[('c++', 28), ('python', 16), ('java', 15), ('easy', 14), ('python 3', 13), ('cpp', 12), ('java-solution', 11), ('linear time', 10), ('javascript', 8), ('easy-understanding', 7), ('greedy', 5), ('greedy approach', 5), ('python3', 5), ('c#', 4), ('cpp solution', 3), ('easy-undestand', 3), ('java ac solution', 3), ('kotlin', 3), ('string', 3), ('1-line', 2), ('beginners', 2), ('cpp easy', 2), ('easy code', 2), ('easy understanding', 2), ('explained solution', 2), ('golang', 2), ('linear', 2), ('math', 2), ('pythonpython3', 2), ('rust', 2), ('simple solution', 2), ('single pass', 2), ('#javascript', 1), ('100 space', 1), ('100 speed', 1), ('5 liner', 1), ('array', 1), ('basic', 1), ('bfs', 1), ('binary', 1), ('bitwise operation', 1), ('brute force', 1), ('bulb', 1), ('bulbswitcheriv', 1), ('conditional', 1), ('cpp soltuion', 1), ('easy understand', 1), ('easy-to-understand', 1), ('easysolution', 1), ('efficient', 1), ('es6', 1), ('even odd', 1), ('explained', 1), ('explanation with code', 1), ('explanation with logic', 1), ('fastest', 1), ('flip', 1), ('functional programming', 1), ('greedy algorithm', 1), ('javascript solution', 1), ('kotlin-solution', 1), ('linear search', 1), ('linear-time', 1), ('loop', 1), ('no extra space', 1), ('one pass solution', 1), ('one-liner', 1), ('php', 1), ('python2', 1), ('regex', 1), ('ruby', 1), ('scala', 1), ('silly', 1), ('simplesolution', 1), ('single array', 1), ('space 100', 1), ('time 100', 1), ('video explanation', 1), ('werfree', 1), ('xor', 1)]"
1528,Shuffle String,https://leetcode.com/problems/shuffle-string,"Given a string s and an integer array indices of the same length.

The string s will be shuffled such that the character at the ith position moves to indices[i] in the shuffled string.

Return the shuffled string.",['sort'],Easy,571,153,125664,107666,[],"[('python 3', 53), ('python', 52), ('java', 41), ('c++', 36), ('javascript', 23), ('python3', 21), ('easy-understanding', 20), ('java-solution', 17), ('cpp', 16), ('easy', 16), ('c', 9), ('cpp solution', 9), ('easy-to-understand', 9), ('c#', 8), ('string', 8), ('swift', 7), ('clean code', 5), ('easytounderstand', 4), ('javascript solution', 4), ('js', 4), ('kotlin', 4), ('c programming', 3), ('cycle sort', 3), ('efficient solution', 3), ('fast-solution', 3), ('golang', 3), ('one-liner', 3), ('simple', 3), ('simple solution', 3), ('stringbuilder', 3), ('beginner', 2), ('beginner friendly', 2), ('c code', 2), ('character', 2), ('cpp easy', 2), ('easiest', 2), ('explained', 2), ('fast', 2), ('hash table', 2), ('help needed', 2), ('java ac solution', 2), ('join', 2), ('linear time', 2), ('list', 2), ('map', 2), ('python2', 2), ('python3.8', 2), ('reduce', 2), ('ruby', 2), ('sort', 2), ('stringbuilder in java', 2), ('0ms', 1), ('1-line', 1), ('100 faster runtime', 1), ('100 memory', 1), ('100 space', 1), ('100 speed', 1), ('1ms', 1), ('1ms runtime', 1), ('2ms', 1), ('3 lines', 1), ('3lines', 1), ('array', 1), ('arrays', 1), ('asahiocean', 1), ('asm', 1), ('basic', 1), ('best', 1), ('brute force', 1), ('c++ code', 1), ('c++ solution', 1), ('c++11', 1), ('chars', 1), ('clean solution', 1), ('clear', 1), ('constant memory', 1), ('constant space', 1), ('cpp-easy', 1), ('cpp-solution', 1), ('cyclic sort', 1), ('cyclic-sort', 1), ('dictionary', 1), ('dictionary comprehension', 1), ('dictionary features', 1), ('dictonary', 1), ('double-pointer', 1), ('double-pointers', 1), ('easiest solution', 1), ('easy python', 1), ('easy to read', 1), ('easy to understant', 1), ('easy understand', 1), ('easy understanding', 1), ('easy-solution', 1), ('easy-undestand', 1), ('easysolution', 1), ('efficient', 1), ('enumerate', 1), ('explain', 1), ('explained solution', 1), ('explanation', 1), ('explanation with logic', 1), ('explanatory comments', 1), ('facebook', 1), ('fast solution', 1), ('faster than 99.14', 1), ('faster than 99.86', 1), ('fasterthan100', 1), ('for loop', 1), ('functional programming', 1), ('github', 1), ('go-solution', 1), ('golang-solution', 1), ('good variable names', 1), ('hash', 1), ('hashmap', 1), ('indexof', 1), ('indices', 1), ('iteration', 1), ('java solution', 1), ('javascrip', 1), ('kotlin-solution', 1), ('kotlinvim', 1), ('linear complexity', 1), ('list-comprehension', 1), ('logical thinking', 1), ('loops', 1), ('matching elements', 1), ('multiple solutions', 1), ('one pass', 1), ('optimal', 1), ('ordered map', 1), ('php', 1), ('priority queue', 1), ('problem understanding', 1), ('python solution', 1), ('pythonpython3', 1), ('recursive', 1), ('rust', 1), ('scala', 1), ('selection sort', 1), ('self-explanatory', 1), ('simple and elegant', 1), ('simpler', 1), ('solution', 1), ('solved', 1), ('string-operation', 1), ('string-to-array', 1), ('stringbuffer', 1), ('strings', 1), ('structured code', 1), ('swap', 1), ('swift5', 1), ('test-case', 1), ('test-cases', 1), ('typescript', 1), ('walmart', 1), ('well-commented', 1), ('whileloop', 1), ('with comments', 1), ('zip', 1), ('zip+hashing', 1)]"
1546,Maximum Number of Non-Overlapping Subarrays With Sum Equals Target,https://leetcode.com/problems/maximum-number-of-non-overlapping-subarrays-with-sum-equals-target,"Given an array nums and an integer target.

Return the maximum number of non-empty non-overlapping subarrays such that the sum of values in each subarray is equal to target.",['dynamic-programming'],Medium,484,7,31228,13788,[],"[('c++', 9), ('prefix sum', 9), ('python', 9), ('dp', 5), ('java', 5), ('greedy', 4), ('hashmap', 4), ('javascript', 4), ('python 3', 4), ('cpp', 3), ('cpp solution', 2), ('easy-understanding', 2), ('hashset', 2), ('java-solution', 2), ('python3', 2), ('beginnerfriendly', 1), ('cpp easy', 1), ('dictonary', 1), ('easy to read', 1), ('easy to understand', 1), ('explained', 1), ('explained solution', 1), ('golang', 1), ('greedy approach', 1), ('hash table', 1), ('intuitive', 1), ('javascript solution', 1), ('kotlin', 1), ('linear-time', 1), ('map', 1), ('memoization', 1), ('one-pass', 1), ('prefixsum', 1), ('presum', 1), ('pythonpython3', 1), ('simple', 1), ('straightforward', 1), ('subarray sum equals k', 1), ('swift', 1), ('top down dp', 1), ('unordered-set', 1), ('video', 1)]"
1541,Minimum Insertions to Balance a Parentheses String,https://leetcode.com/problems/minimum-insertions-to-balance-a-parentheses-string,"Given a parentheses string s containing only the characters '(' and ')'. A parentheses string is balanced if:


	Any left parenthesis '(' must have a corresponding two consecutive right parenthesis '))'.
	Left parenthesis '(' must go before the corresponding two consecutive right parenthesis '))'.


In other words, we treat '(' as openning parenthesis and '))' as closing parenthesis.

For example, ""())"", ""())(())))"" and ""(())())))"" are balanced, "")()"", ""()))"" and ""(()))"" are not balanced.

You can insert the characters '(' and ')' at any position of the string to balance it if needed.

Return the minimum number of insertions needed to make s balanced.","['string', 'stack']",Medium,305,71,27628,11947,[],"[('c++', 19), ('python 3', 9), ('linear time', 7), ('stacks', 7), ('stack', 6), ('cpp', 5), ('javascript', 5), ('python', 5), ('constant space', 4), ('java', 4), ('cpp solution', 3), ('easytounderstand', 2), ('if-else', 2), ('java-solution', 2), ('python3', 2), ('single pass', 2), ('stack-based', 2), ('string', 2), ('without stack', 2), ('c#', 1), ('commentedcppcode', 1), ('constant memory', 1), ('easy-to-understand', 1), ('easy-understanding', 1), ('explained', 1), ('explained solution', 1), ('golang', 1), ('iterative', 1), ('linear time complexity', 1), ('mininsertionstobalance', 1), ('no extra space', 1), ('parenthesesstring', 1), ('python2', 1), ('readable', 1), ('simple solution', 1), ('step by step', 1), ('swift', 1), ('thinking out loud', 1), ('unclear', 1), ('video', 1), ('video interview', 1), ('video-explanation', 1), ('youtube', 1)]"
1540,Can Convert String in K Moves,https://leetcode.com/problems/can-convert-string-in-k-moves,"Given two strings s and t, your goal is to convert s into t in k moves or less.

During the ith (1 <= i <= k) move you can:


	Choose any index j (1-indexed) from s, such that 1 <= j <= s.length and j has not been chosen in any previous move, and shift the character at that index i times.
	Do nothing.


Shifting a character means replacing it by the next letter in the alphabet (wrapping around so that 'z' becomes 'a'). Shifting a character by i means applying the shift operations i times.

Remember that any index j can be picked at most once.

Return true if it's possible to convert s into t in no more than k moves, otherwise return false.","['string', 'greedy']",Medium,209,166,32702,10254,[],"[('c++', 18), ('python', 10), ('linear time', 8), ('cpp', 6), ('hashmap', 6), ('simple solution', 5), ('c#', 4), ('python 3', 4), ('cpp solution', 2), ('dp', 2), ('explaination', 2), ('explained', 2), ('java', 2), ('java-solution', 2), ('javascript', 2), ('map', 2), ('python3', 2), ('array', 1), ('begineer friendly', 1), ('convertstringinkmoves', 1), ('dictionary features', 1), ('dictonary', 1), ('downvote', 1), ('easy', 1), ('easy-to-understand', 1), ('easytounderstand', 1), ('expalanation', 1), ('explained solution', 1), ('explanation of logic', 1), ('golang', 1), ('greedy', 1), ('hashmap and sorting', 1), ('help needed', 1), ('javascript solution', 1), ('linear solution', 1), ('live coding', 1), ('memoization', 1), ('modulas', 1), ('priority queue', 1), ('question-not-clear', 1), ('rust', 1), ('simple', 1), ('simple clear c++ solution', 1), ('swift', 1), ('thinking out loud', 1), ('unordered map', 1), ('video', 1), ('video interview', 1), ('video-explanation', 1), ('why', 1), ('with-explanation', 1), ('youtube', 1)]"
1539,Kth Missing Positive Number,https://leetcode.com/problems/kth-missing-positive-number,"Given an array arr of positive integers sorted in a strictly increasing order, and an integer k.

Find the kth positive integer that is missing from this array.","['array', 'hash-table']",Easy,967,57,142698,78275,[],"[('c++', 42), ('java', 40), ('python', 31), ('cpp', 25), ('javascript', 22), ('python3', 21), ('python 3', 19), ('easy-understanding', 15), ('binary-search', 14), ('linear time', 14), ('easy', 13), ('java-solution', 10), ('c#', 8), ('explained', 8), ('simple', 8), ('binary search', 6), ('cpp solution', 6), ('javascript solution', 6), ('easy-to-understand', 5), ('golang', 5), ('arrays', 4), ('constant memory', 4), ('constant space', 4), ('ruby', 4), ('set', 4), ('video-explanation', 4), ('c', 3), ('cpp easy', 3), ('intuitive', 3), ('linear seach', 3), ('oneline', 3), ('ac', 2), ('brute force', 2), ('easytounderstand', 2), ('explained solution', 2), ('explanation of logic', 2), ('fast and simple', 2), ('go-solution', 2), ('golang-solution', 2), ('js', 2), ('kth missing number', 2), ('kthmissingpositiveno', 2), ('python3.8', 2), ('scala', 2), ('simple solution', 2), ('swift', 2), ('#1539', 1), ('0ms', 1), ('1-line', 1), ('100 speed', 1), ('1ms', 1), ('5 lines', 1), ('array', 1), ('array greedy', 1), ('beginner friendly', 1), ('binarysearch', 1), ('c++ solution', 1), ('clear', 1), ('commented', 1), ('commentedcppcode', 1), ('comments-added', 1), ('count array', 1), ('cplusplus', 1), ('cpp clear', 1), ('cyclic sort', 1), ('derivation', 1), ('detailed thinking step', 1), ('different approach', 1), ('easy code', 1), ('easy explanation', 1), ('easy-understand', 1), ('fast', 1), ('fast-solution', 1), ('faster than 99.66', 1), ('formula', 1), ('functional programming', 1), ('generator', 1), ('go', 1), ('hashmap', 1), ('hashset', 1), ('interval', 1), ('intervals', 1), ('intutive', 1), ('itertools', 1), ('java simple', 1), ('java solution', 1), ('js javascript', 1), ('kotlinvim', 1), ('linear', 1), ('linear search', 1), ('linear-time', 1), ('logarithmic time', 1), ('lol', 1), ('math', 1), ('mathematics', 1), ('nohashmap', 1), ('notsofast', 1), ('one line', 1), ('one liner', 1), ('one pass solution', 1), ('one-liner', 1), ('one-loop', 1), ('optimal', 1), ('optimal solution', 1), ('php', 1), ('pyhton3', 1), ('python 2', 1), ('python2', 1), ('rajat', 1), ('rajawatbanna', 1), ('recurision', 1), ('rust', 1), ('sequence', 1), ('series', 1), ('sets', 1), ('short', 1), ('simple python accepted', 1), ('simple-solution', 1), ('single pass', 1), ('slow', 1), ('sort', 1), ('stack', 1), ('two solutions', 1), ('two-pointers', 1), ('ultra easy', 1), ('understandable', 1), ('video', 1), ('video explaination', 1), ('video interview', 1), ('youtube', 1)]"
1521,Find a Value of a Mysterious Function Closest to Target,https://leetcode.com/problems/find-a-value-of-a-mysterious-function-closest-to-target,"Winston was given the above mysterious function func. He has an integer array arr and an integer target and he wants to find the values l and r that make the value |func(arr, l, r) - target| minimum possible.

Return the minimum possible value of |func(arr, l, r) - target|.

Notice that func should be called with the values l and r where 0 <= l, r < arr.length.","['binary-search', 'bit-manipulation', 'segment-tree']",Hard,203,8,13898,6145,[],"[('segment tree', 4), ('binary search', 3), ('c++ code', 3), ('java', 3), ('binary-search', 2), ('bit manipulation', 2), ('c++', 2), ('cpp', 2), ('python', 2), ('python 3', 2), ('sliding-window', 2), ('slidingwindow', 2), ('100 speed', 1), ('bit-manipulation', 1), ('bitwise operation', 1), ('brutal force optmized', 1), ('brute force', 1), ('brute-force', 1), ('c#', 1), ('c++code', 1), ('cpp solution', 1), ('dynamic programming', 1), ('fastest', 1), ('linear time complexity', 1), ('optimal', 1), ('prefix-array', 1), ('python3', 1), ('sets', 1), ('simple-solution', 1), ('sparse table', 1), ('sparse-table', 1), ('two pointer', 1), ('unordered-set', 1)]"
1520,Maximum Number of Non-Overlapping Substrings,https://leetcode.com/problems/maximum-number-of-non-overlapping-substrings,"Given a string s of lowercase letters, you need to find the maximum number of non-empty substrings of s that meet the following conditions:


	The substrings do not overlap, that is for any two substrings s[i..j] and s[k..l], either j < k or i > l is true.
	A substring that contains a certain character c must also contain all occurrences of c.


Find the maximum number of substrings that meet the above conditions. If there are multiple solutions with the same number of substrings, return the one with minimum total length. It can be shown that there exists a unique solution of minimum total length.

Notice that you can return the substrings in any order.",['greedy'],Hard,346,46,22705,8314,[],"[('greedy', 5), ('java', 4), ('python', 3), ('python3', 3), ('c#', 2), ('efficient', 2), ('back tracking', 1), ('c++ code', 1), ('explanation with code', 1), ('fast', 1), ('hashmap', 1), ('java-solution', 1), ('most votes', 1), ('python 3', 1), ('set', 1), ('sets', 1), ('simpe', 1), ('simple solution', 1), ('sorting', 1), ('stack-based', 1), ('stacks', 1), ('string', 1), ('union-find', 1)]"
1519,Number of Nodes in the Sub-Tree With the Same Label,https://leetcode.com/problems/number-of-nodes-in-the-sub-tree-with-the-same-label,"Given a tree (i.e. a connected, undirected graph that has no cycles) consisting of n nodes numbered from 0 to n - 1 and exactly n - 1 edges. The root of the tree is the node 0, and each node of the tree has a label which is a lower-case character given in the string labels (i.e. The node with the number i has the label labels[i]).

The edges array is given on the form edges[i] = [ai, bi], which means there is an edge between nodes ai and bi in the tree.

Return an array of size n where ans[i] is the number of nodes in the subtree of the ith node which have the same label as node i.

A subtree of a tree T is the tree consisting of a node in T and all of its descendant nodes.","['depth-first-search', 'breadth-first-search']",Medium,249,252,32575,12186,[],"[('dfs simple solution', 17), ('java', 17), ('dfs', 16), ('c++', 12), ('python', 9), ('c++ code', 7), ('dfs recursive', 7), ('graph', 6), ('python 3', 6), ('c#', 5), ('cpp solution', 5), ('javascript', 5), ('bfs', 4), ('dfs-tree', 4), ('dynamic programming', 4), ('dfs with dp', 3), ('dfs-bottomup', 3), ('iterative', 3), ('memoization', 3), ('python3', 3), ('simple solution', 3), ('depth first search', 2), ('dfs solution', 2), ('dfs-topdown', 2), ('golang', 2), ('java-solution', 2), ('recursive-dfs', 2), ('tree-traversal', 2), ('#c++', 1), ('#clean', 1), ('#dfs', 1), ('algorithm', 1), ('backtracing', 1), ('bottom-up-algorithm', 1), ('bottoms-up', 1), ('c++code', 1), ('commented', 1), ('comments', 1), ('complexity-analysis', 1), ('count', 1), ('counter', 1), ('detailed explanation', 1), ('dfs-bfs', 1), ('dfs-iterative', 1), ('dfs-recursive', 1), ('disjoint-set', 1), ('dsu', 1), ('easy-to-understand', 1), ('easy-undestand', 1), ('explained', 1), ('explained solution', 1), ('fast-solution', 1), ('faster than 100.00', 1), ('frequency count', 1), ('graph traversal', 1), ('heapq', 1), ('hindi', 1), ('linear memory', 1), ('linear time', 1), ('magnitudes', 1), ('map', 1), ('n-ary-tree', 1), ('optimisation', 1), ('optimized', 1), ('performance', 1), ('post-order-traversal', 1), ('postorder', 1), ('postorder-traversal', 1), ('ptyhon3', 1), ('recurrsion', 1), ('recursion', 1), ('recursive', 1), ('ruby', 1), ('smart', 1), ('syntax', 1), ('time-limit-exceeded-java', 1), ('topological sort', 1), ('topological-sort', 1), ('tree node ancestor', 1), ('tree problem', 1), ('trees', 1), ('video explanation', 1), ('well-commented', 1), ('well-explained', 1), ('youtube', 1)]"
1518,Water Bottles,https://leetcode.com/problems/water-bottles,"Given numBottles full water bottles, you can exchange numExchange empty water bottles for one full water bottle.

The operation of drinking a full water bottle turns it into an empty bottle.

Return the maximum number of water bottles you can drink.",['greedy'],Easy,442,41,57411,34757,[],"[('c++', 48), ('java', 29), ('cpp', 25), ('python', 24), ('python 3', 23), ('python3', 20), ('easy-understanding', 16), ('javascript', 14), ('cpp solution', 10), ('easy', 9), ('c#', 8), ('greedy', 7), ('recursion', 7), ('simple', 7), ('java-solution', 6), ('easy-undestand', 5), ('golang', 4), ('0ms', 3), ('beginner friendly', 3), ('c', 3), ('explained', 3), ('math solution', 3), ('c++11', 2), ('clean code', 2), ('comments-added', 2), ('easy-to-understand', 2), ('easytounderstand', 2), ('explanation', 2), ('fast and simple', 2), ('fast-solution', 2), ('golang-solution', 2), ('greedy algorithm', 2), ('iterative', 2), ('kotlin', 2), ('linear time', 2), ('loop', 2), ('math', 2), ('one-liner', 2), ('python2', 2), ('recursive', 2), ('ruby', 2), ('whileloop', 2), ('100 faster', 1), ('100 speed', 1), ('accepted', 1), ('beats 100 percent', 1), ('begginerfriendly', 1), ('best-solution-ever', 1), ('c++ code', 1), ('c++ simple', 1), ('c++code', 1), ('clear', 1), ('commented', 1), ('comments', 1), ('constant memory', 1), ('constant space', 1), ('count', 1), ('cpp doubt', 1), ('csharp', 1), ('divide', 1), ('divmod', 1), ('dynamic programming', 1), ('easy c++', 1), ('easy code', 1), ('easy to understandd', 1), ('easy-understand', 1), ('expalanation', 1), ('explanatory notes', 1), ('fast', 1), ('faster than 100', 1), ('fasterthan100', 1), ('fastest', 1), ('fastest solution', 1), ('go-solution', 1), ('good variable names', 1), ('intuitive', 1), ('intutive', 1), ('itereative', 1), ('java solution', 1), ('javascript solution', 1), ('js', 1), ('less memory use', 1), ('linear-time', 1), ('logical thinking', 1), ('loops', 1), ('modulo', 1), ('object oriented solution', 1), ('one line', 1), ('python3.8', 1), ('readable', 1), ('recursive dp', 1), ('recursive easy', 1), ('recursive solution', 1), ('scala', 1), ('self explanatory', 1), ('short', 1), ('simple clear c++ solution', 1), ('simple-solution', 1), ('simplesolution', 1), ('simulation', 1), ('structured code', 1), ('suffering', 1), ('superfast', 1), ('swift', 1), ('swift5', 1), ('typescript', 1), ('ultra simple', 1), ('upvote', 1), ('water bottles', 1), ('while', 1), ('while-loop', 1)]"
1515,Best Position for a Service Centre,https://leetcode.com/problems/best-position-for-a-service-centre,"A delivery company wants to build a new service centre in a new city. The company knows the positions of all the customers in this city on a 2D-Map and wants to build the new centre in a position such that the sum of the euclidean distances to all customers is minimum.

Given an array positions where positions[i] = [xi, yi] is the position of the ith customer on the map, return the minimum sum of the euclidean distances to all customers.

In other words, you need to choose the position of the service centre [xcentre, ycentre] such that the following formula is minimized:

Answers within 10^-5 of the actual value will be accepted.",['geometry'],Hard,112,154,17205,6650,[],"[('gradient-descent', 5), ('python', 4), ('java', 3), ('python 3', 3), ('binary-search', 2), ('ternary-search', 2), ('approximation algo', 1), ('beating-100-submission', 1), ('binary search', 1), ('c++', 1), ('c++ code', 1), ('c++ solution', 1), ('cpp solution', 1), ('fast and simple', 1), ('geometric median', 1), ('java-solution', 1), ('javascript', 1), ('javascript solution', 1), ('kotlin', 1), ('nlogn', 1), ('optimization', 1), ('optimizations', 1), ('p5.js', 1), ('python3', 1), ('simulated annealing', 1), ('visualization', 1)]"
1531,String Compression II,https://leetcode.com/problems/string-compression-ii,"Run-length encoding is a string compression method that works by replacing consecutive identical characters (repeated 2 or more times) with the concatenation of the character and the number marking the count of the characters (length of the run). For example, to compress the string ""aabccc"" we replace ""aa"" by ""a2"" and replace ""ccc"" by ""c3"". Thus the compressed string becomes ""a2bc3"".

Notice that in this problem, we are not adding '1' after single characters.

Given a string s and an integer k. You need to delete at most k characters from s such that the run-length encoded version of s has minimum length.

Find the minimum length of the run-length encoded version of s after deleting at most k characters.","['string', 'dynamic-programming']",Hard,298,30,19143,6543,[],"[('dp', 6), ('python', 5), ('dynamic programming', 4), ('java', 3), ('python 3', 3), ('easy-undestand', 2), ('python3', 2), ('c#', 1), ('c++', 1), ('cpp doubt', 1), ('dp top down', 1), ('dynammic programming', 1), ('easy code', 1), ('efficient', 1), ('explanation of logic', 1), ('fast', 1), ('fast and simple', 1), ('greedy algorithm', 1), ('help needed', 1), ('javascript', 1), ('memory optimization', 1), ('recursion', 1), ('recursively', 1), ('testcase', 1), ('time-limit-exceeded-java', 1), ('top down dp', 1), ('top-down dp', 1)]"
1513,Number of Substrings With Only 1s,https://leetcode.com/problems/number-of-substrings-with-only-1s,"Given a binary string s (a string consisting only of '0' and '1's).

Return the number of substrings with all characters 1's.

Since the answer may be too large, return it modulo 10^9 + 7.","['math', 'string']",Medium,312,14,50387,21215,"[""Count Number of Homogenous Substrings""]","[('python', 19), ('c++', 17), ('cpp', 14), ('python 3', 11), ('python3', 10), ('java', 9), ('math', 9), ('cpp solution', 8), ('c#', 5), ('javascript', 5), ('easy-undestand', 4), ('slidingwindow', 4), ('c++ code', 3), ('dynamic programming', 3), ('java-solution', 3), ('c++ easy to understand', 2), ('counter', 2), ('easy-to-understand', 2), ('easy-understanding', 2), ('easytounderstand', 2), ('explained', 2), ('linear time', 2), ('python2', 2), ('sliding-window', 2), ('two-pointers', 2), ('#c++', 1), ('#cpp', 1), ('#easy-understand', 1), ('#java', 1), ('1-line', 1), ('100 faster', 1), ('2 ways', 1), ('c', 1), ('c++ iterative sol', 1), ('constant memory', 1), ('counting', 1), ('cpp easy', 1), ('cumulative sum', 1), ('easy', 1), ('easy code', 1), ('easy explain', 1), ('easysolution', 1), ('fast and simple', 1), ('functional-programming', 1), ('generalizable', 1), ('go', 1), ('go-solution', 1), ('golang', 1), ('golang-solution', 1), ('iteration', 1), ('maths', 1), ('one-pass', 1), ('oneliner', 1), ('prefix sum', 1), ('rajat', 1), ('reduce', 1), ('ruby', 1), ('scala', 1), ('short', 1), ('split', 1), ('stacks', 1), ('substring', 1), ('swift', 1), ('thought-process', 1)]"
1512,Number of Good Pairs,https://leetcode.com/problems/number-of-good-pairs,"Given an array of integers nums.

A pair (i,j) is called good if nums[i] == nums[j] and i < j.

Return the number of good pairs.","['array', 'hash-table', 'math']",Easy,1134,98,190915,167262,[],"[('c++', 72), ('python', 61), ('python 3', 59), ('java', 46), ('javascript', 42), ('python3', 38), ('cpp', 33), ('hashmap', 29), ('easy-understanding', 25), ('cpp solution', 17), ('java-solution', 17), ('c#', 14), ('c', 13), ('hash table', 12), ('dictionary', 11), ('map', 11), ('easy', 9), ('javascript solution', 7), ('math', 7), ('fast', 6), ('linear time', 6), ('scala', 6), ('simple', 6), ('swift', 6), ('0ms', 5), ('combination', 5), ('dictonary', 5), ('easy-to-understand', 5), ('fast-solution', 5), ('ruby', 5), ('array', 4), ('c++ code', 4), ('explained solution', 4), ('golang', 4), ('kotlin', 4), ('one-liner', 4), ('simple solution', 4), ('solution', 4), ('100 speed', 3), ('brute force', 3), ('easysolution', 3), ('easytounderstand', 3), ('explained', 3), ('explanation of logic', 3), ('functional programming', 3), ('go', 3), ('golang-solution', 3), ('hashing', 3), ('one pass', 3), ('rust', 3), ('unordered map', 3), ('100 memory', 2), ('basic', 2), ('best', 2), ('c code', 2), ('c++ easy to understand', 2), ('c++ solution', 2), ('clean code', 2), ('combinatorics', 2), ('counting-array', 2), ('cpp easy', 2), ('easy understanding', 2), ('easy-undestand', 2), ('efficient solution', 2), ('factorial', 2), ('fastest', 2), ('for-loop', 2), ('go-solution', 2), ('good pairs', 2), ('hashmap java', 2), ('java solution', 2), ('linear', 2), ('math solution', 2), ('math-proof', 2), ('math-solution', 2), ('no map', 2), ('optimal', 2), ('optimal solution', 2), ('python2', 2), ('python3.8', 2), ('pythonpython3', 2), ('recursion', 2), ('simple clear c++ solution', 2), ('single pass', 2), ('stream', 2), ('typescript', 2), ('#hashmap', 1), ('#java', 1), ('#java #countnsay', 1), ('#typescript', 1), ('1-line', 1), ('100', 1), ('100 faster', 1), ('100 faster cpp', 1), ('100 faster runtime', 1), ('100 less memory', 1), ('100faster', 1), ('1ms', 1), ('2 approaches', 1), ('2 loop', 1), ('20ms', 1), ('5 liner', 1), ('95.67 faster', 1), ('accumulate', 1), ('algorithms', 1), ('apl', 1), ('asahiocean', 1), ('beginner', 1), ('best explaination', 1), ('c solution', 1), ('clean', 1), ('clean solution', 1), ('clean-efficient-code', 1), ('clean-solution', 1), ('combination sum', 1), ('combinations', 1), ('constant memory', 1), ('count', 1), ('counter', 1), ('dictionary array', 1), ('dictionary features', 1), ('dp', 1), ('easiest', 1), ('easy-solition', 1), ('efficient', 1), ('elegant', 1), ('error', 1), ('expalanation', 1), ('explanation with code', 1), ('explanation with logic', 1), ('explanations', 1), ('explanatory comments', 1), ('fast and simple', 1), ('faster than 100.00', 1), ('faster then 99.78', 1), ('fasterthan100', 1), ('fastest c++ solution', 1), ('for', 1), ('fp', 1), ('frequency array', 1), ('frequency count', 1), ('frequency table', 1), ('github', 1), ('go-lang', 1), ('good', 1), ('good variable names', 1), ('good-pairs', 1), ('handshake formula', 1), ('hash', 1), ('hash-table', 1), ('hashmaps', 1), ('hashtable', 1), ('honey', 1), ('intuitive', 1), ('iteration', 1), ('itertools', 1), ('js', 1), ('kotlin-solution', 1), ('kotllin', 1), ('linear complexity', 1), ('linear search', 1), ('linear solution', 1), ('linear-time', 1), ('linq', 1), ('mathematical', 1), ('maths', 1), ('multiple functions', 1), ('naive solution', 1), ('nc2', 1), ('nlogn time', 1), ('no extra memory', 1), ('no extra space', 1), ('noob', 1), ('number-of-good-pairs', 1), ('o n', 1), ('object', 1), ('on', 1), ('on2', 1), ('one line', 1), ('one pass solution', 1), ('optimisation', 1), ('performance', 1), ('php', 1), ('php solution', 1), ('readable', 1), ('reduce', 1), ('round-robin', 1), ('self-explanatory', 1), ('simple c', 1), ('simple-solution', 1), ('single-pass', 1), ('sliding window', 1), ('slidingwindow', 1), ('solution-php', 1), ('solved', 1), ('sorting', 1), ('stl', 1), ('string', 1), ('structured code', 1), ('test-cases', 1), ('time complexity', 1), ('triangle numbers', 1), ('two-pointers', 1), ('ultra easy', 1), ('unique', 1), ('unorderedmap', 1), ('while-loop', 1), ('whileloop', 1), ('why itsnt working', 1)]"
1526,Minimum Number of Increments on Subarrays to Form a Target Array,https://leetcode.com/problems/minimum-number-of-increments-on-subarrays-to-form-a-target-array,"Given an array of positive integers target and an array initial of same size with all zeros.

Return the minimum number of operations to form a target array from initial if you are allowed to do the following operation:


	Choose any subarray from initial and increment each value by one.

The answer is guaranteed to fit within the range of a 32-bit signed integer.",['segment-tree'],Hard,350,21,15274,9476,[],"[('c++', 10), ('java', 8), ('cpp', 5), ('cpp solution', 3), ('javascript', 3), ('linear time', 3), ('easy', 2), ('easy code', 2), ('easy-undestand', 2), ('kotlin', 2), ('segment tree', 2), ('c#', 1), ('confused', 1), ('divide and conquer', 1), ('easy-understand', 1), ('explanation', 1), ('greedy approach', 1), ('help', 1), ('java-solution', 1), ('one-liner', 1), ('presum', 1), ('priority queue', 1), ('ptyhon', 1), ('python 3', 1), ('python3', 1), ('simple comparison based', 1), ('stack', 1), ('time-limit-exceeded-java', 1), ('video explanation', 1)]"
1525,Number of Good Ways to Split a String,https://leetcode.com/problems/number-of-good-ways-to-split-a-string,"You are given a string s, a split is called good if you can split s into 2 non-empty strings p and q where its concatenation is equal to s and the number of distinct letters in p and q are the same.

Return the number of good splits you can make in s.","['string', 'bit-manipulation']",Medium,442,14,33142,22436,[],"[('c++', 28), ('hashmap', 18), ('java', 12), ('python', 12), ('javascript', 11), ('cpp', 10), ('python 3', 9), ('python3', 7), ('linear time', 6), ('cpp solution', 5), ('c#', 4), ('dictionary', 3), ('java-solution', 3), ('map', 3), ('constant space', 2), ('easy', 2), ('easy-understanding', 2), ('easy-undestand', 2), ('explained', 2), ('hashmaps', 2), ('maps', 2), ('prefix array', 2), ('python3.8', 2), ('sets', 2), ('unordered map', 2), ('100 speed', 1), ('array', 1), ('bool-array', 1), ('c++ solution', 1), ('comments added', 1), ('concise-solution', 1), ('constant memory', 1), ('counter', 1), ('counters', 1), ('cpp clear', 1), ('cpp easy', 1), ('defaultdict', 1), ('dictonary', 1), ('dp', 1), ('dynamic programming', 1), ('easy code', 1), ('easy solution', 1), ('easy understanding', 1), ('easy-implementation', 1), ('easy-to-understand', 1), ('easytounderstand', 1), ('efficient', 1), ('explanation with code', 1), ('filter', 1), ('golang', 1), ('hash', 1), ('hash table', 1), ('hashset', 1), ('java simple', 1), ('js', 1), ('js javascript', 1), ('kotlin', 1), ('linear', 1), ('neat', 1), ('noob coding', 1), ('one pass solution', 1), ('optimal', 1), ('php', 1), ('prefix sum', 1), ('prefix-array', 1), ('python2', 1), ('ruby', 1), ('set c++', 1), ('sliding window algorithm', 1), ('sliding-window', 1), ('slidingwindow', 1), ('strings', 1), ('suffix array', 1), ('swift', 1), ('typescript', 1), ('video explanation', 1), ('youtube', 1)]"
1524,Number of Sub-arrays With Odd Sum,https://leetcode.com/problems/number-of-sub-arrays-with-odd-sum,"Given an array of integers arr. Return the number of sub-arrays with odd sum.

As the answer may grow large, the answer must be computed modulo 10^9 + 7.","['array', 'math']",Medium,376,18,32981,13268,[],"[('c++', 12), ('java', 8), ('python 3', 8), ('cpp', 7), ('dp', 6), ('linear time', 6), ('python', 6), ('dynamic programming', 5), ('cpp solution', 4), ('easy-understanding', 4), ('java-solution', 4), ('prefix sum', 4), ('easy-undestand', 3), ('javascript', 3), ('constant memory', 2), ('constant space', 2), ('counter', 2), ('explained', 2), ('python3', 2), ('c#', 1), ('comments-added', 1), ('cpp easy', 1), ('easy', 1), ('easy code', 1), ('easy to understant', 1), ('easy-implementation', 1), ('easy-solution', 1), ('easytounderstand', 1), ('explanation', 1), ('explanation of logic', 1), ('fast-solution', 1), ('golang', 1), ('linear', 1), ('linear solution', 1), ('mathematical', 1), ('one pass', 1), ('prefixsum', 1), ('short code', 1), ('single pass', 1)]"
1523,Count Odd Numbers in an Interval Range,https://leetcode.com/problems/count-odd-numbers-in-an-interval-range,Given two non-negative integers low and high. Return the count of odd numbers between low and high (inclusive).,['math'],Easy,207,25,42582,23052,[],"[('c++', 29), ('python', 16), ('cpp', 15), ('java', 13), ('python 3', 12), ('javascript', 10), ('math', 9), ('c#', 8), ('cpp solution', 6), ('one-liner', 6), ('easy-understanding', 4), ('easytounderstand', 4), ('python3', 4), ('easy', 3), ('golang-solution', 3), ('java-solution', 3), ('one line', 3), ('simple', 3), ('swift', 3), ('c', 2), ('clean code', 2), ('go-solution', 2), ('golang', 2), ('math solution', 2), ('maths', 2), ('o1', 2), ('simple solution', 2), ('1-line', 1), ('bit manipulation', 1), ('bit-manipulation', 1), ('brute force', 1), ('c++11', 1), ('constant memory', 1), ('cp', 1), ('cpp easy', 1), ('different approach', 1), ('easy code', 1), ('easy-to-understand', 1), ('expalanation', 1), ('explained', 1), ('explanation', 1), ('explanatory comments', 1), ('fast and simple', 1), ('faster than 100', 1), ('fastest', 1), ('fastest java slution', 1), ('go', 1), ('good variable names', 1), ('images', 1), ('intuitive', 1), ('java solution', 1), ('javascript solution', 1), ('js', 1), ('math-solution', 1), ('number theory', 1), ('odd', 1), ('php', 1), ('python3.8', 1), ('rajat', 1), ('ruby', 1), ('scala', 1), ('self explanatory', 1), ('simple clear c++ solution', 1), ('simple efficient', 1), ('simple-solution', 1), ('simpleapproach', 1), ('structured code', 1), ('swift5', 1), ('ternary-operator', 1), ('ultra simple', 1), ('upvote', 1)]"
1505,Minimum Possible Integer After at Most K Adjacent Swaps On Digits,https://leetcode.com/problems/minimum-possible-integer-after-at-most-k-adjacent-swaps-on-digits,"Given a string num representing the digits of a very large integer and an integer k.

You are allowed to swap any two adjacent digits of the integer at most k times.

Return the minimum integer you can obtain also as a string.",['greedy'],Hard,217,14,15530,5640,[],"[('java', 5), ('java-solution', 2), ('javascript', 2), ('priority queue', 2), ('python', 2), ('python3', 2), ('binary index tree', 1), ('binary indexed tree', 1), ('binary-search', 1), ('bit', 1), ('bubble-sort', 1), ('c#', 1), ('c++', 1), ('c++ easy to understand', 1), ('cpp', 1), ('cpp solution', 1), ('easy-understand', 1), ('easy-understanding', 1), ('fenwick', 1), ('insertion sort', 1), ('javascript solution', 1), ('low quality', 1), ('ordered sets', 1), ('segment-tree', 1), ('sqrt decomposition', 1), ('testcases', 1)]"
1504,Count Submatrices With All Ones,https://leetcode.com/problems/count-submatrices-with-all-ones,"Given a rows * columns matrix mat of ones and zeros, return how many submatrices have all ones.",['dynamic-programming'],Medium,855,65,36910,22371,[],"[('c++', 11), ('dynamic programming', 8), ('dp', 7), ('java', 5), ('javascript', 5), ('python', 5), ('python 3', 4), ('cpp', 3), ('explained', 3), ('monotonic stack', 3), ('cpp solution', 2), ('easy', 2), ('easy-undestand', 2), ('easytounderstand', 2), ('brute force', 1), ('c code', 1), ('c#', 1), ('c++ code', 1), ('diagram', 1), ('dynamic-programming', 1), ('easy-understanding', 1), ('explanation of logic', 1), ('fast and simple', 1), ('golang', 1), ('hindi', 1), ('java-solution', 1), ('javascript solution', 1), ('matrices', 1), ('matrix', 1), ('python2', 1), ('python3', 1), ('rle', 1), ('simple solution', 1), ('space-efficient', 1), ('stack', 1), ('template', 1), ('time-complexity', 1), ('video-explanation', 1), ('youtube', 1)]"
1503,Last Moment Before All Ants Fall Out of a Plank,https://leetcode.com/problems/last-moment-before-all-ants-fall-out-of-a-plank,"We have a wooden plank of the length n units. Some ants are walking on the plank, each ant moves with speed 1 unit per second. Some of the ants move to the left, the other move to the right.

When two ants moving in two different directions meet at some point, they change their directions and continue moving again. Assume changing directions doesn't take any additional time.

When an ant reaches one end of the plank at a time t, it falls out of the plank imediately.

Given an integer n and two integer arrays left and right, the positions of the ants moving to the left and the right. Return the moment when the last ant(s) fall out of the plank.","['array', 'brainteaser']",Medium,226,147,23034,12278,[],"[('python 3', 10), ('java', 8), ('c++', 7), ('cpp', 6), ('python', 6), ('javascript', 5), ('c#', 4), ('cpp solution', 4), ('python3', 3), ('easysolution', 2), ('sort-function', 2), ('100', 1), ('3 lines python', 1), ('antsfalloutofplank', 1), ('aptitude', 1), ('array', 1), ('array nesting', 1), ('brainteaser', 1), ('c', 1), ('c ++', 1), ('c code', 1), ('c++ code', 1), ('c++ soln', 1), ('c++ solution', 1), ('c++ solution simple', 1), ('doubts', 1), ('easy', 1), ('easy-peasy', 1), ('easy-to-understand', 1), ('easy-understanding', 1), ('easy-undestand', 1), ('easytounderstand', 1), ('es2015', 1), ('explanation of logic', 1), ('golang', 1), ('idea', 1), ('java simple', 1), ('java-solution', 1), ('javascript solution', 1), ('kotlin', 1), ('linear time', 1), ('maximum', 1), ('minmax', 1), ('modifying input', 1), ('nonsense', 1), ('o n', 1), ('one-liner', 1), ('simple', 1), ('simple solution', 1), ('tle', 1), ('tricky', 1), ('understanding', 1), ('visualization', 1)]"
1502,Can Make Arithmetic Progression From Sequence,https://leetcode.com/problems/can-make-arithmetic-progression-from-sequence,"Given an array of numbers arr. A sequence of numbers is called an arithmetic progression if the difference between any two consecutive elements is the same.

Return true if the array can be rearranged to form an arithmetic progression, otherwise, return false.","['array', 'sort']",Easy,339,26,67706,48055,"[""Arithmetic Subarrays""]","[('java', 24), ('python', 24), ('c++', 23), ('python 3', 23), ('javascript', 17), ('python3', 17), ('cpp', 16), ('sort', 11), ('cpp solution', 10), ('easy-understanding', 9), ('sorting', 8), ('c#', 6), ('easy', 6), ('java-solution', 6), ('kotlin', 5), ('array', 4), ('c', 4), ('c++ code', 4), ('sorted array', 4), ('easy-to-understand', 3), ('easytounderstand', 3), ('javascript solution', 3), ('set', 3), ('simple', 3), ('100 speed', 2), ('any', 2), ('arithmetic progression', 2), ('easy-undestand', 2), ('fast-solution', 2), ('golang', 2), ('golang-solution', 2), ('swift', 2), ('#java #easy-understand', 1), ('0ms', 1), ('100 faster', 1), ('100 faster cpp', 1), ('100 memory', 1), ('4 lines', 1), ('all', 1), ('ap series', 1), ('array functions', 1), ('arrays.sort', 1), ('c programming', 1), ('c++ soln', 1), ('c++ solution', 1), ('c++11', 1), ('clean code', 1), ('clear-understanding', 1), ('early return', 1), ('easy solution', 1), ('easy to read', 1), ('easy understand', 1), ('easy-solution', 1), ('easy-to-implement', 1), ('es2015', 1), ('explaination', 1), ('explanation with logic', 1), ('explanatory comments', 1), ('for-loop', 1), ('functional programming', 1), ('github', 1), ('go', 1), ('go-solution', 1), ('good variable names', 1), ('hashmap', 1), ('hashset', 1), ('java solution', 1), ('linear time', 1), ('linear time complexity', 1), ('math', 1), ('more-fast', 1), ('nlogn time', 1), ('no sort', 1), ('on', 1), ('one-liner', 1), ('optimal', 1), ('python3.8', 1), ('ruby', 1), ('scala', 1), ('sequence', 1), ('short code', 1), ('simple python using sort', 1), ('simple solution', 1), ('sort-function', 1), ('sorted', 1), ('swift5', 1), ('try-catch', 1), ('typescript', 1), ('very simple', 1)]"
1499,Max Value of Equation,https://leetcode.com/problems/max-value-of-equation,"Given an array points containing the coordinates of points on a 2D plane, sorted by the x-values, where points[i] = [xi, yi] such that xi < xj for all 1 <= i < j <= points.length. You are also given an integer k.

Find the maximum value of the equation yi + yj + |xi - xj| where |xi - xj| <= k and 1 <= i < j <= points.length. It is guaranteed that there exists at least one pair of points that satisfy the constraint |xi - xj| <= k.","['array', 'sliding-window']",Hard,371,14,28119,12777,[],"[('java', 4), ('monoqueue', 4), ('c++', 3), ('deque', 3), ('python 3', 3), ('c#', 2), ('javascript', 2), ('monotone deque', 2), ('monotonic deque', 2), ('sliding-window', 2), ('slidingwindow', 2), ('c++code', 1), ('collections', 1), ('cpp', 1), ('cpp solution', 1), ('dequeue', 1), ('divide and conquer', 1), ('explained', 1), ('fenwick-tree', 1), ('heap', 1), ('linear time', 1), ('linkedlist', 1), ('monotonic queue', 1), ('priority queue', 1), ('priority-queue', 1), ('python', 1), ('python3', 1), ('queue-approach', 1), ('swift', 1), ('weekly 195', 1)]"
1498,Number of Subsequences That Satisfy the Given Sum Condition,https://leetcode.com/problems/number-of-subsequences-that-satisfy-the-given-sum-condition,"Given an array of integers nums and an integer target.

Return the number of non-empty subsequences of nums such that the sum of the minimum and maximum element on it is less or equal to target. Since the answer may be too large, return it modulo 109 + 7.","['sort', 'sliding-window']",Medium,578,59,43747,17076,[],"[('python 3', 4), ('python3', 4), ('binary search', 3), ('python', 3), ('slidingwindow', 3), ('binary-search', 2), ('c#', 2), ('c++', 2), ('cpp solution', 2), ('easy-understanding', 2), ('java', 2), ('javascript', 2), ('sort', 2), ('c++ code', 1), ('cpp', 1), ('debugging', 1), ('easy undestanding', 1), ('explained', 1), ('explanation of logic', 1), ('js', 1), ('kotlinvim', 1), ('linear time', 1), ('lower-bound', 1), ('pow', 1), ('power', 1), ('precomputed powers of 2', 1), ('ptyhon', 1), ('ride-the-lightning', 1), ('simple and elegant', 1), ('sliding window', 1), ('sorted array', 1), ('sorting', 1), ('subsets', 1), ('swift', 1), ('two pointers', 1), ('two sum cpp', 1), ('two-pointer', 1), ('two-pointers', 1), ('twopointer', 1), ('video explaination', 1)]"
1497,Check If Array Pairs Are Divisible by k,https://leetcode.com/problems/check-if-array-pairs-are-divisible-by-k,"Given an array of integers arr of even length n and an integer k.

We want to divide the array into exactly n / 2 pairs such that the sum of each pair is divisible by k.

Return True If you can find a way to do that or False otherwise.","['array', 'math', 'greedy']",Medium,457,43,49723,20023,[],"[('c++', 13), ('python', 12), ('python 3', 7), ('java', 6), ('cpp', 4), ('javascript', 4), ('map', 4), ('cpp solution', 3), ('easy-understanding', 3), ('c#', 2), ('cpp easy', 2), ('easy-undestand', 2), ('golang', 2), ('js', 2), ('modulo', 2), ('python3', 2), ('100 faster', 1), ('arithmetic-operations', 1), ('best explaination', 1), ('c', 1), ('c++ code', 1), ('clean code', 1), ('commented code', 1), ('counter', 1), ('detailed-explanation', 1), ('detailed-steps', 1), ('easy peasy', 1), ('easy-peasy', 1), ('es6', 1), ('explained', 1), ('fast and simple', 1), ('frequency count', 1), ('go', 1), ('golang-solution', 1), ('greedy approach', 1), ('hash', 1), ('hashmap', 1), ('help needed', 1), ('java solution', 1), ('linear time', 1), ('modular', 1), ('one-liner', 1), ('one-pass', 1), ('python2', 1), ('remainder', 1), ('short c++ code', 1), ('swift', 1), ('thought-process', 1), ('tle', 1), ('two-pointers', 1), ('twosum', 1), ('vector', 1)]"
1496,Path Crossing,https://leetcode.com/problems/path-crossing,"Given a string path, where path[i] = 'N', 'S', 'E' or 'W', each representing moving one unit north, south, east, or west, respectively. You start at the origin (0, 0) on a 2D plane and walk on the path specified by path.

Return True if the path crosses itself at any point, that is, if at any time you are on a location you've previously visited. Return False otherwise.",['string'],Easy,303,6,46154,25517,[],"[('c++', 21), ('java', 18), ('python 3', 13), ('cpp', 9), ('python', 8), ('python3', 8), ('set', 7), ('easy', 6), ('easy-understanding', 6), ('javascript', 6), ('hashmap', 5), ('java-solution', 5), ('c#', 4), ('c++ code', 4), ('golang', 4), ('hashset', 4), ('sets', 4), ('cpp solution', 3), ('linear time', 3), ('map', 3), ('swift', 3), ('c++ easy to understand', 2), ('dictionary', 2), ('easy-to-understand', 2), ('easy-undestand', 2), ('go', 2), ('golang-solution', 2), ('javascript solution', 2), ('js', 2), ('ruby', 2), ('rust', 2), ('simple', 2), ('string', 2), ('100 memory', 1), ('1ms runtime', 1), ('accepted solution', 1), ('c', 1), ('clean', 1), ('clean code', 1), ('commented', 1), ('commented code', 1), ('cpp code', 1), ('dictonary', 1), ('easy to understand', 1), ('easy understanding', 1), ('easy-solution', 1), ('easy-undesrtanding', 1), ('easysolution', 1), ('es6', 1), ('explained', 1), ('explanation of logic', 1), ('explanation with code', 1), ('explanatory comments', 1), ('fast', 1), ('fast and simple', 1), ('feedback', 1), ('good variable names', 1), ('hash set', 1), ('hash table', 1), ('hashing', 1), ('iteration', 1), ('iterative', 1), ('java solution using dfs', 1), ('javascrip', 1), ('kotlin', 1), ('logic explained', 1), ('optimal', 1), ('path-tracking', 1), ('quickest', 1), ('readable', 1), ('set of vector', 1), ('simple solution', 1), ('simple-solution', 1), ('simplest', 1), ('space-efficient', 1), ('string builder', 1), ('swift5', 1), ('switch-case', 1), ('treeset', 1), ('ultra easy', 1), ('unordered-set', 1), ('vector', 1), ('vectors', 1), ('with explanation', 1)]"
1510,Stone Game IV,https://leetcode.com/problems/stone-game-iv,"Alice and Bob take turns playing a game, with Alice starting first.

Initially, there are n stones in a pile.  On each player's turn, that player makes a move consisting of removing any non-zero square number of stones in the pile.

Also, if a player cannot make a move, he/she loses the game.

Given a positive integer n. Return True if and only if Alice wins the game otherwise return False, assuming both players play optimally.",['dynamic-programming'],Hard,408,25,45675,26935,"[""Stone Game V"", ""Stone Game VI"", ""Stone Game VII""]","[('dynamic programming', 37), ('dp', 24), ('c++', 19), ('java', 14), ('python 3', 11), ('cpp', 8), ('explained', 6), ('memoization', 6), ('c#', 5), ('cpp solution', 5), ('python', 5), ('java-solution', 4), ('python3', 4), ('recursion', 4), ('clean code', 3), ('easy', 3), ('easy-understanding', 3), ('javascript', 3), ('100 memory', 2), ('100 speed', 2), ('c++ code', 2), ('dp-programming', 2), ('dp-techqique', 2), ('dynamic-programming', 2), ('easy-undestand', 2), ('game theory', 2), ('golang', 2), ('minimax', 2), ('nim-game', 2), ('ruby', 2), ('scala', 2), ('#c++', 1), ('#cpp', 1), ('#dp', 1), ('#dynamic programming', 1), ('4ms', 1), ('ac solution', 1), ('backtrack', 1), ('backtracking', 1), ('beginner friendly', 1), ('binary-search', 1), ('bitset', 1), ('bottom up', 1), ('bottom up dp', 1), ('bottom-up-algorithm', 1), ('c', 1), ('c programming', 1), ('c++ easy to understand', 1), ('c++ solution', 1), ('concise', 1), ('constraints', 1), ('dfs', 1), ('dfs memoization', 1), ('dfs+memoization', 1), ('easiest solution', 1), ('easy-understand', 1), ('explained solution', 1), ('explanation of logic', 1), ('fully-explained', 1), ('functional programming', 1), ('game-theory', 1), ('golang-solution', 1), ('intuitive', 1), ('iterative', 1), ('java ac solution', 1), ('javascript solution', 1), ('kotlin', 1), ('linear time', 1), ('memo', 1), ('memoisation', 1), ('nim', 1), ('php', 1), ('reccursion', 1), ('recursive', 1), ('rust', 1), ('short code', 1), ('sieve', 1), ('simple', 1), ('simple solution', 1), ('simpler', 1), ('swift', 1), ('top down approach', 1), ('top down dp', 1), ('top-down', 1), ('topdown', 1), ('very easy to understand', 1), ('video explanation', 1), ('video-explanation', 1)]"
1509,Minimum Difference Between Largest and Smallest Value in Three Moves,https://leetcode.com/problems/minimum-difference-between-largest-and-smallest-value-in-three-moves,"Given an array nums, you are allowed to choose one element of nums and change it by any value in one move.

Return the minimum difference between the largest and smallest value of nums after perfoming at most 3 moves.","['array', 'sort']",Medium,328,41,26402,14179,[],"[('python', 10), ('python 3', 9), ('java', 8), ('sorting', 8), ('c#', 5), ('easy-undestand', 4), ('sorted array', 4), ('c++', 3), ('javascript', 3), ('dfs', 2), ('heapq', 2), ('java-solution', 2), ('one-liner', 2), ('python3', 2), ('simple solution', 2), ('3 lines', 1), ('ac solution', 1), ('array', 1), ('binary search', 1), ('brute-force', 1), ('clear explanation', 1), ('coder for beginners', 1), ('constant memory', 1), ('cpp', 1), ('cpp solution', 1), ('easy', 1), ('easy to undersstand', 1), ('easy-to-understand', 1), ('easy-understanding', 1), ('easytounderstand', 1), ('explained', 1), ('explanation of logic', 1), ('fast and simple', 1), ('greedy algorithm', 1), ('heapify', 1), ('heaps', 1), ('java ac solution', 1), ('kotlin', 1), ('linear time', 1), ('linq', 1), ('nlogn', 1), ('partial sort', 1), ('partition', 1), ('pointers', 1), ('priority queue', 1), ('python2', 1), ('quick select', 1), ('quick-selection', 1), ('sliding window', 1), ('sliding window algorithm', 1), ('sort', 1), ('two-pointers', 1), ('video explanation', 1), ('window', 1)]"
1508,Range Sum of Sorted Subarray Sums,https://leetcode.com/problems/range-sum-of-sorted-subarray-sums,"Given the array nums consisting of n positive integers. You computed the sum of all non-empty continous subarrays from the array and then sort them in non-decreasing order, creating a new array of n * (n + 1) / 2 numbers.

Return the sum of the numbers from index left to index right (indexed from 1), inclusive, in the new array. Since the answer can be a huge number return it modulo 10^9 + 7.","['array', 'sort']",Medium,304,62,28533,17170,[],"[('java', 10), ('c++', 6), ('cpp', 5), ('javascript', 5), ('python', 5), ('easy-undestand', 4), ('java-solution', 4), ('python 3', 4), ('c#', 3), ('python3', 3), ('sort', 3), ('brute force', 2), ('easy-understand', 2), ('simple solution', 2), ('ac solution', 1), ('accumulate', 1), ('beginnerfriendly', 1), ('binary search', 1), ('brute-force', 1), ('c++ easy to understand', 1), ('c++ iterative sol', 1), ('cpp solution', 1), ('dp', 1), ('easy', 1), ('easy understanding', 1), ('easy-understanding', 1), ('explained', 1), ('explanations', 1), ('intuitive', 1), ('java ac solution', 1), ('java simple', 1), ('javascrip', 1), ('min-heap', 1), ('mod', 1), ('prefix array', 1), ('prefix sum', 1), ('prefixsum', 1), ('presum', 1), ('priority queue', 1), ('priority-queue', 1), ('python2', 1), ('slidingwindow', 1), ('square-time', 1), ('subarray', 1), ('subset', 1), ('two pointers', 1), ('video explanation', 1), ('without-modulo', 1)]"
1489,Find Critical and Pseudo-Critical Edges in Minimum Spanning Tree,https://leetcode.com/problems/find-critical-and-pseudo-critical-edges-in-minimum-spanning-tree,"Given a weighted undirected connected graph with n vertices numbered from 0 to n - 1, and an array edges where edges[i] = [ai, bi, weighti] represents a bidirectional and weighted edge between nodes ai and bi. A minimum spanning tree (MST) is a subset of the graph's edges that connects all vertices without cycles and with the minimum possible total edge weight.

Find all the critical and pseudo-critical edges in the given graph's minimum spanning tree (MST). An MST edge whose deletion from the graph would cause the MST weight to increase is called a critical edge. On the other hand, a pseudo-critical edge is that which can appear in some MSTs but not all.

Note that you can return the indices of the edges in any order.","['depth-first-search', 'union-find']",Hard,230,33,9004,4644,[],"[('kruskals algorithm', 4), ('disjoint sets', 2), ('java', 2), ('python', 2), ('union find', 2), ('unionfind', 2), ('c#', 1), ('c++', 1), ('detailed explanation', 1), ('dsu', 1), ('hindi', 1), ('javascript', 1), ('kruskal algorithm', 1), ('minimum spanning tree', 1), ('mst', 1), ('priority queue', 1), ('pyhton', 1), ('python2', 1), ('python3', 1), ('video explanation', 1)]"
1488,Avoid Flood in The City,https://leetcode.com/problems/avoid-flood-in-the-city,"Your country has an infinite number of lakes. Initially, all the lakes are empty, but when it rains over the nth lake, the nth lake becomes full of water. If it rains over a lake which is full of water, there will be a flood. Your goal is to avoid the flood in any lake.

Given an integer array rains where:


	rains[i] > 0 means there will be rains over the rains[i] lake.
	rains[i] == 0 means there are no rains this day and you can choose one lake this day and dry it.


Return an array ans where:


	ans.length == rains.length
	ans[i] == -1 if rains[i] > 0.
	ans[i] is the lake you choose to dry in the ith day if rains[i] == 0.


If there are multiple valid answers return any of them. If it is impossible to avoid flood return an empty array.

Notice that if you chose to dry a full lake, it becomes empty, but if you chose to dry an empty lake, nothing changes. (see example 4)","['array', 'hash-table']",Medium,569,127,65455,16110,[],"[('java', 9), ('python', 8), ('c++', 7), ('python 3', 7), ('hashmap', 6), ('greedy', 5), ('treeset', 5), ('c#', 4), ('heapq', 4), ('java-solution', 4), ('map', 4), ('binary-search', 3), ('cpp', 3), ('easy-undestand', 3), ('javascript', 3), ('cpp solution', 2), ('golang', 2), ('greedy approach', 2), ('python3', 2), ('swift', 2), ('#error #c++', 1), ('asahiocean', 1), ('avoidtheflood', 1), ('awesomecode', 1), ('binary search', 1), ('binary search tree', 1), ('binarysearch', 1), ('bug in leetcode', 1), ('c++ code', 1), ('clean code', 1), ('dictionary', 1), ('disjoint-set', 1), ('easy-understanding', 1), ('efficient solution', 1), ('fast and simple', 1), ('fast-solution', 1), ('findtheclosestelement', 1), ('hard-to-understand', 1), ('hash table', 1), ('havefun', 1), ('heaps', 1), ('help needed', 1), ('javascript solution', 1), ('js', 1), ('kotlin', 1), ('leetcode', 1), ('loops', 1), ('lowerbound', 1), ('nlogn', 1), ('priority queue', 1), ('proofs', 1), ('rbtree', 1), ('solution', 1), ('sortedcontainers', 1), ('stl', 1), ('treemap', 1), ('well explained', 1)]"
1487,Making File Names Unique,https://leetcode.com/problems/making-file-names-unique,"Given an array of strings names of size n. You will create n folders in your file system such that, at the ith minute, you will create a folder with the name names[i].

Since two files cannot have the same name, if you enter a folder name which is previously used, the system will have a suffix addition to its name in the form of (k), where, k is the smallest positive integer such that the obtained name remains unique.

Return an array of strings of length n where ans[i] is the actual name the system will assign to the ith folder when you create it.","['hash-table', 'string']",Medium,226,376,45313,14287,[],"[('hashmap', 22), ('java', 18), ('c++', 13), ('python', 9), ('javascript', 7), ('python 3', 6), ('c#', 4), ('java-solution', 4), ('map', 4), ('python3', 4), ('cpp', 3), ('golang', 3), ('unordered map', 3), ('c++ code', 2), ('dictionary', 2), ('dictonary', 2), ('hashset', 2), ('kotlin', 2), ('linkedhashmap', 2), ('recursion', 2), ('sets', 2), ('c# solutions', 1), ('c++ easy to understand', 1), ('clean code', 1), ('corner-case', 1), ('counting', 1), ('cpp soltuion', 1), ('cpp solution', 1), ('dfs-bfs', 1), ('easy', 1), ('easy-to-understand', 1), ('edge-case', 1), ('efficient solution', 1), ('fast and simple', 1), ('go', 1), ('hashing', 1), ('iterative', 1), ('javascript solution', 1), ('js', 1), ('least-memory', 1), ('map-stl', 1), ('minimal', 1), ('pythonpython3', 1), ('self-explanatory', 1), ('short code', 1), ('simple solution', 1), ('sooooo many edge cases', 1), ('string', 1), ('string builder', 1), ('swift', 1), ('tle', 1), ('to long', 1), ('tough', 1), ('unfair', 1), ('vector', 1), ('visualization', 1)]"
1486,XOR Operation in an Array,https://leetcode.com/problems/xor-operation-in-an-array,"Given an integer n and an integer start.

Define an array nums where nums[i] = start + 2*i (0-indexed) and n == nums.length.

Return the bitwise XOR of all elements of nums.","['array', 'bit-manipulation']",Easy,467,210,101819,85514,[],"[('c++', 55), ('java', 53), ('python', 34), ('python 3', 33), ('cpp', 32), ('xor', 26), ('javascript', 24), ('python3', 19), ('java-solution', 17), ('easy-understanding', 16), ('c#', 12), ('cpp solution', 12), ('easy', 12), ('array', 10), ('c', 10), ('reduce', 8), ('bit manipulation', 7), ('golang', 7), ('c++ code', 5), ('cpp easy', 5), ('easy-undestand', 5), ('javascript solution', 5), ('simple', 5), ('0ms', 4), ('100 faster', 4), ('constant memory', 4), ('constant space', 3), ('constant time', 3), ('easy-to-understand', 3), ('fast', 3), ('fast-solution', 3), ('go', 3), ('kotlin', 3), ('one-liner', 3), ('simple solution', 3), ('swift', 3), ('vector', 3), ('100 speed', 2), ('arrays', 2), ('beginner friendly', 2), ('bit-manipulation', 2), ('bitwise-operators', 2), ('brute force', 2), ('c code', 2), ('c++11', 2), ('explained', 2), ('fast and simple', 2), ('golang-solution', 2), ('iteration', 2), ('linear time', 2), ('one line', 2), ('pythonpython3', 2), ('solution', 2), ('typescript', 2), ('#python 3', 1), ('#scala', 1), ('0ms runtime', 1), ('100', 1), ('100 faster runtime', 1), ('100 memory', 1), ('100 percentage fastest', 1), ('3 lines', 1), ('85 faster', 1), ('accumulate', 1), ('bitwise', 1), ('bitwise operation', 1), ('bitwise operators', 1), ('bitwise xor', 1), ('c-solution', 1), ('c# solutions', 1), ('c++ easy', 1), ('c++ easy to understand', 1), ('c++ solution', 1), ('c++code', 1), ('clean code', 1), ('easiest solution', 1), ('easy code', 1), ('easy solution', 1), ('easy to code', 1), ('easy understanding', 1), ('easy-solition', 1), ('easysolution', 1), ('easytoundersatand', 1), ('easytounderstand', 1), ('efficient solution', 1), ('explanation with code', 1), ('explanation with logic', 1), ('faster', 1), ('generator', 1), ('github', 1), ('itereative', 1), ('itertools', 1), ('java simple', 1), ('js', 1), ('lambda expression', 1), ('lambda function', 1), ('linear', 1), ('linear-time', 1), ('linear-time-space', 1), ('loops', 1), ('maths', 1), ('noob', 1), ('onelinecode', 1), ('operator', 1), ('optimized', 1), ('php', 1), ('primitive', 1), ('push', 1), ('pyhton3', 1), ('python python3', 1), ('python2', 1), ('recursion', 1), ('ruby', 1), ('scala', 1), ('set', 1), ('simpe', 1), ('simple and elegant', 1), ('simple c', 1), ('simple clear c++ solution', 1), ('simulation', 1), ('solution-python', 1), ('space optimization', 1), ('space-efficient', 1), ('streamapi', 1), ('swift5', 1), ('tail-recursion', 1), ('tail-recursive', 1), ('time optimize', 1), ('time-complexity n', 1), ('ultra easy', 1), ('unit-test', 1), ('xor operation', 1), ('yield', 1)]"
1482,Minimum Number of Days to Make m Bouquets,https://leetcode.com/problems/minimum-number-of-days-to-make-m-bouquets,"Given an integer array bloomDay, an integer m and an integer k.

We need to make m bouquets. To make a bouquet, you need to use k adjacent flowers from the garden.

The garden consists of n flowers, the ith flower will bloom in the bloomDay[i] and then can be used in exactly one bouquet.

Return the minimum number of days you need to wait to be able to make m bouquets from the garden. If it is impossible to make m bouquets return -1.","['array', 'binary-search']",Medium,837,20,40826,20863,[],"[('binary-search', 23), ('python', 10), ('binary search', 9), ('c++', 9), ('java', 8), ('python 3', 7), ('binarysearch', 5), ('c#', 4), ('java-solution', 3), ('javascript', 3), ('cpp', 2), ('dp', 2), ('js', 2), ('python3', 2), ('ruby', 2), ('union find', 2), ('c', 1), ('c++ binary-search', 1), ('c++ code', 1), ('c++ easy to understand', 1), ('comments-added', 1), ('cpp easy', 1), ('cpp solution', 1), ('dfs solution', 1), ('easy', 1), ('easy-implementation', 1), ('easy-understanding', 1), ('explained solution', 1), ('explanations', 1), ('fast and simple', 1), ('fastest java slution', 1), ('go-solution', 1), ('golang', 1), ('golang-solution', 1), ('heap', 1), ('how-to-approach', 1), ('javascrip', 1), ('kotlin', 1), ('mindaystomakembouquets', 1), ('mindset', 1), ('mle-solution', 1), ('notgreedy', 1), ('python2', 1), ('sliding-window', 1), ('sorting', 1), ('swift', 1), ('treeset', 1), ('video explanation', 1)]"
1481,Least Number of Unique Integers after K Removals,https://leetcode.com/problems/least-number-of-unique-integers-after-k-removals,Given an array of integers arr and an integer k. Find the least number of unique integers after removing exactly k elements.,"['array', 'sort']",Medium,360,39,57703,32282,[],"[('python', 20), ('java', 16), ('c++', 15), ('python 3', 14), ('hashmap', 12), ('cpp', 9), ('counter', 8), ('javascript', 8), ('greedy', 7), ('priority queue', 7), ('c#', 5), ('map', 5), ('cpp solution', 4), ('sort', 4), ('swift', 4), ('hashmap and sorting', 3), ('heap', 3), ('heaps', 3), ('min heap', 3), ('python3', 3), ('c# solutions', 2), ('c++ code', 2), ('c++ easy to understand', 2), ('clean code', 2), ('dictionary', 2), ('greedy approach', 2), ('heapq', 2), ('linear', 2), ('list', 2), ('priorityqueue', 2), ('sets', 2), ('sorting', 2), ('vector', 2), ('1-line', 1), ('100 speed', 1), ('array', 1), ('array-sort', 1), ('beginner friendly', 1), ('beginners', 1), ('binary-search', 1), ('bucket sort', 1), ('c', 1), ('clean', 1), ('collections.sort', 1), ('comments', 1), ('comments-added', 1), ('dictionary c#', 1), ('dictonary', 1), ('easy to understand', 1), ('easy-to-understand', 1), ('efficient', 1), ('explained', 1), ('fast', 1), ('fast and simple', 1), ('fun fact', 1), ('golang', 1), ('golang-solution', 1), ('hash map', 1), ('intuitive', 1), ('java ac solution', 1), ('java-solution', 1), ('javacsript', 1), ('js javascript', 1), ('kotlin', 1), ('lambdas', 1), ('leastunqnumsafterkremoval', 1), ('map in c++', 1), ('minheap', 1), ('nlogn', 1), ('o n', 1), ('objects', 1), ('one line', 1), ('pair', 1), ('priority-queue', 1), ('reduce', 1), ('sorted array', 1), ('sorted-map', 1), ('stream', 1), ('unordermap', 1)]"
1480,Running Sum of 1d Array,https://leetcode.com/problems/running-sum-of-1d-array,"Given an array nums. We define a running sum of an array as runningSum[i] = sum(nums[0]…nums[i]).

Return the running sum of nums.",['array'],Easy,1220,118,348547,308550,[],"[('java', 71), ('c++', 62), ('python 3', 56), ('python', 51), ('javascript', 39), ('java-solution', 31), ('easy-understanding', 30), ('cpp', 29), ('easy', 27), ('python3', 26), ('c#', 17), ('simple solution', 15), ('array', 14), ('c', 13), ('cpp solution', 13), ('javascript solution', 13), ('easy-to-understand', 10), ('golang', 10), ('simple', 9), ('swift', 8), ('for-loop', 6), ('golang-solution', 6), ('one-liner', 6), ('running sum of 1 d array', 6), ('c++ code', 5), ('cpp easy', 5), ('linear time', 5), ('rust', 5), ('arrays', 4), ('easy-undestand', 4), ('fast-solution', 4), ('go', 4), ('go-solution', 4), ('in-place', 4), ('javascrip', 4), ('loops', 4), ('map', 4), ('python2', 4), ('reduce', 4), ('ruby', 4), ('scala', 4), ('0ms', 3), ('100 speed', 3), ('c code', 3), ('clean code', 3), ('easiest', 3), ('easysolution', 3), ('easytounderstand', 3), ('explained', 3), ('fast', 3), ('js', 3), ('list comprehension', 3), ('php', 3), ('php solution', 3), ('python3.8', 3), ('recursion', 3), ('running sum', 3), ('solution', 3), ('sum', 3), ('#java-solution', 2), ('#python', 2), ('accumulate', 2), ('array easy', 2), ('array functions', 2), ('array greedy', 2), ('c++ easy to understand', 2), ('c++ solution', 2), ('dp', 2), ('dynamic programming', 2), ('efficient solution', 2), ('es6', 2), ('faster than 100.00', 2), ('fastest', 2), ('iterative', 2), ('iterative way', 2), ('iterator', 2), ('java solution', 2), ('kotlin', 2), ('loop', 2), ('multiple solutions', 2), ('one line', 2), ('oneline', 2), ('oneliner', 2), ('optimized', 2), ('recurision', 2), ('single pass', 2), ('stl', 2), ('tail-recursive', 2), ('typescript', 2), ('#array', 1), ('#c++', 1), ('#cpp', 1), ('#kotlin', 1), ('#list', 1), ('#python 3', 1), ('0ms runtime', 1), ('0ms-solution', 1), ('1 liner', 1), ('1-line', 1), ('100 faster cpp', 1), ('1d array', 1), ('3 lines python', 1), ('4ms', 1), ('ac', 1), ('algorithm', 1), ('algorithms', 1), ('array of set', 1), ('asahiocean', 1), ('assignment-expressions', 1), ('average', 1), ('basic', 1), ('benchmark', 1), ('big o', 1), ('c programming', 1), ('c# simple on', 1), ('c# solutions', 1), ('c++11', 1), ('comments added', 1), ('comments-added', 1), ('complex', 1), ('constant memory', 1), ('constant space', 1), ('constant time', 1), ('cpp doubt', 1), ('cumulative sum', 1), ('easy sloution', 1), ('easy solution', 1), ('easy to understand', 1), ('easy understanding', 1), ('easy-to-read', 1), ('efficient', 1), ('es2015', 1), ('explanation', 1), ('explanation of logic', 1), ('explanations', 1), ('fast and simple', 1), ('faster then 95', 1), ('fasterthan100', 1), ('fastest solution', 1), ('foldleft', 1), ('for loop', 1), ('for loops', 1), ('functional', 1), ('functional programming', 1), ('functional-programming', 1), ('github', 1), ('go lang', 1), ('go-solutiong', 1), ('honey', 1), ('immutable-values', 1), ('in place', 1), ('inplace', 1), ('iteration', 1), ('itertools', 1), ('java ac solution', 1), ('javscript', 1), ('kotlin-solution', 1), ('linear', 1), ('linear-time', 1), ('match', 1), ('memory-efficient', 1), ('no variable', 1), ('noob', 1), ('numpy', 1), ('o n', 1), ('on', 1), ('one liner', 1), ('one liners', 1), ('one pass solution', 1), ('out-of-place', 1), ('pointer', 1), ('pointers', 1), ('prefix sum', 1), ('prefix-sum', 1), ('pseudocode', 1), ('pyhton3', 1), ('python3.9', 1), ('recursive easy', 1), ('redfoos', 1), ('references', 1), ('short', 1), ('simple java solution', 1), ('simple-solution', 1), ('simplesolution', 1), ('simplest', 1), ('solution-python', 1), ('solution-sharing-cpp', 1), ('space-complexity', 1), ('spread operator', 1), ('step by step', 1), ('straightforward', 1), ('stream', 1), ('sum of two integers', 1), ('tail-recursion', 1), ('tailrec', 1), ('test-cases', 1), ('time complexity', 1), ('transform', 1), ('unit-test', 1), ('vector', 1), ('very easy to understand', 1), ('very simple', 1), ('visualization', 1), ('walkthrough', 1), ('with-explanation', 1), ('youtube', 1)]"
1494,Parallel Courses II,https://leetcode.com/problems/parallel-courses-ii,"Given the integer n representing the number of courses at some university labeled from 1 to n, and the array dependencies where dependencies[i] = [xi, yi] represents a prerequisite relationship, that is, the course xi must be taken before the course yi. Also, you are given the integer k.

In one semester you can take at most k courses as long as you have taken all the prerequisites for the courses you are taking.

Return the minimum number of semesters to take all courses. It is guaranteed that you can take all courses in some way.",['graph'],Hard,360,29,21306,6610,"[""Parallel Courses""]","[('topological-sort', 12), ('bfs', 11), ('python', 10), ('dp', 6), ('java', 6), ('c++', 5), ('python 3', 5), ('cpp', 4), ('easy-undestand', 4), ('greedy', 4), ('priority queue', 4), ('bitmask', 3), ('c#', 3), ('bit manipulation', 2), ('brute force', 2), ('c++ code', 2), ('cpp solution', 2), ('explained', 2), ('priority-queue', 2), ('priorityqueue', 2), ('python3', 2), ('100 faster', 1), ('backtracking', 1), ('binary-heap', 1), ('bit mask', 1), ('bit masking', 1), ('bit twiddling', 1), ('bitmasks', 1), ('c++ optimisation', 1), ('code', 1), ('combinations', 1), ('commented', 1), ('depth-first search', 1), ('dynamic programming', 1), ('easy', 1), ('easy-solition', 1), ('explanation', 1), ('golang', 1), ('graph', 1), ('greedy algorithm', 1), ('in-degree', 1), ('iterative-solution', 1), ('java-solution', 1), ('javascript', 1), ('kahnalgorithm', 1), ('khans', 1), ('kotlin', 1), ('mask', 1), ('memoization', 1), ('min heap', 1), ('object-oriented', 1), ('sorting', 1), ('traversal', 1)]"
1493,Longest Subarray of 1's After Deleting One Element,https://leetcode.com/problems/longest-subarray-of-1s-after-deleting-one-element,"Given a binary array nums, you should delete one element from it.

Return the size of the longest non-empty subarray containing only 1's in the resulting array.

Return 0 if there is no such subarray.",['array'],Medium,397,7,34716,20059,[],"[('c++', 22), ('java', 20), ('cpp', 14), ('python', 14), ('python 3', 13), ('javascript', 8), ('java-solution', 7), ('python3', 7), ('slidingwindow', 6), ('explained', 5), ('c#', 4), ('c++ code', 4), ('easy-understanding', 4), ('linear time', 4), ('simple', 4), ('sliding-window', 4), ('brute force', 3), ('cpp solution', 3), ('dp', 3), ('easy-to-understand', 3), ('easy-undestand', 3), ('simple solution', 3), ('sliding window', 3), ('arrays', 2), ('easy', 2), ('fast and simple', 2), ('one pass solution', 2), ('optimal', 2), ('1-line', 1), ('100 speed', 1), ('1ms', 1), ('1ms runtime', 1), ('array', 1), ('beats 100', 1), ('binary-search', 1), ('c++ easy to understand', 1), ('cleancode', 1), ('comments added', 1), ('diagram', 1), ('do comment', 1), ('dynamic programming', 1), ('easy c++', 1), ('easy to understand', 1), ('easy understanding', 1), ('easy-implementation', 1), ('easy-peasy', 1), ('easytounderstand', 1), ('fast', 1), ('faster', 1), ('full explanation', 1), ('global-variables', 1), ('golang', 1), ('iterative', 1), ('js', 1), ('kadanes algorithm', 1), ('kotlin', 1), ('longestsubarrayof1', 1), ('mrmagician', 1), ('one pass', 1), ('prefix', 1), ('pythonpython3', 1), ('recursion', 1), ('recursive', 1), ('simpleforloop', 1), ('single pass', 1), ('slide window', 1), ('stack-implementation', 1), ('stars move the article up', 1), ('suffix', 1), ('swift', 1), ('upvote', 1), ('vector', 1), ('while', 1), ('withoutusinganytechnique', 1)]"
1492,The kth Factor of n,https://leetcode.com/problems/the-kth-factor-of-n,"Given two positive integers n and k.

A factor of an integer n is defined as an integer i where n % i == 0.

Consider a list of all factors of n sorted in ascending order, return the kth factor in this list or return -1 if n has less than k factors.",['math'],Medium,316,131,73383,46285,[],"[('c++', 36), ('python 3', 24), ('java', 22), ('python', 22), ('cpp', 16), ('cpp solution', 15), ('javascript', 12), ('easy', 11), ('python3', 10), ('easy-understanding', 9), ('java-solution', 8), ('c#', 6), ('golang', 6), ('easy-undestand', 4), ('c++ code', 3), ('easy-to-understand', 3), ('explained', 3), ('factor decomposition', 3), ('javascript solution', 3), ('simple', 3), ('sqrt', 3), ('swift', 3), ('100 speed', 2), ('arraylist', 2), ('brute force', 2), ('clean code', 2), ('cpp easy', 2), ('easiest', 2), ('factor', 2), ('fast-solution', 2), ('go-solution', 2), ('golang-solution', 2), ('kotlin', 2), ('kthfactorofn', 2), ('python2', 2), ('typescript', 2), ('#easy-understand', 1), ('#easysolution', 1), ('#python', 1), ('#python 3', 1), ('0ms', 1), ('100 faster', 1), ('100 faster runtime', 1), ('100 memory', 1), ('2-line solution', 1), ('bruteforce', 1), ('c# solutions', 1), ('c++ easy to understand', 1), ('c++ solution', 1), ('clear', 1), ('constant space', 1), ('cpp doubt', 1), ('csharp', 1), ('discussion', 1), ('dynamic programming', 1), ('easy understand', 1), ('easysolution', 1), ('easytounderstand', 1), ('easyunderstanding', 1), ('exception', 1), ('explained solution', 1), ('explanation of logic', 1), ('factorisation', 1), ('factorization', 1), ('factors', 1), ('fast', 1), ('fast and simple', 1), ('filter', 1), ('for loop', 1), ('go', 1), ('iteration', 1), ('iterative solution', 1), ('javscript', 1), ('js', 1), ('lambda', 1), ('linear', 1), ('linear complexity', 1), ('linear time', 1), ('list', 1), ('math', 1), ('math-solution', 1), ('math.min', 1), ('no sqrt', 1), ('one liner', 1), ('optimal solution', 1), ('osqrtn', 1), ('php', 1), ('prime', 1), ('prime factorization', 1), ('prime numbers', 1), ('primes', 1), ('priority-queue', 1), ('python 2', 1), ('pythonpython3', 1), ('ruby', 1), ('simple-solution', 1), ('simplest', 1), ('square root', 1), ('straight-forward', 1), ('stream', 1), ('symmetry', 1), ('treeset', 1), ('trythis', 1), ('typescript javascript', 1), ('understandable', 1), ('vector', 1), ('very easy to understand', 1), ('video explanation', 1), ('video-explanation', 1), ('whileloop', 1)]"
1491,Average Salary Excluding the Minimum and Maximum Salary,https://leetcode.com/problems/average-salary-excluding-the-minimum-and-maximum-salary,"Given an array of unique integers salary where salary[i] is the salary of the employee i.

Return the average salary of employees excluding the minimum and maximum salary.","['array', 'sort']",Easy,280,54,65329,44689,[],"[('c++', 38), ('python', 32), ('python 3', 32), ('java', 31), ('javascript', 21), ('cpp', 16), ('easy-understanding', 12), ('python3', 12), ('java-solution', 10), ('cpp solution', 7), ('c', 6), ('c#', 5), ('easy', 5), ('linear time', 5), ('simple', 5), ('average salary', 4), ('easy-undestand', 4), ('fast and simple', 4), ('javascript solution', 4), ('one-liner', 4), ('0ms', 3), ('easy-to-understand', 3), ('golang', 3), ('linear', 3), ('arrays', 2), ('c++ code', 2), ('comments', 2), ('constant space', 2), ('easy to read', 2), ('easytounderstand', 2), ('go', 2), ('js', 2), ('ruby', 2), ('simplest', 2), ('sort', 2), ('sort-function', 2), ('stl', 2), ('swift', 2), ('#c++', 1), ('#easy-understanding', 1), ('0ms runtime', 1), ('1-line', 1), ('100 faster cpp', 1), ('100 faster runtime', 1), ('2 line python solution', 1), ('90+', 1), ('array', 1), ('avgsalaryexcludingmaxmin', 1), ('beginner friendly', 1), ('beginners', 1), ('brute force', 1), ('c code', 1), ('c programming', 1), ('c++ solution', 1), ('c++11', 1), ('clean code', 1), ('constant-space', 1), ('cpp easy', 1), ('easy java solution', 1), ('easy solution', 1), ('easy-implementation', 1), ('easy-solition', 1), ('easy-undesrtanding', 1), ('easysolution', 1), ('efficient approach', 1), ('error', 1), ('explained', 1), ('explained solution', 1), ('explanation', 1), ('fast', 1), ('faster', 1), ('fasterthan100', 1), ('fastest', 1), ('fastest c++ solution', 1), ('golang-solution', 1), ('good variable names', 1), ('heapq', 1), ('iteration', 1), ('java solution', 1), ('kotlin', 1), ('lambda function', 1), ('linear-time', 1), ('list sort', 1), ('math', 1), ('math-solution', 1), ('mean', 1), ('o n', 1), ('one line', 1), ('one pass', 1), ('one-line', 1), ('onepass', 1), ('over -powered', 1), ('php', 1), ('php solution', 1), ('pickle-rick', 1), ('python is python', 1), ('python solution', 1), ('python with explanation', 1), ('python2', 1), ('pythonic', 1), ('pythonpython3', 1), ('readable', 1), ('rust', 1), ('simple solution', 1), ('simple-solution', 1), ('simpler', 1), ('sorting', 1), ('stl algorithms', 1), ('stream', 1), ('swag', 1), ('vector', 1), ('very easy to understand', 1)]"
1473,Paint House III,https://leetcode.com/problems/paint-house-iii,"There is a row of m houses in a small city, each house must be painted with one of the n colors (labeled from 1 to n), some houses that have been painted last summer should not be painted again.

A neighborhood is a maximal group of continuous houses that are painted with the same color.


	For example: houses = [1,2,2,3,3,2,1,1] contains 5 neighborhoods [{1}, {2,2}, {3,3}, {2}, {1,1}].


Given an array houses, an m x n matrix cost and an integer target where:


	houses[i]: is the color of the house i, and 0 if the house is not painted yet.
	cost[i][j]: is the cost of paint the house i with the color j + 1.


Return the minimum cost of painting all the remaining houses in such a way that there are exactly target neighborhoods. If it is not possible, return -1.",['dynamic-programming'],Hard,336,19,18209,8853,[],"[('dp', 14), ('memoization', 12), ('dynamic programming', 10), ('java', 8), ('python 3', 6), ('c++', 5), ('python', 5), ('c#', 3), ('recursion', 3), ('bottom up', 2), ('c++ code', 2), ('cpp', 2), ('javascript', 2), ('python3', 2), ('scala', 2), ('simplesolution', 2), ('top down', 2), ('top down approach', 2), ('top down dp', 2), ('top-down', 2), ('backtracking', 1), ('bottom up dp', 1), ('bottoms-up', 1), ('clean clode', 1), ('clean code', 1), ('code comments', 1), ('comments', 1), ('cpp solution', 1), ('dfs simple solution', 1), ('dfs-topdown', 1), ('dp bottom up', 1), ('dp python', 1), ('dp-programming', 1), ('dynamic programmin', 1), ('dynamic-programming', 1), ('easy', 1), ('easy-undestand', 1), ('easytounderstand', 1), ('javascript solution', 1), ('pythonic', 1), ('reccursive', 1), ('recurrance', 1), ('recusive', 1), ('test-case', 1), ('top-down dp', 1), ('video explaination', 1), ('video explanation', 1)]"
1472,Design Browser History,https://leetcode.com/problems/design-browser-history,"You have a browser of one tab where you start on the homepage and you can visit another url, get back in the history number of steps or move forward in the history number of steps.

Implement the BrowserHistory class:


	BrowserHistory(string homepage) Initializes the object with the homepage of the browser.
	void visit(string url) Visits url from the current page. It clears up all the forward history.
	string back(int steps) Move steps back in history. If you can only return x steps in the history and steps > x, you will return only x steps. Return the current url after moving back in history at most steps.
	string forward(int steps) Move steps forward in history. If you can only forward x steps in the history and steps > x, you will forward only x steps. Return the current url after forwarding in history at most steps.",['design'],Medium,478,60,50186,36266,[],"[('c++', 31), ('java', 25), ('javascript', 16), ('cpp', 15), ('python', 15), ('python 3', 15), ('vector', 15), ('stacks', 14), ('stack', 12), ('easy', 9), ('easy-understanding', 7), ('c#', 6), ('java-solution', 5), ('list', 5), ('python3', 5), ('arraylist', 4), ('double-linked-list', 4), ('array', 3), ('doubly linked list', 3), ('doubly-linked list', 3), ('easy-undestand', 3), ('javascript solution', 3), ('linked-list', 3), ('pointer', 3), ('c++ code', 2), ('deque', 2), ('design', 2), ('easy-to-understand', 2), ('hashmap', 2), ('linkedlists', 2), ('map', 2), ('memory-efficient', 2), ('short solution', 2), ('simple', 2), ('simple solution', 2), ('swift', 2), ('two-pointer', 2), ('two-pointers', 2), ('two-stacks', 2), ('video explanation', 2), ('#easy-understanding', 1), ('#java', 1), ('100 memory', 1), ('array functions', 1), ('beats-100', 1), ('beginner friendly', 1), ('c', 1), ('c--', 1), ('c# solutions', 1), ('c++ c--', 1), ('c++ easy to understand', 1), ('c++code', 1), ('clean code', 1), ('code-with-explanation', 1), ('comments added', 1), ('constant time', 1), ('cpp easy', 1), ('cpp solution', 1), ('dictonary', 1), ('doubly-linked-list', 1), ('easiest', 1), ('easy to read', 1), ('easy to understand', 1), ('easy understanding', 1), ('easy-implementation', 1), ('easy-understand', 1), ('easytounderstand', 1), ('efficient solution', 1), ('explained', 1), ('fast', 1), ('golang', 1), ('golang-solution', 1), ('hashing algorithm', 1), ('intuitive', 1), ('iteration', 1), ('iterator', 1), ('java solution', 1), ('javascrip', 1), ('js', 1), ('kotlin', 1), ('linear time', 1), ('math', 1), ('no-stack', 1), ('o1', 1), ('pyrhon3', 1), ('pythonpython3', 1), ('simplest', 1), ('simulation', 1), ('stack python', 1), ('two pointer approach', 1), ('two stack', 1), ('unordered-set', 1), ('vectors', 1), ('video explaination', 1), ('video solution', 1)]"
1471,The k Strongest Values in an Array,https://leetcode.com/problems/the-k-strongest-values-in-an-array,"Given an array of integers arr and an integer k.

A value arr[i] is said to be stronger than a value arr[j] if |arr[i] - m| > |arr[j] - m| where m is the median of the array.
If |arr[i] - m| == |arr[j] - m|, then arr[i] is said to be stronger than arr[j] if arr[i] > arr[j].

Return a list of the strongest k values in the array. return the answer in any arbitrary order.

Median is the middle value in an ordered integer list. More formally, if the length of the list is n, the median is the element in position ((n - 1) / 2) in the sorted list (0-indexed).


	For arr = [6, -3, 7, 2, 11], n = 5 and the median is obtained by sorting the array arr = [-3, 2, 6, 7, 11] and the median is arr[m] where m = ((5 - 1) / 2) = 2. The median is 6.
	For arr = [-7, 22, 17, 3], n = 4 and the median is obtained by sorting the array arr = [-7, 3, 17, 22] and the median is arr[m] where m = ((4 - 1) / 2) = 1. The median is 3.","['array', 'sort']",Medium,250,72,37081,21725,[],"[('c++', 13), ('java', 12), ('python', 11), ('sorting', 10), ('python 3', 9), ('two-pointer', 7), ('javascript', 6), ('c#', 5), ('cpp', 5), ('simple solution', 5), ('c++ code', 4), ('java-solution', 4), ('cpp solution', 3), ('python3', 3), ('comparator', 2), ('easy-understanding', 2), ('heap', 2), ('java8', 2), ('priority queue', 2), ('priority-queue', 2), ('sort', 2), ('sort-function', 2), ('sorted array', 2), ('stream', 2), ('#help', 1), ('#quick-select', 1), ('#randomized-algorithm', 1), ('#worst-case-input', 1), ('array', 1), ('array-sort', 1), ('arrays', 1), ('arrays.sort', 1), ('c# solutions', 1), ('c++ easy to understand', 1), ('comments-added', 1), ('easy-to-understand', 1), ('easytounderstand', 1), ('es6', 1), ('go', 1), ('golang', 1), ('golang-solution', 1), ('heapify', 1), ('heaps', 1), ('help', 1), ('icomparer', 1), ('inbuilt functions', 1), ('javascript solution', 1), ('js', 1), ('kotlin', 1), ('kstrongestvaluesinarray', 1), ('lambdas', 1), ('linq', 1), ('nlogn', 1), ('pythno3', 1), ('short solution', 1), ('solution-sharing-cpp', 1), ('streams', 1), ('swift', 1), ('testcases', 1), ('tle', 1), ('two pointers', 1), ('two-pointers', 1), ('video explanation', 1), ('well-commented', 1)]"
1470,Shuffle the Array,https://leetcode.com/problems/shuffle-the-array,"Given the array nums consisting of 2n elements in the form [x1,x2,...,xn,y1,y2,...,yn].

Return the array in the form [x1,y1,x2,y2,...,xn,yn].",['array'],Easy,1133,125,224132,197383,[],"[('java', 71), ('python 3', 60), ('c++', 57), ('python', 54), ('javascript', 42), ('simple solution', 31), ('cpp', 30), ('python3', 28), ('easy-understanding', 27), ('java-solution', 25), ('c#', 15), ('array', 14), ('javascript solution', 12), ('c', 11), ('cpp solution', 11), ('golang', 11), ('swift', 10), ('easy', 9), ('c++ code', 8), ('shuffle the array', 7), ('simple', 7), ('golang-solution', 6), ('kotlin', 6), ('cpp easy', 5), ('easy-to-understand', 5), ('in-place', 5), ('ruby', 5), ('fast-solution', 4), ('inplace', 4), ('linear time', 4), ('one-liner', 4), ('pythonpython3', 4), ('rust', 4), ('scala', 4), ('shuffle', 4), ('solution', 4), ('two-pointer', 4), ('vector', 4), ('array-sort', 3), ('arrays', 3), ('easy-undestand', 3), ('easytounderstand', 3), ('efficient solution', 3), ('zip', 3), ('#python 3', 2), ('0ms', 2), ('1-line', 2), ('100 memory', 2), ('array easy', 2), ('beginner friendly', 2), ('c code', 2), ('c programming', 2), ('c++ easy to understand', 2), ('constant space', 2), ('easiest', 2), ('easy to understand', 2), ('fastest', 2), ('functional programming', 2), ('go-solution', 2), ('iterator', 2), ('java ac solution', 2), ('loop', 2), ('map', 2), ('optimal', 2), ('pythonic', 2), ('single pass', 2), ('solution-javascript', 2), ('swift5', 2), ('two-pointers', 2), ('typescript', 2), ('whileloop', 2), ('#conditional #if-else', 1), ('#java #easy-understand', 1), ('#python', 1), ('0ms runtime', 1), ('0ms-solution', 1), ('1 liner', 1), ('100', 1), ('100 faster', 1), ('100 speed', 1), ('2 pointer', 1), ('4 liner', 1), ('99', 1), ('append', 1), ('array functions', 1), ('array nesting', 1), ('array shuffle', 1), ('asahiocean', 1), ('basic', 1), ('begginer', 1), ('best', 1), ('best space complexity', 1), ('bit manipulation', 1), ('brute force', 1), ('brute-force', 1), ('c sharp', 1), ('c# solutions', 1), ('c++ iterative sol', 1), ('c++ solution', 1), ('c++11', 1), ('clear explanation', 1), ('clearsolution', 1), ('commented', 1), ('comments-added', 1), ('complex number', 1), ('constant memory', 1), ('counter', 1), ('csharp', 1), ('cyclic sort', 1), ('detailed explanation', 1), ('divide and conquer', 1), ('easy code', 1), ('easy to underatnd', 1), ('easy-implementation', 1), ('easysolution', 1), ('efficient', 1), ('explained', 1), ('explanation of logic', 1), ('explanation simple', 1), ('explanation with code', 1), ('fast', 1), ('fast and simple', 1), ('faster 0ms', 1), ('faster than 100.00', 1), ('for loop', 1), ('for-loop', 1), ('fp', 1), ('generator', 1), ('github', 1), ('go lang', 1), ('golang solution', 1), ('goodquestion', 1), ('higher order functions', 1), ('honey', 1), ('index', 1), ('intuitive', 1), ('ios', 1), ('iter', 1), ('iteration', 1), ('itereative', 1), ('javascrip', 1), ('javascriptes6', 1), ('js', 1), ('js javascript', 1), ('kotlin-solution', 1), ('lambdas', 1), ('linear memory', 1), ('list', 1), ('list comprehension', 1), ('loops', 1), ('memory optimized', 1), ('n-complexity', 1), ('new-idea', 1), ('no extra space', 1), ('noob', 1), ('o1 space', 1), ('one line', 1), ('one loop', 1), ('one-loop', 1), ('python2', 1), ('python3.8', 1), ('quick', 1), ('recurision', 1), ('recursion', 1), ('recursive', 1), ('self-explanatory', 1), ('simpe', 1), ('simple c', 1), ('simple loops', 1), ('simpler', 1), ('simplest', 1), ('single-loop', 1), ('smiple', 1), ('space-complexity-1', 1), ('space-efficient', 1), ('straight forward', 1), ('straight-forward', 1), ('swap', 1), ('swiftsolution', 1), ('time-complexity-n', 1), ('two pointer approach', 1), ('two pointer technique', 1), ('two pointers', 1), ('unit-test', 1), ('vectors', 1), ('very easy to understand', 1), ('without extra space', 1), ('without-temp-var', 1), ('yield', 1)]"
1467,Probability of a Two Boxes Having The Same Number of Distinct Balls,https://leetcode.com/problems/probability-of-a-two-boxes-having-the-same-number-of-distinct-balls,"Given 2n balls of k distinct colors. You will be given an integer array balls of size k where balls[i] is the number of balls of color i. 

All the balls will be shuffled uniformly at random, then we will distribute the first n balls to the first box and the remaining n balls to the other box (Please read the explanation of the second example carefully).

Please note that the two boxes are considered different. For example, if we have two balls of colors a and b, and two boxes [] and (), then the distribution [a] (b) is considered different than the distribution [b] (a) (Please read the explanation of the first example carefully).

We want to calculate the probability that the two boxes have the same number of distinct balls.","['math', 'backtracking']",Hard,157,119,8266,5009,[],"[('python', 4), ('backtracking', 3), ('dynamic programming', 3), ('java', 3), ('probability', 2), ('recursion', 2), ('1ms', 1), ('brute force', 1), ('bruteforce', 1), ('c++ code', 1), ('combination', 1), ('dfs', 1), ('explanations', 1), ('functional programming', 1), ('overflow fix', 1), ('permutation', 1), ('python 3', 1), ('scala', 1), ('short', 1), ('simplesolution', 1), ('video explanation', 1)]"
1466,Reorder Routes to Make All Paths Lead to the City Zero,https://leetcode.com/problems/reorder-routes-to-make-all-paths-lead-to-the-city-zero,"There are n cities numbered from 0 to n-1 and n-1 roads such that there is only one way to travel between two different cities (this network form a tree). Last year, The ministry of transport decided to orient the roads in one direction because they are too narrow.

Roads are represented by connections where connections[i] = [a, b] represents a road from city a to b.

This year, there will be a big event in the capital (city 0), and many people want to travel to this city.

Your task consists of reorienting some roads such that each city can visit the city 0. Return the minimum number of edges changed.

It's guaranteed that each city can reach the city 0 after reorder.","['tree', 'depth-first-search']",Medium,652,19,47329,29352,[],"[('bfs', 28), ('dfs', 27), ('java', 23), ('c++', 20), ('python', 19), ('python 3', 13), ('graph', 10), ('javascript', 9), ('cpp', 6), ('c#', 5), ('python3', 5), ('cpp solution', 4), ('depth first search', 4), ('dfs simple solution', 4), ('easy-to-understand', 4), ('easy-understanding', 3), ('java-solution', 3), ('simple solution', 3), ('union find', 3), ('100 speed', 2), ('c++ code', 2), ('dfs-non-recursive', 2), ('directed graph', 2), ('easy', 2), ('easy-undestand', 2), ('golang', 2), ('greedy', 2), ('set', 2), ('sets', 2), ('undirected graph', 2), ('unionfind', 2), ('#c++', 1), ('#dfs', 1), ('100 memory', 1), ('95 per faster', 1), ('99.41', 1), ('adjacency list', 1), ('beats 100', 1), ('best-explanation', 1), ('bfs simple solution', 1), ('boolean-array', 1), ('breath first search', 1), ('c++ recursive solution', 1), ('clean code', 1), ('concise', 1), ('connectedcomponent', 1), ('course schedule', 1), ('depth-first search', 1), ('dfs simple', 1), ('dfs solution', 1), ('dfs-bfs', 1), ('dfs-recursive', 1), ('dfs-tree', 1), ('dijkstras algorithm', 1), ('disjoint-set', 1), ('dynamic programming', 1), ('easysolution', 1), ('easytounderstand', 1), ('explanations', 1), ('fast', 1), ('fast and simple', 1), ('graph traversal', 1), ('hash set', 1), ('hashing', 1), ('hashmap', 1), ('hashset', 1), ('intuitive', 1), ('javascript solution', 1), ('js javascript', 1), ('linear time', 1), ('multimap', 1), ('python2', 1), ('pythonpython3', 1), ('question need help', 1), ('recursion', 1), ('recursive', 1), ('recursive solution', 1), ('ruby', 1), ('short', 1), ('short code', 1), ('simple', 1), ('simpliest', 1), ('sorting', 1), ('straightforward', 1), ('swift', 1), ('trick', 1), ('video explanation', 1), ('video solution', 1), ('weighted graph', 1), ('whiteboard', 1)]"
1465,Maximum Area of a Piece of Cake After Horizontal and Vertical Cuts,https://leetcode.com/problems/maximum-area-of-a-piece-of-cake-after-horizontal-and-vertical-cuts,"Given a rectangular cake with height h and width w, and two arrays of integers horizontalCuts and verticalCuts where horizontalCuts[i] is the distance from the top of the rectangular cake to the ith horizontal cut and similarly, verticalCuts[j] is the distance from the left of the rectangular cake to the jth vertical cut.

Return the maximum area of a piece of cake after you cut at each horizontal and vertical position provided in the arrays horizontalCuts and verticalCuts. Since the answer can be a huge number, return this modulo 10^9 + 7.",['array'],Medium,341,124,84800,28895,[],"[('java', 13), ('python 3', 12), ('python', 10), ('c++', 9), ('javascript', 9), ('c++ code', 8), ('cpp solution', 7), ('python3', 6), ('easy-understanding', 5), ('simple solution', 5), ('c#', 4), ('linear time', 4), ('c++ easy to understand', 3), ('cpp', 3), ('golang', 3), ('sorting', 3), ('go', 2), ('javascript solution', 2), ('one-liner', 2), ('pythonpython3', 2), ('sort', 2), ('sorted array', 2), ('swift', 2), ('100 faster', 1), ('100 space', 1), ('100 speed', 1), ('array', 1), ('arrays', 1), ('arrays.sort', 1), ('beats 100', 1), ('beats100', 1), ('c++ iterative sol', 1), ('code for beginners', 1), ('commented', 1), ('comments', 1), ('comments added', 1), ('constant memory', 1), ('contest', 1), ('csharp', 1), ('detailed explanation', 1), ('difference', 1), ('easy to understand', 1), ('easy-solition', 1), ('easy-undestand', 1), ('explaination', 1), ('explanation with logic', 1), ('fast', 1), ('fast and simple', 1), ('go-solution', 1), ('golang solution', 1), ('golang-solution', 1), ('greedy', 1), ('greedy approach', 1), ('java-solution', 1), ('js', 1), ('js javascript', 1), ('max gap', 1), ('mod', 1), ('modular arithmetic', 1), ('objects', 1), ('one line', 1), ('radix-sort', 1), ('readable', 1), ('rectangle', 1), ('ruby', 1), ('scala', 1), ('self-explanatory', 1), ('short', 1), ('simple', 1), ('simple math', 1), ('stream', 1), ('typescript', 1), ('visualization', 1)]"
1464,Maximum Product of Two Elements in an Array,https://leetcode.com/problems/maximum-product-of-two-elements-in-an-array,"Given the array of integers nums, you will choose two different indices i and j of that array. Return the maximum value of (nums[i]-1)*(nums[j]-1).",['array'],Easy,420,82,104032,80198,[],"[('python 3', 49), ('java', 46), ('python', 43), ('c++', 40), ('javascript', 31), ('python3', 22), ('cpp solution', 20), ('java-solution', 19), ('easy-understanding', 16), ('cpp', 15), ('c++ code', 11), ('c', 9), ('linear time', 7), ('simple', 7), ('simple solution', 7), ('fast and simple', 6), ('javascript solution', 6), ('sorting', 6), ('swift', 6), ('easy', 5), ('c#', 4), ('easy-undestand', 4), ('golang', 4), ('ruby', 4), ('sort', 4), ('constant space', 3), ('cpp easy', 3), ('easy to understand', 3), ('easy-solition', 3), ('easy-to-understand', 3), ('golang-solution', 3), ('one-liner', 3), ('priority queue', 3), ('array', 2), ('arrays', 2), ('brute force', 2), ('brute force to optimal', 2), ('c programming', 2), ('c++ easy to understand', 2), ('c++ solution', 2), ('comments-added', 2), ('detailed explanation', 2), ('easytounderstand', 2), ('go', 2), ('greedy approach', 2), ('kotlin', 2), ('maximum', 2), ('optimized', 2), ('pythonic', 2), ('reduce', 2), ('sorted array', 2), ('stl', 2), ('typescript', 2), ('#python', 1), ('#python 3', 1), ('0ms', 1), ('0ms runtime', 1), ('0ms-solution', 1), ('100', 1), ('100 speed', 1), ('1line', 1), ('2 line', 1), ('3 lines python', 1), ('4ms', 1), ('algorithm', 1), ('array greedy', 1), ('array-sort', 1), ('basic', 1), ('beginner friendly', 1), ('brute-force', 1), ('c code', 1), ('c# solution', 1), ('c++ iterative sol', 1), ('c++11', 1), ('clean code', 1), ('constant-space', 1), ('cpp clear', 1), ('easysolution', 1), ('efficient', 1), ('efficient solution', 1), ('es2015', 1), ('explanation', 1), ('fast-solution', 1), ('faster', 1), ('fastest', 1), ('functional', 1), ('github', 1), ('go-solution', 1), ('heap', 1), ('if', 1), ('intuitive', 1), ('iteration', 1), ('javascript brute force', 1), ('js', 1), ('lambdas', 1), ('linear', 1), ('linear scan', 1), ('linear-time', 1), ('logic', 1), ('logical', 1), ('map', 1), ('math', 1), ('min heap', 1), ('multiset', 1), ('negative numbers', 1), ('no sort', 1), ('no-heap', 1), ('one liner', 1), ('optimal', 1), ('ordered map', 1), ('php', 1), ('php solution', 1), ('pyhton', 1), ('python3.8', 1), ('python38', 1), ('pythonpython3', 1), ('pythonsolution', 1), ('readable', 1), ('rust', 1), ('scala', 1), ('simple clear c++ solution', 1), ('simplest', 1), ('single line', 1), ('solution', 1), ('sort-function', 1), ('straightforward', 1), ('stream', 1), ('swift5', 1), ('test-cases', 1), ('tim-sort', 1), ('time-complexity n', 1), ('time-optimized', 1), ('two-pointer', 1), ('two-pointers', 1), ('unit-test', 1), ('vector-operation', 1), ('without sorting', 1)]"
1477,Find Two Non-overlapping Sub-arrays Each With Target Sum,https://leetcode.com/problems/find-two-non-overlapping-sub-arrays-each-with-target-sum,"Given an array of integers arr and an integer target.

You have to find two non-overlapping sub-arrays of arr each with a sum equal target. There can be multiple answers so you have to find an answer where the sum of the lengths of the two sub-arrays is minimum.

Return the minimum sum of the lengths of the two required sub-arrays, or return -1 if you cannot find such two sub-arrays.",['dynamic-programming'],Medium,747,40,69663,24518,[],"[('python', 17), ('prefix sum', 13), ('slidingwindow', 10), ('dynamic programming', 9), ('java', 9), ('c++', 7), ('dp', 7), ('python 3', 6), ('python3', 6), ('sliding-window', 6), ('c#', 5), ('javascript', 5), ('c++ code', 4), ('easy-undestand', 4), ('hashmap', 4), ('cpp', 3), ('golang', 3), ('sliding window', 3), ('easysolution', 2), ('golang-solution', 2), ('greedy', 2), ('java-solution', 2), ('slide window', 2), ('100 faster', 1), ('100 space', 1), ('2 pointer', 1), ('best before i', 1), ('brute force', 1), ('bug', 1), ('code comments', 1), ('cpp solution', 1), ('cumulative sum', 1), ('deque', 1), ('doubt', 1), ('easy', 1), ('easy-understanding', 1), ('easy-understsand', 1), ('explained', 1), ('explanation', 1), ('fast and simple', 1), ('google-onsite', 1), ('heapq', 1), ('intervals', 1), ('js', 1), ('kotlin', 1), ('linear', 1), ('map', 1), ('math', 1), ('o of n', 1), ('one pass', 1), ('one-pass', 1), ('prefix array', 1), ('prefix-sum', 1), ('prefixsum', 1), ('presum', 1), ('priority-queue', 1), ('pythonpython3', 1), ('rust', 1), ('simple', 1), ('single pass', 1), ('sort', 1), ('subarray sum equals k', 1), ('suffix array', 1), ('tle', 1), ('two-pointers', 1), ('video explanation', 1)]"
1476,Subrectangle Queries,https://leetcode.com/problems/subrectangle-queries,"Implement the class SubrectangleQueries which receives a rows x cols rectangle as a matrix of integers in the constructor and supports two methods:

1. updateSubrectangle(int row1, int col1, int row2, int col2, int newValue)


	Updates all values with newValue in the subrectangle whose upper left coordinate is (row1,col1) and bottom right coordinate is (row2,col2).


2. getValue(int row, int col)


	Returns the current value of the coordinate (row,col) from the rectangle.",['array'],Medium,198,548,47797,42083,[],"[('python', 16), ('c++', 14), ('python 3', 12), ('java', 11), ('easy-understanding', 7), ('c#', 5), ('cpp', 5), ('javascript', 5), ('matrix', 5), ('python3', 5), ('easy', 4), ('2d-array', 3), ('java-solution', 3), ('rust', 3), ('brute force', 2), ('c', 2), ('c++ code', 2), ('clean code', 2), ('cpp solution', 2), ('golang', 2), ('pythonpython3', 2), ('ruby', 2), ('swift', 2), ('100 faster', 1), ('100 memory', 1), ('100 space', 1), ('100 speed', 1), ('array nesting', 1), ('c# solutions', 1), ('c++ easy to understand', 1), ('cpp easy', 1), ('easy to understand', 1), ('easy-undestand', 1), ('easysolution', 1), ('explanatory comments', 1), ('good variable names', 1), ('help needed', 1), ('java ac solution', 1), ('java solution', 1), ('javascript solution', 1), ('nested for loops', 1), ('php', 1), ('php solution', 1), ('question', 1), ('queue', 1), ('run-time', 1), ('rust vec', 1), ('simple', 1), ('simplest', 1), ('solution c++', 1), ('solution-python', 1), ('structured code', 1), ('swift5', 1), ('while', 1)]"
1478,Allocate Mailboxes,https://leetcode.com/problems/allocate-mailboxes,"Given the array houses and an integer k. where houses[i] is the location of the ith house along a street, your task is to allocate k mailboxes in the street.

Return the minimum total distance between each house and its nearest mailbox.

The answer is guaranteed to fit in a 32-bit signed integer.","['math', 'dynamic-programming']",Hard,435,8,16345,8813,[],"[('dp', 6), ('java', 6), ('dynamic programming', 4), ('python 3', 4), ('recursion', 4), ('c++', 3), ('memoization', 3), ('cpp', 2), ('python', 2), ('bottom up', 1), ('bottom-up-algorithm', 1), ('c++ code', 1), ('concise', 1), ('dfs-bottomup', 1), ('easy', 1), ('explanation of logic', 1), ('explanations', 1), ('javascript', 1), ('linear memory', 1), ('median', 1), ('prefix sum', 1), ('python3', 1), ('recursive', 1), ('recursive solution', 1), ('simplesolution', 1), ('top down approach', 1), ('top-down', 1)]"
1475,Final Prices With a Special Discount in a Shop,https://leetcode.com/problems/final-prices-with-a-special-discount-in-a-shop,"Given the array prices where prices[i] is the price of the ith item in a shop. There is a special discount for items in the shop, if you buy the ith item, then you will receive a discount equivalent to prices[j] where j is the minimum index such that j > i and prices[j] <= prices[i], otherwise, you will not receive any discount at all.

Return an array where the ith element is the final price you will pay for the ith item of the shop considering the special discount.",['array'],Easy,459,39,58823,44075,[],"[('c++', 35), ('python', 27), ('python 3', 23), ('javascript', 22), ('java', 21), ('cpp', 19), ('stack', 17), ('c#', 10), ('python3', 10), ('java-solution', 8), ('stacks', 8), ('golang', 6), ('cpp solution', 5), ('easy', 5), ('array', 4), ('easy-to-understand', 4), ('easy-understanding', 4), ('go-solution', 4), ('golang-solution', 4), ('stack-based', 4), ('c', 3), ('c++ code', 3), ('easy-undestand', 3), ('go', 3), ('javascript solution', 3), ('typescript', 3), ('1ms', 2), ('c++ iterative sol', 2), ('cpp easy', 2), ('easytounderstand', 2), ('explained', 2), ('explained solution', 2), ('kotlin', 2), ('monotonic stack', 2), ('nostack', 2), ('solution', 2), ('swift', 2), ('#c++', 1), ('#cpp', 1), ('1-line', 1), ('100 faster', 1), ('100 space', 1), ('99.5 faster', 1), ('algorithm-explained', 1), ('beginner', 1), ('beginner friendly', 1), ('brutal force', 1), ('brute force', 1), ('brute force to optimal', 1), ('brute-force', 1), ('c# solutions', 1), ('c++ easy to understand', 1), ('c++ solution', 1), ('cleancode', 1), ('comments added', 1), ('comments-added', 1), ('concise-solution', 1), ('descriptive', 1), ('easy code', 1), ('easy to read', 1), ('easy to understand', 1), ('easysolution', 1), ('efficient', 1), ('explaination', 1), ('fast and simple', 1), ('faster', 1), ('fastest', 1), ('golang solution', 1), ('js', 1), ('map', 1), ('on2', 1), ('one pass solution', 1), ('one-liner', 1), ('pyhton 3', 1), ('python2', 1), ('pythonpython3', 1), ('ruby', 1), ('run-time', 1), ('scala', 1), ('simple clear c++ solution', 1), ('simple solution', 1), ('stack-implementation', 1), ('unit-test', 1), ('vector', 1), ('visualization', 1), ('with-explanation', 1)]"
1458,Max Dot Product of Two Subsequences,https://leetcode.com/problems/max-dot-product-of-two-subsequences,"Given two arrays nums1 and nums2.

Return the maximum dot product between non-empty subsequences of nums1 and nums2 with the same length.

A subsequence of a array is a new array which is formed from the original array by deleting some (can be none) of the characters without disturbing the relative positions of the remaining characters. (ie, [2,3,5] is a subsequence of [1,2,3,4,5] while [1,5,3] is not).",['dynamic-programming'],Hard,415,10,29395,12795,[],"[('dynamic programming', 28), ('dp', 19), ('c++', 11), ('java', 11), ('python', 9), ('python 3', 8), ('cpp', 6), ('memoization', 6), ('dynamic-programming', 5), ('bottom up', 4), ('c#', 3), ('lcs', 3), ('recursion', 3), ('simple solution', 3), ('bottom-up', 2), ('cpp solution', 2), ('dp-techqique', 2), ('easy-to-understand', 2), ('javascript', 2), ('top down', 2), ('topdown', 2), ('akku', 1), ('bottom up dp', 1), ('c++ code', 1), ('code for beginners', 1), ('comments added', 1), ('commetend', 1), ('common sequence', 1), ('cpp easy', 1), ('doubt', 1), ('easy-undestand', 1), ('explained', 1), ('explanations', 1), ('fully-explained', 1), ('kadanes algo', 1), ('knapsack', 1), ('linear space', 1), ('logic explained', 1), ('lru-cache', 1), ('memory-efficient', 1), ('optimal substructure', 1), ('python deque', 1), ('python3', 1), ('quadratic time', 1), ('recurision', 1), ('rust', 1), ('scala', 1), ('simplsolutio', 1), ('space-efficient', 1), ('subsequences', 1), ('swift', 1), ('top down dp', 1), ('visualization', 1)]"
1457,Pseudo-Palindromic Paths in a Binary Tree,https://leetcode.com/problems/pseudo-palindromic-paths-in-a-binary-tree,"Given a binary tree where node values are digits from 1 to 9. A path in the binary tree is said to be pseudo-palindromic if at least one permutation of the node values in the path is a palindrome.

Return the number of pseudo-palindromic paths going from the root node to leaf nodes.","['bit-manipulation', 'tree', 'depth-first-search']",Medium,662,21,58730,40957,[],"[('dfs', 49), ('c++', 32), ('java', 26), ('python', 22), ('javascript', 19), ('python 3', 16), ('cpp', 14), ('recursion', 14), ('dfs simple solution', 10), ('bit manipulation', 7), ('backtracking', 6), ('cpp solution', 6), ('c#', 5), ('easy-understanding', 5), ('simple', 5), ('depth-first-search', 4), ('easy-undestand', 4), ('hashmap', 4), ('python3', 4), ('tree', 4), ('binary-tree', 3), ('bitmask', 3), ('depth first search', 3), ('dfs-recursive', 3), ('golang', 3), ('hashset', 3), ('java-solution', 3), ('preorder traversal', 3), ('recursion palindrome', 3), ('swift', 3), ('bit-manipulation', 2), ('bitwise', 2), ('c++ code', 2), ('cpp easy', 2), ('easy', 2), ('easytounderstand', 2), ('explained', 2), ('go', 2), ('go-solution', 2), ('golang-solution', 2), ('iterative', 2), ('palindrome-check', 2), ('recursive', 2), ('ruby', 2), ('set', 2), ('stack', 2), ('tle', 2), ('tree-traversal', 2), ('typescript', 2), ('100 memory', 1), ('backtrack', 1), ('bfs', 1), ('binary tree paths', 1), ('bit-vector', 1), ('bitmasking', 1), ('bitwise operation', 1), ('built-in-function', 1), ('c++ easy to understand', 1), ('c++ solution', 1), ('clean code', 1), ('clear-understanding', 1), ('depth first traversal', 1), ('depth-first search', 1), ('dfs recursive', 1), ('dfs solution', 1), ('dfs-in-order', 1), ('dfs-topdown', 1), ('dictionary', 1), ('easiest', 1), ('easy sloution', 1), ('easy-to-understand', 1), ('easysolution', 1), ('es2015', 1), ('explained solution', 1), ('explanation of logic', 1), ('figure', 1), ('graph theory', 1), ('graph traversal', 1), ('hash', 1), ('hashing', 1), ('identical', 1), ('illustration', 1), ('inorder traversal', 1), ('interview', 1), ('intuitive', 1), ('iteratively', 1), ('itereative', 1), ('java ac solution', 1), ('javasciprt', 1), ('linear time', 1), ('logarithmic-space', 1), ('map', 1), ('memory optimized', 1), ('palindrom', 1), ('palindrome', 1), ('paths', 1), ('photo', 1), ('pre-order', 1), ('pre-order traversal', 1), ('preorder-recursion', 1), ('preorder-traversal', 1), ('pseudopalindromicpaths', 1), ('recurision', 1), ('recursive easy', 1), ('recusive', 1), ('self explanatory', 1), ('simpe', 1), ('simple solution', 1), ('solution-python', 1), ('straightforward', 1), ('strange', 1), ('string', 1), ('swift5', 1), ('time', 1), ('traverse-a-tree', 1), ('tree traversal', 1), ('trees', 1), ('trick', 1), ('ultra easy', 1), ('unordered map', 1), ('upvote', 1), ('video explanation', 1), ('video-explanation', 1), ('visualization', 1), ('weekly-contest-190', 1), ('weird', 1), ('with comments', 1)]"
1456,Maximum Number of Vowels in a Substring of Given Length,https://leetcode.com/problems/maximum-number-of-vowels-in-a-substring-of-given-length,"Given a string s and an integer k.

Return the maximum number of vowel letters in any substring of s with length k.

Vowel letters in English are (a, e, i, o, u).","['string', 'sliding-window']",Medium,404,25,52866,29119,[],"[('sliding-window', 34), ('slidingwindow', 34), ('c++', 25), ('java', 21), ('cpp', 15), ('python 3', 13), ('python', 12), ('sliding window', 11), ('javascript', 10), ('cpp solution', 7), ('java-solution', 7), ('c#', 6), ('easy-understanding', 5), ('easy', 4), ('c++ code', 3), ('easy-undestand', 3), ('linear time', 3), ('swift', 3), ('two-pointers', 3), ('cpp easy', 2), ('easy-solition', 2), ('easytounderstand', 2), ('es6', 2), ('fast and simple', 2), ('hashmap', 2), ('js', 2), ('window', 2), ('15ms', 1), ('99.41', 1), ('aditya-verma', 1), ('akku', 1), ('algorithms', 1), ('array-based', 1), ('bit operation', 1), ('c', 1), ('c++ set', 1), ('c++ solution', 1), ('commented', 1), ('comments', 1), ('cpp doubt', 1), ('deque', 1), ('dynamic programming', 1), ('easy to understand', 1), ('easy-to-understand', 1), ('easysolution', 1), ('es2015', 1), ('explained', 1), ('explained solution', 1), ('functional', 1), ('go', 1), ('go-solution', 1), ('golang', 1), ('golang-solution', 1), ('haha', 1), ('haskell', 1), ('help needed', 1), ('images', 1), ('iteration', 1), ('iterative', 1), ('java solution', 1), ('javascript solution', 1), ('kadane-algorithm', 1), ('kotlin', 1), ('learning', 1), ('lisp', 1), ('look-up-table', 1), ('maxvowelinsubstringoflenk', 1), ('no extra space', 1), ('pruning', 1), ('python3', 1), ('racket', 1), ('sets', 1), ('simple', 1), ('simple solution', 1), ('simpler', 1), ('single pass', 1), ('slide window', 1), ('sliding', 1), ('sliding window algorithm', 1), ('string', 1), ('string-operation', 1), ('swift5', 1), ('tle', 1), ('using sliding window', 1), ('video explanation', 1), ('window-sliding', 1)]"
1455,Check If a Word Occurs As a Prefix of Any Word in a Sentence,https://leetcode.com/problems/check-if-a-word-occurs-as-a-prefix-of-any-word-in-a-sentence,"Given a sentence that consists of some words separated by a single space, and a searchWord.

You have to check if searchWord is a prefix of any word in sentence.

Return the index of the word in sentence where searchWord is a prefix of this word (1-indexed).

If searchWord is a prefix of more than one word, return the index of the first word (minimum index). If there is no such word return -1.

A prefix of a string S is any leading contiguous substring of S.",['string'],Easy,308,9,54967,35934,[],"[('c++', 35), ('python 3', 33), ('java', 28), ('python', 24), ('cpp', 16), ('javascript', 16), ('cpp solution', 10), ('python3', 10), ('java-solution', 9), ('string', 9), ('simple solution', 8), ('c#', 7), ('easy-understanding', 7), ('easy', 6), ('c', 5), ('go', 4), ('swift', 4), ('golang', 3), ('simple', 3), ('stringstream', 3), ('trie', 3), ('brute-force', 2), ('c++ code', 2), ('easy to understand', 2), ('easy-to-understand', 2), ('easysolution', 2), ('istringstream', 2), ('javascript solution', 2), ('kotlin', 2), ('one-liner', 2), ('ruby', 2), ('split', 2), ('0ms', 1), ('100 faster cpp', 1), ('100 faster runtime', 1), ('2 approaches', 1), ('array of string', 1), ('basics', 1), ('beginners', 1), ('bfs', 1), ('c code', 1), ('c++ solution', 1), ('c++11', 1), ('clear explanation', 1), ('cpp easy', 1), ('easiest solution', 1), ('easy-undestand', 1), ('easytounderstand', 1), ('efficient solution', 1), ('enumerate', 1), ('es2015', 1), ('fast and simple', 1), ('fast-solution', 1), ('faster than 100.00', 1), ('fastest', 1), ('find', 1), ('fun', 1), ('functional programming', 1), ('github', 1), ('go-solution', 1), ('gorillaz', 1), ('hashmap', 1), ('indexof', 1), ('iteration', 1), ('java ac solution', 1), ('java simple', 1), ('javascrip', 1), ('js', 1), ('linear seach', 1), ('linear time', 1), ('lucid', 1), ('memory less than 100', 1), ('no builtin function', 1), ('one-pass', 1), ('php', 1), ('prefix', 1), ('python3.8', 1), ('rajat', 1), ('regex', 1), ('regular expression', 1), ('search', 1), ('simple clear c++ solution', 1), ('simple-solution', 1), ('simpler', 1), ('slicing', 1), ('stl', 1), ('string-matching', 1), ('string-operation', 1), ('string-to-integer', 1), ('substr', 1), ('swift5', 1), ('tokeniser', 1), ('tokenization', 1), ('tries', 1), ('unique', 1), ('unit-test', 1), ('vector', 1), ('video explanation', 1)]"
1453,Maximum Number of Darts Inside of a Circular Dartboard,https://leetcode.com/problems/maximum-number-of-darts-inside-of-a-circular-dartboard,"You have a very large square wall and a circular dartboard placed on the wall. You have been challenged to throw darts into the board blindfolded. Darts thrown at the wall are represented as an array of points on a 2D plane. 

Return the maximum number of points that are within or lie on any circular dartboard of radius r.",['geometry'],Hard,88,213,11020,3936,[],"[('java', 2), ('javascript', 2), ('python 3', 2), ('angular sweep', 1), ('brute force', 1), ('c++ code', 1), ('compiler-error', 1), ('faster than 100.00', 1), ('java-solution', 1), ('javascript solution', 1), ('lrucache', 1), ('naive', 1), ('need help', 1), ('precision', 1), ('proofs', 1), ('python', 1), ('python3', 1), ('recursion', 1)]"
1452,People Whose List of Favorite Companies Is Not a Subset of Another List,https://leetcode.com/problems/people-whose-list-of-favorite-companies-is-not-a-subset-of-another-list,"Given the array favoriteCompanies where favoriteCompanies[i] is the list of favorites companies for the ith person (indexed from 0).

Return the indices of people whose list of favorite companies is not a subset of any other list of favorites companies. You must return the indices in increasing order.","['string', 'sort']",Medium,166,165,27319,15095,[],"[('c++', 7), ('python 3', 7), ('javascript', 6), ('bitset', 4), ('java', 4), ('set logic', 4), ('brute force', 3), ('python', 3), ('sets', 3), ('cpp solution', 2), ('golang', 2), ('hashmap', 2), ('javascript solution', 2), ('map', 2), ('pythonic', 2), ('short code', 2), ('union find', 2), ('1line', 1), ('2liner', 1), ('bit', 1), ('bitmanipulation', 1), ('bitmask', 1), ('bitwise', 1), ('brute-force', 1), ('c#', 1), ('c++ code', 1), ('c++ hash', 1), ('comparator', 1), ('concise', 1), ('data compression', 1), ('easy solution', 1), ('easy to understand', 1), ('easy-undestand', 1), ('explained', 1), ('hash set', 1), ('issubset', 1), ('js', 1), ('list', 1), ('python3', 1), ('ruby', 1), ('set', 1), ('set-union', 1), ('short solution', 1), ('sort', 1), ('sorting', 1), ('strings', 1), ('subset', 1)]"
1451,Rearrange Words in a Sentence,https://leetcode.com/problems/rearrange-words-in-a-sentence,"Given a sentence text (A sentence is a string of space-separated words) in the following format:


	First letter is in upper case.
	Each word in text are separated by a single space.


Your task is to rearrange the words in text such that all words are rearranged in an increasing order of their lengths. If two words have the same length, arrange them in their original order.

Return the new text following the format shown above.","['string', 'sort']",Medium,281,50,47231,28347,[],"[('c++', 22), ('java', 15), ('python 3', 14), ('javascript', 11), ('map', 9), ('python', 9), ('cpp', 8), ('python3', 8), ('sorting', 8), ('java-solution', 5), ('sort', 5), ('accepted solution', 4), ('easy-understanding', 4), ('stable sort', 4), ('c#', 3), ('c++ code', 3), ('cpp solution', 3), ('priority queue', 3), ('sort-function', 3), ('string', 3), ('bucket sort', 2), ('custom comparator', 2), ('easy', 2), ('easy-undestand', 2), ('easytounderstand', 2), ('golang', 2), ('hash table', 2), ('hashmap', 2), ('javascript solution', 2), ('linear time', 2), ('simple solution', 2), ('split', 2), ('stable-sort', 2), ('stl', 2), ('treemap', 2), ('1line', 1), ('bucket', 1), ('c', 1), ('c++ hash', 1), ('comments-added', 1), ('comparator', 1), ('csharp', 1), ('dictionary', 1), ('easiest solution', 1), ('easy sloution', 1), ('easy to understand', 1), ('efficient solution', 1), ('es2015', 1), ('fast', 1), ('fast and simple', 1), ('fastest', 1), ('functional-programming', 1), ('go-lang', 1), ('golang-solution', 1), ('group by', 1), ('hash-table', 1), ('hashtable', 1), ('heap', 1), ('insertion sort', 1), ('istream iterator', 1), ('javasccript', 1), ('join', 1), ('js', 1), ('kotlin', 1), ('lambda', 1), ('linear memory', 1), ('linkedlist', 1), ('min heap', 1), ('mle-solution', 1), ('one-liner', 1), ('operator', 1), ('ordered map', 1), ('question', 1), ('recursively', 1), ('ruby', 1), ('scala', 1), ('sets', 1), ('simple', 1), ('simpler', 1), ('solution', 1), ('sort method', 1), ('sorteddictionary', 1), ('space-complexity', 1), ('string concatenation', 1), ('string-operation', 1), ('string-to-integer', 1), ('stringbuilder', 1), ('swift', 1), ('time-complexity', 1), ('vector', 1), ('video explanation', 1)]"
1450,Number of Students Doing Homework at a Given Time,https://leetcode.com/problems/number-of-students-doing-homework-at-a-given-time,"Given two integer arrays startTime and endTime and given an integer queryTime.

The ith student started doing their homework at the time startTime[i] and finished it at time endTime[i].

Return the number of students doing their homework at time queryTime. More formally, return the number of students where queryTime lays in the interval [startTime[i], endTime[i]] inclusive.",['array'],Easy,370,91,81909,63075,[],"[('python 3', 41), ('c++', 38), ('python', 38), ('java', 37), ('javascript', 21), ('cpp solution', 19), ('cpp', 16), ('easy-understanding', 16), ('java-solution', 16), ('python3', 16), ('easy', 10), ('c', 7), ('c#', 6), ('javascript solution', 6), ('one-liner', 6), ('simple', 6), ('swift', 6), ('array', 4), ('easy-to-understand', 4), ('easytounderstand', 4), ('linear time', 4), ('simple solution', 4), ('100 speed', 3), ('arrays', 3), ('c++ code', 3), ('fast and simple', 3), ('faster', 3), ('go', 3), ('golang', 3), ('golang-solution', 3), ('kotlin', 3), ('0ms', 2), ('100 space', 2), ('beginner friendly', 2), ('brute force', 2), ('c programming', 2), ('easy to read', 2), ('easy to understand', 2), ('easy-undestand', 2), ('easysolution', 2), ('efficient solution', 2), ('go-solution', 2), ('java ac solution', 2), ('java solution', 2), ('scala', 2), ('zip', 2), ('#0ms', 1), ('#100percentfaster', 1), ('#java', 1), ('0ms runtime', 1), ('0ms-solution', 1), ('1 pass', 1), ('100', 1), ('100 faster', 1), ('1line', 1), ('5 lines', 1), ('accepted solution', 1), ('basic', 1), ('c++ easy to understand', 1), ('c++ solution', 1), ('commented', 1), ('comments-added', 1), ('constant space', 1), ('cpp-solution', 1), ('diagram', 1), ('easy solution', 1), ('es2015', 1), ('es6', 1), ('explaination', 1), ('explanation with logic', 1), ('fast', 1), ('for loop', 1), ('functional', 1), ('functional-programming', 1), ('generator expression', 1), ('github', 1), ('golang solution', 1), ('interval', 1), ('intervals', 1), ('intuitive', 1), ('iterative', 1), ('java-ac', 1), ('javascrip', 1), ('javascrpt', 1), ('js', 1), ('leetcodewars4', 1), ('lineartime', 1), ('list comprehension', 1), ('loops', 1), ('memory-usage', 1), ('mrmagician', 1), ('multiple queries', 1), ('one line', 1), ('one line solution', 1), ('python3.8', 1), ('pythonic', 1), ('pythonpython3', 1), ('query', 1), ('ruby', 1), ('rust', 1), ('simple clear c++ solution', 1), ('solution', 1), ('solution kotlin', 1), ('space-efficient', 1), ('stack', 1), ('straight forward', 1), ('string', 1), ('sum', 1), ('swift5', 1), ('understandable', 1), ('unit-test', 1), ('upvote', 1), ('very easy', 1), ('very easy to understand', 1)]"
1463,Cherry Pickup II,https://leetcode.com/problems/cherry-pickup-ii,"Given a rows x cols matrix grid representing a field of cherries. Each cell in grid represents the number of cherries that you can collect.

You have two robots that can collect cherries for you, Robot #1 is located at the top-left corner (0,0) , and Robot #2 is located at the top-right corner (0, cols-1) of the grid.

Return the maximum number of cherries collection using both robots  by following the rules below:


	From a cell (i,j), robots can move to cell (i+1, j-1) , (i+1, j) or (i+1, j+1).
	When any robot is passing through a cell, It picks it up all cherries, and the cell becomes an empty cell (0).
	When both robots stay on the same cell, only one of them takes the cherries.
	Both robots cannot move outside of the grid at any moment.
	Both robots should reach the bottom row in the grid.",['dynamic-programming'],Hard,755,9,39034,26841,[],"[('dp', 29), ('dynamic programming', 20), ('python', 15), ('memoization', 12), ('c++', 10), ('dfs', 10), ('java', 10), ('python 3', 8), ('recursion', 7), ('cpp', 6), ('javascript', 5), ('c#', 3), ('easy-to-understand', 3), ('java-solution', 3), ('python3', 3), ('video-explanation', 3), ('bottom-up', 2), ('bottom-up-algorithm', 2), ('clean code', 2), ('cpp solution', 2), ('dp-programming', 2), ('easy-understanding', 2), ('easy-undestand', 2), ('go', 2), ('golang', 2), ('interview', 2), ('iterative', 2), ('ruby', 2), ('top down dp', 2), ('top-down dp', 2), ('#dp', 1), ('#easy-understand', 1), ('#java', 1), ('3 dimension arr', 1), ('bottoms-up', 1), ('brute force', 1), ('c# sortedset', 1), ('c++ code', 1), ('c++17', 1), ('cherrypickupii', 1), ('commented', 1), ('comments added', 1), ('comments-added', 1), ('cpp easy', 1), ('dfs-topdown', 1), ('dp-techqique', 1), ('dynamic-programming', 1), ('easy', 1), ('easytounderstand', 1), ('explaination', 1), ('explained', 1), ('explained solution', 1), ('explanations', 1), ('fastest', 1), ('go-solution', 1), ('golang-solution', 1), ('javascrip', 1), ('kotlin', 1), ('linear time', 1), ('memo', 1), ('o-n3', 1), ('python3.8', 1), ('recursion memoization', 1), ('recursive', 1), ('recusion', 1), ('space-efficient', 1), ('straightforward', 1), ('ting', 1), ('top down approach', 1), ('top-down', 1), ('topdown', 1), ('typescript', 1), ('video', 1), ('video explaination', 1), ('video explanation', 1), ('video solution', 1)]"
1462,Course Schedule IV,https://leetcode.com/problems/course-schedule-iv,"There are a total of n courses you have to take, labeled from 0 to n-1.

Some courses may have direct prerequisites, for example, to take course 0 you have first to take course 1, which is expressed as a pair: [1,0]

Given the total number of courses n, a list of direct prerequisite pairs and a list of queries pairs.

You should answer for each queries[i] whether the course queries[i][0] is a prerequisite of the course queries[i][1] or not.

Return a list of boolean, the answers to the given queries.

Please note that if course a is a prerequisite of course b and course b is a prerequisite of course c, then, course a is a prerequisite of course c.",['graph'],Medium,368,16,38706,17362,[],"[('dfs', 22), ('bfs', 12), ('python', 12), ('c++', 10), ('java', 10), ('cpp', 7), ('memoization', 7), ('dynamic programming', 5), ('javascript', 5), ('c#', 4), ('floyd-warshall', 4), ('cpp solution', 3), ('dfs solution', 3), ('dp', 3), ('python3', 3), ('topological-sort', 3), ('c++ code', 2), ('golang', 2), ('graph', 2), ('java-solution', 2), ('memoziation', 2), ('python 3', 2), ('bitset', 1), ('breadth first search', 1), ('clean', 1), ('clean clode', 1), ('comments', 1), ('course schedule', 1), ('course schedule iv', 1), ('defaultdict', 1), ('dfs simple solution', 1), ('easy', 1), ('easy to understand', 1), ('easy-understanding', 1), ('es6', 1), ('explained', 1), ('explanation with logic', 1), ('fast', 1), ('floyd warshall', 1), ('graph traversal', 1), ('graph-theory', 1), ('hashset', 1), ('intuitive', 1), ('javacript', 1), ('js', 1), ('kotlin', 1), ('linear time', 1), ('linked-list', 1), ('map', 1), ('short', 1), ('simple', 1), ('simple solution', 1), ('straight forward', 1), ('tle', 1), ('transitive closure', 1), ('unorderedset', 1)]"
1461,Check If a String Contains All Binary Codes of Size K,https://leetcode.com/problems/check-if-a-string-contains-all-binary-codes-of-size-k,"Given a binary string s and an integer k.

Return true if every binary code of length k is a substring of s. Otherwise, return false.","['string', 'bit-manipulation']",Medium,531,62,76093,41259,[],"[('c++', 30), ('java', 24), ('python', 18), ('cpp', 17), ('set', 17), ('slidingwindow', 14), ('sliding-window', 11), ('hashset', 10), ('python 3', 10), ('javascript', 8), ('sets', 8), ('c#', 7), ('cpp solution', 6), ('easy-understanding', 6), ('python3', 6), ('go', 5), ('golang', 5), ('easy-to-understand', 4), ('hash', 4), ('hashmap', 4), ('video-explanation', 4), ('c++ code', 3), ('clean code', 3), ('easy-undestand', 3), ('java-solution', 3), ('ruby', 3), ('simple', 3), ('beginner friendly', 2), ('binary', 2), ('bit manipulation', 2), ('bit-manipulation', 2), ('bitset', 2), ('comments-added', 2), ('easysolution', 2), ('explained', 2), ('explanation of logic', 2), ('linear time', 2), ('map', 2), ('permutations', 2), ('rolling hash', 2), ('rolling-hash', 2), ('rust', 2), ('swift', 2), ('tries', 2), ('unordered set', 2), ('#python #sets', 1), ('1line', 1), ('4 liner', 1), ('4-lines', 1), ('approach-explained', 1), ('awesome samriddhi', 1), ('beginner', 1), ('binary-to-decimal', 1), ('bit-shift', 1), ('bitmanipulation', 1), ('bits', 1), ('bitwise operator', 1), ('bitwise operators', 1), ('c', 1), ('c++ hash', 1), ('c++ solution', 1), ('combinatorics', 1), ('cpp easy', 1), ('csharp', 1), ('early stopping', 1), ('explaination', 1), ('fast', 1), ('fastest', 1), ('fuck noobs', 1), ('go-solution', 1), ('golang solution', 1), ('golang-solution', 1), ('hash set', 1), ('help needed', 1), ('in java', 1), ('iterative', 1), ('java code', 1), ('left-shift', 1), ('map-stl', 1), ('memory efficient', 1), ('one-liner', 1), ('optimisation', 1), ('performance', 1), ('rabin-karp', 1), ('ritik', 1), ('set c++', 1), ('simple-solution', 1), ('sliding window', 1), ('sliding window algorithm', 1), ('speed', 1), ('stl', 1), ('string view', 1), ('substring', 1), ('thinking process', 1), ('trie', 1), ('typescript', 1), ('unorderedset', 1), ('unordermap', 1)]"
1460,Make Two Arrays Equal by Reversing Sub-arrays,https://leetcode.com/problems/make-two-arrays-equal-by-reversing-sub-arrays,"Given two integer arrays of equal length target and arr.

In one step, you can select any non-empty sub-array of arr and reverse it. You are allowed to make any number of steps.

Return True if you can make arr equal to target, or False otherwise.",['array'],Easy,376,77,71915,51957,[],"[('c++', 30), ('java', 30), ('javascript', 23), ('python', 20), ('python 3', 20), ('cpp solution', 12), ('cpp', 9), ('python3', 8), ('easy-understanding', 7), ('linear time', 7), ('c#', 6), ('java-solution', 6), ('swift', 6), ('c', 5), ('one-liner', 5), ('sorting', 5), ('map', 4), ('array', 3), ('easy-to-understand', 3), ('fast and simple', 3), ('golang', 3), ('hashing', 3), ('hashmap', 3), ('ruby', 3), ('simple solution', 3), ('sorted array', 3), ('unordered map', 3), ('#c++', 2), ('#cpp', 2), ('#easy-understanding', 2), ('c programming', 2), ('c++ code', 2), ('clean', 2), ('clear explanation', 2), ('counter', 2), ('go', 2), ('js', 2), ('linear', 2), ('oneliner', 2), ('without sort', 2), ('xor', 2), ('#buckets', 1), ('#python', 1), ('#python 3', 1), ('#python3', 1), ('#sort', 1), ('4 liner', 1), ('all', 1), ('anagrams', 1), ('arrays', 1), ('arrays.sort', 1), ('awesome samriddhi', 1), ('beginner friendly', 1), ('brute force', 1), ('c# solutions', 1), ('c#-solution', 1), ('c++11', 1), ('concise', 1), ('count', 1), ('counting', 1), ('detailed explanation', 1), ('detailed thinking step', 1), ('dict', 1), ('dictionary', 1), ('dictionary c#', 1), ('dictonary', 1), ('easiest solution', 1), ('easily understood', 1), ('easy', 1), ('easy to read', 1), ('easy to understand', 1), ('easy-undestand', 1), ('fast', 1), ('fast-solution', 1), ('faster than 99', 1), ('frequencycounting', 1), ('functional-programming', 1), ('help needed', 1), ('ios', 1), ('java ac solution', 1), ('java solution', 1), ('javacsript', 1), ('join', 1), ('kotlin', 1), ('leetcode-please', 1), ('leetcode-wrong', 1), ('linear memory', 1), ('loops', 1), ('make2arrayequal', 1), ('maps', 1), ('multi-sets', 1), ('neat', 1), ('no-collection', 1), ('occurrence', 1), ('one line', 1), ('permutation', 1), ('php', 1), ('proof', 1), ('readable', 1), ('reverse', 1), ('ritik', 1), ('rust', 1), ('scala', 1), ('simple', 1), ('simplest', 1), ('sort', 1), ('sorted', 1), ('stl', 1), ('suggestion', 1), ('swapping', 1), ('swift5', 1), ('ternary-operator', 1), ('testcase-missing', 1), ('unit-test', 1), ('unordered-multiset', 1), ('unorderedmap', 1), ('why', 1)]"
1444,Number of Ways of Cutting a Pizza,https://leetcode.com/problems/number-of-ways-of-cutting-a-pizza,"Given a rectangular pizza represented as a rows x cols matrix containing the following characters: 'A' (an apple) and '.' (empty cell) and given the integer k. You have to cut the pizza into k pieces using k-1 cuts. 

For each cut you choose the direction: vertical or horizontal, then you choose a cut position at the cell boundary and cut the pizza into two pieces. If you cut the pizza vertically, give the left part of the pizza to a person. If you cut the pizza horizontally, give the upper part of the pizza to a person. Give the last piece of pizza to the last person.

Return the number of ways of cutting the pizza such that each piece contains at least one apple. Since the answer can be a huge number, return this modulo 10^9 + 7.",['dynamic-programming'],Hard,305,8,15663,8461,[],"[('dp', 8), ('dynamic programming', 6), ('memoization', 5), ('c#', 2), ('dynamic-programming', 2), ('javascript', 2), ('2d dynamic programming', 1), ('99', 1), ('bottom-up-algorithm', 1), ('c++', 1), ('cpp solution', 1), ('dfs simple solution', 1), ('diagram', 1), ('explanation with logic', 1), ('golang', 1), ('number-of-ways', 1), ('prefix sum', 1), ('python', 1), ('python 3', 1), ('python3', 1), ('recusion', 1), ('suffix-array', 1), ('top down', 1), ('video explaination', 1)]"
1443,Minimum Time to Collect All Apples in a Tree,https://leetcode.com/problems/minimum-time-to-collect-all-apples-in-a-tree,"Given an undirected tree consisting of n vertices numbered from 0 to n-1, which has some apples in their vertices. You spend 1 second to walk over one edge of the tree. Return the minimum time in seconds you have to spend to collect all apples in the tree, starting at vertex 0 and coming back to this vertex.

The edges of the undirected tree are given in the array edges, where edges[i] = [ai, bi] means that exists an edge connecting the vertices ai and bi. Additionally, there is a boolean array hasApple, where hasApple[i] = true means that vertex i has an apple; otherwise, it does not have any apple.","['tree', 'depth-first-search']",Medium,570,61,34546,18800,[],"[('dfs', 25), ('c++', 20), ('java', 18), ('python', 11), ('cpp', 9), ('python 3', 9), ('graph', 7), ('python3', 6), ('bfs', 5), ('hashmap', 5), ('set', 5), ('dfs simple solution', 4), ('java-solution', 4), ('simple', 4), ('c#', 3), ('golang', 3), ('recursion', 3), ('backtracking', 2), ('c++ code', 2), ('clean code', 2), ('dfs-bfs', 2), ('dfs-bottomup', 2), ('dfs-topdown', 2), ('dfs-tree', 2), ('easy', 2), ('easy-understanding', 2), ('explained', 2), ('javascript', 2), ('simple solution', 2), ('visualization', 2), ('100', 1), ('100 memory', 1), ('100 speed', 1), ('1443', 1), ('4ms', 1), ('adjacency list', 1), ('bfs python', 1), ('boolean-array', 1), ('c++ set', 1), ('clean clode', 1), ('commentary', 1), ('comments', 1), ('concise', 1), ('concise-solution', 1), ('cpp solution', 1), ('csharp', 1), ('depth first search', 1), ('dfs solution', 1), ('dfs-recursive', 1), ('dictionary', 1), ('easy sloution', 1), ('easy-undestand', 1), ('esay-understand', 1), ('fast and simple', 1), ('go', 1), ('hash table', 1), ('interview-friendly', 1), ('inverted index', 1), ('javascript solution', 1), ('js', 1), ('lca', 1), ('map', 1), ('n-ary-tree', 1), ('nlogn', 1), ('nonrecursive', 1), ('o1', 1), ('picture explanation', 1), ('postorder-traversal', 1), ('readable', 1), ('recursive', 1), ('recursively', 1), ('ruby', 1), ('rust', 1), ('scala', 1), ('short solution', 1), ('simpler', 1), ('sorting', 1), ('swift', 1), ('treenode', 1), ('trees', 1), ('visited', 1), ('without recursive', 1), ('without tree', 1)]"
1442,Count Triplets That Can Form Two Arrays of Equal XOR,https://leetcode.com/problems/count-triplets-that-can-form-two-arrays-of-equal-xor,"Given an array of integers arr.

We want to select three indices i, j and k where (0 <= i < j <= k < arr.length).

Let's define a and b as follows:


	a = arr[i] ^ arr[i + 1] ^ ... ^ arr[j - 1]
	b = arr[j] ^ arr[j + 1] ^ ... ^ arr[k]


Note that ^ denotes the bitwise-xor operation.

Return the number of triplets (i, j and k) Where a == b.","['array', 'math', 'bit-manipulation']",Medium,530,29,25278,18198,[],"[('c++', 7), ('c#', 5), ('cpp solution', 5), ('javascript', 4), ('xor', 4), ('bit manipulation', 3), ('cpp', 3), ('python', 3), ('python 3', 3), ('simple solution', 3), ('c++ code', 2), ('easy-understanding', 2), ('hashmap', 2), ('java-solution', 2), ('js', 2), ('bit-manipulation', 1), ('brute force', 1), ('counttriplets', 1), ('dp', 1), ('easy-solition', 1), ('easy-to-understand', 1), ('elegant', 1), ('fast', 1), ('hashing', 1), ('java', 1), ('javascript solution', 1), ('js javascript', 1), ('loops', 1), ('map', 1), ('optimal', 1), ('prefix xor', 1), ('prefix-xor', 1), ('python3', 1), ('readable', 1), ('rust', 1), ('triplet', 1), ('twoarraysofequalxor', 1), ('vectors', 1)]"
1441,Build an Array With Stack Operations,https://leetcode.com/problems/build-an-array-with-stack-operations,"Given an array target and an integer n. In each iteration, you will read a number from  list = {1,2,3..., n}.

Build the target array using the following operations:


	Push: Read a new element from the beginning list, and push it in the array.
	Pop: delete the last element of the array.
	If the target array is already built, stop reading more elements.


Return the operations to build the target array. You are guaranteed that the answer is unique.",['stack'],Easy,267,458,57812,40725,[],"[('c++', 39), ('java', 31), ('python', 26), ('python 3', 24), ('javascript', 20), ('cpp', 19), ('easy-understanding', 15), ('python3', 11), ('easy', 10), ('java-solution', 9), ('stack', 8), ('easy-to-understand', 6), ('100 speed', 5), ('c#', 5), ('cpp solution', 5), ('easy-undestand', 5), ('simple solution', 5), ('0ms', 4), ('100 memory', 4), ('linear time', 4), ('simple', 4), ('stacks', 4), ('c', 3), ('c++ code', 3), ('explained', 3), ('fast', 3), ('fast and simple', 3), ('generator', 3), ('swift', 3), ('100 faster', 2), ('easiest', 2), ('easy understanding', 2), ('easytounderstand', 2), ('explanation of logic', 2), ('fast-solution', 2), ('fastest', 2), ('go', 2), ('golang', 2), ('js', 2), ('on', 2), ('two-pointers', 2), ('vector', 2), ('well-commented', 2), ('0ms-solution', 1), ('100 faster cpp', 1), ('100 faster runtime', 1), ('100 space', 1), ('20ms', 1), ('accepted', 1), ('algorithm', 1), ('array', 1), ('array-creation', 1), ('arraylist', 1), ('beats', 1), ('beginner', 1), ('beginner friendly', 1), ('beginners', 1), ('beginners level', 1), ('clean code', 1), ('commented', 1), ('complexity', 1), ('consice', 1), ('cpp easy', 1), ('deque', 1), ('east to understand', 1), ('easy sloution', 1), ('easy to read', 1), ('easy to understand', 1), ('easy understand', 1), ('easy undestanding', 1), ('easy-understand', 1), ('effecient approach', 1), ('efficient solution', 1), ('es2015', 1), ('esay-understand', 1), ('expalanation', 1), ('explaination', 1), ('golang-solution', 1), ('hashset', 1), ('intuition', 1), ('iterate', 1), ('iteration', 1), ('iterative', 1), ('izaac', 1), ('java simple', 1), ('js javascript', 1), ('kotlin', 1), ('linear', 1), ('list', 1), ('list comprehension', 1), ('lists', 1), ('loops', 1), ('naive', 1), ('one pass solution', 1), ('optimal', 1), ('pointer', 1), ('readable', 1), ('ruby', 1), ('rust', 1), ('self explanatory', 1), ('self-explanatory', 1), ('set', 1), ('sets', 1), ('simple-solution', 1), ('simpleunderstanding', 1), ('simulation', 1), ('solution', 1), ('stack-based', 1), ('straightforward', 1), ('swif', 1), ('time complexity', 1), ('to understand', 1), ('typescript', 1), ('ultra easy', 1), ('understandable', 1), ('unordered set', 1), ('upvote', 1), ('without-stack', 1)]"
1439,Find the Kth Smallest Sum of a Matrix With Sorted Rows,https://leetcode.com/problems/find-the-kth-smallest-sum-of-a-matrix-with-sorted-rows,"You are given an m * n matrix, mat, and an integer k, which has its rows sorted in non-decreasing order.

You are allowed to choose exactly 1 element from each row to form an array. Return the Kth smallest array sum among all possible arrays.",['heap'],Hard,499,7,26430,15993,[],"[('c#', 5), ('priority queue', 5), ('cpp', 4), ('heap', 4), ('c++', 3), ('python 3', 3), ('backtracking', 2), ('c++ code', 2), ('divide and conquer', 2), ('heapq', 2), ('java', 2), ('javascript', 2), ('priority-queue', 2), ('python', 2), ('akku', 1), ('binary search', 1), ('binarysearh', 1), ('c++ solution', 1), ('cpp solution', 1), ('dfs', 1), ('explanation with code', 1), ('facebook', 1), ('go', 1), ('golang', 1), ('golang-solution', 1), ('greedy', 1), ('java-solution', 1), ('linkedlist', 1), ('linq', 1), ('maxheap', 1), ('optimal', 1), ('priority', 1), ('quickselect', 1), ('recursion', 1), ('rolling hash', 1), ('set', 1), ('sorted-list', 1), ('sorting', 1)]"
1438,Longest Continuous Subarray With Absolute Diff Less Than or Equal to Limit,https://leetcode.com/problems/longest-continuous-subarray-with-absolute-diff-less-than-or-equal-to-limit,"Given an array of integers nums and an integer limit, return the size of the longest non-empty subarray such that the absolute difference between any two elements of this subarray is less than or equal to limit.","['array', 'sliding-window']",Medium,1301,64,121966,54260,[],"[('c++', 17), ('sliding window', 16), ('java', 13), ('slidingwindow', 11), ('deque', 10), ('sliding-window', 9), ('cpp', 7), ('two-pointers', 7), ('c#', 6), ('javascript', 6), ('python', 6), ('python 3', 6), ('cpp solution', 5), ('c++ code', 4), ('priority queue', 4), ('easy-understanding', 3), ('java-solution', 3), ('priority-queue', 3), ('easy', 2), ('map', 2), ('multiset', 2), ('no extra space', 2), ('python3', 2), ('simple solution', 2), ('treemap', 2), ('#easy-understanding', 1), ('#easysolution', 1), ('#explained', 1), ('#explanation', 1), ('#python', 1), ('#python 3', 1), ('#simple', 1), ('2pointers', 1), ('binary-search', 1), ('c++ solution', 1), ('clean', 1), ('clean code', 1), ('comments added', 1), ('divide-and-conquer', 1), ('double-pointers', 1), ('easy-undestand', 1), ('es2015', 1), ('for loops', 1), ('golang', 1), ('google interview', 1), ('hashmap', 1), ('hashset', 1), ('heap', 1), ('heaps', 1), ('java script', 1), ('java solution', 1), ('javascript solution', 1), ('linear time', 1), ('linear-time', 1), ('maximum subarray', 1), ('monotone queue', 1), ('multi-sets', 1), ('on2', 1), ('queue', 1), ('readable', 1), ('ruby', 1), ('rust', 1), ('slide window', 1), ('sorted dictionary', 1), ('swift', 1), ('two-pointer method', 1)]"
1437,Check If All 1's Are at Least Length K Places Away,https://leetcode.com/problems/check-if-all-1s-are-at-least-length-k-places-away,"Given an array nums of 0s and 1s and an integer k, return True if all 1's are at least k places away from each other, otherwise return False.",['array'],Easy,268,178,76803,47462,[],"[('c++', 41), ('java', 38), ('python', 31), ('cpp', 26), ('linear time', 23), ('python 3', 23), ('easy-understanding', 21), ('javascript', 15), ('python3', 13), ('java-solution', 10), ('easy', 8), ('cpp solution', 7), ('easy-to-understand', 7), ('c#', 6), ('easy-undestand', 6), ('simple', 6), ('two-pointers', 6), ('array', 4), ('constant space', 4), ('easytounderstand', 4), ('explained', 4), ('golang', 4), ('javascript solution', 4), ('slidingwindow', 4), ('100 speed', 3), ('c++ code', 3), ('go', 3), ('greedy', 3), ('js', 3), ('100 faster runtime', 2), ('boolean', 2), ('brute force', 2), ('c', 2), ('c++ solution', 2), ('constant memory', 2), ('fast and simple', 2), ('optimal', 2), ('pointer approach', 2), ('ruby', 2), ('single pass', 2), ('swift', 2), ('two-pointer', 2), ('video solution', 2), ('video-explanation', 2), ('#python 3', 1), ('100 faster', 1), ('100 memory', 1), ('100 space', 1), ('2 pointers', 1), ('2pointers', 1), ('99.5', 1), ('accepted solution', 1), ('arr', 1), ('arrays', 1), ('best-solution-ever', 1), ('c code', 1), ('c#-solution', 1), ('count', 1), ('cplusplus', 1), ('cpp easy', 1), ('early termination', 1), ('easy sloution', 1), ('easy-solition', 1), ('easysolution', 1), ('enumerate', 1), ('es2015', 1), ('es6', 1), ('explain', 1), ('explaination', 1), ('explained solution', 1), ('extra space', 1), ('fast', 1), ('flag', 1), ('for loops', 1), ('functional', 1), ('go-solution', 1), ('hashmap', 1), ('help', 1), ('if-else', 1), ('index-value', 1), ('interview', 1), ('iteration', 1), ('java-8', 1), ('javascrip', 1), ('js javascript', 1), ('kotlin', 1), ('linear', 1), ('linear-time', 1), ('list comprehension', 1), ('loop bsed', 1), ('medium', 1), ('o of n', 1), ('one pass', 1), ('one-liner', 1), ('one-pass', 1), ('optimisation', 1), ('performance', 1), ('python2', 1), ('python3.8', 1), ('recursion', 1), ('rust', 1), ('scala', 1), ('sequence', 1), ('series', 1), ('simple clear c++ solution', 1), ('simple solution', 1), ('simple-solution', 1), ('stack', 1), ('stacks', 1), ('straightforward', 1), ('test', 1), ('test-cases', 1), ('two pointers', 1), ('two-pointer-approach', 1), ('twopointers', 1), ('video explaination', 1), ('video explanation', 1)]"
1436,Destination City,https://leetcode.com/problems/destination-city,"You are given the array paths, where paths[i] = [cityAi, cityBi] means there exists a direct path going from cityAi to cityBi. Return the destination city, that is, the city without any path outgoing to another city.

It is guaranteed that the graph of paths forms a line without any loop, therefore, there will be exactly one destination city.",['string'],Easy,592,40,89782,69376,[],"[('c++', 40), ('python 3', 35), ('javascript', 34), ('python', 34), ('java', 29), ('hashmap', 26), ('cpp', 23), ('python3', 18), ('cpp solution', 14), ('java-solution', 13), ('c#', 12), ('sets', 12), ('easy', 10), ('easy-understanding', 10), ('set', 10), ('hashset', 9), ('map', 9), ('simple', 8), ('string', 8), ('c', 7), ('golang', 7), ('cpp easy', 6), ('easy-undestand', 6), ('js', 6), ('go', 5), ('unordered map', 5), ('dictionary', 4), ('easy-to-understand', 4), ('explained', 4), ('c++ code', 3), ('c++11', 3), ('destination city', 3), ('dictonary', 3), ('easytounderstand', 3), ('efficient', 3), ('fast and simple', 3), ('graph', 3), ('hash table', 3), ('javascript solution', 3), ('php', 3), ('c programming', 2), ('commentary', 2), ('dfs', 2), ('dictionaries', 2), ('difference', 2), ('es6', 2), ('fast', 2), ('hash', 2), ('linear time', 2), ('php solution', 2), ('ruby', 2), ('rust', 2), ('sort-function', 2), ('swift', 2), ('vectors', 2), ('#python 3', 1), ('3 approaches', 1), ('90 faster', 1), ('accepted solution', 1), ('beats 100', 1), ('best java solution', 1), ('best space complexity', 1), ('brute force', 1), ('bruteforce', 1), ('c++ hash', 1), ('c++ string', 1), ('clean code', 1), ('comments-added', 1), ('counter', 1), ('defaultdict', 1), ('depth first search', 1), ('destinationcity', 1), ('detailed explanation', 1), ('detailed thinking step', 1), ('dfs simple solution', 1), ('dictionary comprehension', 1), ('directed graph', 1), ('ditctionary', 1), ('easy solution', 1), ('easy to understand', 1), ('efficient solution', 1), ('es2015', 1), ('expalanation', 1), ('explanation with code', 1), ('explanations', 1), ('fast-solution', 1), ('faster', 1), ('fastest', 1), ('generator', 1), ('go-solution', 1), ('golag', 1), ('golang-solution', 1), ('gooder', 1), ('hash map', 1), ('hashmaps', 1), ('hashtables', 1), ('hasmap', 1), ('hints', 1), ('image', 1), ('image-understanding', 1), ('imageexplanation', 1), ('indegree', 1), ('intutive', 1), ('iterative', 1), ('iterator', 1), ('js javascript', 1), ('linear space time', 1), ('linkedlist', 1), ('linq', 1), ('list', 1), ('list comprehension', 1), ('loops', 1), ('map-stl', 1), ('maps', 1), ('microsoft', 1), ('one pass solution', 1), ('pyhton 3', 1), ('python-3', 1), ('python2', 1), ('python3.8', 1), ('pythonic', 1), ('rajat', 1), ('readable', 1), ('recursive', 1), ('set-union', 1), ('simple solution', 1), ('stack', 1), ('test-cases', 1), ('time-optimized', 1), ('trash', 1), ('two-pass', 1), ('two-solutions', 1), ('union', 1), ('unit-test', 1), ('unorderedmap', 1), ('vector', 1), ('video interview', 1), ('video-explanation', 1)]"
1449,Form Largest Integer With Digits That Add up to Target,https://leetcode.com/problems/form-largest-integer-with-digits-that-add-up-to-target,"Given an array of integers cost and an integer target. Return the maximum integer you can paint under the following rules:


	The cost of painting a digit (i+1) is given by cost[i] (0 indexed).
	The total cost used must be equal to target.
	Integer does not have digits 0.


Since the answer may be too large, return it as string.

If there is no way to paint any integer given the condition, return ""0"".","['string', 'dynamic-programming']",Hard,341,6,20604,9176,[],"[('dynamic programming', 11), ('dp', 7), ('c#', 4), ('java', 4), ('recursion', 4), ('c++', 3), ('cpp', 3), ('python', 3), ('greedy', 2), ('memoization', 2), ('stacks', 2), ('biweekly-17-solutions', 1), ('bottomup', 1), ('c++ code', 1), ('clear explanation', 1), ('commented', 1), ('cpp solution', 1), ('detailed explanation', 1), ('dfs', 1), ('dp-techqique', 1), ('golang', 1), ('help needed', 1), ('intuitive', 1), ('java-solution', 1), ('javascript', 1), ('python3', 1), ('recursive', 1), ('time complexity', 1), ('top down', 1), ('top-down dp', 1)]"
1448,Count Good Nodes in Binary Tree,https://leetcode.com/problems/count-good-nodes-in-binary-tree,"Given a binary tree root, a node X in the tree is named good if in the path from root to X there are no nodes with a value greater than X.

Return the number of good nodes in the binary tree.","['tree', 'depth-first-search']",Medium,709,33,62484,44774,[],"[('dfs', 54), ('c++', 36), ('java', 32), ('python', 31), ('recursion', 27), ('python 3', 22), ('dfs simple solution', 17), ('cpp', 16), ('python3', 14), ('java-solution', 11), ('javascript', 11), ('preorder traversal', 11), ('recursive', 8), ('tree-traversal', 8), ('binary-tree', 7), ('c#', 7), ('cpp solution', 7), ('easy-undestand', 6), ('bfs', 5), ('depth first search', 5), ('easy', 5), ('easy-understanding', 5), ('c++ code', 4), ('easy to understand', 4), ('easy-to-understand', 4), ('golang', 4), ('simple', 4), ('dfs-recursive', 3), ('iterative', 3), ('linear time', 3), ('recursive easy', 3), ('recursive solution', 3), ('simple solution', 3), ('swift', 3), ('tree traversal', 3), ('binary tree', 2), ('breadth first search', 2), ('dfs recursive', 2), ('dfs simple', 2), ('dfs solution', 2), ('dfs-tree', 2), ('easy to read', 2), ('easy-solition', 2), ('easytounderstand', 2), ('explained', 2), ('golang-solution', 2), ('kotlin', 2), ('pre-order traversal', 2), ('preorder', 2), ('recurision', 2), ('tree problem', 2), ('upvote', 2), ('#bottomup', 1), ('#dfs', 1), ('0ms', 1), ('100 runtime', 1), ('100 speed', 1), ('2-liner', 1), ('anime', 1), ('array', 1), ('asahiocean', 1), ('backtracking', 1), ('beginner friendly', 1), ('beginnerfriendly', 1), ('binary tree paths', 1), ('c', 1), ('c++ easy to understand', 1), ('c++ recursion', 1), ('clean code', 1), ('clear explanation', 1), ('commented', 1), ('comments', 1), ('countgoodnodesintree', 1), ('cpp doubt', 1), ('cpp easy', 1), ('cpp soltuion', 1), ('deep-first-search', 1), ('def', 1), ('detailed explanation', 1), ('dfs traversal', 1), ('dfs-bfs', 1), ('dfs-in-order', 1), ('dfs-iterative', 1), ('dfs-topdown', 1), ('divide-and-conquer', 1), ('easysolution', 1), ('explaination', 1), ('explanation with code', 1), ('fast and simple', 1), ('faster', 1), ('go', 1), ('go-solution', 1), ('intuitive', 1), ('intutive', 1), ('iterative-dfs', 1), ('java recursion', 1), ('javascript solution', 1), ('js', 1), ('logarithmic space', 1), ('max-stack', 1), ('mrmagician', 1), ('pre-order', 1), ('preorder-recursion', 1), ('python2', 1), ('readable', 1), ('reccursion', 1), ('recurrance', 1), ('recursive-dfs', 1), ('ruby', 1), ('rust', 1), ('search', 1), ('self explanatory', 1), ('solution', 1), ('stack', 1), ('stacks', 1), ('swift5', 1), ('template', 1), ('time-complexity-n', 1), ('top-down', 1), ('typescript', 1), ('ultra simple', 1)]"
1447,Simplified Fractions,https://leetcode.com/problems/simplified-fractions,"Given an integer n, return a list of all simplified fractions between 0 and 1 (exclusive) such that the denominator is less-than-or-equal-to n. The fractions can be in any order.",['math'],Medium,148,28,24802,15446,[],"[('gcd', 18), ('c++', 11), ('java', 10), ('python', 8), ('cpp', 7), ('python3', 6), ('javascript', 5), ('c#', 4), ('easy-understanding', 4), ('c++ code', 3), ('golang', 3), ('java-solution', 3), ('sets', 3), ('easy-undestand', 2), ('list', 2), ('math', 2), ('python 3', 2), ('1-line', 1), ('brute force', 1), ('c--', 1), ('clear explanation', 1), ('clickbait', 1), ('commented', 1), ('cpp solution', 1), ('detailed explanation', 1), ('dictonary', 1), ('easy', 1), ('easy-understand', 1), ('explained', 1), ('explanation', 1), ('golang-solution', 1), ('greatest-common-divisor', 1), ('integer to string', 1), ('javacript', 1), ('js', 1), ('map', 1), ('mathematics', 1), ('nice', 1), ('number-theory', 1), ('pattern-based', 1), ('readable', 1), ('recursion', 1), ('recursive', 1), ('ruby', 1), ('rust', 1), ('set', 1), ('string', 1), ('string builder', 1), ('swift', 1), ('video explanation', 1)]"
1446,Consecutive Characters,https://leetcode.com/problems/consecutive-characters,"Given a string s, the power of the string is the maximum length of a non-empty substring that contains only one unique character.

Return the power of the string.",['string'],Easy,523,15,113892,69841,"[""Max Consecutive Ones"", ""Count Number of Homogenous Substrings""]","[('c++', 50), ('java', 48), ('cpp', 28), ('python 3', 27), ('python', 19), ('java-solution', 17), ('easy-understanding', 16), ('javascript', 15), ('c#', 9), ('python3', 8), ('cpp solution', 7), ('string', 7), ('easy', 6), ('easy-to-understand', 6), ('c', 5), ('c++ code', 5), ('easytounderstand', 5), ('linear time', 5), ('two-pointers', 5), ('cpp easy', 4), ('explained', 4), ('javascript solution', 4), ('swift', 4), ('100 memory', 3), ('c++ solution', 3), ('clean code', 3), ('fast and simple', 3), ('golang', 3), ('iteration', 3), ('pythonpython3', 3), ('simple', 3), ('sliding-window', 3), ('100 faster runtime', 2), ('100 speed', 2), ('array', 2), ('c code', 2), ('char compare', 2), ('consecutive characters', 2), ('constant space', 2), ('easy-undestand', 2), ('explained solution', 2), ('java ac solution', 2), ('js', 2), ('kotlin', 2), ('one pass', 2), ('optimal', 2), ('ruby', 2), ('slidingwindow', 2), ('string-operation', 2), ('swift5', 2), ('two-pointer', 2), ('understandable', 2), ('video-explanation', 2), ('#hashmaps', 1), ('#onepass #c++ #simple', 1), ('#python 3', 1), ('1-line', 1), ('100', 1), ('100 faster', 1), ('100 space', 1), ('2 approaches', 1), ('2-pointers', 1), ('2pointers', 1), ('adhoc', 1), ('beats 100 percent', 1), ('beginner friendly', 1), ('brute force', 1), ('character', 1), ('chars', 1), ('clear explanation', 1), ('commented', 1), ('cpp with explanation', 1), ('detailed explanation', 1), ('dynamic programming', 1), ('easiest', 1), ('easy-code', 1), ('easy-implementation', 1), ('easy-solition', 1), ('easy-understsand', 1), ('easysolution', 1), ('easyunderstand', 1), ('es6', 1), ('explanation', 1), ('explanations', 1), ('fast', 1), ('fast-solution', 1), ('fasterthan100', 1), ('fastest', 1), ('gaoling', 1), ('github', 1), ('go-solution', 1), ('golang-solution', 1), ('groupby', 1), ('half-pass best case', 1), ('intuitive', 1), ('iterative', 1), ('java simple', 1), ('longest substring', 1), ('loop', 1), ('maximum', 1), ('memory-efficient', 1), ('microsoft onsite', 1), ('naive-solution', 1), ('on', 1), ('one line', 1), ('one pass solution', 1), ('one-liner', 1), ('optimized', 1), ('php', 1), ('php solution', 1), ('python solution', 1), ('python2', 1), ('rajat', 1), ('readable', 1), ('regular-expression', 1), ('simple-solution', 1), ('slide window', 1), ('solution-python', 1), ('string parsing', 1), ('string-to-integer', 1), ('ting', 1), ('typescript', 1), ('unit-test', 1), ('video explaination', 1), ('while-loop', 1), ('whiteboard explanation', 1)]"
1424,Diagonal Traverse II,https://leetcode.com/problems/diagonal-traverse-ii,"Given a list of lists of integers, nums, return all elements of nums in diagonal order as shown in the below images.","['array', 'sort']",Medium,514,62,55934,25969,[],"[('java', 18), ('python 3', 11), ('python', 10), ('c++', 8), ('c#', 5), ('hashmap', 5), ('simple solution', 5), ('golang', 4), ('map', 4), ('easy-solition', 3), ('python3', 3), ('sorting', 3), ('arraylist', 2), ('bfs', 2), ('cpp', 2), ('cpp solution', 2), ('easy-understanding', 2), ('easy-undestand', 2), ('explained', 2), ('go', 2), ('iterator', 2), ('java-solution', 2), ('list', 2), ('stacks', 2), ('stream', 2), ('swift', 2), ('#ruby', 1), ('99.9', 1), ('arraybuffer', 1), ('beats 100 memory', 1), ('binary-tree', 1), ('bucket', 1), ('c++ code', 1), ('clean code', 1), ('Comparable', 1), ('coordinate geometry', 1), ('deque', 1), ('diagonaltraverseii', 1), ('dictionary', 1), ('easy', 1), ('easy-to-understand', 1), ('facebook', 1), ('generator', 1), ('golang-solution', 1), ('indicies sum', 1), ('intuitive', 1), ('javascript', 1), ('kotlinvim', 1), ('level-order-traversal', 1), ('linkedhashmap', 1), ('list comprehension', 1), ('map-stl', 1), ('matrix', 1), ('one pass hash map', 1), ('ordered-dict', 1), ('php', 1), ('picture explanation', 1), ('pythonpython3', 1), ('scala', 1), ('sort', 1), ('sort-function', 1), ('sortedset', 1), ('stack', 1), ('stack-based', 1), ('traversal', 1), ('tree map', 1), ('treemap', 1), ('treeset', 1), ('try-catch', 1)]"
1423,Maximum Points You Can Obtain from Cards,https://leetcode.com/problems/maximum-points-you-can-obtain-from-cards,"There are several cards arranged in a row, and each card has an associated number of points The points are given in the integer array cardPoints.

In one step, you can take one card from the beginning or from the end of the row. You have to take exactly k cards.

Your score is the sum of the points of the cards you have taken.

Given the integer array cardPoints and the integer k, return the maximum score you can obtain.","['array', 'dynamic-programming', 'sliding-window']",Medium,1301,63,120016,56447,[],"[('sliding-window', 33), ('c++', 26), ('slidingwindow', 23), ('java', 21), ('python', 18), ('python 3', 17), ('cpp', 12), ('javascript', 12), ('python3', 11), ('dynamic programming', 9), ('prefix sum', 8), ('dp', 7), ('sliding window', 7), ('c#', 6), ('easy-understanding', 6), ('cpp solution', 4), ('golang', 4), ('java-solution', 4), ('slide window', 4), ('easy', 3), ('explained', 3), ('go', 3), ('simple', 3), ('brute force', 2), ('deque', 2), ('dfs', 2), ('easy-undestand', 2), ('one-liner', 2), ('ruby', 2), ('rust', 2), ('1-line', 1), ('1-liner', 1), ('100 memory', 1), ('100 percent', 1), ('array', 1), ('bug in leetcode', 1), ('c++ code', 1), ('circular-array', 1), ('cpp doubt', 1), ('cpp easy', 1), ('dynamic-programming', 1), ('efficient solution', 1), ('elegent', 1), ('error', 1), ('explained solution', 1), ('fast and simple', 1), ('golang-solution', 1), ('google', 1), ('help', 1), ('iteration', 1), ('iterative', 1), ('javascript recursive', 1), ('javascript solution', 1), ('linear time', 1), ('loops', 1), ('memoization', 1), ('memory-efficient', 1), ('minimum subarray sum', 1), ('optimal', 1), ('optimal solution', 1), ('pictorial', 1), ('picture explanation', 1), ('readable', 1), ('recursion', 1), ('recursive', 1), ('recusion', 1), ('reduce', 1), ('sliding window algorithm', 1), ('sliding-window-maximum', 1), ('suffix sum', 1), ('summary', 1), ('swift', 1), ('techbacker', 1), ('two-pointers', 1), ('very easy to understand', 1), ('video explanation', 1), ('visualization', 1)]"
1422,Maximum Score After Splitting a String,https://leetcode.com/problems/maximum-score-after-splitting-a-string,"Given a string s of zeros and ones, return the maximum score after splitting the string into two non-empty substrings (i.e. left substring and right substring).

The score after splitting a string is the number of zeros in the left substring plus the number of ones in the right substring.",['string'],Easy,330,19,52576,30255,[],"[('c++', 26), ('javascript', 18), ('python', 17), ('python 3', 12), ('easy-understanding', 10), ('java', 9), ('cpp', 8), ('prefix sum', 6), ('python3', 6), ('cpp solution', 5), ('c#', 4), ('c++ code', 4), ('easy', 4), ('simple solution', 4), ('explained', 3), ('golang', 3), ('java-solution', 3), ('linear time', 3), ('easy-undestand', 2), ('explaination', 2), ('go', 2), ('golang-solution', 2), ('one pass', 2), ('short code', 2), ('100 faster runtime', 1), ('accumulation-table', 1), ('best', 1), ('c', 1), ('clean', 1), ('comments', 1), ('constant space', 1), ('counting', 1), ('cpp easy', 1), ('cpp soltuion', 1), ('cpp-solution', 1), ('csharp', 1), ('easy-to-understand', 1), ('expalanation', 1), ('fast', 1), ('fast and simple', 1), ('fastest', 1), ('go-solution', 1), ('golang solution', 1), ('greedy approach', 1), ('help', 1), ('help me', 1), ('intutive', 1), ('iteration', 1), ('js', 1), ('js javascript', 1), ('linear-time', 1), ('map', 1), ('maximum score', 1), ('maxscoreaftersplitting', 1), ('one-pass', 1), ('prefix', 1), ('prefix-sum', 1), ('python solution', 1), ('readable', 1), ('ruby', 1), ('rust', 1), ('saravana', 1), ('scala', 1), ('self explanatory', 1), ('simple', 1), ('simple clear c++ solution', 1), ('simple-solution', 1), ('single pass', 1), ('sliding-window', 1), ('space', 1), ('straight-forward', 1), ('string', 1), ('suffix', 1), ('swift', 1), ('time', 1), ('ultra simple', 1), ('unit-test', 1), ('upvote', 1)]"
1420,Build Array Where You Can Find The Maximum Exactly K Comparisons,https://leetcode.com/problems/build-array-where-you-can-find-the-maximum-exactly-k-comparisons,"Given three integers n, m and k. Consider the following algorithm to find the maximum element of an array of positive integers:

You should build the array arr which has the following properties:


	arr has exactly n integers.
	1 <= arr[i] <= m where (0 <= i < n).
	After applying the mentioned algorithm to arr, the value search_cost is equal to k.


Return the number of ways to build the array arr under the mentioned conditions. As the answer may grow large, the answer must be computed modulo 10^9 + 7.",['dynamic-programming'],Hard,283,8,11669,7496,[],"[('dynamic programming', 8), ('dp', 5), ('dynamic-programming', 3), ('memoization', 3), ('python', 2), ('python 3', 2), ('bottom up', 1), ('bottom-up-algorithm', 1), ('c#', 1), ('c++ code', 1), ('c++ iterative sol', 1), ('concise', 1), ('constant time', 1), ('cpp solution', 1), ('dp c++', 1), ('dp-techqique', 1), ('easy to understand', 1), ('easy-understanding', 1), ('easy-undestand', 1), ('examples', 1), ('golang', 1), ('intuition', 1), ('java', 1), ('javascript', 1), ('javascript solution', 1), ('python3', 1), ('recursion', 1), ('recursively', 1), ('top-down dp', 1), ('topdown', 1)]"
1419,Minimum Number of Frogs Croaking,https://leetcode.com/problems/minimum-number-of-frogs-croaking,"Given the string croakOfFrogs, which represents a combination of the string ""croak"" from different frogs, that is, multiple frogs can croak at the same time, so multiple “croak” are mixed. Return the minimum number of different frogs to finish all the croak in the given string.

A valid ""croak"" means a frog is printing 5 letters ‘c’, ’r’, ’o’, ’a’, ’k’ sequentially. The frogs have to print all five letters to finish a croak. If the given string is not a combination of valid ""croak"" return -1.",['string'],Medium,442,30,35977,17188,[],"[('python', 11), ('python 3', 8), ('java', 7), ('cpp', 6), ('hashmap', 6), ('c#', 5), ('javascript', 5), ('cpp solution', 4), ('c++', 3), ('c++ code', 3), ('easy-understanding', 3), ('golang', 3), ('c++ solution', 2), ('easy-undestand', 2), ('java-solution', 2), ('kotlin', 2), ('kotlin-solution', 2), ('python3', 2), ('100 beat', 1), ('100 memory', 1), ('100 space', 1), ('100 speed', 1), ('arrays', 1), ('concise', 1), ('count', 1), ('dictionaries', 1), ('dictonary', 1), ('dynamic programming', 1), ('full explanation', 1), ('go', 1), ('golang-solution', 1), ('gready', 1), ('greedy', 1), ('hash table', 1), ('heapq', 1), ('help', 1), ('illustration', 1), ('java ac solution', 1), ('js', 1), ('linear time', 1), ('list', 1), ('map', 1), ('meeting room', 1), ('memoziation', 1), ('pythonsolution', 1), ('readable', 1), ('ruby', 1), ('simple solution', 1), ('sorting', 1), ('string', 1), ('suboptimal', 1), ('swift', 1)]"
1418,Display Table of Food Orders in a Restaurant,https://leetcode.com/problems/display-table-of-food-orders-in-a-restaurant,"Given the array orders, which represents the orders that customers have done in a restaurant. More specifically orders[i]=[customerNamei,tableNumberi,foodItemi] where customerNamei is the name of the customer, tableNumberi is the table customer sit at, and foodItemi is the item customer orders.

Return the restaurant's “display table”. The “display table” is a table whose row entries denote how many of each food item each table ordered. The first column is the table number and the remaining columns correspond to each food item in alphabetical order. The first row should be a header whose first column is “Table”, followed by the names of the food items. Note that the customer names are not part of the table. Additionally, the rows should be sorted in numerically increasing order.",['hash-table'],Medium,122,235,20373,14141,[],"[('hashmap', 14), ('c++', 12), ('python 3', 10), ('javascript', 9), ('python', 9), ('map', 7), ('python3', 7), ('cpp', 6), ('java', 6), ('c#', 4), ('easy-understanding', 4), ('dictionary', 3), ('golang', 3), ('sort', 3), ('#java', 2), ('cpp solution', 2), ('csharp', 2), ('dictionaries', 2), ('javascript solution', 2), ('set', 2), ('sorting', 2), ('#bruteforce', 1), ('#collections', 1), ('#firstpost', 1), ('#hashmap', 1), ('#javascript', 1), ('#restaurant', 1), ('100 faster', 1), ('100 memory', 1), ('100 space', 1), ('100 speed', 1), ('brute force', 1), ('brute-force', 1), ('bruteforce', 1), ('bucket sort', 1), ('c# solutions', 1), ('clean code', 1), ('cpp easy', 1), ('defaultdict', 1), ('dict', 1), ('easy understanding', 1), ('easy-to-understand', 1), ('full explained', 1), ('golang-solution', 1), ('hash', 1), ('hash map', 1), ('hashset', 1), ('hashtable', 1), ('java-solution', 1), ('kotlin', 1), ('pythonpython3', 1), ('readable', 1), ('ruby', 1), ('saravana', 1), ('searching', 1), ('sortedset', 1), ('stream', 1), ('swift', 1), ('table of food orders', 1), ('treemap', 1), ('two hashmaps', 1), ('typescript', 1)]"
1417,Reformat The String,https://leetcode.com/problems/reformat-the-string,"Given alphanumeric string s. (Alphanumeric string is a string consisting of lowercase English letters and digits).

You have to find a permutation of the string where no letter is followed by another letter and no digit is followed by another digit. That is, no two adjacent characters have the same type.

Return the reformatted string or return an empty string if it is impossible to reformat the string.",['string'],Easy,258,57,56174,31788,[],"[('java', 24), ('c++', 18), ('python', 17), ('javascript', 16), ('python 3', 16), ('cpp', 11), ('easy-understanding', 10), ('c#', 7), ('java-solution', 6), ('python3', 6), ('easy', 5), ('easy-undestand', 4), ('stack', 3), ('zip', 3), ('cpp easy', 2), ('easy-to-understand', 2), ('explained', 2), ('go', 2), ('golang', 2), ('linear time', 2), ('readable', 2), ('simple solution', 2), ('stacks', 2), ('straight forward', 2), ('string builder', 2), ('string-operation', 2), ('swift', 2), ('two pointers', 2), ('two-pointers', 2), ('zip longest', 2), ('#python3', 1), ('100 memory', 1), ('2 pointers', 1), ('brute force', 1), ('c', 1), ('clean code', 1), ('constant-space', 1), ('cpp solution', 1), ('deque', 1), ('fast', 1), ('golang-solution', 1), ('helper function', 1), ('java ac solution', 1), ('javascript solution', 1), ('join', 1), ('linear', 1), ('list merge', 1), ('memory-efficient', 1), ('optimal', 1), ('partition', 1), ('python2', 1), ('ruby', 1), ('runtime-error', 1), ('saravana', 1), ('simple clear c++ solution', 1), ('simple-solution', 1), ('stack-based', 1), ('straight-forward', 1), ('string', 1), ('stringbuilder', 1), ('unit-test', 1), ('very easy to understand', 1)]"
1434,Number of Ways to Wear Different Hats to Each Other,https://leetcode.com/problems/number-of-ways-to-wear-different-hats-to-each-other,"There are n people and 40 types of hats labeled from 1 to 40.

Given a list of list of integers hats, where hats[i] is a list of all hats preferred by the i-th person.

Return the number of ways that the n people wear different hats to each other.

Since the answer may be too large, return it modulo 10^9 + 7.","['dynamic-programming', 'bit-manipulation']",Hard,386,5,15879,6272,[],"[('dynamic programming', 8), ('bitmask', 5), ('memoization', 5), ('bitmasking', 4), ('c++', 3), ('dp', 3), ('python3', 3), ('backtracking', 1), ('bit mask', 1), ('bitwise', 1), ('c#', 1), ('combination', 1), ('concise', 1), ('cpp solution', 1), ('dfs', 1), ('golang', 1), ('hashmap', 1), ('invert', 1), ('java', 1), ('javascript', 1), ('memorization', 1), ('memory-search', 1), ('mobius inversion formula', 1), ('python', 1), ('python 3', 1), ('tle', 1), ('top down dp', 1), ('topdown', 1), ('with comments', 1)]"
1433,Check If a String Can Break Another String,https://leetcode.com/problems/check-if-a-string-can-break-another-string,"Given two strings: s1 and s2 with the same size, check if some permutation of string s1 can break some permutation of string s2 or vice-versa. In other words s2 can break s1 or vice-versa.

A string x can break string y (both of size n) if x[i] >= y[i] (in alphabetical order) for all i between 0 and n-1.","['string', 'greedy']",Medium,300,85,31940,21536,[],"[('c++', 24), ('java', 14), ('python', 13), ('python 3', 13), ('cpp', 10), ('python3', 10), ('sorting', 10), ('javascript', 8), ('c#', 6), ('sort', 6), ('greedy', 5), ('easy-undestand', 4), ('greedy algorithm', 4), ('java-solution', 4), ('golang', 3), ('greedy approach', 3), ('javascript solution', 3), ('simple', 3), ('sorted array', 3), ('string', 3), ('100 speed', 2), ('c++ code', 2), ('clean code', 2), ('cpp solution', 2), ('easy', 2), ('easy-understanding', 2), ('iterative', 2), ('linear', 2), ('linear time', 2), ('simple solution', 2), ('100 faster', 1), ('100 memory', 1), ('algorithm', 1), ('algorithms', 1), ('best time complexity', 1), ('binary search', 1), ('c', 1), ('c++ iterative sol', 1), ('concise', 1), ('counter', 1), ('cpp easy', 1), ('csharp', 1), ('dict', 1), ('easy to understand', 1), ('easy-solition', 1), ('easy-understand', 1), ('explanation of logic', 1), ('explanation with code', 1), ('explanation with logic', 1), ('fast and simple', 1), ('fast-solution', 1), ('frequency count', 1), ('go', 1), ('go lang', 1), ('go-solution', 1), ('golang-solution', 1), ('greedy algorithms', 1), ('greedyapproach', 1), ('heapq', 1), ('intuitive', 1), ('iteratve', 1), ('java streams', 1), ('js', 1), ('kotlin', 1), ('mapping', 1), ('o-n', 1), ('one pass', 1), ('php', 1), ('queue', 1), ('readable', 1), ('short', 1), ('short code', 1), ('solution', 1), ('sort-function', 1), ('sorted', 1), ('string-operation', 1), ('two-pointer', 1)]"
1432,Max Difference You Can Get From Changing an Integer,https://leetcode.com/problems/max-difference-you-can-get-from-changing-an-integer,"You are given an integer num. You will apply the following steps exactly two times:


	Pick a digit x (0 <= x <= 9).
	Pick another digit y (0 <= y <= 9). The digit y can be equal to x.
	Replace all the occurrences of x in the decimal representation of num by y.
	The new integer cannot have any leading zeros, also the new integer cannot be 0.


Let a and b be the results of applying the operations to num the first and second times, respectively.

Return the max difference between a and b.",['string'],Medium,108,141,23700,10150,[],"[('c++', 11), ('brute force', 8), ('java', 6), ('python', 6), ('python 3', 6), ('greedy', 5), ('c++ code', 4), ('javascript', 4), ('c#', 3), ('cpp', 3), ('python3', 3), ('string', 3), ('cpp solution', 2), ('easy sloution', 2), ('easy-to-understand', 2), ('easy-understanding', 2), ('explained', 2), ('javascript solution', 2), ('linear time', 2), ('straight-forward', 2), ('100', 1), ('beats 100', 1), ('best memory', 1), ('brute-force', 1), ('bruteforce', 1), ('c++ solution', 1), ('concise-solution', 1), ('constant space', 1), ('cpp easy', 1), ('csharp', 1), ('easy-solution', 1), ('explanation', 1), ('fast-solution', 1), ('golang', 1), ('integer to string', 1), ('iteration', 1), ('iterative', 1), ('java-solution', 1), ('linear-time', 1), ('math', 1), ('maxdifffromchangingint', 1), ('non-brute force', 1), ('readable', 1), ('rust', 1), ('string-operation', 1), ('type-cast', 1)]"
1431,Kids With the Greatest Number of Candies,https://leetcode.com/problems/kids-with-the-greatest-number-of-candies,"Given the array candies and the integer extraCandies, where candies[i] represents the number of candies that the ith kid has.

For each kid check if there is a way to distribute extraCandies among the kids such that he or she can have the greatest number of candies among them. Notice that multiple kids can have the greatest number of candies.",['array'],Easy,756,180,237501,209395,[],"[('c++', 61), ('python 3', 52), ('python', 51), ('java', 49), ('javascript', 38), ('java-solution', 30), ('cpp', 27), ('python3', 25), ('c#', 22), ('easy-understanding', 20), ('javascript solution', 14), ('cpp solution', 13), ('easy', 11), ('c', 10), ('simple solution', 10), ('swift', 9), ('c++ code', 8), ('linear time', 8), ('one-liner', 8), ('golang', 7), ('simple', 7), ('array', 6), ('cpp easy', 6), ('easy-undestand', 6), ('fast and simple', 6), ('list comprehension', 6), ('rust', 6), ('easy-to-understand', 5), ('kotlin', 5), ('constant space', 4), ('fast', 4), ('fast-solution', 4), ('js', 4), ('map', 4), ('ruby', 4), ('scala', 4), ('vector', 4), ('#swift', 3), ('0ms', 3), ('100 faster runtime', 3), ('boolean', 3), ('candies', 3), ('easytounderstand', 3), ('explanation', 3), ('golang-solution', 3), ('python3.8', 3), ('solution', 3), ('typescript', 3), ('100', 2), ('100 faster cpp', 2), ('100 memory', 2), ('100 space', 2), ('100 speed', 2), ('arrays', 2), ('c code', 2), ('c++ easy to understand', 2), ('c++11', 2), ('efficient solution', 2), ('es6', 2), ('functional', 2), ('go', 2), ('go-solution', 2), ('greatest candies', 2), ('greatest number', 2), ('greedy', 2), ('greedy approach', 2), ('kids with candies', 2), ('leetcode', 2), ('linq', 2), ('loop', 2), ('math.max', 2), ('maximum', 2), ('one line', 2), ('oneliner', 2), ('stl vector', 2), ('swiftsolution', 2), ('two-lines', 2), ('#array', 1), ('#java', 1), ('#java8', 1), ('#python', 1), ('#python 3', 1), ('#python3', 1), ('0ms runtime', 1), ('0ms-solution', 1), ('100 faster', 1), ('1431', 1), ('2 pass', 1), ('5 liner', 1), ('83 faster', 1), ('99 fast', 1), ('99 memory', 1), ('99.5 faster', 1), ('array easy', 1), ('array greedy', 1), ('arraylist', 1), ('basic', 1), ('beginner friendly', 1), ('best', 1), ('brute force', 1), ('c programming', 1), ('c# solutions', 1), ('c#-solution', 1), ('c++ solution', 1), ('c++ stl', 1), ('clean-efficient-code', 1), ('commentary', 1), ('concise', 1), ('constant memory', 1), ('cpp 100', 1), ('csharp', 1), ('documentation', 1), ('easiest', 1), ('easiest solution', 1), ('easy-peasy', 1), ('efficient', 1), ('enumerate', 1), ('es2015', 1), ('fast solution', 1), ('faster', 1), ('faster than 100.00', 1), ('fasterthan100', 1), ('fastest', 1), ('fp', 1), ('functional-programming', 1), ('functools', 1), ('github', 1), ('heap', 1), ('heaps algorithm', 1), ('help', 1), ('honey', 1), ('idiomatic', 1), ('iteration', 1), ('iterator', 1), ('java ac solution', 1), ('javascrip', 1), ('kids', 1), ('lambda', 1), ('linear-scan', 1), ('linear-time', 1), ('list', 1), ('list-comprehension', 1), ('logic explained clearly', 1), ('loop method', 1), ('max number', 1), ('memory efficient', 1), ('no lambda function', 1), ('noob', 1), ('optimisation', 1), ('optimized', 1), ('optimum', 1), ('performance', 1), ('py', 1), ('pyhton3', 1), ('python3.9', 1), ('pythonic', 1), ('redfoos', 1), ('reduce', 1), ('self-explanatory', 1), ('sequence', 1), ('series', 1), ('short solution', 1), ('simple-solution', 1), ('solution-sharing-cpp', 1), ('stl', 1), ('stl algorithms', 1), ('straight-forward', 1), ('stream', 1), ('swift5', 1), ('transform', 1), ('two lines solution', 1), ('two-pass', 1), ('unit-test', 1), ('with-explanation', 1), ('zea7ot', 1)]"
1411,Number of Ways to Paint N × 3 Grid,https://leetcode.com/problems/number-of-ways-to-paint-n-3-grid,"You have a grid of size n x 3 and you want to paint each cell of the grid with exactly one of the three colors: Red, Yellow, or Green while making sure that no two adjacent cells have the same color (i.e., no two cells that share vertical or horizontal sides have the same color).

Given n the number of rows of the grid, return the number of ways you can paint this grid. As the answer may grow large, the answer must be computed modulo 109 + 7.",['dynamic-programming'],Hard,442,24,26482,16047,[],"[('dynamic programming', 12), ('dp', 7), ('python', 7), ('python 3', 6), ('java', 5), ('c++', 4), ('python3', 4), ('cpp solution', 3), ('memoization', 3), ('c++ code', 2), ('dynamic-programming', 2), ('easy-understanding', 2), ('javascript', 2), ('100 space', 1), ('100 speed', 1), ('4 liner', 1), ('backtracking', 1), ('bottom up approach', 1), ('c', 1), ('c#', 1), ('closed-form', 1), ('comments', 1), ('concise', 1), ('cpp', 1), ('dfs', 1), ('dfs recursive', 1), ('dfs simple solution', 1), ('explained', 1), ('golang', 1), ('graph', 1), ('graph-theory', 1), ('hashmap', 1), ('heavily commented', 1), ('image', 1), ('java ac solution', 1), ('logn', 1), ('math', 1), ('math-proof', 1), ('math-solution', 1), ('mathematics', 1), ('pyrhon', 1), ('pythonic', 1), ('recurrence', 1), ('simple', 1), ('solution', 1), ('swift', 1), ('top-down', 1), ('top-down dp', 1)]"
1410,HTML Entity Parser,https://leetcode.com/problems/html-entity-parser,"HTML entity parser is the parser that takes HTML code as input and replace all the entities of the special characters by the characters itself.

The special characters and their entities for HTML are:


	Quotation Mark: the entity is &quot; and symbol character is "".
	Single Quote Mark: the entity is &apos; and symbol character is '.
	Ampersand: the entity is &amp; and symbol character is &.
	Greater Than Sign: the entity is &gt; and symbol character is >.
	Less Than Sign: the entity is &lt; and symbol character is <.
	Slash: the entity is &frasl; and symbol character is /.


Given the input text string to the HTML parser, you have to implement the entity parser.

Return the text after replacing the entities by the special characters.","['string', 'stack']",Medium,93,213,29410,15890,[],"[('java', 13), ('c++', 9), ('python3', 9), ('python', 8), ('simple solution', 8), ('cpp', 5), ('javascript', 5), ('python 3', 5), ('c#', 4), ('regex', 4), ('java-solution', 3), ('trie', 3), ('easy-understanding', 2), ('stack', 2), ('string', 2), ('stringbuilder', 2), ('100 speed', 1), ('best-solution-ever', 1), ('c', 1), ('c++ code', 1), ('clean', 1), ('comments', 1), ('cpp easy', 1), ('dictionary c#', 1), ('easy-to-understand', 1), ('easytoundersatand', 1), ('fast and simple', 1), ('golang', 1), ('hashmap', 1), ('html', 1), ('htmlentityparser', 1), ('if-else', 1), ('kmp', 1), ('kotlin', 1), ('one pass', 1), ('readable', 1), ('regexmatch', 1), ('regular-expression', 1), ('stacks', 1), ('state-transition', 1), ('string-operation', 1), ('string.replace', 1), ('tries', 1), ('tries in c++', 1), ('two-pointers', 1), ('twopointer', 1), ('understandable', 1), ('zip', 1)]"
1409,Queries on a Permutation With Key,https://leetcode.com/problems/queries-on-a-permutation-with-key,"Given the array queries of positive integers between 1 and m, you have to process all queries[i] (from i=0 to i=queries.length-1) according to the following rules:


	In the beginning, you have the permutation P=[1,2,3,...,m].
	For the current i, find the position of queries[i] in the permutation P (indexing from 0) and then move this at the beginning of the permutation P. Notice that the position of queries[i] in P is the result for queries[i].


Return an array containing the result for the given queries.",['array'],Medium,207,396,34185,28020,[],"[('c++', 20), ('java', 16), ('python 3', 15), ('python', 14), ('cpp solution', 11), ('cpp', 10), ('javascript', 9), ('easy-understanding', 8), ('simple solution', 7), ('python3', 6), ('c#', 5), ('golang', 5), ('java-solution', 5), ('c++ code', 4), ('go', 4), ('array', 3), ('easy', 3), ('linkedlists', 3), ('vector', 3), ('arraylist', 2), ('c', 2), ('clean code', 2), ('easy understanding', 2), ('easy-to-understand', 2), ('easy-undestand', 2), ('es6', 2), ('fast-solution', 2), ('golang-solution', 2), ('javascript solution', 2), ('linked-list', 2), ('list', 2), ('simulation', 2), ('7ms runtime', 1), ('aj', 1), ('bit', 1), ('brutal force', 1), ('cache', 1), ('comments', 1), ('cpp 100', 1), ('cpp easy', 1), ('deque', 1), ('esy sol', 1), ('expalanation', 1), ('explaination', 1), ('explained', 1), ('explanatory comments', 1), ('fast', 1), ('few lines', 1), ('good variable names', 1), ('hashmap', 1), ('inplace', 1), ('iterative way', 1), ('java simple', 1), ('java solution', 1), ('java streams', 1), ('javascrip', 1), ('linked lists', 1), ('list operations', 1), ('python2', 1), ('question need help', 1), ('simple', 1), ('simple clear c++ solution', 1), ('singly-linked-list', 1), ('structured code', 1), ('vector-operation', 1)]"
1408,String Matching in an Array,https://leetcode.com/problems/string-matching-in-an-array,"Given an array of string words. Return all strings in words which is substring of another word in any order. 

String words[i] is substring of words[j], if can be obtained removing some characters to left and/or right side of words[j].",['string'],Easy,319,60,63439,40408,[],"[('c++', 19), ('java', 17), ('python', 16), ('javascript', 15), ('python 3', 12), ('python3', 12), ('cpp', 11), ('easy-understanding', 8), ('brute force', 6), ('c#', 4), ('cpp solution', 4), ('go', 4), ('java-solution', 4), ('c++ easy to understand', 3), ('easy-undestand', 3), ('easytounderstand', 3), ('golang', 3), ('javascript solution', 3), ('ruby', 3), ('simple solution', 3), ('1-line', 2), ('array-sort', 2), ('c++ code', 2), ('easy', 2), ('hash set', 2), ('kmp algorithm', 2), ('sorted array', 2), ('string', 2), ('string-operation', 2), ('swift', 2), ('1-liner', 1), ('2liner', 1), ('32ms', 1), ('3ms', 1), ('boring', 1), ('brute-force', 1), ('c', 1), ('combination', 1), ('comments', 1), ('compare-function', 1), ('cpp easy', 1), ('easy to understand', 1), ('easy-to-understand', 1), ('easy-understsand', 1), ('explained', 1), ('facebook interview', 1), ('fast and simple', 1), ('faster', 1), ('find', 1), ('generator-expression', 1), ('go-solution', 1), ('golang-solution', 1), ('gorillaz', 1), ('hashmap', 1), ('hashset', 1), ('itertools', 1), ('kotlin', 1), ('nestedfunction', 1), ('one-liner', 1), ('pythonic', 1), ('rajat', 1), ('set', 1), ('sets', 1), ('simple', 1), ('simple and fast', 1), ('simple-solution', 1), ('sort', 1), ('sort-function', 1), ('string matching', 1), ('string-matching', 1), ('substring', 1), ('suffixtrie', 1), ('tries', 1), ('unit-test', 1), ('very-easy', 1)]"
1406,Stone Game III,https://leetcode.com/problems/stone-game-iii,"Alice and Bob continue their games with piles of stones. There are several stones arranged in a row, and each stone has an associated value which is an integer given in the array stoneValue.

Alice and Bob take turns, with Alice starting first. On each player's turn, that player can take 1, 2 or 3 stones from the first remaining stones in the row.

The score of each player is the sum of values of the stones taken. The score of each player is 0 initially.

The objective of the game is to end with the highest score, and the winner is the player with the highest score and there could be a tie. The game continues until all the stones have been taken.

Assume Alice and Bob play optimally.

Return ""Alice"" if Alice will win, ""Bob"" if Bob will win or ""Tie"" if they end the game with the same score.",['dynamic-programming'],Hard,548,10,32622,18987,"[""Stone Game V"", ""Stone Game VI"", ""Stone Game VII""]","[('dynamic programming', 15), ('c++', 9), ('dp', 7), ('python', 6), ('memoization', 5), ('c++ code', 3), ('cpp', 3), ('dfs', 3), ('java', 3), ('python 3', 3), ('python3', 3), ('c#', 2), ('easy', 2), ('javascript', 2), ('linear time', 2), ('minimax', 2), ('recursion', 2), ('100 space', 1), ('100 speed', 1), ('circular queue', 1), ('clean code', 1), ('concise-solution', 1), ('constant memory', 1), ('cpp easy', 1), ('dfs-iterative', 1), ('dp-techqique', 1), ('dynamic-programming', 1), ('easy understand', 1), ('esay-understand', 1), ('explained', 1), ('help needed', 1), ('java-solution', 1), ('js', 1), ('linear', 1), ('memorization', 1), ('minmax', 1), ('python2', 1), ('recusion', 1), ('simple', 1), ('tle', 1), ('top down approach', 1), ('understandable', 1)]"
1404,Number of Steps to Reduce a Number in Binary Representation to One,https://leetcode.com/problems/number-of-steps-to-reduce-a-number-in-binary-representation-to-one,"Given a number s in their binary representation. Return the number of steps to reduce it to 1 under the following rules:


	
	If the current number is even, you have to divide it by 2.
	
	
	If the current number is odd, you have to add 1 to it.
	


It's guaranteed that you can always reach to one for all testcases.","['string', 'bit-manipulation']",Medium,300,26,35732,17902,[],"[('java', 11), ('bit manipulation', 8), ('c++', 8), ('python', 8), ('javascript', 7), ('python3', 7), ('python 3', 6), ('java-solution', 5), ('c#', 4), ('cpp', 4), ('easy-undestand', 4), ('golang', 4), ('cpp solution', 3), ('binary', 2), ('csharp', 2), ('easy', 2), ('easy-understanding', 2), ('iterative', 2), ('javascript solution', 2), ('simple', 2), ('stringbuilder', 2), ('#bfs', 1), ('#bitwise', 1), ('#java', 1), ('10 lines', 1), ('100 faster cpp', 1), ('100 speed', 1), ('accepted', 1), ('array', 1), ('binary number', 1), ('binary numbers', 1), ('bit-manipulation', 1), ('bitwise', 1), ('c', 1), ('c++ iterative sol', 1), ('c++ solution', 1), ('comments-added', 1), ('conditional-expression', 1), ('counting algorithm', 1), ('decimal', 1), ('easy to understand', 1), ('expalanation', 1), ('explained solution', 1), ('explanation of logic', 1), ('fuck noobs', 1), ('javascrip', 1), ('linear', 1), ('linear time', 1), ('pyhton3', 1), ('python2', 1), ('question', 1), ('readable', 1), ('recursion', 1), ('runtime-error', 1), ('sequence', 1), ('series', 1), ('simple solution', 1), ('simplest', 1), ('simulation', 1), ('string', 1), ('string parsing', 1), ('string-operation', 1), ('type-cast', 1)]"
1403,Minimum Subsequence in Non-Increasing Order,https://leetcode.com/problems/minimum-subsequence-in-non-increasing-order,"Given the array nums, obtain a subsequence of the array whose sum of elements is strictly greater than the sum of the non included elements in such subsequence. 

If there are multiple solutions, return the subsequence with minimum size and if there still exist multiple solutions, return the subsequence with the maximum total sum of all its elements. A subsequence of an array can be obtained by erasing some (possibly zero) elements from the array. 

Note that the solution with the given constraints is guaranteed to be unique. Also return the answer sorted in non-increasing order.","['greedy', 'sort']",Easy,216,276,52106,37486,[],"[('c++', 21), ('python', 19), ('python 3', 18), ('java', 16), ('javascript', 13), ('cpp', 12), ('python3', 11), ('easy-understanding', 7), ('simple solution', 7), ('sort', 6), ('java-solution', 5), ('c#', 4), ('easy', 4), ('golang', 4), ('greedy approach', 4), ('sorted array', 4), ('c', 3), ('counting-sort', 3), ('cpp solution', 3), ('easy to understand', 3), ('easy-to-understand', 3), ('easy-undestand', 3), ('array', 2), ('beginner friendly', 2), ('explained', 2), ('greedy', 2), ('js', 2), ('rust', 2), ('sorting', 2), ('typescript', 2), ('100', 1), ('100 faster', 1), ('100 memory', 1), ('akku', 1), ('arrays.sort', 1), ('brute force', 1), ('bucket-sort', 1), ('c++ solution', 1), ('comments', 1), ('comments added', 1), ('cpp easy', 1), ('dfs-topdown', 1), ('dictionary', 1), ('easy-solition', 1), ('easytounderstand', 1), ('efficient solution', 1), ('explained solution', 1), ('fast and simple', 1), ('generalized', 1), ('go', 1), ('go-solution', 1), ('greedy algorithm', 1), ('hash table', 1), ('heap', 1), ('heapq', 1), ('immutable-values', 1), ('in-place', 1), ('iteration', 1), ('javascript solution', 1), ('linear-time', 1), ('malloc', 1), ('math', 1), ('max', 1), ('max heap', 1), ('multimap', 1), ('prefix sum', 1), ('prefixsum', 1), ('priority queue', 1), ('python2', 1), ('readable', 1), ('recurision', 1), ('ruby', 1), ('scala', 1), ('simple', 1), ('simplest', 1), ('sort-function', 1), ('stl', 1), ('stl algorithms', 1), ('string', 1), ('suboptimal', 1), ('timsort', 1)]"
1416,Restore The Array,https://leetcode.com/problems/restore-the-array,"A program was supposed to print an array of integers. The program forgot to print whitespaces and the array is printed as a string of digits and all we know is that all integers in the array were in the range [1, k] and there are no leading zeros in the array.

Given the string s and the integer k. There can be multiple ways to restore the array.

Return the number of possible array that can be printed as a string s using the mentioned program.

The number of ways could be very large so return it modulo 10^9 + 7",['dynamic-programming'],Hard,235,8,24117,8847,[],"[('dynamic programming', 9), ('python', 6), ('c++', 4), ('dp', 4), ('memoization', 3), ('c#', 2), ('java', 2), ('javascript', 2), ('python3', 2), ('simple solution', 2), ('bottom up', 1), ('bottom-up-algorithm', 1), ('cpp', 1), ('dfs simple solution', 1), ('dfs-topdown', 1), ('dp c++', 1), ('dynamic-programming', 1), ('javascript solution', 1), ('linear', 1), ('python 3', 1), ('ruby', 1), ('sliding-window', 1)]"
1415,The k-th Lexicographical String of All Happy Strings of Length n,https://leetcode.com/problems/the-k-th-lexicographical-string-of-all-happy-strings-of-length-n,"A happy string is a string that:


	consists only of letters of the set ['a', 'b', 'c'].
	s[i] != s[i + 1] for all values of i from 1 to s.length - 1 (string is 1-indexed).


For example, strings ""abc"", ""ac"", ""b"" and ""abcbabcbcb"" are all happy strings and strings ""aa"", ""baa"" and ""ababbc"" are not happy strings.

Given two integers n and k, consider a list of all happy strings of length n sorted in lexicographical order.

Return the kth string of this list or return an empty string if there are less than k happy strings of length n.",['backtracking'],Medium,398,14,25099,17574,[],"[('backtracking', 27), ('c++', 24), ('java', 15), ('javascript', 12), ('python', 11), ('cpp', 8), ('python 3', 8), ('easy-undestand', 7), ('dfs', 6), ('recursion', 5), ('bfs', 4), ('c#', 4), ('c++ code', 4), ('cpp solution', 4), ('dfs simple solution', 4), ('easy-understanding', 4), ('python3', 4), ('brute-force', 3), ('easy', 3), ('easy-understand', 3), ('golang', 3), ('java-solution', 3), ('math', 3), ('binary-search', 2), ('c++ recursion', 2), ('combinatorics', 2), ('concise', 2), ('easy understanding', 2), ('fastest', 2), ('greedy approach', 2), ('javascript solution', 2), ('linear time', 2), ('recursive', 2), ('0ms', 1), ('100 speed', 1), ('back tracking', 1), ('backtacking', 1), ('backtarcking', 1), ('backtrack', 1), ('bfs simple solution', 1), ('binary search', 1), ('bit manipulation', 1), ('bitmanipulation', 1), ('bits', 1), ('bitwise operation', 1), ('c++ iterative sol', 1), ('cpp easy', 1), ('dynamic programming', 1), ('dynamic typing', 1), ('easytounderstand', 1), ('explained', 1), ('fast and simple', 1), ('fast-solution', 1), ('faster than 100.00', 1), ('fastest solution', 1), ('go', 1), ('golang-solution', 1), ('greedy', 1), ('java ac solution', 1), ('javascrip', 1), ('javascript recursive', 1), ('js', 1), ('js javascript', 1), ('kotlin', 1), ('linear', 1), ('linear-time', 1), ('math-solution', 1), ('minimalizm', 1), ('modular arithmetic', 1), ('on', 1), ('one-liner', 1), ('optimized', 1), ('priority queue', 1), ('python2', 1), ('queue', 1), ('readable', 1), ('recursive solution', 1), ('recursively', 1), ('simple', 1), ('stacks', 1), ('stringbuilder', 1), ('tree-traversal', 1), ('trees', 1), ('typescript', 1)]"
1414,Find the Minimum Number of Fibonacci Numbers Whose Sum Is K,https://leetcode.com/problems/find-the-minimum-number-of-fibonacci-numbers-whose-sum-is-k,"Given an integer k, return the minimum number of Fibonacci numbers whose sum is equal to k. The same Fibonacci number can be used multiple times.

The Fibonacci numbers are defined as:


	F1 = 1
	F2 = 1
	Fn = Fn-1 + Fn-2 for n > 2.

It is guaranteed that for the given constraints we can always find such Fibonacci numbers that sum up to k.","['array', 'greedy']",Medium,429,40,34077,21516,[],"[('greedy', 21), ('c++', 12), ('java', 10), ('greedy approach', 9), ('cpp', 8), ('binary-search', 7), ('javascript', 7), ('python', 6), ('python 3', 6), ('python3', 6), ('c#', 4), ('easy', 4), ('easy-understanding', 4), ('c++ code', 3), ('easy-undestand', 3), ('java-solution', 3), ('cpp solution', 2), ('javascript solution', 2), ('recursion', 2), ('simple', 2), ('simple solution', 2), ('upper bound', 2), ('2ms', 1), ('array', 1), ('c++11', 1), ('commented', 1), ('constant-space', 1), ('easy to understand', 1), ('easy-solition', 1), ('esay-understand', 1), ('explaination', 1), ('explained', 1), ('fast and simple', 1), ('go', 1), ('go-solution', 1), ('golang', 1), ('golang-solution', 1), ('greedy algorithm', 1), ('iterative', 1), ('list', 1), ('php', 1), ('readable', 1), ('recursive', 1), ('simplestsolution', 1), ('solution', 1), ('treemap', 1), ('treeset', 1)]"
1413,Minimum Value to Get Positive Step by Step Sum,https://leetcode.com/problems/minimum-value-to-get-positive-step-by-step-sum,"Given an array of integers nums, you start with an initial positive value startValue.

In each iteration, you calculate the step by step sum of startValue plus elements in nums (from left to right).

Return the minimum positive value of startValue such that the step by step sum is never less than 1.",['array'],Easy,355,107,44050,28827,[],"[('c++', 21), ('python', 18), ('javascript', 16), ('python 3', 16), ('cpp', 15), ('java', 12), ('prefix sum', 9), ('python3', 7), ('c#', 6), ('java-solution', 6), ('cpp solution', 5), ('easy-understanding', 4), ('binary-search', 2), ('c++ code', 2), ('cpp easy', 2), ('easy-undestand', 2), ('go', 2), ('golang', 2), ('java ac solution', 2), ('linear time', 2), ('rust', 2), ('simple', 2), ('swift', 2), ('#javascript', 1), ('0ms runtime', 1), ('1-line', 1), ('100 faster', 1), ('100 memory', 1), ('100 speed', 1), ('1413', 1), ('accepted solution', 1), ('array', 1), ('beginner friendly', 1), ('constant space', 1), ('csharp', 1), ('detailed explanation', 1), ('easy to read', 1), ('easy to understand', 1), ('easy-code', 1), ('easy-solition', 1), ('easy-to-understand', 1), ('explained solution', 1), ('fast', 1), ('fast and simple', 1), ('go-solution', 1), ('gorillaz', 1), ('iteration', 1), ('javascript solution', 1), ('linear', 1), ('linear complexity', 1), ('memory-efficient', 1), ('minvalpositivestepsum', 1), ('one-liner', 1), ('recursive', 1), ('simple solution', 1), ('simple-solution', 1), ('simplest', 1), ('solution', 1), ('thinking', 1)]"
1397,Find All Good Strings,https://leetcode.com/problems/find-all-good-strings,"Given the strings s1 and s2 of size n and the string evil, return the number of good strings.

A good string has size n, it is alphabetically greater than or equal to s1, it is alphabetically smaller than or equal to s2, and it does not contain the string evil as a substring. Since the answer can be a huge number, return this modulo 109 + 7.",['dynamic-programming'],Hard,181,90,7518,2914,[],"[('dfs', 2), ('java', 2), ('kmp algorithm', 2), ('python', 2), ('c', 1), ('c++ easy to understand', 1), ('dfs-topdown', 1), ('dp', 1), ('dynamic-programming', 1), ('easy-undestand', 1), ('explanations', 1), ('golang', 1), ('graph', 1), ('kmp', 1), ('linear memory', 1), ('linear time', 1), ('memoization', 1), ('python3', 1), ('simple', 1)]"
1396,Design Underground System,https://leetcode.com/problems/design-underground-system,"An underground railway system is keeping track of customer travel times between different stations. They are using this data to calculate the average time it takes to travel from one station to another.

Implement the UndergroundSystem class:


	void checkIn(int id, string stationName, int t)

	
		A customer with a card ID equal to id, checks in at the station stationName at time t.
		A customer can only be checked into one place at a time.
	
	
	void checkOut(int id, string stationName, int t)
	
		A customer with a card ID equal to id, checks out from the station stationName at time t.
	
	
	double getAverageTime(string startStation, string endStation)
	
		Returns the average time it takes to travel from startStation to endStation.
		The average time is computed from all the previous traveling times from startStation to endStation that happened directly, meaning a check in at startStation followed by a check out from endStation.
		The time it takes to travel from startStation to endStation may be different from the time it takes to travel from endStation to startStation.
		There will be at least one customer that has traveled from startStation to endStation before getAverageTime is called.
	
	


You may assume all calls to the checkIn and checkOut methods are consistent. If a customer checks in at time t1 then checks out at time t2, then t1 < t2. All events happen in chronological order.",['design'],Medium,740,56,86016,61713,[],"[('hashmap', 49), ('c++', 28), ('java', 20), ('python', 20), ('cpp', 16), ('easy-understanding', 10), ('javascript', 10), ('python 3', 9), ('python3', 9), ('c#', 8), ('map', 8), ('golang', 7), ('simple', 7), ('cpp solution', 6), ('dictionary', 6), ('hash table', 6), ('easy-to-understand', 5), ('clean code', 4), ('easy', 4), ('explained', 4), ('go', 4), ('java-solution', 4), ('csharp', 3), ('dictionary c#', 3), ('dictonary', 3), ('optimal', 3), ('system design', 3), ('unordered map', 3), ('clean solution', 2), ('design', 2), ('dict', 2), ('fast', 2), ('hash', 2), ('hashtable', 2), ('java ac solution', 2), ('kotlin', 2), ('kotlin-solution', 2), ('map-stl', 2), ('maps', 2), ('oops', 2), ('rust', 2), ('simple solution', 2), ('swift', 2), ('typescript', 2), ('unordermap', 2), ('video-explanation', 2), ('#hashmap', 1), ('#java', 1), ('100 faster', 1), ('100 speed', 1), ('architecture', 1), ('awesome samriddhi', 1), ('bloomberg', 1), ('c', 1), ('c#-solution', 1), ('c++ hash', 1), ('c++ solution', 1), ('class', 1), ('class design', 1), ('comments-added', 1), ('comparator', 1), ('constant', 1), ('constant time', 1), ('data structures', 1), ('designundergroundsystem', 1), ('dictionairy', 1), ('dicts', 1), ('easy to underatnd', 1), ('easy to understand', 1), ('easy-peasy', 1), ('easy-undestand', 1), ('easytounderstand', 1), ('es6', 1), ('explanation of logic', 1), ('explanations', 1), ('fast and simple', 1), ('get', 1), ('golang-solution', 1), ('hash-function', 1), ('hash-table', 1), ('hasher', 1), ('hashmaps', 1), ('heap', 1), ('help needed', 1), ('interval', 1), ('interview', 1), ('interview-friendly', 1), ('js', 1), ('lambda', 1), ('list', 1), ('low memory', 1), ('o1', 1), ('object oriented solution', 1), ('object-array', 1), ('one hashmap', 1), ('oop', 1), ('optimisation', 1), ('ordered map', 1), ('performance', 1), ('precision', 1), ('pythno3', 1), ('ritik', 1), ('robust', 1), ('rolling-average', 1), ('ruby', 1), ('straight-forward', 1), ('system design interview', 1), ('trick', 1), ('tuple', 1), ('tuple comprehension', 1), ('tuples', 1), ('understandable', 1), ('unorderedmap', 1), ('unorderedmapwithpairaskey', 1), ('video explanation', 1)]"
1395,Count Number of Teams,https://leetcode.com/problems/count-number-of-teams,"There are n soldiers standing in a line. Each soldier is assigned a unique rating value.

You have to form a team of 3 soldiers amongst them under the following rules:


	Choose 3 soldiers with index (i, j, k) with rating (rating[i], rating[j], rating[k]).
	A team is valid if: (rating[i] < rating[j] < rating[k]) or (rating[i] > rating[j] > rating[k]) where (0 <= i < j < k < n).


Return the number of teams you can form given the conditions. (soldiers can be part of multiple teams).",['array'],Medium,943,123,75137,55995,[],"[('c++', 23), ('cpp', 19), ('java', 17), ('python', 12), ('python 3', 12), ('c#', 8), ('javascript', 8), ('brute force', 7), ('dynamic programming', 6), ('python3', 6), ('brute-force', 5), ('easy', 5), ('simple', 5), ('ruby', 4), ('easy-understanding', 3), ('java-solution', 3), ('simple solution', 3), ('backtracking', 2), ('c', 2), ('clean code', 2), ('csharp', 2), ('easy-to-understand', 2), ('fast and simple', 2), ('fast-solution', 2), ('segment tree', 2), ('0ms', 1), ('90+ solution', 1), ('amazon', 1), ('arrays', 1), ('beginner friendly', 1), ('best c++ solution', 1), ('binary-index-tree', 1), ('bruteforce', 1), ('bst', 1), ('c++ best solution', 1), ('chinese', 1), ('combination', 1), ('constantspace', 1), ('countnumberofteams', 1), ('cpp solution', 1), ('cubic', 1), ('dfs', 1), ('dp', 1), ('dp-programming', 1), ('dynamic', 1), ('easy to understand', 1), ('easy-undestand', 1), ('es6', 1), ('explained', 1), ('fast', 1), ('fastest', 1), ('fenwick', 1), ('fenwick-tree', 1), ('generator expressions', 1), ('golang', 1), ('hashmap', 1), ('js', 1), ('js javascript', 1), ('kotlin', 1), ('leetcode 1375', 1), ('lis', 1), ('map', 1), ('medium', 1), ('merge sort', 1), ('most optimal', 1), ('no dp', 1), ('o-nlogn', 1), ('oa2020', 1), ('one-liner', 1), ('optimal solution', 1), ('optimized', 1), ('recursively', 1), ('self explanatory', 1), ('slide window', 1), ('two pointers', 1), ('ultra easy', 1), ('upvote', 1), ('video link', 1), ('video solution', 1), ('visualization', 1)]"
1394,Find Lucky Integer in an Array,https://leetcode.com/problems/find-lucky-integer-in-an-array,"Given an array of integers arr, a lucky integer is an integer which has a frequency in the array equal to its value.

Return a lucky integer in the array. If there are multiple lucky integers return the largest of them. If there is no lucky integer return -1.",['array'],Easy,374,13,79453,50132,[],"[('c++', 28), ('java', 27), ('python', 23), ('python 3', 19), ('javascript', 18), ('cpp', 17), ('hashmap', 16), ('python3', 14), ('java-solution', 10), ('c#', 9), ('easy-understanding', 9), ('easy-undestand', 7), ('simple', 7), ('easy to understand', 5), ('map', 5), ('swift', 5), ('c', 4), ('counter', 4), ('cpp solution', 4), ('hash table', 4), ('simple solution', 4), ('array', 3), ('dictonary', 3), ('easy', 2), ('easytounderstand', 2), ('explained', 2), ('functional-programming', 2), ('go-solution', 2), ('hashtable', 2), ('js', 2), ('one-liner', 2), ('readable', 2), ('ruby', 2), ('rust', 2), ('sort', 2), ('100', 1), ('1394', 1), ('array nesting', 1), ('begginerfriendly', 1), ('beginner friendly', 1), ('c++ code', 1), ('collections', 1), ('commented code', 1), ('countarray', 1), ('counters', 1), ('csharp', 1), ('dict', 1), ('dictionairy', 1), ('dictionaries', 1), ('easy to read', 1), ('easy understanding', 1), ('easy-understand', 1), ('efficient', 1), ('fast and simple', 1), ('fast-solution', 1), ('go', 1), ('golang', 1), ('golang-solution', 1), ('hash', 1), ('iterators', 1), ('java ac solution', 1), ('javascript solution', 1), ('leetcode 1395', 1), ('library', 1), ('list-comprehension', 1), ('lucky integer', 1), ('luckyinteger', 1), ('mapreduce', 1), ('one-pass', 1), ('php', 1), ('php solution', 1), ('pointer', 1), ('py', 1), ('python-2', 1), ('python2', 1), ('pythonpython3', 1), ('simple logic', 1), ('simple-solution', 1), ('solution c++', 1), ('solution-sharing-cpp', 1), ('swift5', 1), ('unit-test', 1), ('unordered map', 1)]"
1392,Longest Happy Prefix,https://leetcode.com/problems/longest-happy-prefix,"A string is called a happy prefix if is a non-empty prefix which is also a suffix (excluding itself).

Given a string s. Return the longest happy prefix of s .

Return an empty string if no such prefix exists.",['string'],Hard,339,19,30435,12846,[],"[('kmp', 9), ('kmp algorithm', 8), ('python', 8), ('c++', 5), ('easy-understanding', 5), ('python 3', 5), ('java', 4), ('brute force', 3), ('cpp', 3), ('javascript', 3), ('python3', 3), ('golang', 2), ('lps', 2), ('c', 1), ('c#', 1), ('cpp easy', 1), ('dp', 1), ('fasterthan100', 1), ('give stars and subscribe', 1), ('greedy', 1), ('greedy approach', 1), ('iterative', 1), ('java-solution', 1), ('knuth morris pratt', 1), ('naive-solution', 1), ('observations', 1), ('optimal', 1), ('pattern-matching', 1), ('prefix sum', 1), ('pyhton', 1), ('rabinkarp', 1), ('short code', 1), ('string', 1), ('swift', 1)]"
1391,Check if There is a Valid Path in a Grid,https://leetcode.com/problems/check-if-there-is-a-valid-path-in-a-grid,"Given a m x n grid. Each cell of the grid represents a street. The street of grid[i][j] can be:

	1 which means a street connecting the left cell and the right cell.
	2 which means a street connecting the upper cell and the lower cell.
	3 which means a street connecting the left cell and the lower cell.
	4 which means a street connecting the right cell and the lower cell.
	5 which means a street connecting the left cell and the upper cell.
	6 which means a street connecting the right cell and the upper cell.




You will initially start at the street of the upper-left cell (0,0). A valid path in the grid is a path which starts from the upper left cell (0,0) and ends at the bottom-right cell (m - 1, n - 1). The path should only follow the streets.

Notice that you are not allowed to change any street.

Return true if there is a valid path in the grid or false otherwise.","['depth-first-search', 'breadth-first-search']",Medium,327,175,32517,14661,[],"[('dfs', 18), ('java', 11), ('dfs simple solution', 9), ('python', 9), ('c++', 8), ('python3', 8), ('bfs', 5), ('cpp', 5), ('simple solution', 5), ('python 3', 4), ('backtracking', 3), ('c#', 3), ('cpp solution', 3), ('golang', 3), ('java-solution', 3), ('c++11', 2), ('dfs solution', 2), ('dfs-bfs', 2), ('javascript', 2), ('simple', 2), ('union find', 2), ('#bfs', 1), ('#bruteforce', 1), ('#cpp', 1), ('#dfs', 1), ('#easysolution', 1), ('#java', 1), ('100 memory', 1), ('arrays', 1), ('bfs java', 1), ('bit manipulation', 1), ('breadth first search', 1), ('clean code', 1), ('csharp', 1), ('dfs-recursive', 1), ('dfs-topdown', 1), ('easy understanding', 1), ('easy-long-solution', 1), ('easy-understanding', 1), ('enum', 1), ('explained', 1), ('faster than 85', 1), ('game', 1), ('grid', 1), ('hardtounderstand', 1), ('kotlin', 1), ('loop', 1), ('path-tracking', 1), ('readable', 1), ('recursive-dfs', 1), ('simulation', 1), ('traversing', 1), ('while loop', 1), ('zea7ot', 1)]"
1389,Create Target Array in the Given Order,https://leetcode.com/problems/create-target-array-in-the-given-order,"Given two arrays of integers nums and index. Your task is to create target array under the following rules:


	Initially target array is empty.
	From left to right read nums[i] and index[i], insert at index index[i] the value nums[i] in target array.
	Repeat the previous step until there are no elements to read in nums and index.


Return the target array.

It is guaranteed that the insertion operations will be valid.",['array'],Easy,499,683,110613,93963,[],"[('java', 52), ('python 3', 37), ('c++', 34), ('javascript', 30), ('python', 27), ('cpp', 21), ('python3', 20), ('c', 13), ('insert', 13), ('java-solution', 13), ('easy-understanding', 12), ('c#', 10), ('cpp solution', 10), ('easy', 10), ('golang', 9), ('list', 7), ('vector', 7), ('array', 6), ('go', 6), ('javascript solution', 6), ('arraylist', 5), ('easy-undestand', 5), ('100 speed', 4), ('c++ code', 4), ('ruby', 4), ('simple solution', 4), ('0ms', 3), ('cpp easy', 3), ('csharp', 3), ('easy-to-understand', 3), ('easytounderstand', 3), ('fast and simple', 3), ('fast-solution', 3), ('golang-solution', 3), ('kotlin', 3), ('loops', 3), ('rust', 3), ('splice', 3), ('swift', 3), ('typescript', 3), ('zip', 3), ('#python 3', 2), ('c code', 2), ('c++ solution', 2), ('c++11', 2), ('easy to understand', 2), ('efficient solution', 2), ('index', 2), ('js', 2), ('linked list', 2), ('scala', 2), ('simple', 2), ('vector-operation', 2), ('#python #easy', 1), ('0 ms', 1), ('100 memory', 1), ('100 space', 1), ('1ms', 1), ('array shifting', 1), ('arrays.fill', 1), ('asahiocean', 1), ('basic', 1), ('beating-100-submission', 1), ('begginer friendly', 1), ('brute force', 1), ('brute-force', 1), ('c programming', 1), ('c++ easy to understand', 1), ('clean', 1), ('concise', 1), ('concise-solution', 1), ('cpp 100', 1), ('debug', 1), ('easiest solution', 1), ('easy sloution', 1), ('easyunderstanding', 1), ('es6', 1), ('explained', 1), ('explantion', 1), ('for beginners', 1), ('for loop', 1), ('for loops', 1), ('github', 1), ('help', 1), ('help needed', 1), ('insertion sort', 1), ('iteration', 1), ('javasccript', 1), ('javscript', 1), ('linked-list', 1), ('linkedlist', 1), ('loop method', 1), ('merge-sort', 1), ('monotone stack', 1), ('optimized', 1), ('php', 1), ('php solution', 1), ('pyhton3', 1), ('python2', 1), ('pythonic', 1), ('readable', 1), ('recusion', 1), ('right-shift', 1), ('shortcode', 1), ('simpler', 1), ('slice', 1), ('slicing', 1), ('solution', 1), ('solution-sharing-cpp', 1), ('straightforward', 1), ('stupid', 1), ('tail-recursive', 1), ('target-array', 1), ('unit-test', 1), ('very easy', 1), ('very easy to understand', 1)]"
1402,Reducing Dishes,https://leetcode.com/problems/reducing-dishes,"A chef has collected data on the satisfaction level of his n dishes. Chef can cook any dish in 1 unit of time.

Like-time coefficient of a dish is defined as the time taken to cook that dish including previous dishes multiplied by its satisfaction level  i.e.  time[i]*satisfaction[i]

Return the maximum sum of Like-time coefficient that the chef can obtain after dishes preparation.

Dishes can be prepared in any order and the chef can discard some dishes to get this maximum value.",['dynamic-programming'],Hard,432,90,29964,21585,[],"[('python', 14), ('cpp', 13), ('dynamic programming', 13), ('c++', 12), ('python 3', 10), ('java', 7), ('sorting', 7), ('dp', 6), ('c#', 5), ('sort', 5), ('cpp solution', 4), ('golang', 4), ('dynamic-programming', 3), ('easy-understanding', 3), ('greedy', 3), ('java-solution', 3), ('python3', 3), ('c++ easy to understand', 2), ('cpp easy', 2), ('dp-techqique', 2), ('explained', 2), ('explained solution', 2), ('go', 2), ('intuitive', 2), ('memoization', 2), ('noob coding', 2), ('optimal', 2), ('rust', 2), ('100', 1), ('100 speed', 1), ('1ms', 1), ('90+', 1), ('95 time', 1), ('accumulate', 1), ('binary-search', 1), ('c++ algorithms', 1), ('c++ code', 1), ('commented', 1), ('concise-solution', 1), ('early stopping', 1), ('easy', 1), ('easy sloution', 1), ('easy to understand', 1), ('easy understanding', 1), ('easy-undestand', 1), ('easysolution', 1), ('efficient', 1), ('explanations', 1), ('fast and simple', 1), ('fast-solution', 1), ('fewest-line', 1), ('gkt', 1), ('go-solution', 1), ('golang solution', 1), ('greedy approach', 1), ('hints', 1), ('javascript', 1), ('kl ana kl', 1), ('knapsack', 1), ('kotlin', 1), ('nlogn', 1), ('peak finding', 1), ('pre sorting', 1), ('prefix sum', 1), ('prefix-sum-array', 1), ('python2', 1), ('recrusive', 1), ('recursive', 1), ('recursive-dfs', 1), ('redfoos', 1), ('rust vec', 1), ('scala', 1), ('short code', 1), ('simple solution', 1), ('sort-function', 1), ('sorted array', 1), ('suffix sum', 1), ('swift', 1), ('top down', 1), ('zero space', 1)]"
1400,Construct K Palindrome Strings,https://leetcode.com/problems/construct-k-palindrome-strings,"Given a string s and an integer k. You should construct k non-empty palindrome strings using all the characters in s.

Return True if you can use all the characters in s to construct k palindrome strings or False otherwise.",['greedy'],Medium,345,43,32906,20733,[],"[('java', 7), ('easy', 6), ('python', 6), ('c++', 4), ('javascript', 4), ('python 3', 4), ('c#', 3), ('python3', 3), ('simple', 3), ('100 beat', 2), ('cpp', 2), ('easy-understanding', 2), ('go', 2), ('hashmap', 2), ('java-solution', 2), ('javascript solution', 2), ('js', 2), ('string', 2), ('100', 1), ('100 faster', 1), ('100 memory', 1), ('100 space', 1), ('100 speed', 1), ('bit masking', 1), ('bucket sort', 1), ('c++ solution', 1), ('clean code', 1), ('commentary', 1), ('constant space', 1), ('count', 1), ('csharp', 1), ('explained', 1), ('explained solution', 1), ('explanation with logic', 1), ('golang', 1), ('greedy', 1), ('greedy algorithm', 1), ('greedy approach', 1), ('hashset', 1), ('js javascript', 1), ('linear time', 1), ('map', 1), ('one pass', 1), ('optimal', 1), ('palindrome', 1), ('palindrome-check', 1), ('python2', 1), ('simple and fast', 1), ('swift', 1), ('understandable', 1)]"
1401,Circle and Rectangle Overlapping,https://leetcode.com/problems/circle-and-rectangle-overlapping,"Given a circle represented as (radius, x_center, y_center) and an axis-aligned rectangle represented as (x1, y1, x2, y2), where (x1, y1) are the coordinates of the bottom-left corner, and (x2, y2) are the coordinates of the top-right corner of the rectangle.

Return True if the circle and rectangle are overlapped otherwise return False.

In other words, check if there are any point (xi, yi) such that belongs to the circle and the rectangle at the same time.",['geometry'],Medium,163,46,17753,7559,[],"[('geometry', 5), ('java', 5), ('easy-undestand', 3), ('java-solution', 3), ('python', 3), ('python 3', 3), ('c#', 2), ('c++', 2), ('c++ code', 2), ('easytounderstand', 2), ('faster than 100.00', 2), ('javascript', 2), ('math', 2), ('python3', 2), ('0ms', 1), ('100 memory', 1), ('beginners', 1), ('brute force', 1), ('c', 1), ('cpp', 1), ('csharp', 1), ('dfs', 1), ('easy to understand', 1), ('easy understanding', 1), ('easy-understanding', 1), ('explaination', 1), ('go', 1), ('go-solution', 1), ('golang', 1), ('golang solution', 1), ('golang-solution', 1), ('help', 1), ('images', 1), ('math solution', 1), ('o1', 1), ('simpler', 1), ('swift', 1)]"
1399,Count Largest Group,https://leetcode.com/problems/count-largest-group,"Given an integer n. Each number from 1 to n is grouped according to the sum of its digits. 

Return how many groups have the largest size.",['array'],Easy,181,478,35116,22956,[],"[('c++', 18), ('hashmap', 18), ('java', 16), ('cpp', 11), ('python', 11), ('python 3', 10), ('python3', 9), ('javascript', 7), ('c#', 6), ('cpp solution', 3), ('easy', 3), ('easy-to-understand', 3), ('golang', 3), ('java-solution', 3), ('0ms runtime', 2), ('100 memory', 2), ('100 speed', 2), ('c++ code', 2), ('dict', 2), ('dictionary', 2), ('easy to understand', 2), ('easy-understanding', 2), ('easy-undestand', 2), ('explaination', 2), ('explained', 2), ('hash table', 2), ('java solution', 2), ('kotlin', 2), ('one pass solution', 2), ('python2', 2), ('readable', 2), ('100 space', 1), ('75 speed', 1), ('arrays', 1), ('beginner', 1), ('brute force', 1), ('brute-force', 1), ('bucket', 1), ('buckets', 1), ('c', 1), ('c++ solution', 1), ('comments', 1), ('count', 1), ('counting', 1), ('countlargestgroup', 1), ('cpp 100', 1), ('cpp easy', 1), ('csharp', 1), ('defaultdict', 1), ('dictionaries', 1), ('dictionary c#', 1), ('dictonary', 1), ('digits', 1), ('digitssum', 1), ('dp', 1), ('easytounderstand', 1), ('filter', 1), ('frequencycounting', 1), ('go', 1), ('go-solution', 1), ('golang-solution', 1), ('gorillaz', 1), ('hashing', 1), ('intuitive', 1), ('intutive', 1), ('javasolution', 1), ('lambda', 1), ('linq', 1), ('math', 1), ('memoization', 1), ('modulo 9 arithmetic', 1), ('no-built-ins', 1), ('one line', 1), ('one liner', 1), ('one-line', 1), ('one-liner', 1), ('oneline', 1), ('oneliner', 1), ('performance', 1), ('priority queue', 1), ('python3.8', 1), ('recursively', 1), ('ruby', 1), ('simple solution', 1), ('simple-solution', 1), ('simplesolution', 1), ('swift', 1), ('two solutions', 1), ('ultra easy', 1), ('unit-test', 1), ('unordered map', 1), ('vector', 1)]"
1383,Maximum Performance of a Team,https://leetcode.com/problems/maximum-performance-of-a-team,"You are given two integers n and k and two integer arrays speed and efficiency both of length n. There are n engineers numbered from 1 to n. speed[i] and efficiency[i] represent the speed and efficiency of the ith engineer respectively.

Choose at most k different engineers out of the n engineers to form a team with the maximum performance.

The performance of a team is the sum of their engineers' speeds multiplied by the minimum efficiency among their engineers.

Return the maximum performance of this team. Since the answer can be a huge number, return it modulo 109 + 7.","['greedy', 'sort']",Hard,424,29,38668,13958,[],"[('heap', 4), ('greedy', 3), ('priority queue', 3), ('python', 3), ('c++', 2), ('min heap', 2), ('python3', 2), ('sorting', 2), ('c', 1), ('c#', 1), ('cpp', 1), ('golang', 1), ('heapq', 1), ('java', 1), ('java ac solution', 1), ('javascript', 1), ('python 3', 1), ('question', 1), ('scala', 1), ('sort', 1)]"
1379,Find a Corresponding Node of a Binary Tree in a Clone of That Tree,https://leetcode.com/problems/find-a-corresponding-node-of-a-binary-tree-in-a-clone-of-that-tree,"Given two binary trees original and cloned and given a reference to a node target in the original tree.

The cloned tree is a copy of the original tree.

Return a reference to the same node in the cloned tree.

Note that you are not allowed to change any of the two trees or the target node and the answer must be a reference to a node in the cloned tree.

Follow up: Solve the problem if repeated values on the tree are allowed.","['tree', 'depth-first-search', 'breadth-first-search', 'recursion']",Medium,468,617,88665,75037,[],"[('c++', 47), ('java', 33), ('dfs', 30), ('recursion', 28), ('cpp', 27), ('python', 24), ('bfs', 20), ('python 3', 20), ('python3', 12), ('java-solution', 10), ('javascript', 10), ('tree-traversal', 10), ('easy-understanding', 9), ('c#', 8), ('simple', 8), ('recursive', 7), ('cpp solution', 6), ('preorder traversal', 5), ('tree', 5), ('c++ code', 4), ('dfs simple solution', 4), ('follow-up', 4), ('recurision', 4), ('trees', 4), ('easy-to-understand', 3), ('easytounderstand', 3), ('iterative', 3), ('javascript solution', 3), ('recusion', 3), ('simple solution', 3), ('accepted', 2), ('bfs simple solution', 2), ('binary-tree', 2), ('clean code', 2), ('deque', 2), ('dfs-bfs', 2), ('easy', 2), ('easy to understand', 2), ('easy-undestand', 2), ('efficient', 2), ('elegant solution', 2), ('explained', 2), ('generator', 2), ('iteration', 2), ('linear time', 2), ('postorder-traversal', 2), ('preorder', 2), ('queue', 2), ('simple clear c++ solution', 2), ('stack', 2), ('tree traversal', 2), ('upvote', 2), ('0ms', 1), ('100', 1), ('100 speed', 1), ('5 lines', 1), ('beginner friendly', 1), ('binary tree', 1), ('breadth first search', 1), ('c++ set', 1), ('c++ solution', 1), ('clear', 1), ('commentary', 1), ('comments', 1), ('concise-solution', 1), ('depth first search', 1), ('depth-first-search', 1), ('dfs recursive', 1), ('dfs-iterative', 1), ('dfs-topdown', 1), ('dis', 1), ('duplicates', 1), ('easy understanding', 1), ('explaination', 1), ('explanation with code', 1), ('explantion', 1), ('fast', 1), ('faster', 1), ('find', 1), ('follow up', 1), ('functional', 1), ('garbage collection', 1), ('inorder traversal', 1), ('inorder-traversal', 1), ('intutive', 1), ('iterative approch', 1), ('iterator', 1), ('java ac solution', 1), ('kotlin', 1), ('lambda', 1), ('language', 1), ('learn with me', 1), ('least extra space', 1), ('level order', 1), ('level order traversal', 1), ('level-order-traversal', 1), ('linear memory', 1), ('logarithmic space', 1), ('map', 1), ('modern', 1), ('morris-inorder-traversal', 1), ('morris-traversal', 1), ('mrmagician', 1), ('one line', 1), ('optimal', 1), ('optimized solution', 1), ('preorder recursive', 1), ('question', 1), ('readable', 1), ('recursive lines clean', 1), ('recursive-dfs', 1), ('self explanatory', 1), ('simple-solution', 1), ('solved', 1), ('stack-based', 1), ('stacks', 1), ('straight forward', 1), ('swift', 1), ('traverse', 1), ('tree node ancestor', 1), ('ultra easy', 1), ('video-explanation', 1)]"
1381,Design a Stack With Increment Operation,https://leetcode.com/problems/design-a-stack-with-increment-operation,"Design a stack which supports the following operations.

Implement the CustomStack class:


	CustomStack(int maxSize) Initializes the object with maxSize which is the maximum number of elements in the stack or do nothing if the stack reached the maxSize.
	void push(int x) Adds x to the top of the stack if the stack hasn't reached the maxSize.
	int pop() Pops and returns the top of stack or -1 if the stack is empty.
	void inc(int k, int val) Increments the bottom k elements of the stack by val. If there are less than k elements in the stack, just increment all the elements in the stack.","['stack', 'design']",Medium,576,49,52756,40288,[],"[('java', 14), ('python 3', 14), ('c++', 12), ('stacks', 12), ('python', 10), ('c#', 9), ('array', 8), ('stack', 7), ('cpp', 6), ('easy', 5), ('javascript', 5), ('java-solution', 4), ('c++ code', 3), ('easy-to-understand', 3), ('golang', 3), ('golang-solution', 3), ('lazy increment', 3), ('list', 3), ('swift', 3), ('arraylist', 2), ('clean code', 2), ('deque', 2), ('go', 2), ('hashmap', 2), ('linked-list', 2), ('python3', 2), ('pythonpython3', 2), ('simple', 2), ('2-stacks', 1), ('4ms', 1), ('5 ms', 1), ('99.98 faster', 1), ('accepted', 1), ('array greedy', 1), ('beginner friendly', 1), ('c++17', 1), ('cleancode', 1), ('clear explantion', 1), ('commentary', 1), ('constant time', 1), ('cpp solution', 1), ('csharp', 1), ('double-linked-list', 1), ('easy-understanding', 1), ('explanatory comments', 1), ('fast', 1), ('faster than 100', 1), ('fastest', 1), ('good variable names', 1), ('hashing', 1), ('intuitive', 1), ('javascript solution', 1), ('just-in-time', 1), ('linked list', 1), ('linkedlists', 1), ('logic explained', 1), ('memory-efficient-solution', 1), ('node-operation', 1), ('o1', 1), ('oop', 1), ('prefix-array', 1), ('python2', 1), ('readable', 1), ('reversing-element', 1), ('rust', 1), ('self explanatory', 1), ('slice', 1), ('stack-implementation', 1), ('stackwitharray', 1), ('straightforward', 1), ('typescript', 1), ('ultra easy', 1), ('upvote', 1), ('vector', 1)]"
1380,Lucky Numbers in a Matrix,https://leetcode.com/problems/lucky-numbers-in-a-matrix,"Given a m * n matrix of distinct numbers, return all lucky numbers in the matrix in any order.

A lucky number is an element of the matrix such that it is the minimum element in its row and maximum in its column.",['array'],Easy,490,44,62111,43712,[],"[('java', 31), ('javascript', 25), ('c++', 19), ('python', 19), ('python 3', 16), ('cpp', 13), ('easy-understanding', 13), ('python3', 13), ('java-solution', 11), ('matrix', 10), ('c#', 8), ('c++ code', 7), ('cpp solution', 6), ('one-liner', 5), ('easy-undestand', 4), ('golang', 4), ('ruby', 4), ('arraylist', 3), ('arrays', 3), ('brute force', 3), ('easy', 3), ('easy-to-understand', 3), ('rust', 3), ('set intersection', 3), ('simple', 3), ('100', 2), ('2d vector', 2), ('array', 2), ('brute-force', 2), ('c', 2), ('c++11', 2), ('clean code', 2), ('commentary', 2), ('go', 2), ('golang-solution', 2), ('indices', 2), ('java ac solution', 2), ('js', 2), ('kotlin', 2), ('matrices', 2), ('maximum', 2), ('min', 2), ('minimum', 2), ('optimized', 2), ('simple solution', 2), ('simple-solution', 2), ('swift', 2), ('transpose matrix', 2), ('0 ms', 1), ('1ms', 1), ('2d array', 1), ('2d matrix', 1), ('2d-array', 1), ('4ms', 1), ('8ms', 1), ('accepted', 1), ('apl', 1), ('c programming', 1), ('c#-solution', 1), ('c++ hash', 1), ('collections', 1), ('comments', 1), ('comments-added', 1), ('comparison', 1), ('csharp', 1), ('declarative', 1), ('easy solution', 1), ('easy to understand', 1), ('easy understand', 1), ('es6', 1), ('eureka effect', 1), ('explanation', 1), ('filter', 1), ('functional', 1), ('go lang', 1), ('go-solution', 1), ('goto', 1), ('hash', 1), ('hash set', 1), ('indexof', 1), ('iterators', 1), ('java lucky number', 1), ('javascript solution', 1), ('js javascript', 1), ('kotlin-solution', 1), ('list', 1), ('list comprehension', 1), ('listnode', 1), ('lists', 1), ('lucky integer', 1), ('map', 1), ('mapping', 1), ('matrix rotation', 1), ('memory-efficient', 1), ('mn', 1), ('nested list comprehension', 1), ('numpy', 1), ('one pass', 1), ('performance', 1), ('pruning', 1), ('python2', 1), ('q', 1), ('set', 1), ('set logic', 1), ('sets', 1), ('short code', 1), ('store', 1), ('straight-forward', 1), ('unit-test', 1), ('vector', 1), ('with explanation', 1), ('zip', 1)]"
1377,Frog Position After T Seconds,https://leetcode.com/problems/frog-position-after-t-seconds,"Given an undirected tree consisting of n vertices numbered from 1 to n. A frog starts jumping from vertex 1. In one second, the frog jumps from its current vertex to another unvisited vertex if they are directly connected. The frog can not jump back to a visited vertex. In case the frog can jump to several vertices, it jumps randomly to one of them with the same probability. Otherwise, when the frog can not jump to any unvisited vertex, it jumps forever on the same vertex.

The edges of the undirected tree are given in the array edges, where edges[i] = [ai, bi] means that exists an edge connecting the vertices ai and bi.

Return the probability that after t seconds the frog is on the vertex target.",['depth-first-search'],Hard,196,70,36429,12955,[],"[('bfs', 16), ('c++', 8), ('dfs', 7), ('python', 6), ('python3', 5), ('cpp', 4), ('java', 4), ('javascript', 4), ('c#', 2), ('golang', 2), ('cpp easy', 1), ('cpp solution', 1), ('depth first search', 1), ('dfs simple solution', 1), ('dp', 1), ('go lang', 1), ('golang-solution', 1), ('iterative', 1), ('python 3', 1), ('queue', 1), ('recursive dfs', 1), ('ruby', 1), ('swift', 1), ('tree', 1)]"
1376,Time Needed to Inform All Employees,https://leetcode.com/problems/time-needed-to-inform-all-employees,"A company has n employees with a unique ID for each employee from 0 to n - 1. The head of the company is the one with headID.

Each employee has one direct manager given in the manager array where manager[i] is the direct manager of the i-th employee, manager[headID] = -1. Also, it is guaranteed that the subordination relationships have a tree structure.

The head of the company wants to inform all the company employees of an urgent piece of news. He will inform his direct subordinates, and they will inform their subordinates, and so on until all employees know about the urgent news.

The i-th employee needs informTime[i] minutes to inform all of his direct subordinates (i.e., After informTime[i] minutes, all his direct subordinates can start spreading the news).

Return the number of minutes needed to inform all the employees about the urgent news.",['depth-first-search'],Medium,794,70,90517,51488,"[""Maximum Depth of Binary Tree"", ""Binary Tree Maximum Path Sum""]","[('dfs', 33), ('bfs', 30), ('java', 26), ('python', 18), ('c++', 15), ('python 3', 15), ('javascript', 8), ('python3', 7), ('memoization', 6), ('dfs simple solution', 5), ('java-solution', 5), ('c#', 4), ('hashmap', 4), ('recursion', 4), ('clean code', 3), ('depth first search', 3), ('dfs-topdown', 3), ('dp', 3), ('easy', 3), ('easy-understanding', 3), ('easy-undestand', 3), ('easysolution', 3), ('simple', 3), ('swift', 3), ('100 space', 2), ('100 speed', 2), ('cpp', 2), ('dfs solution', 2), ('dfs-bottomup', 2), ('dictionary', 2), ('dynamic programming', 2), ('golang', 2), ('iteration', 2), ('rust', 2), ('tree', 2), ('tree-traversal', 2), ('#bfs', 1), ('#dfs', 1), ('#java', 1), ('#trees', 1), ('100', 1), ('adjacency list', 1), ('beats 100', 1), ('bfs simple solution', 1), ('bfs tle', 1), ('bfs-dfs', 1), ('c++ easy solution', 1), ('c++ solution', 1), ('comments added', 1), ('complexity-analysis', 1), ('cpp easy', 1), ('cpp solution', 1), ('dfs recursive', 1), ('dictonary', 1), ('easiest', 1), ('easy to follow', 1), ('easy-solition', 1), ('explained', 1), ('explained solution', 1), ('explanation', 1), ('go', 1), ('graph', 1), ('graph theory', 1), ('graph traversal', 1), ('intuitive', 1), ('iterative traversal', 1), ('iterative way', 1), ('iterative-backtracking', 1), ('java solution', 1), ('javascript bfs', 1), ('javascript solution', 1), ('kotlin', 1), ('map', 1), ('path-sum', 1), ('propagation', 1), ('python2', 1), ('queue', 1), ('recursive', 1), ('recusion', 1), ('ruby', 1), ('straight forward', 1), ('straightforward', 1), ('top-down', 1)]"
1375,Bulb Switcher III,https://leetcode.com/problems/bulb-switcher-iii,"There is a room with n bulbs, numbered from 1 to n, arranged in a row from left to right. Initially, all the bulbs are turned off.

At moment k (for k from 0 to n - 1), we turn on the light[k] bulb. A bulb change color to blue only if it is on and all the previous bulbs (to the left) are turned on too.

Return the number of moments in which all turned on bulbs are blue.",['array'],Medium,485,80,43474,27925,"[""Bulb Switcher"", ""Bulb Switcher II""]","[('python', 11), ('c++', 9), ('java', 9), ('cpp', 6), ('javascript', 6), ('c#', 5), ('linear time', 5), ('python3', 5), ('constant memory', 2), ('constant space', 2), ('easy', 2), ('easy-understanding', 2), ('golang', 2), ('java-solution', 2), ('100 memory', 1), ('100 space', 1), ('100 speed', 1), ('arithmetic-operations', 1), ('bit manipulation', 1), ('bitwise operation', 1), ('c++ code', 1), ('c++ set', 1), ('c++11', 1), ('comments-added', 1), ('cpp solution', 1), ('disjointset', 1), ('dsu', 1), ('explanation', 1), ('fast and simple', 1), ('fastest', 1), ('greedy', 1), ('heapq', 1), ('java ac solution', 1), ('java11', 1), ('js', 1), ('linear solution', 1), ('logic explained clearly', 1), ('maths', 1), ('medium', 1), ('one pass solution', 1), ('prefix sum', 1), ('scala', 1), ('simple clear c++ solution', 1), ('simple solution', 1), ('simple-solution', 1), ('stl', 1), ('swift', 1), ('treeset', 1), ('union find', 1), ('union-find', 1)]"
1374,Generate a String With Characters That Have Odd Counts,https://leetcode.com/problems/generate-a-string-with-characters-that-have-odd-counts,"Given an integer n, return a string with n characters such that each character in such string occurs an odd number of times.

The returned string must contain only lowercase English letters. If there are multiples valid strings, return any of them.",['string'],Easy,192,771,66125,50861,[],"[('c++', 33), ('java', 31), ('javascript', 21), ('cpp', 20), ('python 3', 18), ('python', 17), ('easy-understanding', 12), ('easy', 9), ('100 speed', 7), ('python3', 7), ('java-solution', 6), ('string', 6), ('100 memory', 5), ('100 space', 5), ('c', 5), ('c#', 4), ('easy to understand', 4), ('golang', 4), ('one-liner', 4), ('c++ code', 3), ('cpp solution', 3), ('easy-to-understand', 3), ('fast and simple', 3), ('go', 3), ('javascript solution', 3), ('ruby', 3), ('simple', 3), ('1 liner', 2), ('c programming', 2), ('count', 2), ('easy-undestand', 2), ('easytounderstand', 2), ('kotlin', 2), ('odd', 2), ('optimal', 2), ('simple solution', 2), ('swift', 2), ('0 ms', 1), ('0 ms solution', 1), ('0ms', 1), ('100', 1), ('100 faster', 1), ('100 faster cpp', 1), ('100 faster runtime', 1), ('100memory', 1), ('100space', 1), ('100speed', 1), ('1ms runtime', 1), ('3 approaches', 1), ('array', 1), ('arrays.fill', 1), ('beats 100', 1), ('beats 99', 1), ('beautiful', 1), ('begineer', 1), ('best solution', 1), ('c++14', 1), ('clean', 1), ('clean-efficient-code', 1), ('commentary', 1), ('comments', 1), ('cpp-easy', 1), ('csharp', 1), ('easiest', 1), ('explained', 1), ('explanation', 1), ('ez', 1), ('fast-solution', 1), ('faster than 100.00', 1), ('fasterthan100', 1), ('fastest', 1), ('fastest c solution', 1), ('fastest solution', 1), ('github', 1), ('java ac solution', 1), ('join', 1), ('js', 1), ('linear', 1), ('list', 1), ('mod', 1), ('odd counts', 1), ('on', 1), ('one line solution', 1), ('one liner', 1), ('pythonpython3', 1), ('rajat', 1), ('rajawatbanna', 1), ('scala', 1), ('short code', 1), ('silly', 1), ('simple clear c++ solution', 1), ('simple-solution', 1), ('solution', 1), ('string-operation', 1), ('stringbuilder', 1)]"
1388,Pizza With 3n Slices,https://leetcode.com/problems/pizza-with-3n-slices,"There is a pizza with 3n slices of varying size, you and your friends will take slices of pizza as follows:


	You will pick any pizza slice.
	Your friend Alice will pick next slice in anti clockwise direction of your pick. 
	Your friend Bob will pick next slice in clockwise direction of your pick.
	Repeat until there are no more slices of pizzas.


Sizes of Pizza slices is represented by circular array slices in clockwise direction.

Return the maximum possible sum of slice sizes which you can have.",['dynamic-programming'],Hard,350,5,12252,5684,[],"[('dynamic programming', 8), ('c++', 3), ('dp', 3), ('java', 3), ('golang', 2), ('greedy', 2), ('bug in leetcode', 1), ('c#', 1), ('cpp', 1), ('cpp solution', 1), ('dp java', 1), ('error', 1), ('heap', 1), ('house robber', 1), ('java-solution', 1), ('javascript', 1), ('linked list', 1), ('mistake', 1), ('python', 1), ('python3', 1)]"
1387,Sort Integers by The Power Value,https://leetcode.com/problems/sort-integers-by-the-power-value,"The power of an integer x is defined as the number of steps needed to transform x into 1 using the following steps:


	if x is even then x = x / 2
	if x is odd then x = 3 * x + 1


For example, the power of x = 3 is 7 because 3 needs 7 steps to become 1 (3 --> 10 --> 5 --> 16 --> 8 --> 4 --> 2 --> 1).

Given three integers lo, hi and k. The task is to sort all integers in the interval [lo, hi] by the power value in ascending order, if two or more integers have the same power value sort them by ascending order.

Return the k-th integer in the range [lo, hi] sorted by the power value.

Notice that for any integer x (lo <= x <= hi) it is guaranteed that x will transform into 1 using these steps and that the power of x is will fit in 32 bit signed integer.","['sort', 'graph']",Medium,422,58,44780,31611,[],"[('c++', 18), ('java', 18), ('dynamic programming', 17), ('python 3', 17), ('sort', 14), ('cpp', 11), ('hashmap', 11), ('python', 11), ('recursion', 11), ('cpp solution', 8), ('python3', 8), ('java-solution', 7), ('javascript', 7), ('memoization', 7), ('c#', 6), ('easy-understanding', 5), ('dictionary', 4), ('dp', 4), ('priority queue', 4), ('c++ code', 3), ('heap', 3), ('javascript solution', 3), ('sort-function', 3), ('swift', 3), ('vector', 3), ('comments-added', 2), ('dynamic-programming', 2), ('easy', 2), ('easy-undestand', 2), ('fast and simple', 2), ('graph', 2), ('intutive', 2), ('max-heap', 2), ('memo', 2), ('memoziation', 2), ('multimap', 2), ('pair', 2), ('priorityqueue', 2), ('typescript', 2), ('100 memory', 1), ('100 speed', 1), ('akki', 1), ('akku', 1), ('array', 1), ('beginner friendly', 1), ('brute force', 1), ('c', 1), ('cache', 1), ('clean clode', 1), ('clean code', 1), ('collatz', 1), ('collatz conjecture', 1), ('comparator', 1), ('cpp doubt', 1), ('cpp easy', 1), ('cpp-functional', 1), ('csharp', 1), ('custom comparator', 1), ('detailed explanation', 1), ('dfs', 1), ('dfs solution', 1), ('dict', 1), ('dictonary', 1), ('easy undestanding', 1), ('easytounderstand', 1), ('efficient', 1), ('explained', 1), ('explained solution', 1), ('functional-programming', 1), ('golang', 1), ('hashtable', 1), ('heapq', 1), ('iterative', 1), ('java ac solution', 1), ('java comparator', 1), ('java8', 1), ('javscript', 1), ('js', 1), ('list', 1), ('lists', 1), ('look-up-table', 1), ('maxheap', 1), ('min heap', 1), ('nthelement', 1), ('pairs', 1), ('python2', 1), ('questions', 1), ('quick select', 1), ('quick-selection', 1), ('raviinroorkee', 1), ('readable', 1), ('recursive easy', 1), ('recursively', 1), ('ruby', 1), ('scala', 1), ('self-explanatory', 1), ('sets', 1), ('short code', 1), ('simple', 1), ('simple solution', 1), ('simplest', 1), ('simulation', 1), ('sorted', 1), ('sorted array', 1), ('sorting', 1), ('stream', 1), ('streams', 1), ('top down', 1), ('treemap', 1), ('ultra simple', 1), ('upvote', 1), ('vector-operation', 1), ('vectors', 1)]"
1386,Cinema Seat Allocation,https://leetcode.com/problems/cinema-seat-allocation,"A cinema has n rows of seats, numbered from 1 to n and there are ten seats in each row, labelled from 1 to 10 as shown in the figure above.

Given the array reservedSeats containing the numbers of seats already reserved, for example, reservedSeats[i] = [3,8] means the seat located in row 3 and labelled with 8 is already reserved.

Return the maximum number of four-person groups you can assign on the cinema seats. A four-person group occupies four adjacent seats in one single row. Seats across an aisle (such as [3,3] and [3,4]) are not considered to be adjacent, but there is an exceptional case on which an aisle split a four-person group, in that case, the aisle split a four-person group in the middle, which means to have two people on each side.","['array', 'greedy']",Medium,253,163,34233,12424,[],"[('c++', 14), ('python', 11), ('hashmap', 9), ('python 3', 6), ('bitwise operation', 5), ('easy-understanding', 5), ('javascript', 5), ('python3', 4), ('c#', 3), ('c++ code', 3), ('cpp', 3), ('greedy', 3), ('java', 3), ('bitwise', 2), ('sets', 2), ('sorting', 2), ('unorderedmap', 2), ('#java', 1), ('3-ifs', 1), ('arrays', 1), ('bit manipulation', 1), ('bit vector', 1), ('bit-mask', 1), ('bitmask', 1), ('buckets', 1), ('c++11', 1), ('cinema seat allocation', 1), ('comments', 1), ('comments-added', 1), ('concise-solution', 1), ('constant memory', 1), ('constant space', 1), ('csharp', 1), ('dictonary', 1), ('easy', 1), ('easy sloution', 1), ('easy to understand', 1), ('easy understanding', 1), ('easy-explanation', 1), ('easy-undesrtanding', 1), ('efficient algorithm', 1), ('explained', 1), ('golang', 1), ('hash', 1), ('hashing', 1), ('java-solution', 1), ('linear time complexity', 1), ('list', 1), ('map-stl', 1), ('plane seat allocation', 1), ('rust', 1), ('simpler', 1), ('simulation', 1), ('sort', 1), ('sorted array', 1), ('sorted dictionary', 1), ('unordered map', 1)]"
1385,Find the Distance Value Between Two Arrays,https://leetcode.com/problems/find-the-distance-value-between-two-arrays,"Given two integer arrays arr1 and arr2, and the integer d, return the distance value between the two arrays.

The distance value is defined as the number of elements arr1[i] such that there is not any element arr2[j] where |arr1[i]-arr2[j]| <= d.",['array'],Easy,172,720,40072,26658,[],"[('javascript', 11), ('python', 11), ('binary-search', 10), ('cpp', 10), ('c++', 9), ('java', 9), ('python 3', 9), ('python3', 8), ('java-solution', 6), ('c#', 5), ('easy-understanding', 5), ('arrays', 3), ('brute force', 3), ('golang', 3), ('swift', 3), ('abs', 2), ('beginner friendly', 2), ('binary search', 2), ('c', 2), ('javascript solution', 2), ('nlogn', 2), ('one-liner', 2), ('stl', 2), ('5head', 1), ('algorithms', 1), ('binarysearh', 1), ('bisection', 1), ('break', 1), ('buckets', 1), ('c++11', 1), ('combination', 1), ('cpp solution', 1), ('cpp-solution', 1), ('csharp', 1), ('dynamic programming', 1), ('easy', 1), ('easy to read', 1), ('easy to understand', 1), ('easy-to-understand', 1), ('easy-undestand', 1), ('es6', 1), ('fast', 1), ('functional-programming', 1), ('go', 1), ('go-solution', 1), ('golang-solution', 1), ('gorillaz', 1), ('js', 1), ('linq', 1), ('lower-bound', 1), ('memory-usage', 1), ('natural', 1), ('one liner', 1), ('ptyhon3', 1), ('reduce', 1), ('ruby', 1), ('sets', 1), ('simple', 1), ('simple-solution', 1), ('sort', 1), ('sorted', 1), ('swift5', 1), ('treeset', 1), ('unit-test', 1)]"
1368,Minimum Cost to Make at Least One Valid Path in a Grid,https://leetcode.com/problems/minimum-cost-to-make-at-least-one-valid-path-in-a-grid,"Given a m x n grid. Each cell of the grid has a sign pointing to the next cell you should visit if you are currently in this cell. The sign of grid[i][j] can be:

	1 which means go to the cell to the right. (i.e go from grid[i][j] to grid[i][j + 1])
	2 which means go to the cell to the left. (i.e go from grid[i][j] to grid[i][j - 1])
	3 which means go to the lower cell. (i.e go from grid[i][j] to grid[i + 1][j])
	4 which means go to the upper cell. (i.e go from grid[i][j] to grid[i - 1][j])


Notice that there could be some invalid signs on the cells of the grid which points outside the grid.

You will initially start at the upper left cell (0,0). A valid path in the grid is a path which starts from the upper left cell (0,0) and ends at the bottom-right cell (m - 1, n - 1) following the signs on the grid. The valid path doesn't have to be the shortest.

You can modify the sign on a cell with cost = 1. You can modify the sign on a cell one time only.

Return the minimum cost to make the grid have at least one valid path.",['breadth-first-search'],Hard,533,6,29232,16941,[],"[('bfs', 16), ('c++', 5), ('javascript', 5), ('dijkstra', 4), ('java', 4), ('python', 4), ('0-1 bfs', 3), ('c#', 3), ('cpp', 3), ('dp', 3), ('python 3', 3), ('deque', 2), ('dfs', 2), ('dijkstras', 2), ('dijkstras algorithm', 2), ('python3', 2), ('breadth first search', 1), ('cpp solution', 1), ('dijkastra', 1), ('djikstra algorithm', 1), ('easy', 1), ('explained', 1), ('heapq', 1), ('help', 1), ('lambda', 1), ('p5.js', 1), ('priority queue', 1), ('shortest path', 1), ('simple', 1), ('simple bfs', 1), ('visualization', 1)]"
1367,Linked List in Binary Tree,https://leetcode.com/problems/linked-list-in-binary-tree,"Given a binary tree root and a linked list with head as the first node. 

Return True if all the elements in the linked list starting from the head correspond to some downward path connected in the binary tree otherwise return False.

In this context downward path means a path that starts at some node and goes downwards.","['linked-list', 'dynamic-programming', 'tree']",Medium,797,31,72330,29646,[],"[('recursion', 15), ('java', 14), ('dfs', 12), ('c++', 11), ('cpp', 9), ('python', 7), ('recursive', 7), ('c#', 6), ('javascript', 6), ('binary-tree', 5), ('python 3', 5), ('depth first search', 3), ('c', 2), ('easy-to-understand', 2), ('easy-understanding', 2), ('java solution', 2), ('java-solution', 2), ('preorder', 2), ('python3', 2), ('recusion', 2), ('tree-traversal', 2), ('trees', 2), ('accepted solution', 1), ('array', 1), ('beats100', 1), ('bfs', 1), ('brute force', 1), ('bst', 1), ('c programming', 1), ('c++ code', 1), ('c++ solution', 1), ('clean code', 1), ('comments-added', 1), ('cpp solution', 1), ('detailed explanation', 1), ('dfs recursive', 1), ('dfs simple solution', 1), ('dfs solution', 1), ('dfs-bfs', 1), ('dfs-iterative', 1), ('dps', 1), ('dynamic programming', 1), ('easy', 1), ('failing', 1), ('help', 1), ('iterative', 1), ('iteratve-recursive', 1), ('java ac solution', 1), ('java simple', 1), ('kmp', 1), ('kmp algorithm', 1), ('linear time', 1), ('linked list', 1), ('linkedlistinbinarytree', 1), ('linkedlists', 1), ('list', 1), ('matching elements', 1), ('memoization', 1), ('path-string', 1), ('please help', 1), ('readable', 1), ('recurision', 1), ('recursive easy', 1), ('recursively', 1), ('resursive', 1), ('simple solution', 1), ('stack', 1), ('tree', 1), ('tree traversal', 1), ('typescript', 1), ('video-explanation', 1)]"
1366,Rank Teams by Votes,https://leetcode.com/problems/rank-teams-by-votes,"In a special ranking system, each voter gives a rank from highest to lowest to all teams participated in the competition.

The ordering of teams is decided by who received the most position-one votes. If two or more teams tie in the first position, we consider the second position to resolve the conflict, if they tie again, we continue this process until the ties are resolved. If two or more teams are still tied after considering all positions, we rank them alphabetically based on their team letter.

Given an array of strings votes which is the votes of all voters in the ranking systems. Sort all teams according to the ranking system described above.

Return a string of all teams sorted by the ranking system.","['array', 'sort']",Medium,438,57,36856,20528,"[""Online Election""]","[('sorting', 8), ('c++', 7), ('java', 7), ('sort', 7), ('python', 6), ('python 3', 5), ('comparator', 4), ('javascript', 3), ('python3', 3), ('c++ code', 2), ('clean code', 2), ('comments-added', 2), ('cpp', 2), ('cpp solution', 2), ('custom sorting', 2), ('easy-understanding', 2), ('easy-undestand', 2), ('hash table', 2), ('hashmap', 2), ('java-solution', 2), ('lambda', 2), ('map', 2), ('ruby', 2), ('#go', 1), ('#golang', 1), ('100 memory', 1), ('beginner friendly', 1), ('c#', 1), ('comments', 1), ('cpp doubt', 1), ('easy', 1), ('easy to understand', 1), ('easy-to-understand', 1), ('explained', 1), ('explained solution', 1), ('lambda function', 1), ('merge sort', 1), ('no sort', 1), ('optimal', 1), ('priority queue', 1), ('priority-queue', 1), ('python2', 1), ('rank', 1), ('stable sort', 1), ('stable-sort', 1), ('stl', 1), ('straightforward', 1), ('string-searching', 1)]"
1365,How Many Numbers Are Smaller Than the Current Number,https://leetcode.com/problems/how-many-numbers-are-smaller-than-the-current-number,"Given the array nums, for each nums[i] find out how many numbers in the array are smaller than it. That is, for each nums[i] you have to count the number of valid j's such that j != i and nums[j] < nums[i].

Return the answer in an array.","['array', 'hash-table']",Easy,1624,40,226874,195113,"[""Count of Smaller Numbers After Self""]","[('c++', 52), ('java', 50), ('javascript', 49), ('python 3', 49), ('python', 45), ('c#', 26), ('cpp', 26), ('java-solution', 24), ('python3', 22), ('hashmap', 13), ('easy-understanding', 12), ('swift', 12), ('cpp solution', 11), ('javascript solution', 11), ('c', 10), ('binary-search', 9), ('map', 9), ('easy', 8), ('c++ code', 7), ('ruby', 7), ('array', 6), ('cpp easy', 6), ('js', 6), ('simple', 6), ('sorted array', 6), ('clean code', 5), ('csharp', 5), ('dictionary', 5), ('easy-undestand', 5), ('easytounderstand', 5), ('go', 5), ('golang', 5), ('hash table', 5), ('kotlin', 5), ('nlogn', 5), ('sort', 5), ('c code', 4), ('counting-sort', 4), ('hashing', 4), ('list comprehension', 4), ('rust', 4), ('simple solution', 4), ('sorting', 4), ('c# easy', 3), ('c# solutions', 3), ('counter', 3), ('dp', 3), ('easiest', 3), ('easy-to-understand', 3), ('hashtable', 3), ('indexof', 3), ('linear time', 3), ('linq', 3), ('vector', 3), ('brute force', 2), ('c programming', 2), ('c++ easy to understand', 2), ('c++ solution', 2), ('c++11', 2), ('constant memory', 2), ('easysolution', 2), ('explained', 2), ('fast', 2), ('fast and simple', 2), ('fast-solution', 2), ('fastest c++ solution', 2), ('functional', 2), ('hash', 2), ('java ac solution', 2), ('list-comprehension', 2), ('maps', 2), ('one-liner', 2), ('prefix sum', 2), ('pythonpython3', 2), ('solution', 2), ('straightforward', 2), ('swiftsolution', 2), ('#c++', 1), ('#complexity n', 1), ('#cpp', 1), ('#easysolution', 1), ('#golang', 1), ('1-line', 1), ('100 faster', 1), ('4ms', 1), ('6 lines', 1), ('8ms', 1), ('asahiocean', 1), ('awesome', 1), ('basic', 1), ('beginner friendly', 1), ('binary search', 1), ('brute force to optimal', 1), ('bubble sort', 1), ('bubble-sort', 1), ('bubblesort', 1), ('bucket', 1), ('c++ hash', 1), ('c++ map', 1), ('c++14', 1), ('cache', 1), ('clean clode', 1), ('code', 1), ('concat', 1), ('concise', 1), ('constant space', 1), ('count', 1), ('count sort', 1), ('counting', 1), ('cpp soltuion', 1), ('cpp-easy', 1), ('cpp-solution', 1), ('dictionairy', 1), ('dictonary', 1), ('dynamic-allocation', 1), ('easiest solution', 1), ('easy explanation', 1), ('easy to understand', 1), ('easy understanding', 1), ('easy-solition', 1), ('easy-to-read', 1), ('efficient', 1), ('efficient solution', 1), ('expalanation', 1), ('explain', 1), ('explanation', 1), ('explanation of logic', 1), ('explanation simple', 1), ('explanations', 1), ('faster than 100.00', 1), ('fastest c solution', 1), ('filter', 1), ('for loop', 1), ('for-loop', 1), ('frequencies', 1), ('frequency', 1), ('frequency count', 1), ('functional-programming', 1), ('github', 1), ('golang-solution', 1), ('indexof method', 1), ('javascipt', 1), ('javascrip', 1), ('js javascript', 1), ('lambdas', 1), ('loops', 1), ('lower bound', 1), ('lower-bound', 1), ('lowerbound', 1), ('lrucache', 1), ('medium', 1), ('nested loop', 1), ('nlogn time', 1), ('no hashmap', 1), ('numssmallerthancurrentnum', 1), ('on2', 1), ('one line solution', 1), ('one-line', 1), ('oneliner', 1), ('onepass', 1), ('optimisation', 1), ('prefix', 1), ('prefix array', 1), ('prefixsum', 1), ('primitive', 1), ('pythonic', 1), ('readable', 1), ('recursive', 1), ('runtime-error', 1), ('scala', 1), ('short code', 1), ('short solution', 1), ('simple-solution', 1), ('simplest', 1), ('smallestnumber', 1), ('sorteddictionary', 1), ('speed', 1), ('test-cases', 1), ('time-complexity-o', 1), ('ts', 1), ('two-pointers', 1), ('typescript', 1), ('understand', 1), ('unit-test', 1), ('unordered map', 1), ('vectors', 1), ('video-explanation', 1)]"
1354,Construct Target Array With Multiple Sums,https://leetcode.com/problems/construct-target-array-with-multiple-sums,"Given an array of integers target. From a starting array, A consisting of all 1's, you may perform the following procedure :


	let x be the sum of all elements currently in your array.
	choose index i, such that 0 <= i < target.size and set the value of A at index i to x.
	You may repeat this procedure as many times as needed.


Return True if it is possible to construct the target array from A otherwise return False.",['greedy'],Hard,265,35,28772,8971,[],"[('math', 4), ('priority queue', 4), ('c++', 3), ('javascript', 3), ('python', 3), ('python 3', 3), ('heap', 2), ('python3', 2), ('backward', 1), ('binary search', 1), ('c#', 1), ('complexity analysis', 1), ('detailed explanation', 1), ('fast', 1), ('golang', 1), ('greedy', 1), ('heapq', 1), ('java', 1), ('priority-queue', 1), ('python2', 1), ('rust', 1), ('sorting', 1)]"
1353,Maximum Number of Events That Can Be Attended,https://leetcode.com/problems/maximum-number-of-events-that-can-be-attended,"Given an array of events where events[i] = [startDayi, endDayi]. Every event i starts at startDayi and ends at endDayi.

You can attend an event i at any day d where startTimei <= d <= endTimei. Notice that you can only attend one event at any time d.

Return the maximum number of events you can attend.","['greedy', 'sort', 'segment-tree']",Medium,850,118,79991,24446,"[""Maximum Number of Events That Can Be Attended II""]","[('greedy', 10), ('c++', 6), ('python', 6), ('java', 5), ('java-solution', 5), ('segment tree', 5), ('cpp', 4), ('golang', 4), ('heapq', 4), ('python 3', 4), ('python3', 4), ('heap', 3), ('javascript', 3), ('priority queue', 3), ('sorting', 3), ('c#', 2), ('cpp solution', 2), ('easy', 2), ('easytounderstand', 2), ('java ac solution', 2), ('multiset', 2), ('nlogn', 2), ('segment-tree', 2), ('swift', 2), ('100 memory', 1), ('100 space', 1), ('arrays', 1), ('arrays.sort', 1), ('binary-search', 1), ('bitwise operation', 1), ('c++ hash', 1), ('creative', 1), ('detailed explanation', 1), ('easy-undestand', 1), ('explanation', 1), ('explanatory video', 1), ('greedy approach', 1), ('hash-table', 1), ('intuitive', 1), ('java easy to understand', 1), ('priority-queue', 1), ('readable', 1), ('ruby', 1), ('set', 1), ('simple', 1), ('sort', 1), ('sorted array', 1), ('thinking process', 1), ('treeset', 1), ('video solution', 1)]"
1352,Product of the Last K Numbers,https://leetcode.com/problems/product-of-the-last-k-numbers,"Implement the class ProductOfNumbers that supports two methods:

1. add(int num)


	Adds the number num to the back of the current list of numbers.


2. getProduct(int k)


	Returns the product of the last k numbers in the current list.
	You can assume that always the current list has at least k numbers.


At any time, the product of any contiguous sequence of numbers will fit into a single 32-bit integer without overflowing.","['array', 'design']",Medium,543,29,66811,30262,[],"[('c++', 10), ('java', 7), ('javascript', 6), ('python', 6), ('cpp', 5), ('prefix product', 5), ('python 3', 5), ('c#', 4), ('dynamic programming', 4), ('easy-understanding', 3), ('swift', 3), ('dynamic-programming', 2), ('memoization', 2), ('rust', 2), ('1 line', 1), ('arraylist', 1), ('binary-search', 1), ('c++ code', 1), ('design', 1), ('dp', 1), ('easiest', 1), ('easy', 1), ('es6', 1), ('explained', 1), ('explanation of logic', 1), ('java-solution', 1), ('javascript solution', 1), ('js', 1), ('math', 1), ('memorization', 1), ('prefix', 1), ('prefix array', 1), ('productoflastknumbers', 1), ('python3', 1), ('recursion', 1), ('simple solution', 1), ('stl', 1), ('super-easy', 1), ('treemap', 1), ('vector', 1)]"
1351,Count Negative Numbers in a Sorted Matrix,https://leetcode.com/problems/count-negative-numbers-in-a-sorted-matrix,"Given a m x n matrix grid which is sorted in non-increasing order both row-wise and column-wise, return the number of negative numbers in grid.","['array', 'binary-search']",Easy,975,50,140754,106637,[],"[('java', 63), ('c++', 47), ('python', 44), ('binary-search', 43), ('javascript', 37), ('python 3', 32), ('python3', 27), ('binary search', 23), ('java-solution', 20), ('cpp', 17), ('easy-understanding', 13), ('golang', 12), ('cpp solution', 10), ('c#', 9), ('binarysearch', 8), ('c', 7), ('javascript solution', 7), ('simple', 7), ('easy', 6), ('explained', 6), ('go', 6), ('easy-to-understand', 5), ('easytounderstand', 5), ('kotlin', 5), ('one-liner', 5), ('swift', 5), ('100 faster', 4), ('arrays', 4), ('easy-undestand', 4), ('matrix', 4), ('explained solution', 3), ('go-solution', 3), ('golang-solution', 3), ('linear', 3), ('linear time', 3), ('list comprehension', 3), ('reduce', 3), ('ruby', 3), ('simple solution', 3), ('#python 3', 2), ('accepted solution', 2), ('array', 2), ('brute force', 2), ('c code', 2), ('c programming', 2), ('c++ code', 2), ('comments-added', 2), ('csharp', 2), ('easy to understand', 2), ('easysolution', 2), ('efficient solution', 2), ('fast', 2), ('fast and simple', 2), ('fast-solution', 2), ('filter', 2), ('grid', 2), ('javascrip', 2), ('one line', 2), ('php', 2), ('python2', 2), ('rust', 2), ('solution', 2), ('swift5', 2), ('#numpy', 1), ('0ms', 1), ('1 line', 1), ('1-line', 1), ('100 faster runtime', 1), ('100 memory', 1), ('100 space', 1), ('3 lines', 1), ('amazon interview', 1), ('beats 100', 1), ('beginner friendly', 1), ('binary-search-explanation', 1), ('brutal force optmized', 1), ('bruteforce', 1), ('c language', 1), ('c++11', 1), ('commentary', 1), ('concise-solution', 1), ('cpp easy', 1), ('easiest solution', 1), ('easy sloution', 1), ('easy understand', 1), ('easy understanding', 1), ('easy undestanding', 1), ('efficent approach', 1), ('efficient algorithm', 1), ('explanation', 1), ('explanation of logic', 1), ('explanation with logic', 1), ('faster', 1), ('fasterthan100', 1), ('flatten', 1), ('flattenthecurve', 1), ('generator', 1), ('github', 1), ('google interview', 1), ('intuitive', 1), ('ios', 1), ('iterative', 1), ('java binarysearch linear', 1), ('java solution', 1), ('javasccript', 1), ('js', 1), ('linear-time', 1), ('lower-bound', 1), ('m+n', 1), ('matrix-problem-solving', 1), ('matrix-search', 1), ('mlogn', 1), ('mrmagician', 1), ('naive approach', 1), ('negative count', 1), ('nested list comprehension', 1), ('nlogn', 1), ('one liner', 1), ('optimized', 1), ('php solution', 1), ('pyhton', 1), ('pyhton 3', 1), ('pythonpython3', 1), ('raviinroorkee', 1), ('readability', 1), ('recursive solution', 1), ('scala', 1), ('selfisolation', 1), ('short code', 1), ('simple and elegant', 1), ('simplest', 1), ('single line', 1), ('socialdistancing', 1), ('sorted matrix', 1), ('stayhome', 1), ('straight-forward', 1), ('straightforward', 1), ('stream', 1), ('traversal', 1), ('two pointers', 1), ('two solutions', 1), ('typescript', 1), ('understandable', 1), ('unit-test', 1), ('upper bound', 1), ('upvote', 1), ('verbose', 1), ('very easy to understand', 1), ('video solution', 1), ('video-explanation', 1)]"
1373,Maximum Sum BST in Binary Tree,https://leetcode.com/problems/maximum-sum-bst-in-binary-tree,"Given a binary tree root, the task is to return the maximum sum of all keys of any sub-tree which is also a Binary Search Tree (BST).

Assume a BST is defined as follows:


	The left subtree of a node contains only nodes with keys less than the node's key.
	The right subtree of a node contains only nodes with keys greater than the node's key.
	Both the left and right subtrees must also be binary search trees.","['dynamic-programming', 'binary-search-tree']",Hard,435,70,41772,15474,[],"[('c++', 14), ('postorder-traversal', 14), ('java', 12), ('dfs', 11), ('recursion', 11), ('python 3', 10), ('python', 9), ('cpp', 8), ('binary search tree', 4), ('cpp solution', 4), ('binary-tree', 3), ('bst', 3), ('easy-understanding', 3), ('java-solution', 3), ('easy-undestand', 2), ('explained', 2), ('javascript', 2), ('kotlin', 2), ('post-order-traversal', 2), ('python3', 2), ('recurision', 2), ('recursive-dfs', 2), ('annotate-node', 1), ('awesome samriddhi', 1), ('binary search', 1), ('bottom-top approach', 1), ('bugs', 1), ('c#', 1), ('c++ code', 1), ('c++ recursive solution', 1), ('c++ solution', 1), ('c++11', 1), ('clean code', 1), ('cpp easy', 1), ('depth first search', 1), ('dfs simple solution', 1), ('dfs solution', 1), ('dfs-bottomup', 1), ('divide and conquer', 1), ('dynamic programming', 1), ('easy-to-understand', 1), ('easytounderstand', 1), ('efficient solution', 1), ('expalanation', 1), ('fast and simple', 1), ('javascript recursive', 1), ('javascript solution', 1), ('linear time', 1), ('microsoft onsite', 1), ('one-pass', 1), ('recursive', 1), ('recursive-postorder', 1), ('ritik', 1), ('simple', 1), ('solution-java', 1), ('struct', 1), ('traverse', 1), ('trees', 1)]"
1372,Longest ZigZag Path in a Binary Tree,https://leetcode.com/problems/longest-zigzag-path-in-a-binary-tree,"You are given the root of a binary tree.

A ZigZag path for a binary tree is defined as follow:


	Choose any node in the binary tree and a direction (right or left).
	If the current direction is right, move to the right child of the current node; otherwise, move to the left child.
	Change the direction from right to left or from left to right.
	Repeat the second and third steps until you can't move in the tree.


Zigzag length is defined as the number of nodes visited - 1. (A single node has a length of 0).

Return the longest ZigZag path contained in that tree.","['dynamic-programming', 'tree']",Medium,565,11,34821,19154,[],"[('dfs', 14), ('c++', 12), ('python', 12), ('java', 9), ('python 3', 7), ('cpp', 6), ('recursion', 6), ('c++ code', 5), ('memoization', 5), ('c#', 4), ('dfs simple solution', 4), ('easy-understanding', 4), ('python3', 4), ('bfs', 3), ('java-solution', 3), ('javascript', 3), ('recursive', 3), ('binary-tree', 2), ('cpp solution', 2), ('depth first search', 2), ('dfs-bottomup', 2), ('dfs-tree', 2), ('golang', 2), ('recursive-dfs', 2), ('tree', 2), ('tree-traversal', 2), ('trees', 2), ('beautiful', 1), ('breadth first search', 1), ('clean', 1), ('csharp', 1), ('depth-first-search', 1), ('detailed explanation', 1), ('dfs solution', 1), ('dfs-iterative', 1), ('dfs-topdown', 1), ('dynamic programming', 1), ('easy', 1), ('explained', 1), ('explanation', 1), ('iterative', 1), ('javacript', 1), ('javascript solution', 1), ('kotlin', 1), ('level order traversal', 1), ('linear time', 1), ('postorder traversal', 1), ('recursive-preorder', 1), ('scala', 1), ('self-explanatory', 1), ('short', 1), ('simple', 1), ('state', 1), ('top-down', 1), ('traversal', 1), ('typescript', 1)]"
1371,Find the Longest Substring Containing Vowels in Even Counts,https://leetcode.com/problems/find-the-longest-substring-containing-vowels-in-even-counts,"Given the string s, return the size of the longest substring containing each vowel an even number of times. That is, 'a', 'e', 'i', 'o', and 'u' must appear an even number of times.",['string'],Medium,608,24,20030,12176,[],"[('c#', 4), ('c++', 3), ('javascript', 3), ('xor', 3), ('bit manipulation', 2), ('dictionary', 2), ('golang', 2), ('python', 2), ('sliding window', 2), ('bit mask', 1), ('bit-manipulation', 1), ('bit-mask', 1), ('bitmanipulation', 1), ('bitmask', 1), ('bitmasking', 1), ('bitwise operation', 1), ('clear', 1), ('cpp solution', 1), ('evenvowels', 1), ('explanations', 1), ('go lang', 1), ('golang-solution', 1), ('hash table', 1), ('hashtable', 1), ('high performance', 1), ('java', 1), ('java ac solution', 1), ('java-solution', 1), ('java11', 1), ('longestsubstring', 1), ('prefix sum', 1), ('python 3', 1), ('python3', 1), ('simple solution', 1)]"
1370,Increasing Decreasing String,https://leetcode.com/problems/increasing-decreasing-string,"Given a string s. You should re-order the string using the following algorithm:


	Pick the smallest character from s and append it to the result.
	Pick the smallest character from s which is greater than the last appended character to the result and append it.
	Repeat step 2 until you cannot pick more characters.
	Pick the largest character from s and append it to the result.
	Pick the largest character from s which is smaller than the last appended character to the result and append it.
	Repeat step 5 until you cannot pick more characters.
	Repeat the steps from 1 to 6 until you pick all characters from s.


In each step, If the smallest or the largest character appears more than once you can choose any occurrence and append it to the result.

Return the result string after sorting s with this algorithm.","['string', 'sort']",Easy,356,395,52755,40909,[],"[('python 3', 22), ('c++', 20), ('java', 20), ('python', 18), ('python3', 15), ('cpp', 13), ('javascript', 11), ('c#', 7), ('counter', 5), ('c++ code', 4), ('map', 4), ('c', 3), ('cpp solution', 3), ('easy', 3), ('go', 3), ('golang', 3), ('histogram', 3), ('java-solution', 3), ('ruby', 3), ('100 speed', 2), ('clean code', 2), ('collections', 2), ('commentary', 2), ('cpp easy', 2), ('csharp', 2), ('hash table', 2), ('simple', 2), ('sort', 2), ('sorting', 2), ('string', 2), ('string builder', 2), ('swift', 2), ('100 memory', 1), ('akku', 1), ('almost optimal', 1), ('amazing', 1), ('arrays', 1), ('c programming', 1), ('concise', 1), ('concise-solution', 1), ('counting algorithm', 1), ('defaultdict', 1), ('dict', 1), ('dictionairy', 1), ('dictionaries', 1), ('dictonary', 1), ('doubly linked list', 1), ('easy-to-read', 1), ('easy-to-understand', 1), ('easy-understanding', 1), ('efficient solution', 1), ('explained', 1), ('explanation', 1), ('explanation of logic', 1), ('explanations', 1), ('fast', 1), ('fast and simple', 1), ('fast-solution', 1), ('frequency count', 1), ('greedy', 1), ('hashing', 1), ('hashmap', 1), ('heapq', 1), ('heaps', 1), ('hints', 1), ('increasing decreasing', 1), ('intuitive', 1), ('javascrip', 1), ('join', 1), ('kotlin', 1), ('map-stl', 1), ('naive approach', 1), ('naive-solution', 1), ('ordereddict', 1), ('php', 1), ('recursive', 1), ('scala', 1), ('scottish', 1), ('set', 1), ('sets', 1), ('simpe', 1), ('simple solution', 1), ('simpler', 1), ('simulate', 1), ('sorted', 1), ('space complexity', 1), ('stl', 1), ('stringbuilder', 1), ('strings', 1), ('time complexity', 1), ('typescript', 1), ('unit-test', 1), ('vector', 1)]"
1349,Maximum Students Taking Exam,https://leetcode.com/problems/maximum-students-taking-exam,"Given a m * n matrix seats  that represent seats distributions in a classroom. If a seat is broken, it is denoted by '#' character otherwise it is denoted by a '.' character.

Students can see the answers of those sitting next to the left, right, upper left and upper right, but he cannot see the answers of the student sitting directly in front or behind him. Return the maximum number of students that can take the exam together without any cheating being possible..

Students must be placed in seats in good condition.",['dynamic-programming'],Hard,396,10,16978,7538,[],"[('dynamic programming', 10), ('bitmask', 6), ('python', 6), ('dp', 3), ('memoization', 3), ('python 3', 3), ('bit-mask', 2), ('bitmasking', 2), ('c#', 2), ('c++', 2), ('bfs', 1), ('bit manipulation', 1), ('bitmanipulation', 1), ('bitwise', 1), ('c++ iterative sol', 1), ('c++ solution', 1), ('capacity-scaling', 1), ('cpp', 1), ('dfs', 1), ('dfs simple solution', 1), ('dimic', 1), ('easy', 1), ('edmonds karp', 1), ('fast', 1), ('ford-fulkerson', 1), ('golang', 1), ('greedy', 1), ('hungarian', 1), ('javascript', 1), ('push-relabel', 1), ('recursion', 1), ('top-down', 1), ('yield-from', 1)]"
1348,Tweet Counts Per Frequency,https://leetcode.com/problems/tweet-counts-per-frequency,"A social media company is trying to monitor activity on their site by analyzing the number of tweets that occur in select periods of time. These periods can be partitioned into smaller time chunks based on a certain frequency (every minute, hour, or day).

For example, the period [10, 10000] (in seconds) would be partitioned into the following time chunks with these frequencies:


	Every minute (60-second chunks): [10,69], [70,129], [130,189], ..., [9970,10000]
	Every hour (3600-second chunks): [10,3609], [3610,7209], [7210,10000]
	Every day (86400-second chunks): [10,10000]


Notice that the last chunk may be shorter than the specified frequency's chunk size and will always end with the end time of the period (10000 in the above example).

Design and implement an API to help the company with their analysis.

Implement the TweetCounts class:


	TweetCounts() Initializes the TweetCounts object.
	void recordTweet(String tweetName, int time) Stores the tweetName at the recorded time (in seconds).
	List<Integer> getTweetCountsPerFrequency(String freq, String tweetName, int startTime, int endTime) Returns a list of integers representing the number of tweets with tweetName in each time chunk for the given period of time [startTime, endTime] (in seconds) and frequency freq.
	
		freq is one of ""minute"", ""hour"", or ""day"" representing a frequency of every minute, hour, or day respectively.",['design'],Medium,17,26,38827,14605,[],"[('python', 8), ('java', 7), ('c++', 5), ('hashmap', 4), ('javascript', 4), ('python3', 4), ('binary search', 3), ('bisect', 3), ('c#', 3), ('cpp', 3), ('python 3', 3), ('binary-search', 2), ('bisect-python', 2), ('c++ code', 2), ('easy-undestand', 2), ('golang', 2), ('map', 2), ('treeset', 2), ('array', 1), ('binary tree', 1), ('bisection', 1), ('bucket sort', 1), ('cpp solution', 1), ('dict', 1), ('divmod', 1), ('explained', 1), ('go', 1), ('golang-solution', 1), ('hashmap and sorting', 1), ('javascriptes6', 1), ('linear-time', 1), ('priority queue', 1), ('python2', 1), ('resolved', 1), ('search', 1), ('sort', 1), ('straight-forward', 1), ('tree problem', 1), ('treemap', 1), ('trees', 1)]"
1347,Minimum Number of Steps to Make Two Strings Anagram,https://leetcode.com/problems/minimum-number-of-steps-to-make-two-strings-anagram,"Given two equal-size strings s and t. In one step you can choose any character of t and replace it with another character.

Return the minimum number of steps to make t an anagram of s.

An Anagram of a string is a string that contains the same characters with a different (or the same) ordering.",['string'],Medium,598,41,71547,53718,"[""Determine if Two Strings Are Close""]","[('java', 26), ('python', 25), ('c++', 21), ('python 3', 20), ('hashmap', 18), ('javascript', 15), ('cpp', 10), ('easy-understanding', 10), ('python3', 9), ('c#', 7), ('cpp easy', 7), ('easy-undestand', 7), ('string', 7), ('array', 6), ('counter', 6), ('java-solution', 6), ('dictionary', 5), ('easy', 5), ('cpp solution', 4), ('c++ code', 3), ('javascript solution', 3), ('clean code', 2), ('constant memory', 2), ('defaultdict', 2), ('dict', 2), ('easy-to-understand', 2), ('linear time', 2), ('map', 2), ('one-liner', 2), ('php', 2), ('swift', 2), ('unordered map', 2), ('1-line', 1), ('1-line solution', 1), ('1-liner', 1), ('100 memory', 1), ('100 space', 1), ('100 speed', 1), ('100 time', 1), ('5 liner', 1), ('algorithms', 1), ('beats', 1), ('best answer', 1), ('brute-force', 1), ('commentary', 1), ('concise-solution', 1), ('consise', 1), ('count', 1), ('easy understanding', 1), ('easytounderstand', 1), ('es6', 1), ('expalanation', 1), ('explaination', 1), ('explained', 1), ('explanatory comments', 1), ('fast', 1), ('fast and simple', 1), ('frequency count', 1), ('frequency table', 1), ('frequency-count', 1), ('frequencycounting', 1), ('fully optimised', 1), ('go', 1), ('golang', 1), ('good variable names', 1), ('hash', 1), ('hash table', 1), ('hashing', 1), ('help', 1), ('intuition', 1), ('java ac solution', 1), ('java solution', 1), ('javascriptes6', 1), ('kotlin', 1), ('linear-time', 1), ('linq', 1), ('logic explained', 1), ('minstepstomakeanagram', 1), ('needhelp', 1), ('one line', 1), ('php solution', 1), ('python2', 1), ('readable', 1), ('scala', 1), ('simple solution', 1), ('sorting', 1), ('streamapi', 1), ('swift5', 1), ('two pointers', 1), ('two-lines', 1), ('typescript', 1)]"
1346,Check If N and Its Double Exist,https://leetcode.com/problems/check-if-n-and-its-double-exist,"Given an array arr of integers, check if there exists two integers N and M such that N is the double of M ( i.e. N = 2 * M).

More formally check if there exists two indices i and j such that :


	i != j
	0 <= i, j < arr.length
	arr[i] == 2 * arr[j]",['array'],Easy,333,57,281300,101043,[],"[('c++', 30), ('python', 22), ('javascript', 19), ('java', 18), ('cpp', 17), ('python 3', 15), ('python3', 13), ('easy-understanding', 10), ('hashset', 10), ('c#', 9), ('set', 9), ('easy', 6), ('golang', 6), ('hash table', 5), ('java-solution', 5), ('simple', 5), ('cpp solution', 3), ('hashmap', 3), ('javascript solution', 3), ('kotlin', 3), ('swift', 3), ('1ms', 2), ('binary-search', 2), ('dict', 2), ('dictionary', 2), ('easiest', 2), ('easy-to-understand', 2), ('easy-undestand', 2), ('explained', 2), ('go', 2), ('golang-solution', 2), ('js', 2), ('map', 2), ('ruby', 2), ('rust', 2), ('solution', 2), ('.net', 1), ('0ms', 1), ('1-line', 1), ('100 memory', 1), ('100percent', 1), ('array', 1), ('arraylist', 1), ('beginner', 1), ('beginner friendly', 1), ('binarysearch', 1), ('bit manipulation', 1), ('bitwise operation', 1), ('brute force', 1), ('brute-force', 1), ('c', 1), ('checkifnanditsdoubleexist', 1), ('clean', 1), ('clean code', 1), ('commented', 1), ('complexity analysis', 1), ('counter', 1), ('csharp', 1), ('easy to understant', 1), ('easy-peasy', 1), ('easytounderstand', 1), ('efficient', 1), ('explanation', 1), ('explanatory comments', 1), ('facebook phone interview', 1), ('fast', 1), ('fastest', 1), ('fold', 1), ('foldleft', 1), ('fp', 1), ('functional programming', 1), ('functional-programming', 1), ('good variable names', 1), ('hash', 1), ('hashtable', 1), ('intutive', 1), ('iterator', 1), ('java solution', 1), ('javasccript', 1), ('js javascript', 1), ('kiss', 1), ('kotlin-solution', 1), ('linear memory', 1), ('linear time', 1), ('lucid', 1), ('notes', 1), ('one pass solution', 1), ('onepass', 1), ('pyhton', 1), ('python python3', 1), ('python2', 1), ('readable', 1), ('recursive', 1), ('scala', 1), ('short code', 1), ('simple solution', 1), ('simplesolution', 1), ('space complexity', 1), ('space-complexity', 1), ('structured code', 1), ('testcase-missing', 1), ('time complexity', 1), ('time-complexity', 1), ('ultra easy', 1), ('unit-test', 1), ('unordered map', 1)]"
1340,Jump Game V,https://leetcode.com/problems/jump-game-v,"Given an array of integers arr and an integer d. In one step you can jump from index i to index:


	i + x where: i + x < arr.length and  0 < x <= d.
	i - x where: i - x >= 0 and  0 < x <= d.


In addition, you can only jump from index i to index j if arr[i] > arr[j] and arr[i] > arr[k] for all indices k between i and j (More formally min(i, j) < k < max(i, j)).

You can choose any index of the array and start jumping. Return the maximum number of indices you can visit.

Notice that you can not jump outside of the array at any time.",['dynamic-programming'],Hard,349,13,20269,12038,[],"[('c++', 12), ('dp', 10), ('dynamic programming', 9), ('memoization', 8), ('recursion', 5), ('python', 4), ('python 3', 4), ('c#', 3), ('dfs', 3), ('java', 3), ('stack', 3), ('top down dp', 3), ('c++ code', 2), ('cpp', 2), ('javascript', 2), ('python3', 2), ('readable', 2), ('bfs', 1), ('cache', 1), ('clean code', 1), ('cpp easy', 1), ('dag', 1), ('depth first search', 1), ('dp-techqique', 1), ('golang', 1), ('graph', 1), ('lru-cache', 1), ('memo', 1), ('monotonic stack', 1), ('recursively', 1), ('recusion', 1), ('sorting', 1), ('stacks', 1), ('straight-forward', 1), ('top down', 1)]"
1339,Maximum Product of Splitted Binary Tree,https://leetcode.com/problems/maximum-product-of-splitted-binary-tree,"Given a binary tree root. Split the binary tree into two subtrees by removing 1 edge such that the product of the sums of the subtrees are maximized.

Since the answer may be too large, return it modulo 10^9 + 7.","['dynamic-programming', 'tree', 'depth-first-search']",Medium,532,44,63589,24541,[],"[('c++', 12), ('dfs', 11), ('java', 8), ('python', 7), ('python3', 5), ('binary-tree', 4), ('cpp', 4), ('dynamic programming', 4), ('javascript', 4), ('python 3', 4), ('c#', 3), ('depth first search', 3), ('golang', 3), ('recursion', 3), ('tree', 2), ('2 pass', 1), ('bfs-dfs', 1), ('c', 1), ('circular-array', 1), ('concise', 1), ('concise-solution', 1), ('cpp solution', 1), ('dfs simple solution', 1), ('dfs solution', 1), ('dfs-iterative', 1), ('dfs-postorder', 1), ('dp', 1), ('easy', 1), ('easy-to-understand', 1), ('easy-understanding', 1), ('expalanation', 1), ('help me', 1), ('inorder traversal', 1), ('java-solution', 1), ('javascript solution', 1), ('math', 1), ('maxproductsplitbinarytree', 1), ('memo', 1), ('modulo', 1), ('noob coding', 1), ('one-pass', 1), ('postorder-traversal', 1), ('pyhon', 1), ('python2', 1), ('recursive', 1), ('ruby', 1), ('simple', 1), ('subtreesum', 1), ('swift', 1), ('thinking process', 1), ('trees', 1), ('two-pass', 1)]"
1338,Reduce Array Size to The Half,https://leetcode.com/problems/reduce-array-size-to-the-half,"Given an array arr.  You can choose a set of integers and remove all the occurrences of these integers in the array.

Return the minimum size of the set so that at least half of the integers of the array are removed.","['array', 'greedy']",Medium,443,43,53154,35976,[],"[('c++', 26), ('python', 20), ('hashmap', 15), ('python 3', 15), ('cpp', 13), ('greedy', 11), ('java', 11), ('python3', 10), ('javascript', 9), ('map', 7), ('c#', 6), ('priority queue', 6), ('sorting', 6), ('counter', 5), ('easy', 5), ('java-solution', 5), ('dictionary', 4), ('c++ code', 3), ('cpp solution', 3), ('greedy approach', 3), ('sort', 3), ('array-sort', 2), ('cpp easy', 2), ('dictonary', 2), ('fast', 2), ('greedy algorithm', 2), ('java ac solution', 2), ('priorityqueue', 2), ('python2', 2), ('set', 2), ('simple', 2), ('sorted array', 2), ('unordered map', 2), ('vector', 2), ('0ms', 1), ('100', 1), ('100 space', 1), ('100 speed', 1), ('array', 1), ('array greedy', 1), ('arrays', 1), ('c', 1), ('c# solutions', 1), ('c++ solution', 1), ('clear explanation', 1), ('comment', 1), ('cplusplus', 1), ('dict', 1), ('dictionaries', 1), ('dictionary c#', 1), ('easy understand', 1), ('easy-understand', 1), ('easy-understanding', 1), ('easytounderstand', 1), ('explained', 1), ('explanation of logic', 1), ('frequency', 1), ('frequency count', 1), ('golang', 1), ('hash table', 1), ('hashmap and sorting', 1), ('hashtable', 1), ('heap', 1), ('js', 1), ('kotllin', 1), ('list', 1), ('map in c++', 1), ('map-stl', 1), ('max heap', 1), ('maxheap', 1), ('multimap', 1), ('naive-solution', 1), ('object', 1), ('one-liner', 1), ('priority-queue', 1), ('python3.8', 1), ('pythonpython3', 1), ('readable', 1), ('set c++', 1), ('simple clear c++ solution', 1), ('sorted', 1), ('streams', 1), ('swift', 1), ('two-lines', 1), ('typescript', 1), ('unorderedmap', 1), ('vector-operation', 1), ('with explanation', 1)]"
1337,The K Weakest Rows in a Matrix,https://leetcode.com/problems/the-k-weakest-rows-in-a-matrix,"You are given an m x n binary matrix mat of 1's (representing soldiers) and 0's (representing civilians). The soldiers are positioned in front of the civilians. That is, all the 1's will appear to the left of all the 0's in each row.

A row i is weaker than a row j if one of the following is true:


	The number of soldiers in row i is less than the number of soldiers in row j.
	Both rows have the same number of soldiers and i < j.


Return the indices of the k weakest rows in the matrix ordered from weakest to strongest.","['array', 'binary-search']",Easy,828,58,101856,73368,[],"[('java', 51), ('c++', 49), ('python', 49), ('cpp', 31), ('javascript', 26), ('python 3', 23), ('binary-search', 20), ('python3', 20), ('c#', 15), ('binary search', 14), ('java-solution', 12), ('easy-understanding', 11), ('one-liner', 10), ('priority queue', 10), ('sort', 10), ('sorting', 10), ('cpp solution', 8), ('simple', 8), ('golang', 7), ('map', 7), ('multimap', 7), ('binarysearch', 6), ('heap', 6), ('c++ code', 5), ('easy-to-understand', 5), ('easytounderstand', 5), ('hashmap', 5), ('array', 4), ('js', 4), ('ruby', 4), ('dictonary', 3), ('easy', 3), ('go', 3), ('golang-solution', 3), ('javascrip', 3), ('javascript solution', 3), ('linq', 3), ('matrix', 3), ('one line', 3), ('set', 3), ('streams', 3), ('swift', 3), ('treemap', 3), ('100 space', 2), ('beginner friendly', 2), ('built-in-function', 2), ('c', 2), ('c++11', 2), ('comparator', 2), ('dictionary', 2), ('easy solution', 2), ('easy to understand', 2), ('easy understanding', 2), ('explained', 2), ('fast', 2), ('go-solution', 2), ('hash table', 2), ('heapq', 2), ('java ac solution', 2), ('kotlin', 2), ('max heap', 2), ('pair', 2), ('priority-queue', 2), ('priorityqueue', 2), ('python2', 2), ('python3.8', 2), ('rust', 2), ('simple clear c++ solution', 2), ('simple solution', 2), ('stl', 2), ('typescript', 2), ('vector', 2), ('1 line', 1), ('100 faster', 1), ('100 speed', 1), ('2 lines', 1), ('24ms', 1), ('2d matrix', 1), ('3ms', 1), ('3ms-runtime', 1), ('accumulate', 1), ('algorithm', 1), ('array nesting', 1), ('array-sort', 1), ('arrays', 1), ('binary-tree', 1), ('brute force', 1), ('bruteforce', 1), ('bucket sort', 1), ('bucket-sort', 1), ('c++ hash', 1), ('c++ solution', 1), ('column-wise traverse', 1), ('comments added', 1), ('comments-added', 1), ('cpp easy', 1), ('custom comparator', 1), ('dictionaries', 1), ('easiest', 1), ('easiest solution', 1), ('easy to undertsand', 1), ('easy-undestand', 1), ('efficient solution', 1), ('enumerate', 1), ('explanation', 1), ('fast and simple', 1), ('fasterthan100', 1), ('fastest', 1), ('fastest solution', 1), ('feel', 1), ('filter', 1), ('gorillaz', 1), ('hashmaps', 1), ('heapify', 1), ('icomparer', 1), ('interview', 1), ('itemgetter', 1), ('iterative', 1), ('iterator', 1), ('izaac', 1), ('js javascript', 1), ('k-weakest-row', 1), ('kweakestrowsinmatrix', 1), ('lambda', 1), ('lambda function', 1), ('lambdas', 1), ('linear seach', 1), ('linear search', 1), ('linked', 1), ('list comprehension', 1), ('logic explained clearly', 1), ('logical', 1), ('loops', 1), ('lowerbound', 1), ('maps', 1), ('matrix traverse', 1), ('matrix-search', 1), ('max-heap', 1), ('maxheap', 1), ('min heap', 1), ('minheap', 1), ('mrmagician', 1), ('multiset', 1), ('nlogn', 1), ('one line solution', 1), ('one liner', 1), ('oneliner', 1), ('optimisation', 1), ('oredredmap', 1), ('partial sort', 1), ('performance', 1), ('pythonpython3', 1), ('quick sort', 1), ('racket', 1), ('radix-sort', 1), ('readable', 1), ('recursion', 1), ('reduce', 1), ('selection sort', 1), ('sets', 1), ('slice', 1), ('sorted', 1), ('sorted array', 1), ('sorted map', 1), ('ting', 1), ('two-lines', 1), ('understandable', 1), ('unit-test', 1), ('upvote', 1), ('vectors', 1), ('video-explanation', 1)]"
1359,Count All Valid Pickup and Delivery Options,https://leetcode.com/problems/count-all-valid-pickup-and-delivery-options,"Given n orders, each order consist in pickup and delivery services. 

Count all valid pickup/delivery possible sequences such that delivery(i) is always after of pickup(i). 

Since the answer may be too large, return it modulo 10^9 + 7.","['math', 'dynamic-programming']",Hard,306,34,22266,12429,[],"[('c++', 9), ('python 3', 4), ('python', 3), ('dynamic programming', 2), ('100 faster', 1), ('c#', 1), ('cpp', 1), ('explained', 1), ('java', 1), ('java-solution', 1), ('javascript', 1), ('memoization', 1), ('permutation', 1), ('python3', 1), ('recursion', 1), ('short code', 1)]"
1358,Number of Substrings Containing All Three Characters,https://leetcode.com/problems/number-of-substrings-containing-all-three-characters,"Given a string s consisting only of characters a, b and c.

Return the number of substrings containing at least one occurrence of all these characters a, b and c.",['string'],Medium,680,15,35368,21452,[],"[('slidingwindow', 11), ('java', 10), ('sliding-window', 7), ('python 3', 6), ('c++', 5), ('python', 5), ('javascript', 4), ('two-pointers', 4), ('golang', 3), ('hashmap', 3), ('linear time', 3), ('python3', 3), ('binarysearch', 2), ('c#', 2), ('cpp', 2), ('cpp solution', 2), ('easy', 2), ('easy-understanding', 2), ('java-solution', 2), ('pointers', 2), ('string', 2), ('two pointers', 2), ('1line', 1), ('1liner', 1), ('array', 1), ('awesome', 1), ('best', 1), ('bf1l', 1), ('c++ iterative sol', 1), ('constant space', 1), ('cpp easy', 1), ('dictionary', 1), ('easy to understandd', 1), ('easy-undestand', 1), ('explanations', 1), ('fp', 1), ('fp1l', 1), ('golang-solution', 1), ('intellijent', 1), ('java solution', 1), ('javascrip', 1), ('kotlin', 1), ('linear', 1), ('linear-scan', 1), ('map', 1), ('one-pointer', 1), ('oneliner', 1), ('python3.8', 1), ('pythonic', 1), ('short', 1), ('simple', 1), ('sliding window', 1), ('small', 1), ('subarray', 1), ('three pointer', 1), ('tle', 1), ('zea7ot', 1)]"
1357,Apply Discount Every n Orders,https://leetcode.com/problems/apply-discount-every-n-orders,"There is a sale in a supermarket, there will be a discount every n customer.
There are some products in the supermarket where the id of the i-th product is products[i] and the price per unit of this product is prices[i].
The system will count the number of customers and when the n-th customer arrive he/she will have a discount on the bill. (i.e if the cost is x the new cost is x - (discount * x) / 100). Then the system will start counting customers again.
The customer orders a certain amount of each product where product[i] is the id of the i-th product the customer ordered and amount[i] is the number of units the customer ordered of that product.

Implement the Cashier class:


	Cashier(int n, int discount, int[] products, int[] prices) Initializes the object with n, the discount, the products and their prices.
	double getBill(int[] product, int[] amount) returns the value of the bill and apply the discount if needed. Answers within 10^-5 of the actual value will be accepted as correct.",['design'],Medium,77,115,15904,10656,[],"[('hashmap', 14), ('java', 9), ('python', 6), ('c++', 4), ('cpp', 3), ('javascript', 3), ('c#', 2), ('python 3', 2), ('python3', 2), ('#csharp', 1), ('array', 1), ('c', 1), ('cpp solution', 1), ('dictionary', 1), ('easy to understand', 1), ('easy-to-understand', 1), ('easy-undestand', 1), ('efficient solution', 1), ('fast', 1), ('golang', 1), ('hash', 1), ('hash table', 1), ('javascript solution', 1), ('object-oriented-design', 1), ('quickest', 1), ('ruby', 1), ('short', 1), ('simple', 1), ('simple solution', 1), ('typescript', 1), ('zip', 1)]"
1356,Sort Integers by The Number of 1 Bits,https://leetcode.com/problems/sort-integers-by-the-number-of-1-bits,"Given an integer array arr. You have to sort the integers in the array in ascending order by the number of 1's in their binary representation and in case of two or more integers have the same number of 1's you have to sort them in ascending order.

Return the sorted array.","['sort', 'bit-manipulation']",Easy,497,21,57517,40537,[],"[('c++', 32), ('python', 27), ('cpp', 19), ('java', 13), ('python 3', 13), ('javascript', 12), ('python3', 12), ('bit-manipulation', 7), ('comparator', 6), ('java-solution', 6), ('bit manipulation', 5), ('c#', 5), ('cpp solution', 5), ('golang', 5), ('one-liner', 5), ('c', 4), ('c++ code', 4), ('clean code', 3), ('easy-understanding', 3), ('lambda expression', 3), ('map', 3), ('sort', 3), ('stl', 3), ('stl algorithms', 3), ('swift', 3), ('1-liner', 2), ('bitwise operation', 2), ('built-in-function', 2), ('easy-to-understand', 2), ('easy-undestand', 2), ('fast-solution', 2), ('gcc', 2), ('go', 2), ('java ac solution', 2), ('lambda', 2), ('ruby', 2), ('scala', 2), ('simple', 2), ('solution', 2), ('sort-function', 2), ('sorting', 2), ('swift5', 2), ('0ms', 1), ('1 bits', 1), ('100 faster', 1), ('2 approaches', 1), ('array', 1), ('arraylist', 1), ('bin', 1), ('binary representation', 1), ('bit operation', 1), ('bitwise', 1), ('brian kernighans', 1), ('bubble-sort', 1), ('bucket sort', 1), ('buckets', 1), ('built-in', 1), ('builtin', 1), ('c++ template', 1), ('collections', 1), ('concise-solution', 1), ('count', 1), ('dictionary', 1), ('dictonary', 1), ('dp', 1), ('easy', 1), ('easy code', 1), ('easytounderstand', 1), ('elegant', 1), ('fast', 1), ('faster', 1), ('fuck noobs', 1), ('group-shift', 1), ('hamming-weight', 1), ('hashmap', 1), ('heapq', 1), ('heapsort', 1), ('inplace', 1), ('java streams', 1), ('kernighans algorithm', 1), ('kotlin', 1), ('lists', 1), ('maxheap', 1), ('memoization', 1), ('merge sort', 1), ('merge sorted', 1), ('multimap', 1), ('nlogn', 1), ('one line', 1), ('power of two', 1), ('priority queue', 1), ('python.', 1), ('quick sort', 1), ('rust', 1), ('short', 1), ('sorted', 1), ('streams', 1), ('treemap', 1), ('tuple', 1), ('two-lines', 1), ('vector', 1), ('video explanation', 1)]"
1335,Minimum Difficulty of a Job Schedule,https://leetcode.com/problems/minimum-difficulty-of-a-job-schedule,"You want to schedule a list of jobs in d days. Jobs are dependent (i.e To work on the i-th job, you have to finish all the jobs j where 0 <= j < i).

You have to finish at least one task every day. The difficulty of a job schedule is the sum of difficulties of each day of the d days. The difficulty of a day is the maximum difficulty of a job done in that day.

Given an array of integers jobDifficulty and an integer d. The difficulty of the i-th job is jobDifficulty[i].

Return the minimum difficulty of a job schedule. If you cannot find a schedule for the jobs return -1.",['dynamic-programming'],Hard,662,83,66438,37559,[],"[('dp', 22), ('dynamic programming', 16), ('memoization', 11), ('java', 10), ('python', 9), ('c++', 8), ('python 3', 7), ('cpp', 4), ('javascript', 4), ('python3', 4), ('c#', 3), ('kotlin', 3), ('100 beat', 2), ('bottom-up-algorithm', 2), ('bottomup', 2), ('dp-techqique', 2), ('top-down dp', 2), ('100 faster', 1), ('100 speed', 1), ('backtracking', 1), ('bottom up', 1), ('bottoms-up', 1), ('brute force', 1), ('c# dp', 1), ('combinatorics', 1), ('comments', 1), ('csharp', 1), ('dfs', 1), ('dfs-topdown', 1), ('easy', 1), ('easy-to-understand', 1), ('easy-understanding', 1), ('explained', 1), ('explanation', 1), ('golang', 1), ('help needed', 1), ('linear memory', 1), ('memory-limit-exceeded', 1), ('need-help', 1), ('recurision', 1), ('recursion memoization', 1), ('recursive solution', 1), ('top-down', 1), ('topdown', 1)]"
1334,Find the City With the Smallest Number of Neighbors at a Threshold Distance,https://leetcode.com/problems/find-the-city-with-the-smallest-number-of-neighbors-at-a-threshold-distance,"There are n cities numbered from 0 to n-1. Given the array edges where edges[i] = [fromi, toi, weighti] represents a bidirectional and weighted edge between cities fromi and toi, and given the integer distanceThreshold.

Return the city with the smallest number of cities that are reachable through some path and whose distance is at most distanceThreshold, If there are multiple such cities, return the city with the greatest number.

Notice that the distance of a path connecting cities i and j is equal to the sum of the edges' weights along that path.",['graph'],Medium,540,34,47127,22334,[],"[('floyd-warshall', 21), ('c++', 13), ('cpp', 8), ('graph', 7), ('java', 7), ('python 3', 6), ('dijkstras algorithm', 5), ('python', 5), ('python3', 5), ('dijkstras', 3), ('golang', 3), ('java-solution', 3), ('javascript', 3), ('comments-added', 2), ('dfs', 2), ('dijkstra', 2), ('dijsktra', 2), ('priority queue', 2), ('#c++', 1), ('#cpp', 1), ('#floyd-warshall', 1), ('50iq', 1), ('awesome samriddhi', 1), ('bfs', 1), ('c#', 1), ('c++17', 1), ('clean code', 1), ('cpp solution', 1), ('depth-first search', 1), ('dfs simple solution', 1), ('dfs with memo', 1), ('dijkastra', 1), ('dijkstra algorithm', 1), ('djikstra', 1), ('dp', 1), ('easy-to-understand', 1), ('easy-understanding', 1), ('explained', 1), ('fast and simple', 1), ('floyd', 1), ('floyd warshall', 1), ('floyd-algorithm', 1), ('heapq', 1), ('minheap', 1), ('olla', 1), ('priority-queue', 1), ('pruning', 1), ('ritik', 1), ('ruby', 1), ('simple', 1), ('simpler', 1), ('skku', 1), ('swift', 1), ('warshall', 1)]"
1333,"Filter Restaurants by Vegan-Friendly, Price and Distance",https://leetcode.com/problems/filter-restaurants-by-vegan-friendly-price-and-distance,"Given the array restaurants where  restaurants[i] = [idi, ratingi, veganFriendlyi, pricei, distancei]. You have to filter the restaurants using three filters.

The veganFriendly filter will be either true (meaning you should only include restaurants with veganFriendlyi set to true) or false (meaning you can include any restaurant). In addition, you have the filters maxPrice and maxDistance which are the maximum value for price and distance of restaurants you should consider respectively.

Return the array of restaurant IDs after filtering, ordered by rating from highest to lowest. For restaurants with the same rating, order them by id from highest to lowest. For simplicity veganFriendlyi and veganFriendly take value 1 when it is true, and 0 when it is false.","['array', 'sort']",Medium,139,129,28433,16353,[],"[('python', 13), ('python 3', 12), ('python3', 9), ('c++', 7), ('cpp', 6), ('c#', 5), ('cpp solution', 5), ('java', 5), ('javascript', 4), ('sort', 4), ('java-solution', 3), ('sorting', 3), ('fast and simple', 2), ('golang', 2), ('linq', 2), ('priority queue', 2), ('1-line', 1), ('1-liner', 1), ('100 memory', 1), ('algorithms', 1), ('array', 1), ('array-sort', 1), ('Comparable', 1), ('custom comparator', 1), ('custom sorting', 1), ('destructuring assignment', 1), ('easy', 1), ('easy to understand', 1), ('easy-solition', 1), ('explained', 1), ('explanation', 1), ('fastest', 1), ('filter', 1), ('functional programming', 1), ('functional-programming', 1), ('golang-solution', 1), ('implementation', 1), ('intuitive', 1), ('java 8', 1), ('java ac solution', 1), ('java streams', 1), ('kotlin', 1), ('lambda', 1), ('lambda expression', 1), ('lazy', 1), ('linkedlist', 1), ('list-comprehension', 1), ('max-heap', 1), ('memory efficient', 1), ('one-liner', 1), ('pair', 1), ('python2', 1), ('pythonic', 1), ('readable', 1), ('scala', 1), ('sets', 1), ('simple', 1), ('streams', 1), ('swif', 1), ('two-lines', 1), ('yelp', 1)]"
1332,Remove Palindromic Subsequences,https://leetcode.com/problems/remove-palindromic-subsequences,"You are given a string s consisting only of letters 'a' and 'b'. In a single step you can remove one palindromic subsequence from s.

Return the minimum number of steps to make the given string empty.

A string is a subsequence of a given string if it is generated by deleting some characters of a given string without changing its order. Note that a subsequence does not necessarily need to be contiguous.

A string is called palindrome if is one that reads the same backward as well as forward.",['string'],Easy,32,72,65368,44725,[],"[('c++', 33), ('java', 24), ('python', 22), ('cpp', 20), ('easy-understanding', 14), ('java-solution', 11), ('javascript', 11), ('python 3', 10), ('python3', 10), ('explained', 9), ('c#', 7), ('one-liner', 7), ('simple', 7), ('string', 7), ('palindrome', 6), ('easy', 5), ('palindrome-check', 5), ('swift', 5), ('100 speed', 4), ('cpp solution', 3), ('easy-to-understand', 3), ('fast', 3), ('golang', 3), ('video-explanation', 3), ('beginner friendly', 2), ('c', 2), ('concise', 2), ('cpp easy', 2), ('explained solution', 2), ('fast-solution', 2), ('fastest', 2), ('js', 2), ('python2', 2), ('ruby', 2), ('simple solution', 2), ('space-non', 2), ('strings', 2), ('swift5', 2), ('0ms runtime', 1), ('1 line', 1), ('100 memory', 1), ('100 space', 1), ('100speed', 1), ('algorithms', 1), ('amazon interview', 1), ('awesome samriddhi', 1), ('big o n', 1), ('c solution', 1), ('c++ code', 1), ('c++ solution', 1), ('char compare', 1), ('char comparison', 1), ('character', 1), ('clean', 1), ('clean code', 1), ('clean solution', 1), ('clean-efficient-code', 1), ('comments added', 1), ('constant space', 1), ('cplusplus', 1), ('cpp-solution', 1), ('detailed-explanation', 1), ('easiest', 1), ('easiest solution', 1), ('east-understanding', 1), ('easy-solition', 1), ('easy-undestand', 1), ('easytounderstand', 1), ('efficient', 1), ('es2015', 1), ('explanations', 1), ('fast and simple', 1), ('go', 1), ('java ac solution', 1), ('java-8', 1), ('js javascript', 1), ('kotlin', 1), ('linear time', 1), ('logic explained', 1), ('one line', 1), ('oneliner', 1), ('ptyhon3', 1), ('reverse', 1), ('ritik', 1), ('rust', 1), ('scala', 1), ('short', 1), ('short concise', 1), ('short solution', 1), ('solution', 1), ('speed', 1), ('string-operation', 1), ('subsequences', 1), ('trick', 1), ('two-pointers', 1), ('unit-test', 1), ('well commented', 1), ('while', 1), ('whileloop', 1)]"
1326,Minimum Number of Taps to Open to Water a Garden,https://leetcode.com/problems/minimum-number-of-taps-to-open-to-water-a-garden,"There is a one-dimensional garden on the x-axis. The garden starts at the point 0 and ends at the point n. (i.e The length of the garden is n).

There are n + 1 taps located at points [0, 1, ..., n] in the garden.

Given an integer n and an integer array ranges of length n + 1 where ranges[i] (0-indexed) means the i-th tap can water the area [i - ranges[i], i + ranges[i]] if it was open.

Return the minimum number of taps that should be open to water the whole garden, If the garden cannot be watered return -1.","['dynamic-programming', 'greedy']",Hard,595,63,55176,26244,[],"[('greedy', 11), ('java', 9), ('c++', 7), ('python', 7), ('dp', 6), ('dynamic programming', 6), ('javascript', 5), ('c#', 4), ('greedy approach', 4), ('linear time', 3), ('merge intervals', 3), ('python3', 3), ('sorting', 3), ('cpp', 2), ('golang', 2), ('java-solution', 2), ('priorityqueue', 2), ('python 3', 2), ('bfs', 1), ('c++ solution', 1), ('comments added', 1), ('constant memory', 1), ('counting-sort', 1), ('detailed', 1), ('easy', 1), ('explained', 1), ('explanation', 1), ('fast and simple', 1), ('greedy algorithm', 1), ('interval-merging', 1), ('iterative', 1), ('js', 1), ('memoization', 1), ('optimal', 1), ('php', 1), ('python2', 1), ('readable', 1), ('recursion', 1), ('scala', 1), ('short solution', 1), ('sort', 1), ('stacks', 1), ('top down approach', 1), ('treemap', 1), ('video stitching', 1)]"
1325,Delete Leaves With a Given Value,https://leetcode.com/problems/delete-leaves-with-a-given-value,"Given a binary tree root and an integer target, delete all the leaf nodes with value target.

Note that once you delete a leaf node with value target, if it's parent node becomes a leaf node and has the value target, it should also be deleted (you need to continue doing that until you can't).",['tree'],Medium,704,17,53801,39733,[],"[('java', 33), ('recursion', 33), ('c++', 27), ('dfs', 22), ('cpp', 19), ('python', 15), ('postorder-traversal', 13), ('binary-tree', 10), ('java-solution', 10), ('recursive', 10), ('python3', 9), ('c#', 8), ('dfs simple solution', 7), ('javascript', 7), ('recusion', 7), ('python 3', 6), ('recursively', 5), ('cpp solution', 4), ('easy-understanding', 4), ('golang', 4), ('c++ code', 3), ('post-order-traversal', 3), ('simple', 3), ('swift', 3), ('tree', 3), ('100 memory', 2), ('100 speed', 2), ('binary tree', 2), ('depth first search', 2), ('easy', 2), ('easy to understand', 2), ('explained', 2), ('iterative', 2), ('javascript solution', 2), ('linear time', 2), ('memory leak', 2), ('postorder', 2), ('preorder traversal', 2), ('recursive solution', 2), ('rust', 2), ('#java', 1), ('#recursive', 1), ('0ms', 1), ('100 space', 1), ('2 solutions', 1), ('algorithms', 1), ('beats 100', 1), ('beginner friendly', 1), ('bfs', 1), ('binary tree traversal', 1), ('c', 1), ('clean code', 1), ('code lover', 1), ('commentary', 1), ('concise', 1), ('csharp', 1), ('deep-first-search', 1), ('deleteleaveswithgivenval', 1), ('dfs recursive', 1), ('dfs solution', 1), ('dfs-bottomup', 1), ('dfs-recursive', 1), ('dfs-tree', 1), ('easytounderstand', 1), ('fast-solution', 1), ('faster', 1), ('golang-solution', 1), ('graph', 1), ('intutive', 1), ('invote', 1), ('iterate', 1), ('iteratively', 1), ('java recursion', 1), ('mrmagician', 1), ('postorder traversal', 1), ('python 2', 1), ('pythonpython3', 1), ('rajat', 1), ('recrusion', 1), ('recurision', 1), ('recursive lines clean', 1), ('ruby', 1), ('self explanatory', 1), ('simple clear c++ solution', 1), ('simple solution', 1), ('simple-solution', 1), ('simplest', 1), ('swift5', 1), ('time-complexity', 1), ('tree traversal', 1), ('tree-traversal', 1), ('trees', 1), ('typescript', 1), ('ultra simple', 1), ('upvote', 1)]"
1324,Print Words Vertically,https://leetcode.com/problems/print-words-vertically,"Given a string s. Return all the words vertically in the same order in which they appear in s.
Words are returned as a list of strings, complete with spaces when is necessary. (Trailing spaces are not allowed).
Each word would be put on only one column and that in one column there will be only one word.",['string'],Medium,247,68,33283,19619,[],"[('c++', 18), ('python', 13), ('cpp', 12), ('java', 11), ('c#', 9), ('string', 9), ('java-solution', 8), ('python 3', 8), ('easy-understanding', 7), ('python3', 7), ('javascript', 6), ('easy-undestand', 5), ('cpp solution', 4), ('golang', 3), ('stringstream', 3), ('swift', 3), ('100 space', 2), ('c', 2), ('go', 2), ('hashmap', 2), ('matrix', 2), ('scala', 2), ('vector', 2), ('0ms-solution', 1), ('100 faster', 1), ('100 speed', 1), ('beats 100', 1), ('bestmethod', 1), ('bestsolution', 1), ('brute-force', 1), ('c programming', 1), ('c# string', 1), ('c#-solution', 1), ('c++ code', 1), ('comments', 1), ('cpp easy', 1), ('csharp', 1), ('description', 1), ('dictionary', 1), ('easy', 1), ('easy-understand', 1), ('easytounderstand', 1), ('explained', 1), ('functional-programming', 1), ('hash', 1), ('intuitive', 1), ('istringstream', 1), ('java solution', 1), ('javasccript', 1), ('javascript solution', 1), ('kotlin', 1), ('lesslines', 1), ('linear', 1), ('linear-time', 1), ('list', 1), ('one-liner', 1), ('onepass', 1), ('php', 1), ('printwordsvertically', 1), ('python2', 1), ('regex', 1), ('rtrim', 1), ('ruby', 1), ('rust', 1), ('simple', 1), ('simple clear c++ solution', 1), ('simple solution', 1), ('slice', 1), ('split', 1), ('stacks', 1), ('string builder', 1), ('string-operation', 1), ('stringbuilder', 1), ('strip', 1), ('transpose', 1), ('two-lines', 1), ('two-pointer', 1), ('ultra easy', 1), ('zip longest', 1)]"
1323,Maximum 69 Number,https://leetcode.com/problems/maximum-69-number,"Given a positive integer num consisting only of digits 6 and 9.

Return the maximum number you can get by changing at most one digit (6 becomes 9, and 9 becomes 6).",['math'],Easy,572,90,102744,80078,[],"[('c++', 48), ('java', 45), ('python', 38), ('python 3', 37), ('javascript', 36), ('cpp', 24), ('simple solution', 15), ('python3', 14), ('math', 12), ('one-liner', 11), ('c#', 10), ('cpp solution', 10), ('golang', 10), ('go', 9), ('java-solution', 9), ('c', 7), ('string', 7), ('c++ code', 6), ('simple', 6), ('replace', 5), ('100 speed', 4), ('easy', 4), ('easy-understanding', 4), ('easytounderstand', 4), ('fast and simple', 4), ('no string', 4), ('swift', 4), ('easy-to-understand', 3), ('fast', 3), ('fast-solution', 3), ('golang-solution', 3), ('javascript solution', 3), ('kotlin', 3), ('pythonpython3', 3), ('ruby', 3), ('stringbuilder', 3), ('strings', 3), ('0ms', 2), ('1-liner', 2), ('100 faster', 2), ('100 memory', 2), ('c programming', 2), ('c++ solution', 2), ('c++11', 2), ('commentary', 2), ('easy-undestand', 2), ('es6', 2), ('explained', 2), ('fasterthan100', 2), ('go-solution', 2), ('js', 2), ('linear time', 2), ('loop', 2), ('no lib', 2), ('one line', 2), ('python2', 2), ('stoi', 2), ('typescript', 2), ('without string', 2), ('#cpp', 1), ('#math', 1), ('0ms runtime', 1), ('100 faster cpp', 1), ('100 space', 1), ('3 liner', 1), ('array', 1), ('basic', 1), ('beginner friendly', 1), ('best-solution', 1), ('best-solution-ever', 1), ('brute force', 1), ('brute-force', 1), ('c++ ac', 1), ('c++14', 1), ('clean code', 1), ('comments', 1), ('comments-added', 1), ('conditions', 1), ('constant memory', 1), ('cpp-solution', 1), ('csharp', 1), ('deepcopy', 1), ('different approach', 1), ('digit', 1), ('digits', 1), ('easy to understand', 1), ('easy understanding', 1), ('easy undestanding', 1), ('easy-to-follow', 1), ('easy-understsand', 1), ('efficient', 1), ('efficient solution', 1), ('examples', 1), ('explaination', 1), ('explanation', 1), ('faster', 1), ('fastest', 1), ('for', 1), ('github', 1), ('go lang', 1), ('golang solution', 1), ('if-else', 1), ('integer', 1), ('integer to string', 1), ('interrupt service routine', 1), ('javascriptes6', 1), ('less memory', 1), ('listnode', 1), ('math-solution', 1), ('math.pow', 1), ('maximum 69 number', 1), ('modulo', 1), ('modulus', 1), ('naive-solution', 1), ('nice', 1), ('one liner', 1), ('one pass solution', 1), ('one-line', 1), ('one-loop', 1), ('optimisation', 1), ('performance', 1), ('php', 1), ('php solution', 1), ('pyhton', 1), ('python3.8', 1), ('question', 1), ('readable', 1), ('readable code', 1), ('regex', 1), ('reverse', 1), ('reverse-number', 1), ('rust', 1), ('scala', 1), ('sequential digits', 1), ('simple approach', 1), ('simple clear c++ solution', 1), ('simplesolution', 1), ('simplest', 1), ('solution', 1), ('space optimized', 1), ('split', 1), ('stack', 1), ('stacks', 1), ('string builder', 1), ('string-operation', 1), ('string-to-integer', 1), ('test-cases', 1), ('tricky', 1), ('type conversion', 1), ('very clear', 1), ('very simple', 1)]"
1345,Jump Game IV,https://leetcode.com/problems/jump-game-iv,"Given an array of integers arr, you are initially positioned at the first index of the array.

In one step you can jump from index i to index:


	i + 1 where: i + 1 < arr.length.
	i - 1 where: i - 1 >= 0.
	j where: arr[i] == arr[j] and i != j.


Return the minimum number of steps to reach the last index of the array.

Notice that you can not jump outside of the array at any time.",['breadth-first-search'],Hard,605,43,76728,32219,[],"[('bfs', 44), ('c++', 17), ('python', 11), ('javascript', 7), ('python 3', 6), ('c#', 5), ('breadth-first-search', 4), ('cpp', 4), ('java', 4), ('cpp solution', 3), ('explained', 3), ('graph', 3), ('hashmap', 3), ('bidirectional bfs', 2), ('breadth first search', 2), ('dp', 2), ('dynamic programming', 2), ('golang', 2), ('high performance', 2), ('java-solution', 2), ('python3', 2), ('back tracking', 1), ('bfs simple solution', 1), ('bsf', 1), ('c code', 1), ('c programming', 1), ('concise', 1), ('dfs simple solution', 1), ('dp-techqique', 1), ('easy', 1), ('easy-understanding', 1), ('easy-undestand', 1), ('fast and simple', 1), ('go', 1), ('go-solution', 1), ('golang-solution', 1), ('graphic', 1), ('graphs', 1), ('hash table', 1), ('help needed', 1), ('interview question', 1), ('iterative', 1), ('jump-game', 1), ('jumpgameiv', 1), ('kotlin', 1), ('kotlin-solution', 1), ('list', 1), ('maps', 1), ('not-acceptable', 1), ('ruby', 1), ('set', 1), ('shortestpath', 1), ('simple clear c++ solution', 1), ('swift', 1), ('tle', 1), ('video explanation', 1), ('video-explanation', 1)]"
1344,Angle Between Hands of a Clock,https://leetcode.com/problems/angle-between-hands-of-a-clock,"Given two numbers, hour and minutes. Return the smaller angle (in degrees) formed between the hour and the minute hand.",['math'],Medium,514,121,88083,54027,[],"[('c++', 30), ('java', 25), ('math', 25), ('cpp', 21), ('python', 19), ('python 3', 14), ('easy-undestand', 13), ('javascript', 10), ('explained', 8), ('java-solution', 6), ('one-liner', 6), ('python3', 6), ('0ms', 5), ('cpp solution', 5), ('easy-understanding', 5), ('100 speed', 4), ('c#', 4), ('clock', 4), ('easy', 4), ('easysolution', 4), ('simple solution', 4), ('swift', 4), ('100 space', 3), ('c++ code', 3), ('cpp easy', 3), ('fast and simple', 3), ('golang', 3), ('math-solution', 3), ('maths', 3), ('simple', 3), ('100 faster', 2), ('100 memory', 2), ('angle', 2), ('brute force', 2), ('easy-implementation', 2), ('easy-understand', 2), ('explanation of logic', 2), ('formula based', 2), ('math.min', 2), ('one line', 2), ('python2', 2), ('ruby', 2), ('scala', 2), ('0ms runtime', 1), ('100 faster runtime', 1), ('2-line solution', 1), ('3 lines', 1), ('arithmetic-operations', 1), ('basic concept', 1), ('basic maths', 1), ('c++ easy to understand', 1), ('c++ solution', 1), ('c++code', 1), ('clean code', 1), ('clear explanation', 1), ('commented', 1), ('concise', 1), ('concise-solution', 1), ('csharp', 1), ('detailed explanation', 1), ('diagram', 1), ('easy code', 1), ('easy peasy', 1), ('easy understanding', 1), ('easy-peasy', 1), ('efficient solution', 1), ('explaination', 1), ('explained solution', 1), ('explanation with code', 1), ('explanations', 1), ('fast-solution', 1), ('fastest', 1), ('formula', 1), ('full explanation', 1), ('go', 1), ('go-solution', 1), ('golang-solution', 1), ('graphic', 1), ('hour hand', 1), ('image', 1), ('images', 1), ('intuitive', 1), ('intutive', 1), ('java ac solution', 1), ('javascrip', 1), ('javascript solution', 1), ('javasolution', 1), ('js javascript', 1), ('kotlin', 1), ('kotlinvim', 1), ('less memory', 1), ('linear time', 1), ('math-proof', 1), ('mathematic', 1), ('minute hand', 1), ('o1', 1), ('one liner', 1), ('production', 1), ('pythonpython3', 1), ('readable', 1), ('readable code', 1), ('rust', 1), ('self-explanatory', 1), ('simple approach', 1), ('simplest', 1), ('simpleunderstanding', 1), ('solution', 1), ('todouble', 1), ('ultra simple', 1), ('upvote', 1)]"
1343,Number of Sub-arrays of Size K and Average Greater than or Equal to Threshold,https://leetcode.com/problems/number-of-sub-arrays-of-size-k-and-average-greater-than-or-equal-to-threshold,"Given an array of integers arr and two integers k and threshold.

Return the number of sub-arrays of size k and average greater than or equal to threshold.",['array'],Medium,224,41,26937,17539,[],"[('sliding-window', 13), ('c++', 11), ('cpp', 9), ('java', 9), ('slidingwindow', 9), ('python', 6), ('python 3', 6), ('linear time', 5), ('javascript', 4), ('prefix sum', 4), ('python3', 4), ('c#', 3), ('sliding window', 3), ('cpp solution', 2), ('easy-to-understand', 2), ('easy-understanding', 2), ('golang', 2), ('java-solution', 2), ('simple', 2), ('simple solution', 2), ('#easy-understand', 1), ('#java', 1), ('array', 1), ('arrays', 1), ('c', 1), ('c++ code', 1), ('constant space', 1), ('dynamic programming', 1), ('easy to understand', 1), ('easy-undestand', 1), ('explained', 1), ('fast and simple', 1), ('go', 1), ('go-solution', 1), ('golang-solution', 1), ('java solution', 1), ('javascrip', 1), ('javascript solution', 1), ('python2', 1), ('queue', 1), ('readable', 1), ('rust', 1), ('slide window', 1)]"
1342,Number of Steps to Reduce a Number to Zero,https://leetcode.com/problems/number-of-steps-to-reduce-a-number-to-zero,"Given a non-negative integer num, return the number of steps to reduce it to zero. If the current number is even, you have to divide it by 2, otherwise, you have to subtract 1 from it.",['bit-manipulation'],Easy,896,84,219881,188275,[],"[('c++', 72), ('java', 56), ('python', 55), ('cpp', 45), ('python 3', 42), ('javascript', 36), ('bit manipulation', 30), ('recursion', 28), ('python3', 23), ('c#', 22), ('cpp solution', 16), ('java-solution', 15), ('easy-understanding', 14), ('c', 12), ('simple solution', 11), ('one-liner', 9), ('bit-manipulation', 8), ('c++ code', 8), ('easy', 8), ('easytounderstand', 8), ('javascript solution', 8), ('rust', 8), ('golang', 7), ('simple', 7), ('swift', 7), ('bitwise operation', 6), ('easy-to-understand', 5), ('iterative', 5), ('100 memory', 4), ('bitwise', 4), ('c++ solution', 4), ('explained', 4), ('fast', 4), ('go', 4), ('js', 4), ('js javascript', 4), ('recursive', 4), ('ruby', 4), ('video-explanation', 4), ('100', 3), ('100 speed', 3), ('1342', 3), ('bit', 3), ('c++ recursive solution', 3), ('cpp easy', 3), ('fast and simple', 3), ('kotlin', 3), ('0ms', 2), ('beginners', 2), ('bit operation', 2), ('bit-shift', 2), ('bitmanipulation', 2), ('bitwise operators', 2), ('c# solutions', 2), ('clean code', 2), ('easy to understand', 2), ('easy-solition', 2), ('efficient approach', 2), ('faster than 100.00', 2), ('golang-solution', 2), ('ios', 2), ('iteration', 2), ('javascrip', 2), ('loops', 2), ('numbers', 2), ('python2', 2), ('recusion', 2), ('scala', 2), ('simulation', 2), ('solution', 2), ('while loop', 2), ('#bit-manipulation', 1), ('#c++', 1), ('#python', 1), ('#python 3', 1), ('0ms runtime', 1), ('100 faster', 1), ('100 faster cpp', 1), ('100 space', 1), ('3 lines', 1), ('99.2 faster', 1), ('amazon', 1), ('apple', 1), ('assembly', 1), ('awesome samriddhi', 1), ('beats 100', 1), ('best-solution', 1), ('binary representation', 1), ('bitcount', 1), ('bits', 1), ('bitset', 1), ('bitwise operator', 1), ('bitwise-operators', 1), ('c code', 1), ('c# easy', 1), ('c# problems', 1), ('c# solution', 1), ('c++11', 1), ('c++code', 1), ('commentary', 1), ('constant space', 1), ('cpp clear', 1), ('cpp doubt', 1), ('detailed', 1), ('divide-and-conquer', 1), ('division', 1), ('do...while', 1), ('dynamic programming', 1), ('easiest solution', 1), ('easy question', 1), ('easy sloution', 1), ('easy solution', 1), ('easy to follow code', 1), ('easy-undestand', 1), ('efficient solution', 1), ('es6', 1), ('explaination', 1), ('explanation', 1), ('faang', 1), ('faster than 95.46', 1), ('faster than 99.41', 1), ('faster than 99.67', 1), ('faster than 99.8', 1), ('fastest', 1), ('fastest java solution', 1), ('formula based', 1), ('fp', 1), ('functional', 1), ('gcc', 1), ('github', 1), ('google', 1), ('hammingweight', 1), ('help', 1), ('if-else', 1), ('interview', 1), ('iterative way', 1), ('iterative-recursive', 1), ('iterator', 1), ('java solution', 1), ('lambda expression', 1), ('less memory than 96.33', 1), ('log', 1), ('logarithm', 1), ('loop method', 1), ('math', 1), ('Netflix', 1), ('noob', 1), ('oms', 1), ('on', 1), ('one liner', 1), ('oneliner', 1), ('optimal', 1), ('poweroftwo', 1), ('python 3 recursion', 1), ('python3.8', 1), ('pythonsolution', 1), ('raviinroorkee', 1), ('recrusive', 1), ('recurision', 1), ('recurrance', 1), ('recursion memoization', 1), ('recursion vs iteration', 1), ('recursive solution', 1), ('recursive vs iterative', 1), ('recursively', 1), ('recurssion', 1), ('ritik', 1), ('self explanatory', 1), ('sequence', 1), ('series', 1), ('short solution', 1), ('simple clear c++ solution', 1), ('stepstoreducenumtozero', 1), ('straight-forward', 1), ('tail-call', 1), ('tail-recursive', 1), ('test', 1), ('three-lines', 1), ('time-complexity logn', 1), ('typescript', 1), ('unit-test', 1), ('very simple', 1), ('while', 1), ('while-loop', 1), ('whileloop', 1)]"
1320,Minimum Distance to Type a Word Using Two Fingers,https://leetcode.com/problems/minimum-distance-to-type-a-word-using-two-fingers,"You have a keyboard layout as shown above in the XY plane, where each English uppercase letter is located at some coordinate, for example, the letter A is located at coordinate (0,0), the letter B is located at coordinate (0,1), the letter P is located at coordinate (2,3) and the letter Z is located at coordinate (4,1).

Given the string word, return the minimum total distance to type such string using only two fingers. The distance between coordinates (x1,y1) and (x2,y2) is |x1 - x2| + |y1 - y2|. 

Note that the initial positions of your two fingers are considered free so don't count towards your total distance, also your two fingers do not have to start at the first letter or the first two letters.",['dynamic-programming'],Hard,548,23,29251,18066,[],"[('dynamic programming', 11), ('python', 8), ('dp', 7), ('c++', 4), ('memoization', 4), ('javascript', 3), ('python3', 3), ('c#', 2), ('cpp', 2), ('golang', 2), ('python 3', 2), ('recursion', 2), ('top-down dp', 2), ('2d', 1), ('backtracking', 1), ('bfs', 1), ('bottom up', 1), ('c--', 1), ('c++ iterative sol', 1), ('cache', 1), ('cpp solution', 1), ('dfs', 1), ('dfs simple solution', 1), ('dijkstras algorithm', 1), ('easy-life', 1), ('interview-friendly', 1), ('java', 1), ('kotlin', 1), ('memoize', 1), ('memorization', 1), ('memoziation', 1), ('short c++ code', 1)]"
1319,Number of Operations to Make Network Connected,https://leetcode.com/problems/number-of-operations-to-make-network-connected,"There are n computers numbered from 0 to n-1 connected by ethernet cables connections forming a network where connections[i] = [a, b] represents a connection between computers a and b. Any computer can reach any other computer directly or indirectly through the network.

Given an initial computer network connections. You can extract certain cables between two directly connected computers, and place them between any pair of disconnected computers to make them directly connected. Return the minimum number of times you need to do this in order to make all the computers connected. If it's not possible, return -1.","['depth-first-search', 'breadth-first-search', 'union-find']",Medium,872,16,59675,33179,[],"[('union find', 37), ('c++', 31), ('dfs', 21), ('cpp', 16), ('python', 16), ('unionfind', 13), ('python 3', 12), ('java', 11), ('connected components', 10), ('bfs', 7), ('dsu', 7), ('union-find', 6), ('easy-understanding', 5), ('graph', 5), ('javascript', 5), ('adjacency list', 4), ('dfs simple solution', 4), ('breadth first search', 3), ('c#', 3), ('cpp easy', 3), ('disjoint-set', 3), ('golang', 3), ('python3', 3), ('c++ code', 2), ('c++ union find', 2), ('cpp solution', 2), ('easy-undestand', 2), ('easytounderstand', 2), ('java-solution', 2), ('path comparison', 2), ('simple', 2), ('swift', 2), ('union-by-rank', 2), ('algorithms', 1), ('c', 1), ('c++ ac', 1), ('clean code', 1), ('depth first search', 1), ('dfs recursive', 1), ('dfs solution', 1), ('dfs traversal', 1), ('dfs-non-recursive', 1), ('disjointset', 1), ('doubts', 1), ('easy', 1), ('easy-to-understand', 1), ('easysolution', 1), ('esay-understand', 1), ('fast', 1), ('find-union', 1), ('flood-fill', 1), ('go', 1), ('grouping', 1), ('java ac solution', 1), ('kotlinvim', 1), ('map', 1), ('mst', 1), ('numberofisland', 1), ('path compression', 1), ('recursive solution', 1), ('recusion', 1), ('ruby', 1), ('set', 1), ('simple clear c++ solution', 1), ('simple solution', 1), ('tle', 1), ('union by rank', 1), ('well-commented', 1)]"
1318,Minimum Flips to Make a OR b Equal to c,https://leetcode.com/problems/minimum-flips-to-make-a-or-b-equal-to-c,"Given 3 positives numbers a, b and c. Return the minimum flips required in some bits of a and b to make ( a OR b == c ). (bitwise OR operation).
Flip operation consists of change any single bit 1 to 0 or change the bit 0 to 1 in their binary representation.",['bit-manipulation'],Medium,242,25,26574,16987,[],"[('bit manipulation', 23), ('c++', 21), ('python', 12), ('bit-manipulation', 10), ('cpp', 10), ('python 3', 8), ('java-solution', 6), ('python3', 6), ('java', 5), ('javascript', 4), ('constant space', 3), ('explained', 3), ('c#', 2), ('cpp easy', 2), ('cpp solution', 2), ('easy-understanding', 2), ('intuitive', 2), ('java ac solution', 2), ('linear time', 2), ('rust', 2), ('#c', 1), ('#c++', 1), ('#conditional #if-else', 1), ('#cpp', 1), ('#easy-understand', 1), ('#easy-understanding', 1), ('#easysolution', 1), ('100 faster runtime', 1), ('100 speed', 1), ('binary-operation', 1), ('bit', 1), ('bit masking', 1), ('bit-mask', 1), ('bit-shift', 1), ('bitmanipulation', 1), ('bitwise', 1), ('bitwise operation', 1), ('bitwise-operators', 1), ('c++ solution', 1), ('easy', 1), ('easy-undestand', 1), ('fastest solution', 1), ('gcc', 1), ('golang', 1), ('iterative', 1), ('js', 1), ('js javascript', 1), ('kotlin', 1), ('left shift', 1), ('noob coding', 1), ('python2', 1), ('pythonpython3', 1), ('readable', 1), ('simple clear c++ solution', 1), ('simpler', 1), ('string-operation', 1), ('swift', 1)]"
1317,Convert Integer to the Sum of Two No-Zero Integers,https://leetcode.com/problems/convert-integer-to-the-sum-of-two-no-zero-integers,"Given an integer n. No-Zero integer is a positive integer which doesn't contain any 0 in its decimal representation.

Return a list of two integers [A, B] where:


	A and B are No-Zero integers.
	A + B = n


It's guarateed that there is at least one valid solution. If there are many valid solutions you can return any of them.",['math'],Easy,163,163,40054,22798,[],"[('c++', 20), ('python', 15), ('python 3', 15), ('cpp', 13), ('java', 12), ('javascript', 10), ('python3', 7), ('brute force', 6), ('easy-understanding', 5), ('java-solution', 4), ('best-solution', 3), ('c#', 3), ('cpp solution', 3), ('one-liner', 3), ('simple', 3), ('0ms', 2), ('100 memory', 2), ('100 space', 2), ('c++ code', 2), ('fast-solution', 2), ('javascript solution', 2), ('0ms-solution', 1), ('1 line', 1), ('100 faster runtime', 1), ('100 speed', 1), ('beats 100 percent', 1), ('best-solution-ever', 1), ('binary search', 1), ('binary-search', 1), ('c', 1), ('c++11', 1), ('digits', 1), ('dynamic-programming', 1), ('easy', 1), ('easy-to-understand', 1), ('easy-undestand', 1), ('expalanation', 1), ('explained', 1), ('fast', 1), ('go', 1), ('go-solution', 1), ('golang', 1), ('golang-solution', 1), ('greedy', 1), ('iterative', 1), ('java ac solution', 1), ('javascript recursive', 1), ('js', 1), ('kotlin', 1), ('math', 1), ('math solution', 1), ('one line', 1), ('random', 1), ('readable', 1), ('recursion', 1), ('recursive', 1), ('ruby', 1), ('simple clear c++ solution', 1), ('simple-solution', 1), ('solution', 1), ('solution c++', 1), ('straight-forward', 1), ('string', 1), ('swift', 1), ('two-lines', 1), ('typescript', 1), ('typescript solution', 1)]"
1312,Minimum Insertion Steps to Make a String Palindrome,https://leetcode.com/problems/minimum-insertion-steps-to-make-a-string-palindrome,"Given a string s. In one step you can insert any character at any index of the string.

Return the minimum number of steps to make s palindrome.

A Palindrome String is one that reads the same backward as well as forward.",['dynamic-programming'],Hard,739,13,39027,23500,[],"[('dynamic programming', 38), ('c++', 21), ('dp', 18), ('lcs', 13), ('lps', 9), ('python', 9), ('cpp', 8), ('python 3', 8), ('java', 6), ('memoization', 6), ('javascript', 4), ('easy-understanding', 3), ('golang', 3), ('java-solution', 3), ('longest palindrome', 3), ('python3', 3), ('c++ code', 2), ('c++ dynamic programming', 2), ('clean code', 2), ('dfs', 2), ('easy', 2), ('javascript solution', 2), ('longest common sequence', 2), ('minimum insertion', 2), ('palindrome', 2), ('recursion', 2), ('tabulation', 2), ('top down dp', 2), ('akku', 1), ('best explaination', 1), ('bfs', 1), ('bottom up', 1), ('bottom up dp', 1), ('bottomup', 1), ('brute-force', 1), ('c', 1), ('c#', 1), ('c++11', 1), ('cpp solution', 1), ('dp-techqique', 1), ('dynamic programmin', 1), ('easy-to-understand', 1), ('easy-undestand', 1), ('easytounderstand', 1), ('explained', 1), ('explained solution', 1), ('fast', 1), ('faster-than-100', 1), ('fastest', 1), ('go', 1), ('golang-solution', 1), ('heavily', 1), ('java ac solution', 1), ('less memory than 100', 1), ('longest common substring', 1), ('longest-common-subsq', 1), ('reccurrence', 1), ('recursion palindrome', 1), ('recusion', 1), ('recusive', 1), ('ruby', 1), ('short', 1), ('simpe', 1), ('simple', 1), ('simple and elegant', 1), ('simple clear c++ solution', 1), ('simple solution', 1), ('string', 1), ('string palindrome', 1), ('swift', 1), ('top down approach', 1), ('top-down', 1), ('top-down dp', 1), ('topdown', 1), ('typescript', 1)]"
1311,Get Watched Videos by Your Friends,https://leetcode.com/problems/get-watched-videos-by-your-friends,"There are n people, each person has a unique id between 0 and n-1. Given the arrays watchedVideos and friends, where watchedVideos[i] and friends[i] contain the list of watched videos and the list of friends respectively for the person with id = i.

Level 1 of videos are all watched videos by your friends, level 2 of videos are all watched videos by the friends of your friends and so on. In general, the level k of videos are all watched videos by people with the shortest path exactly equal to k with you. Given your id and the level of videos, return the list of videos ordered by their frequencies (increasing). For videos with the same frequency order them alphabetically from least to greatest.","['hash-table', 'string', 'breadth-first-search']",Medium,148,233,27848,12319,[],"[('bfs', 22), ('java', 7), ('python3', 7), ('breadth first search', 6), ('hashmap', 6), ('python', 6), ('c++', 5), ('python 3', 4), ('c#', 3), ('javascript', 3), ('sort', 3), ('java-solution', 2), ('bfs simple solution', 1), ('counter', 1), ('cpp', 1), ('cpp solution', 1), ('dfs-topdown', 1), ('dictonary', 1), ('easy', 1), ('easy-understanding', 1), ('easy-undestand', 1), ('error', 1), ('explained', 1), ('explanations', 1), ('golang', 1), ('graph', 1), ('help-wanted', 1), ('java ac solution', 1), ('kotlin', 1), ('map', 1), ('no ibrary', 1), ('priority queue', 1), ('queue', 1), ('readable', 1), ('set', 1), ('short code', 1), ('sorting', 1), ('straightforward', 1), ('swift', 1), ('testcase error', 1)]"
1310,XOR Queries of a Subarray,https://leetcode.com/problems/xor-queries-of-a-subarray,"Given the array arr of positive integers and the array queries where queries[i] = [Li, Ri], for each query i compute the XOR of elements from Li to Ri (that is, arr[Li] xor arr[Li+1] xor ... xor arr[Ri] ). Return an array containing the result for the given queries.",['bit-manipulation'],Medium,499,24,34814,24210,[],"[('c++', 22), ('cpp', 11), ('xor', 8), ('python 3', 7), ('javascript', 6), ('c#', 5), ('java', 5), ('python', 5), ('bit manipulation', 3), ('cpp solution', 3), ('dp', 3), ('easy-understanding', 3), ('fuck noobs', 3), ('golang', 3), ('python3', 3), ('segment tree', 3), ('bit-manipulation', 2), ('c', 2), ('easy', 2), ('js', 2), ('prefix xor', 2), ('prefix-array', 2), ('two-lines', 2), ('algorithms', 1), ('beginner friendly', 1), ('bit tree', 1), ('bitmanipulation', 1), ('c++ code', 1), ('clean code', 1), ('commentary', 1), ('cpp easy', 1), ('description', 1), ('detailed explanation', 1), ('divide and conquer', 1), ('dividedconquer', 1), ('dp c++', 1), ('dp-techqique', 1), ('dynamic programming', 1), ('easy solutions', 1), ('fast-solution', 1), ('fenwick-tree', 1), ('greedy approach', 1), ('insert', 1), ('javascript solution', 1), ('js javascript', 1), ('kotlin', 1), ('leetcode bug', 1), ('linq', 1), ('look-up-table', 1), ('loops', 1), ('one-liner', 1), ('prefix array', 1), ('prefix sum', 1), ('recursive', 1), ('runtime error', 1), ('segment-tree', 1), ('simple solution', 1), ('sparsetable', 1), ('stream', 1), ('tree-traversal', 1), ('two solutions', 1), ('typescript', 1)]"
1309,Decrypt String from Alphabet to Integer Mapping,https://leetcode.com/problems/decrypt-string-from-alphabet-to-integer-mapping,"Given a string s formed by digits ('0' - '9') and '#' . We want to map s to English lowercase characters as follows:


	Characters ('a' to 'i') are represented by ('1' to '9') respectively.
	Characters ('j' to 'z') are represented by ('10#' to '26#') respectively. 


Return the string formed after mapping.

It's guaranteed that a unique mapping will always exist.",['string'],Easy,553,54,72249,56211,[],"[('c++', 32), ('python', 32), ('java', 27), ('javascript', 27), ('python 3', 26), ('cpp', 19), ('python3', 16), ('easy-understanding', 13), ('c#', 8), ('c++ code', 8), ('cpp solution', 8), ('golang', 8), ('java-solution', 8), ('go', 7), ('swift', 6), ('dictionary', 5), ('hashmap', 5), ('simple', 5), ('string', 5), ('c', 4), ('easy', 4), ('javascript solution', 4), ('regex', 4), ('ruby', 4), ('ascii', 3), ('cpp easy', 3), ('easy-to-understand', 3), ('easy-undestand', 3), ('golang-solution', 3), ('kotlin', 3), ('readable', 3), ('stack', 3), ('ascii-art', 2), ('c++ solution', 2), ('chr', 2), ('decrypt', 2), ('easy solution', 2), ('explained', 2), ('explanation', 2), ('go-solution', 2), ('js', 2), ('regular expression', 2), ('stacks', 2), ('string-to-integer', 2), ('#javascript', 1), ('#stack', 1), ('0ms', 1), ('0ms-solution', 1), ('1-line', 1), ('100 faster runtime', 1), ('100 space', 1), ('100 speed', 1), ('96logic', 1), ('beating-100-submission', 1), ('best', 1), ('brute force', 1), ('c programming', 1), ('c++11', 1), ('character', 1), ('charcode', 1), ('clean code', 1), ('clear-understanding', 1), ('commented', 1), ('csharp', 1), ('decrypt-string', 1), ('dict', 1), ('easy to understand', 1), ('easy-understand', 1), ('efficient', 1), ('efficient algorithm', 1), ('efficient solution', 1), ('encoding', 1), ('es6', 1), ('explanation with logic', 1), ('explanations', 1), ('fast', 1), ('fast and simple', 1), ('fast-solution', 1), ('faster', 1), ('github', 1), ('greedy', 1), ('hash', 1), ('java solution', 1), ('javascript brute force', 1), ('join', 1), ('js javascript', 1), ('linear', 1), ('linear time', 1), ('list comprehension', 1), ('loop', 1), ('map', 1), ('mapping', 1), ('maps', 1), ('mrmagician', 1), ('no mapping', 1), ('one pass', 1), ('one-liner', 1), ('pointer', 1), ('python2', 1), ('pythonpython3', 1), ('queue', 1), ('recursive', 1), ('regexp', 1), ('replace elements', 1), ('rust', 1), ('short solution', 1), ('simple and elegant', 1), ('simple clear c++ solution', 1), ('simple solution', 1), ('slicing', 1), ('slow', 1), ('solution', 1), ('stoi', 1), ('straight-forward', 1), ('string concatenation', 1), ('string-function', 1), ('string-operation', 1), ('stringbuilder', 1), ('stringreverse', 1), ('stringstream', 1), ('traverse', 1), ('two-lines', 1), ('two-pointers', 1), ('unicode', 1), ('unit-test', 1), ('upvote', 1), ('whileloop', 1), ('with explanation', 1)]"
1307,Verbal Arithmetic Puzzle,https://leetcode.com/problems/verbal-arithmetic-puzzle,"Given an equation, represented by words on left side and the result on right side.

You need to check if the equation is solvable under the following rules:


	Each character is decoded as one digit (0 - 9).
	Every pair of different characters they must map to different digits.
	Each words[i] and result are decoded as one number without leading zeros.
	Sum of numbers on left side (words) will equal to the number on right side (result). 


Return True if the equation is solvable otherwise return False.","['math', 'backtracking']",Hard,207,65,15377,5580,[],"[('backtracking', 9), ('java', 5), ('c#', 3), ('python', 3), ('java-solution', 2), ('javascript', 2), ('accepted', 1), ('accepted solution', 1), ('brute force', 1), ('c++', 1), ('detailed-explanation', 1), ('dfs', 1), ('dfs-with-prunning', 1), ('explained', 1), ('global-variables', 1), ('language', 1), ('needhelp', 1), ('pruning', 1), ('puzzle', 1), ('python 3', 1), ('python3', 1), ('thought-process', 1), ('time-limit-exceeded-java', 1), ('tle', 1), ('wrongtest case', 1)]"
1306,Jump Game III,https://leetcode.com/problems/jump-game-iii,"Given an array of non-negative integers arr, you are initially positioned at start index of the array. When you are at index i, you can jump to i + arr[i] or i - arr[i], check if you can reach to any index with value 0.

Notice that you can not jump outside of the array at any time.","['depth-first-search', 'breadth-first-search', 'recursion']",Medium,1159,36,115075,71491,"[""Jump Game II"", ""Jump Game""]","[('bfs', 68), ('java', 49), ('c++', 48), ('dfs', 36), ('recursion', 36), ('cpp', 23), ('python', 23), ('python 3', 18), ('python3', 14), ('java-solution', 13), ('javascript', 12), ('c#', 9), ('queue', 9), ('cpp solution', 7), ('easy-understanding', 7), ('bfs simple solution', 6), ('breadth first search', 6), ('dfs simple solution', 5), ('easy', 5), ('memoization', 5), ('simple solution', 5), ('breadth-first-search', 4), ('dfs recursive', 4), ('dfs-bfs', 4), ('dfs-iterative', 4), ('dp', 4), ('explained', 4), ('golang', 4), ('recusion', 4), ('backtracking', 3), ('bfs python', 3), ('c++ code', 3), ('clean code', 3), ('dfs solution', 3), ('easy-to-understand', 3), ('easy-undestand', 3), ('easytounderstand', 3), ('graph', 3), ('iterative', 3), ('js', 3), ('jumpgameiii', 3), ('recurision', 3), ('stacks', 3), ('100 speed', 2), ('cpp easy', 2), ('csharp', 2), ('depth first search', 2), ('dynamic programming', 2), ('hash table', 2), ('java ac solution', 2), ('javascript solution', 2), ('memory-efficient', 2), ('readable', 2), ('recursive', 2), ('recursive solution', 2), ('ruby', 2), ('sets', 2), ('simple', 2), ('stack', 2), ('typescript', 2), ('video-explanation', 2), ('#dfs', 1), ('#java #recursion', 1), ('0ms', 1), ('100 memory', 1), ('100 space', 1), ('1306', 1), ('algorithms', 1), ('beats 100', 1), ('beginner friendly', 1), ('big o', 1), ('c', 1), ('c++ easy to understand', 1), ('c++ recursive solution', 1), ('c++ solution', 1), ('c++11', 1), ('commentary', 1), ('commented', 1), ('comments-added', 1), ('cpppppp', 1), ('depth-first search', 1), ('deque', 1), ('dfs pre-order traversal', 1), ('dfs vs bfs', 1), ('dfs-topdown', 1), ('dp top down', 1), ('dp-programming', 1), ('east to understand', 1), ('easy to understand', 1), ('easy understand', 1), ('error in question', 1), ('expalanation', 1), ('explained solution', 1), ('explanation', 1), ('explanation of logic', 1), ('explanations', 1), ('fast', 1), ('fast and simple', 1), ('fastest java slution', 1), ('go-solution', 1), ('go-solutiong', 1), ('golang-solution', 1), ('hash set', 1), ('hash-table', 1), ('help needed', 1), ('infinite loop', 1), ('interview experience', 1), ('intutive', 1), ('iterate', 1), ('iteration', 1), ('iteration vs recursion', 1), ('iterative vs recursive', 1), ('iterative-bfs', 1), ('iterative-dfs', 1), ('iteratively', 1), ('java solution using dfs', 1), ('java8', 1), ('javascrip', 1), ('javascript bfs', 1), ('js javascript', 1), ('jump search', 1), ('jump-game', 1), ('kotlin', 1), ('level-order-traversal', 1), ('linear', 1), ('linear time', 1), ('memoized', 1), ('memory less than 100', 1), ('non-recursive', 1), ('optimal', 1), ('optimal solution', 1), ('php', 1), ('queue-approach', 1), ('queues', 1), ('reccursion', 1), ('recursion memoization', 1), ('recursion vs iteration', 1), ('recursive easy', 1), ('recursive vs iterative', 1), ('recursive-dfs', 1), ('reference', 1), ('rescursion', 1), ('rust', 1), ('self explanatory', 1), ('self-explanatory', 1), ('set', 1), ('simplest', 1), ('space complexity', 1), ('swift', 1), ('time complexity', 1), ('top-down dp', 1), ('ts', 1), ('ultra simple', 1), ('understanding', 1), ('unionfind', 1), ('upvote', 1), ('video solution', 1), ('visited', 1)]"
1305,All Elements in Two Binary Search Trees,https://leetcode.com/problems/all-elements-in-two-binary-search-trees,"Given two binary search trees root1 and root2.

Return a list containing all the integers from both trees sorted in ascending order.","['sort', 'tree']",Medium,916,34,108816,84708,[],"[('c++', 46), ('inorder traversal', 37), ('java', 36), ('python', 30), ('python 3', 27), ('inorder', 25), ('cpp', 21), ('javascript', 18), ('python3', 15), ('dfs', 14), ('cpp solution', 13), ('c#', 12), ('java-solution', 12), ('iterative', 10), ('bst', 8), ('easy-understanding', 8), ('explained', 8), ('recursion', 8), ('inorder-traversal', 6), ('stacks', 6), ('bfs', 5), ('tree-traversal', 5), ('easy', 4), ('golang', 4), ('iterator', 4), ('linear time', 4), ('merge', 4), ('merged', 4), ('recursively', 4), ('swift', 4), ('trees', 4), ('binary-tree', 3), ('c++ solution', 3), ('dfs simple solution', 3), ('dfs-tree', 3), ('easy-to-understand', 3), ('java ac solution', 3), ('javascript solution', 3), ('merge sort', 3), ('merge-sort', 3), ('preorder traversal', 3), ('sorting', 3), ('binary search tree', 2), ('binary-search-tree', 2), ('csharp', 2), ('easy understand', 2), ('easytounderstand', 2), ('go', 2), ('golang-solution', 2), ('in-order-dfs', 2), ('kotlin', 2), ('merge-two-binary-trees', 2), ('merge-two-sorted-lists', 2), ('postorder-traversal', 2), ('python2', 2), ('readable', 2), ('recurision', 2), ('recursive easy', 2), ('simple solution', 2), ('tree', 2), ('tree traversal', 2), ('video-explanation', 2), ('100', 1), ('100 memory', 1), ('100 speed', 1), ('2 pointer', 1), ('abstraction', 1), ('begginer friendly', 1), ('binary tree', 1), ('breath first search', 1), ('bst-iterator', 1), ('c', 1), ('c++ cpp solution', 1), ('clean code', 1), ('collections', 1), ('commentary', 1), ('comments', 1), ('cpp doubt', 1), ('deep-first-search', 1), ('description', 1), ('dfs-topdown', 1), ('easy-undestand', 1), ('es6', 1), ('explanatory comments', 1), ('fast-solution', 1), ('faster', 1), ('fully-explained', 1), ('generator', 1), ('generator-function', 1), ('go-solution', 1), ('good variable names', 1), ('heap', 1), ('in order', 1), ('in-order-traversal', 1), ('iterative traversal', 1), ('iterative way', 1), ('iterative-inorder', 1), ('iterators', 1), ('java solution using dfs', 1), ('javascript recursive', 1), ('js', 1), ('less memory than 100', 1), ('level-order-traversal', 1), ('linear', 1), ('linear memory', 1), ('linear-time', 1), ('list', 1), ('meiyaowen', 1), ('merge intervals', 1), ('merge sorted', 1), ('merge-binary-search-tree', 1), ('merge-intervals', 1), ('minheap', 1), ('morris-traversal', 1), ('multi-sets', 1), ('no recursion', 1), ('nosort', 1), ('optimal', 1), ('php', 1), ('php solution', 1), ('postorder', 1), ('pre-order', 1), ('preorder', 1), ('priority queue', 1), ('pythonpython3', 1), ('rajat', 1), ('recursive', 1), ('recursive dfs', 1), ('recursive-dfs', 1), ('recusion', 1), ('scala', 1), ('simple', 1), ('simpler', 1), ('solution', 1), ('sorted', 1), ('sorted array', 1), ('stack', 1), ('stl', 1), ('structured code', 1), ('swift5', 1), ('timsort', 1), ('two pointer', 1), ('two-liner', 1), ('two-pointer', 1), ('typescript', 1), ('vector', 1), ('video', 1), ('video explanation', 1), ('yield-from', 1)]"
1304,Find N Unique Integers Sum up to Zero,https://leetcode.com/problems/find-n-unique-integers-sum-up-to-zero,"Given an integer n, return any array containing n unique integers such that they add up to 0.",['array'],Easy,561,320,110972,85059,[],"[('java', 56), ('c++', 53), ('python', 43), ('python 3', 35), ('cpp', 29), ('javascript', 29), ('java-solution', 27), ('easy', 19), ('python3', 19), ('simple solution', 14), ('easy-understanding', 13), ('array', 12), ('c#', 11), ('cpp solution', 11), ('c++ code', 9), ('easy-undestand', 8), ('simple', 8), ('easy-to-understand', 6), ('golang', 6), ('go', 5), ('linear time', 5), ('swift', 5), ('c', 4), ('cpp easy', 4), ('easytounderstand', 4), ('fastest', 4), ('go-solution', 4), ('kotlin', 4), ('100 memory', 3), ('c++ easy to understand', 3), ('fasterthan100', 3), ('math', 3), ('#python 3', 2), ('0ms', 2), ('100 faster', 2), ('100 space', 2), ('100 speed', 2), ('arrays', 2), ('beginnerfriendly', 2), ('cpp-solution', 2), ('easy understanding', 2), ('easy-solition', 2), ('efficient solution', 2), ('explained', 2), ('fast and simple', 2), ('faster than 100.00', 2), ('golang-solution', 2), ('java ac solution', 2), ('javascript solution', 2), ('js', 2), ('linear space', 2), ('one-liner', 2), ('python2', 2), ('#java', 1), ('#python', 1), ('#simple', 1), ('#simplecode', 1), ('0ms runtime', 1), ('1-line', 1), ('1-liner', 1), ('100 efficient', 1), ('100 faster runtime', 1), ('100 percentage fastest', 1), ('4 lines', 1), ('accumulate', 1), ('array easy', 1), ('asahiocean', 1), ('base', 1), ('basics', 1), ('begineer friendly', 1), ('beginner friendly', 1), ('best-solution', 1), ('brute force', 1), ('c programming', 1), ('c# solutions', 1), ('c++ ac', 1), ('c++ solution', 1), ('c++ solution simple', 1), ('c++11', 1), ('c++14', 1), ('clean code', 1), ('concise', 1), ('constant space', 1), ('csharp', 1), ('easiest', 1), ('easiest solution', 1), ('easy code', 1), ('easy to understandd', 1), ('easytoundersatand', 1), ('es6', 1), ('exaplanation', 1), ('expalanation', 1), ('explanation with logic', 1), ('explanations', 1), ('faster than 80', 1), ('fastest c++ solution', 1), ('fastest java slution', 1), ('fastest java solution', 1), ('functional programming', 1), ('gauss', 1), ('gauss-formula', 1), ('github', 1), ('go-lang', 1), ('iterative', 1), ('java simple', 1), ('javascrip', 1), ('kotlin-solution', 1), ('list-comprehension', 1), ('logarithmic time', 1), ('logical', 1), ('loop', 1), ('maths', 1), ('mod', 1), ('one liner', 1), ('one-pass', 1), ('optimal', 1), ('optimised code', 1), ('palindrome', 1), ('python-3', 1), ('python3.8', 1), ('pythonpython3', 1), ('readable', 1), ('remaindertheorem', 1), ('ruby', 1), ('rust', 1), ('sequence', 1), ('short', 1), ('simpe', 1), ('simple approach', 1), ('simple clear c++ solution', 1), ('simple understanding', 1), ('simple-solution', 1), ('solution', 1), ('solved', 1), ('stl', 1), ('straightforward', 1), ('swift5', 1), ('symmetry', 1), ('two-lines', 1), ('two-pointer', 1), ('two-pointers', 1), ('ugly', 1), ('unit-test', 1), ('vector', 1), ('walk through', 1), ('walrus operator', 1), ('well-commented', 1), ('wrong answer', 1)]"
1298,Maximum Candies You Can Get from Boxes,https://leetcode.com/problems/maximum-candies-you-can-get-from-boxes,"Given n boxes, each box is given in the format [status, candies, keys, containedBoxes] where:


	status[i]: an integer which is 1 if box[i] is open and 0 if box[i] is closed.
	candies[i]: an integer representing the number of candies in box[i].
	keys[i]: an array contains the indices of the boxes you can open with the key in box[i].
	containedBoxes[i]: an array contains the indices of the boxes found in box[i].


You will start with some boxes given in initialBoxes array. You can take all the candies in any open box and you can use the keys in it to open new boxes and you also can use the boxes you find in it.

Return the maximum number of candies you can get following the rules above.",['breadth-first-search'],Hard,123,94,13223,7923,[],"[('bfs', 11), ('python', 6), ('c++', 3), ('java', 3), ('python 3', 3), ('c#', 2), ('java-solution', 2), ('javascript', 2), ('python3', 2), ('100 memory', 1), ('100 speed', 1), ('beginnerfriendly', 1), ('bfs python', 1), ('c++ code', 1), ('china', 1), ('commented', 1), ('cpp', 1), ('depth first search', 1), ('dfs', 1), ('easy-to-understand', 1), ('easy-understanding', 1), ('greedy', 1), ('queue', 1), ('readable', 1), ('recursion', 1), ('ruby', 1), ('spanning tree', 1), ('stack', 1)]"
1297,Maximum Number of Occurrences of a Substring,https://leetcode.com/problems/maximum-number-of-occurrences-of-a-substring,"Given a string s, return the maximum number of ocurrences of any substring under the following rules:


	The number of unique characters in the substring must be less than or equal to maxLetters.
	The substring size must be between minSize and maxSize inclusive.","['string', 'bit-manipulation']",Medium,347,199,41194,20996,[],"[('python', 8), ('c++', 7), ('sliding-window', 7), ('hashmap', 4), ('java', 4), ('javascript', 4), ('python 3', 4), ('c#', 3), ('hash table', 3), ('python3', 2), ('two-pointers', 2), ('5 lines', 1), ('bit masking', 1), ('bit-manipulation', 1), ('bitmap', 1), ('c++ code', 1), ('c++14', 1), ('c++17', 1), ('clean', 1), ('cpp-solution', 1), ('easy-to-understand', 1), ('easytounderstand', 1), ('explaination', 1), ('explained', 1), ('explanation with logic', 1), ('fuck noobs', 1), ('golang', 1), ('hash-table', 1), ('hashset', 1), ('help needed', 1), ('intuition', 1), ('java ac solution', 1), ('java-solution', 1), ('map', 1), ('one-liner', 1), ('readable', 1), ('rolling hash', 1), ('short code', 1), ('sliding window', 1), ('three-lines', 1), ('trie', 1)]"
1296,Divide Array in Sets of K Consecutive Numbers,https://leetcode.com/problems/divide-array-in-sets-of-k-consecutive-numbers,"Given an array of integers nums and a positive integer k, find whether it's possible to divide this array into sets of k consecutive numbers
Return True if it is possible. Otherwise, return False.","['array', 'greedy']",Medium,709,71,78631,43866,"[""Split Array into Consecutive Subsequences""]","[('python', 19), ('c++', 15), ('java', 15), ('python 3', 13), ('greedy', 11), ('hashmap', 9), ('priority queue', 8), ('treemap', 8), ('javascript', 7), ('cpp', 6), ('map', 6), ('sorting', 6), ('c#', 5), ('easy-understanding', 4), ('greedy approach', 4), ('dictionary', 3), ('golang', 3), ('golang-solution', 3), ('java-solution', 3), ('python3', 3), ('counter', 2), ('cpp solution', 2), ('js', 2), ('min-heap', 2), ('optimal', 2), ('sorted array', 2), ('swift', 2), ('c++11', 1), ('c++17', 1), ('comments-added', 1), ('concise-solution', 1), ('dfs simple solution', 1), ('dict', 1), ('dictionary array', 1), ('dictonary', 1), ('easy', 1), ('easytounderstand', 1), ('explaination', 1), ('explained', 1), ('fast and simple', 1), ('functional-programming', 1), ('go', 1), ('go-solution', 1), ('greedy algorithm', 1), ('hash table', 1), ('heap', 1), ('images', 1), ('kotlinvim', 1), ('linear space', 1), ('linked-list', 1), ('modular arithmetic', 1), ('multiset', 1), ('nlogn', 1), ('nlogn time', 1), ('noob coding', 1), ('ordered map', 1), ('ordered-dict', 1), ('php', 1), ('python2', 1), ('queue', 1), ('ruby', 1), ('rust', 1), ('slidingwindow', 1), ('sort', 1), ('stl', 1), ('template method', 1), ('test-cases', 1), ('video explanation', 1), ('wrong answer', 1)]"
1295,Find Numbers with Even Number of Digits,https://leetcode.com/problems/find-numbers-with-even-number-of-digits,"Given an array nums of integers, return how many of them contain an even number of digits.",['array'],Easy,658,77,337193,265181,[],"[('python', 59), ('java', 56), ('c++', 55), ('javascript', 49), ('python3', 48), ('python 3', 47), ('cpp', 31), ('java-solution', 22), ('one-liner', 22), ('easy-understanding', 18), ('c', 15), ('c#', 15), ('easy', 13), ('golang', 10), ('javascript solution', 10), ('cpp solution', 8), ('string', 8), ('array', 7), ('math', 7), ('simple solution', 7), ('swift', 7), ('c++11', 6), ('easytounderstand', 6), ('kotlin', 6), ('rust', 6), ('c++ code', 5), ('cpp easy', 5), ('easy-undestand', 5), ('go', 5), ('math-solution', 5), ('easy-to-understand', 4), ('fast-solution', 4), ('golang-solution', 4), ('js', 4), ('reduce', 4), ('1 liner', 3), ('c code', 3), ('constant space', 3), ('even', 3), ('fast', 3), ('fast and simple', 3), ('go-solution', 3), ('log', 3), ('map', 3), ('ruby', 3), ('1 line', 2), ('1-line', 2), ('1-liner', 2), ('100', 2), ('100 memory', 2), ('beginner', 2), ('bitwise operation', 2), ('c++20', 2), ('cpp-solution', 2), ('dictionary', 2), ('easy to understand', 2), ('efficient solution', 2), ('explanation', 2), ('explanation of logic', 2), ('filter', 2), ('intuitive', 2), ('iteratively', 2), ('linear time', 2), ('linq', 2), ('logartihm', 2), ('modulo', 2), ('one line', 2), ('oneline', 2), ('python3.8', 2), ('recursion', 2), ('simple', 2), ('solution', 2), ('string-operation', 2), ('typescript', 2), ('#javascript', 1), ('0ms-solution', 1), ('1', 1), ('1line', 1), ('1liner', 1), ('1ms', 1), ('big o', 1), ('bit manipulation', 1), ('bit-manipulation', 1), ('brute force', 1), ('c language', 1), ('c programming', 1), ('c solution', 1), ('c submission', 1), ('c#-solution', 1), ('c++14', 1), ('cancer', 1), ('clean code', 1), ('clean-efficient-code', 1), ('clojure', 1), ('commentary', 1), ('commetend', 1), ('concise-solution', 1), ('constant time', 1), ('countdigits', 1), ('counter', 1), ('cpp with explanation', 1), ('cute', 1), ('declarative', 1), ('different solutions', 1), ('digits', 1), ('divmod', 1), ('easiest', 1), ('easy code', 1), ('easy sloution', 1), ('easy understand', 1), ('easy-solition', 1), ('easy-understand', 1), ('elixir', 1), ('es6', 1), ('even digits', 1), ('even number of digits', 1), ('explained', 1), ('ez', 1), ('find', 1), ('findnumberswithevendigit', 1), ('for-loop', 1), ('functional', 1), ('functional-programming', 1), ('generator', 1), ('generator-expression', 1), ('go lang', 1), ('go-lang', 1), ('haskell', 1), ('if-else', 1), ('inbuilt functions', 1), ('ios', 1), ('iteration', 1), ('iterative', 1), ('java-8', 1), ('java8', 1), ('lambda', 1), ('lambda expression', 1), ('lambda function', 1), ('linear', 1), ('list', 1), ('list comprehension', 1), ('lists', 1), ('loop', 1), ('loop method', 1), ('loops', 1), ('math solution', 1), ('mathematical', 1), ('naive-solution', 1), ('nested', 1), ('nested list comprehension', 1), ('one if', 1), ('one iteration', 1), ('one liner', 1), ('one pass solution', 1), ('one-loop', 1), ('onelinecode', 1), ('oneliner', 1), ('php', 1), ('python2', 1), ('pythonic', 1), ('range', 1), ('recursively', 1), ('recurssion', 1), ('rust vec', 1), ('scala', 1), ('short', 1), ('short answer', 1), ('simple clear c++ solution', 1), ('simplest solution', 1), ('stl', 1), ('string conversion', 1), ('string length', 1), ('string-function', 1), ('sum', 1), ('time-optimized', 1), ('to-string', 1), ('traditional solution', 1), ('two solutions', 1), ('two-pointers', 1), ('type-cast', 1), ('type-conversion', 1), ('unit-test', 1)]"
1293,Shortest Path in a Grid with Obstacles Elimination,https://leetcode.com/problems/shortest-path-in-a-grid-with-obstacles-elimination,"Given a m * n grid, where each cell is either 0 (empty) or 1 (obstacle). In one step, you can move up, down, left or right from and to an empty cell.

Return the minimum number of steps to walk from the upper left corner (0, 0) to the lower right corner (m-1, n-1) given that you can eliminate at most k obstacles. If it is not possible to find such walk return -1.",['breadth-first-search'],Hard,746,12,62792,26991,"[""Shortest Path to Get Food""]","[('bfs', 29), ('c++', 12), ('python', 10), ('java', 7), ('breadth first search', 4), ('cpp', 4), ('python 3', 4), ('c#', 3), ('comments-added', 3), ('dfs', 3), ('easy-to-understand', 3), ('astar', 2), ('dynamic programming', 2), ('explained solution', 2), ('java-solution', 2), ('javascript', 2), ('manhattan distance', 2), ('optimized', 2), ('python3', 2), ('recursively', 2), ('a star', 1), ('a-star', 1), ('a-star search', 1), ('backtracking', 1), ('beginner friendly', 1), ('bfs simple solution', 1), ('clean', 1), ('cpp solution', 1), ('csharp', 1), ('dfs with dp', 1), ('dfs-topdown', 1), ('dijkstras', 1), ('easy to read', 1), ('easy to understand', 1), ('easy-understanding', 1), ('euclidean', 1), ('fastest', 1), ('graphs', 1), ('kotlin', 1), ('kotlin-solution', 1), ('memoization', 1), ('memorization', 1), ('php', 1), ('pruning', 1), ('queue', 1), ('shortest path', 1), ('simpe', 1), ('simple', 1), ('state', 1), ('swift', 1), ('thinking process', 1), ('video', 1), ('visualization', 1)]"
1292,Maximum Side Length of a Square with Sum Less than or Equal to Threshold,https://leetcode.com/problems/maximum-side-length-of-a-square-with-sum-less-than-or-equal-to-threshold,Given a m x n matrix mat and an integer threshold. Return the maximum side-length of a square with a sum less than or equal to threshold or return 0 if there is no such square.,"['array', 'binary-search']",Medium,515,38,35136,17870,[],"[('c++', 11), ('prefix sum', 11), ('binary search', 7), ('cpp', 6), ('python', 5), ('binary-search', 4), ('dynamic programming', 4), ('java', 4), ('python3', 4), ('python 3', 3), ('c++ code', 2), ('dp', 2), ('easy-understanding', 2), ('javascript', 2), ('sliding-window', 2), ('100 beat', 1), ('100 memory', 1), ('100 space', 1), ('beat 99.8', 1), ('binarysearch', 1), ('c#', 1), ('c++11', 1), ('explanation', 1), ('golang', 1), ('intuition', 1), ('intuitive', 1), ('java-solution', 1), ('prefixsum', 1), ('proximity sum', 1), ('sliding window', 1), ('slidingwindow', 1)]"
1290,Convert Binary Number in a Linked List to Integer,https://leetcode.com/problems/convert-binary-number-in-a-linked-list-to-integer,"Given head which is a reference node to a singly-linked list. The value of each node in the linked list is either 0 or 1. The linked list holds the binary representation of a number.

Return the decimal value of the number in the linked list.","['linked-list', 'bit-manipulation']",Easy,1183,66,214902,175586,[],"[('c++', 80), ('java', 62), ('cpp', 47), ('python', 41), ('python 3', 30), ('easy-understanding', 29), ('java-solution', 27), ('javascript', 24), ('python3', 24), ('linked-list', 23), ('c', 22), ('bit manipulation', 20), ('easy', 15), ('c#', 14), ('linkedlists', 12), ('simple solution', 11), ('cpp solution', 9), ('golang', 9), ('recursion', 9), ('easytounderstand', 8), ('0ms', 7), ('bitwise operation', 7), ('recursive', 7), ('swift', 7), ('100 speed', 6), ('easy-to-understand', 6), ('fast-solution', 6), ('go', 6), ('linkedlist', 6), ('bit-manipulation', 5), ('easy-undestand', 5), ('javascript solution', 5), ('simple', 5), ('stack', 5), ('bitwise', 4), ('c code', 4), ('fast and simple', 4), ('beginner friendly', 3), ('binary', 3), ('binary number', 3), ('c programming', 3), ('c++ code', 3), ('c++14', 3), ('constant space', 3), ('cpp easy', 3), ('explaination', 3), ('explained', 3), ('go-solution', 3), ('golang-solution', 3), ('iterative', 3), ('java ac solution', 3), ('js', 3), ('linked list', 3), ('ruby', 3), ('#c++', 2), ('#easy-understanding', 2), ('1-line solution', 2), ('100 space', 2), ('beginner', 2), ('binarytodecimal', 2), ('cpp-solution', 2), ('detailed explanation', 2), ('dfs', 2), ('easy-solition', 2), ('easy-solution', 2), ('efficient solution', 2), ('fast', 2), ('faster', 2), ('linear time', 2), ('php', 2), ('python3.8', 2), ('recursive solution', 2), ('recursively', 2), ('scala', 2), ('shift bit', 2), ('solution', 2), ('stacks', 2), ('stl', 2), ('string-to-integer', 2), ('stringbuilder', 2), ('#bit-manipulation', 1), ('#java', 1), ('#linkedlist', 1), ('#python', 1), ('#python 3', 1), ('#simple', 1), ('0 complexity', 1), ('0ms faster tha', 1), ('1-line', 1), ('100 percentage fastest', 1), ('3 ways', 1), ('3-liner', 1), ('5 liner', 1), ('accepted', 1), ('accepted solution', 1), ('algorithm', 1), ('all solutions', 1), ('arraylist', 1), ('ask-for-help', 1), ('base-conversion', 1), ('beating-100-submission', 1), ('beats 100', 1), ('big o', 1), ('binary-conversion', 1), ('binary-notation', 1), ('binary-to-decimal', 1), ('binarynumber', 1), ('bit-shift', 1), ('bitset', 1), ('brute force', 1), ('built-in-function', 1), ('builtin', 1), ('c recursive', 1), ('c# stack', 1), ('c++ 14', 1), ('c++ recursive solution', 1), ('c++ solution', 1), ('clean code', 1), ('code', 1), ('commentary', 1), ('commetend', 1), ('const space', 1), ('constant memory', 1), ('convert', 1), ('convert to int', 1), ('cpp 100', 1), ('data structure', 1), ('datastructure', 1), ('decimal', 1), ('decimaltobinary convertor', 1), ('easiest', 1), ('easy code', 1), ('easy sloution', 1), ('easy solution', 1), ('easy to understand', 1), ('easy understand', 1), ('easy understanding', 1), ('easy-understand', 1), ('easysolution', 1), ('explained solution', 1), ('explanation', 1), ('explanation with code', 1), ('explanations', 1), ('fasterthan100', 1), ('fastest', 1), ('github', 1), ('go-lang', 1), ('golang solution', 1), ('help needed', 1), ('in-built function', 1), ('integer', 1), ('intuitive', 1), ('ios', 1), ('iteration', 1), ('iterative solution', 1), ('iterative vs recursive', 1), ('iterative way', 1), ('iteratively', 1), ('java easy to understand', 1), ('javscript', 1), ('kotlin', 1), ('left-shift', 1), ('less memory than 98', 1), ('less space than 100.00', 1), ('linear', 1), ('linked lists', 1), ('linked-list-to-decimal', 1), ('linklist', 1), ('list', 1), ('list comprehension', 1), ('listnode', 1), ('math', 1), ('math-solution', 1), ('mrmagician', 1), ('multiplication', 1), ('naive-solution', 1), ('no extra space', 1), ('not working', 1), ('one line', 1), ('php solution', 1), ('pow', 1), ('power-of-two', 1), ('python2', 1), ('pythonsolution', 1), ('rajat', 1), ('rajawatbanna', 1), ('readable code', 1), ('recursive vs iterative', 1), ('recursive-descent', 1), ('recursive-solution', 1), ('resursive', 1), ('rust', 1), ('shorter', 1), ('similar-problems', 1), ('simple efficient', 1), ('simpler', 1), ('single pass', 1), ('single-linked-list', 1), ('straight-forward', 1), ('swift5', 1), ('temp', 1), ('ting', 1), ('type-cast', 1), ('typescript', 1), ('understandable', 1), ('upvote', 1), ('video explanation', 1), ('video solution', 1), ('video-explanation', 1), ('whileloop', 1), ('zea7ot', 1), ('zip', 1)]"
1284,Minimum Number of Flips to Convert Binary Matrix to Zero Matrix,https://leetcode.com/problems/minimum-number-of-flips-to-convert-binary-matrix-to-zero-matrix,"Given a m x n binary matrix mat. In one step, you can choose one cell and flip it and all the four neighbours of it if they exist (Flip is changing 1 to 0 and 0 to 1). A pair of cells are called neighboors if they share one edge.

Return the minimum number of steps required to convert mat to a zero matrix or -1 if you cannot.

Binary matrix is a matrix with all cells equal to 0 or 1 only.

Zero matrix is a matrix with all cells equal to 0.",['breadth-first-search'],Hard,301,34,16604,11650,[],"[('bfs', 11), ('java', 8), ('c++', 7), ('breadth first search', 5), ('javascript', 4), ('memoization', 4), ('backtracking', 3), ('bit manipulation', 3), ('python', 3), ('python 3', 3), ('clean code', 2), ('cpp', 2), ('dfs-topdown', 2), ('dp', 2), ('java ac solution', 2), ('recursion', 2), ('100 memory', 1), ('2 ms solution', 1), ('akku', 1), ('best-solution', 1), ('bitmask', 1), ('bitmasks', 1), ('brute force', 1), ('bruteforce', 1), ('c', 1), ('c#', 1), ('comments', 1), ('dfs-non-recursive', 1), ('easy', 1), ('fastest', 1), ('fidato', 1), ('hashset', 1), ('java solution', 1), ('linear algebra', 1), ('math-solution', 1), ('matrix', 1), ('memoziation', 1), ('permutations', 1), ('python2', 1), ('python3', 1), ('recursive', 1), ('seralization', 1), ('string', 1), ('thinking process', 1)]"
1283,Find the Smallest Divisor Given a Threshold,https://leetcode.com/problems/find-the-smallest-divisor-given-a-threshold,"Given an array of integers nums and an integer threshold, we will choose a positive integer divisor, divide all the array by it, and sum the division's result. Find the smallest divisor such that the result mentioned above is less than or equal to threshold.

Each result of the division is rounded to the nearest integer greater than or equal to that element. (For example: 7/3 = 3 and 10/2 = 5).

It is guaranteed that there will be an answer.",['binary-search'],Medium,743,129,113412,56741,[],"[('binary-search', 40), ('binary search', 24), ('c++', 18), ('binarysearch', 13), ('cpp', 13), ('python 3', 13), ('java', 9), ('javascript', 9), ('java-solution', 7), ('python', 7), ('python3', 7), ('cpp solution', 5), ('c#', 4), ('golang', 4), ('easy-understanding', 3), ('explained', 3), ('php', 3), ('ruby', 3), ('c++ code', 2), ('easy-to-understand', 2), ('easytounderstand', 2), ('java ac solution', 2), ('php solution', 2), ('simple', 2), ('typescript', 2), ('video-explanation', 2), ('100 memory', 1), ('100 speed', 1), ('amazon', 1), ('approach', 1), ('beginner friendly', 1), ('bisect', 1), ('brute force', 1), ('c', 1), ('c++ solution', 1), ('c++14', 1), ('ceil', 1), ('clean code', 1), ('concise', 1), ('constant space', 1), ('cpp easy', 1), ('cpp-solution', 1), ('dynamic programming', 1), ('explained solution', 1), ('explanations', 1), ('fast and simple', 1), ('fidato', 1), ('functional-programming', 1), ('golang-solution', 1), ('help', 1), ('intuition', 1), ('iteration', 1), ('iteratively', 1), ('java solution', 1), ('javascrip', 1), ('js', 1), ('kotlinvim', 1), ('math-solution', 1), ('optimisation', 1), ('performance', 1), ('proof', 1), ('quotient-remainder', 1), ('recursion', 1), ('rust', 1), ('search', 1), ('smallestdivisor', 1), ('swift', 1), ('swift5', 1), ('video explanation', 1)]"
1282,Group the People Given the Group Size They Belong To,https://leetcode.com/problems/group-the-people-given-the-group-size-they-belong-to,"There are n people that are split into some unknown number of groups. Each person is labeled with a unique ID from 0 to n - 1.

You are given an integer array groupSizes, where groupSizes[i] is the size of the group that person i is in. For example, if groupSizes[1] = 3, then person 1 must be in a group of size 3.

Return a list of groups such that each person i is in a group of size groupSizes[i].

Each person should appear in exactly one group, and every person must be in a group. If there are multiple answers, return any of them. It is guaranteed that there will be at least one valid solution for the given input.",['greedy'],Medium,549,372,67215,56785,[],"[('hashmap', 46), ('python', 31), ('python 3', 30), ('javascript', 22), ('c++', 21), ('java', 19), ('python3', 17), ('cpp', 13), ('c#', 9), ('greedy', 8), ('java-solution', 8), ('greedy approach', 7), ('easy-understanding', 6), ('golang', 6), ('dictionary', 5), ('hash table', 5), ('simple solution', 5), ('cpp solution', 4), ('js', 4), ('list', 4), ('c', 3), ('c++ code', 3), ('easy-undestand', 3), ('go', 3), ('javascript solution', 3), ('map', 3), ('ruby', 3), ('simple', 3), ('solution', 3), ('swift', 3), ('unordered map', 3), ('defaultdict', 2), ('dictionaries', 2), ('dictonary', 2), ('easy', 2), ('easy-to-understand', 2), ('explained', 2), ('fast and simple', 2), ('fast-solution', 2), ('greedy algorithm', 2), ('hashing', 2), ('kotlin', 2), ('python2', 2), ('adjacency list', 1), ('algorithms', 1), ('array', 1), ('array greedy', 1), ('c# solution', 1), ('c++ solution', 1), ('c++14', 1), ('c++17', 1), ('clean code', 1), ('collections', 1), ('comments', 1), ('commnted', 1), ('concise', 1), ('cpp clear', 1), ('cpp easy', 1), ('cpp-solution', 1), ('csharp', 1), ('dict', 1), ('dictionary comprehension', 1), ('easysolution', 1), ('efficient solution', 1), ('es6', 1), ('explanation of logic', 1), ('explanations', 1), ('explanatory notes', 1), ('fast', 1), ('fidato', 1), ('functional-programming', 1), ('golang-solution', 1), ('good variable names', 1), ('grouping', 1), ('gucigang', 1), ('hash', 1), ('java ac solution', 1), ('java script', 1), ('java solution', 1), ('kotlin-solution', 1), ('lambda', 1), ('linear time', 1), ('list-comprehension', 1), ('mapping', 1), ('maps', 1), ('math', 1), ('merge-sort', 1), ('on', 1), ('one pass', 1), ('one-pass', 1), ('optimized', 1), ('php', 1), ('pseudocode', 1), ('python3.8', 1), ('pythonic', 1), ('pythonpython3', 1), ('readability', 1), ('readable', 1), ('reduce', 1), ('sets', 1), ('simple clear c++ solution', 1), ('single pass', 1), ('solution-kotlin', 1), ('sort', 1), ('sorted', 1), ('stream', 1), ('structured code', 1), ('time-complexity', 1), ('two-pointers', 1), ('understandable', 1), ('unorderedmap', 1), ('video', 1), ('video solution', 1), ('video-explanation', 1), ('zip', 1)]"
1281,Subtract the Product and Sum of Digits of an Integer,https://leetcode.com/problems/subtract-the-product-and-sum-of-digits-of-an-integer,"Given an integer number n, return the difference between the product of its digits and the sum of its digits.",['math'],Easy,530,141,164995,141301,[],"[('java', 44), ('c++', 43), ('javascript', 43), ('python', 41), ('python 3', 40), ('cpp', 30), ('java-solution', 18), ('golang', 17), ('easy-understanding', 16), ('python3', 15), ('c#', 12), ('swift', 12), ('c', 11), ('cpp easy', 11), ('cpp solution', 11), ('golang-solution', 10), ('reduce', 10), ('go', 8), ('javascript solution', 8), ('0ms', 7), ('easy', 6), ('simple', 6), ('math', 5), ('simple solution', 5), ('c++ code', 4), ('easy to understand', 4), ('string', 4), ('100 speed', 3), ('easytounderstand', 3), ('fast-solution', 3), ('go-solution', 3), ('ios', 3), ('ruby', 3), ('short code', 3), ('solution', 3), ('#python 3', 2), ('100 faster', 2), ('100 memory', 2), ('basic', 2), ('block', 2), ('cpp-solution', 2), ('easy code', 2), ('easy-solition', 2), ('easy-undestand', 2), ('efficient solution', 2), ('explained solution', 2), ('java ac solution', 2), ('lambda', 2), ('loops', 2), ('map', 2), ('modulo', 2), ('one line', 2), ('proc', 2), ('product', 2), ('python2', 2), ('pythonpython3', 2), ('recursive', 2), ('straight-forward', 2), ('syntax', 2), ('while-loop', 2), ('#c++', 1), ('#cpp', 1), ('0ms runtime', 1), ('0ms-solution', 1), ('1-line', 1), ('100', 1), ('100 faster runtime', 1), ('100 space', 1), ('5 liner', 1), ('accumulate', 1), ('addition', 1), ('algorithms', 1), ('array', 1), ('asahiocean', 1), ('ascii', 1), ('big o', 1), ('bit manipulation', 1), ('c code', 1), ('c programming', 1), ('c# solution', 1), ('c++ solution', 1), ('c++11', 1), ('c++14', 1), ('char', 1), ('clean code', 1), ('clean solution', 1), ('clean-efficient', 1), ('clean-efficient-code', 1), ('commentary', 1), ('commented', 1), ('concise-solution', 1), ('constant space', 1), ('conversion', 1), ('cool', 1), ('cpp clear', 1), ('direct', 1), ('easy sloution', 1), ('easy solution', 1), ('easy understanding', 1), ('easy undestanding', 1), ('easy-peasy', 1), ('easy-understand', 1), ('explained', 1), ('explanation', 1), ('fast', 1), ('fastest', 1), ('fidato', 1), ('functools', 1), ('github', 1), ('golang solution', 1), ('google', 1), ('integer to string', 1), ('iterative', 1), ('iteratively', 1), ('java script', 1), ('java simple', 1), ('java11', 1), ('kotlin', 1), ('kotllin', 1), ('lambda function', 1), ('linear time', 1), ('linq', 1), ('list', 1), ('modular arithmetic', 1), ('one-liner', 1), ('operator', 1), ('php', 1), ('php solution', 1), ('python 2', 1), ('python3.8', 1), ('readable', 1), ('recursion', 1), ('recursively', 1), ('recusive', 1), ('rust', 1), ('scala', 1), ('self-explanatory', 1), ('simple calculation', 1), ('simple clear c++ solution', 1), ('simplest', 1), ('solution-c#', 1), ('solution-python', 1), ('string-to-array', 1), ('substring', 1), ('subtract', 1), ('sum', 1), ('sum of digits', 1), ('swift5', 1), ('test-cases', 1), ('threading', 1), ('three-lines', 1), ('tuple', 1), ('typescript', 1), ('very clear', 1), ('very easy', 1), ('very simple', 1), ('video explanation', 1), ('walrus operator', 1)]"
1278,Palindrome Partitioning III,https://leetcode.com/problems/palindrome-partitioning-iii,"You are given a string s containing lowercase letters and an integer k. You need to :


	First, change some characters of s to other lowercase English letters.
	Then divide s into k non-empty disjoint substrings such that each substring is palindrome.


Return the minimal number of characters that you need to change to divide the string.",['dynamic-programming'],Hard,441,9,20856,12767,"[""Palindrome Partitioning IV""]","[('dynamic programming', 15), ('memoization', 7), ('dp', 4), ('python', 4), ('c#', 3), ('c++ code', 3), ('dynamic-programming', 3), ('recursion', 3), ('bottom up', 2), ('cpp', 2), ('python 3', 2), ('python3', 2), ('c++', 1), ('dfs', 1), ('diagrams', 1), ('explained', 1), ('java-solution', 1), ('javascrip', 1), ('javascript', 1), ('readable', 1), ('recursive', 1), ('scala', 1), ('simple solution', 1), ('top down', 1)]"
1277,Count Square Submatrices with All Ones,https://leetcode.com/problems/count-square-submatrices-with-all-ones,"Given a m * n matrix of ones and zeros, return how many square submatrices have all ones.","['array', 'dynamic-programming']",Medium,1854,33,134279,97860,[],"[('dynamic programming', 69), ('dp', 36), ('c++', 25), ('java', 24), ('cpp', 21), ('python', 21), ('dynamic-programming', 14), ('python 3', 13), ('python3', 10), ('c#', 8), ('javascript', 7), ('java-solution', 6), ('ruby', 4), ('cpp solution', 3), ('brute force', 2), ('brute-force', 2), ('c++ code', 2), ('constant space', 2), ('easy-understanding', 2), ('easy-undestand', 2), ('explaination', 2), ('golang', 2), ('iterative', 2), ('recursion', 2), ('short code', 2), ('simple solution', 2), ('typescript', 2), ('1', 1), ('amazon', 1), ('array', 1), ('bfs', 1), ('bottom', 1), ('bottom up', 1), ('bottom up dp', 1), ('bottom-up', 1), ('c++11', 1), ('commented', 1), ('comments', 1), ('competitve-prgramming', 1), ('count squares', 1), ('csharp', 1), ('dp-techqique', 1), ('dynamic programmin', 1), ('dynammic', 1), ('easy', 1), ('easytounderstand', 1), ('explained', 1), ('facebook', 1), ('figure', 1), ('golang-solution', 1), ('graph', 1), ('in-place', 1), ('iterative solution', 1), ('iterative way', 1), ('iterator', 1), ('js', 1), ('kotlin', 1), ('linear time', 1), ('matrix', 1), ('maximal square', 1), ('memoization', 1), ('microsoft', 1), ('picture', 1), ('prefix array', 1), ('prefix sum', 1), ('pyhton 3', 1), ('pythonpython3', 1), ('question-variant', 1), ('rust', 1), ('salesforce', 1), ('similar-problems', 1), ('simple', 1), ('simple-solution', 1), ('tabular', 1), ('thinking process', 1), ('top down dp', 1), ('two-lines', 1), ('video', 1), ('video explanation', 1), ('visualization', 1)]"
1276,Number of Burgers with No Waste of Ingredients,https://leetcode.com/problems/number-of-burgers-with-no-waste-of-ingredients,"Given two integers tomatoSlices and cheeseSlices. The ingredients of different burgers are as follows:


	Jumbo Burger: 4 tomato slices and 1 cheese slice.
	Small Burger: 2 Tomato slices and 1 cheese slice.


Return [total_jumbo, total_small] so that the number of remaining tomatoSlices equal to 0 and the number of remaining cheeseSlices equal to 0. If it is not possible to make the remaining tomatoSlices and cheeseSlices equal to 0 return [].","['math', 'greedy']",Medium,147,160,28034,14077,[],"[('math', 13), ('python', 9), ('python3', 8), ('c++', 6), ('python 3', 6), ('cpp', 5), ('java', 4), ('java-solution', 4), ('javascript', 4), ('c#', 3), ('easy-undestand', 3), ('binary search', 2), ('constant time', 2), ('easy-understanding', 2), ('go', 2), ('1ms runtime', 1), ('497ms', 1), ('binarysearch', 1), ('c++ code', 1), ('comment', 1), ('comments', 1), ('constant space', 1), ('cpp easy', 1), ('cpp solution', 1), ('cramersrule', 1), ('easy', 1), ('easy-to-understand', 1), ('easy-understand', 1), ('easytounderstand', 1), ('explain', 1), ('explained', 1), ('explanation', 1), ('formula', 1), ('formula based', 1), ('golang', 1), ('greedy', 1), ('linear algebra', 1), ('linear equations', 1), ('linearithmic', 1), ('math-proof', 1), ('math-solution', 1), ('mathematics', 1), ('mathworks', 1), ('numpy', 1), ('one line', 1), ('selfunderstand', 1), ('simplest', 1), ('swift', 1), ('two-unknowns', 1)]"
1275,Find Winner on a Tic Tac Toe Game,https://leetcode.com/problems/find-winner-on-a-tic-tac-toe-game,"Tic-tac-toe is played by two players A and B on a 3 x 3 grid.

Here are the rules of Tic-Tac-Toe:


	Players take turns placing characters into empty squares ("" "").
	The first player A always places ""X"" characters, while the second player B always places ""O"" characters.
	""X"" and ""O"" characters are always placed into empty squares, never on filled ones.
	The game ends when there are 3 of the same (non-empty) character filling any row, column, or diagonal.
	The game also ends if all squares are non-empty.
	No more moves can be played if the game is over.


Given an array moves where each element is another array of size 2 corresponding to the row and column of the grid where they mark their respective character in the order in which A and B play.

Return the winner of the game if it exists (A or B), in case the game ends in a draw return ""Draw"", if there are still movements to play return ""Pending"".

You can assume that moves is valid (It follows the rules of Tic-Tac-Toe), the grid is initially empty and A will play first.",['array'],Easy,334,101,52525,27771,[],"[('c++', 14), ('java', 13), ('python 3', 12), ('javascript', 11), ('python', 10), ('c#', 9), ('cpp', 9), ('python3', 9), ('golang', 6), ('java-solution', 6), ('cpp solution', 4), ('easy-undestand', 4), ('easy-to-understand', 3), ('easy-understanding', 3), ('tictactoe', 3), ('0ms', 2), ('100 speed', 2), ('array', 2), ('cpp-solution', 2), ('go', 2), ('golang-solution', 2), ('js', 2), ('ruby', 2), ('0ms runtime', 1), ('100', 1), ('100 memory', 1), ('algorithms', 1), ('amazon onsite', 1), ('bitwise operation', 1), ('brute force', 1), ('c++ code', 1), ('c++11', 1), ('c++14', 1), ('c++17', 1), ('clean', 1), ('clean code', 1), ('clean-code', 1), ('clean-efficient-code', 1), ('easy', 1), ('easy understanding', 1), ('easy-understand', 1), ('explained', 1), ('explanation', 1), ('fast', 1), ('fasterthan100', 1), ('fastest solution', 1), ('fidato', 1), ('go-solution', 1), ('iterative', 1), ('java ac solution', 1), ('javascrip', 1), ('js javascript', 1), ('linear time', 1), ('linq', 1), ('low-memory', 1), ('memory-efficient', 1), ('naive', 1), ('readable', 1), ('regexp', 1), ('simpe', 1), ('simple', 1), ('simple solution', 1), ('simulation', 1), ('swift', 1), ('unit-test', 1), ('works', 1)]"
1269,Number of Ways to Stay in the Same Place After Some Steps,https://leetcode.com/problems/number-of-ways-to-stay-in-the-same-place-after-some-steps,"You have a pointer at index 0 in an array of size arrLen. At each step, you can move 1 position to the left, 1 position to the right in the array or stay in the same place  (The pointer should not be placed outside the array at any time).

Given two integers steps and arrLen, return the number of ways such that your pointer still at index 0 after exactly steps steps.

Since the answer may be too large, return it modulo 10^9 + 7.",['dynamic-programming'],Hard,367,21,45222,19563,[],"[('dynamic programming', 18), ('dp', 10), ('memoization', 10), ('java', 8), ('python 3', 7), ('python', 6), ('recursion', 5), ('dfs', 3), ('java-solution', 3), ('c#', 2), ('c++', 2), ('golang', 2), ('javascript', 2), ('python3', 2), ('#1269', 1), ('#complexity-analysis', 1), ('complexity analysis', 1), ('cpp solution', 1), ('dynamic-programming', 1), ('easy', 1), ('easy-understanding', 1), ('easytounderstand', 1), ('explanation', 1), ('go', 1), ('go-solution', 1), ('golang-solution', 1), ('intuition', 1), ('java solution', 1), ('new', 1), ('recursive easy', 1), ('recursive solution', 1), ('recursiveley', 1), ('time-complexity-o', 1), ('top-down dp', 1), ('trick', 1)]"
1268,Search Suggestions System,https://leetcode.com/problems/search-suggestions-system,"Given an array of strings products and a string searchWord. We want to design a system that suggests at most three product names from products after each character of searchWord is typed. Suggested products should have common prefix with the searchWord. If there are more than three products with a common prefix return the three lexicographically minimums products.

Return list of lists of the suggested products after each character of searchWord is typed.",['string'],Medium,991,91,115606,74887,[],"[('java', 24), ('python', 22), ('python 3', 22), ('trie', 21), ('c++', 15), ('javascript', 12), ('python3', 11), ('cpp', 9), ('binary-search', 8), ('java-solution', 6), ('sorting', 6), ('c#', 5), ('easy-understanding', 5), ('tries', 5), ('brute force', 4), ('simple solution', 4), ('binary search', 3), ('c++ code', 3), ('dfs', 3), ('easy-to-understand', 3), ('easy-undestand', 3), ('explained', 3), ('java ac solution', 3), ('swift', 3), ('#amazon', 2), ('brute-force', 2), ('clean-efficient-code', 2), ('comments', 2), ('easy', 2), ('hashmap', 2), ('heap', 2), ('linq', 2), ('priorityqueue', 2), ('ruby', 2), ('sort', 2), ('100 memory', 1), ('100 space', 1), ('100 speed', 1), ('amazon interview', 1), ('amazon online assesment', 1), ('c++ easy to understand', 1), ('clean code', 1), ('clean-code', 1), ('concise', 1), ('cpp code', 1), ('cpp solution', 1), ('detailed explanation', 1), ('easy sloution', 1), ('easytounderstand', 1), ('explanations', 1), ('fidato', 1), ('functional-programming', 1), ('go', 1), ('go-solution', 1), ('golang', 1), ('golang-solution', 1), ('java-8', 1), ('java8', 1), ('js', 1), ('kotlin', 1), ('list', 1), ('list comprehension', 1), ('max-heap', 1), ('memory less than 100', 1), ('multiset', 1), ('pruning', 1), ('python2', 1), ('recursively', 1), ('refactoring', 1), ('speed', 1), ('startswith', 1), ('step wise', 1), ('straight-forward', 1), ('straightforward', 1), ('stream', 1), ('streams', 1), ('string comparison', 1), ('subsequence', 1), ('substrings', 1), ('testcases', 1), ('three-lines', 1), ('traversal', 1), ('trie-tree', 1), ('two pointers', 1), ('word squares', 1)]"
1267,Count Servers that Communicate,https://leetcode.com/problems/count-servers-that-communicate,"You are given a map of a server center, represented as a m * n integer matrix grid, where 1 means that on that cell there is a server and 0 means that it is no server. Two servers are said to communicate if they are on the same row or on the same column.

Return the number of servers that communicate with any other server.","['array', 'graph']",Medium,567,56,52427,30251,[],"[('c++', 14), ('java', 13), ('python', 12), ('cpp', 11), ('python 3', 11), ('c#', 5), ('java-solution', 5), ('javascript', 5), ('c++ code', 4), ('dfs', 4), ('easy', 4), ('explained', 4), ('go-solution', 3), ('golang', 3), ('bfs', 2), ('bruteforce', 2), ('clean code', 2), ('dp', 2), ('easy to understand', 2), ('easy-understanding', 2), ('fast-solution', 2), ('golang-solution', 2), ('graph', 2), ('simple', 2), ('akku', 1), ('basicmath', 1), ('brute-force', 1), ('c++11', 1), ('clean code with comments', 1), ('clear', 1), ('col sum', 1), ('column', 1), ('constant space', 1), ('countcommunicatingservers', 1), ('counting', 1), ('cpp solution', 1), ('depth-first search', 1), ('dfs simple solution', 1), ('easy java', 1), ('easy-solition', 1), ('easy-to-understand', 1), ('easy-undestand', 1), ('easytounderstand', 1), ('explained solution', 1), ('explanation', 1), ('explanation of logic', 1), ('go', 1), ('grid', 1), ('hashtable', 1), ('in-place', 1), ('java ac solution', 1), ('linear time', 1), ('map', 1), ('optimized', 1), ('python3', 1), ('python3.8', 1), ('pythonic', 1), ('readable', 1), ('recursion', 1), ('recusion', 1), ('row sum', 1), ('row-by-row-scanning', 1), ('sets', 1), ('simpe', 1), ('simple solution', 1), ('space o1', 1), ('swift', 1), ('three-lines', 1), ('time-complexity', 1), ('typescript', 1)]"
1266,Minimum Time Visiting All Points,https://leetcode.com/problems/minimum-time-visiting-all-points,"On a 2D plane, there are n points with integer coordinates points[i] = [xi, yi]. Return the minimum time in seconds to visit all the points in the order given by points.

You can move according to these rules:


	In 1 second, you can either:

	
		move vertically by one unit,
		move horizontally by one unit, or
		move diagonally sqrt(2) units (in other words, move one unit vertically then one unit horizontally in 1 second).
	
	
	You have to visit the points in the same order as they appear in the array.
	You are allowed to pass through points that appear later in the order, but these do not count as visits.","['array', 'geometry']",Easy,797,125,111460,88318,[],"[('python', 35), ('python 3', 31), ('java', 29), ('javascript', 23), ('c++', 20), ('cpp', 14), ('python3', 11), ('c#', 9), ('easy', 8), ('easy-understanding', 7), ('java-solution', 7), ('swift', 7), ('c', 6), ('cpp solution', 6), ('golang', 6), ('math', 6), ('easy-to-understand', 5), ('simple', 5), ('geometry', 4), ('go', 4), ('one-liner', 4), ('array', 3), ('fast and simple', 3), ('golang-solution', 3), ('linear time', 3), ('ruby', 3), ('0ms', 2), ('arrays', 2), ('c++ code', 2), ('c++11', 2), ('clean code', 2), ('commentary', 2), ('coordinate geometry', 2), ('cpp easy', 2), ('cpp-solution', 2), ('easytounderstand', 2), ('fast', 2), ('fast-solution', 2), ('go-solution', 2), ('greedy', 2), ('java ac solution', 2), ('javascript solution', 2), ('kotlin', 2), ('max', 2), ('python2', 2), ('pythonpython3', 2), ('reduce', 2), ('scala', 2), ('1-line', 1), ('1-liner', 1), ('100', 1), ('100 memory', 1), ('100 space', 1), ('100 speed', 1), ('2d array', 1), ('2d-array', 1), ('3 step', 1), ('abs', 1), ('algorithms', 1), ('amazon', 1), ('brute force', 1), ('c code', 1), ('c programming', 1), ('chebyshev-distance', 1), ('clean', 1), ('clean-code', 1), ('clean-efficient-code', 1), ('comments-added', 1), ('cplusplus', 1), ('cpp clear', 1), ('cpp doubt', 1), ('cpp with explanation', 1), ('csharp', 1), ('dminor', 1), ('easiest', 1), ('easy java solution', 1), ('easy understanding', 1), ('easy-undestand', 1), ('efficient', 1), ('explained', 1), ('explanations', 1), ('faster then 95', 1), ('functional-programming', 1), ('greedy algorithm', 1), ('greedy approach', 1), ('intuitive', 1), ('java simple', 1), ('js', 1), ('linearithmic', 1), ('manhattan distance', 1), ('mintimetovisitpoints', 1), ('one liner', 1), ('onelinecode', 1), ('optimization', 1), ('php', 1), ('php solution', 1), ('python is python', 1), ('python programming', 1), ('python super fast sol', 1), ('readable', 1), ('rust', 1), ('scalable', 1), ('simp', 1), ('simpe', 1), ('solution c++', 1), ('solution-python', 1), ('steps', 1), ('time visiting all points', 1), ('ultra easy', 1), ('unit-test', 1), ('vector', 1)]"
1263,Minimum Moves to Move a Box to Their Target Location,https://leetcode.com/problems/minimum-moves-to-move-a-box-to-their-target-location,"Storekeeper is a game in which the player pushes boxes around in a warehouse trying to get them to target locations.

The game is represented by a grid of size m x n, where each element is a wall, floor, or a box.

Your task is move the box 'B' to the target position 'T' under the following rules:


	Player is represented by character 'S' and can move up, down, left, right in the grid if it is a floor (empy cell).
	Floor is represented by character '.' that means free cell to walk.
	Wall is represented by character '#' that means obstacle  (impossible to walk there). 
	There is only one box 'B' and one target cell 'T' in the grid.
	The box can be moved to an adjacent free cell by standing next to the box and then moving in the direction of the box. This is a push.
	The player cannot walk through the box.


Return the minimum number of pushes to move the box to the target. If there is no way to reach the target, return -1.",['breadth-first-search'],Hard,289,12,14029,6122,[],"[('bfs', 9), ('python', 4), ('a-star', 3), ('c++', 3), ('dfs-bfs', 3), ('java', 3), ('breadth first search', 2), ('c#', 2), ('python 3', 2), ('0-1 bfs', 1), ('100 memory', 1), ('100 space', 1), ('beats 99', 1), ('breadth-first-search', 1), ('challenge-me', 1), ('clear explanation', 1), ('comments', 1), ('cpp-solution', 1), ('dfs', 1), ('easy-understanding', 1), ('fidato', 1), ('intuition', 1), ('python3', 1), ('scala', 1), ('straightforward', 1)]"
1262,Greatest Sum Divisible by Three,https://leetcode.com/problems/greatest-sum-divisible-by-three,"Given an array nums of integers, we need to find the maximum possible sum of elements of the array such that it is divisible by three.",['dynamic-programming'],Medium,752,21,54970,27535,[],"[('c++', 13), ('dynamic programming', 11), ('python', 11), ('cpp', 10), ('dp', 10), ('math', 7), ('python 3', 4), ('java', 3), ('begineer friendly', 2), ('cpp solution', 2), ('explanation', 2), ('golang', 2), ('java simple', 2), ('java-solution', 2), ('linear time', 2), ('math-solution', 2), ('maths', 2), ('one pass solution', 2), ('python3', 2), ('simple', 2), ('solution', 2), ('100 faster cpp', 1), ('bottom-up', 1), ('c', 1), ('c code', 1), ('c#', 1), ('c++ dp', 1), ('constant space', 1), ('easy-understanding', 1), ('explained', 1), ('fast-solution', 1), ('math solution', 1), ('python2', 1), ('readable', 1), ('recursive', 1), ('single pass', 1)]"
1261,Find Elements in a Contaminated Binary Tree,https://leetcode.com/problems/find-elements-in-a-contaminated-binary-tree,"Given a binary tree with the following rules:


	root.val == 0
	If treeNode.val == x and treeNode.left != null, then treeNode.left.val == 2 * x + 1
	If treeNode.val == x and treeNode.right != null, then treeNode.right.val == 2 * x + 2


Now the binary tree is contaminated, which means all treeNode.val have been changed to -1.

You need to first recover the binary tree and then implement the FindElements class:


	FindElements(TreeNode* root) Initializes the object with a contamined binary tree, you need to recover it first.
	bool find(int target) Return if the target value exists in the recovered binary tree.","['hash-table', 'tree']",Medium,352,57,41069,30666,[],"[('c++', 30), ('dfs', 14), ('hashset', 12), ('recursion', 12), ('python', 11), ('java', 10), ('bfs', 8), ('cpp', 8), ('hashmap', 8), ('python 3', 8), ('python3', 7), ('javascript', 6), ('binary-tree', 5), ('c#', 5), ('java-solution', 5), ('set', 5), ('cpp solution', 4), ('dfs simple solution', 3), ('easy-understanding', 3), ('explained', 3), ('iterative', 3), ('preorder traversal', 3), ('simple', 3), ('bitset', 2), ('clean code', 2), ('comments', 2), ('hash table', 2), ('javascript solution', 2), ('javascriptes6', 2), ('logn', 2), ('queue', 2), ('stack', 2), ('tree-traversal', 2), ('100 faster', 1), ('100 space', 1), ('array', 1), ('binary search', 1), ('binary tree', 1), ('binary tree traversal', 1), ('binary-search', 1), ('binarysearch', 1), ('breadth first search', 1), ('c++ code', 1), ('chinese', 1), ('clear', 1), ('constant time', 1), ('depth first search', 1), ('detailed explanation', 1), ('dfs solution', 1), ('easy', 1), ('easy to understand', 1), ('easy understanding', 1), ('easy-undestand', 1), ('es6', 1), ('explanations', 1), ('fast', 1), ('fast and simple', 1), ('faster', 1), ('faster-than-100', 1), ('fidato', 1), ('graph', 1), ('inorder traversal', 1), ('inordertraversal', 1), ('iterative solution', 1), ('java ac solution', 1), ('javascript recursive', 1), ('kotlin', 1), ('kotlin-solution', 1), ('level-order-traversal', 1), ('mrmagician', 1), ('o1', 1), ('performance', 1), ('python2', 1), ('recurision', 1), ('recursive', 1), ('recursive approach', 1), ('recursive easy', 1), ('recursively', 1), ('recusion', 1), ('simple-solution', 1), ('special', 1), ('swift', 1), ('trees', 1), ('typescript', 1), ('unordered-set', 1), ('upvote', 1), ('vector', 1)]"
1260,Shift 2D Grid,https://leetcode.com/problems/shift-2d-grid,"Given a 2D grid of size m x n and an integer k. You need to shift the grid k times.

In one shift operation:


	Element at grid[i][j] moves to grid[i][j + 1].
	Element at grid[i][n - 1] moves to grid[i + 1][0].
	Element at grid[m - 1][n - 1] moves to grid[0][0].


Return the 2D grid after applying shift operation k times.",['array'],Easy,328,122,41971,25924,[],"[('javascript', 19), ('c++', 15), ('python', 15), ('python 3', 15), ('c#', 8), ('python3', 8), ('cpp', 5), ('easy-understanding', 5), ('java-solution', 5), ('simple solution', 4), ('algorithms', 2), ('array', 2), ('constant space', 2), ('in-place', 2), ('java', 2), ('js', 2), ('ruby', 2), ('space o1', 2), ('swift', 2), ('100', 1), ('2d-array', 1), ('95 per faster', 1), ('algorithm', 1), ('brute force', 1), ('c++ code', 1), ('chain', 1), ('clean code', 1), ('clean-code', 1), ('collection', 1), ('comments', 1), ('counting', 1), ('cpp easy', 1), ('cpp solution', 1), ('easy-understand', 1), ('easy-undestand', 1), ('efficient solution', 1), ('explained', 1), ('explanations', 1), ('fast and simple', 1), ('faster than 99.27', 1), ('fidato', 1), ('flatten', 1), ('flatten matrix', 1), ('golang', 1), ('inplace', 1), ('iterative', 1), ('javascript solution', 1), ('javascriptes6', 1), ('kotlin', 1), ('list comprehension', 1), ('list-comprehension', 1), ('math', 1), ('matrix', 1), ('mod', 1), ('numpy', 1), ('pythonic', 1), ('readable', 1), ('recusion', 1), ('roll', 1), ('shift2dgrid', 1), ('simple approach', 1), ('simple python accepted', 1), ('simple-solution', 1), ('simplest', 1), ('slicing', 1), ('space', 1), ('speed', 1), ('two-lines', 1), ('unique', 1), ('unit-test', 1), ('vector', 1), ('vector-of-vector', 1)]"
1255,Maximum Score Words Formed by Letters,https://leetcode.com/problems/maximum-score-words-formed-by-letters,"Given a list of words, list of  single letters (might be repeating) and score of every character.

Return the maximum score of any valid set of words formed by using the given letters (words[i] cannot be used two or more times).

It is not necessary to use all characters in letters and each letter can only be used once. Score of letters 'a', 'b', 'c', ... ,'z' is given by score[0], score[1], ... , score[25] respectively.",['bit-manipulation'],Hard,288,27,17574,12365,[],"[('c++', 16), ('backtracking', 12), ('java', 8), ('cpp', 7), ('python', 6), ('backtrack', 5), ('python 3', 5), ('recursion', 5), ('c#', 4), ('python3', 3), ('recursive', 3), ('bitmasking', 2), ('cpp solution', 2), ('dfs', 2), ('dynamic programming', 2), ('easy-to-understand', 2), ('java-solution', 2), ('back tracking', 1), ('beats 100', 1), ('beginner', 1), ('bit manipulation', 1), ('bitmask', 1), ('brute-force', 1), ('commentary', 1), ('comments', 1), ('dp', 1), ('easiest solution', 1), ('easy', 1), ('easy to understand', 1), ('easy-understanding', 1), ('easy-undestand', 1), ('emotional', 1), ('hashmap', 1), ('inclusion-exclusion', 1), ('input-output method', 1), ('javascript', 1), ('kotlin', 1), ('memoization', 1), ('memory-efficient', 1), ('readable', 1), ('recurision', 1), ('recursive solution', 1), ('rust', 1), ('short c++ code', 1), ('short code', 1), ('simple', 1)]"
1254,Number of Closed Islands,https://leetcode.com/problems/number-of-closed-islands,"Given a 2D grid consists of 0s (land) and 1s (water).  An island is a maximal 4-directionally connected group of 0s and a closed island is an island totally (all left, top, right, bottom) surrounded by 1s.

Return the number of closed islands.",['depth-first-search'],Medium,832,24,72048,44699,[],"[('dfs', 70), ('c++', 25), ('java', 25), ('python', 24), ('python 3', 16), ('javascript', 14), ('cpp', 13), ('cpp solution', 8), ('c#', 7), ('dfs simple solution', 7), ('python3', 7), ('bfs', 6), ('easy-understanding', 4), ('java-solution', 4), ('recursion', 4), ('depth first search', 3), ('depth-first-search', 3), ('dfs recursive', 3), ('100 space', 2), ('c', 2), ('comments', 2), ('dfs solution', 2), ('easy', 2), ('easy-to-understand', 2), ('google', 2), ('grid', 2), ('islands', 2), ('simple', 2), ('union find', 2), ('#dfs', 1), ('#easy-understand', 1), ('#easy-understanding', 1), ('#python', 1), ('100 faster', 1), ('100 speed', 1), ('1ms', 1), ('akku', 1), ('brutal force', 1), ('c++ o1 space', 1), ('c++ solution simple', 1), ('c++code', 1), ('comments added', 1), ('comments-added', 1), ('constant space', 1), ('csharp', 1), ('depth first traversal', 1), ('dfs-bottomup', 1), ('dfs-in-order', 1), ('dfs-non-recursive', 1), ('dfs-recursive', 1), ('dfs-topdown', 1), ('dp', 1), ('easy to understand', 1), ('easy-undestand', 1), ('easytounderstand', 1), ('explained', 1), ('facebook', 1), ('fidato', 1), ('flood fill', 1), ('floodfill', 1), ('geek', 1), ('goalng', 1), ('golang', 1), ('golang-solution', 1), ('graph', 1), ('graph theory', 1), ('graph traversal', 1), ('hash table', 1), ('intuitive', 1), ('java ac solution', 1), ('javasccript', 1), ('kotlinvim', 1), ('linear time', 1), ('matrix', 1), ('number of islands', 1), ('python deque', 1), ('pythonic', 1), ('readable', 1), ('recurision', 1), ('recursive solution', 1), ('recusion', 1), ('simplest', 1), ('straightforward', 1), ('surrounded regions', 1), ('swift', 1), ('uf', 1), ('unionfind', 1), ('video', 1), ('visualization', 1), ('youtube', 1)]"
1253,Reconstruct a 2-Row Binary Matrix,https://leetcode.com/problems/reconstruct-a-2-row-binary-matrix,"Given the following details of a matrix with n columns and 2 rows :


	The matrix is a binary matrix, which means each element in the matrix can be 0 or 1.
	The sum of elements of the 0-th(upper) row is given as upper.
	The sum of elements of the 1-st(lower) row is given as lower.
	The sum of elements in the i-th column(0-indexed) is colsum[i], where colsum is given as an integer array with length n.


Your task is to reconstruct the matrix with upper, lower and colsum.

Return it as a 2-D integer array.

If there are more than one valid solution, any of them will be accepted.

If no valid solution exists, return an empty 2-D array.","['math', 'greedy']",Medium,211,18,35591,14925,"[""Find Valid Matrix Given Row and Column Sums""]","[('greedy', 10), ('python', 8), ('java', 7), ('c++', 6), ('greedy approach', 6), ('python 3', 5), ('python3', 5), ('c#', 4), ('cpp', 4), ('cpp solution', 3), ('golang', 2), ('java ac solution', 2), ('java-solution', 2), ('javascript solution', 2), ('single pass', 2), ('comments-added', 1), ('counter', 1), ('counting', 1), ('easy-to-understand', 1), ('easy-undestand', 1), ('explained', 1), ('explanations', 1), ('fast', 1), ('javascript', 1), ('js', 1), ('memory', 1), ('no extra space', 1), ('readable', 1), ('swift', 1), ('testcase-wrong', 1)]"
1252,Cells with Odd Values in a Matrix,https://leetcode.com/problems/cells-with-odd-values-in-a-matrix,"There is an m x n matrix that is initialized to all 0's. There is also a 2D array indices where each indices[i] = [ri, ci] represents a 0-indexed location to perform some increment operations on the matrix.

For each location indices[i], do both of the following:


	Increment all the cells on row ri.
	Increment all the cells on column ci.


Given m, n, and indices, return the number of odd-valued cells in the matrix after applying the increment to all locations in indices.",['array'],Easy,461,777,77980,61307,[],"[('java', 27), ('c++', 25), ('python 3', 25), ('python', 20), ('cpp', 19), ('javascript', 18), ('java-solution', 9), ('cpp solution', 8), ('python3', 8), ('simple solution', 8), ('array', 6), ('c#', 6), ('c++ code', 6), ('golang', 6), ('clean code', 5), ('linear time', 4), ('bit manipulation', 3), ('c', 3), ('easy-to-understand', 3), ('efficient', 3), ('explaination', 3), ('math', 3), ('numpy', 3), ('swift', 3), ('100 memory', 2), ('brute force', 2), ('cpp easy', 2), ('easy', 2), ('easy-undestand', 2), ('easytounderstand', 2), ('explained', 2), ('fast-solution', 2), ('go', 2), ('golang-solution', 2), ('hashmap', 2), ('javascript solution', 2), ('js', 2), ('kotlin', 2), ('php', 2), ('simple', 2), ('typescript', 2), ('xor', 2), ('#python', 1), ('0ms', 1), ('100 speed', 1), ('beginner friendly', 1), ('bit-manipulation', 1), ('brute force to optimal', 1), ('brute-force', 1), ('c programming', 1), ('c++ solution', 1), ('c++ stl', 1), ('combinations', 1), ('comments', 1), ('comments-added', 1), ('cpp-solution', 1), ('detailed comparison', 1), ('easy sloution', 1), ('easy undestanding', 1), ('easy-understanding', 1), ('efficient solution', 1), ('explanation', 1), ('fast', 1), ('functional-programming', 1), ('functions', 1), ('go lang', 1), ('go-solution', 1), ('intuitive', 1), ('javascrip', 1), ('js javascript', 1), ('linear', 1), ('linear memory', 1), ('linear-time', 1), ('list comprehension', 1), ('logical', 1), ('math solution', 1), ('math-solution', 1), ('maths', 1), ('matrix-rotation', 1), ('modular arithmetic', 1), ('parity', 1), ('readable', 1), ('reduce', 1), ('rust', 1), ('sets', 1), ('simulation', 1), ('smart', 1), ('straight-forward', 1), ('trick', 1), ('two-lines', 1), ('unit-test', 1), ('unorderedset', 1), ('vector', 1), ('with-explanation', 1)]"
1250,Check If It Is a Good Array,https://leetcode.com/problems/check-if-it-is-a-good-array,"Given an array nums of positive integers. Your task is to select some subset of nums, multiply each element by an integer and add all these numbers. The array is said to be good if you can obtain a sum of 1 from the array by any possible subset and multiplicand.

Return True if the array is good otherwise return False.",['math'],Hard,140,211,16564,9355,[],"[('gcd', 5), ('c#', 4), ('cpp', 3), ('c++', 2), ('python', 2), ('python3', 2), ('1 line', 1), ('100 faster', 1), ('array', 1), ('bezout-lemma', 1), ('cpp solution', 1), ('fastest', 1), ('go', 1), ('golang', 1), ('golang-solution', 1), ('greatest-common-divisor', 1), ('java', 1), ('math', 1), ('python 3', 1), ('short code', 1), ('simplest', 1)]"
1249,Minimum Remove to Make Valid Parentheses,https://leetcode.com/problems/minimum-remove-to-make-valid-parentheses,"Given a string s of '(' , ')' and lowercase English characters. 

Your task is to remove the minimum number of parentheses ( '(' or ')', in any positions ) so that the resulting parentheses string is valid and return any valid string.

Formally, a parentheses string is valid if and only if:


	It is the empty string, contains only lowercase characters, or
	It can be written as AB (A concatenated with B), where A and B are valid strings, or
	It can be written as (A), where A is a valid string.","['string', 'stack']",Medium,2060,48,299150,192340,[],"[('stack', 76), ('java', 49), ('python', 49), ('c++', 44), ('stacks', 41), ('python 3', 25), ('javascript', 21), ('cpp', 18), ('c#', 16), ('java-solution', 16), ('cpp solution', 13), ('easy-understanding', 11), ('python3', 11), ('easy', 7), ('simple', 7), ('string', 7), ('easy-to-understand', 6), ('golang', 6), ('stack-based', 6), ('two passes', 6), ('easytounderstand', 5), ('golang-solution', 5), ('parantheses', 5), ('rust', 5), ('c', 4), ('explained', 4), ('hashset', 4), ('javascript solution', 4), ('no stack', 4), ('ruby', 4), ('simple solution', 4), ('strings', 4), ('swift', 4), ('video-explanation', 4), ('fast-solution', 3), ('parentheses', 3), ('set', 3), ('stringbuilder', 3), ('typescript', 3), ('2pass', 2), ('array', 2), ('c programming', 2), ('c++11', 2), ('deque', 2), ('detailed explanation', 2), ('easy understanding', 2), ('facebook', 2), ('importantobservation', 2), ('java stack', 2), ('js', 2), ('linear time', 2), ('map', 2), ('one pass solution', 2), ('pair', 2), ('php', 2), ('stack-implementation', 2), ('valid-parentheses', 2), ('#c++', 1), ('#cpp', 1), ('#easy-understanding', 1), ('#javascript', 1), ('#python #linear #simple', 1), ('#stack', 1), ('1 scan', 1), ('2 pass', 1), ('2 pointer approach', 1), ('2 variable approach', 1), ('algorithms', 1), ('binary search', 1), ('c code', 1), ('c++ code', 1), ('c++ monotonic stack', 1), ('c++ solution', 1), ('c++ stl', 1), ('c++14', 1), ('char compare', 1), ('commented code', 1), ('comments', 1), ('comments added', 1), ('comments-added', 1), ('commetend', 1), ('constant memory', 1), ('csharp', 1), ('dequeue', 1), ('detailed', 1), ('double pass', 1), ('easy to follow', 1), ('easy understand', 1), ('easy-undestand', 1), ('efficient solution', 1), ('explained solution', 1), ('fast', 1), ('fast and simple', 1), ('faster', 1), ('fastest', 1), ('go', 1), ('greedy', 1), ('hash table', 1), ('hashmap', 1), ('help needed', 1), ('idiomatic', 1), ('interview', 1), ('iterative', 1), ('java 8', 1), ('java ac solution', 1), ('javasccript', 1), ('javascrip', 1), ('javscript', 1), ('js javascript', 1), ('kotlin', 1), ('kotlinvim', 1), ('linear', 1), ('linear seach', 1), ('list', 1), ('math', 1), ('memory less than 100', 1), ('mrmagician', 1), ('no replacement', 1), ('optimisation', 1), ('performance', 1), ('python2', 1), ('pythonic', 1), ('question need help', 1), ('queue', 1), ('redirect21', 1), ('reverse', 1), ('sets', 1), ('short c++ code', 1), ('short code', 1), ('short solution', 1), ('shorter', 1), ('simplesolution', 1), ('solution', 1), ('space o1', 1), ('stack-simulation', 1), ('string builder', 1), ('string manipulation', 1), ('string parsing', 1), ('stringbuilder in java', 1), ('two pass', 1), ('two-pass', 1), ('video explanation', 1), ('waymo', 1), ('with comments', 1), ('without stack', 1)]"
1248,Count Number of Nice Subarrays,https://leetcode.com/problems/count-number-of-nice-subarrays,"Given an array of integers nums and an integer k. A continuous subarray is called nice if there are k odd numbers on it.

Return the number of nice sub-arrays.",['two-pointers'],Medium,836,23,53678,30158,[],"[('c++', 11), ('python', 10), ('sliding-window', 8), ('python 3', 7), ('cpp', 6), ('c#', 5), ('slidingwindow', 5), ('java', 4), ('cpp solution', 3), ('hashmap', 3), ('java-solution', 3), ('c', 2), ('javascript', 2), ('slide window', 2), ('c++ hash', 1), ('c++11', 1), ('clean clode', 1), ('detailed explanation', 1), ('dictionary', 1), ('easy to understand', 1), ('easy-to-understand', 1), ('explanation', 1), ('fast and simple', 1), ('fast-solution', 1), ('linear time', 1), ('map', 1), ('math', 1), ('math-solution', 1), ('optimized', 1), ('parity', 1), ('prefix sum', 1), ('rust', 1), ('rust vec', 1), ('sliding window', 1), ('two pointer technique', 1), ('two-pointer', 1), ('two-pointers', 1), ('twopointer', 1), ('visual', 1)]"
1247,Minimum Swaps to Make Strings Equal,https://leetcode.com/problems/minimum-swaps-to-make-strings-equal,"You are given two strings s1 and s2 of equal length consisting of letters ""x"" and ""y"" only. Your task is to make these two strings equal to each other. You can swap any two characters that belong to different strings, which means: swap s1[i] and s2[j].

Return the minimum number of swaps required to make s1 and s2 equal, or return -1 if it is impossible to do so.","['string', 'greedy']",Medium,527,173,32819,20677,"[""Determine if Two Strings Are Close""]","[('python 3', 13), ('c++', 12), ('java', 11), ('cpp', 9), ('python', 9), ('c#', 4), ('easy to understand', 3), ('easy-understanding', 3), ('easy-undestand', 3), ('greedy approach', 3), ('javascript', 3), ('counting', 2), ('cpp solution', 2), ('easy-to-understand', 2), ('explained', 2), ('greedy', 2), ('java-solution', 2), ('python3', 2), ('#cpp', 1), ('#swap', 1), ('100 faster', 1), ('beating-100-submission', 1), ('c++ code', 1), ('c++ iterative sol', 1), ('clean code', 1), ('comments-added', 1), ('constant memory', 1), ('defaultdict', 1), ('dict', 1), ('divmod', 1), ('easy-understand', 1), ('explanation', 1), ('faster than 99.41', 1), ('generic-solution', 1), ('golang-solution', 1), ('greedy algorithm', 1), ('if-else', 1), ('implementation', 1), ('javasccript', 1), ('javascrip', 1), ('javascript solution', 1), ('linear time', 1), ('linked-list', 1), ('logic explained', 1), ('loop', 1), ('math', 1), ('minswaptomakestringequal', 1), ('one-pass', 1), ('sets', 1), ('simple', 1), ('string', 1), ('thought-process', 1), ('three-lines', 1)]"
1691,Maximum Height by Stacking Cuboids ,https://leetcode.com/problems/maximum-height-by-stacking-cuboids,"Given n cuboids where the dimensions of the ith cuboid is cuboids[i] = [widthi, lengthi, heighti] (0-indexed). Choose a subset of cuboids and place them on each other.

You can place cuboid i on cuboid j if widthi <= widthj and lengthi <= lengthj and heighti <= heightj. You can rearrange any cuboid's dimensions by rotating it to put it on another cuboid.

Return the maximum height of the stacked cuboids.","['dynamic-programming', 'sort']",Hard,189,8,9154,4630,[],"[('dynamic programming', 4), ('c++', 3), ('python', 3), ('python3', 3), ('dp', 2), ('python 3', 2), ('bottoms-up', 1), ('bottomup', 1), ('c#', 1), ('explanations', 1), ('java', 1), ('javascript', 1), ('maths', 1), ('question', 1), ('sort', 1), ('swift', 1), ('topological-sorting', 1)]"
1726,Tuple with Same Product,https://leetcode.com/problems/tuple-with-same-product,"Given an array nums of distinct positive integers, return the number of tuples (a, b, c, d) such that a * b = c * d where a, b, c, and d are elements of nums, and a != b != c != d.","['array', 'hash-table']",Medium,223,12,21627,12381,[],"[('c++', 18), ('hashmap', 17), ('java', 15), ('cpp', 7), ('python', 7), ('easy', 5), ('javascript', 5), ('python3', 5), ('map', 4), ('python 3', 4), ('easy-understanding', 3), ('golang', 3), ('java-solution', 3), ('math', 3), ('explained', 2), ('go', 2), ('interview', 2), ('swift', 2), ('video-explanation', 2), ('2sum', 1), ('beginner friendly', 1), ('c#', 1), ('c++ map', 1), ('c++ solution', 1), ('comments', 1), ('comments-added', 1), ('counter', 1), ('cpp solution', 1), ('defaultdict', 1), ('dict', 1), ('dictionary', 1), ('dictionary c#', 1), ('easy-to-understand', 1), ('explain', 1), ('explained solution', 1), ('explanation of logic', 1), ('factorial', 1), ('golang-solution', 1), ('hash', 1), ('hash table', 1), ('hashing', 1), ('intuitive', 1), ('javascript solution', 1), ('one line', 1), ('one-liner', 1), ('rajat', 1), ('rajawatbanna', 1), ('ruby', 1), ('sets', 1), ('short code', 1), ('sort', 1), ('tuples-with-same-product', 1), ('two pointer technique', 1), ('unordered map', 1), ('unorderedmap', 1), ('with explanation', 1), ('without hashmap', 1)]"
1227,Airplane Seat Assignment Probability,https://leetcode.com/problems/airplane-seat-assignment-probability,"n passengers board an airplane with exactly n seats. The first passenger has lost the ticket and picks a seat randomly. But after that, the rest of passengers will:


	Take their own seat if it is still available, 
	Pick other seats randomly when they find their seat occupied 


What is the probability that the n-th person can get his own seat?","['math', 'dynamic-programming', 'brainteaser']",Medium,258,470,27528,17145,[],"[('c++', 6), ('easiest solution', 3), ('easy-to-understand', 3), ('java', 3), ('python', 3), ('c++ easy to understand', 2), ('cpp', 2), ('dynamic programming', 2), ('maths', 2), ('one-liner', 2), ('c#', 1), ('c++ code', 1), ('delete this problem lol', 1), ('easy-understanding', 1), ('easy-undestand', 1), ('easysolution', 1), ('explained', 1), ('induction', 1), ('intuition', 1), ('java ac solution', 1), ('java-solution', 1), ('math', 1), ('probability', 1), ('proof', 1), ('puzzle', 1), ('python 3', 1), ('python3', 1), ('simple', 1), ('simple clear c++ solution', 1)]"
1240,Tiling a Rectangle with the Fewest Squares,https://leetcode.com/problems/tiling-a-rectangle-with-the-fewest-squares,"Given a rectangle of size n x m, find the minimum number of integer-sided squares that tile the rectangle.","['dynamic-programming', 'backtracking']",Hard,306,303,22493,11911,[],"[('backtracking', 6), ('dp', 6), ('java', 5), ('cpp', 4), ('dynamic programming', 4), ('c++', 3), ('python', 3), ('dfs', 2), ('100', 1), ('backtrack', 1), ('beats 100', 1), ('dfs simple solution', 1), ('efficient solution', 1), ('follow-up', 1), ('graph', 1), ('greedy', 1), ('help needed', 1), ('iterative', 1), ('logic-solution', 1), ('mathematics', 1), ('memoization', 1), ('python 3', 1), ('readable', 1), ('recursion', 1), ('special case', 1), ('test-cases', 1), ('top-down', 1)]"
1239,Maximum Length of a Concatenated String with Unique Characters,https://leetcode.com/problems/maximum-length-of-a-concatenated-string-with-unique-characters,"Given an array of strings arr. String s is a concatenation of a sub-sequence of arr which have unique characters.

Return the maximum possible length of s.","['backtracking', 'bit-manipulation']",Medium,893,86,114541,57367,[],"[('backtracking', 26), ('java', 14), ('python', 14), ('python 3', 11), ('c++', 8), ('python3', 8), ('bit manipulation', 7), ('dfs', 7), ('cpp', 5), ('dp', 5), ('c#', 4), ('dfs simple solution', 4), ('javascript', 4), ('recursion', 4), ('bit masking', 3), ('easy', 3), ('easy to understand', 3), ('java-solution', 3), ('swift', 3), ('bitmask', 2), ('brute-force', 2), ('c++ code', 2), ('clean code', 2), ('combination', 2), ('cpp easy', 2), ('dynamic programming', 2), ('easy-solution', 2), ('easy-understanding', 2), ('easy-undestand', 2), ('simple solution', 2), ('100 memory', 1), ('algorithm-explained', 1), ('backtracing', 1), ('backtrack', 1), ('backtracking template', 1), ('bfs', 1), ('bit-manipulation', 1), ('bit-mask', 1), ('bitmanipulation', 1), ('bitwise', 1), ('bitwise operation', 1), ('brute force', 1), ('c#-solution', 1), ('c++11', 1), ('c++17', 1), ('cpp solution', 1), ('depth first search', 1), ('easy-to-understand', 1), ('effiecinet', 1), ('explained', 1), ('explanations', 1), ('fast and simple', 1), ('fast-solution', 1), ('golang', 1), ('hashset', 1), ('java bit-manipulation', 1), ('java union-find', 1), ('javascript solution', 1), ('keep it simple', 1), ('knapsack', 1), ('maxlenconcatestruniqchar', 1), ('memoization', 1), ('memory-efficient', 1), ('microsoft interview', 1), ('powerset', 1), ('pyhon', 1), ('python3.8', 1), ('recursive', 1), ('recursive easy', 1), ('ruby', 1), ('scala', 1), ('set', 1), ('set-union', 1), ('sets', 1), ('simple-solution', 1), ('straight-forward', 1), ('string', 1), ('template', 1), ('three-lines', 1), ('union', 1), ('whiteboard', 1)]"
1238,Circular Permutation in Binary Representation,https://leetcode.com/problems/circular-permutation-in-binary-representation,"Given 2 integers n and start. Your task is return any permutation p of (0,1,2.....,2^n -1) such that :


	p[0] = start
	p[i] and p[i+1] differ by only one bit in their binary representation.
	p[0] and p[2^n -1] must also differ by only one bit in their binary representation.",['math'],Medium,141,128,13875,9230,[],"[('gray-code', 4), ('c++', 3), ('python', 3), ('python3', 3), ('bit manipulation', 2), ('c#', 2), ('dfs', 2), ('golang', 2), ('java', 2), ('python 3', 2), ('backtrack', 1), ('bfs', 1), ('bitwise operation', 1), ('c++ code', 1), ('c++11', 1), ('cpp', 1), ('dfs simple solution', 1), ('easy to understand', 1), ('easy-undestand', 1), ('explaination', 1), ('explained', 1), ('gray code', 1), ('java-solution', 1), ('javascript', 1), ('need-help', 1), ('simple clear c++ solution', 1), ('simple solution', 1)]"
1237,Find Positive Integer Solution for a Given Equation,https://leetcode.com/problems/find-positive-integer-solution-for-a-given-equation,"Given a callable function f(x, y) with a hidden formula and a value z, reverse engineer the formula and return all positive integer pairs x and y where f(x,y) == z. You may return the pairs in any order.

While the exact formula is hidden, the function is monotonically increasing, i.e.:


	f(x, y) < f(x + 1, y)
	f(x, y) < f(x, y + 1)


The function interface is defined like this:


interface CustomFunction {
public:
  // Returns some positive integer f(x, y) for two positive integers x and y based on a formula.
  int f(int x, int y);
};


We will judge your solution as follows:


	The judge has a list of 9 hidden implementations of CustomFunction, along with a way to generate an answer key of all valid pairs for a specific z.
	The judge will receive two inputs: a function_id (to determine which implementation to test your code with), and the target z.
	The judge will call your findSolution and compare your results with the answer key.
	If your results match the answer key, your solution will be Accepted.","['math', 'binary-search']",Medium,235,911,52399,36811,[],"[('binary-search', 13), ('c++', 10), ('python', 9), ('cpp', 7), ('java', 6), ('javascript', 6), ('python 3', 6), ('binary search', 5), ('cpp solution', 4), ('golang', 4), ('python3', 4), ('binarysearch', 3), ('c#', 3), ('c++ code', 2), ('go', 2), ('10 lines', 1), ('c', 1), ('c++ easy to understand', 1), ('clean code', 1), ('cpp-solution', 1), ('csharp', 1), ('doubts', 1), ('easy-understanding', 1), ('easy-undestand', 1), ('explained', 1), ('for-loop', 1), ('general solution', 1), ('help', 1), ('iteration', 1), ('java-solution', 1), ('javascript solution', 1), ('most fast', 1), ('positive-integer-solution', 1), ('ruby', 1), ('saddleback search', 1), ('two pointers', 1), ('two-pointer', 1), ('wrong answer', 1), ('wrong-solution', 1)]"
1235,Maximum Profit in Job Scheduling,https://leetcode.com/problems/maximum-profit-in-job-scheduling,"We have n jobs, where every job is scheduled to be done from startTime[i] to endTime[i], obtaining a profit of profit[i].

You're given the startTime, endTime and profit arrays, return the maximum profit you can take such that there are no two jobs in the subset with overlapping time range.

If you choose a job that ends at time X you will be able to start another job that starts at time X.","['binary-search', 'dynamic-programming', 'sort']",Hard,1247,13,81900,39141,[],"[('dp', 21), ('dynamic programming', 14), ('java', 10), ('binary-search', 8), ('python 3', 7), ('binarysearch', 5), ('c++', 4), ('cpp', 4), ('javascript', 4), ('python', 4), ('binary search', 3), ('memoization', 3), ('c#', 2), ('c++11', 2), ('dfs', 2), ('java-solution', 2), ('python3', 2), ('recursive', 2), ('bisect', 1), ('bottom-up dp', 1), ('clean code', 1), ('cpp solution', 1), ('dfs-topdown', 1), ('doubt', 1), ('doubts', 1), ('dp-techqique', 1), ('dynamic-programming', 1), ('dynaminc programming', 1), ('dynammic programming', 1), ('easy-understanding', 1), ('easytounderstand', 1), ('follow up', 1), ('functional', 1), ('greedy', 1), ('help needed', 1), ('linear search', 1), ('linq', 1), ('lis', 1), ('map', 1), ('readable', 1), ('recursive lines clean', 1), ('ruby', 1), ('rust', 1), ('scala', 1), ('scan-line', 1), ('sort-function', 1), ('stl', 1), ('straight-forward', 1), ('swift', 1), ('thinking process', 1), ('top down dp', 1), ('top-down dp', 1), ('treemap', 1), ('treeset', 1), ('typescript', 1), ('upperbound', 1), ('video explaination', 1)]"
1234,Replace the Substring for Balanced String,https://leetcode.com/problems/replace-the-substring-for-balanced-string,"You are given a string containing only 4 kinds of characters 'Q', 'W', 'E' and 'R'.

A string is said to be balanced if each of its characters appears n/4 times where n is the length of the string.

Return the minimum length of the substring that can be replaced with any other string of the same length to make the original string s balanced.

Return 0 if the string is already balanced.","['two-pointers', 'string']",Medium,503,112,47505,16465,[],"[('sliding-window', 10), ('c++', 9), ('slidingwindow', 9), ('python', 8), ('cpp', 5), ('sliding window', 5), ('python 3', 4), ('python3', 4), ('java', 3), ('two-pointers', 3), ('2 pointers', 2), ('binary-search', 2), ('javascript solution', 2), ('2 pointer', 1), ('binary search', 1), ('binarysearch', 1), ('c++14', 1), ('clean code', 1), ('cpp solution', 1), ('detailed explanation', 1), ('easy', 1), ('explained', 1), ('explanations', 1), ('golang', 1), ('hash table', 1), ('hashmap', 1), ('help me', 1), ('interview question', 1), ('java-solution', 1), ('javascript', 1), ('linear', 1), ('new', 1), ('prefix sum', 1), ('short code', 1), ('simple solution', 1), ('slide window', 1), ('straight forward', 1), ('straight-forward', 1), ('straightforward', 1), ('two pointer technique', 1), ('video-explanation', 1), ('visualization', 1), ('well commented', 1)]"
1233,Remove Sub-Folders from the Filesystem,https://leetcode.com/problems/remove-sub-folders-from-the-filesystem,"Given a list of folders, remove all sub-folders in those folders and return in any order the folders after removing.

If a folder[i] is located within another folder[j], it is called a sub-folder of it.

The format of a path is one or more concatenated strings of the form: / followed by one or more lowercase English letters. For example, /leetcode and /leetcode/problems are valid paths while an empty string and / are not.","['array', 'string']",Medium,377,61,46810,29335,[],"[('java', 15), ('c++', 11), ('sorting', 11), ('python', 9), ('javascript', 5), ('trie', 5), ('c#', 4), ('cpp', 4), ('easy', 4), ('python 3', 4), ('python3', 4), ('tries', 4), ('easy-understanding', 3), ('c++ code', 2), ('clean code', 2), ('golang', 2), ('hashset', 2), ('string', 2), ('array', 1), ('backtacking', 1), ('comments-added', 1), ('constant space', 1), ('cpp solution', 1), ('dfs', 1), ('explain', 1), ('explained', 1), ('fast', 1), ('fast and simple', 1), ('faster-than-100', 1), ('hash table', 1), ('intuition', 1), ('intuitive', 1), ('java ac solution', 1), ('java solution', 1), ('java-solution', 1), ('keep it simple', 1), ('linear time', 1), ('nlogn', 1), ('python2', 1), ('readable', 1), ('search', 1), ('simple java solution', 1), ('simple solution', 1), ('sort', 1), ('sorted', 1), ('sorted array', 1), ('startswith', 1), ('swift', 1), ('tree', 1), ('trie-dfs', 1), ('union find', 1), ('unordered map', 1), ('vector', 1)]"
1232,Check If It Is a Straight Line,https://leetcode.com/problems/check-if-it-is-a-straight-line,"You are given an array coordinates, coordinates[i] = [x, y], where [x, y] represents the coordinate of a point. Check if these points make a straight line in the XY plane.","['array', 'math', 'geometry']",Easy,566,91,215010,92717,[],"[('java', 37), ('python', 36), ('c++', 28), ('python 3', 28), ('slope', 23), ('javascript', 17), ('cpp', 15), ('python3', 15), ('easy-understanding', 13), ('java-solution', 12), ('easy-undestand', 10), ('math', 8), ('linear time', 6), ('math-solution', 5), ('c#', 4), ('collinearity', 4), ('cpp solution', 4), ('fast and simple', 4), ('geometry', 4), ('js', 4), ('simple solution', 4), ('slope equation', 4), ('2d-array', 3), ('easytounderstand', 3), ('fast-solution', 3), ('golang', 3), ('ruby', 3), ('0ms', 2), ('100 memory', 2), ('c++ code', 2), ('constant space', 2), ('coordinate geometry', 2), ('determinant', 2), ('easiest', 2), ('easy', 2), ('easy-to-understand', 2), ('explaination', 2), ('go', 2), ('javascript solution', 2), ('python2', 2), ('short code', 2), ('100 faster', 1), ('100 space', 1), ('100 speed', 1), ('algorithms', 1), ('array', 1), ('big o of n', 1), ('c', 1), ('c++14', 1), ('clean code', 1), ('clean-efficient-code', 1), ('commentary', 1), ('cross product', 1), ('csharp', 1), ('detailed explanation', 1), ('detailed thinking step', 1), ('divide and conquer', 1), ('divide by zero', 1), ('easy understanding', 1), ('es2015', 1), ('explain', 1), ('explained', 1), ('explanation', 1), ('faster than 95.46', 1), ('faster then 95', 1), ('fastest', 1), ('gcd', 1), ('go-solution', 1), ('golang solution', 1), ('golang-solution', 1), ('help', 1), ('i want to get a star', 1), ('iteration', 1), ('iterative', 1), ('javascrip', 1), ('javascriptes6', 1), ('js javascript', 1), ('linear algebra', 1), ('math-proof', 1), ('mathematical', 1), ('mathematics', 1), ('memory-efficient', 1), ('one pass', 1), ('php', 1), ('pyhton3', 1), ('pythonic', 1), ('readable', 1), ('rust', 1), ('sets', 1), ('shoelace-formula', 1), ('short', 1), ('short solution', 1), ('simple', 1), ('sliding-window', 1), ('solution', 1), ('swift', 1), ('unit-test', 1), ('vector', 1), ('vectors', 1)]"
1224,Maximum Equal Frequency,https://leetcode.com/problems/maximum-equal-frequency,"Given an array nums of positive integers, return the longest possible length of an array prefix of nums, such that it is possible to remove exactly one element from this prefix so that every number that has appeared in it will have the same number of occurrences.

If after removing one element there are no remaining elements, it's still considered that every appeared number has the same number of ocurrences (0).",['hash-table'],Hard,248,29,23805,8503,[],"[('c++', 7), ('python', 6), ('java', 4), ('c#', 3), ('cpp', 3), ('python3', 3), ('hashmap', 2), ('python 3', 2), ('unorderedmap', 2), ('#hashmap', 1), ('binarysearch', 1), ('c++ code', 1), ('clean code', 1), ('commentary', 1), ('counter', 1), ('dictionaries', 1), ('easy', 1), ('explaination', 1), ('explained', 1), ('fast and simple', 1), ('frequency count', 1), ('hash table', 1), ('helpful comments', 1), ('idea', 1), ('linear memory', 1), ('linear time', 1), ('python2', 1), ('stupid', 1)]"
1223,Dice Roll Simulation,https://leetcode.com/problems/dice-roll-simulation,"A die simulator generates a random number from 1 to 6 for each roll. You introduced a constraint to the generator such that it cannot roll the number i more than rollMax[i] (1-indexed) consecutive times. 

Given an array of integers rollMax and an integer n, return the number of distinct sequences that can be obtained with exact n rolls.

Two sequences are considered different if at least one element differs from each other. Since the answer may be too large, return it modulo 10^9 + 7.",['dynamic-programming'],Hard,525,165,37139,17365,[],"[('dynamic programming', 12), ('python', 10), ('dp', 8), ('memoization', 6), ('python 3', 6), ('python3', 6), ('c++', 5), ('backtrack', 2), ('java', 2), ('recursion', 2), ('bottom-up-algorithm', 1), ('c#', 1), ('cpp', 1), ('deque', 1), ('dfs', 1), ('dynamic-programming', 1), ('easy-undestand', 1), ('expalanation', 1), ('explained', 1), ('golang', 1), ('logic explained', 1), ('memoziation', 1), ('question explanation', 1), ('queue', 1), ('recursive easy', 1), ('recusion', 1), ('simple python solution', 1), ('sliding window', 1), ('space-complexity', 1), ('step by step', 1)]"
1222,Queens That Can Attack the King,https://leetcode.com/problems/queens-that-can-attack-the-king,"On an 8x8 chessboard, there can be multiple Black Queens and one White King.

Given an array of integer coordinates queens that represents the positions of the Black Queens, and a pair of coordinates king that represent the position of the White King, return the coordinates of all the queens (in any order) that can attack the King.",['array'],Medium,443,90,35184,24440,[],"[('java', 20), ('c++', 19), ('python', 11), ('cpp', 7), ('python 3', 7), ('easy-understanding', 6), ('javascript', 6), ('python3', 6), ('easy-to-understand', 5), ('c#', 4), ('clean code', 4), ('memory optimized', 3), ('recursion', 3), ('backtracking', 2), ('c++ solution', 2), ('cpp solution', 2), ('easy-to-read', 2), ('explained', 2), ('golang', 2), ('#python #codegirl', 1), ('0ms', 1), ('approach', 1), ('array', 1), ('bad', 1), ('c# easy', 1), ('c# solutions', 1), ('c++ code', 1), ('c++11', 1), ('clean', 1), ('clean solution', 1), ('clear-understanding', 1), ('commentary', 1), ('comments', 1), ('cpp easy', 1), ('cppsolution', 1), ('dfs-topdown', 1), ('dynamic programming', 1), ('easy', 1), ('easy-undestand', 1), ('easytounderstand', 1), ('fast and simple', 1), ('functional programming', 1), ('geometry', 1), ('go lang', 1), ('greedy approach', 1), ('hash table', 1), ('interview-friendly', 1), ('iterative', 1), ('java easy to understand', 1), ('java-solution', 1), ('memory-efficient', 1), ('n-queens', 1), ('optimal', 1), ('php', 1), ('php solution', 1), ('pythagorean', 1), ('readable', 1), ('recursive', 1), ('rust', 1), ('simple clear c++ solution', 1), ('spaceship-operator', 1), ('traversal level order', 1), ('trigonometric function', 1), ('typescript', 1), ('vector', 1), ('vectors', 1), ('verbose', 1), ('werfree', 1)]"
1221,Split a String in Balanced Strings,https://leetcode.com/problems/split-a-string-in-balanced-strings,"Balanced strings are those that have an equal quantity of 'L' and 'R' characters.

Given a balanced string s, split it in the maximum amount of balanced strings.

Return the maximum amount of split balanced strings.","['string', 'greedy']",Easy,1065,602,172980,145867,[],"[('c++', 65), ('java', 60), ('python', 54), ('python 3', 50), ('cpp', 42), ('javascript', 33), ('easy-understanding', 26), ('java-solution', 26), ('cpp solution', 23), ('python3', 17), ('c', 15), ('c#', 15), ('easy', 13), ('string', 12), ('golang', 11), ('greedy', 11), ('stacks', 11), ('stack', 10), ('easytounderstand', 9), ('simple solution', 9), ('swift', 8), ('c++ code', 7), ('cpp easy', 7), ('fast-solution', 7), ('greedy approach', 7), ('fast and simple', 5), ('easysolution', 4), ('explained', 4), ('go', 4), ('greedy algorithm', 4), ('python2', 4), ('ruby', 4), ('two-pointers', 4), ('100 speed', 3), ('balanced string', 3), ('clean code', 3), ('commentary', 3), ('counter', 3), ('csharp', 3), ('easy to understand', 3), ('easy-to-understand', 3), ('easy-undestand', 3), ('golang-solution', 3), ('javascript solution', 3), ('recursive', 3), ('simple', 3), ('0ms', 2), ('100 memory', 2), ('100 space', 2), ('array', 2), ('c++ easy to understand', 2), ('code for beginners', 2), ('fasterthan100', 2), ('fastest c++ solution', 2), ('for fun', 2), ('if', 2), ('if-else', 2), ('javascrip', 2), ('js', 2), ('linear time', 2), ('memory optimized', 2), ('mrmagician', 2), ('readable', 2), ('recursion', 2), ('rust', 2), ('strings', 2), ('swift5', 2), ('#java', 1), ('1-line', 1), ('100', 1), ('100 faster', 1), ('abstraction', 1), ('algorithms', 1), ('asahiocean', 1), ('attractive', 1), ('avnish', 1), ('beginner friendly', 1), ('best-solution-ever', 1), ('big o', 1), ('brutal force optmized', 1), ('c programming', 1), ('c# solution', 1), ('c++11', 1), ('c++easy-understanding', 1), ('char', 1), ('character array', 1), ('commented', 1), ('comments', 1), ('concise-solution', 1), ('conditional-expression', 1), ('constant space', 1), ('counting algorithm', 1), ('cpp-solution', 1), ('declarative', 1), ('detailed explanation', 1), ('dictionary', 1), ('easy code', 1), ('easy sloution', 1), ('easy-solition', 1), ('easy-solution', 1), ('easy-understand', 1), ('efficient', 1), ('efficient algorithm', 1), ('elegant solution', 1), ('explaination', 1), ('explanation', 1), ('faster than 100', 1), ('faster than 100.00', 1), ('faster than 95.46', 1), ('fastest', 1), ('fastest python solution', 1), ('for', 1), ('functional', 1), ('github', 1), ('go lang', 1), ('google', 1), ('if condition', 1), ('iterative', 1), ('java ac solution', 1), ('java script', 1), ('java-8', 1), ('javascriptes6', 1), ('js javascript', 1), ('kotlin', 1), ('linear search', 1), ('loop', 1), ('loop bsed', 1), ('loops', 1), ('math', 1), ('memory', 1), ('no-extra-space', 1), ('nospace', 1), ('om + n', 1), ('one pass', 1), ('one-liner', 1), ('optimal', 1), ('pointer', 1), ('ptyhon3', 1), ('python3.8', 1), ('pythonpython3', 1), ('scala', 1), ('self-explanatory', 1), ('shorter', 1), ('simple clear c++ solution', 1), ('simple java solution', 1), ('simplesolution', 1), ('simplest', 1), ('sliding window algorithm', 1), ('solution', 1), ('solution-sharing-cpp', 1), ('splitbalancedstrings', 1), ('straight-forward', 1), ('string balance', 1), ('string-operation', 1), ('string-searching', 1), ('substrings', 1), ('three-lines', 1), ('twopointer', 1), ('typescript', 1), ('understanding', 1), ('unit-test', 1), ('upvote', 1)]"
1226,The Dining Philosophers,https://leetcode.com/problems/the-dining-philosophers,"Five silent philosophers sit at a round table with bowls of spaghetti. Forks are placed between each pair of adjacent philosophers.

Each philosopher must alternately think and eat. However, a philosopher can only eat spaghetti when they have both left and right forks. Each fork can be held by only one philosopher and so a philosopher can use the fork only if it is not being used by another philosopher. After an individual philosopher finishes eating, they need to put down both forks so that the forks become available to others. A philosopher can take the fork on their right or the one on their left as they become available, but cannot start eating before getting both forks.

Eating is not limited by the remaining amounts of spaghetti or stomach space; an infinite supply and an infinite demand are assumed.

Design a discipline of behaviour (a concurrent algorithm) such that no philosopher will starve; i.e., each can forever continue to alternate between eating and thinking, assuming that no philosopher can know when others may want to eat or think.



The problem statement and the image above are taken from wikipedia.org

 

The philosophers' ids are numbered from 0 to 4 in a clockwise order. Implement the function void wantsToEat(philosopher, pickLeftFork, pickRightFork, eat, putLeftFork, putRightFork) where:


	philosopher is the id of the philosopher who wants to eat.
	pickLeftFork and pickRightFork are functions you can call to pick the corresponding forks of that philosopher.
	eat is a function you can call to let the philosopher eat once he has picked both forks.
	putLeftFork and putRightFork are functions you can call to put down the corresponding forks of that philosopher.
	The philosophers are assumed to be thinking as long as they are not asking to eat (the function is not being called with their number).


Five threads, each representing a philosopher, will simultaneously use one object of your class to simulate the process. The function may be called for the same philosopher more than once, even before the last call ends.",[],Medium,127,140,20001,12026,[],"[('python 3', 4), ('python3', 4), ('c++', 3), ('concurrency', 3), ('java', 3), ('java-solution', 3), ('c++11', 2), ('python', 2), ('c', 1), ('c++17', 1), ('coarse-grained', 1), ('cpp', 1), ('easy-undestand', 1), ('fast and simple', 1), ('fine-grained', 1), ('help', 1), ('lock', 1), ('readable', 1), ('semaphore', 1), ('short code', 1), ('simple solution', 1), ('stl', 1)]"
1206,Design Skiplist,https://leetcode.com/problems/design-skiplist,"Design a Skiplist without using any built-in libraries.

A Skiplist is a data structure that takes O(log(n)) time to add, erase and search. Comparing with treap and red-black tree which has the same function and performance, the code length of Skiplist can be comparatively short and the idea behind Skiplists are just simple linked lists.

For example: we have a Skiplist containing [30,40,50,60,70,90] and we want to add 80 and 45 into it. The Skiplist works this way:


Artyom Kalinin [CC BY-SA 3.0], via Wikimedia Commons

You can see there are many layers in the Skiplist. Each layer is a sorted linked list. With the help of the top layers, add , erase and search can be faster than O(n). It can be proven that the average time complexity for each operation is O(log(n)) and space complexity is O(n).

To be specific, your design should include these functions:


	bool search(int target) : Return whether the target exists in the Skiplist or not.
	void add(int num): Insert a value into the SkipList. 
	bool erase(int num): Remove a value in the Skiplist. If num does not exist in the Skiplist, do nothing and return false. If there exists multiple num values, removing any one of them is fine.


See more about Skiplist : https://en.wikipedia.org/wiki/Skip_list

Note that duplicates may exist in the Skiplist, your code needs to handle this situation.",['design'],Hard,246,30,13040,7700,"[""Design HashSet"", ""Design HashMap"", ""Design Linked List""]","[('skiplist', 3), ('cpp', 1), ('golang', 1), ('hashmap', 1), ('javascript', 1), ('python', 1), ('python 3', 1), ('rust', 1), ('simple', 1), ('strucutures', 1)]"
1220,Count Vowels Permutation,https://leetcode.com/problems/count-vowels-permutation,"Given an integer n, your task is to count how many strings of length n can be formed under the following rules:


	Each character is a lower case vowel ('a', 'e', 'i', 'o', 'u')
	Each vowel 'a' may only be followed by an 'e'.
	Each vowel 'e' may only be followed by an 'a' or an 'i'.
	Each vowel 'i' may not be followed by another 'i'.
	Each vowel 'o' may only be followed by an 'i' or a 'u'.
	Each vowel 'u' may only be followed by an 'a'.


Since the answer may be too large, return it modulo 10^9 + 7.",['dynamic-programming'],Hard,326,58,31855,17217,[],"[('dp', 20), ('dynamic programming', 20), ('java', 11), ('python 3', 10), ('cpp', 7), ('python', 7), ('c++', 6), ('memoization', 5), ('matrix-multiplication', 4), ('recursion', 4), ('c#', 3), ('python3', 3), ('dynamic-programming', 2), ('graph', 2), ('java-solution', 2), ('matrix', 2), ('readable', 2), ('#1220', 1), ('100 faster runtime', 1), ('bottomup', 1), ('bug report', 1), ('c++ code', 1), ('c++ hash', 1), ('c++17', 1), ('count vowels permutations', 1), ('dag', 1), ('dependencies', 1), ('detailed explanation', 1), ('diagrams', 1), ('digit dp', 1), ('dp python', 1), ('explain', 1), ('explanation', 1), ('faster than 100', 1), ('hack', 1), ('hashmap', 1), ('iteration', 1), ('javascript', 1), ('js', 1), ('knapsack', 1), ('less memory', 1), ('loops', 1), ('map', 1), ('memoziation', 1), ('python2', 1), ('scala', 1), ('scrolling array', 1), ('short', 1), ('state-machine', 1), ('string', 1), ('tabulation', 1), ('three-lines', 1), ('topdown', 1), ('vowels', 1), ('with-explanation', 1)]"
1219,Path with Maximum Gold,https://leetcode.com/problems/path-with-maximum-gold,"In a gold mine grid of size m x n, each cell in this mine has an integer representing the amount of gold in that cell, 0 if it is empty.

Return the maximum amount of gold you can collect under the conditions:


	Every time you are located in a cell you will collect all the gold in that cell.
	From your position, you can walk one step to the left, right, up, or down.
	You can't visit the same cell more than once.
	Never visit a cell with 0 gold.
	You can start and stop collecting gold from any position in the grid that has some gold.",['backtracking'],Medium,1004,37,80968,53461,[],"[('backtracking', 48), ('dfs', 45), ('java', 24), ('python', 17), ('c++', 15), ('python 3', 14), ('javascript', 11), ('dfs simple solution', 10), ('java-solution', 8), ('easy-understanding', 6), ('python3', 6), ('cpp', 5), ('easy', 5), ('backtrack', 4), ('golang', 4), ('back tracking', 2), ('bfs', 2), ('c#', 2), ('c++ code', 2), ('depth first search', 2), ('dfs solution', 2), ('dfs with memo', 2), ('easytounderstand', 2), ('google-onsite', 2), ('path', 2), ('recursion', 2), ('ruby', 2), ('simple', 2), ('simple solution', 2), ('swift', 2), ('backtacking', 1), ('backtracing', 1), ('beginner friendly', 1), ('bfs-dfs', 1), ('brute force', 1), ('clean code', 1), ('commented', 1), ('comments-added', 1), ('cpp solution', 1), ('cpp-solution', 1), ('depth-first-search', 1), ('dfs recursive', 1), ('dfs-bfs', 1), ('dp-techqique', 1), ('easy to understand', 1), ('faster', 1), ('faster than 95', 1), ('generalised algorithm', 1), ('golang-solution', 1), ('graph', 1), ('help me', 1), ('javascript recursive', 1), ('javascript solution', 1), ('js', 1), ('js javascript', 1), ('kotlin', 1), ('mrmagician', 1), ('readable', 1), ('recoursion', 1), ('recursion formula', 1), ('recursive', 1), ('set', 1), ('simple clear c++ solution', 1), ('straighforward', 1), ('straightforward', 1), ('typescript', 1), ('wrong answer', 1), ('wrong-answer-java', 1), ('wrong-solution', 1)]"
1218,Longest Arithmetic Subsequence of Given Difference,https://leetcode.com/problems/longest-arithmetic-subsequence-of-given-difference,"Given an integer array arr and an integer difference, return the length of the longest subsequence in arr which is an arithmetic sequence such that the difference between adjacent elements in the subsequence equals difference.

A subsequence is a sequence that can be derived from arr by deleting some or no elements without changing the order of the remaining elements.","['hash-table', 'math', 'dynamic-programming']",Medium,532,33,53389,25064,[],"[('dynamic programming', 17), ('python', 12), ('hashmap', 10), ('c++', 9), ('python 3', 8), ('dp', 7), ('java', 6), ('python3', 6), ('cpp', 5), ('javascript', 5), ('dictionary', 3), ('golang', 3), ('map', 3), ('c#', 2), ('4-lines', 1), ('clarification', 1), ('constant space', 1), ('dict', 1), ('dictonary', 1), ('dynamic programmin', 1), ('dynamic-programming', 1), ('dynammic programming', 1), ('easy', 1), ('explained', 1), ('fastest', 1), ('give stars and subscribe', 1), ('go', 1), ('go-solution', 1), ('hash table', 1), ('hashing', 1), ('intuitive', 1), ('java-solution', 1), ('lis', 1), ('map-stl', 1), ('no dp', 1), ('no fancy methods', 1), ('on', 1), ('one-liner', 1), ('parallel', 1), ('readable', 1), ('simple', 1), ('simple solution', 1), ('swift', 1)]"
1217,Minimum Cost to Move Chips to The Same Position,https://leetcode.com/problems/minimum-cost-to-move-chips-to-the-same-position,"We have n chips, where the position of the ith chip is position[i].

We need to move all the chips to the same position. In one step, we can change the position of the ith chip from position[i] to:


	position[i] + 2 or position[i] - 2 with cost = 0.
	position[i] + 1 or position[i] - 1 with cost = 1.


Return the minimum cost needed to move all the chips to the same position.","['array', 'math', 'greedy']",Easy,336,51,76415,54107,"[""Minimum Number of Operations to Move All Balls to Each Box""]","[('c++', 34), ('python', 24), ('python 3', 23), ('cpp', 20), ('java', 13), ('cpp solution', 11), ('easy-understanding', 11), ('javascript', 10), ('python3', 9), ('fast and simple', 7), ('c#', 6), ('easy', 6), ('linear time', 6), ('java-solution', 5), ('explained', 4), ('greedy', 4), ('one-liner', 4), ('ruby', 4), ('100 speed', 3), ('c', 3), ('easy-to-understand', 3), ('easytounderstand', 3), ('even odd', 3), ('expalanation', 3), ('explaination', 3), ('odd-even', 3), ('oneline', 3), ('0ms', 2), ('100 memory', 2), ('array', 2), ('beginner friendly', 2), ('constant memory', 2), ('cpp easy', 2), ('fasterthan100', 2), ('greedy approach', 2), ('js', 2), ('parity', 2), ('php', 2), ('rust', 2), ('#python 3', 1), ('100 faster runtime', 1), ('100 space', 1), ('1217', 1), ('beats 100', 1), ('beginnerfriendly', 1), ('beginners level', 1), ('binary operation', 1), ('bug report', 1), ('c++ code', 1), ('c++ solution', 1), ('c++11', 1), ('c++code', 1), ('commentary', 1), ('comments-added', 1), ('count', 1), ('counter', 1), ('cpp-solution', 1), ('description-error', 1), ('dictionary', 1), ('easy-undestand', 1), ('even', 1), ('explained solution', 1), ('explanation with logic', 1), ('explanations', 1), ('fast', 1), ('fast-solution', 1), ('filter', 1), ('foreach', 1), ('go', 1), ('golang', 1), ('golang-solution', 1), ('i want to get a star', 1), ('iteration', 1), ('iteration vs recursion', 1), ('javascript solution', 1), ('learning', 1), ('linear-time', 1), ('logic explained', 1), ('logic-solution', 1), ('logical error', 1), ('logical thinking', 1), ('map', 1), ('math trick', 1), ('mincosttomovechips', 1), ('odd', 1), ('odd even', 1), ('one line', 1), ('oneliner', 1), ('optimized', 1), ('php solution', 1), ('problem-statement', 1), ('pythonpython3', 1), ('question', 1), ('readable', 1), ('recursion vs iteration', 1), ('recursive vs iterative', 1), ('scala', 1), ('simple solution', 1), ('simplest', 1), ('stl', 1), ('swift', 1), ('swift5', 1), ('time-complexity-o', 1), ('tricky', 1), ('two-lines', 1), ('unit-test', 1)]"
1514,Path with Maximum Probability,https://leetcode.com/problems/path-with-maximum-probability,"You are given an undirected weighted graph of n nodes (0-indexed), represented by an edge list where edges[i] = [a, b] is an undirected edge connecting the nodes a and b with a probability of success of traversing that edge succProb[i].

Given two nodes start and end, find the path with the maximum probability of success to go from start to end and return its success probability.

If there is no path from start to end, return 0. Your answer will be accepted if it differs from the correct answer by at most 1e-5.",['graph'],Medium,575,13,49239,20291,[],"[('bfs', 13), ('dijkstra', 13), ('dijkstras algorithm', 13), ('python', 12), ('c++', 11), ('java', 11), ('priority queue', 11), ('javascript', 7), ('heapq', 6), ('python3', 5), ('dynamic programming', 4), ('python 3', 4), ('c++ code', 3), ('cpp', 3), ('djiktras', 3), ('java-solution', 3), ('c#', 2), ('dfs', 2), ('dijikstra', 2), ('dijkastra', 2), ('dijkstras', 2), ('graph', 2), ('heap', 2), ('php', 2), ('bellman ford', 1), ('bellman-ford', 1), ('bfs simple solution', 1), ('bfs+dfs', 1), ('c++ easy to understand', 1), ('clean code', 1), ('comments', 1), ('dfs simple solution', 1), ('dfs with dp', 1), ('dijekstra', 1), ('dijksta', 1), ('dijkstra algorithm', 1), ('dijsktra', 1), ('djikstra', 1), ('djikstra algorithm', 1), ('easy to read', 1), ('easy-to-understand', 1), ('easy-understanding', 1), ('easy-undestand', 1), ('golang', 1), ('idea', 1), ('javascript solution', 1), ('logarithms', 1), ('longest-path', 1), ('max-heap', 1), ('min heap', 1), ('new concept', 1), ('queue', 1), ('set c++', 1), ('simple solution', 1), ('solved', 1), ('swift', 1)]"
1706,Where Will the Ball Fall,https://leetcode.com/problems/where-will-the-ball-fall,"You have a 2-D grid of size m x n representing a box, and you have n balls. The box is open on the top and bottom sides.

Each cell in the box has a diagonal board spanning two corners of the cell that can redirect a ball to the right or to the left.


	A board that redirects the ball to the right spans the top-left corner to the bottom-right corner and is represented in the grid as 1.
	A board that redirects the ball to the left spans the top-right corner to the bottom-left corner and is represented in the grid as -1.


We drop one ball at the top of each column of the box. Each ball can get stuck in the box or fall out of the bottom. A ball gets stuck if it hits a ""V"" shaped pattern between two boards or if a board redirects the ball into either wall of the box.

Return an array answer of size n where answer[i] is the column that the ball falls out of at the bottom after dropping the ball from the ith column at the top, or -1 if the ball gets stuck in the box.",['dynamic-programming'],Medium,257,22,14904,9045,[],"[('c++', 19), ('java', 12), ('dfs', 8), ('python', 8), ('recursion', 7), ('python 3', 6), ('dynamic programming', 4), ('memoization', 4), ('dp', 3), ('easy-understanding', 3), ('golang', 3), ('c#', 2), ('cpp', 2), ('easy to understand', 2), ('easytounderstand', 2), ('fast-solution', 2), ('go', 2), ('java-solution', 2), ('javascript', 2), ('python3', 2), ('recurision', 2), ('simulation', 2), ('swift', 2), ('beats 100 percent', 1), ('beginner', 1), ('beginner friendly', 1), ('bfs', 1), ('brutal-force', 1), ('c++11', 1), ('clean code', 1), ('cpp god', 1), ('depth-first-search', 1), ('direction', 1), ('dynamic-programming', 1), ('easy to understandd', 1), ('explain', 1), ('explanation of logic', 1), ('explanation with code', 1), ('faster than 100', 1), ('fastest', 1), ('fastest java slution', 1), ('golang-solution', 1), ('graph', 1), ('help', 1), ('illustration', 1), ('implementaion', 1), ('implementation', 1), ('kotlin', 1), ('linear', 1), ('mucheasierthanitappear', 1), ('o-mn', 1), ('observations', 1), ('python3.8', 1), ('ruby', 1), ('short', 1), ('short code', 1), ('straight-forward', 1), ('top down dp', 1), ('video-explanation', 1), ('with explaination', 1), ('zea7ot', 1)]"
1210,Minimum Moves to Reach Target with Rotations,https://leetcode.com/problems/minimum-moves-to-reach-target-with-rotations,"In an n*n grid, there is a snake that spans 2 cells and starts moving from the top left corner at (0, 0) and (0, 1). The grid has empty cells represented by zeros and blocked cells represented by ones. The snake wants to reach the lower right corner at (n-1, n-2) and (n-1, n-1).

In one move the snake can:


	Move one cell to the right if there are no blocked cells there. This move keeps the horizontal/vertical position of the snake as it is.
	Move down one cell if there are no blocked cells there. This move keeps the horizontal/vertical position of the snake as it is.
	Rotate clockwise if it's in a horizontal position and the two cells under it are both empty. In that case the snake moves from (r, c) and (r, c+1) to (r, c) and (r+1, c).
	
	Rotate counterclockwise if it's in a vertical position and the two cells to its right are both empty. In that case the snake moves from (r, c) and (r+1, c) to (r, c) and (r, c+1).
	


Return the minimum number of moves to reach the target.

If there is no way to reach the target, return -1.",['breadth-first-search'],Hard,159,48,12920,6028,[],"[('bfs', 12), ('python', 5), ('c++', 4), ('breadth first search', 3), ('dynamic programming', 3), ('java', 3), ('python 3', 3), ('python3', 3), ('concise', 2), ('javascript', 2), ('an7one', 1), ('beginner friendly', 1), ('bfs java', 1), ('breadth-first-search', 1), ('c', 1), ('c#', 1), ('depth first search', 1), ('dfs', 1), ('easy-understanding', 1), ('explaination', 1), ('explanation', 1), ('functional', 1), ('java-solution', 1), ('kotlin', 1), ('memoziation', 1), ('python bfs', 1), ('string key', 1)]"
1208,Get Equal Substrings Within Budget,https://leetcode.com/problems/get-equal-substrings-within-budget,"You are given two strings s and t of the same length. You want to change s to t. Changing the i-th character of s to i-th character of t costs |s[i] - t[i]| that is, the absolute difference between the ASCII values of the characters.

You are also given an integer maxCost.

Return the maximum length of a substring of s that can be changed to be the same as the corresponding substring of twith a cost less than or equal to maxCost.

If there is no substring from s that can be changed to its corresponding substring from t, return 0.","['array', 'sliding-window']",Medium,412,31,48270,21418,[],"[('c++', 13), ('sliding-window', 11), ('sliding window', 10), ('slidingwindow', 10), ('cpp', 9), ('python 3', 8), ('java', 6), ('python', 5), ('c#', 4), ('javascript', 4), ('python3', 4), ('simple solution', 4), ('binary search', 2), ('cpp easy', 2), ('easy', 2), ('easy-undestand', 2), ('slide window', 2), ('two-pointers', 2), ('accumulate', 1), ('array', 1), ('binary-search', 1), ('c++11', 1), ('clean code', 1), ('clear', 1), ('cpp doubt', 1), ('easy to understand', 1), ('easy-understanding', 1), ('es2015', 1), ('explained', 1), ('explanation', 1), ('go', 1), ('golang', 1), ('intuitive', 1), ('java solution', 1), ('java-solution', 1), ('linear memory', 1), ('linear time', 1), ('no extra space', 1), ('on', 1), ('rust', 1), ('single pass', 1), ('subarray sum equals', 1), ('two pointers', 1), ('video explanation', 1)]"
1209,Remove All Adjacent Duplicates in String II,https://leetcode.com/problems/remove-all-adjacent-duplicates-in-string-ii,"You are given a string s and an integer k, a k duplicate removal consists of choosing k adjacent and equal letters from s and removing them, causing the left and the right side of the deleted substring to concatenate together.

We repeatedly make k duplicate removals on s until we no longer can.

Return the final string after all such duplicate removals have been made. It is guaranteed that the answer is unique.",['stack'],Medium,1517,32,166197,95848,"[""Remove All Adjacent Duplicates In String""]","[('stack', 53), ('c++', 47), ('java', 31), ('stacks', 30), ('cpp', 22), ('python', 20), ('javascript', 16), ('python 3', 16), ('python3', 12), ('c#', 7), ('easy-understanding', 7), ('java-solution', 7), ('recursion', 7), ('golang', 6), ('clean code', 5), ('cpp solution', 5), ('rust', 4), ('simple', 4), ('string', 4), ('beginner friendly', 3), ('easy', 3), ('explained', 3), ('go', 3), ('pair', 3), ('simple solution', 3), ('array', 2), ('c++ code', 2), ('clean', 2), ('deque', 2), ('easy-to-understand', 2), ('explanation with code', 2), ('fast and simple', 2), ('iteration', 2), ('linear time', 2), ('readable', 2), ('stack-based', 2), ('two-pointers', 2), ('#python3', 1), ('2 stacks', 1), ('ascii', 1), ('awesome samriddhi', 1), ('best practices', 1), ('bloomberg', 1), ('brute force', 1), ('c++ solution', 1), ('char compare', 1), ('char comparison', 1), ('class', 1), ('comments-added', 1), ('compression', 1), ('concise', 1), ('cpp easy', 1), ('dequeue', 1), ('east-to-understand', 1), ('elegant', 1), ('explaination', 1), ('explained solution', 1), ('fast', 1), ('go-solution', 1), ('golang-solution', 1), ('greedy', 1), ('help me', 1), ('intutive', 1), ('iterative', 1), ('iterator', 1), ('java ac solution', 1), ('java solution', 1), ('javasccript', 1), ('javascript solution', 1), ('js', 1), ('js solution', 1), ('keep it simple', 1), ('kotlin', 1), ('kotlinvim', 1), ('linear memory', 1), ('linkedlist', 1), ('non-copy-paste', 1), ('nostack', 1), ('o1 space', 1), ('optimisation', 1), ('optimization', 1), ('performance', 1), ('pointer', 1), ('python2', 1), ('recursive easy', 1), ('removeadjacentduplicateii', 1), ('ritik', 1), ('ruby', 1), ('self explanatory', 1), ('sets', 1), ('simple clear c++ solution', 1), ('sliding window algorithm', 1), ('sliding-window', 1), ('slidingwindow', 1), ('solution', 1), ('straight-forward', 1), ('straightforward', 1), ('string parsing', 1), ('string-operation', 1), ('stringbuffer', 1), ('stringbuilder', 1), ('strings parsing', 1), ('swift', 1), ('two pointers', 1), ('twopointers', 1), ('ultra simple', 1), ('upvote', 1), ('vector-of-pair', 1), ('video-explanation', 1)]"
1207,Unique Number of Occurrences,https://leetcode.com/problems/unique-number-of-occurrences,"Given an array of integers arr, write a function that returns true if and only if the number of occurrences of each value in the array is unique.",['hash-table'],Easy,679,26,114158,82137,[],"[('hashmap', 37), ('python 3', 37), ('java', 34), ('c++', 33), ('javascript', 33), ('python', 32), ('cpp', 21), ('map', 17), ('set', 17), ('python3', 15), ('java-solution', 14), ('c#', 13), ('easy-understanding', 13), ('cpp solution', 10), ('hashset', 10), ('sets', 9), ('dictionary', 7), ('easy', 7), ('easytounderstand', 6), ('c++ code', 5), ('golang', 5), ('map-stl', 5), ('one-liner', 5), ('unordered map', 5), ('counter', 4), ('explained', 4), ('hash table', 4), ('ruby', 4), ('c', 3), ('easy-undestand', 3), ('go', 3), ('js', 3), ('linear time', 3), ('optimized', 3), ('readable', 3), ('solution', 3), ('swift', 3), ('c++ solution', 2), ('c++11', 2), ('commented', 2), ('comments', 2), ('dictonary', 2), ('easy-to-understand', 2), ('efficient solution', 2), ('fast', 2), ('fast-solution', 2), ('hashtable', 2), ('iterator', 2), ('list', 2), ('oneline', 2), ('php', 2), ('simple', 2), ('stl', 2), ('unorderedset', 2), ('#easy-understanding', 1), ('#python', 1), ('#python3', 1), ('100 faster cpp', 1), ('100 memory', 1), ('4 liner', 1), ('algorithms', 1), ('beats 100', 1), ('beginner friendly', 1), ('brute-force', 1), ('c plus plus', 1), ('c programming', 1), ('c# solutions', 1), ('c++ hash', 1), ('c++ set', 1), ('c++14', 1), ('collections', 1), ('comments-added', 1), ('concise-solution', 1), ('cpp easy', 1), ('csharp', 1), ('data structures', 1), ('dictionairy', 1), ('dictionaries', 1), ('easy code', 1), ('easy understanding', 1), ('easy-understand', 1), ('es2015', 1), ('es6', 1), ('explanation', 1), ('fast and simple', 1), ('faster', 1), ('frequency', 1), ('frequencycounting', 1), ('github', 1), ('go lang', 1), ('go-solution', 1), ('golang-solution', 1), ('hashmaps', 1), ('hasmap', 1), ('help needed', 1), ('intuitive', 1), ('java easy to understand', 1), ('java simple', 1), ('java solution', 1), ('javascript solution', 1), ('js javascript', 1), ('kotlin', 1), ('least-memory', 1), ('linear', 1), ('linear-space', 1), ('linear-time', 1), ('linq', 1), ('maps', 1), ('mrmagician', 1), ('object', 1), ('oneliner', 1), ('python2', 1), ('rust', 1), ('scala', 1), ('set c++', 1), ('shorter', 1), ('simple solution', 1), ('size-comparison', 1), ('sort', 1), ('sorting', 1), ('space-complexity', 1), ('stream', 1), ('swift5', 1), ('time-complexity-o', 1), ('typescript', 1), ('unordered set', 1), ('unorderedmap', 1), ('unordermap', 1)]"
1195,Fizz Buzz Multithreaded,https://leetcode.com/problems/fizz-buzz-multithreaded,"Write a program that outputs the string representation of numbers from 1 to n, however:


	If the number is divisible by 3, output ""fizz"".
	If the number is divisible by 5, output ""buzz"".
	If the number is divisible by both 3 and 5, output ""fizzbuzz"".


For example, for n = 15, we output: 1, 2, fizz, 4, buzz, fizz, 7, 8, fizz, buzz, 11, fizz, 13, 14, fizzbuzz.

Suppose you are given the following code:


class FizzBuzz {
  public FizzBuzz(int n) { ... }               // constructor
  public void fizz(printFizz) { ... }          // only output ""fizz""
  public void buzz(printBuzz) { ... }          // only output ""buzz""
  public void fizzbuzz(printFizzBuzz) { ... }  // only output ""fizzbuzz""
  public void number(printNumber) { ... }      // only output the numbers
}

Implement a multithreaded version of FizzBuzz with four threads. The same instance of FizzBuzz will be passed to four different threads:


	Thread A will call fizz() to check for divisibility of 3 and outputs fizz.
	Thread B will call buzz() to check for divisibility of 5 and outputs buzz.
	Thread C will call fizzbuzz() to check for divisibility of 3 and 5 and outputs fizzbuzz.
	Thread D will call number() which should only output the numbers.",[],Medium,248,180,26762,18976,"[""Fizz Buzz"", ""Print Zero Even Odd""]","[('c++', 10), ('c#', 7), ('java', 7), ('multithreading', 6), ('concurrency', 5), ('mutex', 5), ('semaphore', 5), ('condition variable', 4), ('cpp', 4), ('golang', 4), ('python3', 4), ('atomic', 3), ('c', 3), ('go', 3), ('lock', 3), ('python', 3), ('solution', 3), ('channels', 2), ('easy-understand', 2), ('java-solution', 2), ('python 3', 2), ('threading', 2), ('uniquelock', 2), ('100 memory', 1), ('100 speed', 1), ('c++ code', 1), ('c++ solution', 1), ('clean code', 1), ('condition-variable', 1), ('cpp solution', 1), ('elegant', 1), ('fizz-buzz-multithreaded', 1), ('fizzbuzz', 1), ('golang-solution', 1), ('java ac solution', 1), ('lock-free', 1), ('locks', 1), ('monitor', 1), ('multi-thread', 1), ('parallel computing', 1), ('queues', 1), ('race conditions', 1), ('safe', 1), ('short code', 1), ('stl', 1), ('threads', 1), ('volatile', 1), ('wait-free', 1), ('yield', 1)]"
1203,Sort Items by Groups Respecting Dependencies,https://leetcode.com/problems/sort-items-by-groups-respecting-dependencies,"There are n items each belonging to zero or one of m groups where group[i] is the group that the i-th item belongs to and it's equal to -1 if the i-th item belongs to no group. The items and the groups are zero indexed. A group can have no item belonging to it.

Return a sorted list of the items such that:


	The items that belong to the same group are next to each other in the sorted list.
	There are some relations between these items where beforeItems[i] is a list containing all the items that should come before the i-th item in the sorted array (to the left of the i-th item).


Return any solution if there is more than one solution and return an empty list if there is no solution.","['depth-first-search', 'graph', 'topological-sort']",Hard,402,72,18817,9108,[],"[('topological-sort', 4), ('topological-sorting', 4), ('python', 3), ('c#', 2), ('cycle', 2), ('dfs', 2), ('graph', 2), ('topological sort', 2), ('toposort', 2), ('bfs', 1), ('c', 1), ('c++', 1), ('c++ solution', 1), ('cpp', 1), ('dfs simple solution', 1), ('give stars and subscribe', 1), ('python 3', 1), ('python3', 1), ('queue', 1), ('readable', 1), ('thinking process', 1), ('topolotical-sort', 1), ('typological sort', 1)]"
1202,Smallest String With Swaps,https://leetcode.com/problems/smallest-string-with-swaps,"You are given a string s, and an array of pairs of indices in the string pairs where pairs[i] = [a, b] indicates 2 indices(0-indexed) of the string.

You can swap the characters at any pair of indices in the given pairs any number of times.

Return the lexicographically smallest string that s can be changed to after using the swaps.","['array', 'union-find']",Medium,860,33,47166,23175,"[""Minimize Hamming Distance After Swap Operations""]","[('union find', 13), ('c++', 9), ('python', 6), ('python 3', 6), ('dfs', 5), ('java', 5), ('unionfind', 4), ('c#', 2), ('cpp', 2), ('dsu', 2), ('easy-understanding', 2), ('beats 100', 1), ('bucket sort', 1), ('c++ code', 1), ('c++11', 1), ('clear solution', 1), ('concise', 1), ('connected components', 1), ('depth first search', 1), ('dfs simple solution', 1), ('disjoint union set', 1), ('fast and simple', 1), ('golang', 1), ('golang-solution', 1), ('graph', 1), ('greedy', 1), ('hashmap', 1), ('help me', 1), ('java ac solution', 1), ('java-solution', 1), ('javascript', 1), ('kotlin', 1), ('linq', 1), ('path-compression', 1), ('priority queue', 1), ('python3', 1), ('ruby', 1), ('rust', 1), ('tuples', 1), ('union by rank', 1), ('union-by-rank', 1), ('union-find', 1), ('zea7ot', 1)]"
1201,Ugly Number III,https://leetcode.com/problems/ugly-number-iii,"An ugly number is a positive integer that is divisible by a, b, or c.

Given four integers n, a, b, and c, return the nth ugly number.","['math', 'binary-search']",Medium,426,296,50901,13510,"[""Ugly Number II""]","[('binary-search', 8), ('binarysearch', 6), ('c++', 6), ('python', 6), ('binary search', 4), ('python 3', 3), ('cpp', 2), ('golang', 2), ('java', 2), ('java-solution', 2), ('python3', 2), ('bs', 1), ('c++11', 1), ('cpp solution', 1), ('error', 1), ('explaination', 1), ('fast and simple', 1), ('faster than 100', 1), ('gcd', 1), ('inclusion-exclusion', 1), ('least-common-multiple', 1), ('math', 1), ('picture explanation', 1), ('scipy', 1), ('ugly-number', 1), ('venn diagram', 1), ('wrong test case', 1)]"
1200,Minimum Absolute Difference,https://leetcode.com/problems/minimum-absolute-difference,"Given an array of distinct integers arr, find all pairs of elements with the minimum absolute difference of any two elements. 

Return a list of pairs in ascending order(with respect to pairs), each pair [a, b] follows


	a, b are from arr
	a < b
	b - a equals to the minimum absolute difference of any two elements in arr",['array'],Easy,602,31,93719,62905,[],"[('python', 27), ('c++', 26), ('python 3', 25), ('java', 19), ('javascript', 19), ('cpp', 16), ('sorting', 14), ('python3', 10), ('java-solution', 9), ('c#', 7), ('cpp solution', 7), ('sort', 5), ('easy-understanding', 4), ('simple', 4), ('array', 3), ('explained', 3), ('js', 3), ('python2', 3), ('simple solution', 3), ('sort-function', 3), ('sorted array', 3), ('beginnerfriendly', 2), ('c++ solution', 2), ('dictionary', 2), ('easy', 2), ('easy-to-understand', 2), ('fast', 2), ('go', 2), ('golang', 2), ('kotlin', 2), ('nlogn', 2), ('one pass', 2), ('ruby', 2), ('simple-solution', 2), ('#fast', 1), ('aj', 1), ('algorithms', 1), ('beginner', 1), ('beginner friendly', 1), ('c', 1), ('c++ code', 1), ('clean code', 1), ('clear', 1), ('cpp doubt', 1), ('cpp easy', 1), ('cpp-functional', 1), ('cppsolution', 1), ('easy sloution', 1), ('easy to understand', 1), ('easy understanding', 1), ('es2015', 1), ('explaination', 1), ('fast and simple', 1), ('fast-solution', 1), ('faster', 1), ('faster than 75', 1), ('fastest', 1), ('functional-programming', 1), ('golang-solution', 1), ('gorillaz', 1), ('hashmap', 1), ('i want to get a star', 1), ('iterative', 1), ('java easy to understand', 1), ('java-8', 1), ('js javascript', 1), ('linq', 1), ('list', 1), ('lists', 1), ('math-solution', 1), ('most votes', 1), ('mrmagician', 1), ('one-pass', 1), ('onepass', 1), ('php', 1), ('php solution', 1), ('pyhton3', 1), ('python3.8', 1), ('qsort', 1), ('simple python accepted', 1), ('single pass', 1), ('sorted', 1), ('super', 1), ('swift', 1), ('three-lines', 1), ('unit-test', 1), ('upvote', 1), ('vector', 1), ('vector 2d', 1), ('zip', 1)]"
1405,Longest Happy String,https://leetcode.com/problems/longest-happy-string,"A string is called happy if it does not have any of the strings 'aaa', 'bbb' or 'ccc' as a substring.

Given three integers a, b and c, return any string s, which satisfies following conditions:


	s is happy and longest possible.
	s contains at most a occurrences of the letter 'a', at most b occurrences of the letter 'b' and at most c occurrences of the letter 'c'.
	s will only contain 'a', 'b' and 'c' letters.


If there is no such string s return the empty string """".","['dynamic-programming', 'greedy']",Medium,540,104,34705,18334,[],"[('greedy', 16), ('c++', 10), ('python', 10), ('java', 9), ('priority queue', 9), ('greedy approach', 7), ('cpp', 5), ('priority-queue', 5), ('python3', 5), ('easy-undestand', 4), ('golang', 4), ('easy', 3), ('easytounderstand', 3), ('heap', 3), ('python 3', 3), ('c#', 2), ('concise', 2), ('easy-understanding', 2), ('explained', 2), ('golang-solution', 2), ('greedy algorithm', 2), ('heapq', 2), ('java-solution', 2), ('javascript', 2), ('pair', 2), ('priorityqueue', 2), ('string builder', 2), ('#c++', 1), ('#cpp', 1), ('#java', 1), ('#maxheap', 1), ('#pair', 1), ('#priority-queue', 1), ('100 beat', 1), ('100 memory', 1), ('100 space', 1), ('100 speed', 1), ('akku', 1), ('c++ code', 1), ('comments', 1), ('concise-solution', 1), ('cpp soltuion', 1), ('csharp', 1), ('dfs simple solution', 1), ('easiest', 1), ('for loops', 1), ('go', 1), ('intuitive', 1), ('intutive', 1), ('priority', 1), ('python2', 1), ('rajat', 1), ('simple', 1), ('straight-forward', 1), ('swift', 1), ('without priority queue', 1)]"
1179,Reformat Department Table,https://leetcode.com/problems/reformat-department-table,"Table: Department


+---------------+---------+
| Column Name   | Type    |
+---------------+---------+
| id            | int     |
| revenue       | int     |
| month         | varchar |
+---------------+---------+
(id, month) is the primary key of this table.
The table has information about the revenue of each department per month.
The month has values in [""Jan"",""Feb"",""Mar"",""Apr"",""May"",""Jun"",""Jul"",""Aug"",""Sep"",""Oct"",""Nov"",""Dec""].


 

Write an SQL query to reformat the table such that there is a department id column and a revenue column for each month.

The query result format is in the following example:


Department table:
+------+---------+-------+
| id   | revenue | month |
+------+---------+-------+
| 1    | 8000    | Jan   |
| 2    | 9000    | Jan   |
| 3    | 10000   | Feb   |
| 1    | 7000    | Feb   |
| 1    | 6000    | Mar   |
+------+---------+-------+

Result table:
+------+-------------+-------------+-------------+-----+-------------+
| id   | Jan_Revenue | Feb_Revenue | Mar_Revenue | ... | Dec_Revenue |
+------+-------------+-------------+-------------+-----+-------------+
| 1    | 8000        | 7000        | 6000        | ... | null        |
| 2    | 9000        | null        | null        | ... | null        |
| 3    | null        | 10000       | null        | ... | null        |
+------+-------------+-------------+-------------+-----+-------------+

Note that the result table has 13 columns (1 for the department id + 12 for the months).",[],Easy,266,193,52886,43424,[],"[('mysql', 10), ('sql', 10), ('easy', 3), ('group by', 3), ('oracle', 3), ('mssql', 2), ('pivot', 2), ('#mssqlserver', 1), ('case', 1), ('clean', 1), ('decode', 1), ('explanation', 1), ('group-by', 1), ('groupby', 1), ('if', 1), ('if else', 1), ('iif', 1), ('max', 1), ('ms sql server', 1), ('ms-sql', 1), ('pl-sql', 1), ('reshape', 1), ('simple', 1), ('solution', 1), ('sql case', 1), ('sql server', 1), ('sql server all', 1), ('t-sql', 1), ('tutorial', 1), ('video explanation', 1), ('video solution', 1), ('video-explanation', 1), ('youtube', 1)]"
1192,Critical Connections in a Network,https://leetcode.com/problems/critical-connections-in-a-network,"There are n servers numbered from 0 to n - 1 connected by undirected server-to-server connections forming a network where connections[i] = [ai, bi] represents a connection between servers ai and bi. Any server can reach other servers directly or indirectly through the network.

A critical connection is a connection that, if removed, will make some servers unable to reach some other server.

Return all critical connections in the network in any order.",['depth-first-search'],Hard,2429,121,221939,114084,[],"[('dfs', 39), ('tarjans algorithm', 28), ('c++', 22), ('java', 19), ('tarjan', 16), ('javascript', 14), ('bridges', 13), ('python', 13), ('python3', 13), ('cpp', 11), ('python 3', 10), ('graph', 8), ('c#', 5), ('dfs simple solution', 4), ('easy-understanding', 4), ('explained', 4), ('amazon', 3), ('clean code', 3), ('cpp solution', 3), ('depth first search', 3), ('explained solution', 3), ('golang', 3), ('bfs', 2), ('c++ code', 2), ('golang-solution', 2), ('java-solution', 2), ('rust', 2), ('swift', 2), ('tarjans', 2), ('video explanation', 2), ('#codeboy', 1), ('#hard', 1), ('#python', 1), ('#python 3', 1), ('#tarjans algorithm', 1), ('100 faster cpp', 1), ('amazon sde 1', 1), ('articulation point', 1), ('awesome samriddhi', 1), ('brute force', 1), ('brute-force', 1), ('commented', 1), ('cpp 100', 1), ('cpp-solution', 1), ('critical connections', 1), ('critical explanation', 1), ('criticalconnections', 1), ('depth-first search', 1), ('depth-first-search', 1), ('dfs recursive', 1), ('dfs solution', 1), ('dfs-in-order', 1), ('dfs-tree', 1), ('dictionary c#', 1), ('easy-solution', 1), ('exaplanation', 1), ('explanation', 1), ('explanation of logic', 1), ('explanations', 1), ('faceebook', 1), ('go', 1), ('google', 1), ('graph traversal', 1), ('graph-theory', 1), ('improvement-needed', 1), ('intuitive', 1), ('iterative solution', 1), ('iterative traversal', 1), ('java ac solution', 1), ('javascrip', 1), ('js', 1), ('kotlin', 1), ('lowlink', 1), ('memory less than 100', 1), ('Netflix', 1), ('o-n', 1), ('online assessment', 1), ('optimal', 1), ('pyhton3', 1), ('python 2', 1), ('python2', 1), ('python3.8', 1), ('pythonpython3', 1), ('question-not-clear', 1), ('ritik', 1), ('ruby', 1), ('scala', 1), ('simple solution', 1), ('simplest solution', 1), ('suggestion', 1), ('time limit exceeded', 1), ('tle', 1), ('trajan', 1), ('typescript', 1), ('undirected graph', 1), ('video', 1), ('video-explanation', 1)]"
1191,K-Concatenation Maximum Sum,https://leetcode.com/problems/k-concatenation-maximum-sum,"Given an integer array arr and an integer k, modify the array by repeating it k times.

For example, if arr = [1, 2] and k = 3 then the modified array will be [1, 2, 1, 2, 1, 2].

Return the maximum sub-array sum in the modified array. Note that the length of the sub-array can be 0 and its sum in that case is 0.

As the answer can be very large, return the answer modulo 109 + 7.",['dynamic-programming'],Medium,520,47,68269,17005,[],"[('python 3', 8), ('c++', 6), ('cpp', 5), ('java', 4), ('javascript', 4), ('python', 4), ('python3', 3), ('c#', 2), ('dynamic programming', 2), ('explaination', 2), ('kadanes algorithm', 2), ('linear time', 2), ('ruby', 2), ('simple solution', 2), ('test-case-too-weak', 2), ('100 speed', 1), ('awesome samriddhi', 1), ('c++ code', 1), ('c++ solution', 1), ('commentary', 1), ('dp', 1), ('easiest', 1), ('easy to understand', 1), ('easy-understanding', 1), ('easytounderstand', 1), ('explained', 1), ('explanation', 1), ('javascrip', 1), ('kadane algorithm', 1), ('kadanes', 1), ('kdane algo', 1), ('key observation', 1), ('maximum-subarry', 1), ('maxsubarray', 1), ('picture explanation', 1), ('prefix sum', 1), ('python2', 1), ('ritik', 1), ('simple', 1), ('simple clear c++ solution', 1)]"
1190,Reverse Substrings Between Each Pair of Parentheses,https://leetcode.com/problems/reverse-substrings-between-each-pair-of-parentheses,"You are given a string s that consists of lower case English letters and brackets. 

Reverse the strings in each pair of matching parentheses, starting from the innermost one.

Your result should not contain any brackets.",['stack'],Medium,729,25,50361,32370,[],"[('stacks', 41), ('stack', 25), ('c++', 24), ('java', 18), ('python', 17), ('cpp', 12), ('python 3', 12), ('java-solution', 10), ('javascript', 10), ('python3', 8), ('c#', 5), ('cpp solution', 4), ('easy-understanding', 4), ('stack-based', 4), ('easy-to-understand', 3), ('explained', 3), ('string', 3), ('stringbuilder', 3), ('100 speed', 2), ('accepted', 2), ('accepted solution', 2), ('c++ code', 2), ('comments-added', 2), ('easy', 2), ('fast', 2), ('iterative', 2), ('linear time', 2), ('queue', 2), ('recursion', 2), ('recursive', 2), ('regex', 2), ('rust', 2), ('#bruteforce', 1), ('#nostack', 1), ('100 faster cpp', 1), ('1ms', 1), ('advanced', 1), ('beginner friendly', 1), ('c', 1), ('c++ queue', 1), ('c++ stack', 1), ('cpp easy', 1), ('deque', 1), ('dequeue', 1), ('easy to understand', 1), ('easy-undestand', 1), ('easytounderstand', 1), ('explained solution', 1), ('fast and simple', 1), ('fast-solution', 1), ('fastest solution', 1), ('functional-programming', 1), ('github', 1), ('index', 1), ('intuitive', 1), ('java ac solution', 1), ('list-slicing', 1), ('logic explained clearly', 1), ('nostack', 1), ('optimal', 1), ('parentheses', 1), ('python3.9', 1), ('readable', 1), ('recursive approach', 1), ('recursive reverse string', 1), ('recursively', 1), ('recusion', 1), ('ruby', 1), ('simple', 1), ('simple solution', 1), ('stl', 1), ('stringbuffer', 1), ('swift', 1), ('vector', 1)]"
1189,Maximum Number of Balloons,https://leetcode.com/problems/maximum-number-of-balloons,"Given a string text, you want to use the characters of text to form as many instances of the word ""balloon"" as possible.

You can use each character in text at most once. Return the maximum number of instances that can be formed.","['hash-table', 'string']",Easy,535,48,99829,62150,[],"[('c++', 40), ('python', 31), ('python 3', 31), ('java', 28), ('javascript', 27), ('cpp', 22), ('hashmap', 15), ('map', 12), ('easy-undestand', 11), ('python3', 11), ('c#', 8), ('easy', 8), ('count', 7), ('easytounderstand', 7), ('java-solution', 7), ('easy-understanding', 6), ('c', 5), ('c++ code', 5), ('counter', 4), ('easy to understand', 4), ('dictonary', 3), ('one-liner', 3), ('simple', 3), ('swift', 3), ('unordered map', 3), ('brute force', 2), ('cpp solution', 2), ('dict', 2), ('dictionaries', 2), ('dictionary', 2), ('frequency count', 2), ('functional programming', 2), ('golang', 2), ('javascript solution', 2), ('kotlin', 2), ('linear time', 2), ('python2', 2), ('simple solution', 2), ('solution', 2), ('string', 2), ('#basic', 1), ('#python 3', 1), ('#withcomments', 1), ('1-line', 1), ('1-liner', 1), ('5 variable', 1), ('array', 1), ('arrays', 1), ('avnish', 1), ('beats 100', 1), ('beginner friendly', 1), ('best', 1), ('c++11', 1), ('clean code', 1), ('commented', 1), ('comments', 1), ('constant memory', 1), ('cpp easy', 1), ('cpp-solution', 1), ('csharp', 1), ('easier to understand', 1), ('easy to read', 1), ('easy-to-understand', 1), ('easysolution', 1), ('efficient', 1), ('exmaple', 1), ('explain', 1), ('explained', 1), ('explanation', 1), ('fast-solution', 1), ('faster', 1), ('faster than 95', 1), ('fastest', 1), ('frequency', 1), ('frequencycounting', 1), ('github', 1), ('go', 1), ('golang-solution', 1), ('intuitive', 1), ('itertools', 1), ('java-8', 1), ('javascriptes6', 1), ('js', 1), ('js javascript', 1), ('lambda function', 1), ('linear', 1), ('list', 1), ('map in c++', 1), ('map-reduce', 1), ('mapreduce', 1), ('maxnumberofballoons', 1), ('min', 1), ('mrmgaician', 1), ('o1space', 1), ('object', 1), ('one line', 1), ('one-pass', 1), ('oneline', 1), ('optimal', 1), ('readable', 1), ('reduce', 1), ('regex', 1), ('ruby', 1), ('scala', 1), ('scalar', 1), ('short', 1), ('simpe', 1), ('simple c', 1), ('simple-solution', 1), ('solution by python', 1), ('straight-forward', 1), ('straightforward', 1), ('string manipulation', 1), ('switch', 1), ('switch-case', 1), ('type script', 1), ('typescript', 1), ('unit-test', 1), ('upvote', 1), ('whileloop', 1), ('without map', 1)]"
1483,Kth Ancestor of a Tree Node,https://leetcode.com/problems/kth-ancestor-of-a-tree-node,"You are given a tree with n nodes numbered from 0 to n-1 in the form of a parent array where parent[i] is the parent of node i. The root of the tree is node 0.

Implement the function getKthAncestor(int node, int k) to return the k-th ancestor of the given node. If there is no such ancestor, return -1.

The k-th ancestor of a tree node is the k-th node in the path from that node to the root.",['dynamic-programming'],Hard,460,59,38473,12298,[],"[('binary lifting', 14), ('java', 6), ('dynamic programming', 4), ('java-solution', 4), ('javascript', 4), ('c#', 3), ('c++', 3), ('python', 3), ('python 3', 3), ('sparse-table', 3), ('binary-lifting', 2), ('dp', 2), ('fast and simple', 2), ('sparse table', 2), ('video solution', 2), ('100 space', 1), ('100 speed', 1), ('binary-search', 1), ('bit manipulation', 1), ('bitwise operation', 1), ('c++ code', 1), ('clean-efficient-code', 1), ('cpp solution', 1), ('dfs with dp', 1), ('dp on trees', 1), ('easy-to-understand', 1), ('easy-understanding', 1), ('easy-undestand', 1), ('interview', 1), ('intuition', 1), ('intuitive', 1), ('lca', 1), ('logn', 1), ('lowest common ancestor', 1), ('mo', 1), ('n-ary-tree', 1), ('python3', 1), ('short', 1), ('sparse', 1), ('tree', 1), ('tree node ancestor', 1), ('treemap', 1), ('video', 1), ('video explanation', 1), ('video-explanation', 1)]"
1550,Three Consecutive Odds,https://leetcode.com/problems/three-consecutive-odds,"Given an integer array arr, return true if there are three consecutive odd numbers in the array. Otherwise, return false.",['array'],Easy,207,36,53274,34390,[],"[('c++', 29), ('java', 29), ('python', 28), ('cpp', 23), ('python 3', 23), ('python3', 22), ('easy-understanding', 17), ('javascript', 17), ('java-solution', 14), ('easy', 11), ('linear time', 10), ('cpp solution', 6), ('c#', 5), ('simple solution', 5), ('array', 4), ('c', 4), ('easy-to-understand', 4), ('swift', 4), ('0ms', 3), ('constant space', 3), ('fast and simple', 3), ('javascript solution', 3), ('simple', 3), ('beginner friendly', 2), ('c++11', 2), ('comments-added', 2), ('constant memory', 2), ('easytounderstand', 2), ('explained', 2), ('golang', 2), ('js', 2), ('linear-time', 2), ('one-liner', 2), ('readable', 2), ('straight forward', 2), ('#java', 1), ('0 ms solution', 1), ('100 memory', 1), ('100 speed', 1), ('3-pointers', 1), ('arrays', 1), ('bit masking', 1), ('bitwise', 1), ('bitwise operation', 1), ('brute force', 1), ('c code', 1), ('c programming', 1), ('c++ set', 1), ('c++ solution', 1), ('c++easy-understanding', 1), ('clean', 1), ('counter', 1), ('easy to understand', 1), ('easyunderstanding', 1), ('efficient solution', 1), ('explanation with code', 1), ('fast solution', 1), ('for loop', 1), ('for loops', 1), ('functional', 1), ('go', 1), ('go-solution', 1), ('golang-solution', 1), ('intuitive', 1), ('intutive', 1), ('iteration', 1), ('iterative way', 1), ('js javascript', 1), ('json', 1), ('kotlin', 1), ('lambda', 1), ('linear memory', 1), ('loop', 1), ('map', 1), ('noob', 1), ('odds', 1), ('one line', 1), ('pseudocode', 1), ('python2', 1), ('readability', 1), ('ruby', 1), ('self-explanatory', 1), ('semantic', 1), ('simple-solution', 1), ('simplesolution', 1), ('solution-python', 1), ('stl', 1), ('straight-forward', 1), ('swift5', 1), ('typescript', 1), ('ultra easy', 1), ('upvote', 1)]"
1187,Make Array Strictly Increasing,https://leetcode.com/problems/make-array-strictly-increasing,"Given two integer arrays arr1 and arr2, return the minimum number of operations (possibly zero) needed to make arr1 strictly increasing.

In one operation, you can choose two indices 0 <= i < arr1.length and 0 <= j < arr2.length and do the assignment arr1[i] = arr2[j].

If there is no way to make arr1 strictly increasing, return -1.",['dynamic-programming'],Hard,392,11,18529,7857,[],"[('dp', 7), ('dynamic programming', 3), ('binary-search', 2), ('java', 2), ('easy-to-understand', 1), ('editorial', 1), ('fastest', 1), ('greedy approach', 1), ('java-solution', 1), ('javascript', 1), ('monotone stack', 1), ('python', 1), ('python3', 1), ('simple solution', 1), ('video solution', 1)]"
1185,Day of the Week,https://leetcode.com/problems/day-of-the-week,"Given a date, return the corresponding day of the week for that date.

The input is given as three integers representing the day, month and year respectively.

Return the answer as one of the following values {""Sunday"", ""Monday"", ""Tuesday"", ""Wednesday"", ""Thursday"", ""Friday"", ""Saturday""}.",['array'],Easy,161,1485,53002,32325,[],"[('javascript', 13), ('c++', 11), ('java', 10), ('python 3', 10), ('cpp', 8), ('easy-understanding', 7), ('python', 7), ('c#', 5), ('one-liner', 5), ('python3', 5), ('0 ms', 3), ('cpp solution', 3), ('0ms', 2), ('c', 2), ('c++ code', 2), ('easy to understand', 2), ('easytounderstand', 2), ('fast and simple', 2), ('fast-solution', 2), ('golang', 2), ('java-solution', 2), ('ruby', 2), ('swift', 2), ('1 line', 1), ('100 memory', 1), ('100 space', 1), ('1185', 1), ('20ms', 1), ('c++11', 1), ('cheating', 1), ('comments', 1), ('cpp easy', 1), ('cpp-solution', 1), ('date-time', 1), ('dayoftheweek', 1), ('easy to read', 1), ('easy-to-understand', 1), ('easy-undestand', 1), ('explaination', 1), ('explained', 1), ('go', 1), ('gorillaz', 1), ('hard problems', 1), ('hard-to-understand', 1), ('java 8', 1), ('java ac solution', 1), ('javascript solution', 1), ('javascriptes6', 1), ('math', 1), ('math solution', 1), ('oneline', 1), ('php', 1), ('php solution', 1), ('rust', 1), ('simple', 1), ('simple solution', 1), ('simple-solution', 1), ('step by step', 1), ('time package', 1), ('unit-test', 1)]"
1186,Maximum Subarray Sum with One Deletion,https://leetcode.com/problems/maximum-subarray-sum-with-one-deletion,"Given an array of integers, return the maximum sum for a non-empty subarray (contiguous elements) with at most one element deletion. In other words, you want to choose a subarray and optionally delete one element from it so that there is still at least one element left and the sum of the remaining elements is maximum possible.

Note that the subarray needs to be non-empty after deleting one element.",['dynamic-programming'],Medium,795,31,57429,22502,[],"[('dynamic programming', 22), ('c++', 12), ('dp', 11), ('python', 9), ('python 3', 7), ('cpp', 5), ('java', 4), ('kadane', 4), ('python3', 4), ('kadane algorithm', 3), ('100 faster runtime', 1), ('akku', 1), ('c++ code', 1), ('contiguous subarray sum', 1), ('cpp easy', 1), ('dfs simple solution', 1), ('dynamic programmin', 1), ('easy', 1), ('easy to understand', 1), ('easytounderstand', 1), ('explained solution', 1), ('golang', 1), ('hint', 1), ('kadane-algorithm', 1), ('kadanes algo', 1), ('kadanes algorithm', 1), ('memoization', 1), ('scalable', 1), ('space-optimized', 1), ('state-machine', 1), ('state-space tree', 1), ('time complexity', 1)]"
1184,Distance Between Bus Stops,https://leetcode.com/problems/distance-between-bus-stops,"A bus has n stops numbered from 0 to n - 1 that form a circle. We know the distance between all pairs of neighboring stops where distance[i] is the distance between the stops number i and (i + 1) % n.

The bus goes along both directions i.e. clockwise and counterclockwise.

Return the shortest distance between the given start and destination stops.",['array'],Easy,357,38,59655,32135,[],"[('c++', 21), ('java', 21), ('python', 21), ('python 3', 15), ('cpp', 13), ('python3', 11), ('javascript', 10), ('cpp solution', 9), ('simple solution', 9), ('java-solution', 7), ('clean code', 4), ('easy-understanding', 4), ('c#', 3), ('c++11', 3), ('simple', 3), ('2 lines', 2), ('array', 2), ('circular-array', 2), ('cpp easy', 2), ('easy', 2), ('easy-undestand', 2), ('easytounderstand', 2), ('explanation', 2), ('golang', 2), ('java ac solution', 2), ('one-liner', 2), ('ruby', 2), ('solution', 2), ('1-line', 1), ('100 fast', 1), ('beats 100', 1), ('c', 1), ('c++ code', 1), ('clean', 1), ('complexity', 1), ('cpp soltuion', 1), ('easy to understand', 1), ('easy uderstanding', 1), ('easy understanding', 1), ('explained', 1), ('explained solution', 1), ('explanation of logic', 1), ('explanations', 1), ('fast-solution', 1), ('go', 1), ('golang-solution', 1), ('i want to get a star', 1), ('intuitive', 1), ('linear', 1), ('on', 1), ('one liner', 1), ('oneline', 1), ('oneliner', 1), ('puython 3', 1), ('python2', 1), ('python3.8', 1), ('self-explanatory', 1), ('shortest-path', 1), ('simple approach', 1), ('simple-solution', 1), ('single pass', 1), ('straight-forward', 1), ('swift', 1), ('two-pointers', 1), ('unit-test', 1)]"
1425,Constrained Subsequence Sum,https://leetcode.com/problems/constrained-subsequence-sum,"Given an integer array nums and an integer k, return the maximum sum of a non-empty subsequence of that array such that for every two consecutive integers in the subsequence, nums[i] and nums[j], where i < j, the condition j - i <= k is satisfied.

A subsequence of an array is obtained by deleting some number of elements (can be zero) from the array, leaving the remaining elements in their original order.",['dynamic-programming'],Hard,502,22,27592,12405,[],"[('dynamic programming', 11), ('deque', 8), ('dp', 6), ('python', 6), ('c++', 4), ('java', 4), ('python 3', 4), ('c#', 3), ('cpp solution', 3), ('javascript', 3), ('monotone queue', 3), ('monotone deque', 2), ('simple', 2), ('sliding-window-maximum', 2), ('slidingwindow', 2), ('brute force to optimal', 1), ('c++ hash', 1), ('c++ solution', 1), ('cpp', 1), ('dequeu', 1), ('dequeue', 1), ('detailed', 1), ('dp-techqique', 1), ('dyanmic programming', 1), ('dynamic programmin', 1), ('explanation', 1), ('fenwick-tree', 1), ('golang', 1), ('heap', 1), ('incorrect solution', 1), ('javascript solution', 1), ('kadanes', 1), ('kadanes algorithm', 1), ('linear time', 1), ('maxqueue', 1), ('missing test case', 1), ('monoqueue', 1), ('monotonic deque', 1), ('monotonic queue', 1), ('monotonic stack', 1), ('multiset', 1), ('onk', 1), ('priority-queue', 1), ('python3', 1), ('segment tree', 1), ('sliding window', 1), ('sliding-window', 1), ('sortedlist', 1), ('stack', 1), ('tle', 1), ('well commented', 1)]"
1382,Balance a Binary Search Tree,https://leetcode.com/problems/balance-a-binary-search-tree,"Given a binary search tree, return a balanced binary search tree with the same node values.

A binary search tree is balanced if and only if the depth of the two subtrees of every node never differ by more than 1.

If there is more than one answer, return any of them.",['binary-search-tree'],Medium,669,32,47024,35820,[],"[('c++', 16), ('inorder', 14), ('java', 13), ('inorder traversal', 10), ('binary search tree', 7), ('bst', 7), ('cpp', 7), ('python 3', 6), ('recursion', 6), ('c#', 5), ('easy-understanding', 5), ('javascript', 5), ('python', 5), ('python3', 5), ('cpp solution', 4), ('recursive', 4), ('c++ code', 3), ('avl tree', 2), ('binary-search', 2), ('depth first search', 2), ('dfs simple solution', 2), ('divide and conquer', 2), ('inordertraversal', 2), ('sorted array', 2), ('swift', 2), ('tree', 2), ('avl', 1), ('balance', 1), ('balanced binary tree', 1), ('balanced bst', 1), ('commentary', 1), ('cpp doubt', 1), ('cpp easy', 1), ('dfs', 1), ('dfs-in-order', 1), ('divide-and-conquer', 1), ('easy sloution', 1), ('easy-undestand', 1), ('golang', 1), ('golang-solution', 1), ('in-order-traversal', 1), ('inorder iterative', 1), ('iteration', 1), ('iteratve-recursive', 1), ('java solution', 1), ('java-solution', 1), ('js', 1), ('kotlin', 1), ('kotlinvim', 1), ('linear time', 1), ('preorder', 1), ('preorder traversal', 1), ('preorder-recursion', 1), ('pyhton 3', 1), ('pythonpython3', 1), ('rebuilding', 1), ('reccursion', 1), ('recurision', 1), ('recursive approach', 1), ('recursive lines clean', 1), ('recusive', 1), ('resursive', 1), ('rotation', 1), ('ruby', 1), ('simple clear c++ solution', 1), ('tree traversal', 1), ('tree-traversal', 1), ('typescript', 1), ('vector', 1), ('you-might-like', 1)]"
1390,Four Divisors,https://leetcode.com/problems/four-divisors,"Given an integer array nums, return the sum of divisors of the integers in that array that have exactly four divisors.

If there is no such integer in the array, return 0.",['math'],Medium,103,117,38277,15163,[],"[('c++', 11), ('python 3', 7), ('python3', 6), ('c#', 5), ('java', 5), ('python', 5), ('cpp', 4), ('javascript', 4), ('math', 3), ('c++ code', 2), ('easy', 2), ('easy-understanding', 2), ('easy-undestand', 2), ('golang', 2), ('java-solution', 2), ('memoization', 2), ('#golang', 1), ('arrays', 1), ('c', 1), ('cache', 1), ('comments', 1), ('complexity', 1), ('cpp solution', 1), ('csharp', 1), ('divisors', 1), ('easy-to-understand', 1), ('factor', 1), ('factors', 1), ('fourdivisors', 1), ('functools', 1), ('generator', 1), ('help me', 1), ('java-8', 1), ('javascript solution', 1), ('js', 1), ('map', 1), ('math.sqrt', 1), ('mathworks', 1), ('prime-number', 1), ('readable', 1), ('runtime-error', 1), ('set', 1), ('sieve of eratosthenes', 1), ('simple', 1), ('sqrt-n', 1), ('square-root', 1), ('tle cases', 1), ('tle solved', 1), ('video explanation', 1), ('video solution', 1)]"
1507,Reformat Date,https://leetcode.com/problems/reformat-date,"Given a date string in the form Day Month Year, where:


	Day is in the set {""1st"", ""2nd"", ""3rd"", ""4th"", ..., ""30th"", ""31st""}.
	Month is in the set {""Jan"", ""Feb"", ""Mar"", ""Apr"", ""May"", ""Jun"", ""Jul"", ""Aug"", ""Sep"", ""Oct"", ""Nov"", ""Dec""}.
	Year is in the range [1900, 2100].


Convert the date string to the format YYYY-MM-DD, where:


	YYYY denotes the 4 digit year.
	MM denotes the 2 digit month.
	DD denotes the 2 digit day.",['string'],Easy,126,217,34802,20968,[],"[('java', 23), ('python 3', 22), ('python', 16), ('c++', 15), ('python3', 13), ('javascript', 12), ('cpp', 10), ('string', 8), ('c#', 5), ('java-solution', 5), ('regex', 5), ('golang', 4), ('hashmap', 4), ('simple', 4), ('c', 3), ('clean code', 3), ('cpp solution', 3), ('easy', 3), ('easy-to-understand', 3), ('easy-understanding', 3), ('es6', 3), ('one-liner', 3), ('100 faster', 2), ('cpp easy', 2), ('easy-undestand', 2), ('go', 2), ('go-solution', 2), ('golang-solution', 2), ('map', 2), ('ruby', 2), ('short', 2), ('simple solution', 2), ('string-operation', 2), ('swift', 2), ('1-line', 1), ('1-line solution', 1), ('1-liner', 1), ('100 space', 1), ('100 speed', 1), ('28ms', 1), ('ac solution', 1), ('beginners level', 1), ('brutal force', 1), ('brute force', 1), ('c programming', 1), ('c++ code', 1), ('calendar', 1), ('charcode', 1), ('clean solution', 1), ('cpp clear', 1), ('cpp soltuion', 1), ('date-time', 1), ('datetime', 1), ('destructuring assignment', 1), ('easy to understandd', 1), ('easy understanding', 1), ('easytounderstand', 1), ('easyunderstanding', 1), ('explained', 1), ('explanatory comments', 1), ('facebook', 1), ('fast', 1), ('fast and simple', 1), ('formatting', 1), ('good variable names', 1), ('java ac solution', 1), ('java solution', 1), ('js', 1), ('kotlin', 1), ('list-slicing', 1), ('padstart', 1), ('parse', 1), ('python solution', 1), ('re-matching', 1), ('readable', 1), ('readable code', 1), ('rust', 1), ('scala', 1), ('simple-solution', 1), ('simpler', 1), ('stdlib', 1), ('string builder', 1), ('string-to-integer', 1), ('strings manipulation', 1), ('stringtokenizer', 1), ('structured code', 1), ('substring', 1), ('substrings', 1), ('swift5', 1), ('switch-case', 1), ('template literals', 1), ('tokenize', 1), ('unordered map', 1), ('video explanation', 1)]"
1178,Number of Valid Words for Each Puzzle,https://leetcode.com/problems/number-of-valid-words-for-each-puzzle,"With respect to a given puzzle string, a word is valid if both the following conditions are satisfied:

	word contains the first letter of puzzle.
	For each letter in word, that letter is in puzzle.
	For example, if the puzzle is ""abcdefg"", then valid words are ""faced"", ""cabbage"", and ""baggage""; while invalid words are ""beefed"" (doesn't include ""a"") and ""based"" (includes ""s"" which isn't in the puzzle).

Return an array answer, where answer[i] is the number of words in the given word list words that are valid with respect to the puzzle puzzles[i].","['hash-table', 'bit-manipulation']",Hard,305,35,23113,9195,[],"[('bit manipulation', 5), ('java', 5), ('bit-manipulation', 4), ('python', 4), ('c++', 3), ('bitmasking', 2), ('hashmap', 2), ('subsets', 2), ('trie', 2), ('144ms only', 1), ('c', 1), ('c#', 1), ('c++14', 1), ('clean code', 1), ('concise', 1), ('correct solution', 1), ('correction', 1), ('cpp', 1), ('cpp solution', 1), ('error in question', 1), ('idea', 1), ('map', 1), ('mapping', 1), ('python 3', 1), ('python3', 1), ('question', 1), ('string compression', 1), ('unordermap', 1), ('with explanation', 1), ('wrong-test-cases', 1)]"
1177,Can Make Palindrome from Substring,https://leetcode.com/problems/can-make-palindrome-from-substring,"Given a string s, we make queries on substrings of s.

For each query queries[i] = [left, right, k], we may rearrange the substring s[left], ..., s[right], and then choose up to k of them to replace with any lowercase English letter. 

If the substring is possible to be a palindrome string after the operations above, the result of the query is true. Otherwise, the result is false.

Return an array answer[], where answer[i] is the result of the i-th query queries[i].

Note that: Each letter is counted individually for replacement so if for example s[left..right] = ""aaa"", and k = 2, we can only replace two of the letters.  (Also, note that the initial string s is never modified by any query.)","['array', 'string']",Medium,361,195,44224,15940,[],"[('c++', 5), ('prefix sum', 5), ('java', 4), ('python 3', 4), ('c#', 3), ('bit manipulation', 2), ('linear time', 2), ('python', 2), ('accumulate', 1), ('array', 1), ('bit-manipulation', 1), ('bitmask', 1), ('bitmasking', 1), ('bitset', 1), ('c++14', 1), ('clean code', 1), ('dictionary', 1), ('dp-techqique', 1), ('easytounderstand', 1), ('es2015', 1), ('explanation', 1), ('java-solution', 1), ('javascript', 1), ('kotlinvim', 1), ('map', 1), ('palindrome-check', 1), ('pyhton3', 1), ('readable', 1), ('single pass', 1), ('tle', 1), ('wrong answer', 1)]"
1175,Prime Arrangements,https://leetcode.com/problems/prime-arrangements,"Return the number of permutations of 1 to n so that prime numbers are at prime indices (1-indexed.)

(Recall that an integer is prime if and only if it is greater than 1, and cannot be written as a product of two positive integers both smaller than it.)

Since the answer may be large, return the answer modulo 10^9 + 7.",['math'],Easy,163,282,30326,15696,[],"[('python', 15), ('python 3', 12), ('sieve of eratosthenes', 10), ('c++', 8), ('cpp', 5), ('javascript', 5), ('100 speed', 4), ('python3', 4), ('easytounderstand', 3), ('golang', 3), ('java', 3), ('sieve-of-eratosthenes', 3), ('swift', 3), ('100', 2), ('100 space', 2), ('c#', 2), ('cpp easy', 2), ('factorial', 2), ('go', 2), ('java-solution', 2), ('python3.8', 2), ('0ms', 1), ('100 memory', 1), ('accumulate', 1), ('algorithms', 1), ('biginteger', 1), ('binary search', 1), ('c++ code', 1), ('c++11', 1), ('comments', 1), ('easy-understanding', 1), ('easy-undestand', 1), ('explained', 1), ('explanation', 1), ('explanation simple', 1), ('fast', 1), ('fast and simple', 1), ('fraction', 1), ('functional programming', 1), ('golang-solution', 1), ('iteration', 1), ('java ac solution', 1), ('java11', 1), ('js', 1), ('js javascript', 1), ('kotlin', 1), ('math-solution', 1), ('mathematics', 1), ('one-liner', 1), ('oneline', 1), ('optimized', 1), ('perfect score', 1), ('permutations', 1), ('prime numbers', 1), ('readable', 1), ('ruby', 1), ('segmentedsieve', 1), ('simple solution', 1), ('solution', 1)]"
1363,Largest Multiple of Three,https://leetcode.com/problems/largest-multiple-of-three,"Given an integer array of digits, return the largest multiple of three that can be formed by concatenating some of the given digits in any order.

Since the answer may not fit in an integer data type, return the answer as a string.

If there is no answer return an empty string.","['math', 'dynamic-programming']",Hard,250,39,30091,10298,[],"[('python', 8), ('python3', 7), ('java', 4), ('javascript', 4), ('python 3', 4), ('bucket sort', 3), ('algorithms', 2), ('c#', 2), ('c++', 2), ('counting sort', 2), ('dp', 2), ('dynamic programming', 2), ('golang', 2), ('heapq', 2), ('java-solution', 2), ('100 faster', 1), ('100 memory', 1), ('100 runtime', 1), ('100 space', 1), ('100 speed', 1), ('arraylist', 1), ('c', 1), ('c# solutions', 1), ('concise', 1), ('counting-sort', 1), ('cplusplus', 1), ('cpp', 1), ('easy-to-understand', 1), ('easy-understanding', 1), ('easytounderstand', 1), ('go', 1), ('google interview', 1), ('greedy algorithm', 1), ('greedy approach', 1), ('heaps algorithm', 1), ('java ac solution', 1), ('linkedlist', 1), ('map-stl', 1), ('math', 1), ('math solution', 1), ('modulo', 1), ('nlogn time', 1), ('o n', 1), ('queue', 1), ('queue-approach', 1), ('queues', 1), ('rust', 1), ('short code', 1), ('simple', 1), ('simple solution', 1), ('sorting', 1), ('swift', 1)]"
1362,Closest Divisors,https://leetcode.com/problems/closest-divisors,"Given an integer num, find the closest two integers in absolute difference whose product equals num + 1 or num + 2.

Return the two integers in any order.",['math'],Medium,111,68,21385,12384,[],"[('c++', 6), ('java', 5), ('python', 5), ('python3', 5), ('c#', 4), ('cpp', 4), ('java-solution', 3), ('javascript', 3), ('math', 3), ('100 memory', 2), ('c++14', 2), ('explaination', 2), ('golang', 2), ('greedy', 2), ('js', 2), ('python 3', 2), ('100 faster', 1), ('100 space', 1), ('algorithms', 1), ('c', 1), ('c++ solution', 1), ('clean code', 1), ('club10000', 1), ('cpp easy', 1), ('cpp solution', 1), ('divisors', 1), ('easy-understanding', 1), ('easy-undestand', 1), ('explanations', 1), ('factor decomposition', 1), ('javascrip', 1), ('maths', 1), ('optimised', 1), ('prime factorization', 1), ('product', 1), ('short code', 1), ('space', 1), ('speed', 1), ('square root', 1), ('time', 1), ('very easy', 1)]"
1361,Validate Binary Tree Nodes,https://leetcode.com/problems/validate-binary-tree-nodes,"You have n binary tree nodes numbered from 0 to n - 1 where node i has two children leftChild[i] and rightChild[i], return true if and only if all the given nodes form exactly one valid binary tree.

If node i has no left child then leftChild[i] will equal -1, similarly for the right child.

Note that the nodes have no values and that we only use the node numbers in this problem.",['graph'],Medium,363,134,49323,21278,[],"[('c++', 17), ('java', 17), ('python', 12), ('dfs', 10), ('bfs', 8), ('python3', 8), ('python 3', 7), ('c#', 6), ('cpp', 6), ('union find', 6), ('dsu', 5), ('linear time', 5), ('easy-understanding', 4), ('indegree', 4), ('correct', 3), ('graph', 3), ('javascript', 3), ('set', 3), ('simple solution', 3), ('swift', 3), ('comments-added', 2), ('easy', 2), ('golang', 2), ('js', 2), ('linear memory', 2), ('recursion', 2), ('simple', 2), ('100 memory', 1), ('binary tree', 1), ('binary-tree', 1), ('breadth first traversal', 1), ('c++ code', 1), ('c++ easy to understand', 1), ('clear', 1), ('correct solution', 1), ('cplusplus', 1), ('cpp solution', 1), ('cpp-easy', 1), ('dfs simple solution', 1), ('disjointset', 1), ('easy-to-understand', 1), ('easy-undestand', 1), ('explained', 1), ('explanations', 1), ('fast and simple', 1), ('fastest', 1), ('find-root', 1), ('for-loop', 1), ('hashmap', 1), ('hashset', 1), ('invalid case', 1), ('iterator', 1), ('java union-find', 1), ('java-solution', 1), ('javascript solution', 1), ('kotlin', 1), ('kotlinvim', 1), ('level-order-traversal', 1), ('linear', 1), ('linq', 1), ('map-stl', 1), ('missing test case', 1), ('outdegree', 1), ('preorder traversal', 1), ('queue', 1), ('readable', 1), ('sets', 1), ('straightforward', 1), ('tree', 1), ('tricky', 1), ('union-find', 1), ('working-solution', 1)]"
1360,Number of Days Between Two Dates,https://leetcode.com/problems/number-of-days-between-two-dates,"Write a program to count the number of days between two dates.

The two dates are given as strings, their format is YYYY-MM-DD as shown in the examples.",[],Easy,105,537,41793,19450,[],"[('javascript', 9), ('python 3', 8), ('c++', 7), ('cpp', 5), ('java', 4), ('java-solution', 3), ('python', 3), ('swift', 3), ('c#', 2), ('explaination', 2), ('golang', 2), ('hard coded', 2), ('1-liner', 1), ('api', 1), ('bad-experience', 1), ('cpp solution', 1), ('custom class', 1), ('datetime', 1), ('detailed explanation', 1), ('easy', 1), ('easy to understand', 1), ('easy-to-understand', 1), ('go', 1), ('intuitive', 1), ('javascriptes6', 1), ('no time lib', 1), ('one liner', 1), ('one-liner', 1), ('php', 1), ('php solution', 1), ('python3', 1), ('question', 1), ('ruby', 1), ('simple solution', 1), ('testcases', 1)]"
1170,Compare Strings by Frequency of the Smallest Character,https://leetcode.com/problems/compare-strings-by-frequency-of-the-smallest-character,"Let the function f(s) be the frequency of the lexicographically smallest character in a non-empty string s. For example, if s = ""dcce"" then f(s) = 2 because the lexicographically smallest character is 'c', which has a frequency of 2.

You are given an array of strings words and another array of query strings queries. For each query queries[i], count the number of words in words such that f(queries[i]) < f(W) for each W in words.

Return an integer array answer, where each answer[i] is the answer to the ith query.","['array', 'string', 'binary-search']",Medium,354,800,93327,56408,[],"[('java', 20), ('c++', 17), ('javascript', 15), ('python', 13), ('python 3', 13), ('python3', 12), ('binary-search', 7), ('cpp', 6), ('easy-understanding', 6), ('java-solution', 6), ('binary search', 5), ('binarysearch', 5), ('c#', 5), ('simple solution', 5), ('easy-undestand', 4), ('easytounderstand', 4), ('c++11', 3), ('clean code', 3), ('golang', 3), ('brute force', 2), ('c', 2), ('cpp solution', 2), ('easy understanding', 2), ('easy-to-understand', 2), ('fast-solution', 2), ('kotlin', 2), ('map', 2), ('#charactercount', 1), ('#hashmap', 1), ('#stringarray', 1), ('100 beat', 1), ('100 memory', 1), ('2 solutions', 1), ('accepted', 1), ('accepted solution', 1), ('array', 1), ('beats 100', 1), ('beginner', 1), ('beginnerfriendly', 1), ('beginners', 1), ('bisect', 1), ('bucket sort', 1), ('charmap', 1), ('clear', 1), ('commentary', 1), ('commented', 1), ('cpp easy', 1), ('dictionary', 1), ('dictonary', 1), ('easy-to-read', 1), ('es6', 1), ('explain', 1), ('explained', 1), ('explanation', 1), ('explanations', 1), ('filter', 1), ('full detailed explanation', 1), ('functional', 1), ('golang-solution', 1), ('google interview', 1), ('guide', 1), ('hash-function', 1), ('hashmap', 1), ('help-wanted', 1), ('i want to get a star', 1), ('java 100', 1), ('java ac solution', 1), ('javascriptes6', 1), ('js', 1), ('lambda', 1), ('list comprehension', 1), ('lodash', 1), ('malj', 1), ('map in c++', 1), ('no-built-ins', 1), ('numsmallerbyfrequency', 1), ('pyhton', 1), ('python2', 1), ('pythonic', 1), ('qsort', 1), ('quick', 1), ('reduce', 1), ('ruby', 1), ('solution-sharing-cpp', 1), ('sorted array', 1), ('sorting', 1), ('swift', 1), ('tutorial', 1), ('unit-test', 1), ('with explanation', 1), ('word-frequency', 1)]"
1169,Invalid Transactions,https://leetcode.com/problems/invalid-transactions,"A transaction is possibly invalid if:


	the amount exceeds $1000, or;
	if it occurs within (and including) 60 minutes of another transaction with the same name in a different city.


You are given an array of strings transaction where transactions[i] consists of comma-separated values representing the name, time (in minutes), amount, and city of the transaction.

Return a list of transactions that are possibly invalid. You may return the answer in any order.","['array', 'string']",Medium,159,959,87339,26938,[],"[('python', 10), ('hashmap', 8), ('python3', 6), ('brute force', 5), ('c++', 5), ('java', 5), ('javascript', 5), ('python 3', 4), ('c#', 2), ('c++ code', 2), ('cpp', 2), ('cpp solution', 2), ('map', 2), ('simple python solution', 2), ('#buckets', 1), ('#linq', 1), ('binary search', 1), ('brute-force', 1), ('c++11', 1), ('c++14', 1), ('clean code', 1), ('concise', 1), ('deque', 1), ('dictonary', 1), ('easy-undestand', 1), ('faster then 95', 1), ('golang', 1), ('hash map', 1), ('hash table', 1), ('hasmap', 1), ('help me', 1), ('invalid transactions', 1), ('javascrip', 1), ('js', 1), ('less space than 100.00', 1), ('nlogn', 1), ('object-oriented-design', 1), ('php', 1), ('pythonic', 1), ('readable', 1), ('runtime-error', 1), ('simple solution', 1), ('slide window', 1), ('sliding-window', 1), ('slidingwindow', 1), ('string', 1), ('video', 1), ('with comments', 1)]"
1172,Dinner Plate Stacks,https://leetcode.com/problems/dinner-plate-stacks,"You have an infinite number of stacks arranged in a row and numbered (left to right) from 0, each of the stacks has the same maximum capacity.

Implement the DinnerPlates class:


	DinnerPlates(int capacity) Initializes the object with the maximum capacity of the stacks.
	void push(int val) Pushes the given positive integer val into the leftmost stack with size less than capacity.
	int pop() Returns the value at the top of the rightmost non-empty stack and removes it from that stack, and returns -1 if all stacks are empty.
	int popAtStack(int index) Returns the value at the top of the stack with the given index and removes it from that stack, and returns -1 if the stack with that given index is empty.",['design'],Hard,239,31,29323,10996,[],"[('java', 4), ('python 3', 3), ('stacks', 3), ('c++', 2), ('heapq', 2), ('javascript', 2), ('list', 2), ('#array', 1), ('#python', 1), ('2 pointer', 1), ('array greedy', 1), ('binary search tree', 1), ('binary-heap', 1), ('c++ solution', 1), ('cpp doubt', 1), ('double array', 1), ('easy understanding', 1), ('golang-solution', 1), ('heap', 1), ('heapify', 1), ('heaps', 1), ('priority queue', 1), ('priorityqueue', 1), ('python', 1), ('python3', 1), ('readable', 1), ('rust', 1), ('simple', 1), ('stack from array', 1), ('tle', 1), ('vector', 1), ('vector of vector', 1), ('video', 1), ('with debugs', 1)]"
1171,Remove Zero Sum Consecutive Nodes from Linked List,https://leetcode.com/problems/remove-zero-sum-consecutive-nodes-from-linked-list,"Given the head of a linked list, we repeatedly delete consecutive sequences of nodes that sum to 0 until there are no such sequences.

After doing so, return the head of the final linked list.  You may return any such answer.

 
(Note that in the examples below, all sequences are serializations of ListNode objects.)",['linked-list'],Medium,854,53,59746,24814,"[""Delete N Nodes After M Nodes of a Linked List""]","[('hashmap', 11), ('python', 10), ('c++', 8), ('javascript', 8), ('python 3', 7), ('java', 6), ('cpp', 5), ('c#', 4), ('easy-understanding', 4), ('c++ code', 3), ('hash table', 3), ('java-solution', 3), ('python3', 3), ('golang', 2), ('iterative', 2), ('accepted', 1), ('array', 1), ('backtracking', 1), ('brute force', 1), ('c', 1), ('c# solution', 1), ('c++ hash', 1), ('consecutive sum subarray', 1), ('cpp solution', 1), ('cumulative sum', 1), ('dummy-node', 1), ('dummyhead', 1), ('easy-undestand', 1), ('easytounderstand', 1), ('efficient', 1), ('elegant solution', 1), ('explanation', 1), ('explanation with code', 1), ('facebook', 1), ('fast and simple', 1), ('hash', 1), ('hash map', 1), ('linear space', 1), ('linear time', 1), ('linked-list', 1), ('linkedhashset', 1), ('linkedlist', 1), ('linkedlists', 1), ('php', 1), ('readable', 1), ('recursion', 1), ('recursively', 1), ('simple', 1), ('slidingwindow', 1), ('stack', 1), ('stacks', 1), ('swift', 1), ('two pass', 1), ('unordered map', 1), ('whileloop', 1)]"
1155,Number of Dice Rolls With Target Sum,https://leetcode.com/problems/number-of-dice-rolls-with-target-sum,"You have d dice and each die has f faces numbered 1, 2, ..., f.

Return the number of possible ways (out of fd total ways) modulo 109 + 7 to roll the dice so the sum of the face-up numbers equals target.",['dynamic-programming'],Medium,1254,61,147255,70048,"[""Equal Sum Arrays With Minimum Number of Operations""]","[('dynamic programming', 38), ('dp', 19), ('c++', 18), ('java', 14), ('python', 13), ('memoization', 11), ('python 3', 10), ('cpp', 8), ('explained', 6), ('java-solution', 6), ('dfs', 5), ('javascript', 4), ('python3', 4), ('recursion', 4), ('top down dp', 4), ('clean code', 3), ('dynamic-programming', 3), ('easy-understanding', 3), ('ruby', 3), ('2d-array', 2), ('bottom up', 2), ('comments added', 2), ('cpp solution', 2), ('fastest', 2), ('python2', 2), ('recursive dp', 2), ('space-efficient', 2), ('top down', 2), ('beat all', 1), ('best-solution-ever', 1), ('bfs', 1), ('bottoms-up', 1), ('c#', 1), ('c++ code', 1), ('cache', 1), ('combinatorics', 1), ('concise-solution', 1), ('dfs recursive', 1), ('divide and conquer', 1), ('dp pattern', 1), ('dynaminc programming', 1), ('easy', 1), ('easy-solution', 1), ('fast', 1), ('fast-solution', 1), ('golang', 1), ('hashmap', 1), ('linear space', 1), ('map', 1), ('math', 1), ('memorization', 1), ('memoziation', 1), ('moderate explanation', 1), ('optimized', 1), ('pascals', 1), ('pascals triangle', 1), ('prefix array', 1), ('recurision', 1), ('recursive', 1), ('straight forward', 1), ('swift', 1), ('tabulation', 1), ('top down approach', 1), ('top-down', 1), ('top-down dp', 1), ('topdown', 1), ('very fast', 1)]"
1157,Online Majority Element In Subarray,https://leetcode.com/problems/online-majority-element-in-subarray,"Implementing the class MajorityChecker, which has the following API:


	MajorityChecker(int[] arr) constructs an instance of MajorityChecker with the given array arr;
	int query(int left, int right, int threshold) has arguments such that:
	
		0 <= left <= right < arr.length representing a subarray of arr;
		2 * threshold > right - left + 1, ie. the threshold is always a strict majority of the length of the subarray
	
	


Each query(...) returns the element in arr[left], arr[left+1], ..., arr[right] that occurs at least threshold times, or -1 if no such element exists.","['array', 'binary-search', 'segment-tree']",Hard,311,34,23861,9778,[],"[('binary search', 3), ('java', 3), ('python', 3), ('#java', 1), ('annoying', 1), ('binary-search', 1), ('binarysearch', 1), ('bisect', 1), ('bit manipulation', 1), ('bug-timeout', 1), ('c++', 1), ('defaultdict', 1), ('dict', 1), ('hashing', 1), ('hashtable', 1), ('javascript', 1), ('leetcode-please', 1), ('linear', 1), ('majority-element', 1), ('memoization', 1), ('probability control', 1), ('python 3', 1), ('python3', 1), ('random pick', 1), ('segment tree', 1), ('set-consistent-tle', 1), ('sort', 1), ('sqrt-n', 1), ('theory', 1)]"
1156,Swap For Longest Repeated Character Substring,https://leetcode.com/problems/swap-for-longest-repeated-character-substring,"Given a string text, we are allowed to swap two of the characters in the string. Find the length of the longest substring with repeated characters.",['string'],Medium,479,44,35397,16649,[],"[('c++', 5), ('python 3', 5), ('java', 4), ('javascript', 4), ('python', 4), ('c#', 2), ('comments', 2), ('easy-understanding', 2), ('golang', 2), ('java-solution', 2), ('sliding window', 2), ('c++ code', 1), ('c++11', 1), ('clear explanation', 1), ('commented code', 1), ('comments-added', 1), ('cpp', 1), ('cpp doubt', 1), ('detailed', 1), ('dp', 1), ('easy to understand', 1), ('easy-to-understand', 1), ('easytounderstand', 1), ('hashmap', 1), ('intuitive', 1), ('javascript solution', 1), ('linear time', 1), ('merged', 1), ('one pass solution', 1), ('ptyhon', 1), ('python3', 1), ('recursion', 1), ('recursive solution', 1), ('sliding-window', 1), ('slidingwindow', 1), ('string', 1)]"
1154,Day of the Year,https://leetcode.com/problems/day-of-the-year,"Given a string date representing a Gregorian calendar date formatted as YYYY-MM-DD, return the day number of the year.",['math'],Easy,156,222,47851,23519,[],"[('python 3', 17), ('java', 15), ('python', 14), ('javascript', 11), ('c++', 8), ('cpp', 8), ('python3', 8), ('java-solution', 7), ('easy-understanding', 6), ('simple solution', 5), ('golang', 4), ('c#', 2), ('easy-undestand', 2), ('easytounderstand', 2), ('leap year', 2), ('python2', 2), ('ruby', 2), ('simple', 2), ('swift', 2), ('#c++', 1), ('#easy-understand', 1), ('#gregoriancalendar', 1), ('#solution', 1), ('0ms', 1), ('1 line', 1), ('1-line', 1), ('1-line solution', 1), ('100 memory', 1), ('100 speed', 1), ('5 lines', 1), ('best-solution', 1), ('c', 1), ('c++ code', 1), ('clean code', 1), ('clean-code', 1), ('commented', 1), ('constant space', 1), ('cpp easy', 1), ('cpp solution', 1), ('cpp-solution', 1), ('day-of-the year', 1), ('dictionary', 1), ('easy', 1), ('easy to understand', 1), ('easy-implementation', 1), ('easy-to-understand', 1), ('es6', 1), ('fast', 1), ('fast-solution', 1), ('gregoriancalendar', 1), ('hashmap', 1), ('ios', 1), ('java ac solution', 1), ('java-8', 1), ('js', 1), ('js date', 1), ('kotlin', 1), ('leapyear', 1), ('modular', 1), ('optimized', 1), ('php', 1), ('php solution', 1), ('rust', 1), ('simple-solution', 1), ('slicing', 1), ('stl', 1), ('string-to-integer', 1), ('swift5', 1), ('switch-case', 1), ('two-lines', 1), ('typescript', 1)]"
1632,Rank Transform of a Matrix,https://leetcode.com/problems/rank-transform-of-a-matrix,"Given an m x n matrix, return a new matrix answer where answer[row][col] is the rank of matrix[row][col].

The rank is an integer that represents how large an element is compared to other elements. It is calculated using the following rules:


	The rank is an integer starting from 1.
	If two elements p and q are in the same row or column, then:
	
		If p < q then rank(p) < rank(q)
		If p == q then rank(p) == rank(q)
		If p > q then rank(p) > rank(q)
	
	
	The rank should be as small as possible.


It is guaranteed that answer is unique under the given rules.","['greedy', 'union-find']",Hard,198,6,11347,3678,"[""Rank Transform of an Array""]","[('java', 3), ('unionfind', 2), ('100 speed', 1), ('bfs', 1), ('c#', 1), ('fast', 1), ('python3', 1), ('treemap', 1), ('union-find', 1)]"
1331,Rank Transform of an Array,https://leetcode.com/problems/rank-transform-of-an-array,"Given an array of integers arr, replace each element with its rank.

The rank represents how large the element is. The rank has the following rules:


	Rank is an integer starting from 1.
	The larger the element, the larger the rank. If two elements are equal, their rank must be the same.
	Rank should be as small as possible.",['array'],Easy,442,36,55668,31888,"[""Rank Transform of a Matrix""]","[('c++', 20), ('javascript', 18), ('python 3', 13), ('sort', 12), ('c#', 11), ('cpp', 11), ('python', 11), ('hashmap', 10), ('java', 10), ('sorting', 7), ('python3', 6), ('java-solution', 5), ('easy-understanding', 4), ('map', 4), ('set', 4), ('swift', 4), ('dictionary', 3), ('js', 3), ('unordered map', 3), ('c', 2), ('dict', 2), ('easy', 2), ('easy-undestand', 2), ('enumerate', 2), ('heap', 2), ('javascript solution', 2), ('sets', 2), ('sorted array', 2), ('100 speed', 1), ('90+faster', 1), ('arrays.sort', 1), ('beating-100-submission', 1), ('binary-search', 1), ('binarysearch', 1), ('c# easy', 1), ('c# solutions', 1), ('c++ solution', 1), ('clean', 1), ('cpp easy', 1), ('cpp solution', 1), ('cpp-solution', 1), ('dictionary c#', 1), ('dictionary comprehension', 1), ('easy-to-understand', 1), ('easytounderstand', 1), ('explained', 1), ('explanation of logic', 1), ('fast', 1), ('fast-solution', 1), ('golang', 1), ('hashmap and sorting', 1), ('heapq', 1), ('javascrip', 1), ('kotlin', 1), ('list', 1), ('min-heap', 1), ('pair', 1), ('please', 1), ('priority-queue', 1), ('rank', 1), ('ranktransformarray', 1), ('reduce', 1), ('ruby', 1), ('rust', 1), ('set map', 1), ('simple-solution', 1), ('solution', 1), ('sorted', 1), ('stacks', 1), ('swift5', 1), ('two-lines', 1), ('unit-test', 1), ('unordermap', 1), ('vector', 1)]"
1330,Reverse Subarray To Maximize Array Value,https://leetcode.com/problems/reverse-subarray-to-maximize-array-value,"You are given an integer array nums. The value of this array is defined as the sum of |nums[i]-nums[i+1]| for all 0 <= i < nums.length-1.

You are allowed to select any subarray of the given array and reverse it. You can perform this operation only once.

Find maximum possible value of the final array.","['array', 'math']",Hard,231,27,8067,2969,[],"[('c#', 1), ('c++', 1), ('cpp', 1), ('golang', 1), ('java', 1), ('proof', 1)]"
1302,Deepest Leaves Sum,https://leetcode.com/problems/deepest-leaves-sum,"Given the root of a binary tree, return the sum of values of its deepest leaves.","['tree', 'depth-first-search']",Medium,1331,58,125126,106941,[],"[('bfs', 82), ('c++', 75), ('java', 63), ('dfs', 62), ('cpp', 40), ('python', 36), ('recursion', 29), ('python 3', 24), ('javascript', 23), ('java-solution', 19), ('c#', 17), ('easy-understanding', 16), ('dfs simple solution', 15), ('level-order-traversal', 15), ('python3', 15), ('level order traversal', 13), ('queue', 11), ('clean code', 9), ('easy', 8), ('tree-traversal', 8), ('cpp solution', 7), ('easy-to-understand', 7), ('golang', 7), ('depth first search', 6), ('recursive', 6), ('tree', 6), ('bfs simple solution', 5), ('dfs-bfs', 5), ('explained', 5), ('hashmap', 5), ('preorder traversal', 5), ('simple', 5), ('trees', 5), ('beginner friendly', 4), ('binary tree', 4), ('binary-tree', 4), ('breadth first search', 4), ('c++ code', 4), ('comments-added', 4), ('javascript recursive', 4), ('ruby', 4), ('simple solution', 4), ('easy to understand', 3), ('easy-undestand', 3), ('fast and simple', 3), ('go', 3), ('iterative', 3), ('javascript solution', 3), ('python2', 3), ('recursively', 3), ('rust', 3), ('#dfs', 2), ('bfs java', 2), ('breadth first traversal', 2), ('c', 2), ('cpp-solution', 2), ('explanation of logic', 2), ('go-solution', 2), ('heap', 2), ('iterative-bfs', 2), ('java ac solution', 2), ('js', 2), ('kotlin', 2), ('linear time', 2), ('one-pass', 2), ('pre-order', 2), ('preorder', 2), ('pyhton3', 2), ('rajat', 2), ('readable', 2), ('recursive easy', 2), ('recursive solution', 2), ('solution', 2), ('summation', 2), ('swift', 2), ('#depth-first-search', 1), ('#easiest', 1), ('#python', 1), ('#tree', 1), ('0ms', 1), ('100 space', 1), ('100 speed', 1), ('accepted', 1), ('an7one', 1), ('arrays', 1), ('awesome samriddhi', 1), ('bfs vs dfs', 1), ('binary-search-tree', 1), ('breadth first', 1), ('breadth-first-search', 1), ('bst defintions', 1), ('c code', 1), ('c++ ac', 1), ('c++ recursive solution', 1), ('c++ solution', 1), ('clear-understanding', 1), ('comments', 1), ('concise-solution', 1), ('csharp', 1), ('data structures', 1), ('debug', 1), ('deepestleavessum', 1), ('depth first', 1), ('depth first traversal', 1), ('depth-first search', 1), ('deque', 1), ('dfs recursive', 1), ('dfs solution', 1), ('dfs traversal', 1), ('dfs with dp', 1), ('dfs-in-order', 1), ('dfs-non-recursive', 1), ('dfs-recursive', 1), ('dictionary', 1), ('dictonary', 1), ('easiest', 1), ('easiest solution', 1), ('easy code', 1), ('easy to understandd', 1), ('easy understand', 1), ('easysolution', 1), ('editor', 1), ('expalantion', 1), ('explain', 1), ('explaination', 1), ('explanatory comments', 1), ('faster', 1), ('faster than 100', 1), ('functional-programming', 1), ('golang solution', 1), ('golang-solution', 1), ('good variable names', 1), ('graph', 1), ('heapq', 1), ('height', 1), ('height of tree', 1), ('help needed', 1), ('hints', 1), ('intuition based solution', 1), ('intutive', 1), ('issue', 1), ('iterative bfs', 1), ('iterative way', 1), ('iteratively', 1), ('itereative', 1), ('java simple', 1), ('java solution', 1), ('javascrip', 1), ('js javascript', 1), ('level', 1), ('level order', 1), ('level-order', 1), ('linear', 1), ('linkedlist', 1), ('list-comprehension', 1), ('map', 1), ('maxdepth', 1), ('morris-preorder-traversal', 1), ('morris-traversal', 1), ('mrmagician', 1), ('no recursion', 1), ('o-n', 1), ('object-array', 1), ('one pass', 1), ('one pass solution', 1), ('optimal', 1), ('post-order', 1), ('postorder-recursive', 1), ('postorder-traversal', 1), ('preorder-recursive', 1), ('priority queue', 1), ('python bivector', 1), ('queue and linkedlist', 1), ('queue-approach', 1), ('queues', 1), ('recurision', 1), ('recursive-descent', 1), ('recurssion', 1), ('rescursion', 1), ('ritik', 1), ('scala', 1), ('self explanatory', 1), ('single traversal', 1), ('space', 1), ('straight forward', 1), ('struct', 1), ('structured code', 1), ('time-complexity', 1), ('tree traversal', 1), ('ultra easy', 1), ('upvote', 1), ('video-explanation', 1)]"
1329,Sort the Matrix Diagonally,https://leetcode.com/problems/sort-the-matrix-diagonally,"A matrix diagonal is a diagonal line of cells starting from some cell in either the topmost row or leftmost column and going in the bottom-right direction until reaching the matrix's end. For example, the matrix diagonal starting from mat[2][0], where mat is a 6 x 3 matrix, includes cells mat[2][0], mat[3][1], and mat[4][2].

Given an m x n matrix mat of integers, sort each matrix diagonal in ascending order and return the resulting matrix.","['array', 'sort']",Medium,949,152,70712,57715,[],"[('java', 35), ('c++', 33), ('python', 28), ('python 3', 22), ('javascript', 19), ('cpp', 16), ('sorting', 14), ('c#', 13), ('python3', 13), ('sort', 12), ('easy-understanding', 8), ('hashmap', 8), ('java-solution', 8), ('explained', 7), ('c++ code', 5), ('golang', 5), ('priority queue', 5), ('quick sort', 4), ('simple solution', 4), ('array', 3), ('c', 3), ('counting sort', 3), ('deque', 3), ('diagonalsort', 3), ('easy-to-understand', 3), ('inplace', 3), ('javascript solution', 3), ('map', 3), ('matrix', 3), ('recursion', 3), ('cpp solution', 2), ('defaultdict', 2), ('dictionary', 2), ('easytounderstand', 2), ('hashing', 2), ('heapq', 2), ('kotlin', 2), ('maps', 2), ('minheap', 2), ('priorityqueue', 2), ('readable', 2), ('sort-function', 2), ('100 faster runtime', 1), ('100 memory', 1), ('100 space', 1), ('100 speed', 1), ('100 time', 1), ('2d array', 1), ('2d vector', 1), ('2d-matrix', 1), ('algorithms', 1), ('array of vectors', 1), ('arrays.sort', 1), ('backtrack', 1), ('beginner friendly', 1), ('brute force', 1), ('bubble-sort', 1), ('c++ solution', 1), ('c++11', 1), ('clean', 1), ('clean code', 1), ('commentary', 1), ('commentedcppcode', 1), ('comments', 1), ('counting-sort', 1), ('cpp easy', 1), ('cpp-solution', 1), ('dict', 1), ('dictonary', 1), ('different approach', 1), ('easiest', 1), ('easy', 1), ('easy-undestand', 1), ('es6', 1), ('explaination', 1), ('explained solution', 1), ('explanatory comments', 1), ('fast', 1), ('fast and simple', 1), ('fastest', 1), ('go', 1), ('go-solution', 1), ('golang-solution', 1), ('good variable names', 1), ('hash', 1), ('hashset', 1), ('heap', 1), ('heapsort', 1), ('helper functions', 1), ('hindi', 1), ('in-place', 1), ('insertion sort', 1), ('intuitional', 1), ('iterator', 1), ('izaac', 1), ('java ac solution', 1), ('java solution', 1), ('java-8', 1), ('javascript arrays', 1), ('linear memory', 1), ('list', 1), ('matrix sorting', 1), ('medium', 1), ('mergesort', 1), ('naive', 1), ('on2', 1), ('optimisation', 1), ('optimised', 1), ('performance', 1), ('priority-queue', 1), ('quicksort', 1), ('radix-sort', 1), ('ruby', 1), ('rust', 1), ('simple and elegant', 1), ('solution-python', 1), ('sorted', 1), ('sorted-list', 1), ('structured', 1), ('structured code', 1), ('swift', 1), ('swift5', 1), ('ting', 1), ('vectors', 1), ('video', 1), ('video explaination', 1), ('video interview', 1), ('video-explanation', 1), ('visualization', 1)]"
1328,Break a Palindrome,https://leetcode.com/problems/break-a-palindrome,"Given a palindromic string of lowercase English letters palindrome, replace exactly one character with any lowercase English letter so that the resulting string is not a palindrome and that it is the lexicographically smallest one possible.

Return the resulting string. If there is no way to replace a character to make it not a palindrome, return an empty string.

A string a is lexicographically smaller than a string b (of the same length) if in the first position where a and b differ, a has a character strictly smaller than the corresponding character in b. For example, ""abcc"" is lexicographically smaller than ""abcd"" because the first position they differ is at the fourth character, and 'c' is smaller than 'd'.",['string'],Medium,324,312,67431,32462,[],"[('c++', 14), ('java', 12), ('python', 11), ('cpp', 8), ('python 3', 8), ('greedy', 7), ('python3', 7), ('easy-understanding', 5), ('javascript', 5), ('palindrome', 5), ('c++ code', 4), ('java-solution', 4), ('c#', 3), ('string', 3), ('100 speed', 2), ('commented', 2), ('cpp soltuion', 2), ('cpp solution', 2), ('golang', 2), ('java solution', 2), ('two-pointers', 2), ('0ms', 1), ('0ms runtime', 1), ('100 space', 1), ('beats 100', 1), ('breakapalindrome', 1), ('brute forces', 1), ('c++ on', 1), ('c++ solution', 1), ('char', 1), ('clearly explained', 1), ('easy code', 1), ('easy understanding', 1), ('easy-to-understand', 1), ('edgecases', 1), ('efficient approach', 1), ('explained', 1), ('explanation of logic', 1), ('explanations', 1), ('faster than 100', 1), ('fasterthan100', 1), ('javasccript', 1), ('javascrip', 1), ('javascript solution', 1), ('js', 1), ('kotlin', 1), ('lexicographical order', 1), ('linear', 1), ('linear seach', 1), ('readable', 1), ('ruby', 1), ('rust', 1), ('scala', 1), ('simple solution', 1), ('straightforward', 1), ('string-operation', 1), ('stringbuilder', 1), ('strings', 1), ('strings manipulation', 1), ('swift', 1), ('three-lines', 1)]"
1147,Longest Chunked Palindrome Decomposition,https://leetcode.com/problems/longest-chunked-palindrome-decomposition,"You are given a string text. You should split it to k substrings (subtext1, subtext2, ..., subtextk) such that:


	subtexti is a non-empty string.
	The concatenation of all the substrings is equal to text (i.e., subtext1 + subtext2 + ... + subtextk == text).
	subtexti == subtextk - i + 1 for all valid values of i (i.e., 1 <= i <= k).


Return the largest possible value of k.","['dynamic-programming', 'rolling-hash']",Hard,265,16,20982,12512,[],"[('c++', 7), ('greedy', 5), ('two-pointers', 5), ('python3', 4), ('c#', 3), ('java', 3), ('javascript', 3), ('recursive', 3), ('c++ code', 2), ('cpp', 2), ('golang', 2), ('python', 2), ('python 3', 2), ('recursion palindrome', 2), ('rolling hash', 2), ('simple solution', 2), ('stack', 2), ('two pointers', 2), ('100 beat', 1), ('c++ recursion', 1), ('c++11', 1), ('constant space', 1), ('cpp easy', 1), ('cpp solution', 1), ('dp', 1), ('dynamic programming', 1), ('easy to understand', 1), ('easy-understanding', 1), ('greedy approach', 1), ('java-solution', 1), ('linear time', 1), ('palindrome', 1), ('queue', 1), ('rabin karp algorithm', 1), ('rabin-karp', 1), ('rabin-karp-algorithm', 1), ('readable', 1), ('recurision', 1), ('recursive easy', 1), ('recursively', 1), ('recusion', 1), ('regex', 1), ('regular-expression', 1), ('rolling-hash', 1), ('simpe', 1), ('string', 1), ('string hashing', 1), ('trie', 1)]"
1143,Longest Common Subsequence,https://leetcode.com/problems/longest-common-subsequence,"Given two strings text1 and text2, return the length of their longest common subsequence. If there is no common subsequence, return 0.

A subsequence of a string is a new string generated from the original string with some characters (can be none) deleted without changing the relative order of the remaining characters.


	For example, ""ace"" is a subsequence of ""abcde"".


A common subsequence of two strings is a subsequence that is common to both strings.",['dynamic-programming'],Medium,2910,38,336642,197583,"[""Longest Palindromic Subsequence"", ""Delete Operation for Two Strings"", ""Shortest Common Supersequence ""]","[('dynamic programming', 112), ('dp', 66), ('c++', 41), ('java', 37), ('cpp', 30), ('python', 27), ('recursion', 26), ('memoization', 22), ('javascript', 18), ('python 3', 18), ('java-solution', 13), ('python3', 11), ('dynamic-programming', 10), ('easy-understanding', 9), ('bottom up', 8), ('easy-undestand', 6), ('tabulation', 6), ('top down dp', 6), ('bottom-up-algorithm', 5), ('c++ code', 5), ('cpp solution', 5), ('lcs', 5), ('recursive', 5), ('an7one', 4), ('c#', 4), ('golang', 4), ('bottoms-up', 3), ('dfs-memo', 3), ('dp-2d', 3), ('dp-techqique', 3), ('easy', 3), ('easy-to-understand', 3), ('rust', 3), ('top-down dp', 3), ('awesome samriddhi', 2), ('brute force', 2), ('c++ easy to understand', 2), ('dfs', 2), ('dyanmic programming', 2), ('easy sloution', 2), ('easysolution', 2), ('easytounderstand', 2), ('fastest', 2), ('itereative', 2), ('longest common sequence', 2), ('memory efficient', 2), ('memoziation', 2), ('progression', 2), ('recurision', 2), ('recursion formula', 2), ('ritik', 2), ('string', 2), ('subsequence', 2), ('swift', 2), ('tabular', 2), ('top down', 2), ('top-down', 2), ('topdown', 2), ('#1143', 1), ('100', 1), ('2d', 1), ('2d-dp', 1), ('best explaination', 1), ('bottom up approach', 1), ('bottom up dp', 1), ('bottom-up', 1), ('bottomup', 1), ('bruteforce', 1), ('c', 1), ('c++ solution', 1), ('c++11', 1), ('complexity-analysis', 1), ('concise', 1), ('cpp easy', 1), ('csharp', 1), ('depth first search', 1), ('dp made easy', 1), ('dp python', 1), ('dp-programming', 1), ('drewbie', 1), ('dynammic programming', 1), ('easiest', 1), ('easy solution', 1), ('easy-to-understad', 1), ('edit-distance', 1), ('efficient solution', 1), ('explained', 1), ('explanation', 1), ('explanation with logic', 1), ('fast', 1), ('fast-solution', 1), ('faster than 99.80', 1), ('formula based', 1), ('full explanation', 1), ('golang-solution', 1), ('hashmap', 1), ('hints', 1), ('intuitive', 1), ('iterative', 1), ('izaac', 1), ('java 100', 1), ('javaaid', 1), ('javascrip', 1), ('javascript solution', 1), ('kotlin', 1), ('kotlinvim', 1), ('longest-common-subsq', 1), ('matrix', 1), ('memo', 1), ('memorization', 1), ('memory optimization', 1), ('nlogn', 1), ('non-recursive', 1), ('one pass solution', 1), ('optimal', 1), ('optimized', 1), ('pair', 1), ('php', 1), ('pictorial', 1), ('python2', 1), ('rajat', 1), ('reccursion', 1), ('recursive cte', 1), ('recursive dp', 1), ('recursive easy', 1), ('recusion', 1), ('ruby', 1), ('somal', 1), ('space-optimized', 1), ('typescript', 1), ('typescript solution', 1), ('veryeasy', 1), ('video explaination', 1), ('video explanation', 1)]"
1146,Snapshot Array,https://leetcode.com/problems/snapshot-array,"Implement a SnapshotArray that supports the following interface:


	SnapshotArray(int length) initializes an array-like data structure with the given length.  Initially, each element equals 0.
	void set(index, val) sets the element at the given index to be equal to val.
	int snap() takes a snapshot of the array and returns the snap_id: the total number of times we called snap() minus 1.
	int get(index, snap_id) returns the value at the given index, at the time we took the snapshot with the given snap_id",['array'],Medium,852,161,147794,54442,[],"[('python 3', 12), ('hashmap', 10), ('python', 9), ('binary-search', 7), ('java', 7), ('binary search', 5), ('c++', 5), ('javascript', 5), ('dictionary', 4), ('binarysearch', 3), ('c#', 3), ('java-solution', 3), ('python3', 3), ('cpp', 2), ('easy-understanding', 2), ('easy-undestand', 2), ('es6', 2), ('explained', 2), ('map', 2), ('python2', 2), ('python3.8', 2), ('simple', 2), ('treemap', 2), ('vector', 2), ('best-solution', 1), ('best-submission', 1), ('binary-serach', 1), ('bisect', 1), ('c', 1), ('c++ code', 1), ('clone', 1), ('commented', 1), ('dict', 1), ('dictonary', 1), ('explained solution', 1), ('explanation of logic', 1), ('explanations', 1), ('fast', 1), ('fast and simple', 1), ('filesystem', 1), ('go', 1), ('golang', 1), ('hashing', 1), ('java ac solution', 1), ('java solution', 1), ('js', 1), ('list', 1), ('memory-limited-exceeded', 1), ('object', 1), ('optimal', 1), ('ordereddict', 1), ('pythonic', 1), ('pythonpython3', 1), ('sparse', 1), ('swift', 1), ('unordermap', 1)]"
1145,Binary Tree Coloring Game,https://leetcode.com/problems/binary-tree-coloring-game,"Two players play a turn based game on a binary tree.  We are given the root of this binary tree, and the number of nodes n in the tree.  n is odd, and each node has a distinct value from 1 to n.

Initially, the first player names a value x with 1 <= x <= n, and the second player names a value y with 1 <= y <= n and y != x.  The first player colors the node with value x red, and the second player colors the node with value y blue.

Then, the players take turns starting with the first player.  In each turn, that player chooses a node of their color (red if player 1, blue if player 2) and colors an uncolored neighbor of the chosen node (either the left child, right child, or parent of the chosen node.)

If (and only if) a player cannot choose such a node in this way, they must pass their turn.  If both players pass their turn, the game ends, and the winner is the player that colored more nodes.

You are the second player.  If it is possible to choose such a y to ensure you win the game, return true.  If it is not possible, return false.","['tree', 'depth-first-search']",Medium,646,139,51439,26348,[],"[('c++', 12), ('dfs', 8), ('java', 6), ('javascript', 4), ('python', 4), ('python 3', 4), ('binary-tree', 3), ('c#', 3), ('cpp', 3), ('explanation', 3), ('python3', 3), ('recursion', 3), ('bfs', 2), ('c++14', 2), ('depth-first-search', 2), ('easy', 2), ('easy-understanding', 2), ('c++17', 1), ('clean', 1), ('depth first search', 1), ('depth-first', 1), ('dfs simple solution', 1), ('easytounderstand', 1), ('explaination', 1), ('explanations', 1), ('functional-programming', 1), ('golang', 1), ('java-solution', 1), ('precise', 1), ('preorder traversal', 1), ('preorder-recursion', 1), ('recursive solution', 1), ('strategy', 1), ('tree', 1), ('tree-to-graph', 1), ('typescript', 1), ('with comments', 1)]"
1144,Decrease Elements To Make Array Zigzag,https://leetcode.com/problems/decrease-elements-to-make-array-zigzag,"Given an array nums of integers, a move consists of choosing any element and decreasing it by 1.

An array A is a zigzag array if either:


	Every even-indexed element is greater than adjacent elements, ie. A[0] > A[1] < A[2] > A[3] < A[4] > ...
	OR, every odd-indexed element is greater than adjacent elements, ie. A[0] < A[1] > A[2] < A[3] > A[4] < ...


Return the minimum number of moves to transform the given array nums into a zigzag array.",['array'],Medium,180,122,24463,11332,[],"[('python', 7), ('c++', 6), ('python 3', 6), ('greedy', 3), ('python3', 3), ('cpp', 2), ('java', 2), ('100 faster', 1), ('100 memory', 1), ('100 speed', 1), ('c++ code', 1), ('comments-added', 1), ('constant space', 1), ('cpp solution', 1), ('dfs', 1), ('easy-undestand', 1), ('explanation', 1), ('explanations', 1), ('golang', 1), ('golang-solution', 1), ('one pass', 1), ('picture', 1), ('picture explanation', 1), ('pictures', 1), ('python2', 1), ('simple solution', 1), ('swift', 1), ('two passes', 1)]"
1316,Distinct Echo Substrings,https://leetcode.com/problems/distinct-echo-substrings,Return the number of distinct non-empty substrings of text that can be written as the concatenation of some string with itself (i.e. it can be written as a + a where a is some string).,"['string', 'rolling-hash']",Hard,110,139,17672,8798,[],"[('c++', 5), ('python', 5), ('dp', 3), ('java-solution', 3), ('rolling hash', 3), ('brute force', 2), ('hashing', 2), ('java', 2), ('java solution using dfs', 2), ('python 3', 2), ('python3', 2), ('algorithms', 1), ('beginner friendly', 1), ('brute-force', 1), ('c#', 1), ('c# sortedset', 1), ('cpp', 1), ('cpp question', 1), ('dynamic programming', 1), ('easy', 1), ('explained', 1), ('fast', 1), ('give stars and subscribe', 1), ('hash', 1), ('hashmap', 1), ('hashset', 1), ('javascript', 1), ('javascript solution', 1), ('rabin-karp', 1), ('rolling-hash', 1), ('simple solution', 1), ('string hashing', 1), ('trie', 1), ('typescript solution', 1)]"
1315,Sum of Nodes with Even-Valued Grandparent,https://leetcode.com/problems/sum-of-nodes-with-even-valued-grandparent,"Given a binary tree, return the sum of values of nodes with even-valued grandparent.  (A grandparent of a node is the parent of its parent, if it exists.)

If there are no nodes with an even-valued grandparent, return 0.","['tree', 'depth-first-search']",Medium,954,34,78157,65878,[],"[('dfs', 57), ('c++', 44), ('recursion', 41), ('java', 37), ('python', 31), ('python 3', 28), ('cpp', 22), ('bfs', 21), ('javascript', 16), ('dfs simple solution', 13), ('python3', 12), ('java-solution', 10), ('c#', 8), ('easy-understanding', 8), ('queue', 8), ('easy-to-understand', 7), ('golang', 7), ('easy', 6), ('iterative', 6), ('recursive', 6), ('binary-tree', 5), ('c++ code', 5), ('preorder traversal', 5), ('simple solution', 5), ('cpp solution', 4), ('recursive solution', 4), ('ruby', 4), ('tree-traversal', 4), ('easy-undestand', 3), ('java ac solution', 3), ('javascript solution', 3), ('level order traversal', 3), ('recursive easy', 3), ('recusion', 3), ('simple', 3), ('stack', 3), ('swift', 3), ('bfs simple solution', 2), ('breadth-first-search', 2), ('bst', 2), ('cpp easy', 2), ('csharp', 2), ('deep-first-search', 2), ('depth first search', 2), ('dfs recursive', 2), ('dfs solution', 2), ('dfs-iterative', 2), ('dfs-tree', 2), ('easy to understand', 2), ('easytounderstand', 2), ('ecmascript', 2), ('golang-solution', 2), ('grandparent', 2), ('hashmap', 2), ('intuitive', 2), ('iterative-bfs', 2), ('level-order-traversal', 2), ('linear time', 2), ('one-liner', 2), ('readable', 2), ('recurision', 2), ('recursively', 2), ('tail-call', 2), ('tree', 2), ('trees', 2), ('#cpp', 1), ('#dfs', 1), ('0ms', 1), ('1 ms', 1), ('100 memory', 1), ('2 solutions', 1), ('3 different solutions', 1), ('99 faster', 1), ('amazon intern', 1), ('amazon interview', 1), ('backtracking', 1), ('breadth first search', 1), ('breadth first traversal', 1), ('c', 1), ('c++ recursion', 1), ('c++ recursive solution', 1), ('comments-added', 1), ('concise', 1), ('depth-first search', 1), ('depth-first-search', 1), ('deque', 1), ('dfs traversal', 1), ('dfs-in-order', 1), ('dfs-recursive', 1), ('dfs-topdown', 1), ('dictionary c#', 1), ('divide and conquer', 1), ('easy to code', 1), ('easy to read', 1), ('easy to underatnd', 1), ('easy-implementation', 1), ('easy-peasy', 1), ('easy-solition', 1), ('error', 1), ('explaination', 1), ('explained', 1), ('fast and simple', 1), ('faster', 1), ('faster-than-100', 1), ('go', 1), ('go-solution', 1), ('hashset', 1), ('iteration', 1), ('java11', 1), ('javascript recursive', 1), ('js', 1), ('kotlin', 1), ('kth-parent', 1), ('laconic', 1), ('less space than 100', 1), ('mrmagician', 1), ('mrmgaician', 1), ('non-recursion', 1), ('optimized', 1), ('parent', 1), ('php', 1), ('pointers', 1), ('pre-order', 1), ('preorder', 1), ('python deque', 1), ('python2', 1), ('pythonpython3', 1), ('queue-approach', 1), ('rajat', 1), ('recursion palindrome', 1), ('short code', 1), ('simple c++ solution', 1), ('solution', 1), ('typescript', 1), ('ultra easy', 1), ('video explaination', 1), ('video-explanation', 1)]"
1314,Matrix Block Sum,https://leetcode.com/problems/matrix-block-sum,"Given a m x n matrix mat and an integer k, return a matrix answer where each answer[i][j] is the sum of all elements mat[r][c] for:


	i - k <= r <= i + k,
	j - k <= c <= j + k, and
	(r, c) is a valid position in the matrix.",['dynamic-programming'],Medium,931,166,48207,35571,[],"[('dynamic programming', 21), ('c++', 16), ('prefix sum', 15), ('python', 14), ('dp', 8), ('javascript', 8), ('python3', 7), ('cpp', 6), ('c#', 5), ('java-solution', 5), ('python 3', 5), ('java', 4), ('matrix', 4), ('cpp solution', 2), ('dp-techqique', 2), ('easy', 2), ('easy-understanding', 2), ('explained', 2), ('golang', 2), ('java ac solution', 2), ('kotlin', 2), ('prefix-sum', 2), ('2d-array', 1), ('accumulate', 1), ('algorithms', 1), ('bfs', 1), ('c', 1), ('c++ code', 1), ('constant memory', 1), ('dynamic-programming', 1), ('easytounderstand', 1), ('fast and simple', 1), ('faster than 100.00', 1), ('generator', 1), ('go', 1), ('go-solution', 1), ('golang-solution', 1), ('hassomecomments', 1), ('help needed', 1), ('integral-image', 1), ('javascript solution', 1), ('js', 1), ('memory less than 100', 1), ('numpy', 1), ('preprocessing', 1), ('range-sum', 1), ('ruby', 1), ('sliding-window', 1), ('slidingwindow', 1), ('typescript', 1)]"
1313,Decompress Run-Length Encoded List,https://leetcode.com/problems/decompress-run-length-encoded-list,"We are given a list nums of integers representing a list compressed with run-length encoding.

Consider each adjacent pair of elements [freq, val] = [nums[2*i], nums[2*i+1]] (with i >= 0).  For each such pair, there are freq elements with value val concatenated in a sublist. Concatenate all the sublists from left to right to generate the decompressed list.

Return the decompressed list.",['array'],Easy,461,817,152979,130688,"[""String Compression""]","[('java', 48), ('python 3', 45), ('python', 42), ('javascript', 40), ('c++', 30), ('python3', 24), ('java-solution', 23), ('cpp', 21), ('easy', 16), ('c#', 15), ('golang', 11), ('easy-understanding', 10), ('c', 9), ('cpp solution', 9), ('array', 8), ('one-liner', 7), ('go', 6), ('javascript solution', 5), ('ruby', 5), ('simple', 5), ('vector', 5), ('arraylist', 4), ('easy-to-understand', 4), ('explained', 4), ('explanation', 4), ('list', 4), ('one line', 4), ('simple solution', 4), ('c++ code', 3), ('cpp easy', 3), ('csharp', 3), ('golang-solution', 3), ('list comprehension', 3), ('recursive', 3), ('swift', 3), ('100 memory', 2), ('arrays.fill', 2), ('beginner friendly', 2), ('c code', 2), ('c++11', 2), ('commentary', 2), ('easytounderstand', 2), ('fast', 2), ('generator', 2), ('insert', 2), ('ios', 2), ('javascrip', 2), ('js javascript', 2), ('kotlin', 2), ('linear time', 2), ('loops', 2), ('python3.8', 2), ('rust', 2), ('solution', 2), ('stl', 2), ('typescript', 2), ('vector-operation', 2), ('.py', 1), ('#python #easy', 1), ('#python 3', 1), ('0ms', 1), ('1 ms', 1), ('1-line', 1), ('100 fastest', 1), ('1313', 1), ('2 solutions', 1), ('3ms-runtime', 1), ('4ms', 1), ('97.33 percent faster', 1), ('append', 1), ('array functions', 1), ('array of vectors', 1), ('arrays', 1), ('asahiocean', 1), ('avnish', 1), ('backwards', 1), ('basic', 1), ('begineer', 1), ('beginner', 1), ('big o', 1), ('brute force', 1), ('brute force to optimal', 1), ('bugs', 1), ('clean code', 1), ('clean-solution', 1), ('cpp doubt', 1), ('decoding', 1), ('deconstruction', 1), ('dictionary', 1), ('easiest solution', 1), ('easy understand', 1), ('easy-solution', 1), ('easy-to-follow', 1), ('easy-to-implement', 1), ('easy-to-read', 1), ('easy-understsand', 1), ('easy-undestand', 1), ('easytoundersatand', 1), ('efficent approach', 1), ('even odd', 1), ('exaplanation', 1), ('explained solution', 1), ('extend', 1), ('fast and simple', 1), ('faster', 1), ('for-loop', 1), ('functional', 1), ('functional programming', 1), ('generator-expression', 1), ('github', 1), ('go lang', 1), ('go-solution', 1), ('golag', 1), ('hardcore', 1), ('hashmap', 1), ('invalid approaches', 1), ('iterate', 1), ('itertools', 1), ('java ac solution', 1), ('java easy to understand', 1), ('java-8', 1), ('java11', 1), ('javascript recursive', 1), ('js', 1), ('koltin', 1), ('list-comprehension', 1), ('list-concatination', 1), ('loop', 1), ('loop method', 1), ('low-level', 1), ('memory less than 100', 1), ('mrmagician', 1), ('naive', 1), ('naive-solution', 1), ('nested list comprehension', 1), ('not that good', 1), ('optimized', 1), ('php', 1), ('problem-statement', 1), ('python bug', 1), ('python-solution', 1), ('python2', 1), ('readable', 1), ('recursion', 1), ('recursive approach', 1), ('reduce', 1), ('run-length-encoding', 1), ('scala', 1), ('short', 1), ('simple c', 1), ('simple-solution', 1), ('solution-python', 1), ('splat-operator', 1), ('spread operator', 1), ('straight-forward', 1), ('swift5', 1), ('testcase error', 1), ('two solutions', 1), ('two-pointer', 1), ('unit-test', 1), ('vectors', 1), ('while', 1), ('whileloop', 1)]"
1140,Stone Game II,https://leetcode.com/problems/stone-game-ii,"Alice and Bob continue their games with piles of stones.  There are a number of piles arranged in a row, and each pile has a positive integer number of stones piles[i].  The objective of the game is to end with the most stones. 

Alice and Bob take turns, with Alice starting first.  Initially, M = 1.

On each player's turn, that player can take all the stones in the first X remaining piles, where 1 <= X <= 2M.  Then, we set M = max(M, X).

The game continues until all the stones have been taken.

Assuming Alice and Bob play optimally, return the maximum number of stones Alice can get.",['dynamic-programming'],Medium,779,182,42063,27187,"[""Stone Game V"", ""Stone Game VI"", ""Stone Game VII""]","[('dynamic programming', 16), ('c++', 13), ('dp', 12), ('python3', 5), ('recursion', 5), ('memoization', 4), ('top down dp', 4), ('easy-understanding', 3), ('java', 3), ('python', 3), ('bottom-up', 2), ('c#', 2), ('cpp', 2), ('explained', 2), ('golang', 2), ('rust', 2), ('bottom up dp', 1), ('bottoms-up', 1), ('c++14', 1), ('clear', 1), ('cplusplus', 1), ('cpp solution', 1), ('dfs', 1), ('dfs with memo', 1), ('easy', 1), ('easy-undestand', 1), ('explanation of logic', 1), ('explanatory video', 1), ('fastest', 1), ('help needed', 1), ('java-solution', 1), ('javascript', 1), ('memoisation', 1), ('memorization', 1), ('memory optimized', 1), ('minimax', 1), ('prefix sum', 1), ('python 3', 1), ('pythonpython3', 1), ('recursive', 1), ('simple clear c++ solution', 1), ('swift', 1), ('tle', 1), ('top-down', 1), ('top-down dp', 1)]"
1139,Largest 1-Bordered Square,https://leetcode.com/problems/largest-1-bordered-square,"Given a 2D grid of 0s and 1s, return the number of elements in the largest square subgrid that has all 1s on its border, or 0 if such a subgrid doesn't exist in the grid.",['dynamic-programming'],Medium,310,61,27807,13528,[],"[('dp', 7), ('dynamic programming', 6), ('java', 6), ('c++', 5), ('python', 4), ('easy-understand', 3), ('blazing fast', 2), ('brute-force', 2), ('c#', 2), ('javascript', 2), ('python3', 2), ('balanced-bst', 1), ('brute force', 1), ('csharp', 1), ('easy', 1), ('easy-understanding', 1), ('give stars and subscribe', 1), ('grid', 1), ('invariant', 1), ('iterative', 1), ('java-solution', 1), ('matrix', 1), ('one pass', 1), ('prefix sum', 1), ('preprocessing', 1), ('pruning', 1), ('rust', 1), ('simple', 1), ('simple clear c++ solution', 1), ('simple solution', 1), ('solution', 1), ('video', 1), ('youtube', 1)]"
1138,Alphabet Board Path,https://leetcode.com/problems/alphabet-board-path,"On an alphabet board, we start at position (0, 0), corresponding to character board[0][0].

Here, board = [""abcde"", ""fghij"", ""klmno"", ""pqrst"", ""uvwxy"", ""z""], as shown in the diagram below.



We may make the following moves:


	'U' moves our position up one row, if the position exists on the board;
	'D' moves our position down one row, if the position exists on the board;
	'L' moves our position left one column, if the position exists on the board;
	'R' moves our position right one column, if the position exists on the board;
	'!' adds the character board[r][c] at our current position (r, c) to the answer.


(Here, the only positions that exist on the board are positions with letters on them.)

Return a sequence of moves that makes our answer equal to target in the minimum number of moves.  You may return any path that does so.","['hash-table', 'string']",Medium,443,109,54672,28121,[],"[('c++', 18), ('python', 16), ('cpp', 15), ('python 3', 14), ('bfs', 10), ('java', 10), ('javascript', 7), ('easytounderstand', 6), ('hashmap', 6), ('easy-understanding', 5), ('java-solution', 5), ('python3', 5), ('c#', 4), ('0ms', 2), ('100 speed', 2), ('easy', 2), ('hash table', 2), ('python2', 2), ('swift', 2), ('#hashmap', 1), ('2d', 1), ('arrays', 1), ('binarysearch', 1), ('c', 1), ('c++14', 1), ('c++code', 1), ('class definition', 1), ('clean code', 1), ('clear explanation', 1), ('comments-added', 1), ('complex number', 1), ('constant space', 1), ('dirty', 1), ('dummy-friendly', 1), ('easiest solution', 1), ('easy to understand', 1), ('easy understanding', 1), ('explain', 1), ('explained', 1), ('explanations', 1), ('go', 1), ('golang', 1), ('greedy approach', 1), ('hacks', 1), ('hash', 1), ('indexes', 1), ('manhattan distance', 1), ('math', 1), ('optimal', 1), ('python3.8', 1), ('pythonpython3', 1), ('rust', 1), ('simple', 1), ('solution', 1), ('swiftsolution', 1), ('understand', 1)]"
1137,N-th Tribonacci Number,https://leetcode.com/problems/n-th-tribonacci-number,"The Tribonacci sequence Tn is defined as follows: 

T0 = 0, T1 = 1, T2 = 1, and Tn+3 = Tn + Tn+1 + Tn+2 for n >= 0.

Given n, return the value of Tn.",['recursion'],Easy,537,55,134019,74720,"[""Climbing Stairs"", ""Fibonacci Number""]","[('c++', 43), ('dynamic programming', 43), ('java', 41), ('recursion', 35), ('python 3', 29), ('cpp', 23), ('memoization', 21), ('javascript', 20), ('python', 19), ('dp', 15), ('java-solution', 12), ('easy-understanding', 11), ('iterative', 9), ('c#', 8), ('cpp solution', 6), ('python3', 6), ('simple', 5), ('0ms', 4), ('dynamic-programming', 4), ('easy', 4), ('easytounderstand', 4), ('fibonacci', 4), ('golang', 4), ('hashmap', 4), ('simple solution', 4), ('tribonacci number', 4), ('js', 3), ('recurision', 3), ('tribonacci', 3), ('0ms-solution', 2), ('100 speed', 2), ('algorithms', 2), ('bottom-up', 2), ('c', 2), ('c++ code', 2), ('clean clode', 2), ('constant space', 2), ('easy-undestand', 2), ('efficient solution', 2), ('explained', 2), ('go', 2), ('java simple', 2), ('queue', 2), ('recursive', 2), ('ruby', 2), ('rust', 2), ('tribonnaci', 2), ('#python3', 1), ('100 faster', 1), ('100 space', 1), ('4 liner', 1), ('4 lines', 1), ('array', 1), ('backtracking', 1), ('bacon', 1), ('best space complexity', 1), ('best-solution-ever', 1), ('bfs', 1), ('bottom-up-algorithm', 1), ('c code', 1), ('c++11', 1), ('c++14', 1), ('cache', 1), ('circular', 1), ('clean', 1), ('clean code', 1), ('compile time', 1), ('concise', 1), ('constructor', 1), ('cpp doubt', 1), ('cpp easy', 1), ('cpp-solution', 1), ('csharp', 1), ('dfs', 1), ('dictionary', 1), ('dp-techqique', 1), ('easiest', 1), ('easy to follow', 1), ('easy to understand', 1), ('easy-to-understand', 1), ('efficient', 1), ('explain', 1), ('explanation', 1), ('fast', 1), ('fast and simple', 1), ('faster than 100', 1), ('fastest', 1), ('fibonaccinumber', 1), ('fibonaccisequence', 1), ('for loop', 1), ('general solution', 1), ('go-solution', 1), ('golang-solution', 1), ('hash table', 1), ('iteration', 1), ('iteratively', 1), ('iteratve-recursive', 1), ('java solution', 1), ('javascriptes6', 1), ('js javascript', 1), ('kotlin', 1), ('lettuce', 1), ('linear-time', 1), ('logarithmic-time', 1), ('lru cache', 1), ('map-stl', 1), ('matrices', 1), ('matrix exponentiation', 1), ('memorization', 1), ('memory less than 100', 1), ('modulo', 1), ('non-recursive', 1), ('numpy', 1), ('optimal', 1), ('optimised', 1), ('php', 1), ('push', 1), ('python2', 1), ('pythonpython3', 1), ('recurrance', 1), ('recursive dp', 1), ('recursive easy', 1), ('reduce', 1), ('self-explanatory', 1), ('simple-solution', 1), ('slice', 1), ('sliding-window', 1), ('stl', 1), ('straightforward', 1), ('swift', 1), ('swiftsolution', 1), ('tailrec', 1), ('template', 1), ('tomato', 1), ('tribonaccinumber', 1), ('vectors', 1), ('very-easy', 1)]"
1301,Number of Paths with Max Score,https://leetcode.com/problems/number-of-paths-with-max-score,"You are given a square board of characters. You can move on the board starting at the bottom right square marked with the character 'S'.

You need to reach the top left square marked with the character 'E'. The rest of the squares are labeled either with a numeric character 1, 2, ..., 9 or with an obstacle 'X'. In one move you can go up, left or up-left (diagonally) only if there is no obstacle there.

Return a list of two integers: the first integer is the maximum sum of numeric characters you can collect, and the second is the number of such paths that you can take to get that maximum sum, taken modulo 10^9 + 7.

In case there is no path, return [0, 0].",['dynamic-programming'],Hard,202,12,18227,6968,[],"[('dynamic programming', 13), ('c++', 8), ('dp', 7), ('cpp', 6), ('java', 4), ('python', 4), ('c#', 3), ('memoization', 3), ('python3', 3), ('#cpp', 1), ('#dp', 1), ('1301', 1), ('2d', 1), ('c++ code', 1), ('c++ easy to understand', 1), ('dfs', 1), ('dfs with memo', 1), ('dynamic-programming', 1), ('error', 1), ('help', 1), ('iterative', 1), ('optimal substructure', 1), ('python 3', 1), ('recursion', 1), ('topdown', 1)]"
1300,Sum of Mutated Array Closest to Target,https://leetcode.com/problems/sum-of-mutated-array-closest-to-target,"Given an integer array arr and a target value target, return the integer value such that when we change all the integers larger than value in the given array to be equal to value, the sum of the array gets as close as possible (in absolute difference) to target.

In case of a tie, return the minimum such integer.

Notice that the answer is not neccesarilly a number from arr.","['array', 'binary-search']",Medium,471,70,40335,17355,[],"[('binary search', 8), ('python', 8), ('binary-search', 7), ('c++', 6), ('python 3', 4), ('cpp', 3), ('easy-understanding', 3), ('java', 3), ('javascript', 3), ('python3', 3), ('c++ code', 2), ('math', 2), ('simple', 2), ('sorting', 2), ('begineer friendly', 1), ('best memory', 1), ('best space complexity', 1), ('binary search logic', 1), ('binarysearch', 1), ('bruteforce', 1), ('c#', 1), ('c++11', 1), ('clean code', 1), ('clever', 1), ('creative', 1), ('csharp', 1), ('easy', 1), ('fast-solution', 1), ('find', 1), ('golang', 1), ('greedy approach', 1), ('hashmap', 1), ('intuitive', 1), ('java-solution', 1), ('linear', 1), ('math-solution', 1), ('mathematical', 1), ('naive', 1), ('nlogn', 1), ('prefix sum', 1), ('presum', 1), ('searching', 1), ('sort', 1), ('swift', 1), ('tricks', 1), ('video-explanation', 1)]"
1299,Replace Elements with Greatest Element on Right Side,https://leetcode.com/problems/replace-elements-with-greatest-element-on-right-side,"Given an array arr, replace every element in that array with the greatest element among the elements to its right, and replace the last element with -1.

After doing so, return the array.",['array'],Easy,748,143,170677,127269,[],"[('c++', 40), ('java', 40), ('python', 30), ('cpp', 24), ('javascript', 24), ('python 3', 21), ('easy-understanding', 18), ('java-solution', 17), ('cpp solution', 13), ('python3', 12), ('c#', 7), ('golang', 7), ('array', 6), ('100 space', 5), ('easy-undestand', 5), ('easytounderstand', 5), ('c', 4), ('dynamic programming', 4), ('easy-to-understand', 4), ('in-place', 4), ('java ac solution', 4), ('ruby', 4), ('simple solution', 4), ('100 memory', 3), ('go', 3), ('golang-solution', 3), ('inplace', 3), ('iterative', 3), ('javascript solution', 3), ('kotlin', 3), ('linear time', 3), ('simple', 3), ('c++ code', 2), ('commentary', 2), ('comments', 2), ('easy', 2), ('faster', 2), ('one pass', 2), ('python2', 2), ('splice', 2), ('stl', 2), ('swift', 2), ('time-complexity-o', 2), ('two-lines', 2), ('1 ms', 1), ('100 faster', 1), ('100 speed', 1), ('1ms', 1), ('95 per faster', 1), ('99.5 faster', 1), ('amazon', 1), ('array easy', 1), ('arrays', 1), ('attractive', 1), ('basic', 1), ('brute force', 1), ('c++ solution', 1), ('c++11', 1), ('c++14', 1), ('clean', 1), ('clear', 1), ('codechef', 1), ('commented', 1), ('cpp easy', 1), ('csharp', 1), ('easiest', 1), ('easy to read', 1), ('easy to understand', 1), ('easy understanding', 1), ('easy-implementation', 1), ('efficient solution', 1), ('elegant solution', 1), ('expalanation', 1), ('explaination', 1), ('explained', 1), ('explained solution', 1), ('explanations', 1), ('fast and simple', 1), ('fast-solution', 1), ('faster-than-100', 1), ('fastest', 1), ('fidato', 1), ('fold', 1), ('foldleft', 1), ('functional', 1), ('github', 1), ('hackerearth', 1), ('hackerrank', 1), ('image', 1), ('image-understanding', 1), ('in-place operation', 1), ('insert interval', 1), ('java solution using dfs', 1), ('java-reverse-integer', 1), ('java11', 1), ('javascrip', 1), ('javascript recursive', 1), ('js', 1), ('kotlin-solution', 1), ('kotllin', 1), ('leetcode', 1), ('linear', 1), ('linear complexity', 1), ('linear-time-space', 1), ('linertime', 1), ('list', 1), ('list-slicing', 1), ('map', 1), ('max', 1), ('memory less than 100', 1), ('memory-efficient', 1), ('mrmagician', 1), ('one line', 1), ('one-loop', 1), ('readable', 1), ('recursion', 1), ('reduce', 1), ('replace elements', 1), ('reverse', 1), ('reverse traversal', 1), ('right-to-left', 1), ('scala', 1), ('simple-solution', 1), ('simplesolution', 1), ('simplesweet', 1), ('solution', 1), ('spread operator', 1), ('stacks', 1), ('typescript', 1), ('unit-test', 1), ('upvote', 1), ('video', 1), ('video solution', 1)]"
1131,Maximum of Absolute Value Expression,https://leetcode.com/problems/maximum-of-absolute-value-expression,"Given two arrays of integers with equal lengths, return the maximum value of:

|arr1[i] - arr1[j]| + |arr2[i] - arr2[j]| + |i - j|

where the maximum is taken over all 0 <= i, j < arr1.length.","['math', 'bit-manipulation']",Medium,311,258,23655,12158,[],"[('c++', 5), ('java', 4), ('python', 2), ('python3', 2), ('array', 1), ('c++ code', 1), ('clean code', 1), ('concise', 1), ('easy-understanding', 1), ('easytounderstand', 1), ('fuck noobs', 1), ('intiution', 1), ('javascript', 1), ('mathematics', 1), ('maths', 1), ('python 3', 1)]"
1129,Shortest Path with Alternating Colors,https://leetcode.com/problems/shortest-path-with-alternating-colors,"Consider a directed graph, with nodes labelled 0, 1, ..., n-1.  In this graph, each edge is either red or blue, and there could be self-edges or parallel edges.

Each [i, j] in red_edges denotes a red directed edge from node i to node j.  Similarly, each [i, j] in blue_edges denotes a blue directed edge from node i to node j.

Return an array answer of length n, where each answer[X] is the length of the shortest path from node 0 to node X such that the edge colors alternate along the path (or -1 if such a path doesn't exist).","['breadth-first-search', 'graph']",Medium,673,37,55718,22554,[],"[('bfs', 35), ('c++', 14), ('java', 10), ('cpp', 7), ('javascript', 6), ('c#', 4), ('python', 4), ('python 3', 4), ('breadth first search', 3), ('python3', 3), ('dfs', 2), ('graph', 2), ('java-solution', 2), ('kotlin', 2), ('linear time', 2), ('simple', 2), ('bfs simple solution', 1), ('binary-search', 1), ('boolean', 1), ('breadth-first-search', 1), ('breath first search', 1), ('chinese', 1), ('clean code', 1), ('coloring', 1), ('depth first search', 1), ('dfs solution', 1), ('dictonary', 1), ('dijkstra', 1), ('directed-graph', 1), ('easy', 1), ('easy-understanding', 1), ('eulerian-path', 1), ('golang', 1), ('hashset', 1), ('intuition', 1), ('intuitive', 1), ('java ac solution', 1), ('recursive-dfs', 1), ('shortestpath', 1), ('simple solution', 1), ('stacks', 1), ('typescript', 1), ('video', 1), ('with explanation', 1), ('youtube', 1), ('zea7ot', 1)]"
1130,Minimum Cost Tree From Leaf Values,https://leetcode.com/problems/minimum-cost-tree-from-leaf-values,"Given an array arr of positive integers, consider all binary trees such that:


	Each node has either 0 or 2 children;
	The values of arr correspond to the values of each leaf in an in-order traversal of the tree.  (Recall that a node is a leaf if and only if it has 0 children.)
	The value of each non-leaf node is equal to the product of the largest leaf value in its left and right subtree respectively.


Among all possible binary trees considered, return the smallest possible sum of the values of each non-leaf node.  It is guaranteed this sum fits into a 32-bit integer.","['dynamic-programming', 'stack', 'tree']",Medium,2078,161,77359,52060,[],"[('c++', 23), ('dynamic programming', 19), ('dp', 15), ('greedy', 14), ('memoization', 8), ('easy-understanding', 7), ('greedy approach', 6), ('python 3', 6), ('brute force', 5), ('java', 5), ('python', 5), ('cpp solution', 4), ('recursion', 4), ('stack', 4), ('cpp', 3), ('python3', 3), ('stacks', 3), ('100 space', 2), ('binary-tree', 2), ('dynamic-programming', 2), ('java-solution', 2), ('javascript', 2), ('proof', 2), ('rust', 2), ('simple solution', 2), ('top down dp', 2), ('tree', 2), ('100 faster', 1), ('100 faster runtime', 1), ('100 memory', 1), ('100 speed', 1), ('bottom up', 1), ('bottom-up', 1), ('bottoms-up', 1), ('c', 1), ('c code', 1), ('c#', 1), ('c++ code', 1), ('c++ monotonic stack', 1), ('comments added', 1), ('constant space', 1), ('cpp-solution', 1), ('depth first search', 1), ('dfs', 1), ('divide and conquer', 1), ('dp c++', 1), ('dp-easy', 1), ('easy-undestand', 1), ('explain', 1), ('explanation of logic', 1), ('explanatory video', 1), ('go', 1), ('golang', 1), ('greedy algorithm', 1), ('hashmap', 1), ('heap', 1), ('help needed', 1), ('image-understanding', 1), ('imageexplanation', 1), ('intuition based solution', 1), ('intuitive', 1), ('iterative', 1), ('java ac solution', 1), ('linear time', 1), ('linked-list', 1), ('matrix chain mul.', 1), ('matrix-chain-dp', 1), ('monotonic stack', 1), ('no recursion', 1), ('optimal merge pattern', 1), ('partition', 1), ('priority queue', 1), ('readable', 1), ('recursive', 1), ('resursive', 1), ('short', 1), ('simple', 1), ('stack-based', 1), ('time complexity', 1), ('top down approach', 1)]"
1128,Number of Equivalent Domino Pairs,https://leetcode.com/problems/number-of-equivalent-domino-pairs,"Given a list of dominoes, dominoes[i] = [a, b] is equivalent to dominoes[j] = [c, d] if and only if either (a==c and b==d), or (a==d and b==c) - that is, one domino can be rotated to be equal to another domino.

Return the number of pairs (i, j) for which 0 <= i < j < dominoes.length, and dominoes[i] is equivalent to dominoes[j].",['array'],Easy,317,164,74835,34629,[],"[('python', 16), ('javascript', 13), ('c++', 11), ('python 3', 11), ('java', 8), ('cpp', 7), ('easy-understanding', 5), ('golang', 5), ('python3', 5), ('c#', 4), ('hashmap', 4), ('simple solution', 4), ('go', 3), ('rust', 3), ('combination', 2), ('combinatorics', 2), ('cpp solution', 2), ('dictionary', 2), ('easytounderstand', 2), ('golang-solution', 2), ('java-solution', 2), ('map', 2), ('one-liner', 2), ('100 memory', 1), ('algorithms', 1), ('array', 1), ('array easy', 1), ('arrays', 1), ('brute force', 1), ('c++ code', 1), ('c++11', 1), ('clean code', 1), ('clean-code', 1), ('constant memory', 1), ('constant space', 1), ('cpp-solution', 1), ('dynamic programming', 1), ('easy', 1), ('explained', 1), ('explanation', 1), ('fast', 1), ('fast-solution', 1), ('functional', 1), ('go lang', 1), ('go-solution', 1), ('hash table', 1), ('hashtable', 1), ('javascript solution', 1), ('joonpago', 1), ('js', 1), ('js javascript', 1), ('key', 1), ('khu', 1), ('linear', 1), ('linear time', 1), ('mapping', 1), ('math', 1), ('newbie', 1), ('object-oriented', 1), ('one pass', 1), ('override', 1), ('permutation', 1), ('python2', 1), ('ruby', 1), ('set', 1), ('swap', 1), ('swift', 1), ('symmetry', 1), ('unit-test', 1), ('with comments', 1)]"
1289,Minimum Falling Path Sum II,https://leetcode.com/problems/minimum-falling-path-sum-ii,"Given a square grid of integers arr, a falling path with non-zero shifts is a choice of exactly one element from each row of arr, such that no two elements chosen in adjacent rows are in the same column.

Return the minimum sum of a falling path with non-zero shifts.",['dynamic-programming'],Hard,380,39,27153,17017,"[""Minimum Falling Path Sum""]","[('dynamic programming', 27), ('c++', 9), ('java', 9), ('java-solution', 6), ('dp', 5), ('dynamic-programming', 5), ('python', 4), ('cpp', 3), ('java ac solution', 3), ('c#', 2), ('c++ code', 2), ('clean code', 2), ('constant memory', 2), ('constant space', 2), ('dp-techqique', 2), ('priority queue', 2), ('python 3', 2), ('100 space', 1), ('c', 1), ('c code', 1), ('comments', 1), ('cpp solution', 1), ('csharp', 1), ('dp c++', 1), ('easy understanding', 1), ('easy-to-understand', 1), ('easy-understanding', 1), ('easy-undestand', 1), ('easytounderstand', 1), ('efficient', 1), ('explained', 1), ('fidato', 1), ('golang', 1), ('memoziation', 1), ('no extra space', 1), ('python3', 1), ('simple clear c++ solution', 1)]"
1627,Graph Connectivity With Threshold,https://leetcode.com/problems/graph-connectivity-with-threshold,"We have n cities labeled from 1 to n. Two different cities with labels x and y are directly connected by a bidirectional road if and only if x and y share a common divisor strictly greater than some threshold. More formally, cities with labels x and y have a road between them if there exists an integer z such that all of the following are true:


	x % z == 0,
	y % z == 0, and
	z > threshold.


Given the two integers, n and threshold, and an array of queries, you must determine for each queries[i] = [ai, bi] if cities ai and bi are connected directly or indirectly. (i.e. there is some path between them).

Return an array answer, where answer.length == queries.length and answer[i] is true if for the ith query, there is a path between ai and bi, or answer[i] is false if there is no path.","['math', 'union-find']",Hard,169,20,15496,6270,[],"[('c++', 3), ('python 3', 3), ('union-find', 3), ('dsu', 2), ('java-solution', 2), ('kotlin', 2), ('union find', 2), ('100 speed', 1), ('algorithms', 1), ('bad description', 1), ('c#', 1), ('c++14', 1), ('commented', 1), ('concise', 1), ('cpp', 1), ('disjoint-set', 1), ('easy', 1), ('gcd', 1), ('graph', 1), ('javascript', 1), ('path-compression', 1), ('python', 1), ('python3', 1), ('ruby', 1), ('testcase error', 1), ('union-by-rank', 1), ('unionfind', 1), ('wrong testcase', 1), ('zea7ot', 1)]"
1288,Remove Covered Intervals,https://leetcode.com/problems/remove-covered-intervals,"Given a list of intervals, remove all intervals that are covered by another interval in the list.

Interval [a,b) is covered by interval [c,d) if and only if c <= a and b <= d.

After doing so, return the number of remaining intervals.","['greedy', 'sort', 'line-sweep']",Medium,645,26,80985,46567,[],"[('c++', 23), ('sorting', 23), ('python 3', 21), ('python', 20), ('java', 17), ('cpp', 14), ('sort', 11), ('sorted array', 11), ('javascript', 10), ('explained', 7), ('python3', 7), ('c#', 6), ('cpp solution', 6), ('easy-understanding', 6), ('java-solution', 6), ('easy', 4), ('beginner friendly', 3), ('comparator', 3), ('golang', 3), ('greedy', 3), ('python3.8', 3), ('swift', 3), ('100 space', 2), ('brute force', 2), ('comments', 2), ('comments-added', 2), ('constant memory', 2), ('cpp-solution', 2), ('easy-to-understand', 2), ('explained solution', 2), ('interval', 2), ('interval-merging', 2), ('merge intervals', 2), ('nlogn', 2), ('pythonpython3', 2), ('scala', 2), ('simple python accepted', 2), ('sort-function', 2), ('stacks', 2), ('typescript', 2), ('#java', 1), ('#sort', 1), ('100 speed', 1), ('beats 99', 1), ('beats96', 1), ('beginnerfriendly', 1), ('beginners', 1), ('c', 1), ('c programming', 1), ('c++ solution', 1), ('clean code', 1), ('clean-code', 1), ('comparartor', 1), ('concise', 1), ('cpp easy', 1), ('csharp', 1), ('custom sorting', 1), ('detailed explanation', 1), ('dictonary', 1), ('easily understood', 1), ('easy sloution', 1), ('easy to read', 1), ('easy to understand', 1), ('easy-solution', 1), ('easy-understand', 1), ('easy-undestand', 1), ('easytounderstand', 1), ('efficient', 1), ('es6', 1), ('fast-solution', 1), ('fastest', 1), ('fidato', 1), ('functional programming', 1), ('functional-programming', 1), ('give stars and subscribe', 1), ('hash table', 1), ('intervals', 1), ('intuitive', 1), ('java ac solution', 1), ('javascript solution', 1), ('js', 1), ('kotlin', 1), ('list', 1), ('map', 1), ('merge-intervals', 1), ('nlogn time', 1), ('one-pass', 1), ('optimisation', 1), ('overlapping', 1), ('overlapping intervals', 1), ('performance', 1), ('php', 1), ('priority queue', 1), ('python2', 1), ('quick sort', 1), ('ruby', 1), ('rust', 1), ('simple solution', 1), ('simpler', 1), ('sorted', 1), ('stack', 1), ('sweepline', 1), ('time complexity', 1), ('trivial', 1), ('video explaination', 1), ('video explanation', 1), ('video solution', 1), ('video-explanation', 1), ('zea7ot', 1)]"
1287,Element Appearing More Than 25% In Sorted Array,https://leetcode.com/problems/element-appearing-more-than-25-in-sorted-array,"Given an integer array sorted in non-decreasing order, there is exactly one integer in the array that occurs more than 25% of the time, return that integer.",['array'],Easy,458,32,71999,43422,[],"[('python', 25), ('c++', 21), ('python 3', 20), ('java', 17), ('javascript', 14), ('cpp', 13), ('java-solution', 12), ('hashmap', 8), ('python3', 8), ('binary-search', 5), ('c#', 5), ('easy-understanding', 4), ('readable', 4), ('100 faster', 3), ('c', 3), ('dictionary', 3), ('easy', 3), ('map', 3), ('simple', 3), ('array', 2), ('comments', 2), ('counter', 2), ('explaination', 2), ('java ac solution', 2), ('js', 2), ('one line', 2), ('swift', 2), ('0 space', 1), ('0ms', 1), ('0ms runtime', 1), ('1-line', 1), ('100 space', 1), ('best explaination', 1), ('binary search', 1), ('binarysearch', 1), ('c programming', 1), ('c++ code', 1), ('c++11', 1), ('clean code', 1), ('commentary', 1), ('commetend', 1), ('constant', 1), ('constant memory', 1), ('constant space', 1), ('constant time', 1), ('constant-space', 1), ('constant-time', 1), ('cpp solution', 1), ('cpp-solution', 1), ('cppp', 1), ('easiest', 1), ('easy-to-understand', 1), ('easy-understand', 1), ('easysolution', 1), ('easytounderstand', 1), ('explained', 1), ('faster', 1), ('fastest c++ solution', 1), ('fastest java solution', 1), ('fidato', 1), ('functional', 1), ('go', 1), ('golang', 1), ('golang-solution', 1), ('iteration', 1), ('iterative', 1), ('iterative way', 1), ('js javascript', 1), ('linear', 1), ('linear seach', 1), ('linear time', 1), ('logarithmic time', 1), ('logn', 1), ('one-liner', 1), ('one-pass', 1), ('optimal', 1), ('pseudocode', 1), ('python2', 1), ('readability', 1), ('regular-expression', 1), ('ruby', 1), ('rust', 1), ('simple-solution', 1), ('simplest', 1), ('slide window', 1), ('sliding-window', 1), ('slidingwindow', 1), ('solution', 1), ('solution-python', 1), ('sorted', 1), ('space-complexity-1', 1), ('std', 1), ('stl', 1), ('understandable', 1), ('unit-test', 1), ('window', 1)]"
1125,Smallest Sufficient Team,https://leetcode.com/problems/smallest-sufficient-team,"In a project, you have a list of required skills req_skills, and a list of people. The ith person people[i] contains a list of skills that the person has.

Consider a sufficient team: a set of people such that for every required skill in req_skills, there is at least one person in the team who has that skill. We can represent these teams by the index of each person.


	For example, team = [0, 1, 3] represents the people with skills people[0], people[1], and people[3].


Return any sufficient team of the smallest possible size, represented by the index of each person. You may return the answer in any order.

It is guaranteed an answer exists.","['dynamic-programming', 'bit-manipulation']",Hard,480,9,25566,12039,[],"[('dp', 4), ('dynamic programming', 4), ('bitmasking', 3), ('c++', 3), ('backtracking', 2), ('bitmask', 2), ('c#', 2), ('cpp solution', 2), ('python3', 2), ('bfs', 1), ('bit manipulation', 1), ('bit mask', 1), ('c++ recursion', 1), ('c++ solution', 1), ('comments-added', 1), ('dfs', 1), ('dp-programming', 1), ('greedy', 1), ('intuitive', 1), ('javascript', 1), ('kotlin', 1), ('prune', 1), ('python', 1), ('python 3', 1), ('sort', 1)]"
1124,Longest Well-Performing Interval,https://leetcode.com/problems/longest-well-performing-interval,"We are given hours, a list of the number of hours worked per day for a given employee.

A day is considered to be a tiring day if and only if the number of hours worked is (strictly) greater than 8.

A well-performing interval is an interval of days for which the number of tiring days is strictly larger than the number of non-tiring days.

Return the length of the longest well-performing interval.",['stack'],Medium,612,75,47670,15893,[],"[('c++', 3), ('cpp', 3), ('hashmap', 3), ('java', 3), ('python', 3), ('linear time', 2), ('prefix sum', 2), ('simple', 2), ('commented', 1), ('dictionary', 1), ('easy-understanding', 1), ('explanations', 1), ('functional-programming', 1), ('golang', 1), ('hashing', 1), ('java ac solution', 1), ('javascript', 1), ('python 3', 1), ('python3', 1), ('simple clear c++ solution', 1), ('swift', 1)]"
1123,Lowest Common Ancestor of Deepest Leaves,https://leetcode.com/problems/lowest-common-ancestor-of-deepest-leaves,"Given the root of a binary tree, return the lowest common ancestor of its deepest leaves.

Recall that:


	The node of a binary tree is a leaf if and only if it has no children
	The depth of the root of the tree is 0. if the depth of a node is d, the depth of each of its children is d + 1.
	The lowest common ancestor of a set S of nodes, is the node A with the largest depth such that every node in S is in the subtree with root A.


Note: This question is the same as 865: https://leetcode.com/problems/smallest-subtree-with-all-the-deepest-nodes/","['tree', 'depth-first-search']",Medium,687,636,72977,49698,"[""Lowest Common Ancestor of a Binary Tree IV""]","[('c++', 16), ('java', 16), ('dfs', 12), ('recursion', 10), ('cpp', 8), ('recursive', 8), ('javascript', 7), ('python 3', 7), ('python', 6), ('binary-tree', 5), ('java-solution', 5), ('cpp solution', 4), ('bfs', 3), ('c#', 3), ('lca', 3), ('swift', 3), ('0ms', 2), ('c++17', 2), ('clean code', 2), ('dfs simple solution', 2), ('easy-understanding', 2), ('eulerian-path', 2), ('fast and simple', 2), ('lowest common ancestor', 2), ('ruby', 2), ('simple clear c++ solution', 2), ('typescript', 2), ('100', 1), ('100 memory', 1), ('100 speed', 1), ('7 lines', 1), ('ancestor', 1), ('binary tree', 1), ('breadth-first-search', 1), ('c+', 1), ('c++ solution', 1), ('depth first search', 1), ('dfs-in-order', 1), ('dfs-iterative', 1), ('dfs-topdown', 1), ('dictionary', 1), ('divide-and-conquer', 1), ('duplicated-question', 1), ('easy', 1), ('easy to understand', 1), ('easy-to-understand', 1), ('easytounderstand', 1), ('euler-walk', 1), ('eulerian path', 1), ('explained', 1), ('explained solution', 1), ('explanation of logic', 1), ('fast', 1), ('go-solution', 1), ('golang', 1), ('golang-solution', 1), ('graph theory', 1), ('hashset', 1), ('height of a binary tree', 1), ('helpful comments', 1), ('intuitive', 1), ('iterative', 1), ('java ac solution', 1), ('javascript solution', 1), ('keep it simple', 1), ('kotlinvim', 1), ('lca-deepest', 1), ('lcadeepestleaves', 1), ('level order traversal', 1), ('linear time', 1), ('memoization', 1), ('postorder traversal', 1), ('python bfs', 1), ('python deque', 1), ('python3', 1), ('python3.8', 1), ('queue', 1), ('recurision', 1), ('recusion', 1), ('single pass', 1), ('tree', 1), ('tree traversal', 1), ('trees', 1)]"
1122,Relative Sort Array,https://leetcode.com/problems/relative-sort-array,"Given two arrays arr1 and arr2, the elements of arr2 are distinct, and all elements in arr2 are also in arr1.

Sort the elements of arr1 such that the relative ordering of items in arr1 are the same as in arr2.  Elements that don't appear in arr2 should be placed at the end of arr1 in ascending order.","['array', 'sort']",Easy,1073,76,136274,92841,[],"[('python', 43), ('c++', 39), ('javascript', 35), ('java', 32), ('python 3', 31), ('hashmap', 25), ('cpp', 23), ('python3', 17), ('c#', 14), ('map', 14), ('counting-sort', 8), ('easy-understanding', 8), ('golang', 8), ('clean code', 7), ('comparator', 7), ('cpp solution', 7), ('java-solution', 6), ('simple solution', 6), ('c', 5), ('c++ code', 5), ('sorting', 5), ('easy-to-understand', 4), ('go', 4), ('hash table', 4), ('kotlin', 4), ('one-liner', 4), ('sort', 4), ('treemap', 4), ('0ms', 3), ('counter', 3), ('cpp easy', 3), ('dictionary', 3), ('easy', 3), ('easy to understand', 3), ('explaination', 3), ('javascript solution', 3), ('array', 2), ('brute-force', 2), ('cpp-solution', 2), ('custom sorting', 2), ('dictonary', 2), ('easy sloution', 2), ('easy-undestand', 2), ('explain', 2), ('explained', 2), ('fast and simple', 2), ('fast-solution', 2), ('hash', 2), ('hashing', 2), ('heapq', 2), ('in-place', 2), ('list', 2), ('python2', 2), ('relativesortarray', 2), ('set', 2), ('sort-function', 2), ('sorted', 2), ('stl', 2), ('straightforward', 2), ('swift', 2), ('#java', 1), ('0ms-solution', 1), ('100', 1), ('100 memory', 1), ('100 speed', 1), ('2 lines', 1), ('2 pointer approach', 1), ('algorithm', 1), ('array of vectors', 1), ('array-sort', 1), ('arrayutils', 1), ('beats 100', 1), ('begineer', 1), ('brute force', 1), ('c code', 1), ('c programming', 1), ('c++11', 1), ('clean-efficient-code', 1), ('clear', 1), ('commented', 1), ('comments', 1), ('comments-added', 1), ('concat', 1), ('count-sort', 1), ('counting sort', 1), ('cpp doubt', 1), ('custom comparator', 1), ('dictionaries', 1), ('dictionary comprehension', 1), ('divide and conquer', 1), ('easy to code', 1), ('easy understand', 1), ('enumerator', 1), ('explanation', 1), ('explanation with code', 1), ('faster than 82', 1), ('fasterthan100', 1), ('filter', 1), ('go lang', 1), ('golang-solution', 1), ('gorillaz', 1), ('hashset', 1), ('hashtable', 1), ('indirect hashing', 1), ('inplace', 1), ('intersection', 1), ('intuitive', 1), ('ios', 1), ('iterative', 1), ('java ac solution', 1), ('js javascript', 1), ('kotlinvim', 1), ('lambda function', 1), ('list only', 1), ('logarithmic-time', 1), ('logic explained', 1), ('loop', 1), ('loops', 1), ('map-stl', 1), ('mapreduce', 1), ('meiyaowen', 1), ('one liner', 1), ('ordereddict', 1), ('pair', 1), ('php', 1), ('php solution', 1), ('pythonpython3', 1), ('relative sorting', 1), ('ruby', 1), ('rust', 1), ('scala', 1), ('selection sort', 1), ('short code', 1), ('simpe', 1), ('simple', 1), ('simple clear c++ solution', 1), ('simple hashmap', 1), ('simplest', 1), ('solution', 1), ('solution-c#', 1), ('solution-csharp', 1), ('sorted array', 1), ('stl algorithms', 1), ('typescript', 1), ('unit-test', 1), ('unorderedmap', 1), ('vector', 1)]"
1116,Print Zero Even Odd,https://leetcode.com/problems/print-zero-even-odd,"Suppose you are given the following code:


class ZeroEvenOdd {
  public ZeroEvenOdd(int n) { ... }      // constructor
  public void zero(printNumber) { ... }  // only output 0's
  public void even(printNumber) { ... }  // only output even numbers
  public void odd(printNumber) { ... }   // only output odd numbers
}


The same instance of ZeroEvenOdd will be passed to three different threads:


	Thread A will call zero() which should only output 0's.
	Thread B will call even() which should only ouput even numbers.
	Thread C will call odd() which should only output odd numbers.


Each of the threads is given a printNumber method to output an integer. Modify the given program to output the series 010203040506... where the length of the series must be 2n.",[],Medium,241,167,38231,22111,"[""Print FooBar Alternately"", ""Fizz Buzz Multithreaded""]","[('java', 18), ('c++', 17), ('concurrency', 8), ('semaphore', 8), ('lock', 7), ('python', 7), ('cpp', 6), ('mutex', 6), ('python 3', 5), ('c', 4), ('condition-variable', 4), ('threading', 4), ('wait and notify', 4), ('autoresetevent', 3), ('c#', 3), ('condition variable', 3), ('multithreading', 3), ('threads', 3), ('easy-understanding', 2), ('java-solution', 2), ('locks', 2), ('multi-thread', 2), ('python3', 2), ('#debug', 1), ('#lock', 1), ('#python', 1), ('#python 3', 1), ('#threading', 1), ('acauire', 1), ('atomic', 1), ('barrier', 1), ('beginner friendly', 1), ('c++ solution', 1), ('c++11', 1), ('clean code', 1), ('cpp solution', 1), ('easy understanding', 1), ('easy-understand', 1), ('fast and simple', 1), ('issue', 1), ('java threads', 1), ('main', 1), ('monitor', 1), ('parallel computing', 1), ('parallelism', 1), ('promise', 1), ('python2', 1), ('release', 1), ('simple', 1), ('simple solution', 1), ('smart', 1), ('solution', 1), ('stl', 1), ('submit-fail', 1), ('synchronization', 1), ('synchronized', 1), ('timeout', 1), ('unique-lock', 1), ('yield', 1)]"
1291,Sequential Digits,https://leetcode.com/problems/sequential-digits,"An integer has sequential digits if and only if each digit in the number is one more than the previous digit.

Return a sorted list of all the integers in the range [low, high] inclusive that have sequential digits.",['backtracking'],Medium,543,55,65417,37541,[],"[('c++', 45), ('python', 33), ('java', 30), ('python 3', 27), ('cpp', 22), ('python3', 17), ('explained', 12), ('javascript', 11), ('backtracking', 10), ('c++ code', 9), ('java-solution', 8), ('easy-understanding', 7), ('c#', 6), ('cpp solution', 6), ('dfs', 6), ('java ac solution', 6), ('recursion', 6), ('0ms', 5), ('bfs', 5), ('slidingwindow', 5), ('digits', 4), ('easy', 4), ('simple', 4), ('simple solution', 4), ('string', 4), ('100 faster runtime', 3), ('100 memory', 3), ('100 space', 3), ('beginner friendly', 3), ('easytounderstand', 3), ('sequential digits', 3), ('swift', 3), ('0ms runtime', 2), ('100 speed', 2), ('algorithms', 2), ('beats 100', 2), ('brute force', 2), ('concept', 2), ('constructive', 2), ('cpp easy', 2), ('explained solution', 2), ('fast', 2), ('fastest', 2), ('golang', 2), ('logical thinking', 2), ('php', 2), ('ruby', 2), ('string-to-integer', 2), ('#simpleidea', 1), ('#swift', 1), ('0ms-4ms', 1), ('100 faster', 1), ('100 faster cpp', 1), ('1291', 1), ('ad-hoc', 1), ('array', 1), ('backtrack', 1), ('backtracking dfs', 1), ('better brute-force', 1), ('binary-search', 1), ('bisect', 1), ('breadth first search', 1), ('c', 1), ('c++ ac', 1), ('c++ iterative sol', 1), ('c++ solution', 1), ('c++14', 1), ('commentary', 1), ('comments', 1), ('comments added', 1), ('complexity analysis', 1), ('concise', 1), ('constant', 1), ('constant time', 1), ('cpp-solution', 1), ('dfs solution', 1), ('easy-to-understand', 1), ('easy-undestand', 1), ('efficient', 1), ('efficient solution', 1), ('es6', 1), ('explaination', 1), ('explanation', 1), ('explanations', 1), ('faster', 1), ('fastest c++ solution', 1), ('fidato', 1), ('filter', 1), ('generator', 1), ('go', 1), ('go lang', 1), ('greedy approach', 1), ('illustration', 1), ('increasing digits', 1), ('iterate', 1), ('iteration', 1), ('iterative', 1), ('iteratively', 1), ('js', 1), ('languaje c', 1), ('linear time', 1), ('loop', 1), ('math', 1), ('math based solution', 1), ('must-read', 1), ('no recursion', 1), ('no string', 1), ('number comparison', 1), ('oms', 1), ('one line', 1), ('one liner', 1), ('one-liner', 1), ('optimal', 1), ('precacluation', 1), ('problem analysis', 1), ('pruning', 1), ('python2', 1), ('queue', 1), ('queue-approach', 1), ('rajat', 1), ('readable', 1), ('recursive easy', 1), ('recusion', 1), ('rust', 1), ('sequence', 1), ('series', 1), ('set c++', 1), ('sets', 1), ('sliding-window', 1), ('stl', 1), ('stream', 1), ('string-operation', 1), ('substr', 1), ('super-easy', 1), ('treeset', 1), ('tricky', 1), ('video', 1), ('video solution', 1), ('video-explanation', 1)]"
1286,Iterator for Combination,https://leetcode.com/problems/iterator-for-combination,"Design the CombinationIterator class:


	CombinationIterator(string characters, int combinationLength) Initializes the object with a string characters of sorted distinct lowercase English letters and a number combinationLength as arguments.
	next() Returns the next combination of length combinationLength in lexicographical order.
	hasNext() Returns true if and only if there exists a next combination.","['backtracking', 'design']",Medium,592,46,56074,39779,[],"[('backtracking', 31), ('c++', 22), ('java', 21), ('python 3', 17), ('python', 14), ('cpp', 11), ('javascript', 10), ('c#', 9), ('python3', 7), ('simple solution', 7), ('combination', 6), ('queue', 6), ('easy-understanding', 5), ('explained', 5), ('java-solution', 5), ('recursion', 5), ('bit masking', 3), ('easy', 3), ('golang', 3), ('iterator', 3), ('java ac solution', 3), ('recursive', 3), ('swift', 3), ('backtrack', 2), ('bit manipulation', 2), ('bitmasking', 2), ('c++ solution', 2), ('combinations', 2), ('combinatories', 2), ('cpp solution', 2), ('dfs', 2), ('generator', 2), ('go', 2), ('itertools', 2), ('js', 2), ('lazy', 2), ('python deque', 2), ('recusive', 2), ('simple', 2), ('stack', 2), ('95 per faster', 1), ('99.2 faster', 1), ('array', 1), ('beats 100', 1), ('beats 100 percent', 1), ('bfs', 1), ('bit-manipulation', 1), ('bitmap', 1), ('bitmask', 1), ('bitset', 1), ('bitwise', 1), ('brute force to optimal', 1), ('c++ code', 1), ('challenge', 1), ('class', 1), ('class design', 1), ('clean code', 1), ('clean-code', 1), ('clear-understanding', 1), ('combinatorics', 1), ('combine', 1), ('commented code', 1), ('comments', 1), ('concise-solution', 1), ('constant time', 1), ('deferred-execution', 1), ('depth first search', 1), ('design', 1), ('dfs simple solution', 1), ('diagram', 1), ('easy-to-follow', 1), ('easy-to-understand', 1), ('easy-understand', 1), ('easytounderstand', 1), ('efficient', 1), ('es6', 1), ('explanation of logic', 1), ('explanation with code', 1), ('faster', 1), ('golang-solution', 1), ('immutable', 1), ('intuitive', 1), ('iterator design pattern', 1), ('iteratve', 1), ('js javascript', 1), ('k pointer', 1), ('linear time', 1), ('math', 1), ('mrmagician', 1), ('online', 1), ('pattern', 1), ('permutations', 1), ('precomputed', 1), ('priority queue', 1), ('priority-queue', 1), ('python2', 1), ('recursive solution', 1), ('ruby', 1), ('space-efficient', 1), ('stacks', 1), ('string manipulation', 1), ('stringbuilder', 1), ('suggestion', 1), ('swift5', 1), ('typescript', 1), ('yield', 1), ('yield return', 1)]"
1619,Mean of Array After Removing Some Elements,https://leetcode.com/problems/mean-of-array-after-removing-some-elements,"Given an integer array arr, return the mean of the remaining integers after removing the smallest 5% and the largest 5% of the elements.

Answers within 10-5 of the actual answer will be considered accepted.",['array'],Easy,138,37,27563,17768,[],"[('c++', 16), ('java', 15), ('python', 15), ('cpp', 13), ('python3', 12), ('javascript', 9), ('easy', 7), ('java-solution', 7), ('python 3', 7), ('sorting', 7), ('easy-understanding', 6), ('sort', 4), ('cpp solution', 3), ('simple', 3), ('100 speed', 2), ('c#', 2), ('easytounderstand', 2), ('math', 2), ('priority queue', 2), ('quicksort-partition', 2), ('ruby', 2), ('swift', 2), ('100 memory', 1), ('100 space', 1), ('16ms', 1), ('4 ways', 1), ('99 memory', 1), ('accumulate', 1), ('array', 1), ('array.sort', 1), ('c++ code', 1), ('c++ solution', 1), ('comments-added', 1), ('cpp easy', 1), ('cpp with explanation', 1), ('easiest', 1), ('easy solution', 1), ('explained', 1), ('explanatory comments', 1), ('go-solution', 1), ('golang', 1), ('golang-solution', 1), ('intuitive', 1), ('java ac solution', 1), ('javascript-solution', 1), ('linear', 1), ('max heap', 1), ('median', 1), ('min heap', 1), ('nlogn', 1), ('nth-element', 1), ('nthelement', 1), ('one-liner', 1), ('partial-sort', 1), ('partialsort', 1), ('php', 1), ('quick select', 1), ('rajat', 1), ('self explanatory', 1), ('simple-solution', 1), ('slicing', 1), ('sorted array', 1), ('splitting', 1), ('stl', 1), ('stl algorithms', 1), ('stl vector', 1), ('sum', 1), ('typescript', 1), ('ultra simple', 1), ('upvote', 1)]"
1111,Maximum Nesting Depth of Two Valid Parentheses Strings,https://leetcode.com/problems/maximum-nesting-depth-of-two-valid-parentheses-strings,"A string is a valid parentheses string (denoted VPS) if and only if it consists of ""("" and "")"" characters only, and:


	It is the empty string, or
	It can be written as AB (A concatenated with B), where A and B are VPS's, or
	It can be written as (A), where A is a VPS.


We can similarly define the nesting depth depth(S) of any VPS S as follows:


	depth("""") = 0
	depth(A + B) = max(depth(A), depth(B)), where A and B are VPS's
	depth(""("" + A + "")"") = 1 + depth(A), where A is a VPS.


For example,  """", ""()()"", and ""()(()())"" are VPS's (with nesting depths 0, 1, and 2), and "")("" and ""(()"" are not VPS's.

 

Given a VPS seq, split it into two disjoint subsequences A and B, such that A and B are VPS's (and A.length + B.length = seq.length).

Now choose any such A and B such that max(depth(A), depth(B)) is the minimum possible value.

Return an answer array (of length seq.length) that encodes such a choice of A and B:  answer[i] = 0 if seq[i] is part of A, else answer[i] = 1.  Note that even though multiple answers may exist, you may return any of them.","['binary-search', 'greedy']",Medium,189,881,19610,14286,"[""Maximum Nesting Depth of the Parentheses""]","[('c++', 8), ('python 3', 6), ('greedy', 3), ('javascript', 3), ('linear time', 3), ('python', 3), ('c#', 2), ('c++ code', 2), ('constant space', 2), ('explanations', 2), ('greedy approach', 2), ('python3', 2), ('simple solution', 2), ('stack', 2), ('0ms', 1), ('basic', 1), ('binary search', 1), ('bottom up', 1), ('c++ monotonic stack', 1), ('c++14', 1), ('commentary', 1), ('constructive', 1), ('cpp', 1), ('cpp solution', 1), ('csharp', 1), ('dfs', 1), ('greedy algorithm', 1), ('java', 1), ('mountain view', 1), ('no extra space', 1), ('one-pass', 1), ('optimal', 1), ('pattern', 1), ('pictures', 1), ('proof', 1), ('ptyhon3', 1), ('rust', 1), ('simple', 1), ('single pass', 1), ('stacks', 1), ('swift', 1)]"
1110,Delete Nodes And Return Forest,https://leetcode.com/problems/delete-nodes-and-return-forest,"Given the root of a binary tree, each node in the tree has a distinct value.

After deleting all nodes with a value in to_delete, we are left with a forest (a disjoint union of trees).

Return the roots of the trees in the remaining forest. You may return the result in any order.","['tree', 'depth-first-search']",Medium,1789,56,146241,99317,[],"[('dfs', 46), ('c++', 39), ('recursion', 32), ('java', 31), ('python', 30), ('javascript', 19), ('python 3', 18), ('cpp', 11), ('postorder-traversal', 11), ('python3', 10), ('recursive', 10), ('bfs', 9), ('dfs simple solution', 9), ('cpp solution', 7), ('c#', 6), ('explained', 5), ('recusion', 5), ('easy-to-understand', 4), ('binary-tree', 3), ('clean code', 3), ('dfs recursive', 3), ('easy-understanding', 3), ('easy-undestand', 3), ('iterative', 3), ('js', 3), ('post-order-traversal', 3), ('postorder', 3), ('simple solution', 3), ('tree-traversal', 3), ('100', 2), ('c', 2), ('dfs solution', 2), ('dfs-topdown', 2), ('fast', 2), ('golang', 2), ('hashset', 2), ('java-solution', 2), ('pre-order', 2), ('preorder', 2), ('python2', 2), ('readable', 2), ('recursive-dfs', 2), ('recursively', 2), ('set', 2), ('tree traversal', 2), ('#dfs', 1), ('#post-order-traversal', 1), ('#python 3', 1), ('#tree', 1), ('100 space', 1), ('100 speed', 1), ('99 faster', 1), ('bfs simple solution', 1), ('bfs vs dfs', 1), ('binary tree', 1), ('binary tree array', 1), ('bottom up', 1), ('breath first search', 1), ('c++ easy to understand', 1), ('c++ recursive solution', 1), ('c++ solution', 1), ('c++11', 1), ('clean solution', 1), ('comments', 1), ('comments-added', 1), ('cpp easy', 1), ('csharp', 1), ('dfs-bfs', 1), ('dfs-in-order', 1), ('dfs-iterative', 1), ('dfs-postorder', 1), ('dfs-recursive', 1), ('dummy-node', 1), ('easytounderstand', 1), ('efficient solution', 1), ('explanation', 1), ('explanations', 1), ('fast and simple', 1), ('faster than 100', 1), ('find node', 1), ('golang-solution', 1), ('google interview', 1), ('hashmap', 1), ('help needed', 1), ('intuitive', 1), ('iterative-dfs', 1), ('kotlinvim', 1), ('level-order-traversal', 1), ('linear time', 1), ('memory optimized', 1), ('morris-postorder', 1), ('parent pointer', 1), ('pass by reference', 1), ('pass-by-reference', 1), ('php solution', 1), ('pythonic', 1), ('pythonpython3', 1), ('rajat', 1), ('recursive dfs', 1), ('recursive easy', 1), ('recusrive', 1), ('resursive', 1), ('run time error', 1), ('shortest', 1), ('simple', 1), ('simple python accepted', 1), ('simplest', 1), ('swift', 1), ('typescript', 1), ('union find', 1), ('video', 1), ('with comments', 1), ('yo', 1), ('youtube', 1)]"
1109,Corporate Flight Bookings,https://leetcode.com/problems/corporate-flight-bookings,"There are n flights that are labeled from 1 to n.

You are given an array of flight bookings bookings, where bookings[i] = [firsti, lasti, seatsi] represents a booking for flights firsti through lasti (inclusive) with seatsi seats reserved for each flight in the range.

Return an array answer of length n, where answer[i] is the total number of seats reserved for flight i.","['array', 'math']",Medium,676,123,46339,25167,[],"[('c++', 11), ('python', 7), ('java', 6), ('c#', 5), ('dp', 4), ('javascript', 4), ('python 3', 4), ('array', 3), ('cpp', 3), ('golang', 3), ('python3', 3), ('#array', 2), ('#java', 2), ('#videoexplanation', 2), ('easy-understanding', 2), ('linear time', 2), ('presum', 2), ('#easy-understanding', 1), ('#video-explanation', 1), ('begginer friendly', 1), ('beginner friendly', 1), ('brute force', 1), ('clean', 1), ('comments', 1), ('concise-solution', 1), ('corporateflightbookings', 1), ('cpp easy', 1), ('cpp with explanation', 1), ('easy', 1), ('easy to read', 1), ('easy to understand', 1), ('easy-to-understand', 1), ('easytounderstand', 1), ('exaplanation', 1), ('explained', 1), ('explained solution', 1), ('fast and simple', 1), ('feedback', 1), ('go', 1), ('go-solution', 1), ('golang-solution', 1), ('graph', 1), ('heap', 1), ('intutive', 1), ('kotlin', 1), ('lazy-propagation', 1), ('nlogn time', 1), ('one pass solution', 1), ('prefix sum', 1), ('prefixsum', 1), ('rust', 1), ('same solution', 1), ('segment tree', 1), ('simple solution', 1), ('two passes', 1), ('typescript solution', 1), ('ultra easy', 1)]"
1108,Defanging an IP Address,https://leetcode.com/problems/defanging-an-ip-address,"Given a valid (IPv4) IP address, return a defanged version of that IP address.

A defanged IP address replaces every period ""."" with ""[.]"".",['string'],Easy,681,1167,349789,309199,[],"[('java', 65), ('c++', 61), ('python 3', 53), ('python', 44), ('javascript', 38), ('cpp', 31), ('string', 23), ('java-solution', 21), ('one-liner', 18), ('c#', 16), ('python3', 16), ('c', 13), ('golang', 13), ('swift', 12), ('regex', 11), ('easy', 10), ('cpp solution', 9), ('easy-understanding', 9), ('replace', 8), ('c++ code', 7), ('easy-undestand', 7), ('easytounderstand', 6), ('javascript solution', 6), ('simple solution', 6), ('string-operation', 6), ('ipaddress', 5), ('ruby', 5), ('rust', 5), ('0ms', 4), ('fast', 4), ('go', 4), ('golang-solution', 4), ('scala', 4), ('simple', 4), ('split', 4), ('stringbuilder', 4), ('cpp easy', 3), ('defanging an ip address', 3), ('easysolution', 3), ('fast and simple', 3), ('javascrip', 3), ('join', 3), ('js', 3), ('linear time', 3), ('regexp', 3), ('solution', 3), ('stringbuffer', 3), ('1 line', 2), ('100', 2), ('100 speed', 2), ('1108', 2), ('accepted solution', 2), ('c code', 2), ('c programming', 2), ('c++11', 2), ('clean', 2), ('comments-added', 2), ('defanging', 2), ('easiest', 2), ('easiest solution', 2), ('easy understanding', 2), ('easy-to-understand', 2), ('efficient', 2), ('explained', 2), ('explanation', 2), ('fast-solution', 2), ('functional', 2), ('insert', 2), ('one line', 2), ('one liner', 2), ('optimal', 2), ('php', 2), ('pythonpython3', 2), ('regex expression', 2), ('regexmatch', 2), ('regular-expression', 2), ('string builder', 2), ('string-concatenation', 2), ('strings', 2), ('typescript', 2), ('#javascript', 1), ('#python 3', 1), ('1 liner', 1), ('100 faster', 1), ('100 faster cpp', 1), ('100 space', 1), ('16ms', 1), ('3 methods', 1), ('ad-hoc', 1), ('apl', 1), ('asahiocean', 1), ('basic', 1), ('basic approach', 1), ('beginner friendly', 1), ('best', 1), ('brute force', 1), ('c# solution', 1), ('c# solutions', 1), ('c++ ac', 1), ('c++ easy to understand', 1), ('c++ solution', 1), ('clean code', 1), ('clear', 1), ('commented', 1), ('cpp 100', 1), ('cpp clear', 1), ('cpp doubt', 1), ('cpp fast', 1), ('cpp-functional', 1), ('direct-approach', 1), ('dynamic array', 1), ('easy to understand', 1), ('easy-solition', 1), ('easy-understsand', 1), ('easyiest solution', 1), ('easytoundersatand', 1), ('easyunderstading', 1), ('elegant', 1), ('erase', 1), ('es6', 1), ('explanations', 1), ('facebook interview', 1), ('faster than 100', 1), ('faster than 100.00', 1), ('fastest', 1), ('find', 1), ('for-loop', 1), ('functional-programming', 1), ('github', 1), ('go-solution', 1), ('google interview', 1), ('ios', 1), ('ip', 1), ('ipc', 1), ('java solution', 1), ('kotlin', 1), ('least memory', 1), ('less memory than 100', 1), ('linear time complexity', 1), ('linq', 1), ('logical', 1), ('memory-efficient', 1), ('naive', 1), ('native', 1), ('no extra space', 1), ('noob', 1), ('one line solution', 1), ('oneline', 1), ('oneliner', 1), ('pointer', 1), ('pushback', 1), ('python replace', 1), ('python2', 1), ('python3.8', 1), ('pythonic', 1), ('rajat', 1), ('redfoos', 1), ('regular expression', 1), ('run-time', 1), ('runtime', 1), ('runtime-error', 1), ('self-explanatory', 1), ('short code', 1), ('simplest', 1), ('single line', 1), ('slicing', 1), ('small', 1), ('smart', 1), ('space-efficient', 1), ('split-list', 1), ('stl', 1), ('string concatenation', 1), ('string functions', 1), ('string manipulation', 1), ('string-searching', 1), ('substring', 1), ('swiftsolution', 1), ('time-limit-exceeded-c', 1), ('very easy', 1), ('why', 1), ('with-explanation', 1), ('working-solution', 1)]"
1114,Print in Order,https://leetcode.com/problems/print-in-order,"Suppose we have a class:


public class Foo {
  public void first() { print(""first""); }
  public void second() { print(""second""); }
  public void third() { print(""third""); }
}


The same instance of Foo will be passed to three different threads. Thread A will call first(), thread B will call second(), and thread C will call third(). Design a mechanism and modify the program to ensure that second() is executed after first(), and third() is executed after second().

Note:

We do not know how the threads will be scheduled in the operating system, even though the numbers in the input seem to imply the ordering. The input format you see is mainly to ensure our tests' comprehensiveness.",[],Easy,720,133,116003,78147,"[""Print FooBar Alternately""]","[('c++', 25), ('java', 17), ('c', 9), ('python', 9), ('concurrency', 8), ('python 3', 8), ('condition-variable', 7), ('mutex', 7), ('c#', 6), ('condition variable', 4), ('lock', 4), ('python3', 4), ('semaphore', 4), ('cpp', 3), ('easy-understanding', 3), ('explained', 3), ('c++11', 2), ('clean code', 2), ('easy', 2), ('java ac solution', 2), ('java-solution', 2), ('promise', 2), ('simple solution', 2), ('solution', 2), ('synchronized', 2), ('threading', 2), ('threads', 2), ('#concurrency', 1), ('#python', 1), ('#task', 1), ('#threading', 1), ('#threadpool', 1), ('answer', 1), ('anthony williams rules', 1), ('atomic', 1), ('atomics', 1), ('autoresetevent', 1), ('c++ 17', 1), ('c++ code', 1), ('c++ concurrency', 1), ('c++14', 1), ('c++17', 1), ('cas', 1), ('commented', 1), ('compare and swap', 1), ('conditions', 1), ('count down latch', 1), ('countdownlatch', 1), ('easiest', 1), ('easy understand', 1), ('easy understanding', 1), ('easy-to-understand', 1), ('easy-understand', 1), ('eazy', 1), ('event', 1), ('fast-solution', 1), ('future', 1), ('local', 1), ('lock-free', 1), ('lockguard', 1), ('locks', 1), ('monitor', 1), ('multiple solution', 1), ('naive-solution', 1), ('notify-one', 1), ('objective-c', 1), ('print-in-order', 1), ('python threading', 1), ('signal', 1), ('spinlock', 1), ('starter', 1), ('stl', 1), ('swiftsolution', 1), ('synchronization', 1), ('thread lock', 1), ('tle', 1), ('unique-lock', 1), ('using mutex is wrong', 1), ('volatile', 1), ('wait and notify', 1)]"
1106,Parsing A Boolean Expression,https://leetcode.com/problems/parsing-a-boolean-expression,"Return the result of evaluating a given boolean expression, represented as a string.

An expression can either be:


	""t"", evaluating to True;
	""f"", evaluating to False;
	""!(expr)"", evaluating to the logical NOT of the inner expression expr;
	""&(expr1,expr2,...)"", evaluating to the logical AND of 2 or more inner expressions expr1, expr2, ...;
	""|(expr1,expr2,...)"", evaluating to the logical OR of 2 or more inner expressions expr1, expr2, ...",['string'],Hard,353,21,22902,13621,[],"[('stack', 15), ('c++', 10), ('stacks', 10), ('c#', 7), ('python 3', 6), ('recursion', 6), ('cpp', 5), ('python', 5), ('java', 4), ('python3', 4), ('explained', 3), ('parser', 3), ('cpp solution', 2), ('iterative', 2), ('java-solution', 2), ('javascript', 2), ('kotlin', 2), ('recursive', 2), ('recursive-descent', 2), ('scala', 2), ('well-explained', 2), ('100 memory', 1), ('100 speed', 1), ('bitwise', 1), ('c', 1), ('c++ ac', 1), ('c++ code', 1), ('c++ solution', 1), ('c++14', 1), ('clean', 1), ('clean code', 1), ('clear', 1), ('clear-understanding', 1), ('commented code', 1), ('csharp', 1), ('divid and conquer', 1), ('doubt', 1), ('easy', 1), ('easy understanding', 1), ('explanation', 1), ('fast and simple', 1), ('fasterthan100', 1), ('functional programming', 1), ('golang', 1), ('in-place', 1), ('iterator', 1), ('js', 1), ('python3.8', 1), ('pythonpython3', 1), ('readable', 1), ('recursively', 1), ('recusion', 1), ('replace', 1), ('rust', 1), ('short-circuit', 1), ('simple', 1), ('simple clear c++ solution', 1), ('simple solution', 1), ('simplest', 1), ('single pass', 1), ('well-commented', 1)]"
1105,Filling Bookcase Shelves,https://leetcode.com/problems/filling-bookcase-shelves,"We have a sequence of books: the i-th book has thickness books[i][0] and height books[i][1].

We want to place these books in order onto bookcase shelves that have total width shelf_width.

We choose some of the books to place on this shelf (such that the sum of their thickness is <= shelf_width), then build another level of shelf of the bookcase so that the total height of the bookcase has increased by the maximum height of the books we just put down.  We repeat this process until there are no more books to place.

Note again that at each step of the above process, the order of the books we place is the same order as the given sequence of books.  For example, if we have an ordered list of 5 books, we might place the first and second book onto the first shelf, the third book on the second shelf, and the fourth and fifth book on the last shelf.

Return the minimum possible height that the total bookshelf can be after placing shelves in this manner.",['dynamic-programming'],Medium,866,55,41079,23632,[],"[('dynamic programming', 13), ('memoization', 10), ('cpp', 8), ('dp', 8), ('python', 7), ('java', 5), ('c++', 4), ('dfs', 4), ('dynamic-programming', 4), ('python 3', 4), ('python3', 4), ('explained', 3), ('recursion', 3), ('easy', 2), ('easytounderstand', 2), ('javascript', 2), ('recursive', 2), ('top down dp', 2), ('admin', 1), ('bottoms-up', 1), ('c#', 1), ('clean code', 1), ('clear', 1), ('dfs simple solution', 1), ('elegant', 1), ('explanation', 1), ('explanation of logic', 1), ('fast', 1), ('general', 1), ('iterative-dfs', 1), ('iteratively', 1), ('java ac solution', 1), ('java-solution', 1), ('leetcode-suggestions', 1), ('simple', 1), ('top down', 1), ('topdown', 1), ('typescript', 1)]"
1103,Distribute Candies to People,https://leetcode.com/problems/distribute-candies-to-people,"We distribute some number of candies, to a row of n = num_people people in the following way:

We then give 1 candy to the first person, 2 candies to the second person, and so on until we give n candies to the last person.

Then, we go back to the start of the row, giving n + 1 candies to the first person, n + 2 candies to the second person, and so on until we give 2 * n candies to the last person.

This process repeats (with us giving one more candy each time, and moving to the start of the row after we reach the end) until we run out of candies.  The last person will receive all of our remaining candies (not necessarily one more than the previous gift).

Return an array (of length num_people and sum candies) that represents the final distribution of candies.",['math'],Easy,526,151,91571,58057,[],"[('java', 34), ('c++', 31), ('python 3', 27), ('python', 21), ('math', 19), ('easy-understanding', 15), ('javascript', 15), ('cpp', 14), ('java-solution', 13), ('c#', 9), ('cpp solution', 8), ('easy-to-understand', 7), ('python3', 7), ('simple solution', 7), ('0ms', 6), ('brute force', 5), ('easy', 5), ('math-solution', 5), ('maths', 5), ('binary-search', 4), ('python2', 4), ('100 faster', 3), ('brute-force', 3), ('c++ code', 3), ('easy to understand', 3), ('explained', 3), ('fast and simple', 3), ('simple', 3), ('simulation', 3), ('swift', 3), ('arithmetic progression', 2), ('c++ solution', 2), ('clean code', 2), ('commented', 2), ('cpp easy', 2), ('cpp-solution', 2), ('easy-undestand', 2), ('easytounderstand', 2), ('explanation with logic', 2), ('fast-solution', 2), ('gauss', 2), ('loop', 2), ('math solution', 2), ('mathematics', 2), ('simplest', 2), ('typescript', 2), ('#easy-understand', 1), ('#simplest', 1), ('0ms faster tha', 1), ('100 beat', 1), ('100 memory', 1), ('100 speed', 1), ('100speed', 1), ('5 lines', 1), ('algorithms', 1), ('ap series', 1), ('beginner friendly', 1), ('binarysearch', 1), ('brutal force', 1), ('c', 1), ('c code', 1), ('c language', 1), ('c programming', 1), ('comments added', 1), ('constant space', 1), ('cplusplus', 1), ('cpp clear', 1), ('difficult', 1), ('easiest solution', 1), ('easy solution', 1), ('easy understanding', 1), ('easy undestanding', 1), ('easy-solution', 1), ('efficient', 1), ('explanation with code', 1), ('explanations', 1), ('fast', 1), ('fastest', 1), ('fastest c++ solution', 1), ('fastest solution', 1), ('gauss formula', 1), ('golang', 1), ('javascrip', 1), ('javascript solution', 1), ('js', 1), ('js javascript', 1), ('linear time', 1), ('linear-time', 1), ('logic explained clearly', 1), ('math-proof', 1), ('math.sqrt', 1), ('mathematic', 1), ('naive', 1), ('optimal', 1), ('optimal solution', 1), ('optimisation', 1), ('optimized solution', 1), ('performance', 1), ('php', 1), ('quadratic equation', 1), ('ruby', 1), ('rust', 1), ('sequence', 1), ('series', 1), ('simple clear c++ solution', 1), ('simple-solution', 1), ('simulacra', 1), ('sum', 1), ('summation', 1), ('swift5', 1), ('video link', 1), ('video solution', 1), ('video-explanation', 1), ('whileloop', 1), ('with comments', 1), ('with explanation', 1)]"
1104,Path In Zigzag Labelled Binary Tree,https://leetcode.com/problems/path-in-zigzag-labelled-binary-tree,"In an infinite binary tree where every node has two children, the nodes are labelled in row order.

In the odd numbered rows (ie., the first, third, fifth,...), the labelling is left to right, while in the even numbered rows (second, fourth, sixth,...), the labelling is right to left.



Given the label of a node in this tree, return the labels in the path from the root of the tree to the node with that label.","['math', 'tree']",Medium,627,190,33306,24451,[],"[('c++', 37), ('java', 18), ('cpp', 13), ('python 3', 11), ('math', 10), ('javascript', 7), ('logn', 7), ('python', 6), ('python3', 6), ('binary-tree', 5), ('java-solution', 5), ('100 speed', 4), ('0ms', 3), ('c#', 3), ('cpp easy', 3), ('easy-understanding', 3), ('100 faster', 2), ('100 faster runtime', 2), ('100 memory', 2), ('100 space', 2), ('c++ code', 2), ('cpp solution', 2), ('easytounderstand', 2), ('explained', 2), ('iterative', 2), ('log n', 2), ('logarithmic time', 2), ('mathematical solution', 2), ('#binarytree', 1), ('#levelwise', 1), ('#zigzag', 1), ('1-line', 1), ('100', 1), ('15 lines', 1), ('approach', 1), ('bfs', 1), ('bit masking', 1), ('bitwise', 1), ('c', 1), ('c++ solution', 1), ('c++11', 1), ('clean code', 1), ('commentary', 1), ('commented', 1), ('deque', 1), ('easy', 1), ('easy to understand', 1), ('easy-to-understand', 1), ('easy-undestand', 1), ('explanation', 1), ('explanation of logic', 1), ('explanation simple', 1), ('fast and simple', 1), ('fast-solution', 1), ('faster-than-100', 1), ('fastest', 1), ('for fun', 1), ('golang', 1), ('height of tree', 1), ('idea', 1), ('iteration', 1), ('java ac solution', 1), ('less memory than 100', 1), ('logarithmic space', 1), ('logarithmic-time', 1), ('logical', 1), ('math-solution', 1), ('math.log', 1), ('mathematics', 1), ('maths', 1), ('ologn', 1), ('one-pass', 1), ('power of two', 1), ('python2', 1), ('readable', 1), ('recursive', 1), ('recursive solution', 1), ('short code', 1), ('simple solution', 1), ('space', 1), ('speed', 1), ('swift', 1), ('swift5', 1), ('thought-process', 1), ('tree', 1), ('typescript', 1)]"
1096,Brace Expansion II,https://leetcode.com/problems/brace-expansion-ii,"Under a grammar given below, strings can represent a set of lowercase words.  Let's use R(expr) to denote the set of words the expression represents.

Grammar can best be understood through simple examples:


	Single letters represent a singleton set containing that word.
	
		R(""a"") = {""a""}
		R(""w"") = {""w""}
	
	
	When we take a comma delimited list of 2 or more expressions, we take the union of possibilities.
	
		R(""{a,b,c}"") = {""a"",""b"",""c""}
		R(""{{a,b},{b,c}}"") = {""a"",""b"",""c""} (notice the final set only contains each word at most once)
	
	
	When we concatenate two expressions, we take the set of possible concatenations between two words where the first word comes from the first expression and the second word comes from the second expression.
	
		R(""{a,b}{c,d}"") = {""ac"",""ad"",""bc"",""bd""}
		R(""a{b,c}{d,e}f{g,h}"") = {""abdfg"", ""abdfh"", ""abefg"", ""abefh"", ""acdfg"", ""acdfh"", ""acefg"", ""acefh""}
	
	


Formally, the 3 rules for our grammar:


	For every lowercase letter x, we have R(x) = {x}
	For expressions e_1, e_2, ... , e_k with k >= 2, we have R({e_1,e_2,...}) = R(e_1) ∪ R(e_2) ∪ ...
	For expressions e_1 and e_2, we have R(e_1 + e_2) = {a + b for (a, b) in R(e_1) × R(e_2)}, where + denotes concatenation, and × denotes the cartesian product.


Given an expression representing a set of words under the given grammar, return the sorted list of words that the expression represents.",['string'],Hard,265,163,21614,13563,"[""Brace Expansion""]","[('javascript', 5), ('stacks', 3), ('ast', 2), ('c#', 2), ('c++', 2), ('cpp', 2), ('java', 2), ('python', 2), ('python 3', 2), ('recursion', 2), ('scala', 2), ('5ms solution', 1), ('c++ code', 1), ('clear', 1), ('cpp solution', 1), ('easy-understanding', 1), ('easytounderstand', 1), ('explained', 1), ('immutable', 1), ('intuitive', 1), ('js', 1), ('modular', 1), ('parser', 1), ('picture explanation', 1), ('prefix tree', 1), ('python3', 1), ('recursive', 1), ('recursive solution', 1), ('recusion', 1), ('stack', 1), ('stack-based', 1), ('test-case', 1), ('top down approach', 1), ('trees', 1), ('trie', 1)]"
1115,Print FooBar Alternately,https://leetcode.com/problems/print-foobar-alternately,"Suppose you are given the following code:


class FooBar {
  public void foo() {
    for (int i = 0; i < n; i++) {
      print(""foo"");
    }
  }

  public void bar() {
    for (int i = 0; i < n; i++) {
      print(""bar"");
    }
  }
}


The same instance of FooBar will be passed to two different threads. Thread A will call foo() while thread B will call bar(). Modify the given program to output ""foobar"" n times.",[],Medium,369,29,64275,37851,"[""Print in Order"", ""Print Zero Even Odd""]","[('c++', 20), ('java', 17), ('concurrency', 11), ('semaphore', 11), ('mutex', 8), ('c#', 6), ('java-solution', 5), ('lock', 5), ('python 3', 5), ('c', 4), ('condition-variable', 4), ('cpp', 4), ('multithreading', 4), ('autoresetevent', 3), ('condition variable', 3), ('python', 3), ('python3', 3), ('threading', 3), ('volatile', 3), ('cpp-solution', 2), ('easy-undestand', 2), ('threads', 2), ('yield', 2), ('100 memory', 1), ('100 space', 1), ('atomics', 1), ('boolean', 1), ('c# solution', 1), ('c++ promise', 1), ('c++11', 1), ('clean code', 1), ('conditionvariable', 1), ('counter', 1), ('easiest', 1), ('easy understanding', 1), ('easy-understand', 1), ('easytounderstand', 1), ('explaination', 1), ('interlocked', 1), ('locks', 1), ('logical thinking', 1), ('monitor', 1), ('nonblocking', 1), ('parallel computing', 1), ('posix', 1), ('python2', 1), ('reentrantlock', 1), ('solution', 1), ('spinwait', 1), ('stl', 1), ('synchronized', 1), ('tle', 1), ('wait and notify', 1)]"
1117,Building H2O,https://leetcode.com/problems/building-h2o,"There are two kinds of threads, oxygen and hydrogen. Your goal is to group these threads to form water molecules. There is a barrier where each thread has to wait until a complete molecule can be formed. Hydrogen and oxygen threads will be given releaseHydrogen and releaseOxygen methods respectively, which will allow them to pass the barrier. These threads should pass the barrier in groups of three, and they must be able to immediately bond with each other to form a water molecule. You must guarantee that all the threads from one molecule bond before any other threads from the next molecule do.

In other words:


	If an oxygen thread arrives at the barrier when no hydrogen threads are present, it has to wait for two hydrogen threads.
	If a hydrogen thread arrives at the barrier when no other threads are present, it has to wait for an oxygen thread and another hydrogen thread.


We don’t have to worry about matching the threads up explicitly; that is, the threads do not necessarily know which other threads they are paired up with. The key is just that threads pass the barrier in complete sets; thus, if we examine the sequence of threads that bond and divide them into groups of three, each group should contain one oxygen and two hydrogen threads.

Write synchronization code for oxygen and hydrogen molecules that enforces these constraints.",[],Medium,248,75,38346,20334,[],"[('c++', 18), ('concurrency', 10), ('java', 10), ('semaphore', 10), ('barrier', 7), ('c#', 7), ('condition-variable', 5), ('python3', 5), ('python', 4), ('easy-to-understand', 3), ('monitor', 3), ('mutex', 3), ('python 3', 3), ('queue', 3), ('c', 2), ('condition variable', 2), ('cpp', 2), ('cyclicbarrier', 2), ('easy-understand', 2), ('java-solution', 2), ('judge-problem', 2), ('lock', 2), ('lock-free', 2), ('locks', 2), ('multithreading', 2), ('phaser', 2), ('c++ code', 1), ('c++14', 1), ('channel', 1), ('countdownlatch', 1), ('cute', 1), ('easy', 1), ('easy-understanding', 1), ('easy-undestand', 1), ('explained', 1), ('explanation', 1), ('explanation with code', 1), ('future', 1), ('golang', 1), ('heavily commented', 1), ('idiot', 1), ('intuitive', 1), ('lard', 1), ('linkedin', 1), ('moron', 1), ('no-thinking', 1), ('promise', 1), ('raii', 1), ('reentrantlock', 1), ('simple', 1), ('solution', 1), ('stl', 1), ('stupid', 1), ('test-cases', 1), ('threading', 1), ('threads', 1), ('unique-lock', 1), ('volatile', 1)]"
1095,Find in Mountain Array,https://leetcode.com/problems/find-in-mountain-array,"(This problem is an interactive problem.)

You may recall that an array A is a mountain array if and only if:


	A.length >= 3
	There exists some i with 0 < i < A.length - 1 such that:
	
		A[0] < A[1] < ... A[i-1] < A[i]
		A[i] > A[i+1] > ... > A[A.length - 1]
	
	


Given a mountain array mountainArr, return the minimum index such that mountainArr.get(index) == target.  If such an index doesn't exist, return -1.

You can't access the mountain array directly.  You may only access the array using a MountainArray interface:


	MountainArray.get(k) returns the element of the array at index k (0-indexed).
	MountainArray.length() returns the length of the array.


Submissions making more than 100 calls to MountainArray.get will be judged Wrong Answer.  Also, any solutions that attempt to circumvent the judge will result in disqualification.",['binary-search'],Hard,511,40,73212,26444,"[""Peak Index in a Mountain Array"", ""Minimum Number of Removals to Make Mountain Array""]","[('binary-search', 18), ('c++', 12), ('binary search', 9), ('binarysearch', 9), ('python', 9), ('java', 8), ('cpp', 6), ('easy-understanding', 5), ('javascript', 5), ('c#', 3), ('clean code', 3), ('python3', 3), ('simple', 3), ('cache', 2), ('java-solution', 2), ('logn', 2), ('search', 2), ('0ms', 1), ('1095', 1), ('binary', 1), ('c++ code', 1), ('c++ recursive solution', 1), ('clean', 1), ('cpp solution', 1), ('easy to understand', 1), ('easytounderstand', 1), ('explained', 1), ('faster', 1), ('find-peek-in-mountain', 1), ('golang solution', 1), ('golang-solution', 1), ('help me', 1), ('interative', 1), ('java ac solution', 1), ('java solution', 1), ('javascrip', 1), ('javascript recursive', 1), ('javascript solution', 1), ('js', 1), ('kotlin', 1), ('logarithmic time', 1), ('modular', 1), ('mrmagician', 1), ('order-agnostic-search', 1), ('peak finding', 1), ('peak valley approach', 1), ('php', 1), ('python 3', 1), ('readable', 1), ('recursive', 1), ('search a 2d matrix', 1), ('search for position', 1), ('searching', 1), ('swift', 1), ('traverse', 1), ('video explanation', 1)]"
1094,Car Pooling,https://leetcode.com/problems/car-pooling,"You are driving a vehicle that has capacity empty seats initially available for passengers.  The vehicle only drives east (ie. it cannot turn around and drive west.)

Given a list of trips, trip[i] = [num_passengers, start_location, end_location] contains information about the i-th trip: the number of passengers that must be picked up, and the locations to pick them up and drop them off.  The locations are given as the number of kilometers due east from your vehicle's initial location.

Return true if and only if it is possible to pick up and drop off all passengers for all the given trips.",['greedy'],Medium,1208,38,120178,71697,"[""Meeting Rooms II""]","[('java', 24), ('python 3', 24), ('python', 22), ('c++', 21), ('cpp', 15), ('easy-understanding', 15), ('javascript', 13), ('priority queue', 11), ('c#', 8), ('sorting', 8), ('heap', 7), ('java-solution', 7), ('cpp solution', 6), ('heapq', 6), ('greedy', 5), ('python3', 5), ('treemap', 5), ('easy', 4), ('easy-to-understand', 4), ('greedy approach', 4), ('hashmap', 4), ('linear time', 4), ('simple solution', 4), ('arrays', 3), ('c++ code', 3), ('car pooling', 3), ('dynamic programming', 3), ('efficient', 3), ('golang', 3), ('map', 3), ('php', 3), ('python2', 3), ('rust', 3), ('sort', 3), ('sweep line', 3), ('bucket', 2), ('comments', 2), ('cpp easy', 2), ('cpp-solution', 2), ('dp', 2), ('easy-undestand', 2), ('easytounderstand', 2), ('explained', 2), ('hashing', 2), ('intuitive', 2), ('kotlin', 2), ('line sweep', 2), ('prefix sum', 2), ('sorted array', 2), ('timestamp', 2), ('100 beat', 1), ('100 faster', 1), ('100 faster runtime', 1), ('100 memory', 1), ('100 space', 1), ('1ms', 1), ('1ms runtime', 1), ('99 faster', 1), ('beginner friendly', 1), ('boundary count', 1), ('brute force', 1), ('c', 1), ('c++ solution', 1), ('c++11', 1), ('carpooling', 1), ('clean code', 1), ('concise', 1), ('constant memory', 1), ('csharp', 1), ('cumulative sum', 1), ('detailed explanation', 1), ('dict', 1), ('dictionary', 1), ('dynamic-programming', 1), ('easiest', 1), ('easy to understand', 1), ('easy understand', 1), ('easy understanding', 1), ('easy-understand', 1), ('efficient approach', 1), ('es6', 1), ('event', 1), ('explaination', 1), ('explanation of logic', 1), ('explanations', 1), ('fast and simple', 1), ('faster than 99.66', 1), ('fastest solution', 1), ('go', 1), ('google interview', 1), ('hash', 1), ('heaps', 1), ('heapsort', 1), ('improvement-needed', 1), ('inclusion-exclusion', 1), ('interval scheduling', 1), ('intervals', 1), ('interview-friendly', 1), ('iteration', 1), ('java ac solution', 1), ('js', 1), ('kotlinvim', 1), ('linear-time', 1), ('list', 1), ('memoisation', 1), ('merge-intervals', 1), ('min heap', 1), ('no sort', 1), ('no sorting', 1), ('observations', 1), ('optimal', 1), ('overlapping', 1), ('overlapping intervals', 1), ('pair', 1), ('priority-queue', 1), ('priorityqueue', 1), ('pyhton 3', 1), ('python3.8', 1), ('quadratic', 1), ('queue', 1), ('quick sort', 1), ('quick-sort', 1), ('readable', 1), ('ruby', 1), ('short', 1), ('simple', 1), ('simple clear c++ solution', 1), ('simple logic', 1), ('stack', 1), ('sweepline', 1), ('swift', 1), ('typescript', 1), ('video', 1), ('video explanation', 1), ('video solution', 1), ('video-explanation', 1), ('with documentation', 1), ('with explanation', 1), ('with-explanation', 1), ('withexplanation', 1)]"
1093,Statistics from a Large Sample,https://leetcode.com/problems/statistics-from-a-large-sample,"You are given a large sample of integers in the range [0, 255]. Since the sample is so large, it is represented by an array count where count[k] is the number of times that k appears in the sample.

Calculate the following statistics:


	minimum: The minimum element in the sample.
	maximum: The maximum element in the sample.
	mean: The average of the sample, calculated as the total sum of all elements divided by the total number of elements.
	median:
	
		If the sample has an odd number of elements, then the median is the middle element once the sample is sorted.
		If the sample has an even number of elements, then the median is the average of the two middle elements once the sample is sorted.
	
	
	mode: The number that appears the most in the sample. It is guaranteed to be unique.


Return the statistics of the sample as an array of floating-point numbers [minimum, maximum, mean, median, mode]. Answers within 10-5 of the actual answer will be accepted.","['math', 'two-pointers']",Medium,13,12,21962,10665,[],"[('python 3', 6), ('java', 4), ('python', 3), ('cpp', 2), ('easy-understanding', 2), ('java-solution', 2), ('javascript', 2), ('c++', 1), ('c++ code', 1), ('clean code', 1), ('cpp solution', 1), ('deque', 1), ('easy', 1), ('easy undestanding', 1), ('easy-understand', 1), ('easy-undestand', 1), ('explained', 1), ('golang', 1), ('golang-solution', 1), ('javascript brute force', 1), ('kotlin', 1), ('logical', 1), ('math.min', 1), ('mathematic', 1), ('mathematics', 1), ('max', 1), ('maximum', 1), ('mean', 1), ('min', 1), ('minimum', 1), ('mode', 1), ('python3', 1), ('queue', 1), ('simulation', 1), ('solution', 1), ('statistics', 1), ('swift', 1)]"
1091,Shortest Path in Binary Matrix,https://leetcode.com/problems/shortest-path-in-binary-matrix,"Given an n x n binary matrix grid, return the length of the shortest clear path in the matrix. If there is no clear path, return -1.

A clear path in a binary matrix is a path from the top-left cell (i.e., (0, 0)) to the bottom-right cell (i.e., (n - 1, n - 1)) such that:


	All the visited cells of the path are 0.
	All the adjacent cells of the path are 8-directionally connected (i.e., they are different and they share an edge or a corner).


The length of a clear path is the number of visited cells of this path.",['breadth-first-search'],Medium,1176,77,212145,85343,[],"[('bfs', 109), ('c++', 39), ('python', 36), ('java', 26), ('breadth first search', 16), ('queue', 15), ('python 3', 14), ('cpp', 13), ('javascript', 11), ('clean code', 8), ('python3', 8), ('bfs simple solution', 6), ('c#', 6), ('java-solution', 6), ('dfs', 5), ('easy-understanding', 5), ('explained', 4), ('kotlin', 4), ('simple', 4), ('dynamic programming', 3), ('easytounderstand', 3), ('golang', 3), ('help needed', 3), ('rust', 3), ('a star', 2), ('a-star search', 2), ('bidirectional bfs', 2), ('breadth first traversal', 2), ('c++17', 2), ('cpp solution', 2), ('deque', 2), ('easy', 2), ('easy-to-understand', 2), ('fast', 2), ('go', 2), ('golang-solution', 2), ('java ac solution', 2), ('javascript solution', 2), ('readable', 2), ('recursion', 2), ('swift', 2), ('test case generator', 2), ('test-cases', 2), ('video-explanation', 2), ('a-star', 1), ('best-solution-ever', 1), ('bi-direction', 1), ('breadth-first-search', 1), ('c++ iterative sol', 1), ('c++ solution', 1), ('c++code', 1), ('clean code python', 1), ('clean-efficient-code', 1), ('commented', 1), ('comments', 1), ('concise', 1), ('cpp easy', 1), ('depth first search', 1), ('depth first traversal', 1), ('dfs solution', 1), ('dijkstra', 1), ('dijsktra', 1), ('dp', 1), ('dp pattern', 1), ('easiest', 1), ('easy python', 1), ('easy to read', 1), ('easy to understand', 1), ('explaination', 1), ('explanation of logic', 1), ('fast and simple', 1), ('go-solution', 1), ('heapq', 1), ('help', 1), ('in-place', 1), ('interview', 1), ('iterative bfs', 1), ('iteratively', 1), ('java bfs', 1), ('js', 1), ('keep it simple', 1), ('kotlin-solution', 1), ('matrix', 1), ('oop', 1), ('optimisation', 1), ('optimised code', 1), ('priority queue', 1), ('priority-queue', 1), ('python bfs iterative easy', 1), ('pythonsolution', 1), ('queue and stack', 1), ('queue-approach', 1), ('redirect21', 1), ('ruby', 1), ('scala', 1), ('shortest', 1), ('shortest path', 1), ('shortestpathbinarymatrix', 1), ('simple clear c++ solution', 1), ('simple python', 1), ('simple understanding', 1), ('structure', 1), ('test-case-validation', 1), ('testcase-wrong-and-not', 1), ('time limit exceeded', 1), ('ting', 1), ('tle', 1), ('tuple', 1), ('tuples', 1)]"
1092,Shortest Common Supersequence ,https://leetcode.com/problems/shortest-common-supersequence,"Given two strings str1 and str2, return the shortest string that has both str1 and str2 as subsequences.  If multiple answers exist, you may return any of them.

(A string S is a subsequence of string T if deleting some number of characters from T (possibly 0, and the characters are chosen anywhere from T) results in the string S.)",['dynamic-programming'],Hard,974,26,43134,22994,"[""Longest Common Subsequence""]","[('dynamic programming', 42), ('lcs', 29), ('dp', 24), ('c++', 23), ('java', 12), ('cpp', 10), ('python', 8), ('cpp solution', 7), ('python 3', 5), ('javascript', 4), ('dynamic-programming', 3), ('easy-to-understand', 3), ('easysolution', 3), ('python3', 3), ('solution', 3), ('supersequence', 3), ('c#', 2), ('dp-programming', 2), ('easy', 2), ('easy-understanding', 2), ('explanation of logic', 2), ('java-solution', 2), ('longest common sequence', 2), ('longest-common-subsq', 2), ('memoization', 2), ('recursion', 2), ('scs', 2), ('shortest common superseq', 2), ('string', 2), ('tabulation', 2), ('top down dp', 2), ('#1092', 1), ('#dynamic-programming', 1), ('2d-dp', 1), ('best explaination', 1), ('bottom-up-algorithm', 1), ('c++ easy to understand', 1), ('c++ solution', 1), ('clean code', 1), ('clear', 1), ('common supersequence', 1), ('dfs', 1), ('different approach', 1), ('dp top down', 1), ('dp with lcs', 1), ('dp-iterative', 1), ('dp-techqique', 1), ('dynamic programmin', 1), ('easy-understand', 1), ('efficient', 1), ('explained', 1), ('fast', 1), ('fast and simple', 1), ('iterative', 1), ('iterative approch', 1), ('iterative dp', 1), ('kotlin', 1), ('memory-limited-exceeded', 1), ('path-tracking', 1), ('python3.8', 1), ('pythonic', 1), ('ruby', 1), ('shortest common', 1), ('simple solution', 1), ('solutionsharing', 1), ('solved', 1), ('stringbuilder', 1), ('top down', 1), ('top down approach', 1), ('very easy to understand', 1), ('zea7ot', 1)]"
1090,Largest Values From Labels,https://leetcode.com/problems/largest-values-from-labels,"We have a set of items: the i-th item has value values[i] and label labels[i].

Then, we choose a subset S of these items, such that:


	|S| <= num_wanted
	For every label L, the number of items in S with label L is <= use_limit.


Return the largest possible sum of the subset S.","['hash-table', 'greedy']",Medium,186,448,33960,20412,[],"[('greedy', 11), ('priority queue', 8), ('python', 8), ('c++', 7), ('java', 6), ('python3', 5), ('hashmap', 4), ('javascript', 4), ('c#', 3), ('cpp', 3), ('easy-understanding', 3), ('hash table', 3), ('python 3', 3), ('sort', 3), ('sorting', 3), ('golang', 2), ('heap', 2), ('priorityqueue', 2), ('swift', 2), ('c++ code', 1), ('c++11', 1), ('constructive', 1), ('cpp solution', 1), ('easy', 1), ('easy understanding', 1), ('easy-implementation', 1), ('easy-understand', 1), ('easy-undestand', 1), ('greedy algorithm', 1), ('javascrip', 1), ('javascript unionfind', 1), ('map', 1), ('maps', 1), ('max heap', 1), ('max-heap', 1), ('priority-queue', 1), ('queue', 1), ('quickselect', 1), ('readable', 1), ('set', 1), ('simple', 1), ('simple solution', 1), ('sorted', 1), ('sorted array', 1), ('stl', 1), ('treemap', 1), ('unordered', 1), ('unorderedmap', 1), ('vector', 1)]"
1089,Duplicate Zeros,https://leetcode.com/problems/duplicate-zeros,"Given a fixed length array arr of integers, duplicate each occurrence of zero, shifting the remaining elements to the right.

Note that elements beyond the length of the original array are not written.

Do the above modifications to the input array in place, do not return anything from your function.",['array'],Easy,949,319,290727,149751,[],"[('python 3', 29), ('python', 28), ('c++', 24), ('java', 24), ('javascript', 20), ('python3', 20), ('cpp', 15), ('easy-understanding', 8), ('java-solution', 8), ('golang', 7), ('in-place', 7), ('c#', 6), ('ruby', 6), ('python2', 5), ('c++ code', 4), ('inplace', 4), ('queue', 4), ('rust', 4), ('simple', 4), ('commented', 3), ('constant space', 3), ('cpp solution', 3), ('easy', 3), ('easy-to-understand', 3), ('easytounderstand', 3), ('fast-solution', 3), ('linear time', 3), ('simple solution', 3), ('two-pointers', 3), ('go', 2), ('golang-solution', 2), ('linear', 2), ('naive', 2), ('php', 2), ('straight-forward', 2), ('#c++', 1), ('#cpp', 1), ('#javascript', 1), ('#simple', 1), ('#withcomments', 1), ('100', 1), ('6 lines', 1), ('array', 1), ('array of vectors', 1), ('arraylist', 1), ('beats 95', 1), ('beginner friendly', 1), ('best space complexity', 1), ('best-solution', 1), ('best-submission', 1), ('brute force', 1), ('c++ solution', 1), ('c++11', 1), ('clean-code', 1), ('comments', 1), ('constant memory', 1), ('cpp easy', 1), ('cpp-solution', 1), ('deque', 1), ('duplicate zeroes', 1), ('duplicatezeros', 1), ('easy to understand', 1), ('easy-solution', 1), ('easy-understand', 1), ('easy-undestand', 1), ('explanation', 1), ('fast', 1), ('faster than 99.41', 1), ('go-solution', 1), ('in-place operation', 1), ('java simple', 1), ('javascrip', 1), ('js', 1), ('js javascript', 1), ('memory optimized', 1), ('no extra space', 1), ('one pass solution', 1), ('one-pass', 1), ('onepass', 1), ('optimal', 1), ('pointer', 1), ('pointer arithmetic', 1), ('pyhton', 1), ('python deque', 1), ('recursion', 1), ('rust vec', 1), ('scala', 1), ('short code', 1), ('simple clear c++ solution', 1), ('simple-solution', 1), ('single pass', 1), ('space o1', 1), ('space-efficient', 1), ('stacks', 1), ('stl', 1), ('stl vector', 1), ('subarray', 1), ('swift', 1), ('troubleshooting', 1), ('two pass', 1), ('two pointers', 1), ('two-pass', 1), ('two-pointer', 1), ('unit-test', 1)]"
1079,Letter Tile Possibilities,https://leetcode.com/problems/letter-tile-possibilities,"You have n  tiles, where each tile has one letter tiles[i] printed on it.

Return the number of possible non-empty sequences of letters you can make using the letters printed on those tiles.",['backtracking'],Medium,1025,35,63187,48011,[],"[('backtracking', 38), ('python', 17), ('c++', 15), ('dfs', 13), ('permutations', 12), ('javascript', 10), ('python3', 9), ('python 3', 8), ('cpp solution', 7), ('java', 7), ('cpp', 5), ('c#', 3), ('java-solution', 3), ('js', 3), ('math', 3), ('accepted', 2), ('backtrack', 2), ('c++11', 2), ('combination', 2), ('factorial', 2), ('golang', 2), ('java ac solution', 2), ('recursion', 2), ('set', 2), ('swift', 2), ('#backtracking', 1), ('#c++', 1), ('#combination', 1), ('#math', 1), ('#permutation', 1), ('#recursion', 1), ('algorithms', 1), ('backrtracking', 1), ('backstracking', 1), ('backtracing', 1), ('beats 100', 1), ('bit masking', 1), ('bitmasking', 1), ('c++ code', 1), ('c++17', 1), ('combinations', 1), ('commetend', 1), ('constructive', 1), ('detailed explanation', 1), ('dfs simple', 1), ('dfs solution', 1), ('dp', 1), ('dp python', 1), ('dynamic programming', 1), ('easy understanding', 1), ('easy-to-understand', 1), ('easy-understanding', 1), ('easytounderstand', 1), ('explaination', 1), ('explanations', 1), ('itertools', 1), ('java simple', 1), ('js javascript', 1), ('library', 1), ('mathematics', 1), ('one-liner', 1), ('permutations ii', 1), ('readable', 1), ('recursion tree', 1), ('recursively', 1), ('ruby', 1), ('sets', 1), ('simple', 1), ('simplest', 1), ('solution', 1), ('solution-python', 1), ('space', 1), ('subset', 1), ('subsets', 1), ('swift5', 1), ('thoughtworks', 1), ('typescript', 1), ('unorderedmap', 1)]"
1081,Smallest Subsequence of Distinct Characters,https://leetcode.com/problems/smallest-subsequence-of-distinct-characters,"Return the lexicographically smallest subsequence of s that contains all the distinct characters of s exactly once.

Note: This question is the same as 316: https://leetcode.com/problems/remove-duplicate-letters/","['string', 'stack', 'greedy']",Medium,895,110,42282,22661,"[""Find the Most Competitive Subsequence""]","[('stack', 13), ('c++', 8), ('python 3', 6), ('cpp', 5), ('java', 5), ('python', 5), ('stacks', 5), ('greedy', 4), ('stack-based', 3), ('easy-to-understand', 2), ('explained solution', 2), ('python3', 2), ('swift', 2), ('#java8', 1), ('#question', 1), ('2ms', 1), ('5ms', 1), ('alphabetical order', 1), ('array', 1), ('arraydeque', 1), ('beating-100-submissions', 1), ('beats 100', 1), ('c', 1), ('c programming', 1), ('c#', 1), ('c++ solution', 1), ('char compare', 1), ('commented', 1), ('counter', 1), ('cpp easy', 1), ('cpp solution', 1), ('dictionary', 1), ('dictionary features', 1), ('easy-understanding', 1), ('easytounderstand', 1), ('es6', 1), ('explained', 1), ('explanation with code', 1), ('faster than 100.00', 1), ('fastest java solution', 1), ('fastest solution', 1), ('golang', 1), ('hashmap', 1), ('help', 1), ('java-solution', 1), ('javascript', 1), ('lexicographical order', 1), ('map', 1), ('rajat', 1), ('recursion', 1), ('ruby', 1), ('string', 1), ('tail-recursion', 1)]"
1080,Insufficient Nodes in Root to Leaf Paths,https://leetcode.com/problems/insufficient-nodes-in-root-to-leaf-paths,"Given the root of a binary tree, consider all root to leaf paths: paths from the root to any leaf.  (A leaf is a node with no children.)

A node is insufficient if every such root to leaf path intersecting this node has sum strictly less than limit.

Delete all insufficient nodes simultaneously, and return the root of the resulting binary tree.",['depth-first-search'],Medium,254,382,36926,18518,[],"[('dfs', 8), ('c++', 4), ('java', 4), ('python', 4), ('python 3', 4), ('binary-tree', 3), ('python3', 3), ('javascript', 2), ('recursion', 2), ('c', 1), ('c#', 1), ('cpp', 1), ('dfs with memo', 1), ('dfs-tree', 1), ('easy-understanding', 1), ('hashset', 1), ('hashtable', 1), ('help', 1), ('pattern matching', 1), ('postorder-traversal', 1), ('pruning', 1), ('python2', 1), ('recursively', 1), ('recusion', 1), ('scala', 1), ('testcases', 1), ('tree', 1), ('tree-traversal', 1), ('typescript', 1)]"
1078,Occurrences After Bigram,https://leetcode.com/problems/occurrences-after-bigram,"Given words first and second, consider occurrences in some text of the form ""first second third"", where second comes immediately after first, and third comes immediately after second.

For each such occurrence, add ""third"" to the answer, and return the answer.",['hash-table'],Easy,229,231,60929,39591,[],"[('c++', 27), ('python 3', 18), ('java', 16), ('cpp', 13), ('python', 13), ('javascript', 12), ('python3', 12), ('0ms', 8), ('string', 8), ('java-solution', 7), ('easy-understanding', 5), ('cpp solution', 4), ('golang', 4), ('c#', 3), ('go-solution', 3), ('hash table', 3), ('hashmap', 3), ('split', 3), ('stringstream', 3), ('array', 2), ('beginner friendly', 2), ('easy', 2), ('easy to understand', 2), ('go', 2), ('kmp', 2), ('map', 2), ('one-liner', 2), ('simple', 2), ('simple solution', 2), ('#codeboy', 1), ('#easy', 1), ('#easy-understand', 1), ('#easy-understanding', 1), ('#easysolution', 1), ('#python', 1), ('#python 3', 1), ('100 faster', 1), ('100 memory', 1), ('100 space', 1), ('100 speed', 1), ('2 line python solution', 1), ('2 liner', 1), ('2 lines', 1), ('ac', 1), ('algorithm-explained', 1), ('arraylist', 1), ('arrays', 1), ('c', 1), ('c++ code', 1), ('c++11', 1), ('c++20', 1), ('clear', 1), ('comments', 1), ('comments-added', 1), ('concise-solution', 1), ('cpp easy', 1), ('easy to read', 1), ('easy understand', 1), ('easy-to-understand', 1), ('easy-understand', 1), ('easy-undestand', 1), ('efficient', 1), ('explanation with code', 1), ('fast-solution', 1), ('functional programming', 1), ('go lang', 1), ('golang-solution', 1), ('gorillaz', 1), ('ide', 1), ('if-else', 1), ('iterative', 1), ('iterative traversal', 1), ('java solution', 1), ('kotlin', 1), ('linear', 1), ('linear time', 1), ('linked-list', 1), ('one line', 1), ('python combinatorics', 1), ('python2', 1), ('regex', 1), ('regexp', 1), ('ruby', 1), ('simple-solution', 1), ('simplest', 1), ('space', 1), ('speed', 1), ('state machine', 1), ('straight forward', 1), ('straightforward', 1), ('string-operation', 1), ('stringview', 1), ('swift', 1), ('two-line', 1), ('vector', 1)]"
1073,Adding Two Negabinary Numbers,https://leetcode.com/problems/adding-two-negabinary-numbers,"Given two numbers arr1 and arr2 in base -2, return the result of adding them together.

Each number is given in array format:  as an array of 0s and 1s, from most significant bit to least significant bit.  For example, arr = [1,1,0,1] represents the number (-2)^3 + (-2)^2 + (-2)^0 = -3.  A number arr in array, format is also guaranteed to have no leading zeros: either arr == [0] or arr[0] == 1.

Return the result of adding arr1 and arr2 in the same format: as an array of 0s and 1s with no leading zeros.",['math'],Medium,157,70,25553,8911,[],"[('python', 5), ('golang', 3), ('c++', 2), ('bit manipulation', 1), ('bit-manipulation', 1), ('cpp', 1), ('easytounderstand', 1), ('java', 1), ('javascript', 1), ('python3', 1), ('ruby', 1), ('rust', 1)]"
1072,Flip Columns For Maximum Number of Equal Rows,https://leetcode.com/problems/flip-columns-for-maximum-number-of-equal-rows,"You are given an m x n binary matrix matrix.

You can choose any number of columns in the matrix and flip every cell in that column (i.e., Change the value of the cell from 0 to 1 or vice versa).

Return the maximum number of rows that have all values equal after some number of flips.",['hash-table'],Medium,361,31,21502,13266,[],"[('python', 4), ('c#', 3), ('hashmap', 3), ('javascript', 3), ('c++', 2), ('golang', 2), ('python3', 2), ('simple solution', 2), ('bit manipulation', 1), ('cpp', 1), ('easy-understanding', 1), ('easy-undestand', 1), ('easytounderstand', 1), ('flipcolumnsformaxequalrow', 1), ('hash map', 1), ('hashtable', 1), ('java-solution', 1), ('javasolution', 1), ('map', 1), ('rust', 1), ('trie', 1), ('xor', 1)]"
1071,Greatest Common Divisor of Strings,https://leetcode.com/problems/greatest-common-divisor-of-strings,"For two strings s and t, we say ""t divides s"" if and only if s = t + ... + t  (t concatenated with itself 1 or more times)

Given two strings str1 and str2, return the largest string x such that x divides both str1 and str2.",['string'],Easy,790,184,91782,47522,[],"[('python', 17), ('python3', 13), ('gcd', 12), ('c++', 10), ('java', 10), ('python 3', 9), ('javascript', 7), ('java-solution', 6), ('c#', 5), ('cpp', 4), ('easy-understanding', 4), ('recursion', 4), ('brute-force', 2), ('euclidean', 2), ('golang', 2), ('java ac solution', 2), ('kmp algorithm', 2), ('ruby', 2), ('string', 2), ('0ms', 1), ('algorithms', 1), ('brute force', 1), ('c++ code', 1), ('c++11', 1), ('constant space', 1), ('cpp solution', 1), ('csharp', 1), ('easy-to-understand', 1), ('easy-understand', 1), ('easytounderstand', 1), ('euclidean algorithm', 1), ('explaination', 1), ('explanations', 1), ('fastest', 1), ('go', 1), ('hash table', 1), ('hashmap', 1), ('intutive', 1), ('iterative', 1), ('iteratively', 1), ('javascript solution', 1), ('js', 1), ('js javascript', 1), ('math', 1), ('php', 1), ('preifx-function', 1), ('proof', 1), ('recursive', 1), ('regex', 1), ('runtime', 1), ('rust', 1), ('self explanatory', 1), ('self-explanatory', 1), ('simplest', 1), ('stl', 1), ('straight-forward', 1), ('straightforward', 1), ('strings', 1), ('ultra simple', 1), ('unit-test', 1), ('upvote', 1), ('while-loop', 1), ('wrong output', 1)]"
1074,Number of Submatrices That Sum to Target,https://leetcode.com/problems/number-of-submatrices-that-sum-to-target,"Given a matrix and a target, return the number of non-empty submatrices that sum to target.

A submatrix x1, y1, x2, y2 is the set of all cells matrix[x][y] with x1 <= x <= x2 and y1 <= y <= y2.

Two submatrices (x1, y1, x2, y2) and (x1', y1', x2', y2') are different if they have some coordinate that is different: for example, if x1 != x1'.","['array', 'dynamic-programming', 'sliding-window']",Hard,1085,32,56990,36987,[],"[('c++', 12), ('prefix sum', 10), ('cpp', 8), ('javascript', 7), ('dp', 5), ('rust', 5), ('c#', 4), ('golang', 4), ('hashmap', 4), ('java', 4), ('an7one', 3), ('dynamic-programming', 3), ('easy', 3), ('java-solution', 3), ('prefix-sums', 3), ('python', 3), ('python 3', 3), ('easy-understanding', 2), ('go', 2), ('prefix-sum', 2), ('simple', 2), ('2d-array', 1), ('96.2faster', 1), ('beats 100', 1), ('brute force', 1), ('commented', 1), ('compression', 1), ('constant-space', 1), ('cpp solution', 1), ('cumulative sums', 1), ('dictionary', 1), ('easy-to-understand', 1), ('explained', 1), ('explained solution', 1), ('explanation', 1), ('javascript solution', 1), ('js', 1), ('map', 1), ('matrix', 1), ('optimal', 1), ('prefixsum', 1), ('python3', 1), ('ruby', 1), ('sliding window', 1), ('slidingwindow', 1), ('subarray sum equals k', 1), ('submatricessummatchtarget', 1), ('swift', 1), ('typescript', 1), ('unordered map', 1), ('video-explanation', 1)]"
1054,Distant Barcodes,https://leetcode.com/problems/distant-barcodes,"In a warehouse, there is a row of barcodes, where the ith barcode is barcodes[i].

Rearrange the barcodes so that no two adjacent barcodes are equal. You may return any answer, and it is guaranteed an answer exists.","['heap', 'sort']",Medium,570,24,50837,22548,[],"[('priority queue', 14), ('java', 13), ('hashmap', 11), ('c++', 8), ('python', 8), ('python3', 5), ('heap', 4), ('python 3', 4), ('cpp', 3), ('easy-understanding', 3), ('priority-queue', 3), ('100', 2), ('golang', 2), ('heapq', 2), ('java ac solution', 2), ('java-solution', 2), ('javascript', 2), ('maxheap', 2), ('simple solution', 2), ('sorted array', 2), ('beginner friendly', 1), ('c#', 1), ('clean code', 1), ('clean solution', 1), ('comments', 1), ('counter', 1), ('cpp solution', 1), ('dict', 1), ('dictionary', 1), ('easy', 1), ('easy solution', 1), ('easy to read', 1), ('evenodd indices', 1), ('explained', 1), ('frog-jump', 1), ('greedy', 1), ('heaps', 1), ('in-place', 1), ('linear time', 1), ('map', 1), ('max heap', 1), ('multimap', 1), ('observations', 1), ('pq', 1), ('priorityqueue', 1), ('queue', 1), ('readable', 1), ('reorganize list', 1), ('ruby', 1), ('set', 1), ('simple', 1), ('sorting', 1), ('unordered map', 1)]"
1053,Previous Permutation With One Swap,https://leetcode.com/problems/previous-permutation-with-one-swap,"Given an array of positive integers arr (not necessarily distinct), return the lexicographically largest permutation that is smaller than arr, that can be made with exactly one swap (A swap exchanges the positions of two numbers arr[i] and arr[j]). If it cannot be done, then return the same array.","['array', 'greedy']",Medium,13,2,40745,20917,[],"[('c++', 10), ('python', 9), ('python 3', 7), ('cpp', 4), ('java', 4), ('javascript', 3), ('linear time', 3), ('python3', 3), ('c#', 2), ('constant space', 2), ('easy-understanding', 2), ('golang', 2), ('greedy', 2), ('java-solution', 2), ('100 memory', 1), ('100 space', 1), ('2 pointers', 1), ('beginner friendly', 1), ('commented code', 1), ('comments-added', 1), ('cpp solution', 1), ('dp', 1), ('easy-undestand', 1), ('easytounderstand', 1), ('es6', 1), ('explained', 1), ('explanation with code', 1), ('fast and simple', 1), ('greedy algorithm', 1), ('kotlinvim', 1), ('linear time complexity', 1), ('modular', 1), ('nextpermutation', 1), ('optimal', 1), ('optimized', 1), ('prev permutation', 1), ('prvpermutationwith1swap', 1), ('stack', 1), ('testcase error', 1), ('treemap', 1), ('two-pointer', 1)]"
1052,Grumpy Bookstore Owner,https://leetcode.com/problems/grumpy-bookstore-owner,"Today, the bookstore owner has a store open for customers.length minutes.  Every minute, some number of customers (customers[i]) enter the store, and all those customers leave after the end of that minute.

On some minutes, the bookstore owner is grumpy.  If the bookstore owner is grumpy on the i-th minute, grumpy[i] = 1, otherwise grumpy[i] = 0.  When the bookstore owner is grumpy, the customers of that minute are not satisfied, otherwise they are satisfied.

The bookstore owner knows a secret technique to keep themselves not grumpy for X minutes straight, but can only use it once.

Return the maximum number of customers that can be satisfied throughout the day.","['array', 'sliding-window']",Medium,743,71,69996,39197,[],"[('sliding-window', 29), ('c++', 19), ('python 3', 15), ('slidingwindow', 15), ('sliding window', 13), ('cpp', 11), ('java', 11), ('linear time', 11), ('python', 11), ('c#', 6), ('python3', 6), ('easy-understanding', 5), ('java-solution', 5), ('slide window', 4), ('javascript', 3), ('simple', 3), ('sliding window algorithm', 3), ('c++11', 2), ('fixed-size-sliding-window', 2), ('golang', 2), ('no extra space', 2), ('prefix sum', 2), ('sliding-window-maximum', 2), ('0ms', 1), ('1 pass', 1), ('100 speed', 1), ('beats 100', 1), ('brutal force optmized', 1), ('brute force to optimal', 1), ('bud', 1), ('c', 1), ('clean code', 1), ('concise-solution', 1), ('constant auxiliary space', 1), ('constant space', 1), ('cpp solution', 1), ('easy-to-understand', 1), ('explaination', 1), ('explained', 1), ('explained solution', 1), ('explanation', 1), ('explanation with code', 1), ('explanations', 1), ('go', 1), ('golang-solution', 1), ('greedy', 1), ('javacript', 1), ('kotlin', 1), ('linkedlists', 1), ('list comprehension', 1), ('maximum', 1), ('one pass', 1), ('optimized', 1), ('presum', 1), ('priority queue', 1), ('python3.8', 1), ('readable', 1), ('rolling sum', 1), ('rolling-sum', 1), ('ruby', 1), ('self explanatory', 1), ('simple solution', 1), ('simple-efficient', 1), ('single pass', 1), ('space o1', 1), ('static size window', 1), ('swift', 1), ('template', 1), ('ultra easy', 1), ('upvote', 1), ('window', 1), ('zea7ot', 1)]"
1051,Height Checker,https://leetcode.com/problems/height-checker,"A school is trying to take an annual photo of all the students. The students are asked to stand in a single file line in non-decreasing order by height. Let this ordering be represented by the integer array expected where expected[i] is the expected height of the ith student in line.

You are given an integer array heights representing the current order that the students are standing in. Each heights[i] is the height of the ith student in line (0-indexed).

Return the number of indices where heights[i] != expected[i].",['array'],Easy,34,6,168827,122337,[],"[('c++', 35), ('javascript', 30), ('python', 29), ('python 3', 28), ('cpp', 23), ('java', 18), ('sorted array', 14), ('python3', 12), ('easy-to-understand', 10), ('easy-understanding', 9), ('golang', 9), ('c#', 8), ('c', 7), ('java-solution', 7), ('sorting', 7), ('cpp solution', 6), ('easy-undestand', 6), ('one-liner', 6), ('ruby', 6), ('easytounderstand', 5), ('counting-sort', 4), ('sort', 4), ('array-sort', 3), ('easy', 3), ('fast', 3), ('linear time', 3), ('one line', 3), ('array', 2), ('c++11', 2), ('c++14', 2), ('clean code', 2), ('cpp easy', 2), ('cpp-solution', 2), ('explained', 2), ('explanation', 2), ('explanations', 2), ('fast-solution', 2), ('faster than 100', 2), ('go', 2), ('golang-solution', 2), ('hashmap', 2), ('height checker', 2), ('javascrip', 2), ('javascript solution', 2), ('kotlin', 2), ('reduce', 2), ('simple', 2), ('simple solution', 2), ('swift', 2), ('vector', 2), ('#easy-understand', 1), ('#incorrect-question', 1), ('#python 3', 1), ('#python3', 1), ('1 liner', 1), ('100 space', 1), ('90+faster', 1), ('algorithms', 1), ('arrays', 1), ('beginner', 1), ('beginner friendly', 1), ('beginners level', 1), ('c programming', 1), ('c#-solution', 1), ('c++ code', 1), ('c++17', 1), ('chain', 1), ('clear', 1), ('cloning', 1), ('collections.sort', 1), ('commented', 1), ('comparison', 1), ('concise', 1), ('constant space', 1), ('count sort', 1), ('count-sort', 1), ('counting sort', 1), ('easiest solution', 1), ('easy to read', 1), ('easy to understand', 1), ('easy understand', 1), ('efficient approach', 1), ('explain', 1), ('explaination', 1), ('explanation of logic', 1), ('fast and simple', 1), ('fasterthan100', 1), ('flatten', 1), ('fold', 1), ('foldleft', 1), ('frequency count', 1), ('generators', 1), ('go lang', 1), ('intuitive', 1), ('js', 1), ('list comprehension', 1), ('map', 1), ('multiset', 1), ('notes', 1), ('one liner', 1), ('optimized', 1), ('python3.8', 1), ('pythonpython3', 1), ('readable', 1), ('scala', 1), ('short code', 1), ('simplest', 1), ('solution-javascript', 1), ('sorted', 1), ('stl', 1), ('two-pointers', 1), ('ultra easy', 1), ('unit-test', 1), ('without sort', 1), ('xor', 1)]"
1163,Last Substring in Lexicographical Order,https://leetcode.com/problems/last-substring-in-lexicographical-order,"Given a string s, return the last substring of s in lexicographical order.","['string', 'suffix-array']",Hard,322,365,68431,24783,[],"[('java', 5), ('javascript', 5), ('python', 5), ('python 3', 5), ('golang', 4), ('python3', 4), ('cpp', 3), ('suffix array', 3), ('c++', 2), ('c++ code', 2), ('complexity', 2), ('explanation', 2), ('go', 2), ('linear time', 2), ('simple solution', 2), ('string', 2), ('algorithms', 1), ('brute force', 1), ('bubble sort', 1), ('c', 1), ('c#', 1), ('c# easy', 1), ('compression', 1), ('constant memory', 1), ('dynamic programming', 1), ('dynamic-programming', 1), ('easy-understanding', 1), ('explanation of logic', 1), ('golang-solution', 1), ('hashmap', 1), ('help needed', 1), ('iterative', 1), ('java-solution', 1), ('one-pass', 1), ('run-time', 1), ('self-explanatory', 1), ('suffix', 1), ('video', 1), ('without suffix array', 1)]"
1049,Last Stone Weight II,https://leetcode.com/problems/last-stone-weight-ii,"You are given an array of integers stones where stones[i] is the weight of the ith stone.

We are playing a game with the stones. On each turn, we choose any two stones and smash them together. Suppose the stones have weights x and y with x <= y. The result of this smash is:


	If x == y, both stones are destroyed, and
	If x != y, the stone of weight x is destroyed, and the stone of weight y has new weight y - x.


At the end of the game, there is at most one stone left.

Return the smallest possible weight of the left stone. If there are no stones left, return 0.",['dynamic-programming'],Medium,1207,47,68634,31711,[],"[('dp', 15), ('dynamic programming', 14), ('c++', 8), ('knapsack', 7), ('python 3', 6), ('memoization', 5), ('cpp', 4), ('dynamic-programming', 4), ('java', 4), ('python', 4), ('javascript', 3), ('python3', 3), ('beginnerfriendly', 2), ('cpp solution', 2), ('dp-techqique', 2), ('easytounderstand', 2), ('javascript solution', 2), ('top down dp', 2), ('#1049', 1), ('#c++', 1), ('2', 1), ('accepted solution', 1), ('beginner friendly', 1), ('best practices', 1), ('bitset', 1), ('bottom up', 1), ('bottom-up-algorithm', 1), ('bottoms-up', 1), ('bottomup', 1), ('c++ code', 1), ('coin change problem', 1), ('dynamic programmin', 1), ('easy', 1), ('explaination', 1), ('explained', 1), ('explanation of logic', 1), ('golang', 1), ('last stone weight', 1), ('logic explained clearly', 1), ('minsubsetsumdiff', 1), ('modular', 1), ('noob approach', 1), ('recursion', 1), ('set', 1), ('simple', 1), ('simple solution', 1), ('swift', 1), ('top down', 1), ('topdown', 1)]"
1048,Longest String Chain,https://leetcode.com/problems/longest-string-chain,"Given a list of words, each word consists of English lowercase letters.

Let's say word1 is a predecessor of word2 if and only if we can add exactly one letter anywhere in word1 to make it equal to word2. For example, ""abc"" is a predecessor of ""abac"".

A word chain is a sequence of words [word_1, word_2, ..., word_k] with k >= 1, where word_1 is a predecessor of word_2, word_2 is a predecessor of word_3, and so on.

Return the longest possible length of a word chain with words chosen from the given list of words.","['hash-table', 'dynamic-programming']",Medium,1616,104,179648,100016,[],"[('dynamic programming', 37), ('dp', 29), ('java', 24), ('c++', 22), ('python', 17), ('python 3', 15), ('memoization', 13), ('javascript', 12), ('dfs', 10), ('hashmap', 10), ('python3', 10), ('cpp', 7), ('java-solution', 6), ('map', 6), ('dynamic-programming', 5), ('sorting', 5), ('easy-understanding', 4), ('graph', 4), ('lis', 4), ('recursion', 4), ('bfs', 3), ('c#', 3), ('clean code', 3), ('explained', 3), ('golang', 3), ('dfs simple solution', 2), ('easy', 2), ('go', 2), ('ruby', 2), ('top-down dp', 2), ('trie', 2), ('#javascript', 1), ('1d-dp', 1), ('algorithms', 1), ('backtracking', 1), ('beginner friendly', 1), ('breadth first search', 1), ('brute force', 1), ('bsf', 1), ('c', 1), ('c++ code', 1), ('c++14', 1), ('commented', 1), ('comments-added', 1), ('consice', 1), ('cpp solution', 1), ('csharp', 1), ('dictonary', 1), ('doubt', 1), ('dp-programming', 1), ('dynamic programing', 1), ('dynamic programming.', 1), ('easy understand', 1), ('easy-to-understand', 1), ('easytounderstand', 1), ('explanations', 1), ('give stars and subscribe', 1), ('google-phone-interview', 1), ('graphs', 1), ('hash', 1), ('hash table', 1), ('hashing', 1), ('hashmap and sorting', 1), ('help', 1), ('help me', 1), ('help-wanted', 1), ('hint', 1), ('hints', 1), ('java ac solution', 1), ('java slowest', 1), ('javascipt', 1), ('javascript solution', 1), ('kotlin', 1), ('longest string chain', 1), ('mapping', 1), ('maps', 1), ('memo', 1), ('memorization', 1), ('memory optimized', 1), ('memory-efficient', 1), ('php', 1), ('priority queue', 1), ('python bug', 1), ('queue', 1), ('readable', 1), ('recurssion', 1), ('recusion', 1), ('simple', 1), ('simple solution', 1), ('single pass', 1), ('sort', 1), ('sort-function', 1), ('sorted array', 1), ('string hashing', 1), ('substring', 1), ('time exceed error', 1), ('top down approach', 1), ('topological-sorting', 1), ('treemap', 1), ('tries', 1), ('zea7ot', 1)]"
1047,Remove All Adjacent Duplicates In String,https://leetcode.com/problems/remove-all-adjacent-duplicates-in-string,"Given a string S of lowercase letters, a duplicate removal consists of choosing two adjacent and equal letters, and removing them.

We repeatedly make duplicate removals on S until we no longer can.

Return the final string after all such duplicate removals have been made.  It is guaranteed the answer is unique.",['stack'],Easy,1554,98,201276,143873,"[""Remove All Adjacent Duplicates in String II""]","[('c++', 60), ('stack', 48), ('java', 38), ('cpp', 34), ('stacks', 30), ('javascript', 27), ('python', 25), ('python 3', 15), ('string', 14), ('easy-understanding', 12), ('java-solution', 12), ('python3', 7), ('recursion', 7), ('two-pointers', 7), ('cpp solution', 6), ('easy', 6), ('simple', 6), ('stringbuilder', 6), ('c#', 5), ('recursive', 5), ('simple solution', 5), ('swift', 5), ('array', 4), ('easy-to-understand', 4), ('stack-based', 4), ('fast-solution', 3), ('golang', 3), ('in-place', 3), ('javascript solution', 3), ('ruby', 3), ('scala', 3), ('string-operation', 3), ('#java', 2), ('c', 2), ('c++ solution', 2), ('easy-undestand', 2), ('explained', 2), ('explanation', 2), ('greedy', 2), ('iterative', 2), ('linear', 2), ('linear time', 2), ('linear-time', 2), ('optimal', 2), ('rust', 2), ('single-line', 2), ('2 pointers', 1), ('arraydeque', 1), ('awesome samriddhi', 1), ('beginner friendly', 1), ('beginners', 1), ('bugs', 1), ('c programming', 1), ('c# stack', 1), ('c++ code', 1), ('c++ monotonic stack', 1), ('c++11', 1), ('c++14', 1), ('clean code', 1), ('commented', 1), ('comments-added', 1), ('constant memory', 1), ('cpp easy', 1), ('deque', 1), ('duplicate', 1), ('easiest', 1), ('easy undestanding', 1), ('easytounderstand', 1), ('efficient', 1), ('error in solution', 1), ('fast and simple', 1), ('fastest c++ solution', 1), ('fold', 1), ('foldleft', 1), ('for-loop', 1), ('functional programming', 1), ('go', 1), ('gorillaz', 1), ('greedy approach', 1), ('help needed', 1), ('immutable', 1), ('inplace', 1), ('ios', 1), ('itereative', 1), ('izaac', 1), ('java regex', 1), ('kotlin', 1), ('kotlinvim', 1), ('linked-list', 1), ('no extra space', 1), ('one pointer', 1), ('pattern matching', 1), ('php', 1), ('pointer', 1), ('pythonpython3', 1), ('regex', 1), ('regex expression', 1), ('remove-all-adjacent', 1), ('ritik', 1), ('saravana', 1), ('simple clear c++ solution', 1), ('sliding window', 1), ('sliding-window', 1), ('space-efficient', 1), ('stack-implementation', 1), ('stackoverflow', 1), ('stl', 1), ('straight-forward', 1), ('stringbuffer', 1), ('swift5', 1), ('timelimit', 1), ('two pointers', 1), ('verbose', 1), ('why', 1)]"
1046,Last Stone Weight,https://leetcode.com/problems/last-stone-weight,"We have a collection of stones, each stone has a positive integer weight.

Each turn, we choose the two heaviest stones and smash them together.  Suppose the stones have weights x and y with x <= y.  The result of this smash is:


	If x == y, both stones are totally destroyed;
	If x != y, the stone of weight x is totally destroyed, and the stone of weight y has new weight y-x.


At the end, there is at most 1 stone left.  Return the weight of this stone (or 0 if there are no stones left.)","['heap', 'greedy']",Easy,1333,37,270318,168735,[],"[('c++', 64), ('priority queue', 50), ('python', 48), ('cpp', 44), ('java', 44), ('heap', 36), ('python 3', 36), ('javascript', 30), ('python3', 25), ('heapq', 24), ('java-solution', 16), ('easy-understanding', 14), ('easy-undestand', 14), ('c#', 13), ('sorting', 12), ('maxheap', 11), ('priorityqueue', 10), ('priority-queue', 9), ('c++ code', 8), ('golang', 7), ('easytounderstand', 6), ('recursion', 6), ('cpp solution', 5), ('easy', 5), ('max heap', 5), ('simple solution', 5), ('0ms', 4), ('csharp', 4), ('greedy approach', 4), ('list', 4), ('simple', 4), ('sort', 4), ('sorted array', 4), ('array-sort', 3), ('cpp easy', 3), ('explained', 3), ('golang-solution', 3), ('greedy', 3), ('heaps', 3), ('heaps algorithm', 3), ('java ac solution', 3), ('javascrip', 3), ('max-heap', 3), ('stl', 3), ('swift', 3), ('100 faster cpp', 2), ('100 faster runtime', 2), ('100 speed', 2), ('array', 2), ('arraylist', 2), ('binarysearch', 2), ('brute force', 2), ('c++ easy to understand', 2), ('c++11', 2), ('commented', 2), ('comments', 2), ('cpp-solution', 2), ('easy to understand', 2), ('easy understanding', 2), ('explanation', 2), ('go', 2), ('indexof', 2), ('iterative', 2), ('last stone weight', 2), ('python2', 2), ('recursively', 2), ('ruby', 2), ('solution c++', 2), ('solution-python', 2), ('splice', 2), ('stack', 2), ('stacks', 2), ('two-pointers', 2), ('vector', 2), ('#java', 1), ('#javascript', 1), ('#maxheap', 1), ('1 line', 1), ('100', 1), ('100 faster', 1), ('100 memory', 1), ('100 space', 1), ('1046. last stone weight', 1), ('2 line', 1), ('4-line', 1), ('5 lines', 1), ('97', 1), ('amazon', 1), ('amazon sde3', 1), ('array list', 1), ('arrays', 1), ('beating-100-submissions', 1), ('beginner', 1), ('beginnerfriendly', 1), ('best-solution-ever', 1), ('binary-search', 1), ('bisect', 1), ('c', 1), ('c# solutions', 1), ('c++ ac', 1), ('c++ solution', 1), ('clean code', 1), ('clear explanation', 1), ('comments-added', 1), ('concise', 1), ('counting-sort', 1), ('custom class', 1), ('dailyleetcode', 1), ('easy explanation', 1), ('easy undestanding', 1), ('easy-solition', 1), ('explanation with code', 1), ('fast', 1), ('fast and simple', 1), ('faster', 1), ('fastest', 1), ('go lang', 1), ('gorillaz', 1), ('greedy algorithm', 1), ('heapify', 1), ('heapsort', 1), ('in place', 1), ('in-place', 1), ('iteration', 1), ('java-8', 1), ('javascript recursive', 1), ('javascript solution', 1), ('js', 1), ('lambda', 1), ('last-stone-weight', 1), ('malj', 1), ('map', 1), ('max', 1), ('min-heap', 1), ('mrmagician', 1), ('multiset', 1), ('one-liner', 1), ('php', 1), ('pseudocode', 1), ('pyhon', 1), ('queue', 1), ('quick sort', 1), ('recursive', 1), ('recursive easy', 1), ('scala', 1), ('scratch', 1), ('short solution', 1), ('sign-flip', 1), ('simpe', 1), ('simple clear c++ solution', 1), ('simple-solution', 1), ('simplesolution', 1), ('simplest', 1), ('solution', 1), ('stl heap', 1), ('stl vector', 1), ('straightforward', 1), ('time-complexity-o', 1), ('vectors', 1), ('very simple', 1), ('while', 1), ('whileloop', 1)]"
1044,Longest Duplicate Substring,https://leetcode.com/problems/longest-duplicate-substring,"Given a string s, consider all duplicated substrings: (contiguous) substrings of s that occur 2 or more times. The occurrences may overlap.

Return any duplicated substring that has the longest possible length. If s does not have a duplicated substring, the answer is """".","['hash-table', 'binary-search', 'suffix-array']",Hard,815,253,108948,34094,[],"[('rabin-karp', 13), ('binary-search', 11), ('binary search', 10), ('java', 9), ('python', 7), ('rabin karp algorithm', 6), ('c++', 5), ('c++ code', 5), ('rolling-hash', 4), ('binarysearch', 3), ('c#', 3), ('cpp', 3), ('javascript', 3), ('simple solution', 3), ('suffix-array', 3), ('brute force', 2), ('cpp easy', 2), ('explained', 2), ('golang', 2), ('hashing', 2), ('java-solution', 2), ('python 3', 2), ('python3', 2), ('#c++', 1), ('#cpp', 1), ('#fastest', 1), ('#linear time', 1), ('#sais algo', 1), ('accepted', 1), ('bfs', 1), ('binarysearh', 1), ('buzhash', 1), ('c++ binary-search', 1), ('c++ hash', 1), ('c++ iterative sol', 1), ('c++multiset map', 1), ('cpp doubt', 1), ('cpp solution', 1), ('duplicates', 1), ('easy-undestand', 1), ('go', 1), ('hashmap', 1), ('javascrip', 1), ('kasai', 1), ('lcp-array', 1), ('longest common prefix', 1), ('manber and myers', 1), ('modular inverse', 1), ('modular-inverse', 1), ('need-help', 1), ('nlogn', 1), ('prefix rolling hash', 1), ('prefix-rolling-hash', 1), ('readable code', 1), ('rolling hash', 1), ('rust', 1), ('sliding hash', 1), ('sliding-window', 1), ('string', 1), ('stringview', 1), ('substring', 1), ('suffix array', 1), ('suffix-tree', 1), ('swift', 1), ('trie', 1), ('unordered-set', 1), ('unorderedset', 1)]"
1043,Partition Array for Maximum Sum,https://leetcode.com/problems/partition-array-for-maximum-sum,"Given an integer array arr, you should partition the array into (contiguous) subarrays of length at most k. After partitioning, each subarray has their values changed to become the maximum value of that subarray.

Return the largest sum of the given array after partitioning.",['dynamic-programming'],Medium,1211,142,45212,30581,[],"[('dynamic programming', 27), ('dp', 20), ('c++', 13), ('memoization', 9), ('recursion', 6), ('javascript', 5), ('python', 5), ('c#', 4), ('java', 4), ('easy-understanding', 3), ('java-solution', 3), ('python 3', 3), ('bottom up', 2), ('bottom-up-algorithm', 2), ('cpp', 2), ('easy', 2), ('akku', 1), ('bottom up dp', 1), ('bottoms-up', 1), ('bottomup', 1), ('c++ dynamic programming', 1), ('cpp easy', 1), ('cpp solution', 1), ('dfs', 1), ('dpp', 1), ('dynamic-programming', 1), ('explained', 1), ('fast and simple', 1), ('golang', 1), ('java solution', 1), ('lru-cache', 1), ('python3', 1), ('recurision', 1), ('recursion memoization', 1), ('recusion', 1), ('scala', 1), ('segment tree', 1), ('top down', 1), ('top down dp', 1), ('top-down', 1), ('top-down dp', 1), ('topdown', 1)]"
1042,Flower Planting With No Adjacent,https://leetcode.com/problems/flower-planting-with-no-adjacent,"You have n gardens, labeled from 1 to n, and an array paths where paths[i] = [xi, yi] describes a bidirectional path between garden xi to garden yi. In each garden, you want to plant one of 4 types of flowers.

All gardens have at most 3 paths coming into or leaving it.

Your task is to choose a flower type for each garden such that, for any two gardens connected by a path, they have different types of flowers.

Return any such a choice as an array answer, where answer[i] is the type of flower planted in the (i+1)th garden. The flower types are denoted 1, 2, 3, or 4. It is guaranteed an answer exists.",['graph'],Medium,546,557,84058,41020,[],"[('graph', 19), ('c++', 11), ('java', 11), ('javascript', 11), ('greedy', 10), ('cpp', 9), ('python', 9), ('dfs', 8), ('adjacency list', 6), ('python 3', 6), ('bfs', 5), ('backtracking', 4), ('golang', 4), ('graph coloring', 4), ('python3', 4), ('c#', 3), ('simple solution', 3), ('swift', 3), ('colouring', 2), ('easy-understanding', 2), ('graphs', 2), ('set', 2), ('simple', 2), ('typescript', 2), ('backtacking', 1), ('binary mask', 1), ('c++ code', 1), ('c++11', 1), ('clean code', 1), ('comments-added', 1), ('connected components', 1), ('cpp solution', 1), ('dfs simple solution', 1), ('easy understanding', 1), ('easy-to-understand', 1), ('easy-undestand', 1), ('explained', 1), ('explanation of logic', 1), ('fastest', 1), ('glitch', 1), ('greedy algorithm', 1), ('heap', 1), ('java ac solution', 1), ('javascript solution', 1), ('optimized', 1), ('php', 1), ('question need help', 1), ('ruby', 1), ('simple clear c++ solution', 1), ('test-cases', 1)]"
1041,Robot Bounded In Circle,https://leetcode.com/problems/robot-bounded-in-circle,"On an infinite plane, a robot initially stands at (0, 0) and faces north. The robot can receive one of three instructions:


	""G"": go straight 1 unit;
	""L"": turn 90 degrees to the left;
	""R"": turn 90 degrees to the right.


The robot performs the instructions given in order, and repeats them forever.

Return true if and only if there exists a circle in the plane such that the robot never leaves the circle.",['math'],Medium,1143,328,138777,76381,[],"[('python', 23), ('easy-understanding', 21), ('c++', 20), ('java', 19), ('python 3', 19), ('javascript', 11), ('explained', 9), ('java-solution', 8), ('cpp', 7), ('cpp solution', 6), ('easy-to-understand', 6), ('python3', 5), ('easy', 4), ('javascript solution', 4), ('linear time', 4), ('0ms', 3), ('explanation of logic', 3), ('golang', 3), ('math', 3), ('php', 3), ('swift', 3), ('c', 2), ('c#', 2), ('clean code', 2), ('comments added', 2), ('complex number', 2), ('constant space', 2), ('easy-understand', 2), ('easytounderstand', 2), ('explanations', 2), ('fast and simple', 2), ('faster than 100.00', 2), ('go', 2), ('golang-solution', 2), ('intuitive', 2), ('ruby', 2), ('scala', 2), ('simulation', 2), ('#easiest', 1), ('1-liner', 1), ('10 lines', 1), ('100 faster runtime', 1), ('amazon', 1), ('array', 1), ('automata', 1), ('beginner friendly', 1), ('brute force', 1), ('c++ code', 1), ('c++ solution', 1), ('comments', 1), ('comments-added', 1), ('concise', 1), ('coordinate geometry', 1), ('cpp easy', 1), ('csharp', 1), ('dictonary', 1), ('dir', 1), ('easy-undestand', 1), ('efficient', 1), ('efficient solution', 1), ('explaination', 1), ('explanation', 1), ('finite state machine', 1), ('finite-state-machine', 1), ('go-solution', 1), ('golag', 1), ('golang solution', 1), ('hash table', 1), ('image', 1), ('induction', 1), ('iteration', 1), ('kotlin', 1), ('math solution', 1), ('matrix', 1), ('one pass solution', 1), ('onepass', 1), ('oop', 1), ('optimal', 1), ('python2', 1), ('python3.8', 1), ('recrusive', 1), ('robot', 1), ('rust', 1), ('self-explanatory', 1), ('simple', 1), ('simple solution', 1), ('simplesolution', 1), ('single pass', 1), ('solution', 1), ('stack', 1), ('state', 1), ('state machine', 1), ('state-machine', 1), ('string', 1), ('swift5', 1), ('tailrec', 1), ('tricks', 1), ('video', 1), ('video explaination', 1), ('video explanation', 1), ('video solution', 1), ('video-explanation', 1)]"
1162,As Far from Land as Possible,https://leetcode.com/problems/as-far-from-land-as-possible,"Given an n x n grid containing only values 0 and 1, where 0 represents water and 1 represents land, find a water cell such that its distance to the nearest land cell is maximized, and return the distance. If no land or water exists in the grid, return -1.

The distance used in this problem is the Manhattan distance: the distance between two cells (x0, y0) and (x1, y1) is |x0 - x1| + |y0 - y1|.","['breadth-first-search', 'graph']",Medium,849,36,74330,33958,"[""Shortest Distance from All Buildings""]","[('bfs', 44), ('c++', 22), ('python', 13), ('cpp', 12), ('java', 9), ('dynamic programming', 7), ('python 3', 6), ('golang', 5), ('c#', 4), ('javascript', 4), ('python3', 4), ('queue', 4), ('clean code', 3), ('dp', 3), ('approach', 2), ('breadth first search', 2), ('cpp solution', 2), ('easy', 2), ('explained', 2), ('java-solution', 2), ('animation', 1), ('beginner friendly', 1), ('bfs simple solution', 1), ('bfs-java', 1), ('breadth-first-search', 1), ('c++ code', 1), ('c++ iterative sol', 1), ('commented', 1), ('comments', 1), ('commetend', 1), ('different approach', 1), ('dp c++', 1), ('easy to read', 1), ('easy to understand', 1), ('easy-to-understand', 1), ('easy-understanding', 1), ('examples', 1), ('expanding', 1), ('explaination', 1), ('explained solution', 1), ('explanation with code', 1), ('explanations', 1), ('fast', 1), ('full explanation', 1), ('fully-explained', 1), ('functional-programming', 1), ('google', 1), ('graph', 1), ('iterative', 1), ('iterative-bfs', 1), ('java ac solution', 1), ('linear time', 1), ('logic explained', 1), ('pair', 1), ('php', 1), ('php solution', 1), ('python bfs', 1), ('python deque', 1), ('readable', 1), ('simple', 1), ('solution', 1), ('swift', 1), ('video', 1)]"
1161,Maximum Level Sum of a Binary Tree,https://leetcode.com/problems/maximum-level-sum-of-a-binary-tree,"Given the root of a binary tree, the level of its root is 1, the level of its children is 2, and so on.

Return the smallest level x such that the sum of all the values of nodes at level x is maximal.","['tree', 'breadth-first-search']",Medium,778,40,99360,68134,[],"[('bfs', 79), ('c++', 41), ('level-order-traversal', 29), ('queue', 29), ('java', 25), ('python 3', 24), ('python', 21), ('cpp', 16), ('dfs', 10), ('javascript', 10), ('python3', 10), ('java-solution', 9), ('easy-understanding', 8), ('c#', 7), ('cpp solution', 7), ('level order traversal', 7), ('recursion', 6), ('easy-to-understand', 5), ('easytounderstand', 5), ('golang', 5), ('ruby', 5), ('bfs simple solution', 4), ('binary-tree', 4), ('breadth first search', 4), ('dfs simple solution', 4), ('tree traversal', 4), ('c', 3), ('c++ code', 3), ('graph', 3), ('iteratively', 3), ('recursive', 3), ('simple', 3), ('simple solution', 3), ('typescript', 3), ('beginner friendly', 2), ('binary tree', 2), ('deque', 2), ('easy', 2), ('easy to understand', 2), ('easy-undestand', 2), ('go', 2), ('golang-solution', 2), ('hashmap', 2), ('linear time', 2), ('map', 2), ('python2', 2), ('queue-approach', 2), ('rust', 2), ('simple clear c++ solution', 2), ('stack', 2), ('tree', 2), ('trees', 2), ('upvote', 2), ('#easy-understand', 1), ('#python', 1), ('100 beat', 1), ('100 space', 1), ('100 speed', 1), ('accepted solution', 1), ('algorithm', 1), ('algorithm-explained', 1), ('algorithms', 1), ('array', 1), ('array initialization', 1), ('begginer friendly', 1), ('bfs queue', 1), ('bfs vs dfs', 1), ('binary tree traversal', 1), ('breadth first traversal', 1), ('breadth-first-search', 1), ('brute force', 1), ('c++ easy to understand', 1), ('c++ recursion', 1), ('c++11', 1), ('clean code', 1), ('comments added', 1), ('comments-added', 1), ('complexity-analysis', 1), ('csharp', 1), ('depth first search', 1), ('dfs simple', 1), ('dfs-bfs', 1), ('dfs-in-order', 1), ('dfs-recursive', 1), ('dfs-tree', 1), ('easy to read', 1), ('easy understand', 1), ('explaination', 1), ('explanation', 1), ('faster then 90', 1), ('full detailed explanation', 1), ('go-solution', 1), ('golang solution', 1), ('hash', 1), ('help', 1), ('help me', 1), ('help-wanted', 1), ('inorder iterative', 1), ('intutive', 1), ('iterative', 1), ('iterative way', 1), ('java solution', 1), ('javascrip', 1), ('javascript solution', 1), ('js javascript', 1), ('level order', 1), ('list-comprehension', 1), ('logarithmic-space', 1), ('malj', 1), ('memory-efficient', 1), ('optimal', 1), ('postorder-recursive', 1), ('preorder traversal', 1), ('pyhton3', 1), ('queue and linkedlist', 1), ('queues', 1), ('rajat', 1), ('readable', 1), ('recurssion', 1), ('self-explanatory', 1), ('short code', 1), ('short solution', 1), ('simple-solution', 1), ('solution', 1), ('space', 1), ('swift', 1), ('swift5', 1), ('time-complexity', 1), ('tree-traversal', 1), ('ultra easy', 1)]"
1037,Valid Boomerang,https://leetcode.com/problems/valid-boomerang,"Given an array points where points[i] = [xi, yi] represents a point on the X-Y plane, return true if these points are a boomerang.

A boomerang is a set of three points that are all distinct and not in a straight line.",['math'],Easy,158,292,64103,24039,[],"[('c++', 21), ('cpp', 10), ('python', 9), ('python3', 8), ('javascript', 7), ('python 3', 6), ('math', 5), ('math-solution', 5), ('c#', 3), ('easy-understanding', 3), ('java-solution', 3), ('one-liner', 3), ('clean code', 2), ('cpp solution', 2), ('fast-solution', 2), ('geometry', 2), ('js', 2), ('oneline', 2), ('ruby', 2), ('slope equation', 2), ('1 line', 1), ('1-line', 1), ('area', 1), ('c++ code', 1), ('c++ set', 1), ('c++11', 1), ('c++14', 1), ('complex number', 1), ('cpp-solution', 1), ('cross product', 1), ('csharp', 1), ('derivative', 1), ('determinant', 1), ('easy', 1), ('explained', 1), ('explanation', 1), ('explanatory comments', 1), ('golang', 1), ('good variable names', 1), ('i want to get a star', 1), ('implementation', 1), ('java solution', 1), ('javascipt', 1), ('javascrip', 1), ('js javascript', 1), ('mathematics', 1), ('one line', 1), ('pythonpython3', 1), ('rajawatbanna', 1), ('slopes', 1), ('solution', 1), ('structured code', 1), ('swift', 1), ('tangent line', 1), ('valid boomerang', 1), ('vector', 1)]"
1038,Binary Search Tree to Greater Sum Tree,https://leetcode.com/problems/binary-search-tree-to-greater-sum-tree,"Given the root of a Binary Search Tree (BST), convert it to a Greater Tree such that every key of the original BST is changed to the original key plus sum of all keys greater than the original key in BST.

As a reminder, a binary search tree is a tree that satisfies these constraints:


	The left subtree of a node contains only nodes with keys less than the node's key.
	The right subtree of a node contains only nodes with keys greater than the node's key.
	Both the left and right subtrees must also be binary search trees.


Note: This question is the same as 538: https://leetcode.com/problems/convert-bst-to-greater-tree/","['tree', 'depth-first-search', 'binary-search-tree', 'recursion']",Medium,1481,116,96692,79983,[],"[('c++', 58), ('recursion', 33), ('java', 27), ('dfs', 25), ('cpp', 23), ('inorder traversal', 22), ('python', 19), ('bst', 18), ('java-solution', 16), ('python 3', 13), ('javascript', 12), ('easy-understanding', 11), ('inorder', 11), ('recursive', 10), ('tree-traversal', 9), ('inorder-traversal', 8), ('c#', 7), ('golang', 7), ('binary-tree', 6), ('easy', 6), ('iterative', 5), ('python3', 5), ('reverse inorder traversal', 5), ('simple', 5), ('binary search tree', 4), ('dfs-in-order', 4), ('easy-to-understand', 4), ('in-order-traversal', 4), ('inordertraversal', 4), ('c', 3), ('clean code', 3), ('easy to understand', 3), ('swift', 3), ('#python', 2), ('0ms', 2), ('0ms runtime', 2), ('100', 2), ('100 faster cpp', 2), ('100 space', 2), ('binary-search-tree', 2), ('c code', 2), ('c++ code', 2), ('comments', 2), ('cpp easy', 2), ('cpp solution', 2), ('dfs simple solution', 2), ('easy-undestand', 2), ('efficient', 2), ('go-solution', 2), ('golang-solution', 2), ('hint', 2), ('hints', 2), ('inorder iterative', 2), ('iteration', 2), ('iteratively', 2), ('javascript solution', 2), ('recusion', 2), ('reverse inorder', 2), ('reverse-inorder-traversal', 2), ('simple solution', 2), ('stack', 2), ('stack-based', 2), ('tree', 2), ('vector', 2), ('#breadth first', 1), ('#csharp', 1), ('#inorder-traversal', 1), ('#java', 1), ('#python 3', 1), ('#video', 1), ('#video-explanation', 1), ('#videoexplanation', 1), ('10 lines', 1), ('100 faster', 1), ('100 memory', 1), ('beats 100', 1), ('beginner friendly', 1), ('binary tree', 1), ('binary-search', 1), ('bottom up', 1), ('bsttogreatersumtree', 1), ('c++ dfs', 1), ('complexity-analysis', 1), ('concise-solution', 1), ('converse', 1), ('depth first search', 1), ('dfs recursive', 1), ('dfs simple', 1), ('dfs-tree', 1), ('easy to understandd', 1), ('easy-solution', 1), ('easy-understand', 1), ('easytounderstand', 1), ('efficient solution', 1), ('fast and simple', 1), ('faster', 1), ('fastest', 1), ('generator', 1), ('generator-function', 1), ('global-variables', 1), ('go', 1), ('go lang', 1), ('go-lang', 1), ('hashmap', 1), ('helper function', 1), ('in order', 1), ('in-order', 1), ('inorder recursive', 1), ('inorder travarsal', 1), ('inplace', 1), ('iterative traversal', 1), ('java ac solution', 1), ('java dfs', 1), ('javasacript', 1), ('javascript recursive', 1), ('kotlinvim', 1), ('linear time', 1), ('linear-time', 1), ('math', 1), ('morris-inorder-traversal', 1), ('morris-traversal', 1), ('mrmagician', 1), ('php', 1), ('postorder-traversal', 1), ('pre-order', 1), ('pyhton', 1), ('python bfs', 1), ('python2', 1), ('recurision', 1), ('recursion palindrome', 1), ('recursive easy', 1), ('recursively', 1), ('recusive', 1), ('reversed-in-order', 1), ('right-root-left', 1), ('ruby', 1), ('short c++ code', 1), ('simple-solution', 1), ('solution', 1), ('sort', 1), ('stacks', 1), ('time optimize', 1), ('traversal', 1), ('tree problem', 1), ('tree traversal', 1), ('trees', 1), ('upvote', 1), ('video-explanation', 1), ('yield', 1)]"
1040,Moving Stones Until Consecutive II,https://leetcode.com/problems/moving-stones-until-consecutive-ii,"On an infinite number line, the position of the i-th stone is given by stones[i].  Call a stone an endpoint stone if it has the smallest or largest position.

Each turn, you pick up an endpoint stone and move it to an unoccupied position so that it is no longer an endpoint stone.

In particular, if the stones are at say, stones = [1,2,5], you cannot move the endpoint stone at position 5, since moving it to any position (such as 0, or 3) will still keep that stone as an endpoint stone.

The game ends when you cannot make any more moves, ie. the stones are in consecutive positions.

When the game ends, what is the minimum and maximum number of moves that you could have made?  Return the answer as an length 2 array: answer = [minimum_moves, maximum_moves]","['array', 'sliding-window']",Medium,234,413,11955,6500,[],"[('c++', 2), ('c++ code', 1), ('cpp', 1), ('golang', 1), ('slide window', 1), ('sliding-window', 1)]"
1160,Find Words That Can Be Formed by Characters,https://leetcode.com/problems/find-words-that-can-be-formed-by-characters,"You are given an array of strings words and a string chars.

A string is good if it can be formed by characters from chars (each character can only be used once).

Return the sum of lengths of all good strings in words.","['array', 'hash-table']",Easy,615,94,115949,78747,[],"[('python 3', 32), ('python', 30), ('c++', 29), ('javascript', 27), ('java', 24), ('cpp', 23), ('easy-understanding', 15), ('hashmap', 12), ('python3', 12), ('java-solution', 11), ('c#', 10), ('counter', 8), ('ruby', 7), ('hash table', 6), ('cpp solution', 5), ('easy', 5), ('c++11', 4), ('easy-to-understand', 4), ('easy-undestand', 4), ('easytounderstand', 4), ('golang', 4), ('map', 4), ('string', 4), ('c', 3), ('count', 3), ('counting', 3), ('dictionary', 3), ('explained', 3), ('hashing', 3), ('js', 3), ('kotlin', 3), ('readable', 3), ('array', 2), ('c++ solution', 2), ('comments', 2), ('cpp-solution', 2), ('frequency count', 2), ('javascript solution', 2), ('list comprehension', 2), ('map in c++', 2), ('python2', 2), ('reduce', 2), ('simple', 2), ('simple clear c++ solution', 2), ('simplest', 2), ('stl', 2), ('swift', 2), ('#javacript', 1), ('1-line', 1), ('5 lines', 1), ('api', 1), ('array nesting', 1), ('array of vectors', 1), ('arrays', 1), ('ascii', 1), ('baseic method', 1), ('bit manipulation', 1), ('c#-solution', 1), ('c++ code', 1), ('c++ hash', 1), ('c++14', 1), ('char map', 1), ('character', 1), ('chars', 1), ('clean code', 1), ('clear', 1), ('collections', 1), ('comment', 1), ('comments-added', 1), ('cpp easy', 1), ('detailed-explanation', 1), ('dict', 1), ('dictionaries', 1), ('dictonary', 1), ('easiest', 1), ('easy understanding', 1), ('easy undestanding', 1), ('easy-understand', 1), ('efficient', 1), ('es6', 1), ('explaination', 1), ('explanation', 1), ('faster than 95.8', 1), ('frequency', 1), ('frequency array', 1), ('frequency table', 1), ('functional-programming', 1), ('go', 1), ('golang-solution', 1), ('gorillaz', 1), ('hash map', 1), ('hashtable', 1), ('heap-buffer-overflow', 1), ('help', 1), ('help needed', 1), ('i want to get a star', 1), ('index-array', 1), ('iterative way', 1), ('java ac solution', 1), ('javacript', 1), ('js javascript', 1), ('lesser memory', 1), ('linear time', 1), ('linq', 1), ('mapping', 1), ('mapreduce', 1), ('memory optimized', 1), ('one line', 1), ('one-line', 1), ('one-liner', 1), ('oneline', 1), ('oneliner', 1), ('php', 1), ('please', 1), ('pythonic', 1), ('runtime-error', 1), ('short', 1), ('simple solution', 1), ('solution', 1), ('straight-forward', 1), ('string-operation', 1), ('swiftsolution', 1), ('two-lines', 1), ('typescript', 1), ('unit-test', 1), ('wrong answer', 1)]"
1039,Minimum Score Triangulation of Polygon,https://leetcode.com/problems/minimum-score-triangulation-of-polygon,"You have a convex n-sided polygon where each vertex has an integer value. You are given an integer array values where values[i] is the value of the ith vertex (i.e., clockwise order).

You will triangulate the polygon into n - 2 triangles. For each triangle, the value of that triangle is the product of the values of its vertices, and the total score of the triangulation is the sum of these values over all n - 2 triangles in the triangulation.

Return the smallest possible total score that you can achieve with some triangulation of the polygon.",['dynamic-programming'],Medium,651,86,30065,15178,[],"[('dynamic programming', 10), ('memoization', 7), ('dp', 6), ('java', 4), ('python', 3), ('backtrack', 2), ('c++', 2), ('cpp', 2), ('go', 2), ('javascript', 2), ('python 3', 2), ('python3', 2), ('#1039', 1), ('c++ code', 1), ('c++ recursive solution', 1), ('dp c++', 1), ('drawing', 1), ('easy', 1), ('explanation', 1), ('explanatory video', 1), ('fastest', 1), ('gap-method', 1), ('golang', 1), ('iterative solution', 1), ('java-solution', 1), ('matrix chain mul.', 1), ('memoisation', 1), ('polygon', 1), ('recursion', 1), ('recursive', 1), ('recursive solution', 1), ('ruby', 1), ('simple clear c++ solution', 1), ('tabulation', 1), ('top down', 1), ('top down dp', 1), ('top-down dp', 1), ('triangulation', 1)]"
1036,Escape a Large Maze,https://leetcode.com/problems/escape-a-large-maze,"There is a 1 million by 1 million grid on an XY-plane, and the coordinates of each grid square are (x, y).

We start at the source = [sx, sy] square and want to reach the target = [tx, ty] square. There is also an array of blocked squares, where each blocked[i] = [xi, yi] represents a blocked square with coordinates (xi, yi).

Each move, we can walk one square north, east, south, or west if the square is not in the array of blocked squares. We are also not allowed to walk outside of the grid.

Return true if and only if it is possible to reach the target square from the source square through a sequence of valid moves.",['breadth-first-search'],Hard,298,119,35704,12242,[],"[('bfs', 4), ('dfs', 3), ('java', 2), ('a-star', 1), ('backtracking', 1), ('bfs python', 1), ('bfs tle', 1), ('breadth first search', 1), ('c#', 1), ('c++', 1), ('code comments', 1), ('commented', 1), ('compression', 1), ('cpp', 1), ('csharp', 1), ('descriptive names', 1), ('dfs-iterative', 1), ('explained', 1), ('fast', 1), ('fun', 1), ('general', 1), ('geometry', 1), ('java-solution', 1), ('maze', 1), ('pruning', 1), ('python', 1), ('python 3', 1), ('union-find', 1)]"
1035,Uncrossed Lines,https://leetcode.com/problems/uncrossed-lines,"We write the integers of A and B (in the order they are given) on two separate horizontal lines.

Now, we may draw connecting lines: a straight line connecting two numbers A[i] and B[j] such that:


	A[i] == B[j];
	The line we draw does not intersect any other connecting (non-horizontal) line.


Note that a connecting lines cannot intersect even at the endpoints: each number can only belong to one connecting line.

Return the maximum number of connecting lines we can draw in this way.",['array'],Medium,1133,23,94734,53252,"[""Edit Distance""]","[('dynamic programming', 45), ('dp', 26), ('c++', 17), ('java', 13), ('python', 13), ('recursion', 12), ('cpp', 10), ('memoization', 10), ('python 3', 9), ('lcs', 8), ('python3', 6), ('cpp solution', 5), ('java-solution', 5), ('javascript', 5), ('dynamic-programming', 4), ('c#', 3), ('bottom up dp', 2), ('detailed explanation', 2), ('longest-common-subsq', 2), ('simple solution', 2), ('tabulation', 2), ('top-down', 2), ('uncrossed lines', 2), ('#dp', 1), ('#javascript', 1), ('arrays', 1), ('bisect', 1), ('bottom up', 1), ('c++ code', 1), ('cache', 1), ('clear solution', 1), ('clearly', 1), ('comments', 1), ('csharp', 1), ('dictionary c#', 1), ('dp python', 1), ('dp-programming', 1), ('dp-top-down', 1), ('dynamic programing', 1), ('easy-to-understand', 1), ('easy-understanding', 1), ('efficient', 1), ('efficient solution', 1), ('explained', 1), ('fast-solution', 1), ('function', 1), ('functional', 1), ('functional-programming', 1), ('golang', 1), ('golang-solution', 1), ('java ac solution', 1), ('kotlin', 1), ('lce', 1), ('linear space', 1), ('lis', 1), ('longest common sequence', 1), ('lru-cache', 1), ('optimal', 1), ('optimal substructure', 1), ('optimization', 1), ('overlapping subproblems', 1), ('pyhton', 1), ('pythonic', 1), ('quadratic time', 1), ('recursive easy', 1), ('recursive solution', 1), ('rust', 1), ('scala', 1), ('sets', 1), ('simple-solution', 1), ('swift', 1), ('top down', 1), ('top down approach', 1), ('top down dp', 1), ('top-down dp', 1), ('topdown', 1), ('two-pointer', 1), ('uncrossedlines', 1), ('vector', 1), ('visualization', 1)]"
1034,Coloring A Border,https://leetcode.com/problems/coloring-a-border,"Given a 2-dimensional grid of integers, each value in the grid represents the color of the grid square at that location.

Two squares belong to the same connected component if and only if they have the same color and are next to each other in any of the 4 directions.

The border of a connected component is all the squares in the connected component that are either 4-directionally adjacent to a square not in the component, or on the boundary of the grid (the first or last row or column).

Given a square at location (r0, c0) in the grid and a color, color the border of the connected component of that square with the given color, and return the final grid.",['depth-first-search'],Medium,190,365,29797,13653,"[""Island Perimeter""]","[('dfs', 12), ('java-solution', 5), ('java', 4), ('python', 4), ('bfs', 3), ('c++', 3), ('graph', 3), ('python 3', 3), ('c#', 2), ('cpp solution', 2), ('dfs recursive', 2), ('python3', 2), ('algorithms', 1), ('bfs java', 1), ('breadth first search', 1), ('breadth-first-search', 1), ('connected components', 1), ('cpp', 1), ('depth first search', 1), ('depth-first-search', 1), ('dfs simple solution', 1), ('easy-to-understand', 1), ('explaination', 1), ('faster than 100.00', 1), ('go', 1), ('javascript', 1), ('matrix', 1), ('queue', 1), ('ruby', 1), ('simple', 1), ('unionfind', 1)]"
1033,Moving Stones Until Consecutive,https://leetcode.com/problems/moving-stones-until-consecutive,"Three stones are on a number line at positions a, b, and c.

Each turn, you pick up a stone at an endpoint (ie., either the lowest or highest position stone), and move it to an unoccupied position between those endpoints.  Formally, let's say the stones are currently at positions x, y, z with x < y < z.  You pick up the stone at either position x or position z, and move that stone to an integer position k, with x < k < z and k != y.

The game ends when you cannot make any more moves, ie. the stones are in consecutive positions.

When the game ends, what is the minimum and maximum number of moves that you could have made?  Return the answer as an length 2 array: answer = [minimum_moves, maximum_moves]",['brainteaser'],Easy,102,517,38112,16543,[],"[('python', 10), ('c++', 8), ('python 3', 7), ('cpp', 6), ('golang', 3), ('c#', 2), ('java', 2), ('javascript', 2), ('python3', 2), ('two-lines', 2), ('2 lines', 1), ('2-liner', 1), ('bruteforce', 1), ('c', 1), ('c++11', 1), ('c++14', 1), ('case-discussion', 1), ('clean', 1), ('clean code', 1), ('constant space', 1), ('constant time', 1), ('decision tree', 1), ('dp', 1), ('dynamic programming', 1), ('easiest solution', 1), ('easytounderstand', 1), ('elegant', 1), ('elegant solution', 1), ('explaination', 1), ('explained solution', 1), ('explanatory comments', 1), ('good variable names', 1), ('intuition', 1), ('java solution', 1), ('list', 1), ('minimax', 1), ('nice', 1), ('php', 1), ('recursion', 1), ('ruby', 1), ('rust', 1), ('simple', 1), ('simple clear c++ solution', 1), ('simplest', 1), ('simulation', 1), ('smart', 1), ('structured code', 1), ('swift', 1), ('test-case-bug', 1)]"
1032,Stream of Characters,https://leetcode.com/problems/stream-of-characters,"Implement the StreamChecker class as follows:


	StreamChecker(words): Constructor, init the data structure with the given words.
	query(letter): returns true if and only if for some k >= 1, the last k characters queried (in order from oldest to newest, including this letter just queried) spell one of the words in the given list.",['trie'],Hard,797,117,95939,46617,[],"[('trie', 38), ('java', 18), ('tries', 11), ('c++', 10), ('python', 8), ('c#', 5), ('javascript', 4), ('python 3', 4), ('queue', 4), ('easy-understanding', 3), ('explained', 3), ('java-solution', 3), ('c++ code', 2), ('dfs-non-recursive', 2), ('dictonary', 2), ('hashmap', 2), ('python3', 2), ('reverse', 2), ('stringbuilder', 2), ('trie explained', 2), ('trie-dfs', 2), ('trie-in-java', 2), ('#java #easy-understand', 1), ('#trie', 1), ('10 lines', 1), ('aho-corasick', 1), ('arraydeque', 1), ('arraylist', 1), ('c++ solution', 1), ('clean code', 1), ('code review', 1), ('commented', 1), ('cpp', 1), ('cpp solution', 1), ('easy', 1), ('easytounderstand', 1), ('explained solution', 1), ('fast-solution', 1), ('go', 1), ('golang', 1), ('java ac solution', 1), ('kotlinvim', 1), ('less memory', 1), ('linked-list', 1), ('linkedlist', 1), ('pointers', 1), ('prefix tree', 1), ('python2', 1), ('rotate array', 1), ('rotated array', 1), ('scala', 1), ('simple', 1), ('simple solution', 1), ('string', 1), ('string-operation', 1), ('strings', 1), ('suffix-tree', 1), ('swift', 1), ('tire', 1), ('tle', 1), ('treemap', 1), ('trie-tree', 1), ('video', 1), ('video solution', 1), ('video-explanation', 1), ('visualization', 1)]"
1031,Maximum Sum of Two Non-Overlapping Subarrays,https://leetcode.com/problems/maximum-sum-of-two-non-overlapping-subarrays,"Given an array A of non-negative integers, return the maximum sum of elements in two non-overlapping (contiguous) subarrays, which have lengths L and M.  (For clarification, the L-length subarray could occur before or after the M-length subarray.)

Formally, return the largest V for which V = (A[i] + A[i+1] + ... + A[i+L-1]) + (A[j] + A[j+1] + ... + A[j+M-1]) and either:


	0 <= i < i + L - 1 < j < j + M - 1 < A.length, or
	0 <= j < j + M - 1 < i < i + L - 1 < A.length.",['array'],Medium,1021,53,61365,36101,[],"[('python', 9), ('prefix sum', 6), ('c++', 4), ('c++ code', 4), ('brute force', 3), ('c#', 3), ('java', 3), ('python 3', 3), ('python3', 3), ('c++11', 2), ('comments-added', 2), ('dp', 2), ('dynamic programming', 2), ('presum', 2), ('sliding-window', 2), ('algorithms', 1), ('clear solution', 1), ('easy-to-understand', 1), ('explained solution', 1), ('explanation of logic', 1), ('fast and simple', 1), ('java-solution', 1), ('javascript', 1), ('kotlin', 1), ('kotllin', 1), ('maximum', 1), ('partialsum', 1), ('prefix-array', 1), ('readable', 1), ('rust', 1), ('simple solution', 1), ('sliding window', 1), ('suffix-array', 1), ('swift', 1), ('thought-process', 1), ('verbose', 1), ('with explanation', 1)]"
1029,Two City Scheduling,https://leetcode.com/problems/two-city-scheduling,"A company is planning to interview 2n people. Given the array costs where costs[i] = [aCosti, bCosti], the cost of flying the ith person to city a is aCosti, and the cost of flying the ith person to city b is bCosti.

Return the minimum cost to fly every person to a city such that exactly n people arrive in each city.",['greedy'],Medium,1856,197,193090,112592,[],"[('python', 30), ('greedy', 24), ('c++', 23), ('sorting', 23), ('python 3', 21), ('java', 20), ('python3', 15), ('cpp', 12), ('cpp solution', 10), ('javascript', 10), ('greedy approach', 9), ('simple solution', 9), ('dp', 7), ('dynamic programming', 7), ('java-solution', 7), ('c#', 5), ('c++ code', 5), ('priority queue', 5), ('sort', 5), ('golang', 4), ('rust', 4), ('sorted array', 4), ('comparator', 3), ('greedy algorithm', 3), ('nlogn', 3), ('ruby', 3), ('simple', 3), ('#greedy', 2), ('backtracking', 2), ('c++ easy to understand', 2), ('clean', 2), ('explanations', 2), ('functional programming', 2), ('functional-programming', 2), ('heaps', 2), ('memoization', 2), ('one-liner', 2), ('proof', 2), ('scala', 2), ('swift', 2), ('top-down dp', 2), ('#1029', 1), ('#backtracking', 1), ('#counting-sort', 1), ('#csharp', 1), ('#java', 1), ('0ms', 1), ('1 line', 1), ('array', 1), ('brute force', 1), ('c', 1), ('c# solution', 1), ('c++11', 1), ('clean code', 1), ('clean-code', 1), ('clean-efficient-code', 1), ('code', 1), ('comment', 1), ('commented', 1), ('comments', 1), ('comments added', 1), ('concise', 1), ('concise-solution', 1), ('consice', 1), ('constant memory', 1), ('curry', 1), ('customsorting', 1), ('difficulty', 1), ('dp bottom up', 1), ('dp top down', 1), ('dp-techqique', 1), ('dynamic-programming', 1), ('easy', 1), ('easy sloution', 1), ('easy understanding', 1), ('easy-solition', 1), ('easy-solution', 1), ('easy-undestand', 1), ('easysolution', 1), ('easytounderstand', 1), ('explain', 1), ('explanation', 1), ('explanation of logic', 1), ('explanation with code', 1), ('fast', 1), ('fast-solution', 1), ('functional', 1), ('golang-solution', 1), ('heap', 1), ('heapq', 1), ('help needed', 1), ('idiomatic', 1), ('intuitive', 1), ('iterative', 1), ('kotlin', 1), ('lambda', 1), ('linq', 1), ('math', 1), ('math-solution', 1), ('modern cpp', 1), ('multimap', 1), ('nlog', 1), ('no extra space', 1), ('one line', 1), ('one liner', 1), ('oneline', 1), ('optimal', 1), ('optimization', 1), ('partial sort', 1), ('python3.8', 1), ('pythonic', 1), ('pythonpython3', 1), ('question', 1), ('quick select', 1), ('quick-selection', 1), ('quick-sort', 1), ('readable', 1), ('recoursive', 1), ('recurrance', 1), ('recursion', 1), ('recursive', 1), ('reduce', 1), ('shortcut', 1), ('simple clear c++ solution', 1), ('sort-function', 1), ('sortset', 1), ('stdalgorithms', 1), ('stl', 1), ('template', 1), ('top down', 1), ('two city scheduling', 1), ('vector', 1), ('vector-operation', 1), ('video explanation', 1)]"
1030,Matrix Cells in Distance Order,https://leetcode.com/problems/matrix-cells-in-distance-order,"We are given a matrix with R rows and C columns has cells with integer coordinates (r, c), where 0 <= r < R and 0 <= c < C.

Additionally, we are given a cell in that matrix with coordinates (r0, c0).

Return the coordinates of all cells in the matrix, sorted by their distance from (r0, c0) from smallest distance to largest distance.  Here, the distance between two cells (r1, c1) and (r2, c2) is the Manhattan distance, |r1 - r2| + |c1 - c2|.  (You may return the answer in any order that satisfies this condition.)",['sort'],Easy,294,152,48111,32868,[],"[('python', 14), ('python 3', 14), ('c++', 11), ('c#', 7), ('java', 7), ('priority queue', 6), ('python3', 6), ('bfs', 5), ('javascript', 5), ('sorting', 5), ('cpp', 4), ('easy-understanding', 4), ('java-solution', 4), ('golang', 3), ('cpp solution', 2), ('multimap', 2), ('sort', 2), ('sorted array', 2), ('#heap', 1), ('#java', 1), ('1 line', 1), ('100 bst', 1), ('100 faster', 1), ('array-sort', 1), ('beats 100', 1), ('bfs python', 1), ('c', 1), ('clear', 1), ('commentary', 1), ('comparator', 1), ('concise', 1), ('concise-solution', 1), ('counting sort', 1), ('custom sorting', 1), ('dfs', 1), ('dict', 1), ('dictionary', 1), ('distance', 1), ('easy to understand', 1), ('easytounderstand', 1), ('elegant solution', 1), ('elegent', 1), ('fast', 1), ('fast and simple', 1), ('faster', 1), ('fastest', 1), ('go', 1), ('gorillaz', 1), ('hash table', 1), ('heap', 1), ('indices', 1), ('java 8', 1), ('java-8', 1), ('js', 1), ('kotlin', 1), ('manhattan distance', 1), ('memory usage', 1), ('min heap', 1), ('mrmagician', 1), ('one-liner', 1), ('oneline', 1), ('pair', 1), ('php', 1), ('pythonic', 1), ('queue', 1), ('readable code', 1), ('ruby', 1), ('simple', 1), ('simple clear c++ solution', 1), ('simple solution', 1), ('solution', 1), ('sortiing', 1), ('stl', 1), ('straight-forward', 1), ('stream', 1), ('swift', 1), ('tuple', 1), ('type script', 1), ('typescript', 1), ('upvote', 1), ('vector', 1)]"
1028,Recover a Tree From Preorder Traversal,https://leetcode.com/problems/recover-a-tree-from-preorder-traversal,"We run a preorder depth-first search (DFS) on the root of a binary tree.

At each node in this traversal, we output D dashes (where D is the depth of this node), then we output the value of this node.  If the depth of a node is D, the depth of its immediate child is D + 1.  The depth of the root node is 0.

If a node has only one child, that child is guaranteed to be the left child.

Given the output S of this traversal, recover the tree and return its root.","['tree', 'depth-first-search']",Hard,653,24,36562,26006,[],"[('python', 13), ('python 3', 12), ('c++', 9), ('recursive', 9), ('stack', 7), ('stacks', 7), ('java', 6), ('easy-understanding', 5), ('golang', 5), ('cpp', 4), ('iterative', 4), ('javascript', 4), ('recursion', 4), ('clean code', 3), ('dfs', 3), ('stack-based', 3), ('beating-100-submissions', 2), ('c#', 2), ('clear', 2), ('go', 2), ('hashmap', 2), ('java-solution', 2), ('pre-order', 2), ('queue', 2), ('regex', 2), ('simple', 2), ('simple solution', 2), ('.net', 1), ('beats 92', 1), ('binary-tree', 1), ('c++ code', 1), ('commentary', 1), ('comments', 1), ('complexity-analysis', 1), ('cpp solution', 1), ('dfs pre-order traversal', 1), ('easy to understand', 1), ('easy-to-understand', 1), ('easy-undestand', 1), ('explained', 1), ('faster', 1), ('faster than 99.41', 1), ('faster-than-100', 1), ('fold', 1), ('immutable', 1), ('iterative-dfs', 1), ('javasript', 1), ('level-order-traversal', 1), ('mrmagician', 1), ('no recursion', 1), ('photo', 1), ('php', 1), ('php solution', 1), ('preorder traversal', 1), ('python2', 1), ('python3', 1), ('pythonic', 1), ('readable', 1), ('recurision', 1), ('recursive easy', 1), ('recursive solution', 1), ('recursively', 1), ('recusion', 1), ('recusrive', 1), ('regexp', 1), ('regular-expression', 1), ('runtime error', 1), ('scala', 1), ('simpe', 1), ('space o1', 1), ('tokenization', 1), ('tree-traversal', 1), ('trees', 1), ('upvote', 1), ('without recursive', 1)]"
1026,Maximum Difference Between Node and Ancestor,https://leetcode.com/problems/maximum-difference-between-node-and-ancestor,"Given the root of a binary tree, find the maximum value V for which there exist different nodes A and B where V = |A.val - B.val| and A is an ancestor of B.

A node A is an ancestor of B if either: any child of A is equal to B, or any child of A is an ancestor of B.","['tree', 'depth-first-search']",Medium,1221,43,117353,81960,[],"[('dfs', 37), ('c++', 27), ('recursion', 26), ('java', 25), ('python', 24), ('python 3', 22), ('cpp', 13), ('java-solution', 9), ('python3', 9), ('c#', 8), ('javascript', 8), ('binary-tree', 7), ('recursive', 7), ('easy-understanding', 6), ('explained', 6), ('preorder traversal', 6), ('bfs', 5), ('easy-to-understand', 5), ('dfs traversal', 4), ('easy-undestand', 4), ('python bfs', 4), ('bottom-up-algorithm', 3), ('clean code', 3), ('cpp solution', 3), ('depth first search', 3), ('easy to understand', 3), ('easytounderstand', 3), ('fast-solution', 3), ('golang', 3), ('iterative', 3), ('python deque', 3), ('pythonic', 3), ('swift', 3), ('tree-traversal', 3), ('beginner friendly', 2), ('binary tree', 2), ('comments', 2), ('cpp easy', 2), ('dfs simple solution', 2), ('dfs solution', 2), ('dfs-iterative', 2), ('java ac solution', 2), ('php', 2), ('preorder-recursion', 2), ('preorder-traversal', 2), ('python3.8', 2), ('recusion', 2), ('simple solution', 2), ('tree traversal', 2), ('trees', 2), ('typescript', 2), ('#python 3', 1), ('100 speed', 1), ('ancestry', 1), ('array', 1), ('beats 100 percent', 1), ('beats 95 percent', 1), ('bottom-up', 1), ('c', 1), ('c++ recursion', 1), ('c++ solution', 1), ('c++17', 1), ('clear', 1), ('comments added', 1), ('cpp clear', 1), ('csharp', 1), ('dfs recursive', 1), ('dfs-bfs', 1), ('dfs-in-order', 1), ('dfs-recursive', 1), ('dfs-topdown', 1), ('divide and conquer', 1), ('easy python bfs iterative', 1), ('explanation of logic', 1), ('facebook', 1), ('fasterthan100', 1), ('fastest', 1), ('golang-solution', 1), ('graph theory', 1), ('greedy', 1), ('inorder-traversal', 1), ('intuitive', 1), ('intutive', 1), ('iterative solution', 1), ('iterative-dfs', 1), ('java solution', 1), ('javascript recursive', 1), ('javascript solution', 1), ('kotlinvim', 1), ('linear time', 1), ('loop', 1), ('maxdiffnodeandancestor', 1), ('memory less than 100', 1), ('microsoft onsite', 1), ('php solution', 1), ('post-order-traversal', 1), ('postorder', 1), ('postorder traversal', 1), ('pre-order', 1), ('preorder', 1), ('python bfs iterative', 1), ('python dfs', 1), ('python super fast sol', 1), ('pythonpython3', 1), ('re-rooting', 1), ('recurision', 1), ('recurrence', 1), ('recursive easy', 1), ('recursive-descent', 1), ('recusrive', 1), ('ruby', 1), ('rust', 1), ('self-explanatory', 1), ('sets', 1), ('short c++ code', 1), ('simple', 1), ('stack', 1), ('stacks', 1), ('straight forward', 1), ('swift5', 1), ('top-down', 1), ('traversal', 1), ('tree', 1), ('tree node ancestor', 1), ('two variables', 1), ('ultra easy', 1), ('upvote', 1), ('video explanation', 1), ('video solution', 1), ('video-explanation', 1)]"
1027,Longest Arithmetic Subsequence,https://leetcode.com/problems/longest-arithmetic-subsequence,"Given an array A of integers, return the length of the longest arithmetic subsequence in A.

Recall that a subsequence of A is a list A[i_1], A[i_2], ..., A[i_k] with 0 <= i_1 < i_2 < ... < i_k <= A.length - 1, and that a sequence B is arithmetic if B[i+1] - B[i] are all the same value (for 0 <= i < B.length - 1).",['dynamic-programming'],Medium,1255,74,123240,61184,[],"[('dp', 29), ('dynamic programming', 27), ('c++', 15), ('java', 12), ('hashmap', 11), ('cpp', 8), ('python', 8), ('python 3', 8), ('python3', 7), ('javascript', 4), ('map', 4), ('dynamic-programming', 3), ('easy', 3), ('explained', 3), ('fastest', 3), ('java-solution', 3), ('lis', 3), ('array', 2), ('brute force', 2), ('easy-understanding', 2), ('explanation of logic', 2), ('golang', 2), ('understand', 2), ('100 memory', 1), ('binarysearch', 1), ('bottom up dp', 1), ('bottoms-up', 1), ('c#', 1), ('c++ code', 1), ('clean code', 1), ('cpp solution', 1), ('csharp', 1), ('description-error', 1), ('detailed explanation', 1), ('dict', 1), ('dictionary', 1), ('dictionary array', 1), ('dp-techqique', 1), ('dynamic programmin', 1), ('easy-to-understand', 1), ('easy-undestand', 1), ('fast', 1), ('fast-solution', 1), ('hash map', 1), ('hashing', 1), ('internal-error', 1), ('java ac solution', 1), ('javascrip', 1), ('javascript solution', 1), ('list', 1), ('maps', 1), ('matrix', 1), ('memoization', 1), ('n2', 1), ('optimization', 1), ('optimization process', 1), ('pythonic', 1), ('quadratic', 1), ('recursion', 1), ('recursive-dfs', 1), ('rust', 1), ('simple', 1), ('simple clear c++ solution', 1), ('small', 1), ('solution', 1), ('space-efficient', 1), ('tabular', 1), ('tle', 1), ('trim', 1), ('two-pass', 1), ('unorderedmap', 1), ('well commented', 1)]"
1025,Divisor Game,https://leetcode.com/problems/divisor-game,"Alice and Bob take turns playing a game, with Alice starting first.

Initially, there is a number n on the chalkboard. On each player's turn, that player makes a move consisting of:


	Choosing any x with 0 < x < n and n % x == 0.
	Replacing the number n on the chalkboard with n - x.


Also, if a player cannot make a move, they lose the game.

Return true if and only if Alice wins the game, assuming both players play optimally.","['math', 'dynamic-programming']",Easy,765,2065,156146,103193,[],"[('c++', 37), ('dynamic programming', 28), ('java', 22), ('cpp', 19), ('python 3', 19), ('python', 16), ('dp', 15), ('javascript', 11), ('easy-understanding', 9), ('python3', 8), ('1-line', 7), ('cpp solution', 7), ('easy', 7), ('one-liner', 7), ('recursion', 7), ('java-solution', 6), ('simple', 6), ('memoization', 5), ('easy-to-understand', 4), ('minimax', 4), ('game theory', 3), ('proof', 3), ('0ms', 2), ('beats 100', 2), ('brute force', 2), ('c#', 2), ('c++ code', 2), ('cpp doubt', 2), ('cpp easy', 2), ('dyanmic programming', 2), ('dynamic-programming', 2), ('easy to understand', 2), ('easy-undestand', 2), ('easytounderstand', 2), ('expalanation', 2), ('explanation of logic', 2), ('fast and simple', 2), ('golang', 2), ('intuitive', 2), ('math', 2), ('mathematics', 2), ('simple solution', 2), ('top-down dp', 2), ('#dynamic-programming', 1), ('0ms runtime', 1), ('1-liner', 1), ('100 faster', 1), ('100 speed', 1), ('3 solutions', 1), ('bfs', 1), ('bottom up', 1), ('c', 1), ('c++ dynamic programming', 1), ('c++ easy to understand', 1), ('c++11', 1), ('commented', 1), ('cpp 100', 1), ('cpp-solution', 1), ('dfs', 1), ('doubts', 1), ('dp python', 1), ('dp-programming', 1), ('easy-understand', 1), ('fast', 1), ('faster', 1), ('faster-than-100', 1), ('fastest', 1), ('fastest c++ solution', 1), ('functional-programming', 1), ('game-theory', 1), ('go', 1), ('gorillaz', 1), ('greedy', 1), ('if-else', 1), ('images', 1), ('induction', 1), ('iterative', 1), ('iterator', 1), ('izaac', 1), ('java ac solution', 1), ('java solution', 1), ('kotlin', 1), ('linear', 1), ('logic explained', 1), ('logic-solution', 1), ('maths', 1), ('memory-efficient', 1), ('mrmagician', 1), ('oneline', 1), ('oneliner', 1), ('proofs', 1), ('python2', 1), ('python3.8', 1), ('recursive', 1), ('recursive easy', 1), ('remainder', 1), ('return-value', 1), ('ruby', 1), ('rust', 1), ('scala', 1), ('short', 1), ('simplesolution', 1), ('slow-performance', 1), ('solution-python', 1), ('testcases', 1), ('time complexities', 1), ('upvote', 1), ('video explaination', 1), ('white board explaination', 1)]"
1024,Video Stitching,https://leetcode.com/problems/video-stitching,"You are given a series of video clips from a sporting event that lasted T seconds.  These video clips can be overlapping with each other and have varied lengths.

Each video clip clips[i] is an interval: it starts at time clips[i][0] and ends at time clips[i][1].  We can cut these clips into segments freely: for example, a clip [0, 7] can be cut into segments [0, 1] + [1, 3] + [3, 7].

Return the minimum number of clips needed so that we can cut the clips into segments that cover the entire sporting event ([0, T]).  If the task is impossible, return -1.",['dynamic-programming'],Medium,730,36,65814,32171,[],"[('greedy', 15), ('python', 14), ('dynamic programming', 12), ('c++', 9), ('java', 9), ('cpp', 6), ('python 3', 5), ('dp', 3), ('greedy approach', 3), ('sort', 3), ('bfs', 2), ('c#', 2), ('cpp solution', 2), ('golang', 2), ('greedy algorithm', 2), ('interval', 2), ('python3', 2), ('sorting', 2), ('- greedy', 1), ('0ms', 1), ('8 lines', 1), ('90+faster', 1), ('accepted solution', 1), ('c++ code', 1), ('c++17', 1), ('commented', 1), ('comments', 1), ('commetend', 1), ('concise', 1), ('constant memory', 1), ('dict', 1), ('easy', 1), ('explained solution', 1), ('heap', 1), ('java ac solution', 1), ('java-solution', 1), ('javascript', 1), ('javascript solution', 1), ('jump-game-ii', 1), ('knapsack', 1), ('kotlin', 1), ('kotlin-solution', 1), ('linear time', 1), ('one-loop', 1), ('priorityqueue', 1), ('simple', 1), ('sorted array', 1), ('stack', 1), ('two-pointer', 1)]"
1023,Camelcase Matching,https://leetcode.com/problems/camelcase-matching,"A query word matches a given pattern if we can insert lowercase letters to the pattern word so that it equals the query. (We may insert each character at any position, and may insert 0 characters.)

Given a list of queries, and a pattern, return an answer list of booleans, where answer[i] is true if and only if queries[i] matches the pattern.","['string', 'trie']",Medium,348,171,40267,23227,[],"[('c++', 13), ('python', 10), ('java', 9), ('javascript', 7), ('python 3', 7), ('trie', 6), ('cpp', 5), ('python3', 4), ('100 space', 3), ('golang', 3), ('two-pointers', 3), ('100 speed', 2), ('c#', 2), ('c++ code', 2), ('dp', 2), ('easy', 2), ('go', 2), ('golang-solution', 2), ('java ac solution', 2), ('regex', 2), ('regular-expression', 2), ('twopointer', 2), ('100 memory', 1), ('algorithms', 1), ('arrays', 1), ('beginner friendly', 1), ('c', 1), ('clean code', 1), ('comments-added', 1), ('cpp solution', 1), ('dynamic programming', 1), ('easy to understand', 1), ('easy-to-understand', 1), ('easytounderstand', 1), ('explaination', 1), ('fast and simple', 1), ('help-wanted', 1), ('java-solution', 1), ('linear time', 1), ('matching', 1), ('no dp', 1), ('no regex', 1), ('no trie or hashmap', 1), ('pointer', 1), ('prefix-tree', 1), ('python2', 1), ('recursively', 1), ('regexmatch', 1), ('regexp', 1), ('ruby', 1), ('self explanatory', 1), ('simple clear c++ solution', 1), ('simple solution', 1), ('simplest', 1), ('stack', 1), ('string', 1), ('string-searching', 1), ('two pointers', 1), ('two-pointer', 1), ('vector', 1), ('with comments', 1)]"
1022,Sum of Root To Leaf Binary Numbers,https://leetcode.com/problems/sum-of-root-to-leaf-binary-numbers,"You are given the root of a binary tree where each node has a value 0 or 1.  Each root-to-leaf path represents a binary number starting with the most significant bit.  For example, if the path is 0 -> 1 -> 1 -> 0 -> 1, then this could represent 01101 in binary, which is 13.

For all leaves in the tree, consider the numbers represented by the path from the root to that leaf.

Return the sum of these numbers. The answer is guaranteed to fit in a 32-bits integer.",['tree'],Easy,1167,91,129881,93085,[],"[('recursion', 52), ('dfs', 46), ('c++', 37), ('java', 36), ('python 3', 28), ('javascript', 27), ('python', 26), ('cpp', 24), ('java-solution', 17), ('recursive', 15), ('cpp solution', 8), ('easy-understanding', 8), ('python3', 8), ('c#', 7), ('tree-traversal', 7), ('bfs', 6), ('dfs simple solution', 6), ('easytounderstand', 6), ('explained', 6), ('recusion', 6), ('binary-tree', 5), ('bit manipulation', 5), ('golang', 5), ('backtracking', 4), ('dfs recursive', 4), ('dfs solution', 4), ('easy', 4), ('java ac solution', 4), ('recursive easy', 4), ('simple', 4), ('simple solution', 4), ('swift', 4), ('tree traversal', 4), ('c++ code', 3), ('c++ recursive solution', 3), ('easy-undestand', 3), ('iterative', 3), ('recurision', 3), ('rust', 3), ('stack', 3), ('trees', 3), ('100', 2), ('backtracing', 2), ('beginner friendly', 2), ('bit-shift', 2), ('bitmanipulation', 2), ('bitwise', 2), ('bitwise operation', 2), ('c', 2), ('clean code', 2), ('concise', 2), ('dfs-topdown', 2), ('dfs-tree', 2), ('easy to understand', 2), ('easy-to-understand', 2), ('explanation', 2), ('explanations', 2), ('fast', 2), ('go', 2), ('inorder', 2), ('php', 2), ('postorder-traversal', 2), ('preorder', 2), ('preorder traversal', 2), ('python2', 2), ('recursively', 2), ('ruby', 2), ('solution', 2), ('stringbuilder', 2), ('traversal', 2), ('upvote', 2), ('#easy', 1), ('#java', 1), ('0ms', 1), ('0ms runtime', 1), ('100 faster', 1), ('100 speed', 1), ('4 lines', 1), ('adrenaline09', 1), ('beats 100', 1), ('beats 100 percent', 1), ('beginner', 1), ('binary no', 1), ('bit', 1), ('bit-manipulation', 1), ('bitshift', 1), ('brute-force', 1), ('c++ easy to understand', 1), ('c++ solution', 1), ('comments', 1), ('depth first search', 1), ('dfs-recursive', 1), ('dictionary c#', 1), ('divide-and-conquer', 1), ('dp', 1), ('easy understand', 1), ('easysolution', 1), ('efficient', 1), ('explained solution', 1), ('faster', 1), ('fastest', 1), ('generator', 1), ('generators', 1), ('go-solution', 1), ('gorillaz', 1), ('hash table', 1), ('interview', 1), ('intuitive', 1), ('intutive', 1), ('iteration', 1), ('javascript solution', 1), ('js', 1), ('kotlin', 1), ('meiyaowen', 1), ('morris-traversal', 1), ('mrmagician', 1), ('one-liner', 1), ('oneliner', 1), ('optimal solution', 1), ('optimized', 1), ('pair', 1), ('path sum', 1), ('path-sum', 1), ('post-order-traversal', 1), ('postorder traversal', 1), ('python bfs explained', 1), ('python iterative bfs', 1), ('pythonic', 1), ('queue', 1), ('realloc', 1), ('recurrance', 1), ('recurrsion', 1), ('recursion vs iteration', 1), ('recursive dfs', 1), ('recursive solution', 1), ('recursive-dfs', 1), ('recurssion', 1), ('recusive', 1), ('reduce', 1), ('self-explanatory', 1), ('simpler', 1), ('stacks', 1), ('straightforward', 1), ('string', 1), ('string compression', 1), ('swift5', 1), ('time-complexity-o', 1), ('traverse-a-tree', 1), ('tree problem', 1), ('typescript', 1), ('ultra easy', 1), ('understanding', 1), ('video', 1), ('video explaination', 1), ('video explanation', 1), ('video solution', 1), ('video-explanation', 1)]"
1021,Remove Outermost Parentheses,https://leetcode.com/problems/remove-outermost-parentheses,"A valid parentheses string is either empty (""""), ""("" + A + "")"", or A + B, where A and B are valid parentheses strings, and + represents string concatenation.  For example, """", ""()"", ""(())()"", and ""(()(()))"" are all valid parentheses strings.

A valid parentheses string S is primitive if it is nonempty, and there does not exist a way to split it into S = A+B, with A and B nonempty valid parentheses strings.

Given a valid parentheses string S, consider its primitive decomposition: S = P_1 + P_2 + ... + P_k, where P_i are primitive valid parentheses strings.

Return S after removing the outermost parentheses of every primitive string in the primitive decomposition of S.",['stack'],Easy,798,859,167585,132743,[],"[('c++', 42), ('python', 42), ('stack', 32), ('python 3', 29), ('javascript', 28), ('easy-understanding', 24), ('java', 24), ('java-solution', 18), ('c#', 14), ('cpp', 14), ('python3', 12), ('golang', 10), ('stacks', 10), ('counter', 8), ('easy', 8), ('c', 7), ('simple', 5), ('string', 5), ('cpp solution', 4), ('fast-solution', 4), ('go', 4), ('kotlin', 4), ('ruby', 4), ('stack-based', 4), ('swift', 4), ('easy understanding', 3), ('easytounderstand', 3), ('fast', 3), ('go-solution', 3), ('golang-solution', 3), ('#python', 2), ('0ms', 2), ('100 speed', 2), ('array', 2), ('c++ code', 2), ('count', 2), ('easy-undestand', 2), ('explanation', 2), ('explanation with logic', 2), ('fast and simple', 2), ('functional programming', 2), ('haskell', 2), ('linear time', 2), ('no stack', 2), ('php', 2), ('python2', 2), ('removeouterparentheses', 2), ('short c++ code', 2), ('simpe', 2), ('simple solution', 2), ('single pass', 2), ('stringbuilder', 2), ('#easy-understanding', 1), ('#efficient', 1), ('#fast-enough', 1), ('#parenthesis', 1), ('100 space', 1), ('beats 98', 1), ('braces', 1), ('brackets', 1), ('brute-force', 1), ('c programming', 1), ('c++ hash', 1), ('c++ stack', 1), ('c++11', 1), ('clean code', 1), ('comments added', 1), ('constant space', 1), ('cpp clear', 1), ('cpp easy', 1), ('cpp fast', 1), ('cpp-solution', 1), ('csharp', 1), ('debug', 1), ('dequeue', 1), ('dry', 1), ('easiest', 1), ('easy solution', 1), ('easy undestanding', 1), ('easy-solition', 1), ('easy-to-understand', 1), ('efficient solution', 1), ('expalanation', 1), ('explained', 1), ('explanation of logic', 1), ('fastest', 1), ('functional', 1), ('go lang', 1), ('golang solution', 1), ('groupby', 1), ('ios', 1), ('izaac', 1), ('java ac solution', 1), ('javascipt', 1), ('javascript solution', 1), ('join', 1), ('js', 1), ('linear', 1), ('linear-scan', 1), ('logic', 1), ('one-liner', 1), ('outermost', 1), ('parantheses', 1), ('picture explanation', 1), ('pop', 1), ('problem solving', 1), ('push', 1), ('python-3', 1), ('pythonpython3', 1), ('recursive', 1), ('rust', 1), ('scala', 1), ('set', 1), ('simplest', 1), ('solution', 1), ('stack-implementation', 1), ('statck', 1), ('string-operation', 1), ('strings', 1), ('strings manipulation', 1), ('substring', 1), ('two-pointers', 1), ('vector', 1), ('very fast', 1), ('without stack', 1), ('zea7ot', 1)]"
1020,Number of Enclaves,https://leetcode.com/problems/number-of-enclaves,"You are given an m x n binary matrix grid, where 0 represents a sea cell and 1 represents a land cell.

A move consists of walking from one land cell to another adjacent (4-directionally) land cell or walking off the boundary of the grid.

Return the number of land cells in grid for which we cannot walk off the boundary of the grid in any number of moves.",['depth-first-search'],Medium,504,24,44460,26368,[],"[('dfs', 32), ('c++', 13), ('python', 11), ('python3', 11), ('dfs simple solution', 10), ('bfs', 9), ('python 3', 8), ('recursion', 8), ('cpp', 7), ('c#', 5), ('java', 4), ('javascript', 4), ('depth first search', 3), ('java-solution', 3), ('bfs python', 2), ('c++ code', 2), ('easy', 2), ('queue', 2), ('#dfs', 1), ('#easy-understanding', 1), ('#python', 1), ('100 beat', 1), ('bfs vs dfs', 1), ('bfs-java', 1), ('constant memory', 1), ('constant space', 1), ('cpp solution', 1), ('depth-first-search', 1), ('design', 1), ('dsu', 1), ('easy-to-understand', 1), ('easy-understanding', 1), ('easytounderstand', 1), ('explaination', 1), ('fasterthan100', 1), ('generator-function', 1), ('golang', 1), ('graph', 1), ('javascrip', 1), ('javascript solution', 1), ('linear time', 1), ('number of islands', 1), ('numberofenclaves', 1), ('python bfs', 1), ('python deque', 1), ('pythonic', 1), ('readable', 1), ('recurision', 1), ('short solution', 1), ('simple', 1), ('space', 1), ('union find', 1), ('unionfind', 1)]"
1019,Next Greater Node In Linked List,https://leetcode.com/problems/next-greater-node-in-linked-list,"We are given a linked list with head as the first node.  Let's number the nodes in the list: node_1, node_2, node_3, ... etc.

Each node may have a next larger value: for node_i, next_larger(node_i) is the node_j.val such that j > i, node_j.val > node_i.val, and j is the smallest possible choice.  If such a j does not exist, the next larger value is 0.

Return an array of integers answer, where answer[i] = next_larger(node_{i+1}).

Note that in the example inputs (not outputs) below, arrays such as [2,1,5] represent the serialization of a linked list with a head node value of 2, second node value of 1, and third node value of 5.","['linked-list', 'stack']",Medium,1329,74,119892,69886,[],"[('stack', 35), ('c++', 30), ('stacks', 27), ('cpp', 19), ('java', 18), ('python 3', 16), ('java-solution', 13), ('javascript', 12), ('easy-understanding', 10), ('python', 9), ('python3', 8), ('c#', 7), ('linked-list', 7), ('c', 4), ('explained', 3), ('monotonic stack', 3), ('c++ code', 2), ('comments-added', 2), ('cpp solution', 2), ('easy', 2), ('golang', 2), ('iterative', 2), ('java ac solution', 2), ('linkedlists', 2), ('simple', 2), ('100 memory', 1), ('analysis', 1), ('backtracking', 1), ('beginner friendly', 1), ('c programming', 1), ('c# list', 1), ('c# stack', 1), ('c++11', 1), ('clarification', 1), ('clean code', 1), ('comments', 1), ('concise', 1), ('cool', 1), ('doubts', 1), ('easy to read', 1), ('easy to understand', 1), ('easy-to-understand', 1), ('easy-undestand', 1), ('easytounderstand', 1), ('efficent approach', 1), ('faster than 99.41', 1), ('generator', 1), ('helperclass', 1), ('iteratively', 1), ('java solution', 1), ('js', 1), ('linear memory', 1), ('linear time', 1), ('linear-time-space', 1), ('linertime', 1), ('linked list', 1), ('linked-lists', 1), ('linkedlist', 1), ('list', 1), ('next-greater-element', 1), ('ngl', 1), ('o of n', 1), ('on2', 1), ('one-pass', 1), ('optimal', 1), ('pair', 1), ('question', 1), ('question need help', 1), ('readable', 1), ('recurision', 1), ('recursion', 1), ('resursive', 1), ('reverse linked list', 1), ('reverselist', 1), ('rust', 1), ('short code', 1), ('short solution', 1), ('simple solution', 1), ('simplest', 1), ('solution', 1), ('stack-implementation', 1), ('swift', 1), ('tc - on', 1), ('test-case', 1)]"
1018,Binary Prefix Divisible By 5,https://leetcode.com/problems/binary-prefix-divisible-by-5,"Given an array A of 0s and 1s, consider N_i: the i-th subarray from A[0] to A[i] interpreted as a binary number (from most-significant-bit to least-significant-bit.)

Return a list of booleans answer, where answer[i] is true if and only if N_i is divisible by 5.",['array'],Easy,377,114,65501,31237,[],"[('python 3', 14), ('c++', 13), ('cpp', 11), ('python', 9), ('python3', 7), ('c#', 5), ('javascript', 5), ('dfa', 4), ('modulo', 4), ('bit manipulation', 3), ('java', 3), ('c', 2), ('cpp solution', 2), ('cpp-solution', 2), ('java-solution', 2), ('1-line', 1), ('1-liner', 1), ('accepted solution', 1), ('algorithms', 1), ('biginteger', 1), ('binary-prefix-divisible-5', 1), ('binaryprefixdivisibleby5', 1), ('constant space', 1), ('csharp', 1), ('easiest', 1), ('easy to understand', 1), ('easy understanding', 1), ('easytounderstand', 1), ('fast', 1), ('fast and simple', 1), ('fast-solution', 1), ('fastest', 1), ('go-solution', 1), ('golang', 1), ('help', 1), ('help needed', 1), ('intutive', 1), ('java ac solution', 1), ('linear time', 1), ('modular arithmetic', 1), ('o1 space', 1), ('overflow fix', 1), ('php', 1), ('rajawatbanna', 1), ('reduce', 1), ('ruby', 1), ('rune-time-error', 1), ('rust', 1), ('self explanatory', 1), ('simple', 1), ('simple solution', 1), ('swift', 1), ('testcase error', 1), ('three-lines', 1), ('ultra easy', 1), ('unit-test', 1), ('upvote', 1), ('video-explanation', 1), ('yield', 1)]"
1017,Convert to Base -2,https://leetcode.com/problems/convert-to-base-2,"Given a number N, return a string consisting of ""0""s and ""1""s that represents its value in base -2 (negative two).

The returned string must have no leading zeroes, unless the string is ""0"".",['math'],Medium,248,188,24292,14387,"[""Encode Number""]","[('c++', 4), ('easy', 3), ('bit', 2), ('c#', 2), ('java', 2), ('java-solution', 2), ('negative', 2), ('python', 2), ('python 3', 2), ('bitmanipulation', 1), ('cpp', 1), ('double dabble', 1), ('explained', 1), ('golang', 1), ('javascript', 1), ('javascript solution', 1), ('math', 1), ('python3', 1), ('recursion', 1), ('rust', 1), ('simple solution', 1)]"
1016,Binary String With Substrings Representing 1 To N,https://leetcode.com/problems/binary-string-with-substrings-representing-1-to-n,"Given a binary string S (a string consisting only of '0' and '1's) and a positive integer N, return true if and only if for every integer X from 1 to N, the binary representation of X is a substring of S.",['string'],Medium,167,393,38193,22364,[],"[('java', 7), ('c++', 5), ('c#', 3), ('cpp', 3), ('python 3', 3), ('bit', 2), ('flag', 2), ('golang', 2), ('java-solution', 2), ('python', 2), ('python3', 2), ('string', 2), ('tree', 2), ('0ms', 1), ('constructive', 1), ('explaination', 1), ('go', 1), ('go-solution', 1), ('golang solution', 1), ('golang-solution', 1), ('hashtable', 1), ('in-built function', 1), ('java solution', 1), ('javascript', 1), ('one-liner', 1), ('regex', 1), ('rust', 1), ('stl', 1), ('trie', 1), ('two-pointer', 1)]"
1015,Smallest Integer Divisible by K,https://leetcode.com/problems/smallest-integer-divisible-by-k,"Given a positive integer K, you need to find the length of the smallest positive integer N such that N is divisible by K, and N only contains the digit 1.

Return the length of N. If there is no such N, return -1.

Note: N may not fit in a 64-bit signed integer.",['math'],Medium,373,390,65781,27590,[],"[('c++', 12), ('python 3', 9), ('python', 8), ('javascript', 7), ('java', 6), ('cpp', 5), ('easy-understanding', 5), ('explained', 5), ('c#', 4), ('math', 4), ('python3', 4), ('golang', 3), ('java-solution', 3), ('cpp solution', 2), ('easytounderstand', 2), ('explained solution', 2), ('math solution', 2), ('pythonpython3', 2), ('100 faster', 1), ('100 faster runtime', 1), ('100 space', 1), ('100 speed', 1), ('beats 100 percent', 1), ('beginnerfriendly', 1), ('c', 1), ('commented', 1), ('comments', 1), ('commetend', 1), ('cpp easy', 1), ('cpp-solution', 1), ('crispygang', 1), ('cycle', 1), ('doubt', 1), ('easy', 1), ('easy explanation', 1), ('explaination', 1), ('explanation', 1), ('explanation of logic', 1), ('fast and simple', 1), ('greedy', 1), ('hash table', 1), ('hashtable', 1), ('intuitional', 1), ('kotlin', 1), ('logic explained', 1), ('math-solution', 1), ('memoization', 1), ('modular', 1), ('modular arithmetic', 1), ('modulo', 1), ('modulo-arithmatic', 1), ('php', 1), ('python3.8', 1), ('ruby', 1), ('rust', 1), ('simulation', 1), ('smallestintdivisblebyk', 1), ('typescript', 1), ('vedic', 1), ('video solution', 1), ('video-explanation', 1)]"
1014,Best Sightseeing Pair,https://leetcode.com/problems/best-sightseeing-pair,"You are given an integer array values where values[i] represents the value of the ith sightseeing spot. Two sightseeing spots i and j have a distance j - i between them.

The score of a pair (i < j) of sightseeing spots is values[i] + values[j] + i - j: the sum of the values of the sightseeing spots, minus the distance between them.

Return the maximum score of a pair of sightseeing spots.",['array'],Medium,620,27,42379,22469,[],"[('python', 9), ('c++', 8), ('cpp', 8), ('java', 5), ('python 3', 4), ('dp', 3), ('easy-understanding', 3), ('easy-undestand', 3), ('golang', 3), ('python3', 3), ('c#', 2), ('cpp easy', 2), ('easy-to-understand', 2), ('javascript', 2), ('linear time', 2), ('one pass', 2), ('4 lines', 1), ('bestsightseeingpair', 1), ('c++14', 1), ('clear', 1), ('constant space', 1), ('cpp solution', 1), ('dynamic programming', 1), ('explained', 1), ('fast and simple', 1), ('golang-solution', 1), ('greedy approach', 1), ('intuitive', 1), ('js', 1), ('kotlin', 1), ('linear', 1), ('one pass solution', 1), ('pre-compute', 1), ('pythonic', 1), ('suffix', 1), ('two-pointers', 1), ('without dp', 1)]"
1013,Partition Array Into Three Parts With Equal Sum,https://leetcode.com/problems/partition-array-into-three-parts-with-equal-sum,"Given an array of integers arr, return true if we can partition the array into three non-empty parts with equal sums.

Formally, we can partition the array if we can find indexes i + 1 < j with (arr[0] + arr[1] + ... + arr[i] == arr[i + 1] + arr[i + 2] + ... + arr[j - 1] == arr[j] + arr[j + 1] + ... + arr[arr.length - 1])",['array'],Easy,682,84,97860,46794,[],"[('java', 15), ('python', 15), ('c++', 10), ('python 3', 10), ('javascript', 9), ('python3', 9), ('cpp', 8), ('prefix sum', 7), ('c#', 6), ('easy-understanding', 4), ('java-solution', 4), ('array', 3), ('cpp solution', 3), ('easy', 2), ('easy understand', 2), ('easy-to-understand', 2), ('easy-undestand', 2), ('golang', 2), ('math', 2), ('100 faster', 1), ('1013', 1), ('2019', 1), ('accumulation', 1), ('algorithms', 1), ('array easy', 1), ('array of vectors', 1), ('bug in leetcode', 1), ('bug report', 1), ('c', 1), ('c code', 1), ('c# sortedset', 1), ('c++11', 1), ('c++14', 1), ('clean code', 1), ('clean-code', 1), ('constant memory', 1), ('constant space', 1), ('easiest', 1), ('easy solution', 1), ('easy understanding', 1), ('example', 1), ('explained', 1), ('explanation', 1), ('fast', 1), ('fast-solution', 1), ('fastest', 1), ('golang-solution', 1), ('iteration', 1), ('java ac solution', 1), ('javascript solution', 1), ('js', 1), ('linear', 1), ('linear time', 1), ('number', 1), ('on', 1), ('one line', 1), ('readable', 1), ('reduce', 1), ('ruby', 1), ('simple', 1), ('simple solution', 1), ('simplest', 1), ('space-efficient', 1), ('subarray', 1), ('sum', 1), ('swift', 1), ('tips', 1), ('two pointers', 1), ('unit-test', 1), ('with-explanation', 1), ('wrong answer', 1)]"
1012,Numbers With Repeated Digits,https://leetcode.com/problems/numbers-with-repeated-digits,"Given a positive integer N, return the number of positive integers less than or equal to N that have at least 1 repeated digit.","['math', 'dynamic-programming']",Hard,285,53,18719,7104,[],"[('c#', 2), ('cpp', 2), ('python', 2), ('python 3', 2), ('solution-sharing', 2), ('c++', 1), ('combinatorics', 1), ('depth-first-search', 1), ('dynamic programming', 1), ('java', 1), ('javascript solution', 1), ('js', 1), ('log', 1), ('math', 1), ('permutations', 1), ('python3', 1), ('recursion formula', 1), ('solution', 1), ('solution-cpp', 1), ('solution-sharing-cpp', 1), ('solutions', 1), ('solutionsharing', 1), ('thinking process', 1)]"
1011,Capacity To Ship Packages Within D Days,https://leetcode.com/problems/capacity-to-ship-packages-within-d-days,"A conveyor belt has packages that must be shipped from one port to another within D days.

The ith package on the conveyor belt has a weight of weights[i]. Each day, we load the ship with packages on the conveyor belt (in the order given by weights). We may not load more weight than the maximum weight capacity of the ship.

Return the least weight capacity of the ship that will result in all the packages on the conveyor belt being shipped within D days.","['array', 'binary-search']",Medium,2025,60,120021,72055,[],"[('binary-search', 33), ('binary search', 21), ('c++', 14), ('python', 14), ('python 3', 10), ('cpp solution', 8), ('java', 8), ('binarysearch', 6), ('javascript', 6), ('java-solution', 5), ('python3', 5), ('cpp', 4), ('c#', 2), ('easy', 2), ('java ac solution', 2), ('simple', 2), ('ac solution', 1), ('algorithm', 1), ('amazon interview', 1), ('binarysearh', 1), ('brute force', 1), ('c++ algorithms', 1), ('c++ code', 1), ('c++14', 1), ('clean-code', 1), ('comments', 1), ('concise', 1), ('dp', 1), ('easy understanding', 1), ('easysolution', 1), ('fast-solution', 1), ('golang', 1), ('help needed', 1), ('interview', 1), ('iterative', 1), ('java binarysearch linear', 1), ('java solution', 1), ('javascript solution', 1), ('js', 1), ('midpoint-subdivision', 1), ('python is python', 1), ('python super fast sol', 1), ('python3.8', 1), ('ruby', 1), ('similar-problems', 1), ('sliding-window', 1), ('subarray sum', 1), ('subarray sum equals', 1), ('swift', 1), ('thinking process', 1), ('tle', 1)]"
1010,Pairs of Songs With Total Durations Divisible by 60,https://leetcode.com/problems/pairs-of-songs-with-total-durations-divisible-by-60,"You are given a list of songs where the ith song has a duration of time[i] seconds.

Return the number of pairs of songs for which their total duration in seconds is divisible by 60. Formally, we want the number of indices i, j such that i < j with (time[i] + time[j]) % 60 == 0.",['array'],Medium,1372,84,195684,99357,[],"[('c++', 19), ('java', 17), ('python 3', 17), ('python', 16), ('javascript', 15), ('cpp', 12), ('python3', 12), ('easy-understanding', 10), ('hashmap', 9), ('c#', 6), ('java-solution', 6), ('easy-to-understand', 5), ('golang', 5), ('hashing', 5), ('dictionary', 4), ('explained', 4), ('java ac solution', 4), ('linear-time', 4), ('swift', 4), ('array', 3), ('fast-solution', 3), ('math', 3), ('ruby', 3), ('two sum', 3), ('2sum', 2), ('clear', 2), ('es6', 2), ('fast and simple', 2), ('hash table', 2), ('javascript solution', 2), ('map', 2), ('modulo', 2), ('modulo-arithmatic', 2), ('pairofsongs', 2), ('php', 2), ('prefix sum', 2), ('python2', 2), ('simple', 2), ('two-sum', 2), ('100 space', 1), ('100 speed', 1), ('2 lines', 1), ('arrays', 1), ('beat 86 time', 1), ('binary-search', 1), ('brute', 1), ('bruteforce', 1), ('buckets', 1), ('c', 1), ('c++ solution', 1), ('citrix', 1), ('clean code', 1), ('clean-code', 1), ('collections', 1), ('combination', 1), ('commented', 1), ('comments', 1), ('compile-error', 1), ('concise', 1), ('constant space', 1), ('count', 1), ('counter', 1), ('counting-sort', 1), ('cpp solution', 1), ('cpp-solution', 1), ('crispygang', 1), ('csharp', 1), ('dict', 1), ('dictonary', 1), ('easy', 1), ('easy-understand', 1), ('easy-undestand', 1), ('easytounderstand', 1), ('efficient solution', 1), ('explanation', 1), ('explanation of logic', 1), ('explanations', 1), ('formula based', 1), ('frequencies', 1), ('frequency array', 1), ('frequency count', 1), ('frequency table', 1), ('go-solution', 1), ('golang-solution', 1), ('goldamn sachs', 1), ('goldmansachs', 1), ('google interview', 1), ('graph', 1), ('hash-table', 1), ('hashamp', 1), ('herewego', 1), ('i want to get a star', 1), ('improved', 1), ('iterative', 1), ('java-8', 1), ('js', 1), ('js javascript', 1), ('learning', 1), ('learning process', 1), ('linear', 1), ('linear time', 1), ('linear-space', 1), ('map-stl', 1), ('mod', 1), ('modular arithmetic', 1), ('modulus', 1), ('multiple solution', 1), ('one-pass', 1), ('optimal', 1), ('optimisation', 1), ('pair of songs', 1), ('performance', 1), ('prefixsums', 1), ('python3.8', 1), ('pythonpython3', 1), ('pyton', 1), ('rust', 1), ('self explanatory', 1), ('short c++ code', 1), ('simple java solution', 1), ('simple solution', 1), ('simple-solution', 1), ('simplest solution', 1), ('solution', 1), ('space', 1), ('swift5', 1), ('time', 1), ('time-complexity n', 1), ('two-lines', 1), ('typescript', 1), ('understandable', 1), ('unit-test', 1), ('unordered map', 1), ('vector', 1)]"
1009,Complement of Base 10 Integer,https://leetcode.com/problems/complement-of-base-10-integer,"Every non-negative integer N has a binary representation.  For example, 5 can be represented as ""101"" in binary, 11 as ""1011"" in binary, and so on.  Note that except for N = 0, there are no leading zeroes in any binary representation.

The complement of a binary representation is the number in binary you get when changing every 1 to a 0 and 0 to a 1.  For example, the complement of ""101"" in binary is ""010"" in binary.

For a given number N in base-10, return the complement of it's binary representation as a base-10 integer.",['math'],Easy,447,44,105801,65025,[],"[('c++', 44), ('java', 32), ('python', 31), ('python 3', 29), ('bit manipulation', 28), ('cpp', 26), ('cpp solution', 16), ('easy-understanding', 15), ('javascript', 14), ('python3', 14), ('bit-manipulation', 13), ('java-solution', 13), ('one-liner', 10), ('xor', 10), ('bitwise', 6), ('c#', 6), ('simple', 6), ('bitwise operation', 5), ('easy', 5), ('explained', 5), ('c', 4), ('golang', 4), ('math', 4), ('100 memory', 3), ('bit masking', 3), ('c++ code', 3), ('cpp easy', 3), ('easy-solution', 3), ('fast', 3), ('ruby', 3), ('swift', 3), ('0ms', 2), ('1 line', 2), ('100 speed', 2), ('c++11', 2), ('complement', 2), ('constant space', 2), ('easy to understand', 2), ('easytounderstand', 2), ('explaination', 2), ('explained solution', 2), ('faster than 100.00', 2), ('go', 2), ('java ac solution', 2), ('one line', 2), ('oneliner', 2), ('php', 2), ('python2', 2), ('#java #countnsay', 1), ('1-liner', 1), ('100 faster', 1), ('100 space', 1), ('1liner', 1), ('2 methods', 1), ('beats 100', 1), ('beginnerfriendly', 1), ('binary-operation', 1), ('bit', 1), ('bit hacks', 1), ('bit manipulation.', 1), ('bit operation', 1), ('bitmanipulation', 1), ('bitmasking', 1), ('bitset', 1), ('bitwise operator', 1), ('bitwise operators', 1), ('bitwise-operators', 1), ('built-in-function', 1), ('c++ solution', 1), ('c++20', 1), ('commented', 1), ('constant memory', 1), ('cpp-solution', 1), ('detailed explanation', 1), ('easiest', 1), ('easy sloution', 1), ('easy understanding', 1), ('easy-code', 1), ('easy-to-understand', 1), ('easy-undestand', 1), ('fast-solution', 1), ('fastest', 1), ('fastest java solution', 1), ('go-solution', 1), ('golang-solution', 1), ('java bit-manipulation', 1), ('java solution', 1), ('lambda expression', 1), ('least-memory', 1), ('less memory than 100', 1), ('list', 1), ('list comprehension', 1), ('list of', 1), ('log', 1), ('logarithmic time', 1), ('math solution', 1), ('math-solution', 1), ('math.log', 1), ('memory-efficient', 1), ('natural', 1), ('ologn', 1), ('one liner', 1), ('one-line', 1), ('oneline', 1), ('optimal', 1), ('rajat', 1), ('scala', 1), ('simple clear c++ solution', 1), ('simple-solution', 1), ('simulation', 1), ('single-line', 1), ('solved', 1), ('straightforward', 1), ('string-operation', 1), ('stupid', 1), ('summation', 1), ('swift5', 1), ('swiftsolution', 1), ('understandable', 1), ('video', 1), ('video solution', 1), ('video-explanation', 1)]"
1008,Construct Binary Search Tree from Preorder Traversal,https://leetcode.com/problems/construct-binary-search-tree-from-preorder-traversal,"Given an array of integers preorder, which represents the preorder traversal of a BST (i.e., binary search tree), construct the tree and return its root.

It is guaranteed that there is always possible to find a binary search tree with the given requirements for the given test cases.

A binary search tree is a binary tree where for every node, any descendant of Node.left has a value strictly less than Node.val, and any descendant of Node.right has a value strictly greater than Node.val.

A preorder traversal of a binary tree displays the value of the node first, then traverses Node.left, then traverses Node.right.",['tree'],Medium,1840,49,204496,161210,[],"[('recursion', 51), ('c++', 40), ('java', 36), ('python', 34), ('python 3', 26), ('cpp', 21), ('python3', 17), ('javascript', 16), ('iterative', 15), ('recursive', 15), ('bst', 13), ('easy-understanding', 12), ('java-solution', 12), ('recusion', 10), ('binary search tree', 9), ('cpp solution', 8), ('easy', 8), ('c#', 7), ('stack', 7), ('binary-search-tree', 6), ('easy-to-understand', 6), ('binary-tree', 5), ('c++ code', 5), ('dfs', 5), ('golang', 5), ('java ac solution', 5), ('pre-order', 5), ('recurision', 5), ('recursively', 5), ('simple solution', 5), ('stacks', 5), ('tree-traversal', 5), ('swift', 4), ('c++ easy to understand', 3), ('golang-solution', 3), ('iterative solution', 3), ('preorder traversal', 3), ('recursive solution', 3), ('ruby', 3), ('stack-implementation', 3), ('accepted', 2), ('beats 100', 2), ('binary search', 2), ('binarysearch', 2), ('c', 2), ('c++ recursion', 2), ('clear', 2), ('cpp easy', 2), ('definition', 2), ('explained', 2), ('explanation', 2), ('explanation with code', 2), ('go', 2), ('iteration', 2), ('iteratively', 2), ('iteratve-recursive', 2), ('kotlin', 2), ('php', 2), ('php solution', 2), ('pointer', 2), ('preorder', 2), ('recusive', 2), ('recusrive', 2), ('runtime', 2), ('rust', 2), ('short code', 2), ('to understand', 2), ('tree', 2), ('trees', 2), ('100', 1), ('100 speed', 1), ('3 new ways', 1), ('30-day leetcode challenge', 1), ('algorithms', 1), ('awesome samriddhi', 1), ('beats 100 percent', 1), ('bound', 1), ('bst-deserialisation', 1), ('c++ recursive solution', 1), ('clean clode', 1), ('clean code', 1), ('commentary', 1), ('complexity-analysis', 1), ('concise-solution', 1), ('cpp doubt', 1), ('csharp', 1), ('depth first search', 1), ('dfs simple solution', 1), ('dp java', 1), ('east-to-understand', 1), ('easy sloution', 1), ('easy-undestand', 1), ('easytounderstand', 1), ('efficient', 1), ('explain', 1), ('explaination', 1), ('explained solution', 1), ('explanation with logic', 1), ('fast and simple', 1), ('go-solution', 1), ('improvement-needed', 1), ('inordertraversal', 1), ('insert', 1), ('iterate', 1), ('itereative', 1), ('java 8', 1), ('javascript recursive', 1), ('javascript solution', 1), ('js', 1), ('linear time', 1), ('loop-invariant', 1), ('morris-traversal', 1), ('next-greater-element', 1), ('non-recursion', 1), ('non-recursive', 1), ('preorder-traversal', 1), ('pythonpython3', 1), ('recursive approach', 1), ('recursive easy', 1), ('ritik', 1), ('short solution', 1), ('simple', 1), ('solution-sharing-cpp', 1), ('stack-based', 1), ('stars move the article up', 1), ('straight-forward', 1), ('summary', 1), ('traversal tree', 1), ('two pointer technique', 1), ('typescript', 1)]"
1007,Minimum Domino Rotations For Equal Row,https://leetcode.com/problems/minimum-domino-rotations-for-equal-row,"In a row of dominoes, A[i] and B[i] represent the top and bottom halves of the ith domino.  (A domino is a tile with two numbers from 1 to 6 - one on each half of the tile.)

We may rotate the ith domino, so that A[i] and B[i] swap values.

Return the minimum number of rotations so that all the values in A are the same, or all the values in B are the same.

If it cannot be done, return -1.","['array', 'greedy']",Medium,1246,193,235689,120004,[],"[('python 3', 23), ('java', 22), ('python', 21), ('c++', 17), ('cpp', 15), ('easy-understanding', 15), ('greedy', 14), ('javascript', 13), ('linear time', 10), ('python3', 10), ('cpp solution', 7), ('java-solution', 6), ('c#', 5), ('constant space', 5), ('easytounderstand', 5), ('simple solution', 5), ('brute force', 4), ('easy-undestand', 4), ('explained', 4), ('golang', 3), ('greedy approach', 3), ('hashmap', 3), ('ruby', 3), ('simple', 3), ('array greedy', 2), ('c', 2), ('c++ code', 2), ('comments-added', 2), ('count', 2), ('counter', 2), ('kotlin', 2), ('php', 2), ('python2', 2), ('rust', 2), ('solution', 2), ('swift', 2), ('typescript', 2), ('100 memory', 1), ('100 speed', 1), ('2 approaches', 1), ('array', 1), ('beats 100', 1), ('beginner friendly', 1), ('bitwise', 1), ('brute force to optimal', 1), ('brute-force', 1), ('c++ solution', 1), ('clear solution', 1), ('common sense', 1), ('constructive', 1), ('counting', 1), ('cplusplus', 1), ('cpp easy', 1), ('cpp-solution', 1), ('dict', 1), ('dictonary', 1), ('duplicates', 1), ('easiest solution', 1), ('easy', 1), ('easy understanding', 1), ('easy-implementation', 1), ('easy-to-understand', 1), ('explaines', 1), ('explanation', 1), ('explanations', 1), ('frequency', 1), ('frequency count', 1), ('frequency map', 1), ('frequency table', 1), ('go-solution', 1), ('golang-solution', 1), ('google interview', 1), ('greedy algorithm', 1), ('hash table', 1), ('hashing', 1), ('hashset', 1), ('idiomatic', 1), ('intuitive', 1), ('iteration', 1), ('java ac solution', 1), ('java solution', 1), ('javascript solution', 1), ('joke', 1), ('js', 1), ('linear', 1), ('linear-time', 1), ('majority element', 1), ('map entry', 1), ('naive approach', 1), ('no dp', 1), ('not greedy', 1), ('one path', 1), ('optimisation', 1), ('performance', 1), ('priority queue', 1), ('pythonpython3', 1), ('readable', 1), ('recurision', 1), ('scala', 1), ('set', 1), ('set-union', 1), ('sort', 1), ('straight-forward', 1), ('thinking process', 1), ('thought-process', 1), ('ting', 1), ('treeset', 1), ('video', 1), ('video-explanation', 1), ('visited', 1)]"
1006,Clumsy Factorial,https://leetcode.com/problems/clumsy-factorial,"Normally, the factorial of a positive integer n is the product of all positive integers less than or equal to n.  For example, factorial(10) = 10 * 9 * 8 * 7 * 6 * 5 * 4 * 3 * 2 * 1.

We instead make a clumsy factorial: using the integers in decreasing order, we swap out the multiply operations for a fixed rotation of operations: multiply (*), divide (/), add (+) and subtract (-) in this order.

For example, clumsy(10) = 10 * 9 / 8 + 7 - 6 * 5 / 4 + 3 - 2 * 1.  However, these operations are still applied using the usual order of operations of arithmetic: we do all multiplication and division steps before any addition or subtraction steps, and multiplication and division steps are processed left to right.

Additionally, the division that we use is floor division such that 10 * 9 / 8 equals 11.  This guarantees the result is an integer.

Implement the clumsy function as defined above: given an integer N, it returns the clumsy factorial of N.",['math'],Medium,121,174,29738,15988,[],"[('c++', 6), ('cpp', 4), ('c', 3), ('python', 3), ('python 3', 3), ('java-solution', 2), ('python3', 2), ('0ms', 1), ('4ms', 1), ('c#', 1), ('c++ solution', 1), ('cpp solution', 1), ('golang', 1), ('help me', 1), ('help needed', 1), ('javascript', 1), ('kotlin', 1), ('math', 1), ('number theory', 1), ('one-liner', 1), ('oneline', 1), ('performance', 1), ('periodic sequence', 1), ('question need help', 1), ('question-error', 1), ('question-not-clear', 1), ('questions', 1), ('remainder', 1), ('sequence', 1), ('series', 1), ('simple', 1)]"
1005,Maximize Sum Of Array After K Negations,https://leetcode.com/problems/maximize-sum-of-array-after-k-negations,"Given an array A of integers, we must modify the array in the following way: we choose an i and replace A[i] with -A[i], and we repeat this process K times in total.  (We may choose the same index i multiple times.)

Return the largest possible sum of the array after modifying it in this way.",['greedy'],Easy,565,55,72608,38005,[],"[('python', 20), ('c++', 19), ('python 3', 18), ('cpp', 14), ('java', 12), ('javascript', 11), ('heap', 10), ('easy-to-understand', 9), ('python3', 8), ('greedy', 7), ('heapq', 7), ('priority queue', 7), ('java-solution', 6), ('easytounderstand', 5), ('simple', 5), ('c#', 4), ('sorted array', 4), ('sorting', 4), ('easy', 3), ('easy-understanding', 3), ('easy-undestand', 3), ('sort', 3), ('c++11', 2), ('cpp solution', 2), ('golang', 2), ('greedy approach', 2), ('javascript solution', 2), ('min-heap', 2), ('ruby', 2), ('100', 1), ('1ms', 1), ('2 solutions', 1), ('4 lines', 1), ('4ms', 1), ('accepted solution', 1), ('ad-hoc', 1), ('avnish', 1), ('best', 1), ('brutal force', 1), ('c', 1), ('c++ code', 1), ('clean', 1), ('clear', 1), ('compact', 1), ('compare', 1), ('concise', 1), ('counter', 1), ('cpp easy', 1), ('csharp', 1), ('different approach', 1), ('easiest', 1), ('easy-understand', 1), ('exaplanation', 1), ('explained', 1), ('explanation', 1), ('explanations', 1), ('explanations4problem', 1), ('fast', 1), ('fast and simple', 1), ('faster then 95', 1), ('greedy algorithm', 1), ('heapify', 1), ('heaps', 1), ('inplace', 1), ('intuitive', 1), ('iteration', 1), ('iterative', 1), ('java ac solution', 1), ('kotlin', 1), ('linear', 1), ('logic explained', 1), ('logical', 1), ('min heap', 1), ('minimum-operation', 1), ('mrmagician', 1), ('n time', 1), ('nlogn', 1), ('nlogn time', 1), ('priority-queue', 1), ('recursive', 1), ('sorting-algorithms', 1), ('straightforward', 1), ('unique', 1)]"
1004,Max Consecutive Ones III,https://leetcode.com/problems/max-consecutive-ones-iii,"Given a binary array nums and an integer k, return the maximum number of consecutive 1's in the array if you can flip at most k 0's.","['two-pointers', 'sliding-window']",Medium,2095,31,163593,99751,"[""Longest Substring with At Most K Distinct Characters"", ""Longest Repeating Character Replacement"", ""Max Consecutive Ones"", ""Max Consecutive Ones II""]","[('sliding window', 25), ('slidingwindow', 23), ('c++', 22), ('java', 21), ('sliding-window', 21), ('python', 15), ('cpp', 12), ('javascript', 12), ('two-pointers', 10), ('python 3', 9), ('c#', 5), ('java-solution', 5), ('python3', 5), ('cpp solution', 4), ('easy-understanding', 4), ('slide window', 4), ('two-pointer', 4), ('deque', 3), ('golang', 3), ('kotlin', 3), ('two pointer', 3), ('two pointers', 3), ('#sliding-window', 2), ('2 pointers', 2), ('c++ code', 2), ('easy', 2), ('easy-to-understand', 2), ('explained', 2), ('fast-solution', 2), ('linear time', 2), ('loop', 2), ('simple solution', 2), ('sliding window algorithm', 2), ('swift', 2), ('#cpp', 1), ('#facebook', 1), ('#fast-enough', 1), ('#google', 1), ('#interview-crack-able', 1), ('#javascript', 1), ('#python 3', 1), ('#simple', 1), ('#straightforward', 1), ('#two-pointers', 1), ('#twopointer', 1), ('99.98 faster', 1), ('amazon', 1), ('approach', 1), ('array', 1), ('arrays', 1), ('best', 1), ('binarysearch', 1), ('c', 1), ('c++ easy to understand', 1), ('concise-solution', 1), ('constant memory', 1), ('constant space', 1), ('cplusplus', 1), ('cpp with explanation', 1), ('dynamic programming', 1), ('easy solution', 1), ('easy to understand', 1), ('easy-undestand', 1), ('es2015', 1), ('explanation simple', 1), ('explanation with logic', 1), ('fast', 1), ('fastest', 1), ('go', 1), ('go-solution', 1), ('golang-solution', 1), ('help me', 1), ('intuition', 1), ('java ac solution', 1), ('js', 1), ('keep it simple', 1), ('kotlinvim', 1), ('logical thinking', 1), ('maxconsecutiveonesiii', 1), ('one pass', 1), ('python deque', 1), ('pythonic', 1), ('readable', 1), ('ruby', 1), ('short solution', 1), ('simple', 1), ('simple clear', 1), ('simple clear c++ solution', 1), ('stars move the article up', 1), ('two pointer technique', 1), ('two-pointer-approach', 1), ('vmware', 1), ('while-loop', 1)]"
1003,Check If Word Is Valid After Substitutions,https://leetcode.com/problems/check-if-word-is-valid-after-substitutions,"Given a string s, determine if it is valid.

A string s is valid if, starting with an empty string t = """", you can transform t into s after performing the following operation any number of times:


	Insert string ""abc"" into any position in t. More formally, t becomes tleft + ""abc"" + tright, where t == tleft + tright. Note that tleft and tright may be empty.


Return true if s is a valid string, otherwise, return false.","['string', 'stack']",Medium,346,383,53317,30232,"[""Valid Parentheses""]","[('stack', 16), ('python', 9), ('c++', 7), ('cpp', 6), ('python 3', 5), ('java', 4), ('javascript', 4), ('c++ code', 2), ('cpp solution', 2), ('easy', 2), ('easy-understanding', 2), ('golang', 2), ('java-solution', 2), ('python3', 2), ('swift', 2), ('2 pointers', 1), ('c', 1), ('c code', 1), ('cpp easy', 1), ('easy-to-understand', 1), ('easytounderstand', 1), ('go', 1), ('golang solution', 1), ('golang-solution', 1), ('java ac solution', 1), ('js', 1), ('pointer', 1), ('stack-based', 1), ('stacks', 1), ('vector', 1), ('wrong testcase', 1)]"
1002,Find Common Characters,https://leetcode.com/problems/find-common-characters,"Given an array A of strings made only from lowercase letters, return a list of all characters that show up in all strings within the list (including duplicates).  For example, if a character occurs 3 times in all strings but not 4 times, you need to include that character three times in the final answer.

You may return the answer in any order.","['array', 'hash-table']",Easy,1451,142,154510,106099,"[""Intersection of Two Arrays II""]","[('python', 39), ('c++', 36), ('python 3', 30), ('java', 28), ('javascript', 28), ('hashmap', 23), ('python3', 20), ('cpp', 18), ('easy-understanding', 16), ('java-solution', 12), ('easy', 10), ('c#', 8), ('map', 7), ('counter', 6), ('golang', 6), ('easytounderstand', 5), ('ruby', 5), ('array', 4), ('easy-to-understand', 4), ('easy-undestand', 4), ('hash table', 4), ('kotlin', 4), ('swift', 4), ('c', 3), ('commented', 3), ('cpp solution', 3), ('go', 3), ('golang-solution', 3), ('vector', 3), ('clean code', 2), ('count', 2), ('dictionary', 2), ('easy to understand', 2), ('fast', 2), ('functional', 2), ('hashtable', 2), ('javascript solution', 2), ('js', 2), ('list', 2), ('map-reduce', 2), ('one-liner', 2), ('python3.8', 2), ('reduce', 2), ('set', 2), ('stacks', 2), ('string', 2), ('#python', 1), ('100', 1), ('2darray', 1), ('9 lines', 1), ('arraylist', 1), ('arrays', 1), ('beats 100', 1), ('beginner', 1), ('bitwise operation', 1), ('broken', 1), ('c code', 1), ('c++ code', 1), ('c++ iterative sol', 1), ('c++ solution', 1), ('c++11', 1), ('c++14', 1), ('c++17', 1), ('c++20', 1), ('charmap', 1), ('concise', 1), ('constant space', 1), ('cpp easy', 1), ('defaultdict', 1), ('dict', 1), ('dictionary features', 1), ('dictonary', 1), ('easy sloution', 1), ('easy to understandd', 1), ('easy understanding', 1), ('easy-to-read', 1), ('easy-understand', 1), ('efficient', 1), ('efficient solution', 1), ('error', 1), ('error message', 1), ('fast and simple', 1), ('fast-solution', 1), ('faster then 95', 1), ('filter', 1), ('fixed array', 1), ('flags', 1), ('frequency', 1), ('frequencycounting', 1), ('gorillaz', 1), ('hashing', 1), ('hashmaps', 1), ('heap-buffer-overflow', 1), ('i want get a star', 1), ('intersection', 1), ('intuitive', 1), ('java 8', 1), ('java ac solution', 1), ('java solution sharing', 1), ('keep it simple', 1), ('linq', 1), ('mapping', 1), ('mapreduce', 1), ('modern c++', 1), ('one line', 1), ('optimal', 1), ('python2', 1), ('pythonic', 1), ('pythonpython3', 1), ('readable', 1), ('recursion formula', 1), ('regexp', 1), ('rust', 1), ('set intersection', 1), ('sets', 1), ('shorter-solution', 1), ('simple', 1), ('slow', 1), ('sorting', 1), ('stl', 1), ('stl algorithms', 1), ('two-pointers', 1), ('typescript', 1), ('unit-test', 1), ('very easy to understand', 1), ('with explanation', 1)]"
1001,Grid Illumination,https://leetcode.com/problems/grid-illumination,"There is a 2D grid of size N x N where each cell of this grid has a lamp that is initially turned off.

You are given a 2D array of lamp positions lamps, where lamps[i] = [rowi, coli] indicates that the lamp at grid[rowi][coli] is turned on. Even if the same lamp is listed more than once, it is turned on.

When a lamp is turned on, it illuminates its cell and all other cells in the same row, column, or diagonal.

You are also given another 2D array queries, where queries[j] = [rowj, colj]. For the jth query, determine whether grid[rowj][colj] is illuminated or not. After answering the jth query, turn off the lamp at grid[rowj][colj] and its 8 adjacent lamps if they exist. A lamp is adjacent if its cell shares either a side or corner with grid[rowj][colj].

Return an array of integers ans, where ans[j] should be 1 if the cell in the jth query was illuminated, or 0 if the lamp was not.",['hash-table'],Hard,262,79,32156,11582,"[""N-Queens""]","[('c++', 3), ('c#', 2), ('cpp solution', 2), ('dictionary', 2), ('hash table', 2), ('hashmap', 2), ('comments-added', 1), ('cpp easy', 1), ('easy understand', 1), ('easy-understanding', 1), ('es6', 1), ('incorrect-test-case', 1), ('java', 1), ('javascript', 1), ('less memory', 1), ('linear seach', 1), ('memoziation', 1), ('n-queens', 1), ('python', 1)]"
1000,Minimum Cost to Merge Stones,https://leetcode.com/problems/minimum-cost-to-merge-stones,"There are N piles of stones arranged in a row.  The i-th pile has stones[i] stones.

A move consists of merging exactly K consecutive piles into one pile, and the cost of this move is equal to the total number of stones in these K piles.

Find the minimum cost to merge all piles of stones into one pile.  If it is impossible, return -1.",['dynamic-programming'],Hard,924,60,49225,20006,"[""Burst Balloons"", ""Minimum Cost to Connect Sticks""]","[('dp', 8), ('dynamic programming', 8), ('c#', 5), ('cpp', 4), ('java', 3), ('python 3', 3), ('c++', 2), ('explanation of logic', 2), ('bottom up', 1), ('bottomup', 1), ('commented code', 1), ('comments-added', 1), ('cpp-solution', 1), ('dynamic-programming', 1), ('explained', 1), ('failed', 1), ('huffman encoding', 1), ('intuitive', 1), ('javascript', 1), ('lc#1000', 1), ('logical thinking', 1), ('memoization', 1), ('memory optimized', 1), ('minimumcosttomergestones', 1), ('python', 1), ('python3', 1), ('simple', 1), ('time complexity', 1), ('top-down dp', 1)]"
999,Available Captures for Rook,https://leetcode.com/problems/available-captures-for-rook,"On an 8 x 8 chessboard, there is exactly one white rook 'R' and some number of white bishops 'B', black pawns 'p', and empty squares '.'.

When the rook moves, it chooses one of four cardinal directions (north, east, south, or west), then moves in that direction until it chooses to stop, reaches the edge of the board, captures a black pawn, or is blocked by a white bishop. A rook is considered attacking a pawn if the rook can capture the pawn on the rook's turn. The number of available captures for the white rook is the number of pawns that the rook is attacking.

Return the number of available captures for the white rook.",['array'],Easy,324,500,60817,41204,[],"[('java', 20), ('javascript', 18), ('c++', 17), ('python 3', 14), ('cpp', 13), ('python3', 13), ('python', 12), ('c#', 11), ('easy-understanding', 8), ('java-solution', 7), ('easy', 5), ('easy-to-understand', 5), ('golang', 4), ('simple', 4), ('swift', 4), ('recursion', 3), ('simple-solution', 3), ('999', 2), ('beats 100', 2), ('c', 2), ('c++ code', 2), ('clean code', 2), ('comments', 2), ('cpp solution', 2), ('explanation', 2), ('recursive', 2), ('ruby', 2), ('simpe', 2), ('#availablecapturesofrook', 1), ('#python', 1), ('1-line', 1), ('100', 1), ('100 speed', 1), ('2d-array', 1), ('algorithms', 1), ('array', 1), ('avengers', 1), ('c++ easy to understand', 1), ('capturesforrook', 1), ('chess', 1), ('clear', 1), ('commented', 1), ('comments-added', 1), ('easiest', 1), ('easysolution', 1), ('efficent approach', 1), ('efficient', 1), ('explaination', 1), ('explained', 1), ('explanations', 1), ('fast', 1), ('faster than 100.00', 1), ('fastest', 1), ('four-direction', 1), ('functional-programming', 1), ('go', 1), ('gorillaz', 1), ('hashing', 1), ('index-array', 1), ('intuitive', 1), ('intutive', 1), ('iteratively', 1), ('java ac solution', 1), ('javascript brute force', 1), ('js', 1), ('list comprehension', 1), ('lookup', 1), ('loop method', 1), ('loops', 1), ('nodejs', 1), ('performance', 1), ('php', 1), ('python2', 1), ('readable', 1), ('recurision', 1), ('regex', 1), ('rust', 1), ('short code', 1), ('simple python accepted', 1), ('simple solution', 1), ('simplest', 1), ('solution', 1), ('solution c++', 1), ('three-lines', 1), ('ultra easy', 1), ('unit-test', 1), ('while-loop', 1)]"
998,Maximum Binary Tree II,https://leetcode.com/problems/maximum-binary-tree-ii,"We are given the root node of a maximum tree: a tree where every node has a value greater than any other value in its subtree.

Just as in the previous problem, the given tree was constructed from an list A (root = Construct(A)) recursively with the following Construct(A) routine:


	If A is empty, return null.
	Otherwise, let A[i] be the largest element of A.  Create a root node with value A[i].
	The left child of root will be Construct([A[0], A[1], ..., A[i-1]])
	The right child of root will be Construct([A[i+1], A[i+2], ..., A[A.length - 1]])
	Return root.


Note that we were not given A directly, only a root node root = Construct(A).

Suppose B is a copy of A with the value val appended to it.  It is guaranteed that B has unique values.

Return Construct(B).",['tree'],Medium,257,504,32858,21081,"[""Maximum Binary Tree""]","[('java', 7), ('c++', 6), ('python 3', 6), ('golang', 3), ('iterative', 3), ('recursion', 3), ('recursive', 3), ('recursively', 3), ('c#', 2), ('cpp', 2), ('dfs', 2), ('iteratively', 2), ('python', 2), ('python3', 2), ('#c++', 1), ('#recursion', 1), ('#tree', 1), ('binary-tree', 1), ('brute-force', 1), ('c', 1), ('c code', 1), ('clean solution', 1), ('csharp', 1), ('depth first search', 1), ('dfs simple solution', 1), ('easy-to-understand', 1), ('elegant solution', 1), ('fast and simple', 1), ('fastest', 1), ('iteration', 1), ('java-solution', 1), ('javascript', 1), ('kotlin', 1), ('maximum tree2', 1), ('maximum-tree', 1), ('maximumbinarytree', 1), ('preorder traversal', 1), ('recursive easy', 1), ('short code', 1), ('simpe', 1), ('simple', 1), ('swift', 1), ('tree', 1)]"
997,Find the Town Judge,https://leetcode.com/problems/find-the-town-judge,"In a town, there are N people labelled from 1 to N.  There is a rumor that one of these people is secretly the town judge.

If the town judge exists, then:


	The town judge trusts nobody.
	Everybody (except for the town judge) trusts the town judge.
	There is exactly one person that satisfies properties 1 and 2.


You are given trust, an array of pairs trust[i] = [a, b] representing that the person labelled a trusts the person labelled b.

If the town judge exists and can be identified, return the label of the town judge.  Otherwise, return -1.",['graph'],Easy,1535,128,336060,167439,"[""Find the Celebrity""]","[('graph', 37), ('java', 33), ('c++', 29), ('cpp', 25), ('python', 23), ('easy-understanding', 20), ('python3', 20), ('python 3', 19), ('java-solution', 15), ('javascript', 13), ('hashmap', 12), ('indegree', 9), ('c#', 7), ('outdegree', 7), ('simple solution', 6), ('c++ code', 5), ('easy-undestand', 5), ('c', 4), ('easy', 4), ('golang', 4), ('ruby', 4), ('hash table', 3), ('map', 3), ('rust', 3), ('simple', 3), ('swift', 3), ('100', 2), ('commented', 2), ('cpp solution', 2), ('degree', 2), ('explanation', 2), ('hashset', 2), ('java ac solution', 2), ('linear', 2), ('linear time', 2), ('out-degree', 2), ('python2', 2), ('single pass', 2), ('#python', 1), ('#python3', 1), ('100 space', 1), ('2 solutions', 1), ('6 lines', 1), ('accepted solution', 1), ('adjacency', 1), ('adjacency list', 1), ('adjacency matrix', 1), ('best memory', 1), ('best time complexity', 1), ('bfs', 1), ('brute force', 1), ('c programming', 1), ('c++ hash', 1), ('c++11', 1), ('clean code', 1), ('clean-efficient-code', 1), ('clear explanation', 1), ('closure', 1), ('comments added', 1), ('count', 1), ('counter', 1), ('cpp-solution', 1), ('csharp', 1), ('dfs solution', 1), ('diagram', 1), ('dict', 1), ('dictionary', 1), ('directed graph', 1), ('directed-graph', 1), ('easy sloution', 1), ('easy to understand', 1), ('easy understanding', 1), ('easy undestanding', 1), ('easy-to-understand', 1), ('easytounderstand', 1), ('efficient solution', 1), ('explained', 1), ('fast', 1), ('faster', 1), ('find the town judge', 1), ('functional', 1), ('go', 1), ('golang-solution', 1), ('graph-theory', 1), ('graphs', 1), ('hash-table', 1), ('hashtable', 1), ('in-degree', 1), ('indgree', 1), ('intersection', 1), ('intuitive', 1), ('ios', 1), ('iteration', 1), ('iterative', 1), ('iteratively', 1), ('iterator', 1), ('java solution', 1), ('javascript solution', 1), ('js javascript', 1), ('linear memory', 1), ('linear-time-space', 1), ('linq', 1), ('logic explained', 1), ('logic explained clearly', 1), ('mrmagician', 1), ('naive', 1), ('one pass', 1), ('php', 1), ('priority queue', 1), ('question explained', 1), ('readable', 1), ('scala', 1), ('score', 1), ('set', 1), ('sets', 1), ('short code', 1), ('simpe', 1), ('simple clear c++ solution', 1), ('simple java solution', 1), ('solution explained', 1), ('solution-python', 1), ('thinking process', 1), ('three-lines', 1), ('two arrays', 1), ('typescript', 1), ('unordered map', 1), ('upvote', 1), ('using dictionary', 1), ('using list', 1), ('visited', 1), ('visualization', 1), ('with comments', 1)]"
996,Number of Squareful Arrays,https://leetcode.com/problems/number-of-squareful-arrays,"Given an array A of non-negative integers, the array is squareful if for every pair of adjacent elements, their sum is a perfect square.

Return the number of permutations of A that are squareful.  Two permutations A1 and A2 differ if and only if there is some index i such that A1[i] != A2[i].","['math', 'backtracking', 'graph']",Hard,474,23,38916,18889,"[""Permutations II""]","[('backtracking', 17), ('dfs', 4), ('c++', 3), ('dynamic programming', 3), ('java', 3), ('python', 3), ('python3', 3), ('bitmask', 2), ('c#', 2), ('dp', 2), ('javascript', 2), ('permutation', 2), ('python 3', 2), ('swift', 2), ('0ms', 1), ('backtrack', 1), ('bfs', 1), ('c++ code', 1), ('cpp', 1), ('cpp doubt', 1), ('dfs with dp', 1), ('dynamic-programming', 1), ('golang', 1), ('hamiltonian path', 1), ('java ac solution', 1), ('java-solution', 1), ('logical thinking', 1), ('nonrecursive', 1), ('permutations', 1), ('pruning', 1), ('recursion', 1), ('recusion', 1)]"
995,Minimum Number of K Consecutive Bit Flips,https://leetcode.com/problems/minimum-number-of-k-consecutive-bit-flips,"In an array A containing only 0s and 1s, a K-bit flip consists of choosing a (contiguous) subarray of length K and simultaneously changing every 0 in the subarray to 1, and every 1 in the subarray to 0.

Return the minimum number of K-bit flips required so that there is no 0 in the array.  If it is not possible, return -1.","['greedy', 'sliding-window']",Hard,532,43,39586,19831,"[""Bulb Switcher""]","[('c++', 4), ('cpp', 3), ('greedy', 3), ('c#', 2), ('backtracking', 1), ('beats 100', 1), ('bit manipulation', 1), ('bitwise', 1), ('fastest', 1), ('greedy approach', 1), ('java', 1), ('javascript', 1), ('linear time', 1), ('logical thinking', 1), ('math', 1), ('proof', 1), ('queue', 1), ('ruby', 1), ('solution-sharing', 1), ('stack', 1), ('typescript', 1)]"
994,Rotting Oranges,https://leetcode.com/problems/rotting-oranges,"You are given an m x n grid where each cell can have one of three values:


	0 representing an empty cell,
	1 representing a fresh orange, or
	2 representing a rotten orange.


Every minute, any fresh orange that is 4-directionally adjacent to a rotten orange becomes rotten.

Return the minimum number of minutes that must elapse until no cell has a fresh orange. If this is impossible, return -1.",['breadth-first-search'],Medium,3294,216,422627,210083,"[""Walls and Gates""]","[('bfs', 184), ('java', 56), ('c++', 53), ('python 3', 44), ('python', 41), ('queue', 33), ('javascript', 29), ('cpp', 23), ('breadth first search', 19), ('c#', 17), ('easy-understanding', 15), ('python3', 15), ('java-solution', 14), ('breadth-first-search', 9), ('explained', 9), ('easy', 8), ('swift', 8), ('dfs', 7), ('easytounderstand', 7), ('simple solution', 7), ('c++ code', 6), ('clean code', 6), ('cpp solution', 6), ('beginner friendly', 5), ('bfs python', 5), ('clean', 5), ('deque', 5), ('golang', 5), ('graph', 5), ('bfs simple solution', 4), ('easy-undestand', 4), ('fast', 4), ('ruby', 4), ('simulation', 4), ('100 speed', 3), ('bfs java', 3), ('commented', 3), ('comments', 3), ('easy to understand', 3), ('easy-to-understand', 3), ('explained solution', 3), ('golang-solution', 3), ('hashset', 3), ('intuitive', 3), ('java ac solution', 3), ('multisource-bfs', 3), ('cpp easy', 2), ('csharp', 2), ('depth first search', 2), ('detailed explanation', 2), ('dfs simple solution', 2), ('explanation', 2), ('fast and simple', 2), ('floodfill', 2), ('go lang', 2), ('grid', 2), ('in-place', 2), ('iterative', 2), ('level-order', 2), ('level-order-traversal', 2), ('meiyaowen', 2), ('recursion', 2), ('rotting oranges', 2), ('sets', 2), ('simple', 2), ('typescript', 2), ('#bfs', 1), ('#javascript', 1), ('#queue', 1), ('0ms-4ms', 1), ('100 space', 1), ('2ms', 1), ('ac solution', 1), ('accepted', 1), ('adjacency matrix', 1), ('akku', 1), ('algorithm-proof', 1), ('algorithms', 1), ('automata', 1), ('beats 100', 1), ('best explaination', 1), ('bfs-java', 1), ('bfsc++', 1), ('big o of n', 1), ('brute force', 1), ('brute-force', 1), ('c++ easy to understand', 1), ('c++ solution', 1), ('c++11', 1), ('clean code with comments', 1), ('commentary', 1), ('commented code', 1), ('comments added', 1), ('comments-added', 1), ('commetend', 1), ('consice', 1), ('cupc', 1), ('customized bfs', 1), ('defaultdict', 1), ('description', 1), ('dfs recursive', 1), ('easiest', 1), ('easy to understant', 1), ('easy-solution', 1), ('easy-understand', 1), ('easysolution', 1), ('easytoundersatand', 1), ('efficient', 1), ('encoding', 1), ('explaination', 1), ('explanation of logic', 1), ('explanation with logic', 1), ('fast-solution', 1), ('finite state machine', 1), ('finite-state-machine', 1), ('go', 1), ('go-solution', 1), ('graceful', 1), ('heavily commented', 1), ('iterative python bfs', 1), ('iterative way', 1), ('javascript solution', 1), ('js', 1), ('keep it simple', 1), ('kotlin', 1), ('level order traversal', 1), ('linear', 1), ('logic explained', 1), ('loops', 1), ('matrix', 1), ('new approach', 1), ('no extra space', 1), ('o1 space', 1), ('oop', 1), ('oops', 1), ('optimal', 1), ('oranges', 1), ('paypal', 1), ('php', 1), ('python bfs iterative', 1), ('python2', 1), ('pythonpython3', 1), ('queue-approach', 1), ('readable', 1), ('recursive-dfs', 1), ('scala', 1), ('sequential search', 1), ('short', 1), ('simple and elegant', 1), ('solution', 1), ('state machine', 1), ('state-machine', 1), ('swift5', 1), ('time complexity', 1), ('time optimize', 1), ('traverse', 1), ('tree traversal', 1), ('tree-traversal', 1), ('video', 1), ('video explaination', 1), ('video-explanation', 1), ('visualization', 1), ('well-explained', 1), ('with explanation', 1), ('wow', 1)]"
993,Cousins in Binary Tree,https://leetcode.com/problems/cousins-in-binary-tree,"In a binary tree, the root node is at depth 0, and children of each depth k node are at depth k+1.

Two nodes of a binary tree are cousins if they have the same depth, but have different parents.

We are given the root of a binary tree with unique values, and the values x and y of two different nodes in the tree.

Return true if and only if the nodes corresponding to the values x and y are cousins.","['tree', 'breadth-first-search']",Easy,1471,81,277214,145055,"[""Binary Tree Level Order Traversal""]","[('bfs', 80), ('java', 57), ('dfs', 47), ('c++', 41), ('python', 39), ('python 3', 34), ('recursion', 31), ('cpp', 29), ('javascript', 28), ('java-solution', 25), ('easy-understanding', 16), ('level-order-traversal', 16), ('python3', 13), ('binary-tree', 10), ('c#', 10), ('queue', 9), ('recursive', 9), ('breadth first search', 8), ('easy-undestand', 8), ('dfs simple solution', 7), ('cpp solution', 6), ('dfs-bfs', 6), ('easy', 6), ('easy-to-understand', 6), ('golang', 6), ('iterative', 6), ('recusion', 6), ('clean code', 5), ('easy to understand', 5), ('hashmap', 5), ('swift', 5), ('tree-traversal', 5), ('c++ code', 4), ('easytounderstand', 4), ('explained', 4), ('javascript solution', 4), ('ruby', 4), ('trees', 4), ('breadth-first-search', 3), ('cousins in binary tree', 3), ('depth-first search', 3), ('depth-first-search', 3), ('dfs-tree', 3), ('level order traversal', 3), ('map', 3), ('simple', 3), ('simple clear c++ solution', 3), ('100 speed', 2), ('accepted solution', 2), ('beats 100', 2), ('beginner friendly', 2), ('bfs java', 2), ('bfs simple solution', 2), ('binary tree', 2), ('bsf', 2), ('c', 2), ('c++ recursive solution', 2), ('c++11', 2), ('commented', 2), ('comments', 2), ('depth first search', 2), ('easy-peasy', 2), ('golang-solution', 2), ('help me', 2), ('intuitive', 2), ('javascrip', 2), ('level order', 2), ('preorder-traversal', 2), ('python2', 2), ('python3.8', 2), ('readable', 2), ('recursive solution', 2), ('simple solution', 2), ('straightforward', 2), ('tree', 2), ('#bruteforce', 1), ('#dfs', 1), ('#python', 1), ('0ms', 1), ('0ms runtime', 1), ('100', 1), ('100 faster', 1), ('100 memory', 1), ('1ms', 1), ('98 memory usage', 1), ('amazon', 1), ('beats 100 percent', 1), ('bfs python', 1), ('bfs with prev path map', 1), ('bfs-dfs', 1), ('binary search tree', 1), ('binary-search', 1), ('binary-search-tree', 1), ('binarytree', 1), ('broken', 1), ('brute-force', 1), ('bst', 1), ('c++ iterative sol', 1), ('c++ monotonic stack', 1), ('c++ solution', 1), ('c++14', 1), ('c++17', 1), ('compact', 1), ('complexity-analysis', 1), ('comprehensive', 1), ('csharp', 1), ('deep-first-search', 1), ('depth', 1), ('deque', 1), ('dfs pre-order traversal', 1), ('dfs recursive', 1), ('dfs solution', 1), ('dfs with memo', 1), ('dictionary', 1), ('dictonary', 1), ('doubts', 1), ('dp made easy', 1), ('dp-techqique', 1), ('dynamic programmin', 1), ('easy-solution', 1), ('easy-understsand', 1), ('effecient', 1), ('expalanation', 1), ('explain', 1), ('explaination', 1), ('explanation', 1), ('extend class', 1), ('fast-solution', 1), ('faster than 80', 1), ('find', 1), ('go', 1), ('height of a binary tree', 1), ('in-order-dfs', 1), ('in-order-traversal', 1), ('interview', 1), ('iteration', 1), ('iteration vs recursion', 1), ('iterative solution', 1), ('iterative traversal', 1), ('iterative vs recursive', 1), ('iteratively', 1), ('itereative', 1), ('java ac solution', 1), ('java solution', 1), ('js', 1), ('kotlinvim', 1), ('linear time', 1), ('lowest-common-ancestor', 1), ('memory-efficient', 1), ('newbie', 1), ('no-booleans', 1), ('non-recursion', 1), ('norecursion', 1), ('oop', 1), ('pair', 1), ('parents map', 1), ('php', 1), ('pre-order', 1), ('preorder', 1), ('preorder traversal', 1), ('pruning', 1), ('pyhton', 1), ('python bfs', 1), ('queue and hashmap', 1), ('queue-approach', 1), ('queues', 1), ('recrusive', 1), ('recursion vs iteration', 1), ('recursive easy', 1), ('recursive vs iterative', 1), ('recurssion', 1), ('recusrive', 1), ('scala', 1), ('solution', 1), ('space-efficient', 1), ('stack', 1), ('step by step', 1), ('step by step explanation', 1), ('tree problem', 1), ('tree traversal', 1), ('treemap', 1), ('typescript', 1), ('unique solution', 1), ('unusual', 1), ('whileloop', 1), ('wrong-answer-java', 1)]"
992,Subarrays with K Different Integers,https://leetcode.com/problems/subarrays-with-k-different-integers,"Given an array A of positive integers, call a (contiguous, not necessarily distinct) subarray of A good if the number of different integers in that subarray is exactly K.

(For example, [1,2,3,1,2] has 3 different integers: 1, 2, and 3.)

Return the number of good subarrays of A.","['hash-table', 'two-pointers', 'sliding-window']",Hard,1707,27,85923,43764,"[""Longest Substring Without Repeating Characters"", ""Longest Substring with At Most Two Distinct Characters"", ""Longest Substring with At Most K Distinct Characters""]","[('sliding-window', 8), ('slidingwindow', 7), ('c++', 4), ('java', 4), ('python3', 4), ('cpp', 3), ('hashmap', 3), ('python', 3), ('python 3', 3), ('array', 2), ('c#', 2), ('javascript', 2), ('slide window', 2), ('approach', 1), ('atmostk', 1), ('c++ code', 1), ('c++11', 1), ('clean code', 1), ('documented', 1), ('dryrun', 1), ('easy', 1), ('explaination', 1), ('explained', 1), ('fastest', 1), ('go-solution', 1), ('golang', 1), ('golang-solution', 1), ('hashtable', 1), ('java-solution', 1), ('javascrip', 1), ('javascript solution', 1), ('logical thinking', 1), ('ordered-dict', 1), ('ordereddict', 1), ('picture', 1), ('quadratic', 1), ('queue', 1), ('short', 1), ('short code', 1), ('sliding window', 1), ('somal', 1), ('space-efficient', 1), ('tle', 1), ('two pointers', 1)]"
991,Broken Calculator,https://leetcode.com/problems/broken-calculator,"On a broken calculator that has a number showing on its display, we can perform two operations:


	Double: Multiply the number on the display by 2, or;
	Decrement: Subtract 1 from the number on the display.


Initially, the calculator is displaying the number X.

Return the minimum number of operations needed to display the number Y.","['math', 'greedy']",Medium,880,132,85072,42322,"[""2 Keys Keyboard""]","[('c++', 18), ('python', 16), ('cpp', 12), ('greedy', 12), ('python3', 9), ('java', 7), ('javascript', 5), ('math', 5), ('greedy approach', 4), ('python 3', 4), ('recursive', 4), ('bfs', 3), ('c#', 3), ('cpp solution', 3), ('easy-to-understand', 3), ('easy-understanding', 3), ('java-solution', 3), ('recursion', 3), ('explained', 2), ('swift', 2), ('arraylist', 1), ('backtracking', 1), ('backward', 1), ('beats 100', 1), ('bit manipulation', 1), ('bit-manipulation', 1), ('brokencalculator', 1), ('c++solution', 1), ('complexity', 1), ('complexity analysis', 1), ('complexity-analysis', 1), ('easytounderstand', 1), ('explain', 1), ('explained solution', 1), ('explanation', 1), ('fast and simple', 1), ('greedy algorithm', 1), ('illustrated', 1), ('improvement-needed', 1), ('iteration', 1), ('iterative', 1), ('iteratve-recursive', 1), ('java ac solution', 1), ('javascipt', 1), ('one-liner', 1), ('priority queue', 1), ('queue', 1), ('readable', 1), ('recurision', 1), ('recursive solution', 1), ('ruby', 1), ('simple math', 1), ('space complexity', 1), ('time complexity', 1), ('video', 1), ('video explaination', 1), ('video-explanation', 1), ('visual', 1)]"
990,Satisfiability of Equality Equations,https://leetcode.com/problems/satisfiability-of-equality-equations,"Given an array equations of strings that represent relationships between variables, each string equations[i] has length 4 and takes one of two different forms: ""a==b"" or ""a!=b"".  Here, a and b are lowercase letters (not necessarily different) that represent one-letter variable names.

Return true if and only if it is possible to assign integers to variable names so as to satisfy all the given equations.","['union-find', 'graph']",Medium,802,7,59942,28299,[],"[('union find', 32), ('c++', 15), ('python', 9), ('java', 8), ('python 3', 8), ('c#', 6), ('dsu', 6), ('python3', 5), ('c++ code', 4), ('dfs', 4), ('graph', 4), ('java-solution', 4), ('union-find', 4), ('unionfind', 3), ('connected components', 2), ('cpp', 2), ('disjoint-set', 2), ('easy', 2), ('javascript', 2), ('kotlin', 2), ('#easy-understand', 1), ('#explained', 1), ('#python', 1), ('#unionfind', 1), ('#withcomments', 1), ('1ms', 1), ('c++ solution', 1), ('c++11', 1), ('clear-understanding', 1), ('color', 1), ('comments', 1), ('cpp easy', 1), ('cpp solution', 1), ('dfs solution', 1), ('disjoint union set', 1), ('disjointset', 1), ('easy-understanding', 1), ('easytounderstand', 1), ('find-union', 1), ('golang', 1), ('hashmap', 1), ('java ac solution', 1), ('path compression', 1), ('swift', 1), ('typescript', 1), ('union and find', 1), ('union-by-rank', 1), ('zea7ot', 1)]"
989,Add to Array-Form of Integer,https://leetcode.com/problems/add-to-array-form-of-integer,"The array-form of an integer num is an array representing its digits in left to right order.


	For example, for num = 1321, the array form is [1,3,2,1].


Given num, the array-form of an integer, and an integer k, return the array-form of the integer num + k.",['array'],Easy,598,94,154384,69414,"[""Add Two Numbers"", ""Plus One"", ""Add Binary"", ""Add Strings""]","[('c++', 27), ('python', 19), ('cpp', 14), ('python 3', 14), ('python3', 14), ('java', 13), ('javascript', 9), ('array', 7), ('c#', 7), ('java-solution', 6), ('easy-understanding', 5), ('easy-undestand', 5), ('golang', 5), ('one-liner', 5), ('c', 4), ('easy', 4), ('go', 3), ('ruby', 3), ('simple', 3), ('biginteger', 2), ('c++ code', 2), ('clean code', 2), ('cpp solution', 2), ('cpp-solution', 2), ('easy to understand', 2), ('easytounderstand', 2), ('linear time', 2), ('one line', 2), ('swift', 2), ('swift5', 2), ('1 line', 1), ('1 liner', 1), ('1-line', 1), ('100', 1), ('adder', 1), ('algorithms', 1), ('arraylist', 1), ('beginner friendly', 1), ('c++11', 1), ('clean-code', 1), ('csharp', 1), ('easiest', 1), ('easy understand', 1), ('easy-to-understand', 1), ('efficient', 1), ('facebook', 1), ('go-solution', 1), ('golang-solution', 1), ('good-variable-names', 1), ('java solution', 1), ('linq', 1), ('list', 1), ('list comprehension', 1), ('list-comprehension', 1), ('loop', 1), ('map', 1), ('math', 1), ('maths', 1), ('no extra memory', 1), ('pythonic', 1), ('queue', 1), ('quick', 1), ('readable', 1), ('simple solution', 1), ('string', 1), ('sum of two integers', 1), ('track of carry', 1), ('unit-test', 1), ('vector-c++', 1)]"
988,Smallest String Starting From Leaf,https://leetcode.com/problems/smallest-string-starting-from-leaf,"Given the root of a binary tree, each node has a value from 0 to 25 representing the letters 'a' to 'z': a value of 0 represents 'a', a value of 1 represents 'b', and so on.

Find the lexicographically smallest string that starts at a leaf of this tree and ends at the root.

(As a reminder, any shorter prefix of a string is lexicographically smaller: for example, ""ab"" is lexicographically smaller than ""aba"".  A leaf of a node is a node that has no children.)","['tree', 'depth-first-search']",Medium,618,120,78509,36873,"[""Sum Root to Leaf Numbers"", ""Binary Tree Paths""]","[('dfs', 16), ('c++', 13), ('python 3', 9), ('backtracking', 7), ('cpp', 7), ('python', 7), ('python3', 7), ('recursion', 7), ('java', 6), ('javascript', 5), ('c#', 3), ('depth first search', 3), ('java-solution', 3), ('beats-100', 2), ('c++ code', 2), ('dfs simple solution', 2), ('dfs-topdown', 2), ('dfs-tree', 2), ('iterative', 2), ('lexicographical order', 2), ('linear time', 2), ('priority queue', 2), ('recursive', 2), ('string', 2), ('tree-traversal', 2), ('5ms', 1), ('array', 1), ('back tracking', 1), ('beginner friendly', 1), ('bfs', 1), ('binary-tree', 1), ('bugs', 1), ('cpp easy', 1), ('cpp solution', 1), ('dfs recursive', 1), ('dfs-in-order', 1), ('easy', 1), ('easy-understanding', 1), ('explanation of logic', 1), ('fast', 1), ('fast and simple', 1), ('golang', 1), ('help needed', 1), ('improvement-needed', 1), ('linked-list', 1), ('map', 1), ('maxheap', 1), ('norecursion', 1), ('optimizations', 1), ('postorder', 1), ('postorder traversal', 1), ('preorder', 1), ('preorder traversal', 1), ('python dfs', 1), ('python2', 1), ('queue', 1), ('recurision', 1), ('recursivbe', 1), ('recursive-dfs', 1), ('recursively', 1), ('ruby', 1), ('simple solution', 1), ('smallestfromleaf', 1), ('solution', 1), ('sort', 1), ('stack', 1), ('strings', 1), ('strings manipulation', 1), ('swift', 1), ('testcase error', 1), ('tree', 1), ('tree traversal', 1), ('typescript', 1), ('vector-c++', 1), ('wrong answer', 1), ('wrong-answer', 1), ('wrongtest case', 1)]"
987,Vertical Order Traversal of a Binary Tree,https://leetcode.com/problems/vertical-order-traversal-of-a-binary-tree,"Given the root of a binary tree, calculate the vertical order traversal of the binary tree.

For each node at position (row, col), its left and right children will be at positions (row + 1, col - 1) and (row + 1, col + 1) respectively. The root of the tree is at (0, 0).

The vertical order traversal of a binary tree is a list of top-to-bottom orderings for each column index starting from the leftmost column and ending on the rightmost column. There may be multiple nodes in the same row and same column. In such a case, sort these nodes by their values.

Return the vertical order traversal of the binary tree.","['hash-table', 'tree', 'depth-first-search', 'breadth-first-search']",Hard,1462,2422,354905,138835,[],"[('bfs', 55), ('c++', 46), ('dfs', 44), ('java', 43), ('python', 38), ('map', 31), ('hashmap', 29), ('python 3', 23), ('cpp', 20), ('javascript', 18), ('python3', 14), ('c#', 13), ('treemap', 13), ('java-solution', 11), ('sorting', 11), ('binary-tree', 9), ('priority queue', 9), ('easy-understanding', 8), ('recursion', 8), ('defaultdict', 7), ('dfs simple solution', 7), ('level-order-traversal', 7), ('queue', 7), ('depth first search', 6), ('swift', 6), ('tree-traversal', 6), ('cpp solution', 5), ('dfs recursive', 5), ('sort', 5), ('dictionary', 4), ('explained', 4), ('fast-solution', 4), ('golang', 4), ('javascript solution', 4), ('preorder traversal', 4), ('vertical-order', 4), ('video-explanation', 4), ('c++ code', 3), ('comparator', 3), ('dict', 3), ('easy', 3), ('easy-undestand', 3), ('golang-solution', 3), ('hash table', 3), ('0ms', 2), ('beginner friendly', 2), ('bfs simple solution', 2), ('breadth first search', 2), ('comments', 2), ('deque', 2), ('dfs traversal', 2), ('dfs-in-order', 2), ('dictonary', 2), ('easytounderstand', 2), ('explained solution', 2), ('fast and simple', 2), ('go', 2), ('hashmap and sorting', 2), ('heap', 2), ('inorder traversal', 2), ('intuitive', 2), ('java ac solution', 2), ('js', 2), ('lambda', 2), ('orderedmap', 2), ('priority-queue', 2), ('priorityqueue', 2), ('ruby', 2), ('rust', 2), ('set', 2), ('simple solution', 2), ('sorteddictionary', 2), ('traversal', 2), ('trees', 2), ('tuples', 2), ('typescript', 2), ('vector', 2), ('#dfs', 1), ('0ms runtime', 1), ('4ms', 1), ('accepted solution', 1), ('arraylist', 1), ('beating-100-submission', 1), ('beating-100-submissions', 1), ('best space complexity', 1), ('bfs java', 1), ('bfs python', 1), ('binary tree', 1), ('bisect', 1), ('breadth first', 1), ('breadth first traversal', 1), ('breadth-first', 1), ('breadth-first-search', 1), ('c# solutions', 1), ('c# sortedset', 1), ('c++ solution', 1), ('c++11', 1), ('c++14', 1), ('c++17', 1), ('clean', 1), ('clean code', 1), ('collections.sort', 1), ('commented', 1), ('comments-added', 1), ('correction', 1), ('cpp easy', 1), ('cpp soltuion', 1), ('cpp-functional', 1), ('custom sorting', 1), ('depth-first search', 1), ('dfs-iterative', 1), ('dfs-tree', 1), ('dictionary c#', 1), ('dirty', 1), ('duplicated-question', 1), ('easier to understand', 1), ('easiest', 1), ('easy to understand', 1), ('es6', 1), ('facebook', 1), ('fast', 1), ('generator', 1), ('go-solution', 1), ('google', 1), ('hashing', 1), ('hashtable', 1), ('heavily commented', 1), ('help me', 1), ('helper class', 1), ('inorder-traversal', 1), ('inordertraversal', 1), ('iterative-dfs', 1), ('itertools', 1), ('javascrip', 1), ('kotlin', 1), ('kotlinvim', 1), ('level order', 1), ('lexicographical order', 1), ('linear', 1), ('linkedlist', 1), ('linq', 1), ('list', 1), ('list of', 1), ('lol', 1), ('map-stl', 1), ('min heap', 1), ('multiset', 1), ('mywish', 1), ('no-global', 1), ('optimizations', 1), ('pairs', 1), ('pre-order', 1), ('preorder', 1), ('pythonic', 1), ('rajat', 1), ('raviinroorkee', 1), ('recursive easy', 1), ('recursive solution', 1), ('recursive-dfs', 1), ('recursively', 1), ('self-explanatory', 1), ('set c++', 1), ('sets', 1), ('short code', 1), ('short solution', 1), ('simple', 1), ('simplest', 1), ('solution', 1), ('sort-function', 1), ('stack', 1), ('swift5', 1), ('tag', 1), ('tag1', 1), ('tag2', 1), ('tag3', 1), ('traversing', 1), ('tree', 1), ('unordered map', 1), ('verticalordertraversal', 1), ('video', 1), ('video explanation', 1), ('video solution', 1)]"
986,Interval List Intersections,https://leetcode.com/problems/interval-list-intersections,"You are given two lists of closed intervals, firstList and secondList, where firstList[i] = [starti, endi] and secondList[j] = [startj, endj]. Each list of intervals is pairwise disjoint and in sorted order.

Return the intersection of these two interval lists.

A closed interval [a, b] (with a < b) denotes the set of real numbers x with a <= x <= b.

The intersection of two closed intervals is a set of real numbers that are either empty or represented as a closed interval. For example, the intersection of [1, 3] and [2, 4] is [2, 3].",['two-pointers'],Medium,2233,61,262430,180053,"[""Merge Intervals"", ""Merge Sorted Array"", ""Employee Free Time""]","[('two-pointers', 27), ('two-pointer', 23), ('java', 22), ('python 3', 22), ('c++', 21), ('python', 20), ('cpp', 11), ('java-solution', 11), ('two pointers', 11), ('javascript', 10), ('c#', 9), ('cpp solution', 5), ('easy-understanding', 5), ('golang', 5), ('linear time', 5), ('kotlin', 4), ('python3', 4), ('readable', 4), ('2 pointer', 3), ('concise-solution', 3), ('easy', 3), ('easy-to-understand', 3), ('golang-solution', 3), ('java ac solution', 3), ('simple solution', 3), ('swift', 3), ('visualization', 3), ('array', 2), ('beats-100', 2), ('brute force', 2), ('explained', 2), ('explanation with code', 2), ('explanation with logic', 2), ('fast and simple', 2), ('intervals', 2), ('intuitive', 2), ('merge sort', 2), ('overlap', 2), ('ruby', 2), ('rust', 2), ('scala', 2), ('thinking process diagrams', 2), ('two pointer', 2), ('#easy-understanding', 1), ('#easysolution', 1), ('#java', 1), ('#python', 1), ('#python3', 1), ('#two-pointers', 1), ('2 pointers', 1), ('algorithms', 1), ('beats 100', 1), ('beginnerfriendly', 1), ('brutal force optmized', 1), ('c++ code', 1), ('chinese', 1), ('clean code', 1), ('commented', 1), ('comments', 1), ('csharp', 1), ('detailed explanation', 1), ('easy sloution', 1), ('easy to read', 1), ('easy understand', 1), ('easy-solution', 1), ('easy-undestand', 1), ('easysolution', 1), ('facebook', 1), ('facebook intern', 1), ('fast-solution', 1), ('fidato', 1), ('give stars and subscribe', 1), ('go', 1), ('google', 1), ('google interview question', 1), ('greedy', 1), ('greedy approach', 1), ('inefficient', 1), ('intersection', 1), ('intersection arrays', 1), ('interval', 1), ('iteration', 1), ('javasccript', 1), ('javascrip', 1), ('javascript solution', 1), ('kotlinvim', 1), ('line sweep', 1), ('list', 1), ('logical thinking', 1), ('merge', 1), ('merge intervals', 1), ('merge-intervals', 1), ('merge-sort', 1), ('merge-sorted-array', 1), ('minheap', 1), ('multiset', 1), ('not-efficient', 1), ('one-liner', 1), ('optimal approach', 1), ('php', 1), ('priority queue', 1), ('pyhton 3', 1), ('python3.8', 1), ('recurision', 1), ('recursive solution', 1), ('short code', 1), ('short solution', 1), ('simple', 1), ('simple clear c++ solution', 1), ('swift5', 1), ('tail-recursion', 1), ('tail-recursive', 1), ('tailrec', 1), ('techbacker', 1), ('test-cases', 1), ('testcase-missing', 1), ('two arrays', 1), ('twopointer', 1), ('typescript', 1), ('vectors', 1), ('wrong test case', 1)]"
985,Sum of Even Numbers After Queries,https://leetcode.com/problems/sum-of-even-numbers-after-queries,"We have an array A of integers, and an array queries of queries.

For the i-th query val = queries[i][0], index = queries[i][1], we add val to A[index].  Then, the answer to the i-th query is the sum of the even values of A.

(Here, the given index = queries[i][1] is a 0-based index, and each query permanently modifies the array A.)

Return the answer to all queries.  Your answer array should have answer[i] as the answer to the i-th query.",['array'],Easy,519,188,89024,53938,[],"[('python', 14), ('cpp', 13), ('java', 13), ('c++', 12), ('python 3', 12), ('python3', 10), ('javascript', 9), ('c#', 5), ('cpp-solution', 4), ('easy', 4), ('commented', 3), ('cpp solution', 3), ('easy to understand', 3), ('golang', 3), ('java-solution', 3), ('c', 2), ('c++11', 2), ('clean code', 2), ('easy-understanding', 2), ('easytounderstand', 2), ('es6', 2), ('golang-solution', 2), ('linear time', 2), ('ruby', 2), ('accepted', 1), ('beating-100-submission', 1), ('beats 97', 1), ('c++ ac', 1), ('comments', 1), ('dictionaries', 1), ('easy understanding', 1), ('easy-undestand', 1), ('even odd', 1), ('fast-solution', 1), ('functional-programming', 1), ('go', 1), ('go-solution', 1), ('gorillaz', 1), ('intuition', 1), ('java8', 1), ('javascript solution', 1), ('odd-even', 1), ('pseudocode', 1), ('readable', 1), ('reduce', 1), ('self explanatory', 1), ('simple', 1), ('simple clear c++ solution', 1), ('simple-solution', 1), ('solution-sharing-cpp', 1), ('space', 1), ('space o1', 1), ('stream', 1), ('summation', 1), ('ultra easy', 1), ('understandable', 1), ('unit-test', 1), ('upvote', 1)]"
984,String Without AAA or BBB,https://leetcode.com/problems/string-without-aaa-or-bbb,"Given two integers a and b, return any string s such that:


	s has length a + b and contains exactly a 'a' letters, and exactly b 'b' letters,
	The substring 'aaa' does not occur in s, and
	The substring 'bbb' does not occur in s.",['greedy'],Medium,299,291,57896,22502,[],"[('greedy', 9), ('java', 6), ('python', 6), ('python 3', 6), ('c#', 5), ('c++', 4), ('recursion', 3), ('cpp', 2), ('easy-understanding', 2), ('greedy approach', 2), ('javascript', 2), ('math', 2), ('string', 2), ('#python 3', 1), ('backtracking', 1), ('c++ code', 1), ('cpp easy', 1), ('cpp solution', 1), ('csharp', 1), ('explained', 1), ('fast and simple', 1), ('greedy algorithm', 1), ('implementation', 1), ('iterative', 1), ('java-solution', 1), ('math-solution', 1), ('priority queue', 1), ('python3', 1), ('recursively', 1), ('ruby', 1), ('rust', 1), ('simple', 1), ('simple solution', 1), ('substring', 1), ('swift', 1), ('video explanation', 1)]"
983,Minimum Cost For Tickets,https://leetcode.com/problems/minimum-cost-for-tickets,"In a country popular for train travel, you have planned some train travelling one year in advance.  The days of the year that you will travel is given as an array days.  Each day is an integer from 1 to 365.

Train tickets are sold in 3 different ways:


	a 1-day pass is sold for costs[0] dollars;
	a 7-day pass is sold for costs[1] dollars;
	a 30-day pass is sold for costs[2] dollars.


The passes allow that many days of consecutive travel.  For example, if we get a 7-day pass on day 2, then we can travel for 7 days: day 2, 3, 4, 5, 6, 7, and 8.

Return the minimum number of dollars you need to travel every day in the given list of days.",['dynamic-programming'],Medium,2772,49,156917,98587,"[""Coin Change""]","[('dynamic programming', 70), ('dp', 49), ('c++', 38), ('memoization', 21), ('python', 21), ('java', 20), ('cpp', 19), ('python 3', 12), ('javascript', 11), ('recursion', 11), ('dynamic-programming', 8), ('python3', 8), ('java-solution', 7), ('binary-search', 6), ('c#', 6), ('cpp solution', 6), ('top down dp', 6), ('dp-techqique', 5), ('easy-understanding', 5), ('explained', 5), ('binary search', 4), ('#dynamic-programming', 3), ('dfs', 3), ('easy-undestand', 3), ('explanation', 3), ('golang', 3), ('simple solution', 3), ('beginner friendly', 2), ('bottom up', 2), ('bottoms-up', 2), ('easytounderstand', 2), ('explanation of logic', 2), ('memo', 2), ('memoisation', 2), ('recurision', 2), ('recursive', 2), ('recursive dp', 2), ('ruby', 2), ('swift', 2), ('top-down dp', 2), ('#983', 1), ('#binarysearch', 1), ('#java', 1), ('#java #easy-understand', 1), ('#memoization', 1), ('array', 1), ('backtracking', 1), ('beats 100 percent', 1), ('binarysearch', 1), ('bisect', 1), ('bisect-python', 1), ('bottom up dp', 1), ('bottom-up-algorithm', 1), ('bottomup', 1), ('brute force', 1), ('c++ code', 1), ('c++ dynamic programming', 1), ('c++ easy to understand', 1), ('c++ solution', 1), ('c++11', 1), ('clear-understanding', 1), ('comments', 1), ('cpp easy', 1), ('csharp', 1), ('dp pattern', 1), ('dp-programming', 1), ('dynamic programmin', 1), ('dynamicprogramming', 1), ('easy', 1), ('easy to understand', 1), ('easy-solution', 1), ('easy-to-understand', 1), ('explanations', 1), ('help needed', 1), ('iterative', 1), ('java ac solution', 1), ('kotlinvim', 1), ('lowerbound', 1), ('memoized', 1), ('minimum cost for tickets', 1), ('naive-solution', 1), ('non-recursion', 1), ('optimal substructure', 1), ('optimisation', 1), ('optimized', 1), ('python2', 1), ('recursion memoization', 1), ('recursively', 1), ('recurssion', 1), ('recusion', 1), ('rust', 1), ('schedule', 1), ('set', 1), ('top down', 1), ('top-down', 1), ('typescript', 1), ('universal', 1), ('video', 1), ('video-explanation', 1), ('visualization', 1)]"
982,Triples with Bitwise AND Equal To Zero,https://leetcode.com/problems/triples-with-bitwise-and-equal-to-zero,"Given an array of integers A, find the number of triples of indices (i, j, k) such that:


	0 <= i < A.length
	0 <= j < A.length
	0 <= k < A.length
	A[i] & A[j] & A[k] == 0, where & represents the bitwise-AND operator.",['dynamic-programming'],Hard,155,158,17566,9914,[],"[('java', 3), ('bit manipulation', 2), ('c#', 2), ('c++', 2), ('c', 1), ('c++ solution', 1), ('comments-added', 1), ('dp', 1), ('dynamic programming', 1), ('easy-to-understand', 1), ('fastest', 1), ('greedy approach', 1), ('java-solution', 1), ('new record', 1), ('python', 1), ('trie', 1)]"
981,Time Based Key-Value Store,https://leetcode.com/problems/time-based-key-value-store,"Create a timebased key-value store class TimeMap, that supports two operations.

1. set(string key, string value, int timestamp)


	Stores the key and value, along with the given timestamp.


2. get(string key, int timestamp)


	Returns a value such that set(key, value, timestamp_prev) was called previously, with timestamp_prev <= timestamp.
	If there are multiple such values, it returns the one with the largest timestamp_prev.
	If there are no values, it returns the empty string ("""").","['hash-table', 'binary-search']",Medium,1209,143,193852,105280,[],"[('hashmap', 15), ('javascript', 14), ('binary search', 10), ('binary-search', 10), ('c++', 10), ('cpp', 7), ('java', 7), ('python', 7), ('binarysearch', 6), ('java-solution', 6), ('map', 6), ('python 3', 4), ('simple', 4), ('treemap', 4), ('hash table', 3), ('bisect', 2), ('c#', 2), ('heap', 2), ('js', 2), ('priority queue', 2), ('python3', 2), ('unorderedmap', 2), ('#hashmap', 1), ('#javascript', 1), ('#linkedlist', 1), ('#python 3', 1), ('avnish', 1), ('binarysearh', 1), ('boundary', 1), ('bst', 1), ('c', 1), ('c++ hash', 1), ('c++ solution', 1), ('c++11', 1), ('c++14', 1), ('c++17', 1), ('clean', 1), ('clean code', 1), ('commented', 1), ('concise-solution', 1), ('concurrency', 1), ('cpp-solution', 1), ('doubly linked list', 1), ('easy-understanding', 1), ('easytounderstand', 1), ('fast and simple', 1), ('go lang', 1), ('golang', 1), ('hash', 1), ('immutability', 1), ('immutable', 1), ('js javascript', 1), ('kotllin', 1), ('linear search', 1), ('linear-time', 1), ('linked-list', 1), ('lower bound', 1), ('maps', 1), ('memory efficient', 1), ('memory optimized', 1), ('mrmagician', 1), ('new record', 1), ('nlogn time', 1), ('python2', 1), ('ruby', 1), ('sorting', 1), ('time limit', 1), ('time-complexity', 1), ('trie', 1), ('upperbound', 1), ('video', 1), ('youtube', 1)]"
980,Unique Paths III,https://leetcode.com/problems/unique-paths-iii,"On a 2-dimensional grid, there are 4 types of squares:


	1 represents the starting square.  There is exactly one starting square.
	2 represents the ending square.  There is exactly one ending square.
	0 represents empty squares we can walk over.
	-1 represents obstacles that we cannot walk over.


Return the number of 4-directional walks from the starting square to the ending square, that walk over every non-obstacle square exactly once.","['backtracking', 'depth-first-search']",Hard,1437,92,90946,70136,"[""Sudoku Solver"", ""Unique Paths II"", ""Word Search II""]","[('backtracking', 75), ('dfs', 56), ('c++', 33), ('java', 26), ('python 3', 19), ('python', 18), ('recursion', 15), ('cpp', 13), ('c#', 12), ('python3', 9), ('javascript', 8), ('dfs simple solution', 7), ('cpp solution', 6), ('dfs solution', 6), ('easy-understanding', 6), ('explained', 5), ('golang', 5), ('back tracking', 4), ('backtracing', 4), ('depth first search', 4), ('easy', 4), ('java-solution', 4), ('dfs-topdown', 3), ('fast-solution', 3), ('fastest', 3), ('swift', 3), ('100 speed', 2), ('annotated', 2), ('backtrack', 2), ('brute force', 2), ('brute-force', 2), ('csharp', 2), ('depth-first-search', 2), ('dynamic programming', 2), ('easy to understand', 2), ('easy-undestand', 2), ('easytounderstand', 2), ('go', 2), ('kotlin', 2), ('path-finding', 2), ('php', 2), ('recursive', 2), ('rust', 2), ('scala', 2), ('simple', 2), ('simple solution', 2), ('stack', 2), ('#easy-understanding', 1), ('#python 3', 1), ('#simplecode', 1), ('0ms', 1), ('100 faster cpp', 1), ('100 memory', 1), ('array', 1), ('backend', 1), ('backtracking dfs', 1), ('basics', 1), ('beats 100', 1), ('bfs', 1), ('bitmask', 1), ('bitmasking', 1), ('brutal force optmized', 1), ('c', 1), ('c code', 1), ('c++ code', 1), ('c++ easy to understand', 1), ('c++ solution', 1), ('c++11', 1), ('clear', 1), ('code', 1), ('commentary', 1), ('comments', 1), ('comments-added', 1), ('cpp doubt', 1), ('cpp-solution', 1), ('deeply explained', 1), ('depth first', 1), ('depth-first search', 1), ('dfs recursive', 1), ('dfs simple', 1), ('dfs-backtracking', 1), ('discussion', 1), ('dp', 1), ('easiest solution', 1), ('easy understand', 1), ('easy undestanding', 1), ('easy-to-understand', 1), ('efficiency', 1), ('efficient solution', 1), ('explanation', 1), ('fast', 1), ('fold', 1), ('functional programming', 1), ('golang-solution', 1), ('graph traversal', 1), ('idiomatic', 1), ('immutable', 1), ('important', 1), ('interview', 1), ('intuitive', 1), ('intution', 1), ('iterative', 1), ('knapsack', 1), ('meiyaowen', 1), ('memoization', 1), ('naive-solution', 1), ('namedtuple', 1), ('path finding', 1), ('path traverse', 1), ('polynomial', 1), ('python2', 1), ('question need help', 1), ('readable', 1), ('recurision', 1), ('recursively', 1), ('recurssion', 1), ('ruby', 1), ('sets', 1), ('simple implementation', 1), ('ting', 1), ('tree traversal', 1), ('typescript', 1), ('video explanation', 1)]"
979,Distribute Coins in Binary Tree,https://leetcode.com/problems/distribute-coins-in-binary-tree,"You are given the root of a binary tree with n nodes where each node in the tree has node.val coins and there are n coins total.

In one move, we may choose two adjacent nodes and move one coin from one node to another. (A move may be from parent to child, or from child to parent.)

Return the number of moves required to make every node have exactly one coin.","['tree', 'depth-first-search']",Medium,2382,81,83084,58132,"[""Sum of Distances in Tree"", ""Binary Tree Cameras""]","[('c++', 9), ('dfs', 8), ('cpp', 7), ('post-order-traversal', 7), ('java', 6), ('postorder-traversal', 5), ('python 3', 5), ('recursion', 5), ('binary-tree', 4), ('recursive', 4), ('javascript', 3), ('python', 3), ('c++11', 2), ('dfs simple solution', 2), ('dfs-bottomup', 2), ('easy-to-understand', 2), ('easy-understanding', 2), ('easy-undestand', 2), ('golang', 2), ('java-solution', 2), ('postorder traversal', 2), ('0ms', 1), ('100 space', 1), ('bottom up approach', 1), ('bottoms-up', 1), ('bottomup', 1), ('c#', 1), ('c++ recursive solution', 1), ('commentary', 1), ('comments', 1), ('depth first search', 1), ('depth first traversal', 1), ('easy code', 1), ('easy-to-read', 1), ('golang-solution', 1), ('iterative', 1), ('java ac solution', 1), ('java solution', 1), ('linear time', 1), ('python3', 1), ('recursive-dfs', 1), ('tree', 1), ('tree-traversal', 1), ('trees', 1)]"
978,Longest Turbulent Subarray,https://leetcode.com/problems/longest-turbulent-subarray,"Given an integer array arr, return the length of a maximum size turbulent subarray of arr.

A subarray is turbulent if the comparison sign flips between each adjacent pair of elements in the subarray.

More formally, a subarray [arr[i], arr[i + 1], ..., arr[j]] of arr is said to be turbulent if and only if:


	For i <= k < j:

	
		arr[k] > arr[k + 1] when k is odd, and
		arr[k] < arr[k + 1] when k is even.
	
	
	Or, for i <= k < j:
	
		arr[k] > arr[k + 1] when k is even, and
		arr[k] < arr[k + 1] when k is odd.","['array', 'dynamic-programming', 'sliding-window']",Medium,624,121,84682,39550,"[""Maximum Subarray""]","[('c++', 20), ('python', 13), ('java', 10), ('sliding-window', 8), ('dynamic programming', 7), ('dp', 6), ('python 3', 6), ('slidingwindow', 5), ('python3', 4), ('cpp solution', 3), ('easy-to-understand', 3), ('easy-understanding', 3), ('java-solution', 3), ('c#', 2), ('cpp', 2), ('easy', 2), ('intuitive', 2), ('java ac solution', 2), ('javascript', 2), ('linear time', 2), ('simple', 2), ('sliding window', 2), ('swift', 2), ('two pointers', 2), ('two-pointer', 2), ('array', 1), ('bool', 1), ('c', 1), ('c++ code', 1), ('c++ solution', 1), ('constant memory', 1), ('constant space', 1), ('corner-case', 1), ('cpp easy', 1), ('cpp with explanation', 1), ('detailed explanation', 1), ('dp-array', 1), ('dp-techqique', 1), ('easy to understand', 1), ('easysolution', 1), ('easytounderstand', 1), ('fast and simple', 1), ('golang', 1), ('greedy', 1), ('iteration', 1), ('javacript', 1), ('javascript solution', 1), ('kadane', 1), ('kadane algorithm', 1), ('kadanes algo', 1), ('kadanes algorithm', 1), ('loop', 1), ('memoization', 1), ('no extra space', 1), ('noob coding', 1), ('not-dp', 1), ('one-pass', 1), ('pattern-matching', 1), ('readable', 1), ('recursion', 1), ('recursive', 1), ('single loop', 1), ('single pass', 1), ('stack', 1), ('template', 1), ('two-pointers', 1), ('wiggle subsequence', 1)]"
977,Squares of a Sorted Array,https://leetcode.com/problems/squares-of-a-sorted-array,"Given an integer array nums sorted in non-decreasing order, return an array of the squares of each number sorted in non-decreasing order.","['array', 'two-pointers']",Easy,2315,115,655747,470681,"[""Merge Sorted Array"", ""Sort Transformed Array""]","[('java', 62), ('javascript', 55), ('two-pointers', 53), ('c++', 49), ('python', 36), ('python 3', 34), ('java-solution', 33), ('cpp', 32), ('python3', 17), ('two-pointer', 17), ('two pointers', 16), ('easy-understanding', 13), ('one-liner', 13), ('c#', 12), ('golang', 9), ('sorting', 9), ('easytounderstand', 8), ('squares of a sorted array', 8), ('explained', 7), ('easy', 6), ('array', 5), ('c', 5), ('c++ code', 5), ('easy-undestand', 5), ('js', 5), ('linear', 5), ('sort', 5), ('sorted array', 5), ('swift', 5), ('two pointer', 5), ('twopointer', 5), ('#python', 4), ('array-sort', 4), ('easy-to-understand', 4), ('java ac solution', 4), ('javascript solution', 4), ('kotlin', 4), ('linear time', 4), ('ruby', 4), ('simple solution', 4), ('easy-solition', 3), ('go', 3), ('list comprehension', 3), ('oneliner', 3), ('rust', 3), ('simple', 3), ('#c++', 2), ('#easy-understanding', 2), ('#java', 2), ('100 faster', 2), ('2 pointer', 2), ('2-pointer', 2), ('binary search', 2), ('binary-search', 2), ('c code', 2), ('c++11', 2), ('clean code', 2), ('commented', 2), ('concise-solution', 2), ('cpp easy', 2), ('cpp solution', 2), ('deque', 2), ('easy to understand', 2), ('in-place', 2), ('iterator', 2), ('java solution', 2), ('map', 2), ('mergesort', 2), ('one line', 2), ('onepass', 2), ('optimal', 2), ('short', 2), ('square', 2), ('stack', 2), ('streams', 2), ('two pointer technique', 2), ('typescript', 2), ('vector', 2), ('#codegirl', 1), ('#merge', 1), ('#python #codegirl', 1), ('#python3', 1), ('#simplecode', 1), ('#stack', 1), ('1 line', 1), ('1-liner', 1), ('100 speed', 1), ('2 pointers', 1), ('2lines', 1), ('2pointers', 1), ('4 liner', 1), ('4 lines', 1), ('ac', 1), ('algorithms', 1), ('arrays', 1), ('arrays.sort', 1), ('beating-100-submission', 1), ('best-solution', 1), ('binarysearch', 1), ('bit manipulation', 1), ('brute force to optimal', 1), ('bubble-sort', 1), ('c language', 1), ('c programming', 1), ('c# solution', 1), ('c# solutions', 1), ('c++ solution', 1), ('class', 1), ('clean', 1), ('commentary', 1), ('constant space', 1), ('counting sort', 1), ('cpp-solution', 1), ('csharp', 1), ('easiest', 1), ('easysolution', 1), ('explain', 1), ('explained solution', 1), ('explanation', 1), ('explanation of logic', 1), ('explanation with code', 1), ('fast', 1), ('fast and simple', 1), ('fast-solution', 1), ('faster', 1), ('faster than 100.00', 1), ('fastest', 1), ('fastest java solution', 1), ('fastest solution', 1), ('function', 1), ('functional-programming', 1), ('generator', 1), ('go-solution', 1), ('golag', 1), ('golang-solution', 1), ('indexes', 1), ('inplace', 1), ('insertion sort', 1), ('interview', 1), ('interview question', 1), ('ios', 1), ('iteration', 1), ('java8', 1), ('javascrip', 1), ('kotlin-solution', 1), ('kotlinvim', 1), ('lambda', 1), ('lambda expression', 1), ('linq', 1), ('logic explained', 1), ('lowerbound', 1), ('math-solution', 1), ('math.abs', 1), ('merge', 1), ('merge sor', 1), ('merge sorted', 1), ('merge sorted array', 1), ('merge two sorted arrays', 1), ('merge-k-sorted-lists', 1), ('merge-sort', 1), ('merged', 1), ('mergers', 1), ('newbie', 1), ('no extra memory', 1), ('nosort', 1), ('numpy', 1), ('one pass', 1), ('oneline', 1), ('pattern matching', 1), ('php', 1), ('pointer', 1), ('pow', 1), ('power', 1), ('python2', 1), ('queue', 1), ('readable', 1), ('runtime', 1), ('runtime-error', 1), ('rust vec', 1), ('scala', 1), ('sets', 1), ('simple clear c++ solution', 1), ('simplest', 1), ('slowfast pointers', 1), ('sorted', 1), ('stack-based', 1), ('stacks', 1), ('standard algorithms', 1), ('stl', 1), ('stl vector', 1), ('test-case', 1), ('test-cases', 1), ('timsort', 1), ('trick', 1), ('two pointer approach', 1), ('two-pointer method', 1), ('video-explanation', 1), ('while loop', 1), ('without sorting', 1)]"
976,Largest Perimeter Triangle,https://leetcode.com/problems/largest-perimeter-triangle,"Given an integer array nums, return the largest perimeter of a triangle with a non-zero area, formed from three of these lengths. If it is impossible to form any triangle of a non-zero area, return 0.","['math', 'sort']",Easy,526,57,76995,45769,"[""Largest Triangle Area""]","[('python', 16), ('c++', 15), ('python 3', 13), ('cpp', 10), ('sort', 7), ('sorting', 7), ('java', 6), ('python3', 6), ('easy-understanding', 5), ('javascript', 5), ('c#', 3), ('cpp solution', 3), ('geometry', 3), ('math', 3), ('csharp', 2), ('easy', 2), ('java-solution', 2), ('python3.8', 2), ('swift', 2), ('98', 1), ('array', 1), ('c', 1), ('clean-code', 1), ('commented', 1), ('comments', 1), ('easy to understand', 1), ('easy-to-understand', 1), ('easy-understand', 1), ('easy-undestand', 1), ('explanation', 1), ('fast', 1), ('fast and simple', 1), ('fast-solution', 1), ('golang', 1), ('iterative', 1), ('iterative solution', 1), ('javascrip', 1), ('linear-space', 1), ('merge-sort', 1), ('nlogn', 1), ('python2', 1), ('qsort', 1), ('quick sort', 1), ('quick-sort', 1), ('readable', 1), ('ruby', 1), ('simple', 1), ('simple solution', 1), ('sliding-window', 1), ('solution', 1), ('straight-forward', 1), ('tim-sort', 1), ('time-complexity', 1), ('triangle', 1), ('triangle inequality', 1), ('triangle rule', 1)]"
975,Odd Even Jump,https://leetcode.com/problems/odd-even-jump,"You are given an integer array arr. From some starting index, you can make a series of jumps. The (1st, 3rd, 5th, ...) jumps in the series are called odd-numbered jumps, and the (2nd, 4th, 6th, ...) jumps in the series are called even-numbered jumps. Note that the jumps are numbered, not the indices.

You may jump forward from index i to index j (with i < j) in the following way:


	During odd-numbered jumps (i.e., jumps 1, 3, 5, ...), you jump to the index j such that arr[i] <= arr[j] and arr[j] is the smallest possible value. If there are multiple such indices j, you can only jump to the smallest such index j.
	During even-numbered jumps (i.e., jumps 2, 4, 6, ...), you jump to the index j such that arr[i] >= arr[j] and arr[j] is the largest possible value. If there are multiple such indices j, you can only jump to the smallest such index j.
	It may be the case that for some index i, there are no legal jumps.


A starting index is good if, starting from that index, you can reach the end of the array (index arr.length - 1) by jumping some number of times (possibly 0 or more than once).

Return the number of good starting indices.","['dynamic-programming', 'stack', 'ordered-map']",Hard,939,289,99183,41069,[],"[('dynamic programming', 10), ('c++', 6), ('map', 5), ('javascript', 4), ('c#', 3), ('dp', 3), ('cpp', 2), ('golang', 2), ('stack', 2), ('treemap', 2), ('#dp', 1), ('#dynamic programming', 1), ('#java', 1), ('#treemap', 1), ('100 faster', 1), ('100 memory', 1), ('100 space', 1), ('100 speed', 1), ('binary-search', 1), ('binarysearch', 1), ('c', 1), ('easy', 1), ('fastest', 1), ('golang-solution', 1), ('google', 1), ('help', 1), ('help me', 1), ('java', 1), ('java-solution', 1), ('js', 1), ('kotlin', 1), ('lower-bound', 1), ('nlogn', 1), ('rbtree', 1), ('recursion', 1), ('recursive', 1), ('red-black-tree', 1), ('sorted dictionary', 1), ('stl', 1), ('time-limit-exceeded', 1)]"
974,Subarray Sums Divisible by K,https://leetcode.com/problems/subarray-sums-divisible-by-k,"Given an array A of integers, return the number of (contiguous, non-empty) subarrays that have a sum divisible by K.","['array', 'hash-table']",Medium,1597,120,114553,58593,"[""Subarray Sum Equals K"", ""Make Sum Divisible by P""]","[('prefix sum', 18), ('python', 13), ('c++', 10), ('hashmap', 10), ('python 3', 9), ('cpp', 8), ('python3', 6), ('easytounderstand', 5), ('c#', 4), ('linear time', 4), ('dp', 3), ('easy-understanding', 3), ('hashtable', 3), ('javascript', 3), ('python2', 3), ('cpp solution', 2), ('dictionary', 2), ('easy-to-understand', 2), ('fast', 2), ('hash', 2), ('hashing', 2), ('java', 2), ('java-solution', 2), ('map', 2), ('memorization', 2), ('100 memory', 1), ('95 time', 1), ('akku', 1), ('c++ code', 1), ('congruence', 1), ('counter', 1), ('cplusplus', 1), ('csharp', 1), ('dynamic-programming', 1), ('easy', 1), ('easy understand', 1), ('easy understanding', 1), ('easy-solition', 1), ('efficient', 1), ('es6', 1), ('explaination', 1), ('explained', 1), ('explained solution', 1), ('explanation', 1), ('explanation of logic', 1), ('explanations', 1), ('go', 1), ('golang', 1), ('golang-solution', 1), ('hash-function', 1), ('java ac solution', 1), ('javascript solution', 1), ('js', 1), ('kotlin', 1), ('kotlinvim', 1), ('linear', 1), ('linear space', 1), ('linear-time', 1), ('maps', 1), ('math', 1), ('math solution', 1), ('memoziation', 1), ('one-liner', 1), ('prefix', 1), ('prefix-sum', 1), ('prefix-sums', 1), ('prefixsum', 1), ('pythonic', 1), ('scala', 1), ('simple solution', 1), ('sliding-window', 1), ('stars move the article up', 1), ('subarray', 1), ('subarray sum equals k', 1), ('subarraysumsdivisiblebyk', 1), ('swift', 1), ('two pass', 1), ('understandable', 1), ('well-explained', 1), ('whiteboard', 1)]"
973,K Closest Points to Origin,https://leetcode.com/problems/k-closest-points-to-origin,"Given an array of points where points[i] = [xi, yi] represents a point on the X-Y plane and an integer k, return the k closest points to the origin (0, 0).

The distance between two points on the X-Y plane is the Euclidean distance (i.e., √(x1 - x2)2 + (y1 - y2)2).

You may return the answer in any order. The answer is guaranteed to be unique (except for the order that it is in).","['divide-and-conquer', 'heap', 'sort']",Medium,2982,155,707378,457617,"[""Kth Largest Element in an Array"", ""Top K Frequent Elements"", ""Top K Frequent Words"", ""Find Nearest Point That Has the Same X or Y Coordinate""]","[('c++', 71), ('java', 64), ('python', 56), ('priority queue', 52), ('heap', 46), ('python 3', 41), ('javascript', 31), ('heapq', 26), ('cpp', 24), ('easy-understanding', 23), ('java-solution', 22), ('c#', 16), ('python3', 14), ('maxheap', 13), ('priorityqueue', 13), ('quick select', 13), ('min heap', 12), ('quickselect', 11), ('c++ code', 10), ('simple solution', 10), ('sort', 10), ('sorting', 10), ('max heap', 9), ('one-liner', 9), ('comparator', 8), ('easy', 8), ('priority-queue', 8), ('golang', 7), ('hashmap', 7), ('multimap', 7), ('sort-function', 7), ('heaps', 6), ('max-heap', 6), ('easy-undestand', 5), ('lambda', 5), ('nthelement', 5), ('ruby', 5), ('cpp solution', 4), ('divide and conquer', 4), ('easy-to-understand', 4), ('map', 4), ('minheap', 4), ('partition', 4), ('quick sort', 4), ('sorted array', 4), ('swift', 4), ('clean code', 3), ('concise', 3), ('easytounderstand', 3), ('go', 3), ('golang-solution', 3), ('heaps algorithm', 3), ('javascript solution', 3), ('kotlin', 3), ('linear time', 3), ('min-heap', 3), ('one line', 3), ('oneliner', 3), ('python2', 3), ('quicksort', 3), ('scala', 3), ('stl', 3), ('#heap', 2), ('#python', 2), ('#python 3', 2), ('c++ easy to understand', 2), ('c++11', 2), ('csharp', 2), ('dictionary', 2), ('easy to understand', 2), ('easysolution', 2), ('explained', 2), ('explained solution', 2), ('explanation', 2), ('explanations', 2), ('fast and simple', 2), ('go-solution', 2), ('heapify', 2), ('heapsort', 2), ('lambda expression', 2), ('nlogk', 2), ('pair', 2), ('php', 2), ('queue', 2), ('quick-select', 2), ('quick-selection', 2), ('quicksort-partition', 2), ('recursion', 2), ('rust', 2), ('sorted', 2), ('swift5', 2), ('#dictionary', 1), ('#easy-understanding', 1), ('#java', 1), ('#priority-queue', 1), ('#sort', 1), ('100 memory', 1), ('2dvector', 1), ('3 liner', 1), ('accepted', 1), ('algorithms', 1), ('amazon', 1), ('amazon online assesment', 1), ('apple', 1), ('array deconstruction', 1), ('arraylist', 1), ('arrays', 1), ('beginer', 1), ('binary search tree', 1), ('binary-search-tree', 1), ('binarysearch', 1), ('bst', 1), ('bucket', 1), ('c', 1), ('c# solutions', 1), ('c++ template', 1), ('c++17', 1), ('clean', 1), ('clean code with comments', 1), ('commented', 1), ('commented code', 1), ('comments', 1), ('complex number', 1), ('complexity-analysis', 1), ('concise-solution', 1), ('consice', 1), ('constant space', 1), ('cpp easy', 1), ('cpp-solution', 1), ('detailed explanation', 1), ('diagram', 1), ('dictionaries', 1), ('dictonary', 1), ('dividedconquer', 1), ('doordash', 1), ('easy-solition', 1), ('efficient algorithm', 1), ('elaborate', 1), ('error', 1), ('es6', 1), ('euclidean distance', 1), ('explaination', 1), ('explanation with logic', 1), ('facebook', 1), ('fast', 1), ('faster than 100.00', 1), ('fastest', 1), ('find kth largest element', 1), ('functional-programming', 1), ('golang solution', 1), ('hash table', 1), ('hash-table', 1), ('hashing', 1), ('hashtable', 1), ('images', 1), ('implicit return', 1), ('in-place', 1), ('insertion sort', 1), ('intuition', 1), ('iterative', 1), ('iteratively', 1), ('java ac solution', 1), ('java8', 1), ('javascrip', 1), ('js', 1), ('k closest elements', 1), ('kotlinvim', 1), ('lambda function', 1), ('linq', 1), ('list', 1), ('math', 1), ('math.sqrt', 1), ('max-of-min', 1), ('medium', 1), ('meiyaowen', 1), ('memoization', 1), ('merge sort', 1), ('merge-sort', 1), ('multiset', 1), ('nlogn', 1), ('nth-element', 1), ('one line solution', 1), ('oneline', 1), ('partial sort', 1), ('pyhton', 1), ('pythagorean', 1), ('pythonic', 1), ('pythonpython3', 1), ('scratch', 1), ('short', 1), ('shorter', 1), ('simple', 1), ('simple clear c++ solution', 1), ('simple-solution', 1), ('simplest', 1), ('slow-performance', 1), ('solution', 1), ('solution c++', 1), ('straightforward', 1), ('thinking process', 1), ('time complexity', 1), ('time-complexity-o', 1), ('topkelements', 1), ('typescript', 1), ('uber', 1), ('unordered map', 1), ('vector', 1), ('vector-of-vector', 1), ('vectors', 1), ('visualization', 1), ('zip', 1), ('ztztzt8888', 1)]"
509,Fibonacci Number,https://leetcode.com/problems/fibonacci-number,"The Fibonacci numbers, commonly denoted F(n) form a sequence, called the Fibonacci sequence, such that each number is the sum of the two preceding ones, starting from 0 and 1. That is,


F(0) = 0, F(1) = 1
F(n) = F(n - 1) + F(n - 2), for n > 1.


Given n, calculate F(n).",['array'],Easy,1317,224,544587,369555,"[""Climbing Stairs"", ""Split Array into Fibonacci Sequence"", ""Length of Longest Fibonacci Subsequence"", ""N-th Tribonacci Number""]","[('c++', 76), ('dynamic programming', 65), ('java', 44), ('python', 43), ('cpp', 40), ('python 3', 37), ('javascript', 35), ('memoization', 33), ('recursion', 25), ('dp', 23), ('fibonacci', 17), ('c#', 16), ('easy-understanding', 15), ('fibonacci sequence', 15), ('c', 13), ('python3', 13), ('golang', 11), ('cpp solution', 10), ('easy', 8), ('iterative', 8), ('java-solution', 8), ('recursive', 8), ('fibonacci-number', 7), ('ruby', 6), ('simple', 6), ('swift', 6), ('iteration', 5), ('linear time', 5), ('optimal', 5), ('bottom-up-algorithm', 4), ('c++ code', 4), ('clean code', 4), ('dynamic-programming', 4), ('easy-undestand', 4), ('golang-solution', 4), ('javascript solution', 4), ('#c++', 3), ('c code', 3), ('cpp easy', 3), ('easy to understand', 3), ('easy-to-understand', 3), ('explained', 3), ('fast', 3), ('fast and simple', 3), ('fibonaccinumber', 3), ('js', 3), ('matrix', 3), ('matrix exponentiation', 3), ('memorization', 3), ('recursively', 3), ('recusion', 3), ('rust', 3), ('#recursion', 2), ('1-line', 2), ('algorithms', 2), ('array', 2), ('awesome samriddhi', 2), ('bottom-up', 2), ('brute force', 2), ('c++ solution', 2), ('commented', 2), ('constant memory', 2), ('csharp', 2), ('dp-techqique', 2), ('fast-solution', 2), ('fasterthan100', 2), ('fastest', 2), ('fibonacci-pattern', 2), ('formula', 2), ('iteratively', 2), ('itereative', 2), ('javascript recursive', 2), ('kotlin', 2), ('math', 2), ('memoized', 2), ('mind blown', 2), ('one line', 2), ('one-liner', 2), ('oneliner', 2), ('rajat', 2), ('recurision', 2), ('recursion memoization', 2), ('ritik', 2), ('short', 2), ('simplest', 2), ('tabulation', 2), ('#dynamic programming', 1), ('#python #easy', 1), ('0ms', 1), ('0ms runtime', 1), ('0ms-solution', 1), ('1 line', 1), ('1 liner', 1), ('100 faster', 1), ('100 faster runtime', 1), ('100 speed', 1), ('algorithm', 1), ('beating-100-submission', 1), ('beginner', 1), ('beginner friendly', 1), ('best-solution-ever', 1), ('bottom up', 1), ('bottom-up-dp', 1), ('class', 1), ('comments', 1), ('comments-added', 1), ('complexity', 1), ('constant space', 1), ('constant time', 1), ('constant-space-iterative', 1), ('constructor', 1), ('decorator', 1), ('design pattern', 1), ('detailed-explanation', 1), ('dictionary', 1), ('drewbie', 1), ('dyanmic programming', 1), ('dynamic', 1), ('dynamic programmin', 1), ('easiest', 1), ('easytounderstand', 1), ('eawtf', 1), ('efficient solution', 1), ('explaination', 1), ('explanations', 1), ('fast power of matrix', 1), ('faster', 1), ('faster than 100.00', 1), ('fibo', 1), ('for loop', 1), ('for-beginner', 1), ('for-loop', 1), ('functional programming', 1), ('github', 1), ('go', 1), ('go lang', 1), ('hash table', 1), ('hashtable', 1), ('honest', 1), ('improve', 1), ('iteratve-recursive', 1), ('javasccript', 1), ('javascrip', 1), ('learning process', 1), ('linear memory', 1), ('linear-time', 1), ('linear-time-space', 1), ('logm', 1), ('loop', 1), ('math-solution', 1), ('matrices', 1), ('memory optimization', 1), ('mrmagician', 1), ('ologn', 1), ('oneline', 1), ('php', 1), ('php solution', 1), ('pull dp', 1), ('python2', 1), ('recursion fibonacci', 1), ('recursive easy', 1), ('sad', 1), ('scala', 1), ('shortest-distance', 1), ('simpe', 1), ('simple and elegant', 1), ('simple c', 1), ('simple solution', 1), ('single pass', 1), ('solution', 1), ('solution-python', 1), ('space-efficient', 1), ('stl', 1), ('supereasy', 1), ('swift5', 1), ('tail-call', 1), ('tailrec', 1), ('template', 1), ('ternary-operator', 1), ('three-lines', 1), ('time-complexity', 1), ('time-optimized', 1), ('top down dp', 1), ('top-down', 1), ('top-down dp', 1), ('typescript', 1), ('typescript javascript', 1), ('upvote', 1), ('very easy to understand', 1), ('walk through', 1)]"
972,Equal Rational Numbers,https://leetcode.com/problems/equal-rational-numbers,"Given two strings s and t, each of which represents a non-negative rational number, return true if and only if they represent the same number. The strings may use parentheses to denote the repeating part of the rational number.

A rational number can be represented using up to three parts: <IntegerPart>, <NonRepeatingPart>, and a <RepeatingPart>. The number will be represented in one of the following three ways:


	<IntegerPart>

	
		For example, 12, 0, and 123.
	
	
	<IntegerPart><.><NonRepeatingPart>
	
		For example, 0.5, 1., 2.12, and 123.0001.
	
	
	<IntegerPart><.><NonRepeatingPart><(><RepeatingPart><)>
	
		For example, 0.1(6), 1.(9), 123.00(1212).
	
	


The repeating portion of a decimal expansion is conventionally denoted within a pair of round brackets. For example:


	1/6 = 0.16666666... = 0.1(6) = 0.1666(6) = 0.166(66).",['math'],Hard,57,160,10964,4610,[],"[('100 faster', 1), ('100 memory', 1), ('c++', 1), ('cpp', 1), ('functional programming', 1), ('javascript solution', 1), ('python', 1), ('python 3', 1), ('python3', 1), ('scala', 1)]"
971,Flip Binary Tree To Match Preorder Traversal,https://leetcode.com/problems/flip-binary-tree-to-match-preorder-traversal,"You are given the root of a binary tree with n nodes, where each node is uniquely assigned a value from 1 to n. You are also given a sequence of n values voyage, which is the desired pre-order traversal of the binary tree.

Any node in the binary tree can be flipped by swapping its left and right subtrees. For example, flipping node 1 will have the following effect:

Flip the smallest number of nodes so that the pre-order traversal of the tree matches voyage.

Return a list of the values of all flipped nodes. You may return the answer in any order. If it is impossible to flip the nodes in the tree to make the pre-order traversal match voyage, return the list [-1].","['tree', 'depth-first-search']",Medium,535,211,60111,30077,[],"[('dfs', 21), ('c++', 20), ('cpp', 11), ('python', 8), ('recursion', 8), ('explained', 7), ('c#', 6), ('java', 6), ('javascript', 5), ('cpp solution', 4), ('golang', 4), ('iterative', 4), ('preorder traversal', 4), ('python3', 4), ('recursive', 4), ('binary tree', 3), ('binary-tree', 3), ('go', 3), ('python 3', 3), ('simple', 3), ('clean code', 2), ('depth first search', 2), ('easy-understanding', 2), ('rust', 2), ('tree', 2), ('c++ solution', 1), ('comments-added', 1), ('depth first traversal', 1), ('depth first-search', 1), ('dfs simple solution', 1), ('dfs traversal', 1), ('dfs-iterative', 1), ('easy', 1), ('easy to undersstand', 1), ('easy-to-understand', 1), ('easy-uderstanding', 1), ('explanation', 1), ('fast', 1), ('fastest python solution', 1), ('fliptreetomatchpreorder', 1), ('golang-solution', 1), ('graph theory', 1), ('graph traversal', 1), ('iterative-bfs', 1), ('java-solution', 1), ('linear time', 1), ('pre-order', 1), ('preorder', 1), ('ruby', 1), ('scala', 1), ('short', 1), ('stack', 1), ('swift', 1), ('test case issue', 1), ('tree traversal', 1), ('typescript', 1), ('video-explanation', 1)]"
970,Powerful Integers,https://leetcode.com/problems/powerful-integers,"Given three integers x, y, and bound, return a list of all the powerful integers that have a value less than or equal to bound.

An integer is powerful if it can be represented as xi + yj for some integers i >= 0 and j >= 0.

You may return the answer in any order. In your answer, each value should occur at most once.","['hash-table', 'math']",Medium,22,15,68944,27639,[],"[('c++', 9), ('python', 9), ('java', 5), ('javascript', 5), ('python 3', 5), ('python3', 5), ('cpp', 4), ('java-solution', 2), ('100 faster', 1), ('100 speed', 1), ('100-faster', 1), ('brute force', 1), ('c', 1), ('c#', 1), ('c++ code', 1), ('c++11', 1), ('clean code', 1), ('dictionary', 1), ('easy understanding', 1), ('easy-understanding', 1), ('easy-undestand', 1), ('explanatory comments', 1), ('fast-solution', 1), ('good variable names', 1), ('hash set', 1), ('i want get a star', 1), ('java solution', 1), ('js', 1), ('math', 1), ('one-liner', 1), ('powerful integers', 1), ('python3.8', 1), ('ruby', 1), ('rust', 1), ('scala', 1), ('structured code', 1), ('ts', 1), ('typescript', 1)]"
969,Pancake Sorting,https://leetcode.com/problems/pancake-sorting,"Given an array of integers arr, sort the array by performing a series of pancake flips.

In one pancake flip we do the following steps:


	Choose an integer k where 1 <= k <= arr.length.
	Reverse the sub-array arr[0...k-1] (0-indexed).


For example, if arr = [3,2,1,4] and we performed a pancake flip choosing k = 3, we reverse the sub-array [3,2,1], so arr = [1,2,3,4] after the pancake flip at k = 3.

Return an array of the k-values corresponding to a sequence of pancake flips that sort arr. Any valid answer that sorts the array within 10 * arr.length flips will be judged as correct.","['array', 'sort']",Medium,766,988,86026,59158,[],"[('c++', 29), ('java', 22), ('python 3', 19), ('cpp', 17), ('easy-understanding', 17), ('javascript', 10), ('explained', 9), ('greedy', 8), ('python', 8), ('pancake sorting', 6), ('c#', 5), ('cpp solution', 5), ('easytounderstand', 4), ('fast-solution', 3), ('java-solution', 3), ('python3', 3), ('simple solution', 3), ('sorting', 3), ('array', 2), ('brute force', 2), ('bubble sort', 2), ('c++ solution', 2), ('constant space', 2), ('detailed explanation', 2), ('easy', 2), ('golang', 2), ('greedy approach', 2), ('java ac solution', 2), ('typescript', 2), ('#basic', 1), ('#easy-understanding', 1), ('#python 3', 1), ('#simplecode', 1), ('100 faster runtime', 1), ('100 speed', 1), ('4ms', 1), ('array-sort', 1), ('august-challenge', 1), ('beginner friendly', 1), ('bubblesort', 1), ('clean code', 1), ('commented', 1), ('comments-added', 1), ('concise', 1), ('cpp clear', 1), ('diagrams', 1), ('explained solution', 1), ('explanation of logic', 1), ('explanation with code', 1), ('faster than 95.46', 1), ('fastest', 1), ('flip', 1), ('greedy algorithm', 1), ('help me', 1), ('image', 1), ('index', 1), ('java-8', 1), ('javascript solution', 1), ('kotlin', 1), ('observation', 1), ('on', 1), ('pivot', 1), ('python2', 1), ('readable', 1), ('recursion', 1), ('recursive', 1), ('reversal algorithm', 1), ('reverse', 1), ('reverse list', 1), ('selection sort', 1), ('short code', 1), ('simulation', 1), ('sort', 1), ('sort-function', 1), ('sorting-algorithms', 1), ('stl', 1), ('swift', 1), ('video', 1), ('video solution', 1), ('video-explanation', 1), ('well-explained', 1)]"
968,Binary Tree Cameras,https://leetcode.com/problems/binary-tree-cameras,"Given a binary tree, we install cameras on the nodes of the tree. 

Each camera at a node can monitor its parent, itself, and its immediate children.

Calculate the minimum number of cameras needed to monitor all nodes of the tree.","['dynamic-programming', 'tree', 'depth-first-search']",Hard,1281,19,82344,32139,"[""Distribute Coins in Binary Tree""]","[('dfs', 8), ('java', 6), ('depth first search', 3), ('easy-to-understand', 3), ('greedy', 3), ('python 3', 3), ('100 memory', 1), ('90+', 1), ('c#', 1), ('c++ code', 1), ('concise', 1), ('cplusplus', 1), ('cpp', 1), ('cpp solution', 1), ('dfs simple solution', 1), ('enum', 1), ('full explanation', 1), ('greedy approach', 1), ('java-solution', 1), ('javascript', 1), ('kotlin', 1), ('memoization', 1), ('python', 1), ('recursion', 1), ('recursive-dfs', 1), ('recusion', 1), ('set', 1), ('simple solution', 1), ('state', 1), ('tree traversal', 1)]"
967,Numbers With Same Consecutive Differences,https://leetcode.com/problems/numbers-with-same-consecutive-differences,"Return all non-negative integers of length n such that the absolute difference between every two consecutive digits is k.

Note that every number in the answer must not have leading zeros. For example, 01 has one leading zero and is invalid.

You may return the answer in any order.","['backtracking', 'depth-first-search', 'breadth-first-search', 'recursion']",Medium,649,121,95090,43067,[],"[('c++', 28), ('recursion', 18), ('dfs', 16), ('java', 15), ('cpp', 13), ('backtracking', 12), ('bfs', 9), ('python 3', 9), ('javascript', 8), ('python', 8), ('c#', 6), ('python3', 4), ('cpp solution', 3), ('dynamic programming', 3), ('easy', 3), ('easy-understanding', 3), ('stack', 3), ('0ms', 2), ('backtracking template', 2), ('cpp easy', 2), ('depth first search', 2), ('dfs recursive', 2), ('dfs simple solution', 2), ('dfs-topdown', 2), ('dp', 2), ('explained', 2), ('hashset', 2), ('java-solution', 2), ('javascript solution', 2), ('queue', 2), ('swift', 2), ('#explained', 1), ('4ms', 1), ('amazing', 1), ('back tracking', 1), ('back-tracking', 1), ('beginners', 1), ('bfs simple solution', 1), ('breadth first search', 1), ('c++ solution', 1), ('c++11', 1), ('combinatorics', 1), ('comments', 1), ('comments-added', 1), ('csharp', 1), ('depth-first search', 1), ('detailed explanation', 1), ('dfs-bfs', 1), ('dfs-iterative', 1), ('dfs-recursive', 1), ('digit dp', 1), ('easy-solution', 1), ('easy-to-understand', 1), ('easy-understand', 1), ('easysolution', 1), ('easytounderstand', 1), ('explained solution', 1), ('fast and simple', 1), ('fast-solution', 1), ('fp', 1), ('generator-function', 1), ('golang', 1), ('graph', 1), ('hashmaps', 1), ('hybrid', 1), ('java solution', 1), ('java8', 1), ('javascript recursive', 1), ('map-stl', 1), ('math', 1), ('php', 1), ('recurrance', 1), ('recursive', 1), ('recursively', 1), ('rust', 1), ('scala', 1), ('simple-solution', 1), ('simplesolution', 1), ('solution', 1), ('swift5', 1), ('tailrec', 1), ('typescript', 1), ('vectors', 1)]"
966,Vowel Spellchecker,https://leetcode.com/problems/vowel-spellchecker,"Given a wordlist, we want to implement a spellchecker that converts a query word into a correct word.

For a given query word, the spell checker handles two categories of spelling mistakes:


	Capitalization: If the query matches a word in the wordlist (case-insensitive), then the query word is returned with the same case as the case in the wordlist.","['hash-table', 'string']",Medium,295,638,60114,31203,[],"[('c++', 16), ('hashmap', 11), ('python3', 8), ('java', 7), ('python', 7), ('cpp', 6), ('javascript', 6), ('easy-to-understand', 5), ('easy-understanding', 4), ('rust', 4), ('unordered map', 4), ('c#', 3), ('easy', 3), ('hashset', 3), ('swift', 3), ('cpp solution', 2), ('dict', 2), ('explained', 2), ('go', 2), ('golang', 2), ('hash table', 2), ('map', 2), ('ruby', 2), ('set', 2), ('simple', 2), ('video-explanation', 2), ('100 faster cpp', 1), ('100 space', 1), ('100 speed', 1), ('c++ solution', 1), ('char compare', 1), ('char comparison', 1), ('clean code', 1), ('clean-efficient-code', 1), ('comments-added', 1), ('dictionary c#', 1), ('easytounderstand', 1), ('es2015', 1), ('explanations', 1), ('golang-solution', 1), ('hash', 1), ('hashtable', 1), ('java-solution', 1), ('optimisation', 1), ('performance', 1), ('php', 1), ('python 3', 1), ('regex', 1), ('string', 1), ('strings', 1), ('translate', 1), ('typescript', 1), ('vowelspellchecker', 1), ('wildcard', 1)]"
965,Univalued Binary Tree,https://leetcode.com/problems/univalued-binary-tree,"A binary tree is univalued if every node in the tree has the same value.

Return true if and only if the given tree is univalued.",['tree'],Easy,814,49,175683,119412,"[""Find All The Lonely Nodes""]","[('java', 47), ('recursion', 46), ('c++', 37), ('dfs', 31), ('python', 29), ('javascript', 27), ('python 3', 27), ('binary-tree', 26), ('cpp', 23), ('java-solution', 20), ('recursive', 17), ('bfs', 14), ('easy-understanding', 14), ('python3', 12), ('c++ code', 9), ('easy-undestand', 7), ('recusion', 7), ('cpp solution', 6), ('simple', 6), ('tree', 6), ('trees', 6), ('cpp easy', 5), ('easy', 5), ('golang', 5), ('iterative', 5), ('queue', 5), ('recursive easy', 5), ('ruby', 5), ('100 speed', 4), ('binary tree', 4), ('c#', 4), ('dfs simple solution', 4), ('easy-to-understand', 4), ('hashset', 4), ('sets', 4), ('tree-traversal', 4), ('0ms runtime', 3), ('100 faster', 3), ('depth first search', 3), ('golang-solution', 3), ('javascript recursive', 3), ('preorder traversal', 3), ('recurision', 3), ('recursive solution', 3), ('rust', 3), ('0ms', 2), ('3 liner', 2), ('bst', 2), ('csharp', 2), ('dfs-topdown', 2), ('easytounderstand', 2), ('efficient', 2), ('fast and simple', 2), ('faster', 2), ('fasterthan100', 2), ('inorder', 2), ('inorder traversal', 2), ('iteration', 2), ('iterative approch', 2), ('js javascript', 2), ('level-order-traversal', 2), ('morris-preorder-traversal', 2), ('morris-traversal', 2), ('simple clear c++ solution', 2), ('simple solution', 2), ('stack', 2), ('stack-based', 2), ('swift', 2), ('typescript', 2), ('univalued binary tree', 2), ('#python #codegirl', 1), ('0ms-solution', 1), ('100', 1), ('100 space', 1), ('4ms', 1), ('avnish', 1), ('beating-100-submission', 1), ('beginner friendly', 1), ('bfs python', 1), ('bfs vs dfs', 1), ('binary search tree', 1), ('binarysearch', 1), ('binarytree', 1), ('breadth first search', 1), ('c++ recursive solution', 1), ('c++11', 1), ('clean code', 1), ('clean solution', 1), ('cpp-solution', 1), ('deep-first-search', 1), ('dfs solution', 1), ('dfs-bfs', 1), ('dfs-iterative', 1), ('dfs-recursive', 1), ('easy python bfs iterative', 1), ('easy sloution', 1), ('easy to understand', 1), ('eawtf', 1), ('fastest', 1), ('go lang', 1), ('hash table', 1), ('iterate', 1), ('iterative python bfs', 1), ('iterative solution', 1), ('iterative-dfs', 1), ('iteratively', 1), ('iterator', 1), ('iteratve-recursive', 1), ('javasciprt', 1), ('javascript solution', 1), ('js', 1), ('loop', 1), ('morris-inorder-traversal', 1), ('mrmagician', 1), ('optimal', 1), ('postorder', 1), ('preorder', 1), ('preorder-iterative', 1), ('preorder-traversal', 1), ('python bfs', 1), ('python bfs iterative', 1), ('python simple bfs', 1), ('reccursion', 1), ('recursive-dfs', 1), ('recusrive', 1), ('simpe', 1), ('solution', 1), ('stacks', 1), ('straight-forward', 1), ('straightforward', 1), ('traverse-a-tree', 1), ('univalued-binary-tree', 1), ('univaluedbinarytree', 1), ('upvote', 1), ('video explanation', 1), ('video-explanation', 1)]"
964,Least Operators to Express Number,https://leetcode.com/problems/least-operators-to-express-number,"Given a single positive integer x, we will write an expression of the form x (op1) x (op2) x (op3) x ... where each operator op1, op2, etc. is either addition, subtraction, multiplication, or division (+, -, *, or /). For example, with x = 3, we might write 3 * 3 / 3 + 3 - 3 which is a value of 3.

When writing such an expression, we adhere to the following conventions:


	The division operator (/) returns rational numbers.
	There are no parentheses placed anywhere.
	We use the usual order of operations: multiplication and division happen before addition and subtraction.
	It is not allowed to use the unary negation operator (-). For example, ""x - x"" is a valid expression as it only uses subtraction, but ""-x + x"" is not because it uses negation.


We would like to write an expression with the least number of operators such that the expression equals the given target. Return the least number of operators used.","['math', 'dynamic-programming']",Hard,211,55,14027,6362,[],"[('c#', 1), ('c++', 1), ('cpp', 1), ('dfs', 1), ('easy to undersstand', 1), ('explanation', 1), ('golang', 1), ('java', 1), ('lru cache', 1), ('memoization', 1), ('python', 1), ('python3', 1), ('recursion', 1)]"
963,Minimum Area Rectangle II,https://leetcode.com/problems/minimum-area-rectangle-ii,"Given a set of points in the xy-plane, determine the minimum area of any rectangle formed from these points, with sides not necessarily parallel to the x and y axes.

If there isn't any rectangle, return 0.","['math', 'geometry']",Medium,211,319,31563,16523,[],"[('python', 3), ('python3', 3), ('c++', 2), ('geometry', 2), ('java', 2), ('brute force', 1), ('concise', 1), ('explanation', 1), ('explanation with code', 1), ('fast and simple', 1), ('golang', 1), ('java-solution', 1), ('javascript', 1), ('javascript solution', 1), ('map', 1), ('math', 1), ('oop', 1), ('python 3', 1)]"
962,Maximum Width Ramp,https://leetcode.com/problems/maximum-width-ramp,"Given an array A of integers, a ramp is a tuple (i, j) for which i < j and A[i] <= A[j].  The width of such a ramp is j - i.

Find the maximum width of a ramp in A.  If one doesn't exist, return 0.",['array'],Medium,763,21,54259,25319,[],"[('sorting', 5), ('binary-search', 2), ('c++', 2), ('cpp', 2), ('python', 2), ('sliding-window', 2), ('two-pointers', 2), ('1-line', 1), ('1-liner', 1), ('binary search', 1), ('binarysearch', 1), ('binarysearh', 1), ('c#', 1), ('clean', 1), ('dynamic programming', 1), ('easy', 1), ('fenwick-tree', 1), ('go', 1), ('golang', 1), ('hashmap', 1), ('high performance', 1), ('java', 1), ('java-solution', 1), ('javascript', 1), ('kotlin', 1), ('linq', 1), ('map', 1), ('monotonic-stack', 1), ('ordered map', 1), ('python 3', 1), ('python3', 1), ('readable', 1), ('rust', 1), ('segment tree', 1), ('stable-sort', 1), ('stack', 1), ('swift', 1), ('zea7ot', 1)]"
961,N-Repeated Element in Size 2N Array,https://leetcode.com/problems/n-repeated-element-in-size-2n-array,"In a array A of size 2N, there are N+1 unique elements, and exactly one of these elements is repeated N times.

Return the element repeated N times.",['hash-table'],Easy,637,264,195547,146054,[],"[('python', 34), ('c++', 31), ('java', 29), ('python 3', 22), ('javascript', 21), ('cpp', 20), ('hashmap', 16), ('java-solution', 13), ('python3', 11), ('cpp solution', 9), ('set', 8), ('swift', 8), ('easy-undestand', 7), ('hashset', 7), ('easy-understanding', 6), ('c#', 5), ('golang', 5), ('easy', 4), ('easytounderstand', 4), ('hash table', 4), ('map', 4), ('ruby', 4), ('simple solution', 4), ('100 speed', 3), ('array', 3), ('c', 3), ('counter', 3), ('kotlin', 3), ('#python', 2), ('arrays', 2), ('c++ code', 2), ('c++ map', 2), ('c++11', 2), ('easy-to-understand', 2), ('explained', 2), ('faster', 2), ('fastest', 2), ('go', 2), ('linear time', 2), ('naive-solution', 2), ('one-liner', 2), ('oneline', 2), ('php', 2), ('python2', 2), ('rust', 2), ('sorting', 2), ('unordered map', 2), ('#codegirl', 1), ('#dictionary', 1), ('#easy-understand', 1), ('#hashmap', 1), ('#java', 1), ('100 faster', 1), ('100 memory', 1), ('3 solutions', 1), ('accepted solution', 1), ('algorithm', 1), ('beginner friendly', 1), ('best space complexity', 1), ('boyer-moore', 1), ('brute force', 1), ('c++ 14', 1), ('c++ ac', 1), ('c++ hash', 1), ('c++ set', 1), ('clean code', 1), ('commented', 1), ('counting-sort', 1), ('cpp easy', 1), ('cpp-solution', 1), ('data structure', 1), ('defaultdict', 1), ('dictionairy', 1), ('dictionary', 1), ('easy to understand', 1), ('easy understanding', 1), ('efficient', 1), ('efficient solution', 1), ('expalanation', 1), ('explanation', 1), ('explanations', 1), ('fast-solution', 1), ('for loop', 1), ('fp', 1), ('go-solution', 1), ('golang-solution', 1), ('hashing', 1), ('hashtable', 1), ('haskell', 1), ('javacript', 1), ('javascrip', 1), ('javascript solution', 1), ('js', 1), ('kotlin-solution', 1), ('loops', 1), ('map in c++', 1), ('maps', 1), ('mode', 1), ('moore voting algorithm', 1), ('mrmagician', 1), ('multiple solutions', 1), ('one liner', 1), ('oneliner', 1), ('python3.9', 1), ('rajat', 1), ('scala', 1), ('sets', 1), ('short solution', 1), ('simpe', 1), ('simple', 1), ('simplest', 1), ('sliding window', 1), ('sliding-window', 1), ('slidingwindow', 1), ('stl algorithms', 1), ('stream', 1), ('streamapi', 1), ('swift5', 1), ('tail-recursive', 1), ('upvote', 1), ('vector', 1), ('while', 1), ('youtube', 1)]"
960,Delete Columns to Make Sorted III,https://leetcode.com/problems/delete-columns-to-make-sorted-iii,"You are given an array of n strings strs, all of the same length.

We may choose any deletion indices, and we delete all the characters in those indices for each string.

For example, if we have strs = [""abcdef"",""uvwxyz""] and deletion indices {0, 2, 3}, then the final array after deletions is [""bef"", ""vyz""].

Suppose we chose a set of deletion indices answer such that after deletions, the final array has every string (row) in lexicographic order. (i.e., (strs[0][0] <= strs[0][1] <= ... <= strs[0][strs[0].length - 1]), and (strs[1][0] <= strs[1][1] <= ... <= strs[1][strs[1].length - 1]), and so on). Return the minimum possible value of answer.length.",['dynamic-programming'],Hard,307,9,14961,8261,[],"[('dp', 3), ('dynamic programming', 3), ('c#', 2), ('c++', 1), ('c++14', 1), ('cpp solution', 1), ('deletecolstomakesortediii', 1), ('dfs', 1), ('dynamic programmin', 1), ('easy-to-understand', 1), ('go', 1), ('graph', 1)]"
959,Regions Cut By Slashes,https://leetcode.com/problems/regions-cut-by-slashes,"In a N x N grid composed of 1 x 1 squares, each 1 x 1 square consists of a /, \, or blank space.  These characters divide the square into contiguous regions.

(Note that backslash characters are escaped, so a \ is represented as ""\\"".)

Return the number of regions.","['depth-first-search', 'union-find', 'graph']",Medium,1279,244,39696,26703,[],"[('union find', 17), ('dfs', 10), ('python', 7), ('c++', 6), ('java-solution', 6), ('union-find', 6), ('java', 5), ('javascript', 5), ('python 3', 5), ('dsu', 4), ('c#', 3), ('cpp', 3), ('python3', 3), ('unionfind', 3), ('bfs', 2), ('comments-added', 2), ('disjoint-set', 2), ('easy-understanding', 2), ('golang', 2), ('java ac solution', 2), ('simple', 2), ('union and find', 2), ('c', 1), ('c++11', 1), ('clean code', 1), ('cpp solution', 1), ('cycle detection', 1), ('dfs simple solution', 1), ('dfs-bfs', 1), ('dfs-iterative', 1), ('disjoint sets', 1), ('easy', 1), ('easy to understand', 1), ('easy-undestand', 1), ('explained', 1), ('fast', 1), ('go lang', 1), ('go-solution', 1), ('graph', 1), ('grid', 1), ('inefficient', 1), ('islands', 1), ('java solution', 1), ('js', 1), ('number of islands', 1), ('path compression', 1), ('readable code', 1), ('regions-cut-by-slashes', 1), ('set-union', 1), ('short', 1), ('time limit exceeded', 1), ('tle', 1), ('union by rank', 1)]"
958,Check Completeness of a Binary Tree,https://leetcode.com/problems/check-completeness-of-a-binary-tree,"Given the root of a binary tree, determine if it is a complete binary tree.

In a complete binary tree, every level, except possibly the last, is completely filled, and all nodes in the last level are as far left as possible. It can have between 1 and 2h nodes inclusive at the last level h.",['tree'],Medium,1247,16,151813,79733,[],"[('bfs', 43), ('java', 16), ('c++', 15), ('javascript', 12), ('python', 12), ('level-order-traversal', 9), ('cpp', 8), ('dfs', 8), ('python 3', 7), ('python3', 5), ('c#', 4), ('cpp solution', 3), ('easy-understanding', 3), ('bfs simple solution', 2), ('binary-tree', 2), ('breadth first traversal', 2), ('java-solution', 2), ('javascript solution', 2), ('level order traversal', 2), ('queue', 2), ('recursion', 2), ('swift', 2), ('0ms', 1), ('beats 100 percent', 1), ('beginner friendly', 1), ('bfs vs dfs', 1), ('breadth first search', 1), ('c', 1), ('c++ code', 1), ('c++11', 1), ('case approach', 1), ('cases', 1), ('clean code', 1), ('csharp', 1), ('depth', 1), ('depth and child', 1), ('depth first search', 1), ('dfs simple solution', 1), ('dfs-bfs', 1), ('divide and conquer', 1), ('easy', 1), ('easy to understand', 1), ('easy-to-understand', 1), ('efficient solution', 1), ('es6', 1), ('explained', 1), ('explanatory-comments', 1), ('fast and simple', 1), ('heap', 1), ('height of tree', 1), ('help', 1), ('iteration', 1), ('iterative', 1), ('iterative-bfs', 1), ('js', 1), ('js date', 1), ('kotlinvim', 1), ('linear time', 1), ('linq', 1), ('node-index', 1), ('python3.8', 1), ('pythonpython3', 1), ('queue-approach', 1), ('readable', 1), ('recursive', 1), ('recusion', 1), ('scala', 1), ('space-efficient', 1), ('test case issue', 1), ('tree', 1), ('tree traversal', 1), ('tree-traversal', 1)]"
957,Prison Cells After N Days,https://leetcode.com/problems/prison-cells-after-n-days,"There are 8 prison cells in a row and each cell is either occupied or vacant.

Each day, whether the cell is occupied or vacant changes according to the following rules:


	If a cell has two adjacent neighbors that are both occupied or both vacant, then the cell becomes occupied.
	Otherwise, it becomes vacant.


Note that because the prison is a row, the first and the last cells in the row can't have two adjacent neighbors.

You are given an integer array cells where cells[i] == 1 if the ith cell is occupied and cells[i] == 0 if the ith cell is vacant, and you are given an integer n.

Return the state of the prison after n days (i.e., n such changes described above).",['hash-table'],Medium,991,1291,302245,121213,[],"[('java', 24), ('javascript', 20), ('python', 19), ('python 3', 16), ('c++', 12), ('cpp', 11), ('java-solution', 10), ('easy-to-understand', 9), ('hashmap', 9), ('python3', 5), ('c#', 4), ('easy to understand', 4), ('easy-understanding', 4), ('explained', 4), ('swift', 4), ('bit manipulation', 3), ('cpp solution', 3), ('easy-undestand', 3), ('map', 3), ('simple solution', 3), ('constant space', 2), ('constant time', 2), ('constant-space', 2), ('cycle detection', 2), ('dictionaries', 2), ('easysolution', 2), ('golang', 2), ('hash table', 2), ('javascript solution', 2), ('loop-detection', 2), ('math', 2), ('mod', 2), ('python2', 2), ('simulation', 2), ('#easy-understanding', 1), ('#python', 1), ('14', 1), ('algorithm-proof', 1), ('amazon', 1), ('amazon sde', 1), ('arrays', 1), ('automata', 1), ('beginner friendly', 1), ('bitset', 1), ('bitwise operation', 1), ('bitwise-operators', 1), ('c++ code', 1), ('c++ solution', 1), ('c++11', 1), ('clear', 1), ('commented', 1), ('confused', 1), ('confusion', 1), ('constant', 1), ('constant memory', 1), ('constant-time', 1), ('cpp-solution', 1), ('cycle', 1), ('detailed explanation', 1), ('dictionary c#', 1), ('dictonary', 1), ('dope', 1), ('easy', 1), ('easy sloution', 1), ('easy-implementation', 1), ('example', 1), ('explanations', 1), ('explanations4problem', 1), ('fast power of matrix', 1), ('fast-solution', 1), ('fastest', 1), ('finite state machine', 1), ('finite-state-machine', 1), ('golang-solution', 1), ('good', 1), ('hashing', 1), ('hashset', 1), ('help', 1), ('help needed', 1), ('iteration', 1), ('javascript brute force', 1), ('js', 1), ('lcm', 1), ('linear-time-space', 1), ('memoized', 1), ('next state', 1), ('o1 space', 1), ('o256', 1), ('optimal', 1), ('optimized', 1), ('pattern', 1), ('pattern-based', 1), ('pattern-matching', 1), ('pigeonhole principle', 1), ('pointers', 1), ('prisoncellsafterndays', 1), ('proof', 1), ('proofs', 1), ('question', 1), ('readable', 1), ('repeatingproblem', 1), ('rust', 1), ('saluteinterviewer', 1), ('scala', 1), ('sde - 2020', 1), ('sick', 1), ('simple understanding', 1), ('solution', 1), ('solution c++', 1), ('stupid', 1), ('typescript', 1), ('vector', 1), ('video', 1), ('well-explained', 1)]"
956,Tallest Billboard,https://leetcode.com/problems/tallest-billboard,"You are installing a billboard and want it to have the largest height. The billboard will have two steel supports, one on each side. Each steel support must be an equal height.

You are given a collection of rods that can be welded together. For example, if you have rods of lengths 1, 2, and 3, you can weld them together to make a support of length 6.

Return the largest possible height of your billboard installation. If you cannot support the billboard, return 0.",['dynamic-programming'],Hard,450,18,24930,9919,[],"[('dynamic programming', 5), ('dfs', 1), ('dp', 1), ('easy-understanding', 1), ('java', 1), ('javascript', 1), ('simple', 1), ('swift', 1)]"
955,Delete Columns to Make Sorted II,https://leetcode.com/problems/delete-columns-to-make-sorted-ii,"You are given an array of n strings strs, all of the same length.

We may choose any deletion indices, and we delete all the characters in those indices for each string.

For example, if we have strs = [""abcdef"",""uvwxyz""] and deletion indices {0, 2, 3}, then the final array after deletions is [""bef"", ""vyz""].

Suppose we chose a set of deletion indices answer such that after deletions, the final array has its elements in lexicographic order (i.e., strs[0] <= strs[1] <= strs[2] <= ... <= strs[n - 1]). Return the minimum possible value of answer.length.",['greedy'],Medium,336,55,36979,12557,[],"[('c++', 2), ('python', 2), ('python 3', 2), ('brute force', 1), ('c#', 1), ('cpp', 1), ('cpp solution', 1), ('dp', 1), ('explanations', 1), ('fast', 1), ('golang', 1), ('greedy', 1), ('hashset', 1), ('python3', 1)]"
954,Array of Doubled Pairs,https://leetcode.com/problems/array-of-doubled-pairs,"Given an array of integers arr of even length, return true if and only if it is possible to reorder it such that arr[2 * i + 1] = 2 * arr[2 * i] for every 0 <= i < len(arr) / 2.","['array', 'hash-table']",Medium,412,62,69574,24389,[],"[('c++', 6), ('python', 6), ('hashmap', 5), ('cpp', 4), ('javascript', 4), ('python 3', 4), ('array', 2), ('counter', 2), ('dictonary', 2), ('hashmap and sorting', 2), ('java', 2), ('python3', 2), ('sort', 2), ('algorithm', 1), ('array greedy', 1), ('c#', 1), ('cpp easy', 1), ('easy-understanding', 1), ('explained', 1), ('explanations', 1), ('golang', 1), ('hash table', 1), ('hash-function', 1), ('hashtable', 1), ('java-solution', 1), ('javascript solution', 1), ('kotlin', 1), ('map', 1), ('pairs', 1), ('simple and elegant', 1), ('simple solution', 1), ('solved', 1), ('unordered map', 1), ('video explanation', 1)]"
953,Verifying an Alien Dictionary,https://leetcode.com/problems/verifying-an-alien-dictionary,"In an alien language, surprisingly they also use english lowercase letters, but possibly in a different order. The order of the alphabet is some permutation of lowercase letters.

Given a sequence of words written in the alien language, and the order of the alphabet, return true if and only if the given words are sorted lexicographicaly in this alien language.",['hash-table'],Easy,1677,687,442899,232309,[],"[('java', 48), ('c++', 42), ('javascript', 39), ('python', 35), ('hashmap', 32), ('python 3', 28), ('easy-understanding', 22), ('cpp', 21), ('c#', 11), ('python3', 10), ('comparator', 9), ('golang', 8), ('cpp solution', 7), ('easy', 7), ('go', 7), ('go-solution', 7), ('javascript solution', 7), ('sorting', 7), ('beats 100', 6), ('explained', 6), ('hash table', 6), ('java-solution', 6), ('map', 6), ('simple', 6), ('swift', 6), ('clean code', 5), ('dictionary', 5), ('easy-to-understand', 5), ('0ms', 4), ('c++ code', 4), ('commented', 4), ('easytounderstand', 4), ('golang-solution', 4), ('one-liner', 4), ('ruby', 4), ('simple solution', 4), ('string', 4), ('c', 3), ('detailed explanation', 3), ('facebook interview', 3), ('go lang', 3), ('go-lang', 3), ('linear time', 3), ('alien dictionary', 2), ('array', 2), ('c++ solution', 2), ('clean', 2), ('csharp', 2), ('dictonary', 2), ('fast', 2), ('js', 2), ('list of', 2), ('map-stl', 2), ('oneline', 2), ('python2', 2), ('rust', 2), ('scala', 2), ('simple clear c++ solution', 2), ('simplest', 2), ('sort', 2), ('sorted array', 2), ('zip longest', 2), ('#hashmap', 1), ('#javascript', 1), ('#python', 1), ('1-line', 1), ('100 speed', 1), ('8 lines', 1), ('953', 1), ('anonymous class', 1), ('awesome-samriddhi', 1), ('beats', 1), ('beats 97', 1), ('beginner friendly', 1), ('c# solutions', 1), ('c++ hash', 1), ('c++11', 1), ('c++17', 1), ('c++20', 1), ('char compare', 1), ('char comparison', 1), ('clean-code', 1), ('comments', 1), ('comments added', 1), ('comments-added', 1), ('commetend', 1), ('compare', 1), ('concise-solution', 1), ('constant space', 1), ('cpp-solution', 1), ('detailed', 1), ('dictionaries', 1), ('dictionary c#', 1), ('dictionary comprehension', 1), ('doubt', 1), ('easy to read', 1), ('easy to understand', 1), ('easy understand', 1), ('easy understanding', 1), ('easy-to-follow', 1), ('easy-undestand', 1), ('efficient solution', 1), ('examples', 1), ('facebook-interview', 1), ('fast-solution', 1), ('functional', 1), ('glitch', 1), ('hack', 1), ('hashing', 1), ('hashmap and sorting', 1), ('hashtable', 1), ('indexof method', 1), ('iteration', 1), ('javasccript', 1), ('javascrip', 1), ('javascript recursive', 1), ('kotlinvim', 1), ('lambda expresses', 1), ('lambda function', 1), ('linear search', 1), ('linear-scan', 1), ('list comprehension', 1), ('lists', 1), ('loops', 1), ('mapping', 1), ('modern c++', 1), ('not-easy', 1), ('object-oriented', 1), ('one-pass', 1), ('oneliner', 1), ('php', 1), ('php solution', 1), ('priority', 1), ('question-not-clear', 1), ('rank', 1), ('recursive', 1), ('recursive easy', 1), ('recursively', 1), ('reduction', 1), ('ritik', 1), ('search', 1), ('short code', 1), ('short solution', 1), ('simpe', 1), ('simple approach', 1), ('single-line', 1), ('sort-function', 1), ('stl algorithms', 1), ('string comparison', 1), ('string parsing', 1), ('strings', 1), ('test-case-validation', 1), ('thinking process', 1), ('topilogical sort', 1), ('two-pointer', 1), ('twopointers', 1), ('typescript', 1), ('vector', 1), ('verifyingaliendictionary', 1), ('video solution', 1), ('video-explanation', 1)]"
952,Largest Component Size by Common Factor,https://leetcode.com/problems/largest-component-size-by-common-factor,"Given a non-empty array of unique positive integers A, consider the following graph:


	There are A.length nodes, labelled A[0] to A[A.length - 1];
	There is an edge between A[i] and A[j] if and only if A[i] and A[j] share a common factor greater than 1.


Return the size of the largest connected component in the graph.","['math', 'union-find']",Hard,573,67,72284,26331,[],"[('union find', 12), ('unionfind', 8), ('prime factorization', 7), ('cpp', 4), ('python', 4), ('c#', 3), ('c++', 3), ('explained', 3), ('easy-understanding', 2), ('easytounderstand', 2), ('java', 2), ('javascript', 2), ('python 3', 2), ('union-find', 2), ('algorithm-proof', 1), ('algorithms', 1), ('bfs', 1), ('c++ solution', 1), ('commented', 1), ('data structures', 1), ('dfs simple solution', 1), ('easy-to-understand', 1), ('explained solution', 1), ('explanation', 1), ('explanation of logic', 1), ('fastest', 1), ('go', 1), ('golang', 1), ('graph', 1), ('java-solution', 1), ('optimized', 1), ('prime', 1), ('primes', 1), ('sieve', 1), ('union and find', 1)]"
951,Flip Equivalent Binary Trees,https://leetcode.com/problems/flip-equivalent-binary-trees,"For a binary tree T, we can define a flip operation as follows: choose any node, and swap the left and right child subtrees.

A binary tree X is flip equivalent to a binary tree Y if and only if we can make X equal to Y after some number of flip operations.

Given the roots of two binary trees root1 and root2, return true if the two trees are flip equivelent or false otherwise.",['tree'],Medium,999,54,112246,73843,[],"[('recursion', 21), ('c++', 20), ('python', 13), ('dfs', 11), ('python 3', 9), ('java', 8), ('cpp', 7), ('recursive', 5), ('bfs', 4), ('javascript', 4), ('python3', 4), ('java-solution', 3), ('tree traversal', 3), ('100 speed', 2), ('array', 2), ('binary-tree', 2), ('c#', 2), ('easy to understand', 2), ('easy-to-understand', 2), ('easy-understanding', 2), ('fast and simple', 2), ('iterative', 2), ('recursive-dfs', 2), ('ruby', 2), ('simple solution', 2), ('swift', 2), ('tree-traversal', 2), ('#javascript', 1), ('#recursion', 1), ('0ms runtime', 1), ('100', 1), ('100 space', 1), ('4 liner', 1), ('bfs java', 1), ('bfs python', 1), ('breadth first traversal', 1), ('c', 1), ('c++ code', 1), ('c++ recursion', 1), ('clean code', 1), ('comments', 1), ('complete-tree', 1), ('depth first search', 1), ('dfs-recursive', 1), ('dictionary', 1), ('doubts', 1), ('easy', 1), ('easy understanding', 1), ('easy-peasy', 1), ('easytounderstand', 1), ('explained', 1), ('facebook', 1), ('flipequivalentbinarytrees', 1), ('index', 1), ('javscript', 1), ('js', 1), ('kotlin', 1), ('linear time', 1), ('map-stl', 1), ('question need help', 1), ('recurision', 1), ('recursive easy', 1), ('recursive lines clean', 1), ('recursive solution', 1), ('recursively', 1), ('recusion', 1), ('solution-sharing-cpp', 1), ('swift5', 1), ('test cases', 1), ('test-case-too-weak', 1), ('test-cases', 1), ('top down approach', 1), ('trees', 1), ('uglycode', 1)]"
950,Reveal Cards In Increasing Order,https://leetcode.com/problems/reveal-cards-in-increasing-order,"In a deck of cards, every card has a unique integer.  You can order the deck in any order you want.

Initially, all the cards start face down (unrevealed) in one deck.

Now, you do the following steps repeatedly, until all cards are revealed:


	Take the top card of the deck, reveal it, and take it out of the deck.
	If there are still cards in the deck, put the next top card of the deck at the bottom of the deck.
	If there are still unrevealed cards, go back to step 1.  Otherwise, stop.


Return an ordering of the deck that would reveal the cards in increasing order.

The first entry in the answer is considered to be the top of the deck.",['array'],Medium,1246,204,60113,45451,[],"[('c++', 11), ('python', 10), ('queue', 10), ('deque', 7), ('java', 7), ('python 3', 7), ('c#', 6), ('cpp', 6), ('python3', 5), ('golang', 4), ('javascript', 3), ('sort', 3), ('c', 2), ('c++ code', 2), ('cpp solution', 2), ('easy-understanding', 2), ('recursion', 2), ('simple solution', 2), ('simulation', 2), ('array', 1), ('array-sort', 1), ('brute force', 1), ('circular-linked-list', 1), ('complexity analysis', 1), ('dequeue', 1), ('dictionary', 1), ('easy', 1), ('easy-to-understand', 1), ('explained', 1), ('explanatory comments', 1), ('fast and simple', 1), ('golang-solution', 1), ('good variable names', 1), ('hashing', 1), ('insert', 1), ('java ac solution', 1), ('java-solution', 1), ('kotlin', 1), ('least-memory', 1), ('python2', 1), ('recursive', 1), ('recursively', 1), ('rotate', 1), ('sort-function', 1), ('sorted array', 1), ('sorting', 1), ('swift', 1), ('three-lines', 1), ('two pointers', 1), ('typescript', 1)]"
949,Largest Time for Given Digits,https://leetcode.com/problems/largest-time-for-given-digits,"Given an array arr of 4 digits, find the latest 24-hour time that can be made using each digit exactly once.

24-hour times are formatted as ""HH:MM"", where HH is between 00 and 23, and MM is between 00 and 59. The earliest 24-hour time is 00:00, and the latest is 23:59.

Return the latest 24-hour time in ""HH:MM"" format.  If no valid time can be made, return an empty string.",['math'],Medium,448,830,169813,61427,[],"[('java', 15), ('c++', 14), ('permutations', 13), ('python', 13), ('backtracking', 11), ('javascript', 11), ('python3', 10), ('python 3', 9), ('cpp', 7), ('brute force', 5), ('permutation', 5), ('c#', 4), ('easy-understanding', 4), ('easytounderstand', 4), ('explained', 4), ('golang', 3), ('java-solution', 3), ('accepted solution', 2), ('back tracking', 2), ('easy-undestand', 2), ('intuitive', 2), ('recursion', 2), ('rust', 2), ('simple', 2), ('simple solution', 2), ('swift', 2), ('typescript', 2), ('#backtracking', 1), ('#java8', 1), ('#ruby', 1), ('#simple', 1), ('0ms', 1), ('100 efficient', 1), ('algorithms', 1), ('alternatives', 1), ('assert-expression', 1), ('bruteforce', 1), ('c', 1), ('c++ code', 1), ('c++ easy to understand', 1), ('c++ solution', 1), ('clean', 1), ('clean code', 1), ('clear-understanding', 1), ('cpp solution', 1), ('dateformat', 1), ('datetime', 1), ('easy', 1), ('easy-to-understand', 1), ('efficient solution', 1), ('explained solution', 1), ('explanatory comments', 1), ('fastest', 1), ('golang-solution', 1), ('greedy', 1), ('hashmap', 1), ('heaps algorithm', 1), ('idiomatic', 1), ('java solution', 1), ('javascript solution', 1), ('js', 1), ('loops', 1), ('one-liner', 1), ('optimal', 1), ('pep572', 1), ('permutations ii', 1), ('php', 1), ('php solution', 1), ('python2', 1), ('regex', 1), ('regex expression', 1), ('regexp', 1), ('ruby', 1), ('sorting', 1), ('straightforward', 1), ('string', 1), ('string permutation', 1), ('string-operation', 1), ('strings', 1), ('strings manipulation', 1), ('structured code', 1), ('time', 1), ('unique solution', 1), ('vector', 1), ('video', 1), ('video explaination', 1), ('video solution', 1)]"
948,Bag of Tokens,https://leetcode.com/problems/bag-of-tokens,"You have an initial power of P, an initial score of 0, and a bag of tokens where tokens[i] is the value of the ith token (0-indexed).

Your goal is to maximize your total score by potentially playing each token in one of two ways:


	If your current power is at least tokens[i], you may play the ith token face up, losing tokens[i] power and gaining 1 score.
	If your current score is at least 1, you may play the ith token face down, gaining tokens[i] power and losing 1 score.


Each token may be played at most once and in any order. You do not have to play all the tokens.

Return the largest possible score you can achieve after playing any number of tokens.","['two-pointers', 'greedy', 'sort']",Medium,490,265,72041,33182,[],"[('greedy', 22), ('c++', 19), ('two-pointers', 16), ('python 3', 13), ('greedy approach', 11), ('java', 11), ('python', 10), ('sorting', 8), ('javascript', 6), ('cpp', 5), ('explained', 5), ('java-solution', 4), ('sort', 4), ('c', 3), ('clean code', 3), ('cpp easy', 3), ('cpp solution', 3), ('easy-understanding', 3), ('golang', 3), ('sorted array', 3), ('beginner friendly', 2), ('c#', 2), ('commented', 2), ('comments', 2), ('constant space', 2), ('easy', 2), ('easy-to-understand', 2), ('fast and simple', 2), ('fuck noobs', 2), ('greedy algorithm', 2), ('python3', 2), ('simple', 2), ('two pointers', 2), ('two-pointer', 2), ('100 beat', 1), ('100 memory', 1), ('100 space', 1), ('100 speed', 1), ('100 time', 1), ('1ms', 1), ('2 pointer', 1), ('2 pointers', 1), ('2-pointers', 1), ('2pointers', 1), ('c programming', 1), ('c++ solution', 1), ('clean', 1), ('clean code with comments', 1), ('comments-added', 1), ('easy to understand', 1), ('easy-undestand', 1), ('easytounderstand', 1), ('efficient solution', 1), ('explained solution', 1), ('explanation of logic', 1), ('fastest', 1), ('functional programming', 1), ('go', 1), ('java solution', 1), ('java solution sharing', 1), ('javascript solution', 1), ('kotlin', 1), ('nlogn', 1), ('optimisation', 1), ('performance question', 1), ('pythonpython3', 1), ('ruby', 1), ('rust', 1), ('simple-solution', 1), ('simulation', 1), ('swift', 1), ('swift5', 1), ('trade-off', 1), ('video explaination', 1), ('video solution', 1), ('video-explanation', 1)]"
947,Most Stones Removed with Same Row or Column,https://leetcode.com/problems/most-stones-removed-with-same-row-or-column,"On a 2D plane, we place n stones at some integer coordinate points. Each coordinate point may have at most one stone.

A stone can be removed if it shares either the same row or the same column as another stone that has not been removed.

Given an array stones of length n where stones[i] = [xi, yi] represents the location of the ith stone, return the largest possible number of stones that can be removed.","['depth-first-search', 'union-find']",Medium,1457,456,126500,70447,[],"[('union find', 20), ('dfs', 12), ('javascript', 11), ('c++', 10), ('graph', 7), ('union-find', 7), ('java', 6), ('python', 6), ('cpp', 5), ('unionfind', 5), ('dsu', 3), ('help needed', 3), ('python 3', 3), ('union by rank', 3), ('c++14', 2), ('dfs simple solution', 2), ('easy-understanding', 2), ('help', 2), ('java ac solution', 2), ('java-solution', 2), ('javasccript', 2), ('js', 2), ('bfs', 1), ('c++ union find', 1), ('connected components', 1), ('depth-first-search', 1), ('dfs-components', 1), ('disjoint-set', 1), ('disjoint-sets', 1), ('disjointset', 1), ('easy', 1), ('easy-to-read', 1), ('easy-to-understand', 1), ('easy-undestand', 1), ('es6', 1), ('explaination', 1), ('go', 1), ('golang', 1), ('golang-solution', 1), ('iterative-dfs', 1), ('javascipt', 1), ('kotlin', 1), ('maps', 1), ('never understand', 1), ('optimizations', 1), ('path compression', 1), ('questions', 1), ('rank', 1), ('rust', 1), ('scc', 1), ('set', 1), ('slow learners', 1), ('stack', 1), ('time complexity', 1), ('time-complexity', 1), ('union-by-rank', 1), ('unordered map', 1)]"
946,Validate Stack Sequences,https://leetcode.com/problems/validate-stack-sequences,"Given two sequences pushed and popped with distinct values, return true if and only if this could have been the result of a sequence of push and pop operations on an initially empty stack.",['stack'],Medium,1708,34,159133,102588,[],"[('stack', 57), ('c++', 31), ('python', 25), ('java', 21), ('cpp', 15), ('python 3', 14), ('easy-understanding', 13), ('stacks', 13), ('javascript', 10), ('c#', 9), ('python3', 7), ('java-solution', 6), ('easy-to-understand', 5), ('constant space', 4), ('golang', 4), ('simple', 4), ('c++ code', 3), ('cpp solution', 3), ('easy', 3), ('easytounderstand', 3), ('explained', 3), ('go', 3), ('simulation', 3), ('stack-based', 3), ('swift', 3), ('two-pointers', 3), ('beginner friendly', 2), ('easy-undestand', 2), ('fast and simple', 2), ('go-solution', 2), ('ruby', 2), ('two pointers', 2), ('video-explanation', 2), ('90+', 1), ('accumulator', 1), ('algorithm', 1), ('arrays', 1), ('beginners level', 1), ('c++11', 1), ('clean', 1), ('clean code', 1), ('commented', 1), ('concise', 1), ('cpp-solution', 1), ('easy understand', 1), ('easy-solition', 1), ('easysolution', 1), ('elegant', 1), ('elegant solution', 1), ('es6', 1), ('expalanation', 1), ('explanation of logic', 1), ('github', 1), ('golang solution', 1), ('golang-solution', 1), ('greedy', 1), ('implementation', 1), ('in-place', 1), ('intuitive', 1), ('intutive', 1), ('java solution', 1), ('java-8', 1), ('java-sol', 1), ('javascipt', 1), ('js', 1), ('linear', 1), ('linear-search', 1), ('nice', 1), ('nice explaination', 1), ('pointers', 1), ('python2', 1), ('python3.8', 1), ('queue', 1), ('racket', 1), ('readable', 1), ('rust', 1), ('short code', 1), ('space o1', 1), ('struct', 1), ('ultra easy', 1), ('video explanation', 1)]"
945,Minimum Increment to Make Array Unique,https://leetcode.com/problems/minimum-increment-to-make-array-unique,"Given an array of integers A, a move consists of choosing any A[i], and incrementing it by 1.

Return the least number of moves to make every value in A unique.",['array'],Medium,644,28,76870,36107,[],"[('c++', 6), ('java', 6), ('python', 6), ('python 3', 6), ('cpp', 5), ('javascript', 4), ('greedy', 3), ('python3', 3), ('c#', 2), ('cpp solution', 2), ('easy', 2), ('go', 2), ('golang', 2), ('golang-solution', 2), ('arrays', 1), ('concise', 1), ('counting-array', 1), ('dynamic programming', 1), ('easytounderstand', 1), ('explaination', 1), ('go-solution', 1), ('greedy approach', 1), ('linear', 1), ('pythonic', 1), ('readable', 1), ('sort', 1), ('sorted', 1), ('straight-forward', 1), ('three-lines', 1), ('withoutsorting', 1)]"
944,Delete Columns to Make Sorted,https://leetcode.com/problems/delete-columns-to-make-sorted,"You are given an array of n strings strs, all of the same length.

The strings can be arranged such that there is one on each line, making a grid. For example, strs = [""abc"", ""bce"", ""cae""] can be arranged as:


abc
bce
cae


You want to delete the columns that are not sorted lexicographically. In the above example (0-indexed), columns 0 ('a', 'b', 'c') and 2 ('c', 'e', 'e') are sorted while column 1 ('b', 'c', 'a') is not, so you would delete column 1.

Return the number of columns that you will delete.",['greedy'],Easy,232,1835,74778,52953,[],"[('python', 12), ('python 3', 12), ('c++', 11), ('javascript', 7), ('python3', 7), ('cpp', 6), ('java', 6), ('golang', 3), ('easy-understanding', 2), ('java-solution', 2), ('ruby', 2), ('transpose', 2), ('zip', 2), ('1 line', 1), ('100 speed', 1), ('99', 1), ('algorithms', 1), ('brute force', 1), ('c', 1), ('c#', 1), ('count', 1), ('cpp easy', 1), ('cpp short solution', 1), ('declarative', 1), ('easy undestanding', 1), ('easy-to-understand', 1), ('easytounderstand', 1), ('fast and simple', 1), ('go', 1), ('js', 1), ('kotlin', 1), ('kotlin-solution', 1), ('one-liner', 1), ('oneline', 1), ('php', 1), ('python2', 1), ('set', 1), ('short solution', 1), ('simple', 1), ('sorting', 1), ('stacks', 1)]"
943,Find the Shortest Superstring,https://leetcode.com/problems/find-the-shortest-superstring,"Given an array of strings words, return the smallest string that contains each string in words as a substring. If there are multiple valid strings of the smallest length, return any of them.

You may assume that no string in words is a substring of another string in words.",['dynamic-programming'],Hard,525,78,29702,12902,[],"[('dp', 5), ('java', 4), ('bitmask', 3), ('c++', 3), ('bfs', 2), ('cpp', 2), ('dynamic programming', 2), ('easy-understanding', 2), ('dfs', 1), ('greedy', 1), ('java-solution', 1), ('javascript', 1), ('memoization', 1), ('python', 1), ('python2', 1), ('recursion', 1), ('top-down dp', 1), ('tsp', 1)]"
942,DI String Match,https://leetcode.com/problems/di-string-match,"A permutation perm of n + 1 integers of all the integers in the range [0, n] can be represented as a string s of length n where:


	s[i] == 'I' if perm[i] < perm[i + 1], and
	s[i] == 'D' if perm[i] > perm[i + 1].


Given a string s, reconstruct the permutation perm and return it. If there are multiple valid permutations perm, return any of them.",['math'],Easy,1156,446,110889,81887,[],"[('c++', 23), ('python 3', 21), ('python', 20), ('java', 17), ('cpp', 14), ('javascript', 14), ('cpp solution', 10), ('simple solution', 8), ('python3', 7), ('java-solution', 6), ('easy-understanding', 5), ('c#', 4), ('easy', 3), ('kotlin', 3), ('array', 2), ('c', 2), ('c++11', 2), ('easy to understand', 2), ('easy-to-understand', 2), ('easy-undestand', 2), ('greedy', 2), ('javascrip', 2), ('oneline', 2), ('ruby', 2), ('simple clear c++ solution', 2), ('swift', 2), ('#easy-understand', 1), ('100', 1), ('100 faster runtime', 1), ('2 pointers', 1), ('2ms', 1), ('40ms', 1), ('85 faster', 1), ('95 per faster', 1), ('99.81', 1), ('c++ code', 1), ('c++ solution', 1), ('commented', 1), ('comments-added', 1), ('cpp doubt', 1), ('csharp', 1), ('data structures', 1), ('decrease', 1), ('decreasing subsequence', 1), ('deque', 1), ('di', 1), ('dn', 1), ('easytounderstand', 1), ('efficient solution', 1), ('explaination', 1), ('explained', 1), ('explanation of logic', 1), ('explanation with logic', 1), ('explanations4problem', 1), ('fast and simple', 1), ('fastest c++ solution', 1), ('fp', 1), ('go', 1), ('golang', 1), ('greedy approach', 1), ('help', 1), ('i0', 1), ('increase', 1), ('increasing subsequence', 1), ('javascript solution', 1), ('js', 1), ('kotlin-solution', 1), ('lazysoul', 1), ('match', 1), ('maths', 1), ('min-max', 1), ('one-liner', 1), ('one-loop', 1), ('oneliner', 1), ('permutations', 1), ('question-not-clear', 1), ('rust', 1), ('sequence', 1), ('series', 1), ('simple', 1), ('single array', 1), ('solution', 1), ('string', 1), ('swift5', 1), ('two-pointers', 1), ('vector', 1)]"
941,Valid Mountain Array,https://leetcode.com/problems/valid-mountain-array,"Given an array of integers arr, return true if and only if it is a valid mountain array.

Recall that arr is a mountain array if and only if:


	arr.length >= 3
	There exists some i with 0 < i < arr.length - 1 such that:
	
		arr[0] < arr[1] < ... < arr[i - 1] < arr[i] 
		arr[i] > arr[i + 1] > ... > arr[arr.length - 1]",['array'],Easy,919,96,472135,155739,"[""Minimum Number of Removals to Make Mountain Array""]","[('c++', 39), ('java', 37), ('python', 36), ('python 3', 23), ('cpp', 21), ('javascript', 21), ('easy-understanding', 17), ('python3', 16), ('java-solution', 13), ('cpp solution', 7), ('easy-to-understand', 6), ('golang', 6), ('two pointers', 6), ('explained', 5), ('simple', 5), ('swift', 5), ('100 speed', 4), ('c#', 4), ('linear time', 4), ('one pass', 4), ('optimal', 4), ('array', 3), ('beginner friendly', 3), ('comments-added', 3), ('easy', 3), ('easy-undestand', 3), ('easytounderstand', 3), ('fast-solution', 3), ('javascript solution', 3), ('ruby', 3), ('arrays', 2), ('brute force', 2), ('clean code', 2), ('easiest', 2), ('easy to understand', 2), ('easy understanding', 2), ('explained solution', 2), ('explanation of logic', 2), ('go', 2), ('golang-solution', 2), ('js', 2), ('kotlin', 2), ('linear complexity', 2), ('mountain', 2), ('rust', 2), ('simple solution', 2), ('simple-solution', 2), ('two-pointers', 2), ('whileloop', 2), ('2 pointer', 1), ('2-pointer', 1), ('algorithms', 1), ('array of vectors', 1), ('awesome-samriddhi', 1), ('beats 100', 1), ('begineer', 1), ('binary-search', 1), ('brute force to optimal', 1), ('c', 1), ('c++ code', 1), ('c++ solution', 1), ('clean', 1), ('climb mountain', 1), ('code for beginners', 1), ('commented', 1), ('consice', 1), ('constant memory', 1), ('constant space', 1), ('cpp 100', 1), ('cpp easy', 1), ('cpp-solution', 1), ('dp', 1), ('easy java solution', 1), ('easy undestanding', 1), ('easy-solution', 1), ('easysolution', 1), ('es6', 1), ('exaplanation', 1), ('explanation with code', 1), ('explanations', 1), ('explanatory comments', 1), ('fast', 1), ('fast solution', 1), ('functional programming', 1), ('functional-programming', 1), ('go-solution', 1), ('good variable names', 1), ('google interview question', 1), ('heuristic', 1), ('intiution', 1), ('intuition', 1), ('intutive', 1), ('issue', 1), ('iteration', 1), ('iterative', 1), ('java ac solution', 1), ('java solution', 1), ('js javascript', 1), ('kotlin-solution', 1), ('list', 1), ('local maximum', 1), ('local minimum', 1), ('logic explained', 1), ('max element', 1), ('mountain peak', 1), ('mountain view', 1), ('n-complexity', 1), ('no extra space', 1), ('no-tricks', 1), ('notes', 1), ('one-liner', 1), ('one-loop', 1), ('one-pass', 1), ('optimisation', 1), ('performance', 1), ('php', 1), ('python2', 1), ('ritik', 1), ('scala', 1), ('sequence', 1), ('series', 1), ('simple clear c++ solution', 1), ('simplest', 1), ('simplesweet', 1), ('single pass', 1), ('single scan', 1), ('stacks', 1), ('state machine', 1), ('straight-forward', 1), ('structured code', 1), ('super fast', 1), ('super simple', 1), ('super-easy', 1), ('swift5', 1), ('test-cases', 1), ('two-lines', 1), ('two-pointer', 1), ('twopointer', 1), ('ultra easy', 1), ('valid mountain', 1), ('validmountainarray', 1), ('video-explanation', 1)]"
940,Distinct Subsequences II,https://leetcode.com/problems/distinct-subsequences-ii,"Given a string S, count the number of distinct, non-empty subsequences of S .

Since the result may be large, return the answer modulo 10^9 + 7.",['dynamic-programming'],Hard,533,17,34193,14204,[],"[('dp', 4), ('dynamic programming', 3), ('c++', 2), ('cpp', 2), ('python', 2), ('awesome samriddhi', 1), ('c#', 1), ('cpp solution', 1), ('go', 1), ('go-solution', 1), ('golang', 1), ('memoization', 1), ('ritik', 1)]"
939,Minimum Area Rectangle,https://leetcode.com/problems/minimum-area-rectangle,"Given a set of points in the xy-plane, determine the minimum area of a rectangle formed from these points, with sides parallel to the x and y axes.

If there isn't any rectangle, return 0.",['hash-table'],Medium,958,178,131059,68517,[],"[('c++', 6), ('hashmap', 6), ('java', 5), ('c#', 4), ('hashset', 4), ('python', 4), ('python 3', 4), ('javascript', 3), ('line sweep', 2), ('map', 2), ('python3', 2), ('#javascript', 1), ('binary-search', 1), ('c++ code', 1), ('commented', 1), ('cpp', 1), ('diagonal', 1), ('easy-undestand', 1), ('explained', 1), ('geometry', 1), ('golang', 1), ('google interview', 1), ('hash-table', 1), ('hashmap and sorting', 1), ('js', 1), ('kotlinvim', 1), ('minimum-area-rectangle', 1), ('nlogn', 1), ('pictures', 1), ('set', 1), ('swift', 1), ('treemap', 1), ('two-pointers', 1)]"
938,Range Sum of BST,https://leetcode.com/problems/range-sum-of-bst,"Given the root node of a binary search tree, return the sum of values of all nodes with a value in the range [low, high].","['tree', 'depth-first-search', 'recursion']",Easy,2295,295,444487,370278,[],"[('java', 69), ('recursion', 69), ('c++', 65), ('python', 46), ('dfs', 42), ('python 3', 39), ('recursive', 31), ('javascript', 25), ('cpp', 24), ('java-solution', 21), ('bst', 20), ('binary-tree', 19), ('golang', 14), ('easy-understanding', 13), ('python3', 12), ('bfs', 11), ('recursively', 11), ('binary search tree', 9), ('c#', 9), ('inorder traversal', 9), ('iterative', 9), ('recusion', 9), ('ruby', 9), ('swift', 9), ('c', 8), ('cpp solution', 8), ('easy-to-understand', 7), ('go-solution', 7), ('simple', 7), ('php', 6), ('c++ code', 5), ('cpp easy', 5), ('depth first search', 5), ('easy', 5), ('easytounderstand', 5), ('golang-solution', 5), ('inorder', 5), ('recurision', 5), ('tree-traversal', 5), ('binary-search-tree', 4), ('dfs simple solution', 4), ('dfs solution', 4), ('ios', 4), ('iteration', 4), ('one-liner', 4), ('queue', 4), ('recursive easy', 4), ('simple solution', 4), ('tree traversal', 4), ('trees', 4), ('binarysearch', 3), ('dfs-topdown', 3), ('easy to understand', 3), ('go', 3), ('preorder traversal', 3), ('simple clear c++ solution', 3), ('stack', 3), ('stacks', 3), ('100 faster runtime', 2), ('beginner friendly', 2), ('bfs vs dfs', 2), ('breadth first search', 2), ('commentary', 2), ('commented', 2), ('dfs-iterative', 2), ('explaination', 2), ('explained', 2), ('fastest', 2), ('inorder-traversal', 2), ('intuitive', 2), ('iteratively', 2), ('java ac solution', 2), ('javascript recursive', 2), ('javascript solution', 2), ('kotlin', 2), ('optimized', 2), ('php solution', 2), ('pruning', 2), ('pyhton', 2), ('rangesumbst', 2), ('recursive solution', 2), ('recursive-descent', 2), ('rescursion', 2), ('tree', 2), ('#python', 1), ('#queue', 1), ('1 line', 1), ('100 speed', 1), ('1ms', 1), ('6 lines', 1), ('analysis', 1), ('beginnerfriendly', 1), ('bfs python', 1), ('bfs queue', 1), ('bfs simple solution', 1), ('binary', 1), ('binary tree', 1), ('binary-search', 1), ('binary-tree-input', 1), ('bottom up approach', 1), ('breath first search', 1), ('bug-test-case', 1), ('c recursive', 1), ('c++ easy to understand', 1), ('c++ recursive solution', 1), ('c++ solution', 1), ('c++14', 1), ('cache', 1), ('commetend', 1), ('constant space', 1), ('csharp', 1), ('data structures', 1), ('dfs iterative', 1), ('dfs recursive', 1), ('dfs traversal', 1), ('dfs-bfs', 1), ('dfs-in-order', 1), ('dfs-non-recursive', 1), ('dfs-recursive', 1), ('dfs-tree', 1), ('divide-and-conquer', 1), ('dsf', 1), ('easiest', 1), ('easy bfs python iterative', 1), ('easy sloution', 1), ('easy-solition', 1), ('easysolution', 1), ('fast and simple', 1), ('faster than 100', 1), ('faster then 95', 1), ('fp', 1), ('golang solution', 1), ('golf', 1), ('golfing', 1), ('graph theory', 1), ('graph traversal', 1), ('helper', 1), ('in-order', 1), ('iterative solution', 1), ('itereative', 1), ('izaac', 1), ('java solution', 1), ('javascrip', 1), ('javascriptes6', 1), ('js', 1), ('level order', 1), ('list', 1), ('list comprehension', 1), ('logarithmic time', 1), ('meiyaowen', 1), ('morris-inorder-traversal', 1), ('morristraversal', 1), ('one line', 1), ('optimal', 1), ('optimized solution', 1), ('performance', 1), ('pointer', 1), ('prefetch', 1), ('preload', 1), ('preorder', 1), ('python bfs', 1), ('python bfs iterative', 1), ('python easy bfs iterative', 1), ('python queue', 1), ('python-2', 1), ('queue-approach', 1), ('range sum of bst', 1), ('range-sum', 1), ('rangesum', 1), ('recoursion', 1), ('recurrance', 1), ('recursion formula', 1), ('recursive approach', 1), ('recursive-dfs', 1), ('recusive', 1), ('resursive', 1), ('rust', 1), ('scala', 1), ('self explanatory', 1), ('self-explanatory', 1), ('static', 1), ('swift5', 1), ('test-cases', 1), ('testcase error', 1), ('traversal', 1), ('traversing', 1), ('trim', 1), ('two variables', 1), ('typescript', 1), ('ultra simple', 1), ('upvote', 1), ('video explaination', 1), ('video-explanation', 1), ('visualization', 1), ('wrong answer', 1), ('wrong output', 1)]"
937,Reorder Data in Log Files,https://leetcode.com/problems/reorder-data-in-log-files,"You are given an array of logs. Each log is a space-delimited string of words, where the first word is the identifier.

There are two types of logs:


	Letter-logs: All words (except the identifier) consist of lowercase English letters.
	Digit-logs: All words (except the identifier) consist of digits.


Reorder these logs so that:


	The letter-logs come before all digit-logs.
	The letter-logs are sorted lexicographically by their contents. If their contents are the same, then sort them lexicographically by their identifiers.
	The digit-logs maintain their relative ordering.


Return the final order of the logs.",['string'],Easy,1076,2904,376886,206811,[],"[('c++', 30), ('javascript', 27), ('python', 25), ('java', 22), ('python 3', 20), ('cpp', 15), ('python3', 13), ('easy-to-understand', 11), ('c#', 9), ('golang', 8), ('sorting', 7), ('comparator', 6), ('string', 5), ('c', 4), ('easy-understanding', 4), ('java-solution', 4), ('sort', 4), ('array-sort', 3), ('clean code', 3), ('dictionary', 3), ('go lang', 3), ('scala', 3), ('simple', 3), ('simple solution', 3), ('sort-function', 3), ('stable sort', 3), ('stable-sort', 3), ('amazon', 2), ('arrays', 2), ('c++ code', 2), ('compare-function', 2), ('custom sorting', 2), ('go', 2), ('golang-solution', 2), ('lists', 2), ('priority queue', 2), ('python2', 2), ('regex', 2), ('ruby', 2), ('swift', 2), ('1-liner', 1), ('2ms', 1), ('99', 1), ('algorithms', 1), ('array', 1), ('array sort', 1), ('c++ set', 1), ('c++11', 1), ('character', 1), ('clean solution', 1), ('clean-code', 1), ('comments', 1), ('concise-solution', 1), ('constant space', 1), ('cpp doubt', 1), ('cpp soltuion', 1), ('cpp solution', 1), ('cpp-solution', 1), ('custom', 1), ('data structures', 1), ('dictionaries', 1), ('easy', 1), ('easy to undersstand', 1), ('easy to understand', 1), ('easy understanding', 1), ('easy-understand', 1), ('efficient solution', 1), ('explanation', 1), ('explanations', 1), ('fast', 1), ('go-solution', 1), ('hashing', 1), ('heap', 1), ('heapq', 1), ('help needed', 1), ('icomparable', 1), ('icomparer', 1), ('in-place', 1), ('inplace', 1), ('intuitive', 1), ('javasccript', 1), ('javascrip', 1), ('javascript solution', 1), ('lambda', 1), ('linear time', 1), ('linkedlists', 1), ('linq', 1), ('map', 1), ('maxheap', 1), ('mergesort', 1), ('object-oriented-design', 1), ('one-liner', 1), ('oop', 1), ('ordered map', 1), ('orz', 1), ('php', 1), ('priorityqueue', 1), ('question need help', 1), ('quicksort', 1), ('re', 1), ('recursion', 1), ('reorder', 1), ('reorder data in log files', 1), ('reorder list', 1), ('set', 1), ('simple-solution', 1), ('simplest', 1), ('sorted', 1), ('sorted array', 1), ('sortlogic', 1), ('space', 1), ('stl', 1), ('string manipulation', 1), ('string parsing', 1), ('string-operation', 1), ('test', 1), ('test-cases', 1), ('testcase error', 1), ('time', 1), ('typescript', 1), ('unit-test', 1), ('wrong answer', 1)]"
936,Stamping The Sequence,https://leetcode.com/problems/stamping-the-sequence,"You want to form a target string of lowercase letters.

At the beginning, your sequence is target.length '?' marks.  You also have a stamp of lowercase letters.

On each turn, you may place the stamp over the sequence, and replace every letter in the sequence with the corresponding letter from the stamp.  You can make up to 10 * target.length turns.

For example, if the initial sequence is ""?????"", and your stamp is ""abc"",  then you may make ""abc??"", ""?abc?"", ""??abc"" in the first turn.  (Note that the stamp must be fully contained in the boundaries of the sequence in order to stamp.)

If the sequence is possible to stamp, then return an array of the index of the left-most letter being stamped at each turn.  If the sequence is not possible to stamp, return an empty array.

For example, if the sequence is ""ababc"", and the stamp is ""abc"", then we could return the answer [0, 2], corresponding to the moves ""?????"" -> ""abc??"" -> ""ababc"".

Also, if the sequence is possible to stamp, it is guaranteed it is possible to stamp within 10 * target.length moves.  Any answers specifying more than this number of moves will not be accepted.","['string', 'greedy']",Hard,438,112,41368,22063,[],"[('c++', 8), ('explained', 8), ('java', 8), ('greedy', 7), ('javascript', 5), ('python', 5), ('cpp', 3), ('go', 3), ('golang', 3), ('greedy approach', 3), ('video-explanation', 3), ('c#', 2), ('iterative', 2), ('rust', 2), ('bfs', 1), ('clean code', 1), ('comments-added', 1), ('cpp solution', 1), ('dfs', 1), ('easy understanding', 1), ('easy-understanding', 1), ('golang-solution', 1), ('linked-list', 1), ('python 3', 1), ('python3', 1), ('recursion', 1), ('rolling hash', 1), ('ruby', 1), ('simple', 1), ('stampingthesequence', 1), ('swift', 1), ('two pass', 1), ('video explanation', 1)]"
935,Knight Dialer,https://leetcode.com/problems/knight-dialer,"The chess knight has a unique movement, it may move two squares vertically and one square horizontally, or two squares horizontally and one square vertically (with both forming the shape of an L). The possible movements of chess knight are shown in this diagaram:

A chess knight can move as indicated in the chess diagram below:

We have a chess knight and a phone pad as shown below, the knight can only stand on a numeric cell (i.e. blue cell).

Given an integer n, return how many distinct phone numbers of length n we can dial.

You are allowed to place the knight on any numeric cell initially and then you should perform n - 1 jumps to dial a number of length n. All jumps should be valid knight jumps.

As the answer may be very large, return the answer modulo 109 + 7.",['dynamic-programming'],Medium,841,292,105905,49568,[],"[('dynamic programming', 19), ('c++', 13), ('dp', 12), ('memoization', 8), ('python', 8), ('cpp', 7), ('java', 6), ('javascript', 5), ('dfs', 4), ('python3', 4), ('easy', 3), ('easy-to-read', 3), ('golang', 3), ('linear time', 3), ('python 3', 3), ('diagram', 2), ('easy-to-understand', 2), ('help', 2), ('help needed', 2), ('java-solution', 2), ('recusion', 2), ('#935', 1), ('10 digits - 10 states', 1), ('bottom to top', 1), ('c', 1), ('c code', 1), ('c#', 1), ('c++ code', 1), ('comments added', 1), ('constant-space-iterative', 1), ('cpp easy', 1), ('cpp question', 1), ('dfsbfs simple version', 1), ('doubts', 1), ('dp bottom up', 1), ('dynamic-programming', 1), ('explanation of logic', 1), ('explanations', 1), ('fast pow', 1), ('fuck noobs', 1), ('go', 1), ('golang-solution', 1), ('google', 1), ('induction', 1), ('javascript solution', 1), ('js', 1), ('knight dialer', 1), ('kotlin', 1), ('lru-cache', 1), ('memoziation', 1), ('moving fast', 1), ('noob coding', 1), ('recursive', 1), ('recursive dp', 1), ('science', 1), ('symmetry', 1), ('template', 1), ('tle', 1), ('top-down dp', 1), ('topdown', 1), ('unreadable', 1)]"
934,Shortest Bridge,https://leetcode.com/problems/shortest-bridge,"In a given 2D binary array A, there are two islands.  (An island is a 4-directionally connected group of 1s not connected to any other 1s.)

Now, we may change 0s to 1s so as to connect the two islands together to form 1 island.

Return the smallest number of 0s that must be flipped.  (It is guaranteed that the answer is at least 1.)","['depth-first-search', 'breadth-first-search']",Medium,1330,88,99410,49795,[],"[('bfs', 23), ('dfs', 20), ('dfs-bfs', 13), ('python', 8), ('javascript', 7), ('c#', 6), ('c++', 6), ('cpp', 6), ('python 3', 6), ('java', 5), ('cpp solution', 3), ('beat 98', 2), ('breadth first search', 2), ('clean', 2), ('golang', 2), ('heap', 2), ('js', 2), ('c+', 1), ('comments', 1), ('concise-solution', 1), ('csharp', 1), ('dfs simple solution', 1), ('dictionary c#', 1), ('easy', 1), ('easy to read', 1), ('easy to understand', 1), ('easytounderstand', 1), ('efficient', 1), ('expalanation', 1), ('explained solution', 1), ('facebook', 1), ('flood fill', 1), ('go', 1), ('grow', 1), ('hash set', 1), ('java solution', 1), ('javascript solution', 1), ('kotlinvim', 1), ('multisource-bfs', 1), ('python3', 1), ('short', 1), ('simple', 1), ('straightforward', 1), ('swift', 1), ('unionfind', 1)]"
933,Number of Recent Calls,https://leetcode.com/problems/number-of-recent-calls,"You have a RecentCounter class which counts the number of recent requests within a certain time frame.

Implement the RecentCounter class:


	RecentCounter() Initializes the counter with zero recent requests.
	int ping(int t) Adds a new request at time t, where t represents some time in milliseconds, and returns the number of requests that has happened in the past 3000 milliseconds (including the new request). Specifically, return the number of requests that have happened in the inclusive range [t - 3000, t].


It is guaranteed that every call to ping uses a strictly larger value of t than the previous call.",['queue'],Easy,577,2171,139481,101065,[],"[('c++', 36), ('queue', 36), ('cpp', 20), ('java', 15), ('easy-understanding', 14), ('python 3', 13), ('binary-search', 12), ('python', 12), ('javascript', 11), ('deque', 10), ('cpp solution', 8), ('c#', 6), ('java-solution', 6), ('python3', 6), ('ruby', 6), ('easy', 4), ('binary search', 3), ('lowerbound', 3), ('priority queue', 3), ('sliding window', 3), ('video-explanation', 3), ('beginner friendly', 2), ('binarysearch', 2), ('bitset', 2), ('bug-test-case', 2), ('c', 2), ('circular-array', 2), ('easy-to-understand', 2), ('easy-understand', 2), ('easytounderstand', 2), ('explained', 2), ('fastest', 2), ('go', 2), ('golang', 2), ('linear time', 2), ('simple and robust', 2), ('2 pointers', 1), ('2pointers', 1), ('accepted', 1), ('accumulate', 1), ('amortized', 1), ('array', 1), ('best-solution', 1), ('bug in leetcode', 1), ('bug report', 1), ('c++ code', 1), ('c++ solution', 1), ('c++11', 1), ('circular queue', 1), ('clean code', 1), ('clean solution', 1), ('clear-understanding', 1), ('cpp doubt', 1), ('cpp easy', 1), ('cpp soltuion', 1), ('csharp', 1), ('dequeue', 1), ('easy to read', 1), ('easy undestanding', 1), ('efficient', 1), ('explanation of logic', 1), ('explanations', 1), ('fast and simple', 1), ('heaps', 1), ('illustration', 1), ('java ac solution', 1), ('js', 1), ('kotlin', 1), ('linked list', 1), ('linked-list', 1), ('list', 1), ('logic exlpained', 1), ('lower-bound', 1), ('map', 1), ('min heap', 1), ('non-queue', 1), ('o1 space', 1), ('october challenge', 1), ('ogre', 1), ('oops', 1), ('optimisation', 1), ('optimized', 1), ('performance', 1), ('php', 1), ('priority-queue', 1), ('problem statement', 1), ('problem understanding', 1), ('python deque', 1), ('question explained', 1), ('question-explained', 1), ('queue-approach', 1), ('queues', 1), ('ring buffer', 1), ('rust', 1), ('simple', 1), ('simple clear c++ solution', 1), ('simple-solution', 1), ('sliding window algorithm', 1), ('solution explained', 1), ('solution-sharing-cpp', 1), ('stars move the article up', 1), ('treeset', 1), ('typescript', 1), ('upperbound', 1), ('vector', 1), ('vectors', 1), ('video', 1), ('video explanation', 1), ('video solution', 1)]"
932,Beautiful Array,https://leetcode.com/problems/beautiful-array,"For some fixed N, an array A is beautiful if it is a permutation of the integers 1, 2, ..., N, such that:

For every i < j, there is no k with i < k < j such that A[k] * 2 = A[i] + A[j].

Given N, return any beautiful array A.  (It is guaranteed that one exists.)",['divide-and-conquer'],Medium,480,579,26048,15987,[],"[('divide and conquer', 5), ('python', 3), ('cpp', 2), ('divide-and-conquer', 2), ('python 3', 2), ('array', 1), ('c++', 1), ('construction', 1), ('cpp solution', 1), ('easy to understand', 1), ('even odd', 1), ('iterative way', 1), ('java', 1), ('math', 1), ('odd-even', 1), ('online-judge-question', 1), ('proof', 1), ('python3', 1), ('swap', 1), ('swap-in-place', 1)]"
931,Minimum Falling Path Sum,https://leetcode.com/problems/minimum-falling-path-sum,"Given an n x n array of integers matrix, return the minimum sum of any falling path through matrix.

A falling path starts at any element in the first row and chooses the element in the next row that is either directly below or diagonally left/right. Specifically, the next element from position (row, col) will be (row + 1, col - 1), (row + 1, col), or (row + 1, col + 1).",['dynamic-programming'],Medium,1196,83,113199,72371,"[""Minimum Falling Path Sum II""]","[('dynamic programming', 72), ('dp', 32), ('c++', 30), ('python 3', 23), ('python', 22), ('cpp', 16), ('dynamic-programming', 16), ('java', 14), ('javascript', 12), ('python3', 11), ('memoization', 7), ('recursion', 7), ('c++ code', 6), ('bottom-up-algorithm', 5), ('easy-understanding', 5), ('java-solution', 5), ('matrix', 5), ('bottom up', 3), ('c#', 3), ('cpp solution', 3), ('easy', 3), ('easytounderstand', 3), ('golang', 3), ('#help', 2), ('#helpneeded', 2), ('#javascript', 2), ('#recursion', 2), ('bottom-up', 2), ('c', 2), ('dfs', 2), ('dfs with memo', 2), ('easiest', 2), ('explained', 2), ('in-place', 2), ('iterative', 2), ('linear-time', 2), ('python2', 2), ('tabulation', 2), ('top down dp', 2), ('#dp', 1), ('#dynamic-programming', 1), ('#python', 1), ('100 beat', 1), ('100 faster', 1), ('100 space', 1), ('4line', 1), ('algorithms', 1), ('bottoms-up', 1), ('bottomup', 1), ('c code', 1), ('c++17', 1), ('clean code', 1), ('constant-space', 1), ('csharp', 1), ('destructive', 1), ('dp pattern', 1), ('dp python', 1), ('dp-programming', 1), ('dp-techqique', 1), ('dps', 1), ('dynamic programmin', 1), ('easy-solution', 1), ('easy-to-understand', 1), ('fast and simple', 1), ('fast-solution', 1), ('intuitive', 1), ('intutive', 1), ('javascript recursive', 1), ('javascript solution', 1), ('kotlin', 1), ('linear-space', 1), ('memoized', 1), ('memoziation', 1), ('no extra space', 1), ('o1space', 1), ('optimal substructure', 1), ('problem solving', 1), ('python 3 recursion', 1), ('pythonpython3', 1), ('reccurrence', 1), ('recursive', 1), ('recursive-descent', 1), ('ruby', 1), ('self explanatory', 1), ('simple solution', 1), ('single pass', 1), ('three-lines', 1), ('top down', 1), ('top-down', 1), ('topdown', 1), ('topological-sort', 1), ('typescript', 1), ('ultra simple', 1), ('upvote', 1), ('very easy to understand', 1)]"
930,Binary Subarrays With Sum,https://leetcode.com/problems/binary-subarrays-with-sum,"In an array A of 0s and 1s, how many non-empty subarrays have sum S?","['hash-table', 'two-pointers']",Medium,796,34,69399,31188,[],"[('c++', 7), ('hashmap', 5), ('javascript', 5), ('prefix sum', 5), ('java', 4), ('python', 4), ('python3', 3), ('sliding window', 3), ('cpp', 2), ('python 3', 2), ('c#', 1), ('cpp solution', 1), ('dp', 1), ('dynamic programming', 1), ('easy understanding', 1), ('explained', 1), ('fast-solution', 1), ('golang', 1), ('hash table', 1), ('hashtable', 1), ('kotlin', 1), ('kotlinvim', 1), ('math', 1), ('thought-process', 1), ('thoughts', 1), ('video explanation', 1)]"
929,Unique Email Addresses,https://leetcode.com/problems/unique-email-addresses,"Every valid email consists of a local name and a domain name, separated by the '@' sign. Besides lowercase letters, the email may contain one or more '.' or '+'.


	For example, in ""alice@leetcode.com"", ""alice"" is the local name, and ""leetcode.com"" is the domain name.


If you add periods '.' between some characters in the local name part of an email address, mail sent there will be forwarded to the same address without dots in the local name. Note that this rule does not apply to domain names.


	For example, ""alice.z@leetcode.com"" and ""alicez@leetcode.com"" forward to the same email address.


If you add a plus '+' in the local name, everything after the first plus sign will be ignored. This allows certain emails to be filtered. Note that this rule does not apply to domain names.


	For example, ""m.y+name@email.com"" will be forwarded to ""my@email.com"".


It is possible to use both of these rules at the same time.

Given an array of strings emails where we send one email to each email[i], return the number of different addresses that actually receive mails.",['string'],Easy,1168,221,380839,256019,[],"[('python', 40), ('python 3', 31), ('java', 30), ('javascript', 26), ('c++', 24), ('hashset', 14), ('python3', 14), ('cpp', 13), ('java-solution', 13), ('c#', 11), ('easy-understanding', 10), ('set', 8), ('regex', 7), ('swift', 7), ('easy', 6), ('easy-to-understand', 6), ('sets', 6), ('string', 6), ('golang', 5), ('easy to understand', 4), ('regexp', 4), ('easy-undestand', 3), ('easytounderstand', 3), ('functional', 3), ('javascript solution', 3), ('ruby', 3), ('simple', 3), ('simple solution', 3), ('solution', 3), ('unique email address', 3), ('c++ code', 2), ('c++11', 2), ('clean code', 2), ('commented', 2), ('cpp solution', 2), ('dictionary', 2), ('easy-understand', 2), ('email', 2), ('es6', 2), ('explained', 2), ('google', 2), ('hash set', 2), ('hashmap', 2), ('java8', 2), ('kotlin', 2), ('rust', 2), ('string builder', 2), ('string-operation', 2), ('stringbuilder', 2), ('unordered set', 2), ('unorderedset', 2), ('#kotlin', 1), ('100 bst', 1), ('100 speed', 1), ('2 approaches', 1), ('2-line', 1), ('ac', 1), ('amazon', 1), ('array', 1), ('beats 100', 1), ('c', 1), ('c++code', 1), ('different approach', 1), ('easy to read', 1), ('easy understand', 1), ('easy undestanding', 1), ('easysolution', 1), ('efficiencey', 1), ('efficient solution', 1), ('erase', 1), ('explain', 1), ('explaination', 1), ('facebook interview', 1), ('facebook phone interview', 1), ('fast', 1), ('fast and simple', 1), ('fast-solution', 1), ('faster', 1), ('fasterthan100', 1), ('fun', 1), ('functional programming', 1), ('functional-programming', 1), ('go', 1), ('go lang', 1), ('hash', 1), ('hash table', 1), ('help', 1), ('help me', 1), ('index', 1), ('iterative', 1), ('java ac solution', 1), ('javascipt', 1), ('javascrpt', 1), ('kotlin-solution', 1), ('list only', 1), ('map', 1), ('mrmagician', 1), ('one-liner', 1), ('problem', 1), ('python2', 1), ('python3.8', 1), ('pythonic', 1), ('rabin-karp', 1), ('rajat', 1), ('regular-expression', 1), ('segmentation fault', 1), ('set c++', 1), ('simple python accepted', 1), ('simple-solution', 1), ('single-line', 1), ('slicing', 1), ('stl', 1), ('straight-forward', 1), ('trash', 1), ('treeset', 1), ('trie', 1), ('typescript', 1), ('unique email addresses', 1), ('unit-test', 1), ('unordered-set', 1), ('upvote', 1), ('vector', 1), ('with-explanation', 1)]"
928,Minimize Malware Spread II,https://leetcode.com/problems/minimize-malware-spread-ii,"You are given a network of n nodes represented as an n x n adjacency matrix graph, where the ith node is directly connected to the jth node if graph[i][j] == 1.

Some nodes initial are initially infected by malware. Whenever two nodes are directly connected, and at least one of those two nodes is infected by malware, both nodes will be infected by malware. This spread of malware will continue until no more nodes can be infected in this manner.

Suppose M(initial) is the final number of nodes infected with malware in the entire network after the spread of malware stops.

We will remove exactly one node from initial, completely removing it and any connections from this node to any other node.

Return the node that, if removed, would minimize M(initial). If multiple nodes could be removed to minimize M(initial), return such a node with the smallest index.","['depth-first-search', 'union-find', 'graph']",Hard,290,60,29821,12375,[],"[('c++', 4), ('dfs', 3), ('bfs', 2), ('cpp', 2), ('union find', 2), ('c#', 1), ('c++17', 1), ('clean code', 1), ('cpp solution', 1), ('disjoint-set', 1), ('dsu', 1), ('efficient', 1), ('error in solution', 1), ('java', 1), ('javascript', 1), ('swift', 1), ('tarjans algorithm', 1), ('union-find', 1), ('unionfind', 1)]"
927,Three Equal Parts,https://leetcode.com/problems/three-equal-parts,"You are given an array arr which consists of only zeros and ones, divide the array into three non-empty parts such that all of these parts represent the same binary value.

If it is possible, return any [i, j] with i + 1 < j, such that:


	arr[0], arr[1], ..., arr[i] is the first part,
	arr[i + 1], arr[i + 2], ..., arr[j - 1] is the second part, and
	arr[j], arr[j + 1], ..., arr[arr.length - 1] is the third part.
	All three parts have equal binary values.


If it is not possible, return [-1, -1].

Note that the entire part is used when considering what binary value it represents. For example, [1,1,0] represents 6 in decimal, not 3. Also, leading zeros are allowed, so [0,1,1] and [1,1] represent the same value.","['math', 'binary-search', 'greedy']",Hard,305,64,26874,9318,[],"[('brutal force optmized', 2), ('c#', 2), ('c++', 2), ('logical thinking', 2), ('python', 2), ('python 3', 2), ('brute force to optimal', 1), ('c', 1), ('clear', 1), ('constant space', 1), ('efficient', 1), ('explanation with code', 1), ('fast and simple', 1), ('java', 1), ('javascript', 1), ('linear time', 1), ('observations', 1), ('pruning', 1), ('simple', 1)]"
926,Flip String to Monotone Increasing,https://leetcode.com/problems/flip-string-to-monotone-increasing,"A string of '0's and '1's is monotone increasing if it consists of some number of '0's (possibly 0), followed by some number of '1's (also possibly 0.)

We are given a string S of '0's and '1's, and we may flip any '0' to a '1' or a '1' to a '0'.

Return the minimum number of flips to make S monotone increasing.",['array'],Medium,778,25,51141,27336,[],"[('c++', 8), ('dynamic programming', 7), ('python', 7), ('cpp', 5), ('python 3', 5), ('python3', 4), ('dp', 3), ('java', 3), ('c#', 2), ('easy-understanding', 2), ('explanations', 2), ('golang', 2), ('brute-force', 1), ('comments added', 1), ('cpp-solution', 1), ('fast and simple', 1), ('golang-solution', 1), ('java-solution', 1), ('lis', 1), ('minflipsmonoincr', 1), ('o1space', 1), ('one-liner', 1), ('one-pass', 1), ('oneline', 1), ('prefixsum', 1), ('short code', 1), ('single pass', 1), ('space-efficient', 1)]"
925,Long Pressed Name,https://leetcode.com/problems/long-pressed-name,"Your friend is typing his name into a keyboard. Sometimes, when typing a character c, the key might get long pressed, and the character will be typed 1 or more times.

You examine the typed characters of the keyboard. Return True if it is possible that it was your friends name, with some characters (possibly none) being long pressed.","['two-pointers', 'string']",Easy,975,175,174907,64919,[],"[('c++', 32), ('two-pointers', 25), ('cpp', 19), ('javascript', 19), ('python', 17), ('java', 15), ('python 3', 11), ('two pointers', 11), ('two-pointer', 9), ('easy-to-understand', 8), ('java-solution', 7), ('easy-understanding', 6), ('easy-undestand', 6), ('golang', 5), ('python3', 5), ('c++ code', 4), ('go', 4), ('2 pointer', 3), ('c#', 3), ('cpp solution', 3), ('fast-solution', 3), ('swift', 3), ('0ms', 2), ('c', 2), ('c++11', 2), ('cpp easy', 2), ('easy', 2), ('fast and simple', 2), ('js', 2), ('simple solution', 2), ('string', 2), ('0ms-solution', 1), ('10 liner', 1), ('2 pointers', 1), ('3 approaches', 1), ('8 lines', 1), ('beginner friendly', 1), ('brute force', 1), ('c++14', 1), ('c++17', 1), ('code comments', 1), ('comments-added', 1), ('diagrams', 1), ('dynamic programming', 1), ('easy to understand', 1), ('easytounderstand', 1), ('enjoy', 1), ('explain', 1), ('explained', 1), ('explained solution', 1), ('explanation', 1), ('explanatory comments', 1), ('generator', 1), ('go lang', 1), ('good variable names', 1), ('google interview', 1), ('groupby', 1), ('grouping', 1), ('hash table', 1), ('iteration', 1), ('iterator', 1), ('itertools.groupby', 1), ('java solution', 1), ('javascript solution', 1), ('js javascript', 1), ('least-memory', 1), ('less memory', 1), ('linear time', 1), ('mapreduce', 1), ('memoization', 1), ('minimalizm', 1), ('one pass solution', 1), ('python2', 1), ('rajat', 1), ('readable', 1), ('review', 1), ('ruby', 1), ('run-length-encoding', 1), ('self-explanatory', 1), ('short code', 1), ('simple', 1), ('simple clear c++ solution', 1), ('stack', 1), ('string-operation', 1), ('structured code', 1), ('test-case-too-weak', 1), ('tow-pointers', 1), ('trie', 1), ('two pointer', 1), ('two pointer approach', 1), ('understandable', 1), ('unit-test', 1), ('wrong output', 1), ('zip', 1)]"
924,Minimize Malware Spread,https://leetcode.com/problems/minimize-malware-spread,"You are given a network of n nodes represented as an n x n adjacency matrix graph, where the ith node is directly connected to the jth node if graph[i][j] == 1.

Some nodes initial are initially infected by malware. Whenever two nodes are directly connected, and at least one of those two nodes is infected by malware, both nodes will be infected by malware. This spread of malware will continue until no more nodes can be infected in this manner.

Suppose M(initial) is the final number of nodes infected with malware in the entire network after the spread of malware stops. We will remove exactly one node from initial.

Return the node that, if removed, would minimize M(initial). If multiple nodes could be removed to minimize M(initial), return such a node with the smallest index.

Note that if a node was removed from the initial list of infected nodes, it might still be infected later due to the malware spread.","['depth-first-search', 'union-find']",Hard,416,318,72697,30441,[],"[('dfs', 6), ('union find', 6), ('union-find', 4), ('c#', 3), ('c++', 3), ('java', 3), ('cpp', 2), ('intuitive', 2), ('java-solution', 2), ('javascript', 2), ('bfs', 1), ('corona', 1), ('covid-19', 1), ('cpp solution', 1), ('csharp', 1), ('dfs simple', 1), ('disjoint-set', 1), ('fastest', 1), ('golang', 1), ('malware spread', 1), ('optimal', 1), ('path compression', 1), ('python', 1), ('simple', 1), ('swift', 1), ('unionfind', 1)]"
923,3Sum With Multiplicity,https://leetcode.com/problems/3sum-with-multiplicity,"Given an integer array arr, and an integer target, return the number of tuples i, j, k such that i < j < k and arr[i] + arr[j] + arr[k] == target.

As the answer can be very large, return it modulo 109 + 7.",['two-pointers'],Medium,695,123,97437,39909,[],"[('c++', 15), ('cpp', 9), ('hashmap', 9), ('java', 9), ('python', 8), ('two-pointers', 8), ('combination', 5), ('golang', 4), ('javascript', 4), ('dp', 3), ('go', 3), ('math', 3), ('python3', 3), ('rust', 3), ('simple', 3), ('two pointers', 3), ('3sum', 2), ('c++ solution', 2), ('clean code', 2), ('combinatories', 2), ('comments-added', 2), ('cpp solution', 2), ('dynamic programming', 2), ('easy', 2), ('explained', 2), ('python 3', 2), ('typescript', 2), ('video-explanation', 2), ('2 pointers', 1), ('2-sum', 1), ('2pointers', 1), ('3-sum', 1), ('binary-search', 1), ('c#', 1), ('c++17', 1), ('clean-efficient-code', 1), ('combinatorics', 1), ('comments', 1), ('dynamic-programming', 1), ('efficiency', 1), ('explanations', 1), ('fft-convolve', 1), ('freqs-map', 1), ('frequency map', 1), ('golang-solution', 1), ('hashmaps', 1), ('hashset', 1), ('iteration', 1), ('java ac solution', 1), ('javascrip', 1), ('knapsack', 1), ('kotlin', 1), ('map', 1), ('math-solution', 1), ('memoization', 1), ('optimisation', 1), ('permutations', 1), ('ruby', 1), ('short', 1), ('simple clear c++ solution', 1), ('solution', 1), ('swift', 1), ('three pointers', 1), ('three-pointers', 1), ('three-sum', 1), ('treemap', 1), ('two sum', 1), ('two-pointer', 1), ('unordered map', 1), ('zea7ot', 1)]"
922,Sort Array By Parity II,https://leetcode.com/problems/sort-array-by-parity-ii,"Given an array of integers nums, half of the integers in nums are odd, and the other half are even.

Sort the array so that whenever nums[i] is odd, i is odd, and whenever nums[i] is even, i is even.

Return any answer array that satisfies this condition.","['array', 'sort']",Easy,1018,60,178759,126464,[],"[('c++', 36), ('java', 30), ('cpp', 28), ('python', 28), ('python 3', 27), ('javascript', 23), ('easy-understanding', 20), ('java-solution', 16), ('two-pointers', 16), ('cpp solution', 10), ('python3', 9), ('golang', 7), ('easy', 6), ('two-pointer', 6), ('c', 5), ('array', 4), ('c#', 4), ('c++ code', 4), ('easy-undestand', 4), ('in-place', 4), ('one pass', 4), ('simple', 4), ('simple solution', 4), ('javascript solution', 3), ('ruby', 3), ('swift', 3), ('beginner friendly', 2), ('c programming', 2), ('commented', 2), ('cpp-solution', 2), ('deque', 2), ('easytounderstand', 2), ('explained', 2), ('filter', 2), ('generators', 2), ('inplace', 2), ('one-loop', 2), ('optimal', 2), ('python2', 2), ('sort array by parity', 2), ('sorting', 2), ('twopointer', 2), ('#list', 1), ('#python 3', 1), ('2 pointer', 1), ('2 solutions', 1), ('algorithms', 1), ('array-sort', 1), ('arrays', 1), ('beats 100', 1), ('beginnerfriendly', 1), ('bit manipulation', 1), ('c code', 1), ('c++14', 1), ('commentary', 1), ('commented code', 1), ('constant space', 1), ('constant-space', 1), ('cp', 1), ('cycle sort', 1), ('divide and conquer', 1), ('easy to understand', 1), ('easy understanding', 1), ('easy-to-understand', 1), ('efficient', 1), ('efficient solution', 1), ('exchange', 1), ('explaination', 1), ('explanation', 1), ('explanation of logic', 1), ('fast and simple', 1), ('fast-solution', 1), ('faster', 1), ('generator expression', 1), ('go', 1), ('hash table', 1), ('imperative', 1), ('javascrip', 1), ('javascript-solution', 1), ('js', 1), ('kotlin', 1), ('linear memory', 1), ('linear time', 1), ('linear-time', 1), ('memory optimized', 1), ('merge', 1), ('mrmagician', 1), ('no extra space', 1), ('noob', 1), ('on', 1), ('one-pass', 1), ('partition', 1), ('php', 1), ('pyhton', 1), ('quick-sort', 1), ('readable', 1), ('rust', 1), ('selection sort', 1), ('short', 1), ('simple-efficient', 1), ('simplest', 1), ('sort', 1), ('sort-by-parity', 1), ('sorted', 1), ('swap', 1), ('swift5', 1), ('time-complexity-o', 1), ('two pass', 1), ('two pointers', 1), ('two-liner', 1), ('typescript', 1), ('upvote', 1), ('while-loop', 1), ('xor', 1)]"
921,Minimum Add to Make Parentheses Valid,https://leetcode.com/problems/minimum-add-to-make-parentheses-valid,"Given a string S of '(' and ')' parentheses, we add the minimum number of parentheses ( '(' or ')', and in any positions ) so that the resulting parentheses string is valid.

Formally, a parentheses string is valid if and only if:


	It is the empty string, or
	It can be written as AB (A concatenated with B), where A and B are valid strings, or
	It can be written as (A), where A is a valid string.


Given a parentheses string, return the minimum number of parentheses we must add to make the resulting string valid.","['stack', 'greedy']",Medium,1176,81,134419,100838,[],"[('stack', 58), ('c++', 55), ('stacks', 37), ('cpp', 34), ('java', 30), ('python 3', 21), ('javascript', 18), ('python', 16), ('simple solution', 11), ('cpp solution', 10), ('python3', 10), ('easy', 7), ('c#', 6), ('java-solution', 6), ('0ms runtime', 4), ('100 speed', 4), ('golang', 4), ('0ms', 3), ('c++ code', 3), ('easy-undestand', 3), ('greedy', 3), ('simple', 3), ('swift', 3), ('c++17', 2), ('cpp easy', 2), ('easy to understand', 2), ('easy-to-understand', 2), ('easytounderstand', 2), ('explained', 2), ('fast', 2), ('fast-solution', 2), ('fastest solution', 2), ('golang-solution', 2), ('intuitive', 2), ('js', 2), ('linear time', 2), ('no extra space', 2), ('python2', 2), ('simple-solution', 2), ('stack-based', 2), ('upvote', 2), ('100 faster cpp', 1), ('100 memory', 1), ('2 pointer', 1), ('accepted', 1), ('algorithms', 1), ('balanced-parantheses', 1), ('c', 1), ('c++11', 1), ('charcodeat', 1), ('clean code', 1), ('commentary', 1), ('comments added', 1), ('comments-added', 1), ('csharp', 1), ('easy understanding', 1), ('easy undestanding', 1), ('easy-understanding', 1), ('efficient', 1), ('explanatory comments', 1), ('faster', 1), ('faster than 100.00', 1), ('go', 1), ('go-solution', 1), ('good variable names', 1), ('intutive', 1), ('java ac solution', 1), ('javascipt', 1), ('javascript solution', 1), ('kotlin', 1), ('kotlinvim', 1), ('linear', 1), ('list', 1), ('mrmagician', 1), ('node-operation', 1), ('one pass', 1), ('parentheses', 1), ('programming', 1), ('regex', 1), ('ruby', 1), ('self explanatory', 1), ('short', 1), ('short code', 1), ('simplesolution', 1), ('single pass', 1), ('solution', 1), ('solution-python', 1), ('space-complexity-1', 1), ('stack-over-flow', 1), ('stackoverflow', 1), ('two solutions', 1), ('two-pointers', 1), ('typescript', 1), ('ultra simple', 1), ('visual', 1), ('without stack', 1)]"
920,Number of Music Playlists,https://leetcode.com/problems/number-of-music-playlists,"Your music player contains N different songs and she wants to listen to L (not necessarily different) songs during your trip.  You create a playlist so that:


	Every song is played at least once
	A song can only be played again only if K other songs have been played


Return the number of possible playlists.  As the answer can be very large, return it modulo 10^9 + 7.",['dynamic-programming'],Hard,547,57,30005,14459,[],"[('dynamic programming', 3), ('combinatorics', 2), ('java', 2), ('recursion', 2), ('c#', 1), ('cpp', 1), ('dp', 1), ('easy', 1), ('mathematics', 1), ('memoziation', 1), ('python', 1), ('top down dp', 1), ('video explaination', 1)]"
919,Complete Binary Tree Inserter,https://leetcode.com/problems/complete-binary-tree-inserter,"A complete binary tree is a binary tree in which every level, except possibly the last, is completely filled, and all nodes are as far left as possible.

Write a data structure CBTInserter that is initialized with a complete binary tree and supports the following operations:


	CBTInserter(TreeNode root) initializes the data structure on a given tree with head node root;
	CBTInserter.insert(int v) will insert a TreeNode into the tree with value node.val = v so that the tree remains complete, and returns the value of the parent of the inserted TreeNode;
	CBTInserter.get_root() will return the head node of the tree.",['tree'],Medium,419,60,39226,23219,[],"[('c++', 8), ('bfs', 6), ('queue', 5), ('level-order-traversal', 4), ('cpp', 3), ('c#', 2), ('java', 2), ('python', 2), ('python3', 2), ('alternatives', 1), ('balance', 1), ('binary-tree', 1), ('breadth first search', 1), ('breadth-first-search', 1), ('c++ solution', 1), ('clean solution', 1), ('cpp solution', 1), ('depth-first-search', 1), ('dfs', 1), ('easy-understanding', 1), ('elegant solution', 1), ('explained', 1), ('iterative', 1), ('javascript', 1), ('level order', 1), ('list', 1), ('queue and linkedlist', 1), ('swift', 1), ('trees', 1)]"
918,Maximum Sum Circular Subarray,https://leetcode.com/problems/maximum-sum-circular-subarray,"Given a circular array C of integers represented by A, find the maximum possible sum of a non-empty subarray of C.

Here, a circular array means the end of the array connects to the beginning of the array.  (Formally, C[i] = A[i] when 0 <= i < A.length, and C[i+A.length] = C[i] when i >= 0.)

Also, a subarray may only include each element of the fixed buffer A at most once.  (Formally, for a subarray C[i], C[i+1], ..., C[j], there does not exist i <= k1, k2 <= j with k1 % A.length = k2 % A.length.)",['array'],Medium,1592,76,204334,70270,[],"[('c++', 11), ('python', 11), ('kadanes algorithm', 9), ('java', 8), ('kadanes algo', 7), ('javascript', 6), ('cpp', 5), ('dynamic-programming', 5), ('python 3', 5), ('dynamic programming', 4), ('easy-understanding', 4), ('kadane algorithm', 4), ('kadane-algorithm', 3), ('c#', 2), ('cpp solution', 2), ('easy', 2), ('easy-undestand', 2), ('golang', 2), ('java-solution', 2), ('kadane', 2), ('kadanes', 2), ('kadens algorithm', 2), ('python3', 2), ('swift', 2), ('c++ code', 1), ('clean', 1), ('commentary', 1), ('csharp', 1), ('dp', 1), ('easy to understand', 1), ('easy-solution', 1), ('easytounderstand', 1), ('efficent approach', 1), ('efficient', 1), ('expalanation', 1), ('explaination', 1), ('explained', 1), ('fast', 1), ('go', 1), ('golang-solution', 1), ('hot', 1), ('iteration', 1), ('iterative', 1), ('java 8', 1), ('java ac solution', 1), ('javascript solution', 1), ('kotlin', 1), ('lee215', 1), ('linear time', 1), ('linear-time', 1), ('logic explained', 1), ('math-solution', 1), ('memorization', 1), ('prefix sum', 1), ('prefix-sum', 1), ('rajawatbanna', 1), ('ruby', 1), ('scala', 1), ('simple', 1), ('simple clear c++ solution', 1), ('simple solution', 1), ('simplesolution', 1), ('simplest', 1), ('sum of series', 1), ('understandable', 1)]"
917,Reverse Only Letters,https://leetcode.com/problems/reverse-only-letters,"Given a string S, return the ""reversed"" string where all characters that are not a letter stay in the same place, and all letters reverse their positions.",['string'],Easy,831,44,137528,81767,[],"[('c++', 43), ('cpp', 30), ('java', 27), ('javascript', 26), ('python', 25), ('two-pointers', 20), ('python 3', 18), ('easy-understanding', 13), ('c#', 10), ('python3', 9), ('easy', 8), ('two pointers', 8), ('java-solution', 6), ('two-pointer', 6), ('2 pointers', 5), ('cpp solution', 5), ('golang', 5), ('stack', 5), ('c', 4), ('easy-undestand', 4), ('easytounderstand', 4), ('kotlin', 4), ('ruby', 4), ('swift', 4), ('beats 100', 3), ('c++ code', 3), ('easy-to-understand', 3), ('go', 3), ('javascript solution', 3), ('0ms', 2), ('ascii', 2), ('cpp easy', 2), ('easy to understand', 2), ('fast and simple', 2), ('go-solution', 2), ('golang-solution', 2), ('linear time', 2), ('list comprehension', 2), ('regex', 2), ('simple', 2), ('stack-based', 2), ('string', 2), ('#codeboy', 1), ('#easy', 1), ('#easy-understand', 1), ('#easy-understanding', 1), ('#java', 1), ('#python', 1), ('#python 3', 1), ('#reversestring', 1), ('#two-pointers', 1), ('0 ms', 1), ('0ms-solution', 1), ('1ms', 1), ('2 line', 1), ('2 pointer', 1), ('3 approaches', 1), ('3 line solution', 1), ('9 lines', 1), ('algorithms', 1), ('brute force', 1), ('c code', 1), ('c++ set', 1), ('c++11', 1), ('character array', 1), ('clean', 1), ('commented', 1), ('concise', 1), ('costant space', 1), ('cpp 100', 1), ('different solutions', 1), ('easy understanding', 1), ('easy-solition', 1), ('ecmascript', 1), ('explaination', 1), ('explanation of logic', 1), ('fast-solution', 1), ('for-loop', 1), ('generator', 1), ('generator expressions', 1), ('github', 1), ('go lang', 1), ('hashset', 1), ('help needed', 1), ('inplace', 1), ('iterative', 1), ('linear', 1), ('map', 1), ('microsoft', 1), ('on', 1), ('one pass', 1), ('one pass solution', 1), ('rajat', 1), ('readable', 1), ('regexp', 1), ('regular-expression', 1), ('reverse-string', 1), ('reverseonlyletters', 1), ('rust', 1), ('simple solution', 1), ('simple-efficient', 1), ('simple-solution', 1), ('simplest', 1), ('solution-kotlin', 1), ('spoiler', 1), ('stacks', 1), ('stl', 1), ('stl algorithms', 1), ('straight-forward', 1), ('swap-in-place', 1), ('two pointer approach', 1), ('two-pass', 1), ('unit-test', 1), ('vector', 1), ('while-loop', 1)]"
916,Word Subsets,https://leetcode.com/problems/word-subsets,"We are given two arrays A and B of words.  Each word is a string of lowercase letters.

Now, say that word b is a subset of word a if every letter in b occurs in a, including multiplicity.  For example, ""wrr"" is a subset of ""warrior"", but is not a subset of ""world"".

Now say a word a from A is universal if for every b in B, b is a subset of a. 

Return a list of all universal words in A.  You can return the words in any order.",['string'],Medium,721,107,82247,43436,[],"[('c++', 20), ('java', 12), ('python', 12), ('cpp', 11), ('counter', 9), ('python3', 8), ('c#', 7), ('hashmap', 6), ('python 3', 6), ('explained', 4), ('golang', 4), ('rust', 4), ('clean code', 3), ('cpp solution', 3), ('easy-understanding', 3), ('go', 3), ('javascript', 3), ('video-explanation', 3), ('100 faster runtime', 2), ('array', 2), ('easy-to-understand', 2), ('facebook intern', 2), ('frequency count', 2), ('java-solution', 2), ('ruby', 2), ('simple', 2), ('95 per faster', 1), ('beats 100', 1), ('c++ code', 1), ('c++ solution', 1), ('char compare', 1), ('char comparison', 1), ('clean', 1), ('clean-efficient-code', 1), ('comments added', 1), ('comments-added', 1), ('count', 1), ('count array', 1), ('counters', 1), ('cpp easy', 1), ('declarative', 1), ('dict', 1), ('dictionary', 1), ('dictonary', 1), ('discrete math', 1), ('easy', 1), ('easy to underatnd', 1), ('elegant', 1), ('elegant solution', 1), ('fast', 1), ('fast and simple', 1), ('frequencies', 1), ('frequency', 1), ('frequency array', 1), ('frequency map', 1), ('frequency table', 1), ('frequencycounting', 1), ('golang-solution', 1), ('hash table', 1), ('hashtable', 1), ('java ac solution', 1), ('javascrip', 1), ('linear time', 1), ('linq', 1), ('map', 1), ('optimisation', 1), ('performance', 1), ('raviinroorkee', 1), ('scala', 1), ('self explanatory', 1), ('simple-solution', 1), ('string', 1), ('strings', 1), ('swift', 1), ('typescript', 1), ('union and find', 1), ('vector', 1), ('wordsubsets', 1)]"
915,Partition Array into Disjoint Intervals,https://leetcode.com/problems/partition-array-into-disjoint-intervals,"Given an array A, partition it into two (contiguous) subarrays left and right so that:


	Every element in left is less than or equal to every element in right.
	left and right are non-empty.
	left has the smallest possible size.


Return the length of left after such a partitioning.  It is guaranteed that such a partitioning exists.",['array'],Medium,476,35,56391,26235,[],"[('c++', 7), ('cpp', 5), ('python', 5), ('best space complexity', 3), ('java', 3), ('python 3', 3), ('python3', 3), ('array', 2), ('c#', 2), ('dp', 2), ('explained', 2), ('javascript', 2), ('c++ code', 1), ('constant space', 1), ('disjointintervals', 1), ('dynamic-programming', 1), ('easy', 1), ('easy understanding', 1), ('easy-to-understand', 1), ('explain', 1), ('explanations', 1), ('fast-solution', 1), ('go', 1), ('implementation', 1), ('java ac solution', 1), ('java-solution', 1), ('javascript solution', 1), ('memoization', 1), ('one iteration', 1), ('one-pass', 1), ('partitionarray', 1), ('pointer', 1), ('python3.8', 1), ('rust', 1), ('simple clear c++ solution', 1), ('simple solution', 1), ('single traversal', 1), ('step by step', 1)]"
914,X of a Kind in a Deck of Cards,https://leetcode.com/problems/x-of-a-kind-in-a-deck-of-cards,"In a deck of cards, each card has an integer written on it.

Return true if and only if you can choose X >= 2 such that it is possible to split the entire deck into 1 or more groups of cards, where:


	Each group has exactly X cards.
	All the cards in each group have the same integer.","['array', 'math']",Easy,808,211,191090,64805,[],"[('c++', 18), ('gcd', 16), ('python', 14), ('cpp', 13), ('python 3', 13), ('javascript', 9), ('python3', 9), ('java', 7), ('easy-understanding', 5), ('c#', 4), ('cpp solution', 4), ('golang', 4), ('hashmap', 4), ('map', 4), ('simple solution', 3), ('c++ solution', 2), ('c++11', 2), ('collections', 2), ('hash table', 2), ('js javascript', 2), ('kotlin', 2), ('one line', 2), ('python2', 2), ('ruby', 2), ('simple', 2), ('swift', 2), ('unorderedmap', 2), ('1-line', 1), ('95 per faster', 1), ('aggregation', 1), ('beats-100', 1), ('begginer', 1), ('beginner friendly', 1), ('best', 1), ('brute force', 1), ('bucket', 1), ('buckets', 1), ('c', 1), ('c++ code', 1), ('c++ easy solution', 1), ('c++ hash', 1), ('c++14', 1), ('clean code', 1), ('clean-code', 1), ('comment', 1), ('comments added', 1), ('common divisor', 1), ('counter', 1), ('deck-of-cards', 1), ('dict', 1), ('dictionary', 1), ('easiest', 1), ('easy-solition', 1), ('easy-undestand', 1), ('euclidean', 1), ('euclidean algorithm', 1), ('explain', 1), ('explanations', 1), ('explanatory comments', 1), ('fast-solution', 1), ('fastest', 1), ('functional', 1), ('functools', 1), ('good variable names', 1), ('hash', 1), ('java solution', 1), ('javascript solution', 1), ('javascriptes6', 1), ('js', 1), ('linear time', 1), ('linq', 1), ('maps', 1), ('math', 1), ('one-liner', 1), ('optimisation', 1), ('performance', 1), ('prime factorization', 1), ('rajawatbanna', 1), ('rust', 1), ('short c++ code', 1), ('solution', 1), ('step by step explanation', 1), ('structured code', 1), ('testcase-missing', 1), ('typescript', 1), ('understandable', 1), ('unordered map', 1), ('unordermap', 1), ('works-on-my-machine', 1), ('wrong answer', 1), ('wrong output', 1), ('wrong test case', 1)]"
913,Cat and Mouse,https://leetcode.com/problems/cat-and-mouse,"A game on an undirected graph is played by two players, Mouse and Cat, who alternate turns.

The graph is given as follows: graph[a] is a list of all nodes b such that ab is an edge of the graph.

The mouse starts at node 1 and goes first, the cat starts at node 2 and goes second, and there is a hole at node 0.

During each player's turn, they must travel along one edge of the graph that meets where they are.  For example, if the Mouse is at node 1, it must travel to any node in graph[1].

Additionally, it is not allowed for the Cat to travel to the Hole (node 0.)

Then, the game can end in three ways:


	If ever the Cat occupies the same node as the Mouse, the Cat wins.
	If ever the Mouse reaches the Hole, the Mouse wins.
	If ever a position is repeated (i.e., the players are in the same position as a previous turn, and it is the same player's turn to move), the game is a draw.


Given a graph, and assuming both players play optimally, return


	1 if the mouse wins the game,
	2 if the cat wins the game, or
	0 if the game is a draw.","['breadth-first-search', 'minimax']",Hard,451,90,33615,11729,"[""Cat and Mouse II""]","[('dp', 2), ('minimax', 2), ('bellman-ford', 1), ('bfs', 1), ('c++', 1), ('dfs', 1), ('dfs recursive', 1), ('javascript', 1), ('memoziation', 1), ('python 3', 1), ('python3', 1), ('simulation', 1)]"
912,Sort an Array,https://leetcode.com/problems/sort-an-array,"Given an array of integers nums, sort the array in ascending order.",[],Medium,830,370,223751,144177,[],"[('javascript', 28), ('java', 26), ('merge-sort', 26), ('quick sort', 25), ('c++', 24), ('merge sort', 23), ('python', 16), ('cpp', 12), ('mergesort', 12), ('counting-sort', 10), ('quick-sort', 10), ('heapsort', 9), ('python 3', 9), ('python3', 9), ('sorting', 9), ('c#', 8), ('c', 7), ('quicksort', 7), ('sort', 7), ('java-solution', 4), ('recursion', 4), ('swift', 4), ('cpp solution', 3), ('detailed explanation', 3), ('go', 3), ('golang', 3), ('insertion sort', 3), ('quicksort-partition', 3), ('radix-sort', 3), ('solution', 3), ('array', 2), ('beautiful', 2), ('bottom-up', 2), ('bottom-up-algorithm', 2), ('bubble-sort', 2), ('c code', 2), ('c++ code', 2), ('c++11', 2), ('comparison-sort', 2), ('dutch-national-flag', 2), ('easy', 2), ('easy-understand', 2), ('easy-understanding', 2), ('heap', 2), ('heap-sort', 2), ('iterative', 2), ('java ac solution', 2), ('oneline', 2), ('selection sort', 2), ('#java #easy-understand', 1), ('3-way quicksort', 1), ('3ways', 1), ('array-sort', 1), ('arrays', 1), ('awesome samriddhi', 1), ('bubble sort', 1), ('bucket sort', 1), ('bucket-sort', 1), ('c++ quick sort', 1), ('c++ recursive solution', 1), ('c++ solution', 1), ('c++-easy', 1), ('constant space', 1), ('constant-space', 1), ('cpp doubt', 1), ('cpp easy', 1), ('divide and conquer', 1), ('divide-and-conquer', 1), ('easy to understand', 1), ('easy-undestand', 1), ('easysolution', 1), ('explaination', 1), ('go-solution', 1), ('hashmap', 1), ('heap sort', 1), ('heapify', 1), ('hoare', 1), ('how merge sort works', 1), ('images', 1), ('in-place', 1), ('inplace', 1), ('iterator', 1), ('iterators', 1), ('js', 1), ('js javascript', 1), ('kotlinvim', 1), ('meiyaowen', 1), ('merge', 1), ('merge sort visualization', 1), ('merge sorted', 1), ('merge sorted array', 1), ('merge-sorted-array', 1), ('merged', 1), ('nlogn', 1), ('partition', 1), ('pictures', 1), ('pivot', 1), ('readable', 1), ('recursive', 1), ('recusion', 1), ('ritik', 1), ('ruby', 1), ('rust', 1), ('selection', 1), ('shell-sort', 1), ('shellsort', 1), ('short', 1), ('simple', 1), ('slice notation', 1), ('solution-csharp', 1), ('sort-function', 1), ('sorting algorithms', 1), ('sorting-algorithms', 1), ('stacks', 1), ('stl', 1), ('tle', 1), ('tle cases', 1), ('top-down', 1), ('tutorial', 1), ('video explaination', 1)]"
911,Online Election,https://leetcode.com/problems/online-election,"In an election, the i-th vote was cast for persons[i] at time times[i].

Now, we would like to implement the following query function: TopVotedCandidate.q(int t) will return the number of the person that was leading the election at time t.  

Votes cast at time t will count towards our query.  In the case of a tie, the most recent vote (among tied candidates) wins.",['binary-search'],Medium,471,396,59741,30758,"[""Rank Teams by Votes""]","[('binary search', 7), ('binary-search', 7), ('java', 6), ('c++', 4), ('python', 4), ('explained', 3), ('hashmap', 3), ('python 3', 3), ('hash table', 2), ('javascript', 2), ('lower-bound', 2), ('python3', 2), ('treemap', 2), ('binary search tree', 1), ('binarysearch', 1), ('binarysearh', 1), ('c', 1), ('c#', 1), ('caching', 1), ('cpp', 1), ('cpp solution', 1), ('diagram', 1), ('easy-understanding', 1), ('explanation', 1), ('explanation of logic', 1), ('explanations', 1), ('frequencycounting', 1), ('java-solution', 1), ('map', 1), ('map-stl', 1), ('pre-process', 1), ('priority-queue', 1), ('pythonic', 1), ('simple', 1), ('stl', 1), ('upperbound', 1)]"
910,Smallest Range II,https://leetcode.com/problems/smallest-range-ii,"Given an array A of integers, for each integer A[i] we need to choose either x = -K or x = K, and add x to A[i] (only once).

After this process, we have some array B.

Return the smallest possible difference between the maximum value of B and the minimum value of B.","['math', 'greedy']",Medium,676,286,81745,25537,[],"[('golang', 6), ('python', 5), ('c++', 4), ('go', 4), ('golang-solution', 4), ('cpp', 3), ('easy-understanding', 3), ('explained', 3), ('go-solution', 2), ('java', 2), ('python 3', 2), ('python3', 2), ('video-explanation', 2), ('c#', 1), ('cpp solution', 1), ('diagrams', 1), ('explained solution', 1), ('explanations', 1), ('intervals', 1), ('javascript solution', 1), ('linear scan', 1), ('linear space', 1), ('linear time', 1), ('linear-time', 1), ('memory', 1), ('nlogn time', 1), ('optimal', 1), ('pictorial', 1), ('pythonpython3', 1), ('recursion', 1), ('ruby', 1), ('solution by python', 1), ('solution-python', 1), ('sort', 1), ('swift', 1), ('ting', 1), ('unordered map', 1), ('video', 1)]"
909,Snakes and Ladders,https://leetcode.com/problems/snakes-and-ladders,"On an N x N board, the numbers from 1 to N*N are written boustrophedonically starting from the bottom left of the board, and alternating direction each row.  For example, for a 6 x 6 board, the numbers are written as follows:





You start on square 1 of the board (which is always in the last row and first column).  Each move, starting from square x, consists of the following:


	You choose a destination square S with number x+1, x+2, x+3, x+4, x+5, or x+6, provided this number is <= N*N.

	
		(This choice simulates the result of a standard 6-sided die roll: ie., there are always at most 6 destinations, regardless of the size of the board.)
	
	
	If S has a snake or ladder, you move to the destination of that snake or ladder.  Otherwise, you move to S.


A board square on row r and column c has a ""snake or ladder"" if board[r][c] != -1.  The destination of that snake or ladder is board[r][c].

Note that you only take a snake or ladder at most once per move: if the destination to a snake or ladder is the start of another snake or ladder, you do not continue moving.  (For example, if the board is `[[4,-1],[-1,3]]`, and on the first move your destination square is `2`, then you finish your first move at `3`, because you do not continue moving to `4`.)

Return the least number of moves required to reach square N*N.  If it is not possible, return -1.",['breadth-first-search'],Medium,591,1139,120330,47253,[],"[('bfs', 27), ('c++', 6), ('cpp', 5), ('java', 5), ('breadth first search', 4), ('easy-understanding', 4), ('python', 4), ('python 3', 4), ('test-cases', 4), ('breadth-first-search', 2), ('c#', 2), ('c++ code', 2), ('explained', 2), ('graph', 2), ('javascript', 2), ('queue', 2), ('bfs python', 1), ('breath first search', 1), ('c++11', 1), ('cpp solution', 1), ('diagram', 1), ('dijkstra', 1), ('dp', 1), ('dynamic programming', 1), ('easy to understand', 1), ('easy-to-understand', 1), ('efficient', 1), ('examples', 1), ('explanation', 1), ('fast', 1), ('golang', 1), ('golang-solution', 1), ('graphs', 1), ('hash table', 1), ('java-solution', 1), ('ladder', 1), ('matrix', 1), ('priority queue', 1), ('pyhton', 1), ('python3', 1), ('snake', 1), ('swift', 1), ('swiftsolution', 1), ('trick', 1), ('weak-tests', 1), ('wrong answer', 1)]"
908,Smallest Range I,https://leetcode.com/problems/smallest-range-i,"Given an array A of integers, for each integer A[i] we may choose any x with -K <= x <= K, and add x to A[i].

After this process, we have some array B.

Return the smallest possible difference between the maximum value of B and the minimum value of B.",['math'],Easy,311,1329,74767,49668,[],"[('c++', 15), ('java', 10), ('python 3', 9), ('python', 8), ('cpp', 5), ('javascript', 5), ('math', 4), ('python3', 4), ('explaination', 3), ('ruby', 3), ('c#', 2), ('easy-understanding', 2), ('easytounderstand', 2), ('es6', 2), ('explanation', 2), ('golang', 2), ('java-solution', 2), ('one-liner', 2), ('simple solution', 2), ('1 line', 1), ('algorithms', 1), ('array', 1), ('beginnerfriendly', 1), ('c', 1), ('c++ code', 1), ('clearfication', 1), ('commented', 1), ('cpp solution', 1), ('diagram', 1), ('easy', 1), ('easy java solution', 1), ('easy to understand', 1), ('easy-peasy', 1), ('fast-solution', 1), ('give stars and subscribe', 1), ('go', 1), ('gorillaz', 1), ('helpful', 1), ('induction', 1), ('javascript solution', 1), ('js', 1), ('linq', 1), ('min-max', 1), ('one-pass', 1), ('oneline', 1), ('php', 1), ('proof', 1), ('pythonic', 1), ('questionhelp', 1), ('simple', 1), ('simple-solution', 1), ('stl algorithms', 1), ('swift', 1), ('test-cases', 1), ('visualization', 1)]"
907,Sum of Subarray Minimums,https://leetcode.com/problems/sum-of-subarray-minimums,"Given an array of integers arr, find the sum of min(b), where b ranges over every (contiguous) subarray of arr. Since the answer may be large, return the answer modulo 109 + 7.","['array', 'stack']",Medium,1937,123,120511,39858,[],"[('c++', 7), ('stack', 7), ('java', 6), ('golang', 5), ('cpp', 3), ('golang-solution', 3), ('javascript', 3), ('bruteforce', 2), ('clean code', 2), ('explanation of logic', 2), ('linear memory', 2), ('monotonic stack', 2), ('python', 2), ('python 3', 2), ('stacks', 2), ('time-limit-exceeded', 2), ('2 stack', 1), ('comments', 1), ('divide and conquer', 1), ('dp', 1), ('dynamic programming', 1), ('easy-understanding', 1), ('easy-undestand', 1), ('easytounderstand', 1), ('iterative', 1), ('java-solution', 1), ('linear', 1), ('linear time', 1), ('monotone stack', 1), ('python3', 1), ('readability', 1), ('segment tree', 1), ('similar-problems', 1), ('stack-based', 1), ('subarray', 1), ('video-explanation', 1), ('wrong-test-cases', 1)]"
906,Super Palindromes,https://leetcode.com/problems/super-palindromes,"Let's say a positive integer is a super-palindrome if it is a palindrome, and it is also the square of a palindrome.

Given two positive integers left and right represented as strings, return the number of super-palindromes integers in the inclusive range [left, right].",['math'],Hard,101,176,20164,6562,[],"[('c++', 2), ('cpp', 2), ('c#', 1), ('comments-added', 1), ('explained', 1), ('fastest', 1), ('java', 1), ('javascript', 1), ('js', 1), ('math', 1), ('python', 1), ('python3', 1), ('rust', 1), ('string-slice', 1)]"
905,Sort Array By Parity,https://leetcode.com/problems/sort-array-by-parity,"Given an array A of non-negative integers, return an array consisting of all the even elements of A, followed by all the odd elements of A.

You may return any answer array that satisfies this condition.",['array'],Easy,1678,90,427458,320479,[],"[('java', 69), ('python', 56), ('c++', 51), ('python 3', 48), ('javascript', 47), ('easy-understanding', 43), ('two-pointers', 35), ('java-solution', 33), ('cpp', 30), ('python3', 29), ('easy', 13), ('inplace', 13), ('golang', 12), ('in-place', 12), ('c#', 9), ('simple solution', 9), ('cpp solution', 8), ('explained', 8), ('one-liner', 8), ('cpp easy', 7), ('easy-to-understand', 7), ('fast-solution', 7), ('parity', 7), ('simple', 7), ('array', 6), ('c', 6), ('1ms', 5), ('arrays', 5), ('easytounderstand', 5), ('in place', 5), ('one pass solution', 5), ('swap', 5), ('swift', 5), ('easy to understand', 4), ('easy-undestand', 4), ('go', 4), ('js', 4), ('kotlin', 4), ('rust', 4), ('sort', 4), ('swap-in-place', 4), ('two pointers', 4), ('two-pointer', 4), ('typescript', 4), ('2 pointers', 3), ('brute force', 3), ('fast and simple', 3), ('javascript solution', 3), ('linear time', 3), ('python2', 3), ('ruby', 3), ('sort array by parity', 3), ('sorting', 3), ('twopointer', 3), ('100 space', 2), ('1ms runtime', 2), ('98faster', 2), ('c++ code', 2), ('c++ solution', 2), ('c++14', 2), ('cpp-solution', 2), ('deque', 2), ('easiest', 2), ('easy understanding', 2), ('easy-understand', 2), ('efficient', 2), ('es6', 2), ('explanation', 2), ('fastest', 2), ('golang-solution', 2), ('iteration', 2), ('list', 2), ('o1 space', 2), ('one line', 2), ('one pass', 2), ('optimal', 2), ('pythonpython3', 2), ('reduce', 2), ('sort-by-parity', 2), ('sorted array', 2), ('swap value', 2), ('swapping', 2), ('two pointer technique', 2), ('#codegirl', 1), ('#python', 1), ('0ms', 1), ('1 ms', 1), ('100', 1), ('100 bst', 1), ('100 faster cpp', 1), ('100 memory', 1), ('100 speed', 1), ('3 liner', 1), ('3-liner', 1), ('85faster', 1), ('905', 1), ('99.5 faster', 1), ('algorithms', 1), ('array-sort', 1), ('arraylist', 1), ('basic', 1), ('beginner friendly', 1), ('bitwise', 1), ('brutal force optmized', 1), ('bug report', 1), ('c code', 1), ('c programming', 1), ('c++ iterative sol', 1), ('c++code', 1), ('clean code', 1), ('commentary', 1), ('commented', 1), ('comments', 1), ('comments added', 1), ('concat', 1), ('concise', 1), ('cpp clear', 1), ('cpp with explanation', 1), ('dutch-national-flag', 1), ('easy sloution', 1), ('easysolution', 1), ('efficient solution', 1), ('even', 1), ('even odd', 1), ('expalanation', 1), ('explanation of logic', 1), ('fast', 1), ('faster', 1), ('faster than 100', 1), ('filter', 1), ('for loop', 1), ('for-loop', 1), ('foreach', 1), ('fp', 1), ('functional', 1), ('functional programming', 1), ('functional-programming', 1), ('generator expressions', 1), ('go-solution', 1), ('in-place operation', 1), ('ios', 1), ('iterative', 1), ('java ac solution', 1), ('javascipt', 1), ('javascrip', 1), ('lambda expresses', 1), ('lambda expression', 1), ('lambda function', 1), ('linear-time', 1), ('linq', 1), ('list-comprehension', 1), ('logic', 1), ('loops', 1), ('memory efficient', 1), ('modern cpp', 1), ('mrmagician', 1), ('must-do', 1), ('no extra space', 1), ('odd', 1), ('oddeven', 1), ('one pointer', 1), ('one-pass', 1), ('oneline', 1), ('oneliner', 1), ('optimized', 1), ('optimum', 1), ('partition', 1), ('php', 1), ('php solution', 1), ('pointers', 1), ('python3.8', 1), ('pythonic', 1), ('queue', 1), ('quick sort', 1), ('quicksort', 1), ('short code', 1), ('simpe', 1), ('simple c code', 1), ('simple clear c++ solution', 1), ('simple python accepted', 1), ('simplesolution', 1), ('simplest', 1), ('slow', 1), ('solution', 1), ('solution-sharing-cpp', 1), ('sort-function', 1), ('space o1', 1), ('space optimized', 1), ('stacks', 1), ('straight forward', 1), ('swift5', 1), ('three pointers', 1), ('time-complexity-o', 1), ('two pointer', 1), ('two pointer approach', 1), ('two-poinnters', 1), ('understandable', 1), ('upvote', 1), ('very easy to understand', 1), ('video', 1), ('video solution', 1), ('video-explanation', 1), ('visualization', 1), ('with-explanation', 1)]"
904,Fruit Into Baskets,https://leetcode.com/problems/fruit-into-baskets,"In a row of trees, the i-th tree produces fruit with type tree[i].

You start at any tree of your choice, then repeatedly perform the following steps:


	Add one piece of fruit from this tree to your baskets.  If you cannot, stop.
	Move to the next tree to the right of the current tree.  If there is no tree to the right, stop.


Note that you do not have any choice after the initial choice of starting tree: you must perform step 1, then step 2, then back to step 1, then step 2, and so on until you stop.

You have two baskets, and each basket can carry any quantity of fruit, but you want each basket to only carry one type of fruit each.

What is the total amount of fruit you can collect with this procedure?",['two-pointers'],Medium,1186,1706,306055,131722,[],"[('sliding-window', 25), ('slidingwindow', 18), ('c++', 14), ('python', 13), ('java', 12), ('cpp', 11), ('hashmap', 10), ('python 3', 8), ('java-solution', 7), ('2 pointers', 5), ('two-pointers', 5), ('c#', 3), ('easy-to-understand', 3), ('javascript', 3), ('linear time', 3), ('python3', 3), ('simple', 3), ('sliding window', 3), ('deque', 2), ('easy', 2), ('easy undestanding', 2), ('easy-undestand', 2), ('kotlin', 2), ('10 liner', 1), ('2-pointers', 1), ('array', 1), ('big o of n', 1), ('c++ code', 1), ('clean code', 1), ('constant space', 1), ('counter', 1), ('cpp solution', 1), ('detailed explanation', 1), ('dictionary c#', 1), ('dp', 1), ('dynamic programming', 1), ('easy understand', 1), ('easy understanding', 1), ('easysolution', 1), ('easytounderstand', 1), ('explaination', 1), ('explanation', 1), ('fast and simple', 1), ('fast-solution', 1), ('fruitintobaskets', 1), ('golang', 1), ('golang-solution', 1), ('google', 1), ('google interview', 1), ('google-phone-interview', 1), ('hash map', 1), ('java solution', 1), ('javascript solution', 1), ('js', 1), ('js javascript', 1), ('linear', 1), ('linear-time-space', 1), ('one pass', 1), ('ordered-dict', 1), ('ordereddict', 1), ('pattern-based', 1), ('pointer', 1), ('problem patterns', 1), ('queue', 1), ('short code', 1), ('subarray', 1), ('super-easy', 1), ('swift', 1), ('two pointers', 1), ('two-pointer method', 1), ('twopointer', 1)]"
903,Valid Permutations for DI Sequence,https://leetcode.com/problems/valid-permutations-for-di-sequence,"We are given S, a length n string of characters from the set {'D', 'I'}. (These letters stand for ""decreasing"" and ""increasing"".)

A valid permutation is a permutation P[0], P[1], ..., P[n] of integers {0, 1, ..., n}, such that for all i:


	If S[i] == 'D', then P[i] > P[i+1], and;
	If S[i] == 'I', then P[i] < P[i+1].


How many valid permutations are there?  Since the answer may be large, return your answer modulo 10^9 + 7.","['divide-and-conquer', 'dynamic-programming']",Hard,355,31,15286,8323,[],"[('divide and conquer', 1), ('dynamic programming', 1), ('pyhton3', 1), ('python', 1)]"
902,Numbers At Most N Given Digit Set,https://leetcode.com/problems/numbers-at-most-n-given-digit-set,"Given an array of digits which is sorted in non-decreasing order. You can write numbers using each digits[i] as many times as we want. For example, if digits = ['1','3','5'], we may write numbers such as '13', '551', and '1351315'.

Return the number of positive integers that can be generated that are less than or equal to a given integer n.","['math', 'dynamic-programming']",Hard,505,68,56533,20419,[],"[('c++', 9), ('math', 6), ('fast', 4), ('python', 4), ('python 3', 4), ('100 speed', 3), ('c#', 3), ('cpp', 3), ('dfs', 3), ('explained', 3), ('java', 3), ('javascript', 3), ('100 memory', 2), ('digit dp', 2), ('dynamic programming', 2), ('easy', 2), ('java-solution', 2), ('javascript solution', 2), ('php', 2), ('recurision', 2), ('recursion', 2), ('0ms', 1), ('100 space', 1), ('beats 100', 1), ('bfs', 1), ('c++ code', 1), ('commented', 1), ('cpp solution', 1), ('dp', 1), ('easy-to-understand', 1), ('explanations', 1), ('fastest', 1), ('fastest java slution', 1), ('fastest solution', 1), ('go-solution', 1), ('golang', 1), ('golang-solution', 1), ('graph theory', 1), ('heap', 1), ('hints', 1), ('java ac solution', 1), ('javascript recursive', 1), ('math solution', 1), ('php solution', 1), ('recursive', 1), ('recursive approach', 1), ('ruby', 1), ('rust', 1), ('simple', 1), ('swift', 1), ('video explanation', 1), ('with documentation', 1)]"
901,Online Stock Span,https://leetcode.com/problems/online-stock-span,"Write a class StockSpanner which collects daily price quotes for some stock, and returns the span of that stock's price for the current day.

The span of the stock's price today is defined as the maximum number of consecutive days (starting from today and going backwards) for which the price of the stock was less than or equal to today's price.

For example, if the price of a stock over the next 7 days were [100, 80, 60, 70, 60, 75, 85], then the stock spans would be [1, 1, 1, 2, 1, 4, 6].",['stack'],Medium,1441,164,145747,89704,[],"[('c++', 22), ('stack', 20), ('stacks', 19), ('java', 12), ('cpp', 11), ('python 3', 10), ('cpp solution', 7), ('monotone stack', 7), ('c#', 6), ('javascript', 6), ('python', 6), ('golang', 5), ('stack-based', 5), ('easy-understanding', 4), ('vector', 4), ('go', 3), ('idiomatic', 3), ('linear time', 3), ('monotonic stack', 3), ('python3', 3), ('array', 2), ('cpp easy', 2), ('hashmap', 2), ('java-solution', 2), ('no stack', 2), ('scala', 2), ('simple solution', 2), ('accepted solution', 1), ('another way', 1), ('beginner friendly', 1), ('binary search', 1), ('binary-search', 1), ('c# solutions', 1), ('c++ code', 1), ('c++11', 1), ('c++17', 1), ('clear', 1), ('counter', 1), ('csharp', 1), ('cumulative sum', 1), ('easy', 1), ('easy to understand', 1), ('easy-to-understand', 1), ('explained', 1), ('explanation with code', 1), ('explanations4problem', 1), ('fast', 1), ('golang solution', 1), ('help', 1), ('iterator', 1), ('linear memory', 1), ('list', 1), ('map', 1), ('memory-efficient', 1), ('monotone queue', 1), ('nearest-neighbor', 1), ('o n', 1), ('optimal', 1), ('pair', 1), ('ruby', 1), ('rust', 1), ('tricky', 1), ('union find', 1)]"
900,RLE Iterator,https://leetcode.com/problems/rle-iterator,"Write an iterator that iterates through a run-length encoded sequence.

The iterator is initialized by RLEIterator(int[] A), where A is a run-length encoding of some sequence.  More specifically, for all even i, A[i] tells us the number of times that the non-negative integer value A[i+1] is repeated in the sequence.

The iterator supports one function: next(int n), which exhausts the next n elements (n >= 1) and returns the last element exhausted in this way.  If there is no element left to exhaust, next returns -1 instead.

For example, we start with A = [3,8,0,9,2,5], which is a run-length encoding of the sequence [8,8,8,5,5].  This is because the sequence can be read as ""three eights, zero nines, two fives"".",['array'],Medium,340,101,56885,31761,[],"[('c++', 7), ('python', 5), ('cpp', 4), ('java', 4), ('python 3', 3), ('python3', 3), ('recursion', 3), ('beating-100-submission', 2), ('c#', 2), ('javascript', 2), ('#100faster', 1), ('#fasterthan100percent', 1), ('0ms', 1), ('algorithms', 1), ('c', 1), ('clean code', 1), ('conditions', 1), ('cpp easy', 1), ('deque', 1), ('dummy-friendly', 1), ('easy-to-understand', 1), ('easy-understanding', 1), ('efficient approach', 1), ('effiecinet', 1), ('elegant', 1), ('elegant solution', 1), ('example based solution', 1), ('explain', 1), ('explained', 1), ('fast', 1), ('iteration', 1), ('kotlin', 1), ('linear', 1), ('map in c++', 1), ('pointer', 1), ('python2', 1), ('recursive', 1), ('ruby', 1), ('simple', 1), ('solution-python', 1), ('swift', 1), ('verbose', 1)]"
899,Orderly Queue,https://leetcode.com/problems/orderly-queue,"A string S of lowercase letters is given.  Then, we may make any number of moves.

In each move, we choose one of the first K letters (starting from the left), remove it, and place it at the end of the string.

Return the lexicographically smallest string we could have after any number of moves.","['math', 'string']",Hard,257,227,17923,9586,[],"[('java', 3), ('100 memory', 2), ('wrong-test-cases', 2), ('100 beat', 1), ('100 space', 1), ('100 speed', 1), ('1ms', 1), ('best time complexity', 1), ('bubble-sort', 1), ('c++ code', 1), ('clean code', 1), ('compare-function', 1), ('cpp solution', 1), ('explanation with logic', 1), ('fast', 1), ('fast-solution', 1), ('golang', 1), ('javascript', 1), ('js', 1), ('python', 1), ('readable code', 1), ('rotate', 1), ('sort-function', 1), ('test-case', 1)]"
898,Bitwise ORs of Subarrays,https://leetcode.com/problems/bitwise-ors-of-subarrays,"We have an array arr of non-negative integers.

For every (contiguous) subarray sub = [arr[i], arr[i + 1], ..., arr[j]] (with i <= j), we take the bitwise OR of all the elements in sub, obtaining a result arr[i] | arr[i + 1] | ... | arr[j].

Return the number of possible results. Results that occur more than once are only counted once in the final answer","['dynamic-programming', 'bit-manipulation']",Medium,687,143,56767,19587,[],"[('c++', 2), ('python 3', 2), ('100 speed', 1), ('c#', 1), ('golang', 1), ('hashmap', 1), ('javascript', 1), ('python3', 1), ('ruby', 1), ('simple clear c++ solution', 1)]"
897,Increasing Order Search Tree,https://leetcode.com/problems/increasing-order-search-tree,"Given the root of a binary search tree, rearrange the tree in in-order so that the leftmost node in the tree is now the root of the tree, and every node has no left child and only one right child.","['tree', 'depth-first-search', 'recursion']",Easy,1375,532,165067,123269,[],"[('c++', 33), ('inorder traversal', 29), ('python', 25), ('java', 24), ('python 3', 24), ('recursion', 23), ('cpp', 21), ('inorder-traversal', 19), ('javascript', 19), ('inorder', 18), ('dfs', 12), ('iterative', 11), ('java-solution', 11), ('golang', 9), ('python3', 7), ('binary search tree', 5), ('explained', 5), ('binary-tree', 4), ('c#', 4), ('cpp solution', 4), ('fast and simple', 4), ('in-order-traversal', 4), ('queue', 4), ('recursive', 4), ('relinking', 4), ('stack', 4), ('tree-traversal', 4), ('trees', 4), ('typescript', 4), ('binary-search-tree', 3), ('bst', 3), ('c', 3), ('c++ code', 3), ('dfs-in-order', 3), ('easy-to-understand', 3), ('easy-understanding', 3), ('golang-solution', 3), ('inorder iterative', 3), ('rust', 3), ('inordertraversal', 2), ('inordertraverse', 2), ('iterative-dfs', 2), ('java-8', 2), ('left-first-research', 2), ('morris traversal', 2), ('morris-inorder-traversal', 2), ('recursive easy', 2), ('recursive solution', 2), ('recusion', 2), ('ruby', 2), ('simple solution', 2), ('swift', 2), ('tree traversal', 2), ('0ms', 1), ('95 per faster', 1), ('beginner', 1), ('beginner friendly', 1), ('bfs', 1), ('c++ solution', 1), ('clean', 1), ('clean solution', 1), ('commented', 1), ('comments', 1), ('constant memory', 1), ('crispygang', 1), ('csharp', 1), ('depth-first-search', 1), ('dfs traversal', 1), ('dfs-bottomup', 1), ('dfs-iterative', 1), ('dfs-recursive', 1), ('dumb solution', 1), ('dummy-node', 1), ('easy sloution', 1), ('easy to understand', 1), ('easy-undestand', 1), ('easytounderstand', 1), ('explain', 1), ('explanation of logic', 1), ('fast', 1), ('fast-solution', 1), ('faster than 95.8', 1), ('fastest solution', 1), ('fifo', 1), ('generators', 1), ('go', 1), ('go-solution', 1), ('graph theory', 1), ('help needed', 1), ('in order', 1), ('in-order', 1), ('in-place', 1), ('increasing-order-search', 1), ('increasingordersearchtree', 1), ('inorder recursive', 1), ('iteration', 1), ('itereative', 1), ('java ac solution', 1), ('javascript recursive', 1), ('javascript solution', 1), ('kotlin', 1), ('linear', 1), ('linear time', 1), ('morris-traversal', 1), ('naive', 1), ('no global variable', 1), ('non-recursion', 1), ('non-recursive', 1), ('pass by reference', 1), ('pyhton 3', 1), ('python2', 1), ('python3.8', 1), ('reccursion', 1), ('recurision', 1), ('recursively', 1), ('references', 1), ('simpe', 1), ('simple', 1), ('simplesolution', 1), ('simplest', 1), ('single pass', 1), ('sorted array', 1), ('sorting', 1), ('stacks', 1), ('swift5', 1), ('traversal tree', 1), ('traverse-a-tree', 1), ('type script', 1), ('typescript javascript', 1), ('vector', 1), ('video explanation', 1), ('yield-from', 1)]"
896,Monotonic Array,https://leetcode.com/problems/monotonic-array,"An array is monotonic if it is either monotone increasing or monotone decreasing.

An array A is monotone increasing if for all i <= j, A[i] <= A[j].  An array A is monotone decreasing if for all i <= j, A[i] >= A[j].

Return true if and only if the given array A is monotonic.",['array'],Easy,980,42,259356,150263,[],"[('java', 40), ('python', 27), ('javascript', 23), ('c++', 21), ('python 3', 21), ('python3', 17), ('easy-understanding', 16), ('cpp', 14), ('java-solution', 14), ('easy', 6), ('array', 5), ('c#', 4), ('one-liner', 4), ('c', 3), ('easy to understand', 3), ('easy-undestand', 3), ('golang', 3), ('js', 3), ('monotonicarray', 3), ('simple solution', 3), ('commented', 2), ('cpp easy', 2), ('cpp solution', 2), ('easy undestanding', 2), ('easytounderstand', 2), ('explained', 2), ('javascript solution', 2), ('linear time', 2), ('monotonic array', 2), ('one pass solution', 2), ('onepass', 2), ('python2', 2), ('simple clear c++ solution', 2), ('swift', 2), ('#codegirl', 1), ('#python', 1), ('1-line', 1), ('10 lines', 1), ('100 memory', 1), ('100 space', 1), ('100 speed', 1), ('ac solution', 1), ('arrays', 1), ('beginners level', 1), ('better', 1), ('c# solutions', 1), ('c++ code', 1), ('clean code', 1), ('different approach', 1), ('easy peasy', 1), ('easy to code', 1), ('easy to underatnd', 1), ('easysolution', 1), ('efficient', 1), ('expalanation', 1), ('facebook', 1), ('fast', 1), ('faster', 1), ('fastest', 1), ('functional programming', 1), ('generator expressions', 1), ('golang-solution', 1), ('java simple solution', 1), ('java-8', 1), ('javascrip', 1), ('kotlinvim', 1), ('linear', 1), ('list', 1), ('list comprehension', 1), ('logic', 1), ('logical thinking', 1), ('mrmagician', 1), ('one liner', 1), ('one pass', 1), ('one-loop', 1), ('one-pass', 1), ('oneline', 1), ('optimal', 1), ('readable', 1), ('reverse list', 1), ('ruby', 1), ('rust', 1), ('scala', 1), ('simple', 1), ('simple c code', 1), ('simple-solution', 1), ('simplesolution', 1), ('single line', 1), ('smallest', 1), ('solved', 1), ('sorted array', 1), ('straight forward', 1), ('ternary-operator', 1), ('trick', 1), ('two pass', 1), ('understandable', 1), ('upvote', 1), ('video', 1), ('youtube', 1)]"
895,Maximum Frequency Stack,https://leetcode.com/problems/maximum-frequency-stack,"Design a stack-like data structure to push elements to the stack and pop the most frequent element from the stack.

Implement the FreqStack class:


	FreqStack() constructs an empty frequency stack.
	void push(int val) pushes an integer val onto the top of the stack.
	int pop() removes and returns the most frequent element in the stack.
	
		If there is a tie for the most frequent element, the element closest to the stack's top is removed and returned.","['hash-table', 'stack']",Hard,1810,37,107615,68119,[],"[('c++', 23), ('stack', 21), ('hashmap', 16), ('java', 13), ('cpp', 12), ('python', 11), ('javascript', 10), ('map', 9), ('priority queue', 7), ('stacks', 6), ('c#', 5), ('python 3', 5), ('dict', 4), ('easy-to-understand', 4), ('easy', 3), ('easy-understanding', 3), ('explained', 3), ('heap', 3), ('java-solution', 3), ('ruby', 3), ('unordered map', 3), ('video-explanation', 3), ('constant-time', 2), ('dictionary c#', 2), ('easy-undestand', 2), ('fastest', 2), ('golang', 2), ('hash table', 2), ('heapq', 2), ('python3', 2), ('simple', 2), ('simple solution', 2), ('swift', 2), ('unorderedmap', 2), ('vector', 2), ('video explanation', 2), ('visualization', 2), ('beginner friendly', 1), ('c', 1), ('c++ code', 1), ('clean code', 1), ('comparator', 1), ('constant-space', 1), ('counter', 1), ('defaultdict', 1), ('dictionary', 1), ('dictonary', 1), ('dumb', 1), ('easy-understand', 1), ('error', 1), ('fast-solution', 1), ('fullcommented', 1), ('go', 1), ('golang-solution', 1), ('heaps algorithm', 1), ('linear-time', 1), ('linked list', 1), ('linked-list', 1), ('list', 1), ('maps', 1), ('maxfrequencystack', 1), ('maxheap', 1), ('n-space', 1), ('ordereddict', 1), ('priority-queue', 1), ('python2', 1), ('raviinroorkee', 1), ('redirect21', 1), ('rust', 1), ('scala', 1), ('set', 1), ('sets', 1), ('simple clear c++ solution', 1), ('solution', 1), ('sorted-list', 1), ('space n', 1), ('stack-based', 1), ('stl', 1), ('stupid', 1), ('time constant', 1), ('treemap', 1)]"
894,All Possible Full Binary Trees,https://leetcode.com/problems/all-possible-full-binary-trees,"Given an integer n, return a list of all possible full binary trees with n nodes. Each node of each tree in the answer must have Node.val == 0.

Each element of the answer is the root node of one possible tree. You may return the final list of trees in any order.

A full binary tree is a binary tree where each node has exactly 0 or 2 children.","['tree', 'recursion']",Medium,1396,114,67151,52016,[],"[('c++', 12), ('python', 7), ('python 3', 7), ('recursion', 7), ('dynamic programming', 6), ('memoization', 6), ('java', 5), ('python3', 5), ('c#', 4), ('dp', 4), ('iterative', 4), ('recursive', 4), ('cpp', 3), ('javascript', 3), ('recursive solution', 3), ('allpossiblefullbtrees', 2), ('easy-understanding', 2), ('memorization', 2), ('recursive easy', 2), ('recursively', 2), ('tree', 2), ('algorithms', 1), ('bottom up', 1), ('c', 1), ('cache', 1), ('clean code', 1), ('cpp solution', 1), ('divide and conquer', 1), ('divide-and-conquer', 1), ('dp on trees', 1), ('dp-techqique', 1), ('easy to understand', 1), ('explanation of logic', 1), ('fast and simple', 1), ('golang', 1), ('golf', 1), ('golfing', 1), ('google', 1), ('hash-table', 1), ('hashmap', 1), ('iteratve', 1), ('javascript solution', 1), ('memo', 1), ('single-line', 1), ('swift', 1), ('time complexity', 1), ('typescript', 1)]"
893,Groups of Special-Equivalent Strings,https://leetcode.com/problems/groups-of-special-equivalent-strings,"You are given an array A of strings.

A move onto S consists of swapping any two even indexed characters of S, or any two odd indexed characters of S.

Two strings S and T are special-equivalent if after any number of moves onto S, S == T.

For example, S = ""zzxy"" and T = ""xyzz"" are special-equivalent because we may make the moves ""zzxy"" -> ""xzzy"" -> ""xyzz"" that swap S[0] and S[2], then S[1] and S[3].

Now, a group of special-equivalent strings from A is a non-empty subset of A such that:


	Every pair of strings in the group are special equivalent, and;
	The group is the largest size possible (ie., there isn't a string S not in the group such that S is special equivalent to every string in the group)


Return the number of groups of special-equivalent strings from A.",['string'],Easy,335,1272,51526,35926,[],"[('c++', 12), ('cpp', 7), ('javascript', 7), ('python', 7), ('python3', 6), ('c#', 5), ('python 3', 5), ('java', 4), ('set', 4), ('sorting', 3), ('easy-understanding', 2), ('golang', 2), ('hashmap', 2), ('hashset', 2), ('map', 2), ('sort', 2), ('swift', 2), ('1-line', 1), ('100 memory', 1), ('100 speed', 1), ('anagram', 1), ('c++ code', 1), ('c++11', 1), ('cpp easy', 1), ('cpp solution', 1), ('easy', 1), ('easy-to-read', 1), ('easy-undestand', 1), ('explain', 1), ('hash', 1), ('javascript solution', 1), ('linq', 1), ('multiset', 1), ('php', 1), ('python2', 1), ('pythonpython3', 1), ('reduce', 1), ('ruby', 1), ('sets', 1), ('signature', 1), ('straightforward', 1), ('string', 1), ('string length', 1), ('test-cases', 1), ('typescript', 1), ('unit-test', 1), ('unordered map', 1)]"
892,Surface Area of 3D Shapes,https://leetcode.com/problems/surface-area-of-3d-shapes,"You are given an n x n grid where you have placed some 1 x 1 x 1 cubes. Each value v = grid[i][j] represents a tower of v cubes placed on top of cell (i, j).

After placing these cubes, you have decided to glue any directly adjacent cubes to each other, forming several irregular 3D shapes.

Return the total surface area of the resulting shapes.

Note: The bottom face of each shape counts toward its surface area.","['math', 'geometry']",Easy,314,461,38175,22921,[],"[('c++', 12), ('python', 9), ('python 3', 9), ('cpp', 6), ('c#', 3), ('golang', 3), ('javascript', 3), ('python3', 3), ('c++ code', 2), ('explaination', 2), ('go', 2), ('go-solution', 2), ('golang-solution', 2), ('c++11', 1), ('comments added', 1), ('constant space', 1), ('easy', 1), ('easy-to-understand', 1), ('easy-understanding', 1), ('easy-undestand', 1), ('explained', 1), ('fast and simple', 1), ('functional', 1), ('geometry', 1), ('golang solution', 1), ('images', 1), ('java', 1), ('js javascript', 1), ('linear time', 1), ('math', 1), ('python3.8', 1), ('pythonpython3', 1), ('questions', 1), ('ruby', 1), ('test-cases', 1)]"
891,Sum of Subsequence Widths,https://leetcode.com/problems/sum-of-subsequence-widths,"Given an array of integers A, consider all non-empty subsequences of A.

For any sequence S, let the width of S be the difference between the maximum and minimum element of S.

Return the sum of the widths of all subsequences of A. 

As the answer may be very large, return the answer modulo 10^9 + 7.","['array', 'math']",Hard,324,113,32080,10643,[],"[('c++', 1), ('cpp solution', 1), ('dynamic programming', 1), ('math-solution', 1), ('python 3', 1), ('recurssion', 1)]"
890,Find and Replace Pattern,https://leetcode.com/problems/find-and-replace-pattern,"You have a list of words and a pattern, and you want to know which words in words matches the pattern.

A word matches the pattern if there exists a permutation of letters p so that after replacing every letter x in the pattern with p(x), we get the desired word.

(Recall that a permutation of letters is a bijection from letters to letters: every letter maps to another letter, and no two letters map to the same letter.)

Return a list of the words in words that match the given pattern. 

You may return the answer in any order.",['string'],Medium,984,90,86530,64207,[],"[('c++', 19), ('java', 15), ('python', 15), ('python 3', 15), ('javascript', 14), ('cpp', 12), ('python3', 12), ('hashmap', 10), ('map', 7), ('clean code', 6), ('easy-to-understand', 5), ('c#', 4), ('easy-understanding', 4), ('golang', 4), ('java-solution', 4), ('unordered map', 4), ('pattern matching', 3), ('string', 3), ('0ms', 2), ('c', 2), ('c++ code', 2), ('cpp solution', 2), ('index', 2), ('pattern', 2), ('pattern recognition', 2), ('1-line', 1), ('1-liner', 1), ('100 faster runtime', 1), ('100 space', 1), ('algorithms', 1), ('basic', 1), ('best-solution', 1), ('bitmanipulation', 1), ('clean', 1), ('cleanest', 1), ('constant memory', 1), ('count', 1), ('cpp-solution', 1), ('dictionary', 1), ('easy', 1), ('encoding', 1), ('explaination', 1), ('find-and-replace-pattern', 1), ('go', 1), ('golang-solution', 1), ('hash table', 1), ('hashing', 1), ('hashmaps', 1), ('hashset', 1), ('linear time', 1), ('lookup', 1), ('mapping', 1), ('one line', 1), ('one-liner', 1), ('pattern-matching', 1), ('php', 1), ('php solution', 1), ('python2', 1), ('set', 1), ('simple', 1), ('single-hashmap', 1), ('solution', 1), ('stl', 1), ('string manipulation', 1), ('stringbuilder', 1), ('two maps', 1), ('typescript', 1), ('unordered set', 1), ('unorderedmap', 1)]"
889,Construct Binary Tree from Preorder and Postorder Traversal,https://leetcode.com/problems/construct-binary-tree-from-preorder-and-postorder-traversal,"Return any binary tree that matches the given preorder and postorder traversals.

Values in the traversals pre and post are distinct positive integers.",['tree'],Medium,1205,62,74387,50591,[],"[('python', 7), ('recursion', 7), ('c++', 6), ('python 3', 6), ('java', 5), ('javascript', 4), ('recursive', 4), ('c#', 3), ('dfs', 3), ('python3', 3), ('hashmap', 2), ('#tree-taversals', 1), ('best-solution', 1), ('bfs', 1), ('binary-tree', 1), ('clean solution', 1), ('commented', 1), ('cpp', 1), ('cpp solution', 1), ('depth first search', 1), ('detailed explanation', 1), ('easy-understanding', 1), ('easytounderstand', 1), ('elegant solution', 1), ('fast', 1), ('golang-solution', 1), ('inorder', 1), ('iteration', 1), ('iterative', 1), ('iterative-bfs', 1), ('java ac solution', 1), ('java-solution', 1), ('level order', 1), ('linear', 1), ('linear time', 1), ('optimal', 1), ('peymannp', 1), ('pointer', 1), ('postorder-traversal', 1), ('preorder', 1), ('recursive solution', 1), ('stack', 1), ('stacks', 1), ('top down approach', 1)]"
888,Fair Candy Swap,https://leetcode.com/problems/fair-candy-swap,"Alice and Bob have candy bars of different sizes: A[i] is the size of the i-th bar of candy that Alice has, and B[j] is the size of the j-th bar of candy that Bob has.

Since they are friends, they would like to exchange one candy bar each so that after the exchange, they both have the same total amount of candy.  (The total amount of candy a person has is the sum of the sizes of candy bars they have.)

Return an integer array ans where ans[0] is the size of the candy bar that Alice must exchange, and ans[1] is the size of the candy bar that Bob must exchange.

If there are multiple answers, you may return any one of them.  It is guaranteed an answer exists.",['array'],Easy,758,166,104649,61920,[],"[('c++', 12), ('cpp', 8), ('python', 8), ('javascript', 6), ('python3', 6), ('python 3', 5), ('java', 4), ('c', 3), ('c#', 3), ('java-solution', 3), ('binary-search', 2), ('c++11', 2), ('golang', 2), ('hashmap', 2), ('ruby', 2), ('binary search', 1), ('binarysearch', 1), ('brute force', 1), ('c++ code', 1), ('c++ easy to understand', 1), ('c++ hash', 1), ('commented', 1), ('cpp easy', 1), ('cpp solution', 1), ('cpp-solution', 1), ('dictionary', 1), ('easy', 1), ('easy to understand', 1), ('easy understanding', 1), ('easy-understanding', 1), ('easy-undestand', 1), ('equation', 1), ('esay-understand', 1), ('explained', 1), ('explanation', 1), ('fast', 1), ('fastest', 1), ('golang-solution', 1), ('intutive', 1), ('kotllin', 1), ('linear time', 1), ('logarithmic time', 1), ('simp', 1), ('simple', 1), ('simple-solution', 1), ('solution-javascript', 1), ('two pointers', 1), ('two-lines', 1), ('typescript', 1), ('ultra easy', 1), ('video explanation', 1), ('visualization', 1), ('wrong output', 1)]"
887,Super Egg Drop,https://leetcode.com/problems/super-egg-drop,"You are given k identical eggs and you have access to a building with n floors labeled from 1 to n.

You know that there exists a floor f where 0 <= f <= n such that any egg dropped at a floor higher than f will break, and any egg dropped at or below floor f will not break.

Each move, you may take an unbroken egg and drop it from any floor x (where 1 <= x <= n). If the egg breaks, you can no longer use it. However, if the egg does not break, you may reuse it in future moves.

Return the minimum number of moves that you need to determine with certainty what the value of f is.","['math', 'binary-search', 'dynamic-programming']",Hard,1375,97,109749,29623,[],"[('dynamic programming', 10), ('binary-search', 3), ('c++', 3), ('javascript', 3), ('memoization', 3), ('cpp', 2), ('dp', 2), ('java', 2), ('python', 2), ('accepted', 1), ('awesome samriddhi', 1), ('binary search', 1), ('binarysearch', 1), ('bottomup', 1), ('brute force', 1), ('brute force to optimal', 1), ('c#', 1), ('explained', 1), ('explanation of logic', 1), ('java-solution', 1), ('mathematical solution', 1), ('python 3', 1), ('recursion', 1), ('ritik', 1), ('time exceed error', 1), ('topdown', 1)]"
886,Possible Bipartition,https://leetcode.com/problems/possible-bipartition,"Given a set of N people (numbered 1, 2, ..., N), we would like to split everyone into two groups of any size.

Each person may dislike some other people, and they should not go into the same group. 

Formally, if dislikes[i] = [a, b], it means it is not allowed to put the people numbered a and b into the same group.

Return true if and only if it is possible to split everyone into two groups in this way.","['depth-first-search', 'graph']",Medium,1403,37,164949,74848,[],"[('bfs', 34), ('dfs', 29), ('c++', 22), ('java', 19), ('graph', 17), ('cpp', 15), ('python', 11), ('python 3', 11), ('dfs simple solution', 10), ('javascript', 8), ('coloring', 6), ('python3', 6), ('bipartite graph', 5), ('c#', 5), ('c++ code', 4), ('union find', 4), ('bipartite-partition', 3), ('bipartitite', 3), ('breadth-first-search', 3), ('dfs-bfs', 3), ('graph coloring', 3), ('graph-coloring', 3), ('rust', 3), ('simple solution', 3), ('#dfs', 2), ('#python', 2), ('#python 3', 2), ('#recursion', 2), ('clean code', 2), ('depth first search', 2), ('dfs recursive', 2), ('dfs-non-recursive', 2), ('easy to understand', 2), ('explained', 2), ('explanation with logic', 2), ('java-solution', 2), ('javascript solution', 2), ('queue', 2), ('recursive', 2), ('unionfind', 2), ('#bfs', 1), ('adjacency list', 1), ('awesome samriddhi', 1), ('breadth first search', 1), ('c++ easy to understand', 1), ('clean', 1), ('comments added', 1), ('commonalgorithmforall', 1), ('csharp', 1), ('cycle', 1), ('cycle detection', 1), ('depth-first search', 1), ('deque', 1), ('diagram', 1), ('easy', 1), ('easy-understanding', 1), ('explanations', 1), ('fast', 1), ('graph bipartite', 1), ('graph-partitioning', 1), ('high performance', 1), ('hint', 1), ('hints', 1), ('java ac solution', 1), ('javascrip', 1), ('keep it simple', 1), ('linear space', 1), ('linear time', 1), ('python dfs', 1), ('python2', 1), ('recursion', 1), ('recursive solution', 1), ('recusive', 1), ('ritik', 1), ('scala', 1), ('sets', 1), ('stacks', 1), ('straightforward', 1), ('swift', 1), ('time complexity', 1), ('two-coloring', 1), ('union-find', 1), ('vec', 1), ('video explaination', 1), ('visualization', 1)]"
885,Spiral Matrix III,https://leetcode.com/problems/spiral-matrix-iii,"On a 2 dimensional grid with R rows and C columns, we start at (r0, c0) facing east.

Here, the north-west corner of the grid is at the first row and column, and the south-east corner of the grid is at the last row and column.

Now, we walk in a clockwise spiral shape to visit every position in this grid. 

Whenever we would move outside the boundary of the grid, we continue our walk outside the grid (but may return to the grid boundary later.) 

Eventually, we reach all R * C spaces of the grid.

Return a list of coordinates representing the positions of the grid in the order they were visited.",['math'],Medium,320,391,37676,26810,"[""Spiral Matrix"", ""Spiral Matrix II""]","[('java', 9), ('python3', 7), ('c++', 6), ('javascript', 6), ('python', 6), ('c#', 5), ('cpp', 4), ('simple solution', 3), ('golang', 2), ('python 3', 2), ('recursion', 2), ('2d-array', 1), ('2ms', 1), ('approach', 1), ('beats 100 percent', 1), ('clean', 1), ('clean code', 1), ('cpp solution', 1), ('easy', 1), ('easy to understand', 1), ('easytounderstand', 1), ('fast', 1), ('give stars and subscribe', 1), ('java-solution', 1), ('javascrip', 1), ('javascript solution', 1), ('math', 1), ('modulo in spirals', 1), ('one pass solution', 1), ('pilot math', 1), ('short', 1), ('spiral', 1), ('traverse', 1), ('typescript', 1), ('well commented', 1)]"
884,Uncommon Words from Two Sentences,https://leetcode.com/problems/uncommon-words-from-two-sentences,"We are given two sentences A and B.  (A sentence is a string of space separated words.  Each word consists only of lowercase letters.)

A word is uncommon if it appears exactly once in one of the sentences, and does not appear in the other sentence.

Return a list of all uncommon words. 

You may return the list in any order.",['hash-table'],Easy,608,109,114957,73912,[],"[('python 3', 32), ('c++', 26), ('hashmap', 21), ('python', 20), ('javascript', 19), ('cpp', 18), ('java', 13), ('cpp solution', 8), ('easy', 7), ('java-solution', 7), ('dictionary', 6), ('easy-understanding', 6), ('map', 6), ('c#', 5), ('counter', 5), ('python3', 5), ('js', 4), ('stringstream', 4), ('unordered map', 4), ('cpp-solution', 3), ('dictonary', 3), ('easy to understand', 3), ('fast-solution', 3), ('rust', 3), ('string', 3), ('swift', 3), ('1-line', 2), ('100 faster', 2), ('c++ code', 2), ('easy-to-understand', 2), ('easytounderstand', 2), ('filter', 2), ('frequency count', 2), ('golang', 2), ('hash table', 2), ('hashset', 2), ('js javascript', 2), ('kotlin', 2), ('php', 2), ('simple', 2), ('simple solution', 2), ('two-lines', 2), ('#easysolution', 1), ('#hashset', 1), ('#java #easy-understand', 1), ('#java8', 1), ('1 liner', 1), ('1-liner', 1), ('100 space', 1), ('100 speed', 1), ('2 lines', 1), ('array', 1), ('beats 100', 1), ('beginner friendly', 1), ('c', 1), ('c++ hash', 1), ('c++14', 1), ('commented', 1), ('comments', 1), ('comments added', 1), ('csharp', 1), ('cycle', 1), ('dictionary c#', 1), ('dictionary features', 1), ('easiest', 1), ('easy to read', 1), ('explained', 1), ('explanation', 1), ('fast solution', 1), ('fastest', 1), ('frequency', 1), ('frequencycounting', 1), ('golang-solution', 1), ('hash', 1), ('hashtable', 1), ('javascrip', 1), ('javascript solution', 1), ('library', 1), ('list', 1), ('loops', 1), ('map in c++', 1), ('one liner', 1), ('one-liner', 1), ('php solution', 1), ('pyhton', 1), ('readable', 1), ('ruby', 1), ('set', 1), ('simple clear c++ solution', 1), ('simplest', 1), ('solution', 1), ('straightforward', 1), ('string-searching', 1), ('uncommonfromsentences', 1)]"
883,Projection Area of 3D Shapes,https://leetcode.com/problems/projection-area-of-3d-shapes,"You are given an n x n grid where we place some 1 x 1 x 1 cubes that are axis-aligned with the x, y, and z axes.

Each value v = grid[i][j] represents a tower of v cubes placed on top of the cell (i, j).

We view the projection of these cubes onto the xy, yz, and zx planes.

A projection is like a shadow, that maps our 3-dimensional figure to a 2-dimensional plane. We are viewing the ""shadow"" when looking at the cubes from the top, the front, and the side.

Return the total area of all three projections.",['math'],Easy,305,967,49542,33951,[],"[('python 3', 12), ('python', 9), ('c++', 7), ('java', 5), ('javascript', 5), ('python3', 5), ('cpp', 4), ('easy-understanding', 4), ('golang', 3), ('c#', 2), ('fast', 2), ('math', 2), ('simple', 2), ('#linq', 1), ('algorithms', 1), ('branch prediction', 1), ('brute', 1), ('brute force', 1), ('easy-solition', 1), ('faster than 99.80', 1), ('functional programming', 1), ('golang-solution', 1), ('javascript solution', 1), ('javascriptes6', 1), ('js', 1), ('lambda function', 1), ('numpy', 1), ('one line', 1), ('one-liner', 1), ('oneline', 1), ('php', 1), ('ruby', 1), ('stack overflow', 1), ('stl', 1), ('typescript', 1)]"
882,Reachable Nodes In Subdivided Graph,https://leetcode.com/problems/reachable-nodes-in-subdivided-graph,"You are given an undirected graph (the ""original graph"") with n nodes labeled from 0 to n - 1. You decide to subdivide each edge in the graph into a chain of nodes, with the number of new nodes varying between each edge.

The graph is given as a 2D array of edges where edges[i] = [ui, vi, cnti] indicates that there is an edge between nodes ui and vi in the original graph, and cnti is the total number of new nodes that you will subdivide the edge into. Note that cnti == 0 means you will not subdivide the edge.

To subdivide the edge [ui, vi], replace it with (cnti + 1) new edges and cnti new nodes. The new nodes are x1, x2, ..., xcnti, and the new edges are [ui, x1], [x1, x2], [x2, x3], ..., [xcnti+1, xcnti], [xcnti, vi].

In this new graph, you want to know how many nodes are reachable from the node 0, where a node is reachable if the distance is maxMoves or less.

Given the original graph and maxMoves, return the number of nodes that are reachable from node 0 in the new graph.","['heap', 'breadth-first-search']",Hard,186,157,17170,7416,[],"[('breadth first search', 2), ('python 3', 2), ('c#', 1), ('c++ solution', 1), ('dijkstra', 1), ('help', 1), ('time limit exceeded', 1)]"
881,Boats to Save People,https://leetcode.com/problems/boats-to-save-people,"You are given an array people where people[i] is the weight of the ith person, and an infinite number of boats where each boat can carry a maximum weight of limit. Each boat carries at most two people at the same time, provided the sum of the weight of those people is at most limit.

Return the minimum number of boats to carry every given person.","['two-pointers', 'greedy']",Medium,1274,48,146047,71752,[],"[('c++', 30), ('two-pointers', 28), ('java', 23), ('greedy', 18), ('cpp', 16), ('greedy approach', 8), ('java-solution', 8), ('javascript', 7), ('python', 7), ('c#', 6), ('cpp solution', 6), ('easy-understanding', 6), ('python 3', 6), ('javascript solution', 5), ('sort', 5), ('2 pointers', 4), ('go-solution', 4), ('golang-solution', 4), ('explained', 3), ('go', 3), ('golang', 3), ('python3', 3), ('sort-function', 3), ('sorting', 3), ('100 memory', 2), ('2 pointer', 2), ('2 pointer approach', 2), ('2pointers', 2), ('beginner friendly', 2), ('c++ solution', 2), ('clean code', 2), ('easy-to-understand', 2), ('explanation of logic', 2), ('fast', 2), ('fast-solution', 2), ('ruby', 2), ('scala', 2), ('simple', 2), ('two pointer', 2), ('two pointers', 2), ('two-pointer', 2), ('video-explanation', 2), ('#881', 1), ('#easy-understanding', 1), ('#java', 1), ('#java-solution', 1), ('#queue', 1), ('#twopointerapproach', 1), ('100 faster', 1), ('100 faster runtime', 1), ('100 speed', 1), ('2-pointer', 1), ('2pointer', 1), ('accepted', 1), ('array greedy', 1), ('beats 100', 1), ('binary search', 1), ('binarysearch', 1), ('boats to save people', 1), ('boatstosaveppl', 1), ('brute-force', 1), ('btreeset', 1), ('c++ code', 1), ('clean solution', 1), ('count', 1), ('counting-sort', 1), ('cpp easy', 1), ('easy solution', 1), ('easy-undestand', 1), ('easytounderstand', 1), ('efficient solution', 1), ('explaination', 1), ('explained solution', 1), ('fast and simple', 1), ('fasterthan100', 1), ('fastest', 1), ('hash table', 1), ('hashmap', 1), ('image', 1), ('interview', 1), ('iterator', 1), ('java ac solution', 1), ('java-8', 1), ('kotlin-solution', 1), ('kotllin', 1), ('map', 1), ('no sorting', 1), ('pair', 1), ('pair sum', 1), ('pairs', 1), ('python3.8', 1), ('rust', 1), ('self-explanatory', 1), ('short', 1), ('simple solution', 1), ('simple-solution', 1), ('stack', 1), ('sum of pairs', 1), ('thought-process', 1), ('two-poinnters', 1), ('two-pointer method', 1), ('twopointer', 1), ('upper bound', 1), ('video-explaination', 1), ('well-commented', 1), ('with documentation', 1), ('wrong-answer-java', 1)]"
880,Decoded String at Index,https://leetcode.com/problems/decoded-string-at-index,"An encoded string S is given.  To find and write the decoded string to a tape, the encoded string is read one character at a time and the following steps are taken:


	If the character read is a letter, that letter is written onto the tape.
	If the character read is a digit (say d), the entire current tape is repeatedly written d-1 more times in total.


Now for some encoded string S, and an index K, find and return the K-th letter (1 indexed) in the decoded string.",['stack'],Medium,913,160,103278,29108,[],"[('c++', 4), ('java', 4), ('python', 4), ('c#', 3), ('golang', 3), ('python 3', 3), ('python3', 3), ('stack', 3), ('explained', 2), ('golang-solution', 2), ('java-solution', 2), ('javascript', 2), ('recursion', 2), ('recursive', 2), ('swift', 2), ('binary search', 1), ('binary-search', 1), ('c++ solution', 1), ('comments-added', 1), ('cpp', 1), ('cpp solution', 1), ('csharp', 1), ('decodedstringatindex', 1), ('easy-understanding', 1), ('explained solution', 1), ('explanations', 1), ('fast and simple', 1), ('fastest', 1), ('go', 1), ('go-solution', 1), ('iterative', 1), ('javascript solution', 1), ('recursive easy', 1), ('ruby', 1), ('rust', 1), ('scala', 1), ('simple', 1)]"
478,Generate Random Point in a Circle,https://leetcode.com/problems/generate-random-point-in-a-circle,"Given the radius and the position of the center of a circle, implement the function randPoint which generates a uniform random point inside the circle.

Implement the Solution class:


	Solution(double radius, double x_center, double y_center) initializes the object with the radius of the circle radius and the position of the center (x_center, y_center).
	randPoint() returns a random point inside the circle. A point on the circumference of the circle is considered to be in the circle. The answer is returned as an array [x, y].","['math', 'random', 'rejection-sampling']",Medium,312,599,75521,29551,"[""Random Point in Non-overlapping Rectangles""]","[('c++', 12), ('math', 7), ('python', 7), ('cpp', 6), ('javascript', 5), ('c#', 4), ('easy-understanding', 4), ('java', 3), ('python3', 3), ('random', 3), ('video-explanation', 3), ('explained', 2), ('go', 2), ('golang', 2), ('polar', 2), ('polar coordinates', 2), ('python 3', 2), ('rejection-sampling', 2), ('rust', 2), ('circle', 1), ('clean code', 1), ('comments-added', 1), ('cpp solution', 1), ('diagrams', 1), ('easy to undertsand', 1), ('easy-to-understand', 1), ('generaterandompoints', 1), ('go-solution', 1), ('java-solution', 1), ('javascrip', 1), ('maths', 1), ('polar coordination', 1), ('pythagorean', 1), ('random pick', 1), ('recursion', 1), ('ruby', 1), ('simple', 1), ('swift', 1)]"
497,Random Point in Non-overlapping Rectangles,https://leetcode.com/problems/random-point-in-non-overlapping-rectangles,"Given a list of non-overlapping axis-aligned rectangles rects, write a function pick which randomly and uniformily picks an integer point in the space covered by the rectangles.

Note:


	An integer point is a point that has integer coordinates. 
	A point on the perimeter of a rectangle is included in the space covered by the rectangles. 
	ith rectangle = rects[i] = [x1,y1,x2,y2], where [x1, y1] are the integer coordinates of the bottom-left corner, and [x2, y2] are the integer coordinates of the top-right corner.
	length and width of each rectangle does not exceed 2000.
	1 <= rects.length <= 100
	pick return a point as an array of integer coordinates [p_x, p_y]
	pick is called at most 10000 times.","['binary-search', 'random']",Medium,329,535,78872,30854,"[""Random Pick with Weight"", ""Generate Random Point in a Circle""]","[('binary-search', 6), ('java', 4), ('python', 4), ('python 3', 4), ('random', 4), ('c#', 3), ('c++', 3), ('explained', 3), ('golang', 3), ('random pick', 3), ('binary search', 2), ('cpp', 2), ('javascript', 2), ('python3', 2), ('random int', 2), ('1liner', 1), ('bisect', 1), ('c++ solution', 1), ('cdf', 1), ('commented code', 1), ('cpp solution', 1), ('cumulative sum', 1), ('detailed-steps', 1), ('easy-understanding', 1), ('easytounderstand', 1), ('explanation of logic', 1), ('faster than 100.00', 1), ('help me', 1), ('help needed', 1), ('help-wanted', 1), ('math-solution', 1), ('pool sampling', 1), ('random seed', 1), ('readability', 1), ('ruby', 1), ('video', 1), ('video solution', 1), ('video-explanation', 1), ('visualization', 1)]"
519,Random Flip Matrix,https://leetcode.com/problems/random-flip-matrix,"You are given the number of rows n_rows and number of columns n_cols of a 2D binary matrix where all values are initially 0. Write a function flip which chooses a 0 value uniformly at random, changes it to 1, and then returns the position [row.id, col.id] of that value. Also, write a function reset which sets all values back to 0. Try to minimize the number of calls to system's Math.random() and optimize the time and space complexity.

Note:


	1 <= n_rows, n_cols <= 10000
	0 <= row.id < n_rows and 0 <= col.id < n_cols
	flip will not be called when the matrix has no 0 values left.
	the total number of calls to flip and reset will not exceed 1000.",['random'],Medium,222,75,27540,10454,[],"[('c++', 2), ('cpp', 2), ('fisher-yates-shuffle', 2), ('beats 97', 1), ('c++ solution', 1), ('clear explanation', 1), ('counter', 1), ('cpp solution', 1), ('golang', 1), ('java', 1), ('python', 1), ('python3', 1), ('pythonpython3', 1), ('random', 1), ('ruby', 1), ('scala', 1), ('shuffle', 1), ('swift', 1)]"
528,Random Pick with Weight,https://leetcode.com/problems/random-pick-with-weight,"You are given an array of positive integers w where w[i] describes the weight of ith index (0-indexed).

We need to call the function pickIndex() which randomly returns an integer in the range [0, w.length - 1]. pickIndex() should return the integer proportional to its weight in the w array. For example, for w = [1, 3], the probability of picking the index 0 is 1 / (1 + 3) = 0.25 (i.e 25%) while the probability of picking the index 1 is 3 / (1 + 3) = 0.75 (i.e 75%).

More formally, the probability of picking index i is w[i] / sum(w).","['binary-search', 'random']",Medium,1247,2815,383145,171746,"[""Random Pick Index"", ""Random Pick with Blacklist"", ""Random Point in Non-overlapping Rectangles""]","[('binary-search', 17), ('python', 15), ('binary search', 14), ('c++', 14), ('java', 13), ('python 3', 12), ('javascript', 10), ('cpp', 8), ('python3', 7), ('binarysearch', 5), ('binarysearh', 4), ('c#', 4), ('cumulative sum', 4), ('linear search', 4), ('explanations', 3), ('probability', 3), ('random', 3), ('swift', 3), ('bisect', 2), ('c++ code', 2), ('c++ solution', 2), ('cpp solution', 2), ('easy-undestand', 2), ('explained', 2), ('explanation', 2), ('fast-solution', 2), ('golang', 2), ('help', 2), ('java-solution', 2), ('kotlin', 2), ('lowerbound', 2), ('php', 2), ('random pick', 2), ('rust', 2), ('simple solution', 2), ('stl', 2), ('treemap', 2), ('upperbound', 2), ('99.8 faster', 1), ('algorithms', 1), ('alias method', 1), ('annotated', 1), ('bisectleft', 1), ('builtin', 1), ('clear', 1), ('commented', 1), ('comments-added', 1), ('constant', 1), ('cpp doubt', 1), ('csharp', 1), ('dailyleetcode', 1), ('dice-roll', 1), ('different approach', 1), ('easy', 1), ('easy-understanding', 1), ('examples', 1), ('explanation of logic', 1), ('fast', 1), ('fast and simple', 1), ('frequency', 1), ('go-solution', 1), ('intuitive', 1), ('itertools', 1), ('javascript solution', 1), ('junechallenge', 1), ('kotlinvim', 1), ('kotllin', 1), ('leetcode problem set', 1), ('linear seach', 1), ('lower bound', 1), ('map', 1), ('math', 1), ('math-solution', 1), ('mathematics', 1), ('nlogn time', 1), ('no prefix array', 1), ('no prefix sum', 1), ('o1', 1), ('object', 1), ('prefix-sum', 1), ('prefixsum', 1), ('priority queue', 1), ('python solution', 1), ('python2', 1), ('pythonic', 1), ('rand function', 1), ('random int', 1), ('random number', 1), ('simple', 1), ('sorted', 1), ('sorted array', 1), ('statistics', 1), ('swift5', 1), ('time complexity', 1), ('typescript', 1), ('video explanation', 1), ('video solution', 1), ('visualization', 1), ('weighted-random-selection', 1), ('youtube', 1)]"
879,Profitable Schemes,https://leetcode.com/problems/profitable-schemes,"There is a group of n members, and a list of various crimes they could commit. The ith crime generates a profit[i] and requires group[i] members to participate in it. If a member participates in one crime, that member can't participate in another crime.

Let's call a profitable scheme any subset of these crimes that generates at least minProfit profit, and the total number of members participating in that subset of crimes is at most n.

Return the number of schemes that can be chosen. Since the answer may be very large, return it modulo 109 + 7.",['dynamic-programming'],Hard,302,32,28849,11538,[],"[('dynamic programming', 2), ('c#', 1), ('dp', 1), ('golang', 1), ('memoization', 1), ('scala', 1)]"
878,Nth Magical Number,https://leetcode.com/problems/nth-magical-number,"A positive integer is magical if it is divisible by either a or b.

Given the three integers n, a, and b, return the nth magical number. Since the answer may be very large, return it modulo 109 + 7.","['math', 'binary-search']",Hard,272,68,41087,11854,[],"[('binary-search', 6), ('binary search', 4), ('gcd', 4), ('c++', 3), ('constant time', 2), ('lcm', 2), ('python', 2), ('beginners level', 1), ('binary-search-explanation', 1), ('c#', 1), ('constant space', 1), ('cpp', 1), ('cpp doubt', 1), ('cpp solution', 1), ('easy-undestand', 1), ('fast and simple', 1), ('inclusion-exclusion', 1), ('javascript', 1), ('javascript solution', 1), ('no loop', 1), ('pattern-based', 1), ('python 3', 1), ('python3', 1)]"
877,Stone Game,https://leetcode.com/problems/stone-game,"Alex and Lee play a game with piles of stones.  There are an even number of piles arranged in a row, and each pile has a positive integer number of stones piles[i].

The objective of the game is to end with the most stones.  The total number of stones is odd, so there are no ties.

Alex and Lee take turns, with Alex starting first.  Each turn, a player takes the entire pile of stones from either the beginning or the end of the row.  This continues until there are no more piles left, at which point the person with the most stones wins.

Assuming Alex and Lee play optimally, return True if and only if Alex wins the game.","['math', 'dynamic-programming', 'minimax']",Medium,1087,1329,129972,87364,"[""Stone Game V"", ""Stone Game VI"", ""Stone Game VII""]","[('dynamic programming', 26), ('c++', 24), ('java', 14), ('dp', 11), ('recursion', 10), ('cpp', 9), ('memoization', 9), ('python 3', 9), ('dynamic-programming', 7), ('python', 5), ('two-pointers', 5), ('easy-understanding', 4), ('python3', 4), ('minimax', 3), ('simple solution', 3), ('top down approach', 3), ('c#', 2), ('cpp solution', 2), ('explained', 2), ('ruby', 2), ('top-down', 2), ('#dynamic programming', 1), ('#dynamic-programming', 1), ('100', 1), ('100 speed', 1), ('2 pointer approach', 1), ('alpha beta pruning', 1), ('analysis', 1), ('backtracking', 1), ('beats', 1), ('c', 1), ('c++ code', 1), ('clear explanation', 1), ('commented', 1), ('counters', 1), ('detailed thinking step', 1), ('different approach', 1), ('dp made easy', 1), ('dp-table', 1), ('dp-techqique', 1), ('dumb solution', 1), ('easy', 1), ('easy-to-understand', 1), ('explaination', 1), ('fast', 1), ('fast and simple', 1), ('fast-solution', 1), ('fully-explained', 1), ('funny', 1), ('go', 1), ('go-solution', 1), ('golang', 1), ('golang solution', 1), ('golang-solution', 1), ('greedy algorithms', 1), ('instant time', 1), ('intuitive', 1), ('java ac solution', 1), ('java simple', 1), ('javascript', 1), ('javascript solution', 1), ('logic explained', 1), ('logical', 1), ('lol', 1), ('memoziation', 1), ('nlogn time', 1), ('one-liner', 1), ('optimized', 1), ('overflow', 1), ('pyhton3', 1), ('python3.8', 1), ('quadratic time', 1), ('recurision', 1), ('runtime', 1), ('rust', 1), ('rust vec', 1), ('simple', 1), ('simple algo', 1), ('simple approach', 1), ('simple explanation', 1), ('simplesolution', 1), ('simplest', 1), ('to', 1), ('two pointer fast', 1), ('two pointers', 1), ('understand', 1), ('very fast', 1), ('without dp', 1), ('zermelo', 1)]"
876,Middle of the Linked List,https://leetcode.com/problems/middle-of-the-linked-list,"Given a non-empty, singly linked list with head node head, return a middle node of linked list.

If there are two middle nodes, return the second middle node.",['linked-list'],Easy,2315,73,464726,321956,[],"[('c++', 82), ('java', 60), ('cpp', 45), ('python', 39), ('linked-list', 33), ('java-solution', 32), ('python 3', 31), ('javascript', 26), ('c', 21), ('linkedlists', 21), ('easy-understanding', 18), ('two-pointers', 15), ('linked list', 14), ('python3', 12), ('cpp solution', 10), ('c++ code', 9), ('easy', 9), ('golang', 9), ('middle of the linked list', 9), ('swift', 9), ('0ms', 8), ('cpp easy', 8), ('easy to understand', 8), ('easy-undestand', 8), ('easytounderstand', 8), ('simple', 8), ('c#', 7), ('fast-solution', 7), ('middle of linked list', 7), ('recursion', 7), ('two-pointer', 7), ('linear time', 6), ('linkedlist', 6), ('pointer', 5), ('slow fast pointer', 5), ('slowfast pointers', 5), ('fast slow pointer', 4), ('recursive', 4), ('ruby', 4), ('simple solution', 4), ('tortoise-and-hare-algo', 4), ('2pointers', 3), ('easy-to-understand', 3), ('efficient solution', 3), ('explained', 3), ('fast and simple', 3), ('fast and slow pointers', 3), ('fast-slow-pointers', 3), ('go', 3), ('iterative', 3), ('javascript solution', 3), ('kotlin', 3), ('linked lists', 3), ('two pointers', 3), ('100 faster runtime', 2), ('100 speed', 2), ('2 pointer', 2), ('array', 2), ('beats 100', 2), ('c code', 2), ('c programming', 2), ('c++11', 2), ('clear explanation', 2), ('constant space', 2), ('cpp doubt', 2), ('easy-solition', 2), ('faster than 100', 2), ('fastest c++ solution', 2), ('java solution', 2), ('middleelement', 2), ('python2', 2), ('scala', 2), ('solved', 2), ('two passes', 2), ('vector', 2), ('#data structure', 1), ('#javascript', 1), ('#linkedlist', 1), ('#python3', 1), ('0 ms solution', 1), ('0ms runtime', 1), ('1 pass', 1), ('100 faster', 1), ('100 faster cpp', 1), ('100 memory', 1), ('2 pointer approach', 1), ('2-pointer approach', 1), ('3 ways', 1), ('3linessolution', 1), ('ac solution', 1), ('accepted', 1), ('accepted solution', 1), ('array functions', 1), ('best', 1), ('c++ easy solution', 1), ('c++ easy to understand', 1), ('c++14', 1), ('centro lista concatenata', 1), ('clearly', 1), ('coding challenge', 1), ('commented', 1), ('concise-solution', 1), ('constant memory', 1), ('cool', 1), ('count', 1), ('cycle detection', 1), ('dictionary', 1), ('documentation', 1), ('doubt', 1), ('dynamic array', 1), ('easier to understand', 1), ('easiest', 1), ('east-to-understand', 1), ('east-understanding', 1), ('easy solution', 1), ('easy understanding', 1), ('easy-solution', 1), ('easy-understand', 1), ('editorial', 1), ('example', 1), ('explanations', 1), ('fast', 1), ('fast and slow ptrs', 1), ('faster', 1), ('fastest', 1), ('floyd cycle detection', 1), ('for loops', 1), ('fun', 1), ('golang-solution', 1), ('hacks', 1), ('highly readable', 1), ('interview experience', 1), ('issue', 1), ('java ac solution', 1), ('keep it simple', 1), ('kotlinvim', 1), ('linear memory', 1), ('linked-list-cycle', 1), ('linked-lists', 1), ('list', 1), ('lista concatenata', 1), ('lista dinamica', 1), ('meiyaowen', 1), ('middle node', 1), ('middleoflinkedlist', 1), ('midpoint-subdivision', 1), ('modulo', 1), ('mrmagician', 1), ('naive-solution', 1), ('one pass', 1), ('one-liner', 1), ('one-pass', 1), ('onepass', 1), ('optimal solution', 1), ('optimised', 1), ('performance', 1), ('programming', 1), ('rajat', 1), ('rajawatbanna', 1), ('recurision', 1), ('recusion', 1), ('rust', 1), ('short c++ code', 1), ('short code', 1), ('simplest', 1), ('slow', 1), ('slow and fast pointers', 1), ('slow-fast-pointers', 1), ('solution', 1), ('spiegazione', 1), ('stack', 1), ('stl', 1), ('swift5', 1), ('tail-recursion', 1), ('tail-recursive', 1), ('tailrec', 1), ('tow-pointers', 1), ('traverse', 1), ('two pass', 1), ('two pointer technique', 1), ('two-pass', 1), ('twopointer', 1), ('twopointers', 1), ('understandable', 1), ('upvote', 1), ('very simple', 1), ('video', 1), ('video explanation', 1), ('withexplanation', 1)]"
875,Koko Eating Bananas,https://leetcode.com/problems/koko-eating-bananas,"Koko loves to eat bananas. There are n piles of bananas, the ith pile has piles[i] bananas. The guards have gone and will come back in h hours.

Koko can decide her bananas-per-hour eating speed of k. Each hour, she chooses some pile of bananas and eats k bananas from that pile. If the pile has less than k bananas, she eats all of them instead and will not eat any more bananas during this hour.

Koko likes to eat slowly but still wants to finish eating all the bananas before the guards return.

Return the minimum integer k such that she can eat all the bananas within h hours.",['binary-search'],Medium,1428,86,127568,68314,"[""Minimize Max Distance to Gas Station""]","[('binary-search', 29), ('binary search', 18), ('c++', 15), ('cpp', 10), ('java', 9), ('javascript', 8), ('python', 7), ('python 3', 6), ('binarysearch', 5), ('java-solution', 5), ('easy-undestand', 4), ('c#', 3), ('easy-to-understand', 3), ('python3', 3), ('cpp solution', 2), ('easy', 2), ('easy-understanding', 2), ('simple', 2), ('6 lines', 1), ('binary search python', 1), ('binary search tree', 1), ('clean code', 1), ('clear explanation', 1), ('easysolution', 1), ('fast-solution', 1), ('functional-programming', 1), ('java ac solution', 1), ('js', 1), ('kotlinvim', 1), ('modular', 1), ('optimization', 1), ('pythonpython3', 1), ('question need help', 1), ('ruby', 1), ('solution', 1), ('swift', 1)]"
874,Walking Robot Simulation,https://leetcode.com/problems/walking-robot-simulation,"A robot on an infinite XY-plane starts at point (0, 0) and faces north. The robot can receive one of three possible types of commands:


	-2: turn left 90 degrees,
	-1: turn right 90 degrees, or
	1 <= k <= 9: move forward k units.


Some of the grid squares are obstacles. The ith obstacle is at grid point obstacles[i] = (xi, yi).

If the robot would try to move onto them, the robot stays on the previous grid square instead (but still continues following the rest of the route.)

Return the maximum Euclidean distance that the robot will be from the origin squared (i.e. if the distance is 5, return 25).

Note:


	North means +Y direction.
	East means +X direction.
	South means -Y direction.
	West means -X direction.",['greedy'],Easy,245,985,68715,25231,[],"[('python 3', 10), ('c++', 7), ('python', 6), ('cpp', 3), ('golang', 3), ('java', 3), ('javascript', 3), ('python3', 3), ('c#', 2), ('clean code', 2), ('simulation', 2), ('swift', 2), ('13 lines', 1), ('ad-hoc', 1), ('binary search', 1), ('binary-search', 1), ('brute force', 1), ('bug', 1), ('c', 1), ('clean', 1), ('cpp solution', 1), ('dictionary', 1), ('easy', 1), ('easy sloution', 1), ('easy-understanding', 1), ('easy-undestand', 1), ('error', 1), ('explaination', 1), ('explanatory comments', 1), ('fast and simple', 1), ('go', 1), ('go-solution', 1), ('golang solution', 1), ('golang-solution', 1), ('good variable names', 1), ('hashing', 1), ('hashmap', 1), ('hashset', 1), ('java solution', 1), ('java-solution', 1), ('javascript solution', 1), ('js', 1), ('object oriented solution', 1), ('ruby', 1), ('rust', 1), ('set', 1), ('structured code', 1), ('swift5', 1), ('unorderedset', 1)]"
873,Length of Longest Fibonacci Subsequence,https://leetcode.com/problems/length-of-longest-fibonacci-subsequence,"A sequence X1, X2, ..., Xn is Fibonacci-like if:


	n >= 3
	Xi + Xi+1 = Xi+2 for all i + 2 <= n


Given a strictly increasing array arr of positive integers forming a sequence, return the length of the longest Fibonacci-like subsequence of arr. If one does not exist, return 0.

A subsequence is derived from another sequence arr by deleting any number of elements (including none) from arr, without changing the order of the remaining elements. For example, [3, 5, 8] is a subsequence of [3, 4, 5, 6, 7, 8].","['array', 'dynamic-programming']",Medium,982,37,79444,38323,"[""Fibonacci Number""]","[('dp', 7), ('python 3', 7), ('c++', 5), ('dynamic programming', 5), ('javascript', 5), ('python', 5), ('java', 4), ('python3', 3), ('binary-search', 2), ('cpp', 2), ('hashmap', 2), ('lis', 2), ('map', 2), ('2d-dp', 1), ('bfs', 1), ('binary search', 1), ('bug report', 1), ('c', 1), ('cpp easy', 1), ('dynamic-programming', 1), ('easy', 1), ('easy-understanding', 1), ('fast and simple', 1), ('golang', 1), ('java-solution', 1), ('js', 1), ('kotlin', 1), ('rajat', 1), ('ruby', 1), ('sets', 1), ('swift', 1), ('topdown', 1), ('zea7ot', 1)]"
872,Leaf-Similar Trees,https://leetcode.com/problems/leaf-similar-trees,"Consider all the leaves of a binary tree, from left to right order, the values of those leaves form a leaf value sequence.



For example, in the given tree above, the leaf value sequence is (6, 7, 4, 9, 8).

Two binary trees are considered leaf-similar if their leaf value sequence is the same.

Return true if and only if the two given trees with head nodes root1 and root2 are leaf-similar.","['tree', 'depth-first-search']",Easy,1146,48,192506,124141,[],"[('dfs', 58), ('c++', 43), ('java', 34), ('recursion', 32), ('python', 28), ('cpp', 25), ('python 3', 25), ('javascript', 24), ('binary-tree', 10), ('c#', 9), ('dfs simple solution', 9), ('easy-understanding', 8), ('cpp solution', 7), ('easy', 7), ('easytounderstand', 6), ('golang', 6), ('python3', 6), ('recursive', 6), ('vector', 6), ('dfs solution', 5), ('dfs-iterative', 5), ('java-solution', 5), ('stacks', 5), ('swift', 5), ('c++ code', 4), ('depth first search', 4), ('dfs-tree', 4), ('inorder', 4), ('js', 4), ('ruby', 4), ('0ms runtime', 3), ('dfs recursive', 3), ('dfs-in-order', 3), ('dfs-topdown', 3), ('easy to understand', 3), ('easy-undestand', 3), ('inorder traversal', 3), ('queue', 3), ('rust', 3), ('stack', 3), ('tree-traversal', 3), ('#dfs', 2), ('100', 2), ('100 memory', 2), ('arraylist', 2), ('beginner friendly', 2), ('commented', 2), ('cpp easy', 2), ('dfs-non-recursive', 2), ('dfs-recursive', 2), ('easy-to-understand', 2), ('es6', 2), ('explained', 2), ('fasterthan100', 2), ('generator', 2), ('golang-solution', 2), ('iterative-dfs', 2), ('java ac solution', 2), ('postorder-traversal', 2), ('preorder', 2), ('python2', 2), ('recurision', 2), ('recursive solution', 2), ('recursively', 2), ('simple', 2), ('simple solution', 2), ('solution', 2), ('string', 2), ('swift5', 2), ('tree traversal', 2), ('#depth-first-search', 1), ('#intuition', 1), ('#java', 1), ('#python 3', 1), ('#recursion', 1), ('#stack', 1), ('#trees', 1), ('100 speed', 1), ('array', 1), ('binary tree', 1), ('binarytree', 1), ('brute force', 1), ('c', 1), ('c++ iterative sol', 1), ('c++ solution', 1), ('clean', 1), ('clean code', 1), ('clean-code', 1), ('comments', 1), ('depth-first search', 1), ('dfs traversal', 1), ('easy understand', 1), ('explaination', 1), ('fast', 1), ('fast and simple', 1), ('faster', 1), ('fastest', 1), ('functional-programming', 1), ('go', 1), ('go-routine', 1), ('go-solution', 1), ('graph', 1), ('graph theory', 1), ('in-order-dfs', 1), ('in-order-traversal', 1), ('inorder iterative', 1), ('inorder-traversal', 1), ('iterative', 1), ('iterator', 1), ('iterators', 1), ('javascript recursive', 1), ('javascript solution', 1), ('javascrpt', 1), ('js javascript', 1), ('kotlin', 1), ('leaf-similar trees', 1), ('leafsimilartrees', 1), ('linked-list', 1), ('list', 1), ('mental block', 1), ('morris', 1), ('mrmagician', 1), ('nano-static-stack', 1), ('no extra memory', 1), ('nodejs', 1), ('non-recursion', 1), ('php', 1), ('postorder', 1), ('preorder traversal', 1), ('pythonpython3', 1), ('queue-approach', 1), ('readable', 1), ('recurrance', 1), ('recursion vs iteration', 1), ('recursive-dfs', 1), ('shorter', 1), ('simple-solution', 1), ('stack-based', 1), ('stdequal', 1), ('straightforward', 1), ('stringbuilder', 1), ('traversal', 1), ('tree', 1), ('ultra easy', 1), ('upvote', 1), ('wow', 1)]"
470,Implement Rand10() Using Rand7(),https://leetcode.com/problems/implement-rand10-using-rand7,"Given the API rand7() that generates a uniform random integer in the range [1, 7], write a function rand10() that generates a uniform random integer in the range [1, 10]. You can only call the API rand7(), and you shouldn't call any other API. Please do not use a language's built-in random API.

Each test case will have one internal argument n, the number of times that your implemented function rand10() will be called while testing. Note that this is not an argument passed to rand10().

Follow up:


	What is the expected value for the number of calls to rand7() function?
	Could you minimize the number of calls to rand7()?","['random', 'rejection-sampling']",Medium,695,235,107044,49382,[],"[('c++', 12), ('python', 12), ('python 3', 10), ('c#', 4), ('cpp', 4), ('cpp solution', 4), ('easy', 4), ('java', 4), ('random', 4), ('javascript', 3), ('c', 2), ('easy-understanding', 2), ('golang', 2), ('one-liner', 2), ('python3', 2), ('random int', 2), ('rust', 2), ('simple solution', 2), ('too easy', 2), ('1 line', 1), ('1-line', 1), ('1-liner', 1), ('c++ solution', 1), ('constant-space', 1), ('constant-time', 1), ('discussion', 1), ('distribution', 1), ('doubts', 1), ('easy-to-understand', 1), ('easy-understand', 1), ('easytounderstand', 1), ('explained', 1), ('explained solution', 1), ('explanation of logic', 1), ('generalised-solution', 1), ('go', 1), ('issue', 1), ('iterative', 1), ('math solution', 1), ('not cheating', 1), ('o1', 1), ('php', 1), ('php solution', 1), ('probability', 1), ('pythonpython3', 1), ('questions', 1), ('random pick', 1), ('rnd', 1), ('ruby', 1), ('scala', 1), ('solution', 1), ('solved', 1), ('space', 1), ('speed', 1), ('time package', 1), ('typescript', 1), ('understandable', 1), ('video', 1), ('video solution', 1), ('video-explanation', 1), ('wrong-test-cases', 1)]"
871,Minimum Number of Refueling Stops,https://leetcode.com/problems/minimum-number-of-refueling-stops,"A car travels from a starting position to a destination which is target miles east of the starting position.

Along the way, there are gas stations.  Each station[i] represents a gas station that is station[i][0] miles east of the starting position, and has station[i][1] liters of gas.

The car starts with an infinite tank of gas, which initially has startFuel liters of fuel in it.  It uses 1 liter of gas per 1 mile that it drives.

When the car reaches a gas station, it may stop and refuel, transferring all the gas from the station into the car.

What is the least number of refueling stops the car must make in order to reach its destination?  If it cannot reach the destination, return -1.

Note that if the car reaches a gas station with 0 fuel left, the car can still refuel there.  If the car reaches the destination with 0 fuel left, it is still considered to have arrived.","['dynamic-programming', 'heap']",Hard,1183,26,88426,28777,[],"[('java', 11), ('priority queue', 10), ('greedy', 9), ('dp', 7), ('heap', 6), ('python', 4), ('c#', 3), ('c++', 3), ('cpp', 3), ('cpp solution', 3), ('memoization', 3), ('c++ code', 2), ('dynamic programming', 2), ('kotlin', 2), ('#871', 1), ('1d-dp', 1), ('approach-explained', 1), ('backtracking', 1), ('bfs', 1), ('discussion', 1), ('dp python', 1), ('dynamic-programming', 1), ('easy-to-understand', 1), ('easy-understanding', 1), ('easytounderstand', 1), ('explained', 1), ('fully-explained', 1), ('intuitive', 1), ('iterative', 1), ('java ac solution', 1), ('java-solution', 1), ('javascript', 1), ('logic explained', 1), ('max heap', 1), ('priorityqueue', 1), ('recursion', 1), ('refueling stop', 1), ('testcases', 1), ('tle', 1), ('zea7ot', 1)]"
870,Advantage Shuffle,https://leetcode.com/problems/advantage-shuffle,"Given two arrays A and B of equal size, the advantage of A with respect to B is the number of indices i for which A[i] > B[i].

Return any permutation of A that maximizes its advantage with respect to B.","['array', 'greedy']",Medium,994,65,88818,45077,[],"[('c++', 26), ('greedy', 25), ('java', 18), ('sort', 17), ('python', 15), ('binary-search', 12), ('javascript', 11), ('cpp', 10), ('python 3', 10), ('multiset', 9), ('explained', 8), ('rust', 6), ('sorted array', 6), ('c#', 5), ('cpp solution', 4), ('easy-understanding', 4), ('python3', 4), ('sorting', 4), ('two-pointers', 4), ('upperbound', 4), ('easy', 3), ('heap', 3), ('java-solution', 3), ('priority queue', 3), ('ruby', 3), ('stl', 3), ('treemap', 3), ('two pointers', 3), ('upper bound', 3), ('binary-tree', 2), ('bst', 2), ('comments-added', 2), ('cpp easy', 2), ('easy-to-understand', 2), ('go', 2), ('golang', 2), ('heaps', 2), ('in-place', 2), ('map', 2), ('short', 2), ('simple', 2), ('tree', 2), ('video-explanation', 2), ('advantageshuffle', 1), ('backtracking', 1), ('binary search', 1), ('binarysearch', 1), ('bisect', 1), ('brute-force', 1), ('c++ solution', 1), ('clean code', 1), ('clean-efficient-code', 1), ('commented', 1), ('comments added', 1), ('declarative', 1), ('deque', 1), ('dictionary', 1), ('easiest', 1), ('easy explanation', 1), ('easy-undestand', 1), ('es2015', 1), ('explained solution', 1), ('explanations', 1), ('fast', 1), ('fastest', 1), ('gaming', 1), ('gready', 1), ('greedy approach', 1), ('hash table', 1), ('heapq', 1), ('java ac solution', 1), ('js', 1), ('maps', 1), ('math', 1), ('optimisation', 1), ('optimized', 1), ('pairs', 1), ('performance', 1), ('priorityqueue', 1), ('pyhton 3', 1), ('quicksort', 1), ('set', 1), ('sorted', 1), ('sortingplus2pointer', 1), ('stacks', 1), ('swift', 1), ('time-limit-exceeded-ruby', 1), ('ting', 1), ('treeset', 1), ('typescript', 1), ('zip', 1)]"
869,Reordered Power of 2,https://leetcode.com/problems/reordered-power-of-2,"You are given an integer n. We reorder the digits in any order (including the original order) such that the leading digit is not zero.

Return true if and only if we can do this so that the resulting number is a power of two.",['math'],Medium,432,148,58798,36002,[],"[('c++', 32), ('java', 18), ('cpp', 14), ('python', 13), ('python3', 10), ('easy-understanding', 9), ('javascript', 9), ('c#', 7), ('hashmap', 6), ('brute force', 4), ('easy-to-understand', 4), ('explained', 4), ('java-solution', 4), ('math', 4), ('cpp solution', 3), ('digits', 3), ('fast', 3), ('permutations', 3), ('ruby', 3), ('rust', 3), ('arrays', 2), ('backtracking', 2), ('bit-manipulation', 2), ('bitcount', 2), ('commented', 2), ('comments-added', 2), ('count', 2), ('easy', 2), ('frequency count', 2), ('go', 2), ('golang', 2), ('map', 2), ('minmax', 2), ('multiset', 2), ('python 3', 2), ('set', 2), ('simple', 2), ('sort', 2), ('video-explanation', 2), ('#easy-understanding', 1), ('100 faster', 1), ('100 faster cpp', 1), ('algorithms', 1), ('anagram', 1), ('array', 1), ('beginner friendly', 1), ('bit manipulation', 1), ('bit shifting', 1), ('bitwise operator', 1), ('bytes', 1), ('c++ solution', 1), ('c++17', 1), ('clean code', 1), ('constant', 1), ('constant memory', 1), ('constant time', 1), ('counter', 1), ('counting', 1), ('csharp', 1), ('depth first search', 1), ('east-understanding', 1), ('efficent approach', 1), ('es2015', 1), ('explanation', 1), ('explanation of logic', 1), ('faster than 100.00', 1), ('frequencycounting', 1), ('hash table', 1), ('hashset', 1), ('interview-friendly', 1), ('java ac solution', 1), ('java simple', 1), ('kotlin', 1), ('logarithmic time', 1), ('multiple-ways', 1), ('naive', 1), ('no sort', 1), ('number', 1), ('number representation', 1), ('number theory', 1), ('one-liner', 1), ('optimisation', 1), ('performance', 1), ('php', 1), ('precacluation', 1), ('quotient remainder', 1), ('recursion', 1), ('recursive', 1), ('reorderedpowerof2', 1), ('sorted array', 1), ('sorting', 1), ('standard-library', 1), ('string', 1), ('swift', 1), ('typescript', 1), ('understandable', 1)]"
868,Binary Gap,https://leetcode.com/problems/binary-gap,"Given a positive integer n, find and return the longest distance between any two adjacent 1's in the binary representation of n. If there are no two adjacent 1's, return 0.

Two 1's are adjacent if there are only 0's separating them (possibly no 0's). The distance between two 1's is the absolute difference between their bit positions. For example, the two 1's in ""1001"" have a distance of 3.",['math'],Easy,296,554,77031,47007,[],"[('c++', 24), ('cpp', 14), ('python', 14), ('python 3', 12), ('bit manipulation', 10), ('java', 10), ('javascript', 9), ('cpp solution', 6), ('binary gap', 5), ('easy-understanding', 5), ('python3', 4), ('0ms', 3), ('bitwise operation', 3), ('easy', 3), ('java-solution', 3), ('bit-shift', 2), ('bitwise', 2), ('c', 2), ('c#', 2), ('easytounderstand', 2), ('golang', 2), ('ruby', 2), ('0ms runtime', 1), ('1-liner', 1), ('100 faster runtime', 1), ('100 memory', 1), ('100 speed', 1), ('2 pointers', 1), ('bitmanipulation', 1), ('bitset library', 1), ('bitwise-operators', 1), ('c++ code', 1), ('c++ solution', 1), ('commented', 1), ('concise', 1), ('concise-solution', 1), ('constant space', 1), ('constant time', 1), ('csharp', 1), ('easiest', 1), ('easy-solition', 1), ('easy-undestand', 1), ('expalanation', 1), ('explained', 1), ('explanation', 1), ('fast and simple', 1), ('fast-solution', 1), ('fastest', 1), ('fastest c++ solution', 1), ('greedy', 1), ('greedy algorithm', 1), ('kotlin', 1), ('linear-scan', 1), ('log n', 1), ('logn', 1), ('math', 1), ('naive', 1), ('one pass solution', 1), ('one-liner', 1), ('one-pass', 1), ('oneline', 1), ('rust', 1), ('simple solution', 1), ('simple-solution', 1), ('sliding window', 1), ('solution', 1), ('swift', 1), ('swift5', 1), ('tricky', 1)]"
867,Transpose Matrix,https://leetcode.com/problems/transpose-matrix,"Given a 2D integer array matrix, return the transpose of matrix.

The transpose of a matrix is the matrix flipped over its main diagonal, switching the matrix's row and column indices.",['array'],Easy,646,330,159681,98878,[],"[('python', 20), ('c++', 17), ('java', 16), ('cpp', 15), ('javascript', 15), ('python 3', 11), ('easy-understanding', 8), ('python3', 8), ('golang', 5), ('java-solution', 5), ('matrix', 5), ('one-liner', 5), ('cpp solution', 4), ('easy', 4), ('c#', 3), ('swift', 3), ('array', 2), ('c', 2), ('easy to understand', 2), ('easy-undestand', 2), ('easytounderstand', 2), ('fast and simple', 2), ('golang-solution', 2), ('numpy', 2), ('php', 2), ('transpose', 2), ('0ms-solution', 1), ('1-line solution', 1), ('2d-array', 1), ('beginner friendly', 1), ('clean code', 1), ('commented', 1), ('cpp easy', 1), ('csharp', 1), ('dictionary', 1), ('easy-to-understand', 1), ('explained', 1), ('fast', 1), ('fast-solution', 1), ('functional', 1), ('grid', 1), ('hashmap', 1), ('intutive', 1), ('javascriptes6', 1), ('js', 1), ('js javascript', 1), ('kotlin', 1), ('leetcode', 1), ('list-comprehension', 1), ('map', 1), ('oneline', 1), ('optimal', 1), ('python2', 1), ('ruby', 1), ('simple-solution', 1), ('stream', 1), ('swift5', 1), ('transpose matrix', 1), ('typo', 1), ('ultra easy', 1), ('understandable', 1), ('zip', 1)]"
866,Prime Palindrome,https://leetcode.com/problems/prime-palindrome,"Find the smallest prime palindrome greater than or equal to N.

Recall that a number is prime if it's only divisors are 1 and itself, and it is greater than 1. 

For example, 2,3,5,7,11 and 13 are primes.

Recall that a number is a palindrome if it reads the same from left to right as it does from right to left. 

For example, 12321 is a palindrome.",['math'],Medium,242,633,86350,21589,[],"[('palindrome', 6), ('python3', 5), ('prime', 3), ('python', 3), ('c++', 2), ('cpp', 2), ('math', 2), ('pretty fast', 2), ('python 3', 2), ('c#', 1), ('comments-added', 1), ('cpp-solution', 1), ('easytounderstand', 1), ('even', 1), ('even odd', 1), ('explained', 1), ('explanation of logic', 1), ('fast', 1), ('golang', 1), ('java', 1), ('javascript', 1), ('prime-number', 1), ('string', 1), ('string-to-integer', 1), ('swift', 1)]"
865,Smallest Subtree with all the Deepest Nodes,https://leetcode.com/problems/smallest-subtree-with-all-the-deepest-nodes,"Given the root of a binary tree, the depth of each node is the shortest distance to the root.

Return the smallest subtree such that it contains all the deepest nodes in the original tree.

A node is called the deepest if it has the largest depth possible among any node in the entire tree.

The subtree of a node is tree consisting of that node, plus the set of all descendants of that node.

Note: This question is the same as 1123: https://leetcode.com/problems/lowest-common-ancestor-of-deepest-leaves/","['tree', 'depth-first-search', 'breadth-first-search', 'recursion']",Medium,1310,296,113891,74230,[],"[('c++', 21), ('java', 19), ('dfs', 18), ('java-solution', 10), ('recursion', 10), ('bfs', 9), ('javascript', 8), ('python', 8), ('c#', 7), ('cpp', 7), ('python 3', 6), ('golang', 4), ('recursive', 4), ('depth first search', 3), ('easy-to-understand', 3), ('easy-understanding', 3), ('go-solution', 3), ('golang-solution', 3), ('iterative', 3), ('lca', 3), ('postorder-traversal', 3), ('python3', 3), ('swift', 3), ('binary-tree', 2), ('cpp solution', 2), ('dfs simple solution', 2), ('fastest solution', 2), ('go', 2), ('linear time', 2), ('simple', 2), ('0ms', 1), ('100 beat', 1), ('100 faster', 1), ('100 memory', 1), ('100 speed', 1), ('bfs python', 1), ('bfs-dfs', 1), ('c++ solution', 1), ('comments-added', 1), ('concise', 1), ('cpp easy', 1), ('csharp', 1), ('depth-first-search', 1), ('dfs recursive', 1), ('dfs simple', 1), ('dfs-tree', 1), ('dictionary', 1), ('dp on trees', 1), ('easy', 1), ('efficient solution', 1), ('elegant solution', 1), ('euler-walk', 1), ('eulerian path', 1), ('eulerian-path', 1), ('explained', 1), ('explained solution', 1), ('explanation of logic', 1), ('fast-solution', 1), ('fasterthan100', 1), ('fastest', 1), ('fastest java solution', 1), ('graph', 1), ('graph theory', 1), ('hashmap', 1), ('hashset', 1), ('interview tips', 1), ('javascript recursive', 1), ('lcs', 1), ('level-order', 1), ('level-order-traversal', 1), ('list comparision', 1), ('one pass solution', 1), ('postorder traversal', 1), ('python bfs', 1), ('python deque', 1), ('python3.8', 1), ('recrusive', 1), ('recursive dfs', 1), ('recursively', 1), ('ruby', 1), ('set', 1), ('space optimized', 1), ('stateless', 1), ('swift5', 1), ('swiftsolution', 1), ('tree', 1), ('tree traversal', 1), ('trees', 1), ('typescript', 1), ('video explaination', 1), ('video explanation', 1)]"
864,Shortest Path to Get All Keys,https://leetcode.com/problems/shortest-path-to-get-all-keys,"We are given a 2-dimensional grid. ""."" is an empty cell, ""#"" is a wall, ""@"" is the starting point, (""a"", ""b"", ...) are keys, and (""A"", ""B"", ...) are locks.

We start at the starting point, and one move consists of walking one space in one of the 4 cardinal directions.  We cannot walk outside the grid, or walk into a wall.  If we walk over a key, we pick it up.  We can't walk over a lock unless we have the corresponding key.

For some 1 <= K <= 6, there is exactly one lowercase and one uppercase letter of the first K letters of the English alphabet in the grid.  This means that there is exactly one key for each lock, and one lock for each key; and also that the letters used to represent the keys and locks were chosen in the same order as the English alphabet.

Return the lowest number of moves to acquire all keys.  If it's impossible, return -1.","['heap', 'breadth-first-search']",Hard,557,20,37730,16020,[],"[('bfs', 8), ('breadth first search', 4), ('c#', 4), ('python', 4), ('bitmask', 3), ('java', 2), ('astar', 1), ('bfs simple solution', 1), ('bit manipulation', 1), ('bitmanipulation', 1), ('bitmap', 1), ('c', 1), ('c++', 1), ('clean code', 1), ('easy', 1), ('easy to understand', 1), ('expalanation', 1), ('java-solution', 1), ('javscript', 1), ('optimization', 1), ('python 3', 1), ('python deque', 1), ('very easy to understand', 1)]"
710,Random Pick with Blacklist,https://leetcode.com/problems/random-pick-with-blacklist,"Given a blacklist B containing unique integers from [0, N), write a function to return a uniform random integer from [0, N) which is NOT in B.

Optimize it such that it minimizes the call to system’s Math.random().

Note:


	1 <= N <= 1000000000
	0 <= B.length < min(100000, N)
	[0, N) does NOT include N. See interval notation.","['hash-table', 'binary-search', 'sort', 'random']",Hard,427,76,56009,18550,"[""Random Pick Index"", ""Random Pick with Weight""]","[('c#', 2), ('c++', 2), ('cpp', 2), ('golang', 2), ('binary-search', 1), ('c++ code', 1), ('c++ solution', 1), ('cpp solution', 1), ('functional programming', 1), ('golang-solution', 1), ('hashmap', 1), ('java', 1), ('javascript', 1), ('python', 1), ('python3', 1), ('radix-sort', 1), ('random pick', 1), ('scala', 1), ('set', 1), ('sorting', 1), ('unorderedset', 1)]"
863,All Nodes Distance K in Binary Tree,https://leetcode.com/problems/all-nodes-distance-k-in-binary-tree,"We are given a binary tree (with root node root), a target node, and an integer value K.

Return a list of the values of all nodes that have a distance K from the target node.  The answer can be returned in any order.","['tree', 'depth-first-search', 'breadth-first-search']",Medium,3512,73,228553,133197,[],"[('bfs', 61), ('dfs', 47), ('c++', 41), ('java', 28), ('python', 25), ('cpp', 23), ('graph', 23), ('recursion', 21), ('python 3', 14), ('hashmap', 12), ('c#', 10), ('javascript', 9), ('easy-understanding', 8), ('binary-tree', 7), ('dfs-bfs', 7), ('breadth first search', 6), ('java-solution', 6), ('tree', 6), ('trees', 6), ('c++ code', 5), ('cpp easy', 5), ('cpp solution', 5), ('easy', 5), ('golang', 5), ('python3', 5), ('dfs simple solution', 4), ('javascript solution', 4), ('queue', 4), ('bfs simple solution', 3), ('breadth-first-search', 3), ('depth first search', 3), ('dfs-tree', 3), ('js', 3), ('recursive', 3), ('ruby', 3), ('stack', 3), ('#bfs', 2), ('#dfs', 2), ('c++14', 2), ('dfs recursive', 2), ('dfs solution', 2), ('fast and simple', 2), ('go', 2), ('intuitive', 2), ('keep it simple', 2), ('kotlin', 2), ('map', 2), ('python2', 2), ('scala', 2), ('set', 2), ('tree-traversal', 2), ('#csharp', 1), ('#python', 1), ('#trees', 1), ('100 space', 1), ('4ms', 1), ('allnodesdistkinbinarytree', 1), ('amazon sde2', 1), ('ancestry', 1), ('backtracking', 1), ('basic', 1), ('begineer', 1), ('bfs python', 1), ('bfs-java', 1), ('binary-tree-to-graph', 1), ('breadth first traversal', 1), ('bst', 1), ('burn tree', 1), ('c++ monotonic stack', 1), ('c++11', 1), ('clear-understanding', 1), ('commented code', 1), ('commnted', 1), ('compiler-issue', 1), ('complexity', 1), ('constant space', 1), ('conversion', 1), ('cpp with explanation', 1), ('cpp-solution', 1), ('deep-first-search', 1), ('depth-first search', 1), ('depth-first-search', 1), ('detailed explanation', 1), ('dfs traversal', 1), ('dfs-recursive', 1), ('dfs+bfs', 1), ('dictionary', 1), ('doubt', 1), ('easiest', 1), ('easy solution', 1), ('easy to understand', 1), ('easy understand', 1), ('easy-to-understand', 1), ('easy-undestand', 1), ('easysolution', 1), ('easytounderstand', 1), ('explaination', 1), ('explained', 1), ('explained solution', 1), ('explanation with code', 1), ('faster than 100.00', 1), ('getpath', 1), ('go lang', 1), ('hashing', 1), ('intuition', 1), ('java ac solution', 1), ('javascrip', 1), ('klevel', 1), ('kotlinvim', 1), ('leetcode-solution', 1), ('level-order-traversal', 1), ('linear time', 1), ('lowest common ancestor', 1), ('nodetoroot', 1), ('parent', 1), ('parent pointer', 1), ('parents map', 1), ('path-tracking', 1), ('recursively', 1), ('recurssion', 1), ('recusive', 1), ('scalable-solution', 1), ('similar', 1), ('simple', 1), ('simple clear c++ solution', 1), ('solution', 1), ('stack-implementation', 1), ('swift', 1), ('tree traversal', 1), ('unordered', 1), ('unordered map', 1), ('unorderedmap', 1), ('unordermap', 1), ('very-intuitive', 1), ('video', 1)]"
862,Shortest Subarray with Sum at Least K,https://leetcode.com/problems/shortest-subarray-with-sum-at-least-k,"Return the length of the shortest, non-empty, contiguous subarray of A with sum at least K.

If there is no non-empty subarray with sum at least K, return -1.","['binary-search', 'queue']",Hard,1755,39,181554,45980,[],"[('python 3', 4), ('deque', 3), ('java', 3), ('monotone queue', 3), ('python', 3), ('java-solution', 2), ('prefix sum', 2), ('python3', 2), ('queue', 2), ('binary-search', 1), ('bug', 1), ('bug in leetcode', 1), ('c++', 1), ('cpp', 1), ('cpp solution', 1), ('duplicate', 1), ('easy-to-understand', 1), ('easy-understanding', 1), ('easy-undestand', 1), ('golang', 1), ('heapq', 1), ('monotonic deque', 1), ('monotonic stack', 1), ('multi-sets', 1), ('multimap', 1), ('priority queue', 1), ('priorityqueue', 1), ('remove-negatives', 1), ('sliding-window', 1), ('stack', 1), ('thought-process', 1), ('wrong output', 1)]"
861,Score After Flipping Matrix,https://leetcode.com/problems/score-after-flipping-matrix,"We have a two dimensional matrix A where each value is 0 or 1.

A move consists of choosing any row or column, and toggling each value in that row or column: changing all 0s to 1s, and all 1s to 0s.

After making any number of moves, every row of this matrix is interpreted as a binary number, and the score of the matrix is the sum of these numbers.

Return the highest possible score.",['greedy'],Medium,675,143,36365,26852,[],"[('greedy', 10), ('c++', 8), ('javascript', 8), ('python 3', 7), ('matrix', 6), ('python', 6), ('java', 5), ('python3', 5), ('cpp', 4), ('bit manipulation', 2), ('c#', 2), ('easy-understanding', 2), ('simple', 2), ('arrays', 1), ('beginner friendly', 1), ('binary', 1), ('bitwise', 1), ('bitwise operation', 1), ('bitwise-operators', 1), ('brute force', 1), ('commentary', 1), ('comments-added', 1), ('cpp solution', 1), ('easy-undestand', 1), ('error message', 1), ('explanation', 1), ('explanations', 1), ('explanatory comments', 1), ('fastest', 1), ('flip', 1), ('golang', 1), ('good variable names', 1), ('greedy algorithm', 1), ('greedy approach', 1), ('intuitive', 1), ('js', 1), ('js javascript', 1), ('logical thinking', 1), ('object-oriented design', 1), ('two-lines', 1), ('zip', 1)]"
860,Lemonade Change,https://leetcode.com/problems/lemonade-change,"At a lemonade stand, each lemonade costs $5. 

Customers are standing in a queue to buy from you, and order one at a time (in the order specified by bills).

Each customer will only buy one lemonade and pay with either a $5, $10, or $20 bill.  You must provide the correct change to each customer, so that the net transaction is that the customer pays $5.

Note that you don't have any change in hand at first.

Return true if and only if you can provide every customer with correct change.",['greedy'],Easy,833,94,137701,71462,[],"[('c++', 27), ('javascript', 16), ('python', 13), ('cpp', 12), ('greedy', 12), ('java', 12), ('python3', 10), ('greedy approach', 9), ('python 3', 9), ('easy-understanding', 6), ('greedy algorithm', 5), ('java-solution', 5), ('cpp solution', 4), ('easy', 4), ('c++ code', 3), ('golang', 3), ('array', 2), ('c#', 2), ('hashmap', 2), ('simulation', 2), ('100 space', 1), ('accepted', 1), ('amazon', 1), ('best explanation', 1), ('c', 1), ('c++ solution', 1), ('clean code', 1), ('clearly', 1), ('commented', 1), ('comments added', 1), ('constant space', 1), ('cpp easy', 1), ('csharp', 1), ('dictionary', 1), ('easy to understand', 1), ('easy-undestand', 1), ('easytounderstand', 1), ('efficient', 1), ('explanation', 1), ('generalized', 1), ('go', 1), ('golang-solution', 1), ('if-else', 1), ('implementation', 1), ('intuitive', 1), ('java ac solution', 1), ('javascriptes6', 1), ('kotlin', 1), ('linear time', 1), ('linkedhashmap', 1), ('list', 1), ('logic explained', 1), ('optimized', 1), ('python2', 1), ('pythonpython3', 1), ('ruby', 1), ('rust', 1), ('simple', 1), ('simple-solution', 1), ('stacks', 1)]"
859,Buddy Strings,https://leetcode.com/problems/buddy-strings,"Given two strings a and b, return true if you can swap two letters in a so the result is equal to b, otherwise, return false.

Swapping letters is defined as taking two indices i and j (0-indexed) such that i != j and swapping the characters at a[i] and a[j].


	For example, swapping at indices 0 and 2 in ""abcd"" results in ""cbad"".",['string'],Easy,949,685,310079,90045,"[""Determine if Two Strings Are Close"", ""Check if One String Swap Can Make Strings Equal""]","[('c++', 32), ('java', 23), ('python 3', 20), ('cpp', 17), ('python', 15), ('easy-understanding', 13), ('javascript', 12), ('c#', 10), ('java-solution', 10), ('python3', 7), ('string', 7), ('easy-to-understand', 5), ('easy-undestand', 5), ('explained', 5), ('cpp solution', 4), ('easy', 4), ('golang', 3), ('hashmap', 3), ('linear time', 3), ('buddy string', 2), ('c', 2), ('c programming', 2), ('comments-added', 2), ('easy to understand', 2), ('easytounderstand', 2), ('iteration', 2), ('kotlin', 2), ('map', 2), ('one pass solution', 2), ('readable', 2), ('ruby', 2), ('rust', 2), ('scala', 2), ('set', 2), ('simple solution', 2), ('#cpp', 1), ('#easy-understand', 1), ('#kdohyeon', 1), ('1ms', 1), ('algorithms', 1), ('algosexplained', 1), ('array-list', 1), ('awesome-samriddhi', 1), ('beats 100 percent', 1), ('beginner friendly', 1), ('beginnerfriendly', 1), ('brute force', 1), ('brute force to optimal', 1), ('brute-force', 1), ('buddystrings', 1), ('c++ solution', 1), ('c++11', 1), ('char', 1), ('char compare', 1), ('character', 1), ('clean code', 1), ('clear', 1), ('clear explanation', 1), ('clear solution', 1), ('comments', 1), ('concise', 1), ('counters', 1), ('counting algorithm', 1), ('easy understanding', 1), ('easy-solition', 1), ('edgecases', 1), ('effecient', 1), ('enum', 1), ('expalanation', 1), ('explanation of logic', 1), ('explanatory comments', 1), ('fast', 1), ('fast and simple', 1), ('frequency-count', 1), ('fully-commented', 1), ('go', 1), ('good variable names', 1), ('hash', 1), ('hashset', 1), ('intuition', 1), ('intuitive', 1), ('java solution', 1), ('javascript solution', 1), ('kotlinvim', 1), ('python2', 1), ('ritik', 1), ('simple', 1), ('simple and fast', 1), ('simple clear c++ solution', 1), ('string parsing', 1), ('string-operation', 1), ('strings', 1), ('structured code', 1), ('swift', 1), ('swift5', 1), ('two cpp solutions', 1), ('two-pointer', 1), ('typescript', 1), ('ultra easy', 1), ('unit-test', 1), ('vector', 1), ('video explaination', 1), ('video solution', 1), ('video-explanation', 1), ('youtube', 1)]"
858,Mirror Reflection,https://leetcode.com/problems/mirror-reflection,"There is a special square room with mirrors on each of the four walls.  Except for the southwest corner, there are receptors on each of the remaining corners, numbered 0, 1, and 2.

The square room has walls of length p, and a laser ray from the southwest corner first meets the east wall at a distance q from the 0th receptor.

Return the number of the receptor that the ray meets first.  (It is guaranteed that the ray will meet a receptor eventually.)",['math'],Medium,328,662,40686,24256,[],"[('c++', 8), ('java', 6), ('math', 5), ('python 3', 5), ('c#', 4), ('cpp', 4), ('python', 4), ('gcd', 3), ('golang', 3), ('javascript', 3), ('python3', 3), ('cpp solution', 2), ('easy', 2), ('golang-solution', 2), ('javascript solution', 2), ('ruby', 2), ('1liner', 1), ('bit manipulation', 1), ('c', 1), ('c++ solution', 1), ('c++11', 1), ('code-golf', 1), ('codegolf', 1), ('comments-added', 1), ('commetend', 1), ('csharp', 1), ('easy-to-understand', 1), ('easytounderstand', 1), ('explained', 1), ('explanations', 1), ('fastest', 1), ('geometry', 1), ('go-solution', 1), ('golf', 1), ('golfing', 1), ('illustrated', 1), ('java ac solution', 1), ('java-solution', 1), ('kotlin', 1), ('kotlin-solution', 1), ('php', 1), ('php solution', 1), ('recursion', 1), ('rust', 1), ('simple', 1), ('simulation', 1), ('swift', 1), ('two-lines', 1), ('understandable', 1)]"
857,Minimum Cost to Hire K Workers,https://leetcode.com/problems/minimum-cost-to-hire-k-workers,"There are N workers.  The i-th worker has a quality[i] and a minimum wage expectation wage[i].

Now we want to hire exactly K workers to form a paid group.  When hiring a group of K workers, we must pay them according to the following rules:


	Every worker in the paid group should be paid in the ratio of their quality compared to other workers in the paid group.
	Every worker in the paid group must be paid at least their minimum wage expectation.


Return the least amount of money needed to form a paid group satisfying the above conditions.",['heap'],Hard,1156,138,76033,38483,[],"[('heap', 3), ('c#', 2), ('c++', 2), ('golang', 2), ('heapq', 2), ('priority queue', 2), ('c++ code', 1), ('cpp', 1), ('explained solution', 1), ('f5 networks', 1), ('greedy', 1), ('heaps algorithm', 1), ('javascript', 1), ('mincosttohirekworkers', 1), ('python', 1)]"
856,Score of Parentheses,https://leetcode.com/problems/score-of-parentheses,"Given a balanced parentheses string S, compute the score of the string based on the following rule:


	() has score 1
	AB has score A + B, where A and B are balanced parentheses strings.
	(A) has score 2 * A, where A is a balanced parentheses string.","['string', 'stack']",Medium,2147,69,114130,74092,[],"[('c++', 36), ('stack', 33), ('cpp', 21), ('java', 17), ('recursion', 17), ('stacks', 17), ('python', 16), ('javascript', 9), ('python3', 8), ('c#', 7), ('python 3', 7), ('easy-to-understand', 6), ('cpp solution', 5), ('java-solution', 5), ('easy', 4), ('swift', 4), ('c++ code', 3), ('explained', 3), ('linear time', 3), ('recursive', 3), ('string', 3), ('0ms', 2), ('c', 2), ('constant memory', 2), ('dfs', 2), ('easy-understanding', 2), ('easytounderstand', 2), ('iterative', 2), ('linear', 2), ('math', 2), ('parentheses', 2), ('recurision', 2), ('rust', 2), ('.net', 1), ('100 beat', 1), ('100 faster cpp', 1), ('100 speed', 1), ('accepted', 1), ('binary', 1), ('bit manipulation', 1), ('c code', 1), ('c programming', 1), ('c++ solution', 1), ('clean', 1), ('clear explanation', 1), ('clear-understanding', 1), ('code comments', 1), ('commented', 1), ('counting', 1), ('cplusplus', 1), ('cpp easy', 1), ('depth first search', 1), ('explanation', 1), ('explanation with code', 1), ('fast', 1), ('functional programming', 1), ('golang', 1), ('iteration', 1), ('iteration vs recursion', 1), ('iterative vs recursive', 1), ('java ac solution', 1), ('java solution', 1), ('n-ary tree', 1), ('optimisation', 1), ('parser', 1), ('performance', 1), ('python3.8', 1), ('queue', 1), ('recursion formula', 1), ('recursion vs iteration', 1), ('recursive vs iterative', 1), ('recursive-descent', 1), ('reference', 1), ('ruby', 1), ('scala', 1), ('scan-line', 1), ('scoreofparentheses', 1), ('self explanatory', 1), ('simple', 1), ('simulation', 1), ('solution', 1), ('stack of objects', 1), ('stack-based', 1), ('stringview', 1), ('tree', 1), ('typescript', 1), ('video-explanation', 1)]"
855,Exam Room,https://leetcode.com/problems/exam-room,"In an exam room, there are N seats in a single row, numbered 0, 1, 2, ..., N-1.

When a student enters the room, they must sit in the seat that maximizes the distance to the closest person.  If there are multiple such seats, they sit in the seat with the lowest number.  (Also, if no one is in the room, then the student sits at seat number 0.)

Return a class ExamRoom(int N) that exposes two functions: ExamRoom.seat() returning an int representing what seat the student sat in, and ExamRoom.leave(int p) representing that the student in seat number p now leaves the room.  It is guaranteed that any calls to ExamRoom.leave(p) have a student sitting in seat p.",['ordered-map'],Medium,725,299,87500,38094,"[""Maximize Distance to Closest Person""]","[('java', 2), ('avl tree', 1), ('binary search', 1), ('bisect', 1), ('black-red', 1), ('cpp solution', 1), ('golang', 1), ('heap', 1), ('indexed-priority-queue', 1), ('javascript', 1), ('python', 1), ('pythonpython3', 1), ('sorted-list', 1), ('treemap', 1), ('trees', 1), ('treeset', 1)]"
854,K-Similar Strings,https://leetcode.com/problems/k-similar-strings,"Strings s1 and s2 are k-similar (for some non-negative integer k) if we can swap the positions of two letters in s1 exactly k times so that the resulting string equals s2.

Given two anagrams s1 and s2, return the smallest k for which s1 and s2 are k-similar.","['breadth-first-search', 'graph']",Hard,575,44,61363,23761,"[""Couples Holding Hands""]","[('bfs', 12), ('python', 7), ('javascript', 4), ('python 3', 4), ('backtracking', 3), ('c++', 3), ('c#', 2), ('dp', 2), ('python3', 2), ('bitmask', 1), ('bitmasking', 1), ('breadth first search', 1), ('breadth-first search', 1), ('brute force', 1), ('c++ code', 1), ('c++14', 1), ('cpp', 1), ('cycle of min length', 1), ('dfs', 1), ('dfs recursive', 1), ('dfs with memo', 1), ('easy-understanding', 1), ('explain', 1), ('explained', 1), ('fast', 1), ('graph', 1), ('greedy', 1), ('high performance', 1), ('java', 1), ('k-smilar-strings', 1), ('kotlin', 1), ('n-sum', 1), ('pruning', 1), ('recursive dp', 1), ('string', 1), ('three-sum', 1), ('two-sum', 1), ('video-explanation', 1)]"
853,Car Fleet,https://leetcode.com/problems/car-fleet,"N cars are going to the same destination along a one lane road.  The destination is target miles away.

Each car i has a constant speed speed[i] (in miles per hour), and initial position position[i] miles towards the target along the road.

A car can never pass another car ahead of it, but it can catch up to it, and drive bumper to bumper at the same speed.

The distance between these two cars is ignored - they are assumed to have the same position.

A car fleet is some non-empty set of cars driving at the same position and same speed.  Note that a single car is also a car fleet.

If a car catches up to a car fleet right at the destination point, it will still be considered as one car fleet.


How many car fleets will arrive at the destination?",['sort'],Medium,686,277,92343,41202,"[""Car Fleet II""]","[('c++', 5), ('python', 5), ('python3', 5), ('c#', 3), ('java', 3), ('python 3', 3), ('sort', 3), ('sorting', 3), ('cpp', 2), ('javascript', 2), ('map', 2), ('arrival time', 1), ('concise', 1), ('detailed explanation', 1), ('easy-understanding', 1), ('efficient', 1), ('fast', 1), ('faster than 75', 1), ('golang', 1), ('heap', 1), ('intuitive', 1), ('ruby', 1), ('sorted array', 1)]"
852,Peak Index in a Mountain Array,https://leetcode.com/problems/peak-index-in-a-mountain-array,"Let's call an array arr a mountain if the following properties hold:


	arr.length >= 3
	There exists some i with 0 < i < arr.length - 1 such that:
	
		arr[0] < arr[1] < ... arr[i-1] < arr[i] 
		arr[i] > arr[i+1] > ... > arr[arr.length - 1]
	
	


Given an integer array arr that is guaranteed to be a mountain, return any i such that arr[0] < arr[1] < ... arr[i - 1] < arr[i] > arr[i + 1] > ... > arr[arr.length - 1].",['binary-search'],Easy,1074,1368,312267,224043,"[""Find Peak Element"", ""Find in Mountain Array"", ""Minimum Number of Removals to Make Mountain Array""]","[('java', 37), ('binary-search', 36), ('javascript', 24), ('c++', 22), ('python', 17), ('cpp', 15), ('python 3', 15), ('python3', 12), ('binary search', 11), ('java-solution', 11), ('binarysearch', 9), ('easy-understanding', 8), ('c#', 7), ('cpp solution', 6), ('golang', 6), ('one-liner', 6), ('simple', 5), ('easy', 4), ('easy-to-understand', 4), ('js', 4), ('array', 3), ('c++11', 3), ('linear seach', 3), ('#python', 2), ('100 speed', 2), ('beginner friendly', 2), ('binary search algorithm', 2), ('c', 2), ('comments-added', 2), ('easy to understand', 2), ('easy-undestand', 2), ('easytounderstand', 2), ('fast-solution', 2), ('github', 2), ('golang-solution', 2), ('iteration', 2), ('javascript solution', 2), ('linear time', 2), ('mountain peak', 2), ('one line', 2), ('rust', 2), ('simple solution', 2), ('two solutions', 2), ('video', 2), ('#binary-search', 1), ('#binarysearch', 1), ('#cache', 1), ('#caching', 1), ('#easy-understand', 1), ('#linearsearch', 1), ('#memory', 1), ('#python 3', 1), ('#python3', 1), ('0ms', 1), ('1-line', 1), ('100 faster', 1), ('2 lines', 1), ('2 pointer', 1), ('2 solutions', 1), ('3 liner', 1), ('beats 99', 1), ('binary-search-explanation', 1), ('binarysearh', 1), ('brute', 1), ('brute force', 1), ('c programming', 1), ('c#-solution', 1), ('c++ code', 1), ('c++14', 1), ('clean code', 1), ('clear', 1), ('commented', 1), ('constant space', 1), ('cpp easy', 1), ('csharp', 1), ('distance', 1), ('divide and conquer', 1), ('easiest', 1), ('easy to understandd', 1), ('easy-solition', 1), ('easytoundersatand', 1), ('explaination', 1), ('fast', 1), ('fast and simple', 1), ('fast-sol', 1), ('faster', 1), ('faster than 100.00', 1), ('faster than 95.46', 1), ('go', 1), ('intuitive', 1), ('java ac solution', 1), ('java solution', 1), ('javascrip', 1), ('javascriptes6', 1), ('kotlin', 1), ('kotlin-solution', 1), ('linear search', 1), ('local maximum', 1), ('logarithmic-time', 1), ('max', 1), ('max element', 1), ('max element index', 1), ('maximum', 1), ('mrmagician', 1), ('one liner', 1), ('one liners', 1), ('oneline', 1), ('optimized', 1), ('python2', 1), ('readable', 1), ('recurision', 1), ('recursion', 1), ('recursive', 1), ('reduce', 1), ('scan-line', 1), ('search for position', 1), ('simple clear c++ solution', 1), ('simplest', 1), ('swift', 1), ('swift5', 1), ('test-cases', 1), ('two-lines', 1), ('two-pointers', 1), ('typescript', 1), ('upvote', 1), ('vector', 1), ('very fast', 1)]"
851,Loud and Rich,https://leetcode.com/problems/loud-and-rich,"In a group of N people (labelled 0, 1, 2, ..., N-1), each person has different amounts of money, and different levels of quietness.

For convenience, we'll call the person with label x, simply ""person x"".

We'll say that richer[i] = [x, y] if person x definitely has more money than person y.  Note that richer may only be a subset of valid observations.

Also, we'll say quiet[x] = q if person x has quietness q.

Now, return answer, where answer[x] = y if y is the least quiet person (that is, the person y with the smallest value of quiet[y]), among all people who definitely have equal to or more money than person x.",['depth-first-search'],Medium,327,337,28777,15236,[],"[('dfs', 10), ('c++', 7), ('cpp', 5), ('python', 4), ('python 3', 4), ('c#', 2), ('depth first search', 2), ('memoization', 2), ('code', 1), ('dfs with memo', 1), ('java', 1), ('javascript', 1), ('lru-cache', 1), ('python3', 1)]"
850,Rectangle Area II,https://leetcode.com/problems/rectangle-area-ii,"We are given a list of (axis-aligned) rectangles. Each rectangle[i] = [xi1, yi1, xi2, yi2] , where (xi1, yi1) are the coordinates of the bottom-left corner, and (xi2, yi2) are the coordinates of the top-right corner of the ith rectangle.

Find the total area covered by all rectangles in the plane. Since the answer may be too large, return it modulo 109 + 7.","['segment-tree', 'line-sweep']",Hard,458,32,32000,15513,[],"[('c++ solution', 1), ('compression', 1)]"
849,Maximize Distance to Closest Person,https://leetcode.com/problems/maximize-distance-to-closest-person,"You are given an array representing a row of seats where seats[i] = 1 represents a person sitting in the ith seat, and seats[i] = 0 represents that the ith seat is empty (0-indexed).

There is at least one empty seat, and at least one person sitting.

Alex wants to sit in the seat such that the distance between him and the closest person to him is maximized. 

Return that maximum distance to the closest person.",['array'],Medium,1311,130,236384,105404,"[""Exam Room""]","[('python 3', 29), ('c++', 28), ('python', 25), ('cpp', 15), ('java', 15), ('javascript', 11), ('one pass', 11), ('python3', 10), ('easy-understanding', 7), ('c#', 6), ('cpp solution', 6), ('explained', 6), ('two-pointers', 6), ('golang', 5), ('linear time', 5), ('bfs', 4), ('easy-to-understand', 4), ('one pass solution', 4), ('constant space', 3), ('java solution', 3), ('ruby', 3), ('simple', 3), ('slidingwindow', 3), ('2pointers', 2), ('clear', 2), ('easy to understand', 2), ('easy-undestand', 2), ('easytounderstand', 2), ('explanation of logic', 2), ('hashing', 2), ('intuitive', 2), ('java-solution', 2), ('javascript solution', 2), ('linear-time', 2), ('onepass', 2), ('optimal', 2), ('python2', 2), ('queue', 2), ('single pass', 2), ('#java', 1), ('2-pointers', 1), ('7 lines', 1), ('beginner friendly', 1), ('binary-search', 1), ('bug report', 1), ('c++ code', 1), ('c++ solution', 1), ('clean code', 1), ('commented code', 1), ('comments', 1), ('covid-19', 1), ('cpp easy', 1), ('deque', 1), ('different', 1), ('different approach', 1), ('easy', 1), ('explained solution', 1), ('explanation', 1), ('explanatory comments', 1), ('fastest', 1), ('go', 1), ('go-solution', 1), ('golang-solution', 1), ('good variable names', 1), ('greedy', 1), ('groupby', 1), ('iteration', 1), ('js', 1), ('js javascript', 1), ('kotlin', 1), ('linear memory', 1), ('math', 1), ('math-solution', 1), ('maxdisttoclosetperson', 1), ('no space', 1), ('october challenge', 1), ('one-pass', 1), ('optimal solution', 1), ('pointer approach', 1), ('readable', 1), ('running sum', 1), ('rust', 1), ('scala', 1), ('self-explanatory', 1), ('series', 1), ('sets', 1), ('simualtion', 1), ('smart', 1), ('space o1', 1), ('space-efficient', 1), ('stack', 1), ('stacks', 1), ('string', 1), ('subarray', 1), ('subsequence', 1), ('subsequences', 1), ('super-easy', 1), ('swift', 1), ('ting', 1), ('two pointers', 1), ('two-pointer', 1), ('typescript', 1), ('ultra easy', 1), ('upvote', 1), ('window', 1), ('with documentation', 1)]"
848,Shifting Letters,https://leetcode.com/problems/shifting-letters,"We have a string S of lowercase letters, and an integer array shifts.

Call the shift of a letter, the next letter in the alphabet, (wrapping around so that 'z' becomes 'a'). 

For example, shift('a') = 'b', shift('t') = 'u', and shift('z') = 'a'.

Now for each shifts[i] = x, we want to shift the first i+1 letters of S, x times.

Return the final string after all such shifts to S are applied.",['string'],Medium,380,70,65913,29816,[],"[('c++', 9), ('javascript', 8), ('easy-understanding', 7), ('java', 7), ('cpp', 6), ('python3', 5), ('python', 4), ('c#', 3), ('explained', 3), ('python 3', 3), ('ascii', 2), ('c', 2), ('c++ code', 2), ('concise-solution', 2), ('java-solution', 2), ('linear', 2), ('prefix sum', 2), ('single pass', 2), ('beats 100', 1), ('cpp solution', 1), ('csharp', 1), ('easy', 1), ('easy to understand', 1), ('easy-undestand', 1), ('efficient solution', 1), ('explaination', 1), ('explanations4problem', 1), ('go', 1), ('go-solution', 1), ('golang', 1), ('golang-solution', 1), ('intutive', 1), ('java solution', 1), ('js', 1), ('kotlin', 1), ('math', 1), ('mod', 1), ('one line', 1), ('one pass solution', 1), ('one-liner', 1), ('prefix-array', 1), ('ruby', 1), ('self explanatory', 1), ('simple solution', 1), ('strings', 1), ('ultra simple', 1), ('upvote', 1)]"
847,Shortest Path Visiting All Nodes,https://leetcode.com/problems/shortest-path-visiting-all-nodes,"An undirected, connected graph of N nodes (labeled 0, 1, 2, ..., N-1) is given as graph.

graph.length = N, and j != i is in the list graph[i] exactly once, if and only if nodes i and j are connected.

Return the length of the shortest path that visits every node. You may start and stop at any node, you may revisit nodes multiple times, and you may reuse edges.","['dynamic-programming', 'breadth-first-search']",Hard,813,87,41278,22428,[],"[('bfs', 13), ('bitmask', 4), ('c++', 4), ('c#', 3), ('bitmap', 2), ('dfs', 2), ('dp', 2), ('easy', 2), ('bit operation', 1), ('bitmasking', 1), ('cpp', 1), ('cpp solution', 1), ('depth first search', 1), ('depth-first-search', 1), ('djikstra', 1), ('easy-to-understand', 1), ('easy-understanding', 1), ('easy-undestand', 1), ('explanation', 1), ('java', 1), ('java ac solution', 1), ('kotllin', 1), ('memoization', 1), ('most-efficient', 1), ('python', 1), ('python2', 1), ('python3', 1), ('queue', 1), ('thinking process', 1), ('zea7ot', 1)]"
846,Hand of Straights,https://leetcode.com/problems/hand-of-straights,"Alice has a hand of cards, given as an array of integers.

Now she wants to rearrange the cards into groups so that each group is size W, and consists of W consecutive cards.

Return true if and only if she can.

Note: This question is the same as 1296: https://leetcode.com/problems/divide-array-in-sets-of-k-consecutive-numbers/",['ordered-map'],Medium,960,100,125049,69471,[],"[('python', 14), ('java', 9), ('python 3', 9), ('python3', 7), ('c++', 6), ('javascript', 5), ('counter', 4), ('hashmap', 4), ('java-solution', 4), ('swift', 4), ('cpp', 3), ('nlogn', 3), ('c#', 2), ('dictionary', 2), ('explanation of logic', 2), ('heapq', 2), ('java ac solution', 2), ('map', 2), ('priority queue', 2), ('ruby', 2), ('simple solution', 2), ('sorting', 2), ('treemap', 2), ('3line', 1), ('binary-search', 1), ('c++ code', 1), ('c++ easy to understand', 1), ('c++ hash', 1), ('clean code', 1), ('comments-added', 1), ('concise-solution', 1), ('constant space', 1), ('cpp easy', 1), ('cpp solution', 1), ('dict', 1), ('easy-understanding', 1), ('easytounderstand', 1), ('explained', 1), ('fast and simple', 1), ('fast-solution', 1), ('functional-programming', 1), ('heap', 1), ('js', 1), ('linear time', 1), ('maps', 1), ('min-heap', 1), ('nlogn time', 1), ('ordereddict', 1), ('priorityqueue', 1), ('python2', 1), ('recursive solution', 1), ('rust', 1), ('sliding-window', 1), ('sort-function', 1), ('sorted', 1), ('video-explanation', 1)]"
845,Longest Mountain in Array,https://leetcode.com/problems/longest-mountain-in-array,"You may recall that an array arr is a mountain array if and only if:


	arr.length >= 3
	There exists some index i (0-indexed) with 0 < i < arr.length - 1 such that:
	
		arr[0] < arr[1] < ... < arr[i - 1] < arr[i]
		arr[i] > arr[i + 1] > ... > arr[arr.length - 1]
	
	


Given an integer array arr, return the length of the longest subarray, which is a mountain. Return 0 if there is no mountain subarray.",['two-pointers'],Medium,1152,45,171728,66534,"[""Minimum Number of Removals to Make Mountain Array""]","[('java', 25), ('c++', 24), ('python 3', 20), ('python', 15), ('two-pointers', 11), ('c#', 8), ('cpp', 8), ('easy-understanding', 8), ('linear time', 8), ('java-solution', 7), ('constant space', 6), ('cpp solution', 6), ('easy', 5), ('golang', 5), ('dynamic programming', 4), ('golang-solution', 4), ('one pass solution', 4), ('two-pointer', 4), ('2 pointers', 3), ('easytounderstand', 3), ('explained', 3), ('go-solution', 3), ('java ac solution', 3), ('javascript', 3), ('python3', 3), ('simple', 3), ('single pass', 3), ('two pointers', 3), ('clean code', 2), ('cpp with explanation', 2), ('dp', 2), ('fastest', 2), ('longest peak', 2), ('one pass', 2), ('pythonpython3', 2), ('ruby', 2), ('simple solution', 2), ('two pointer approach', 2), ('two pointer technique', 2), ('100 space', 1), ('100 speed', 1), ('200th', 1), ('2pointer', 1), ('awesome samriddhi', 1), ('beginner friendly', 1), ('brute-force', 1), ('c++ code', 1), ('c++ solution', 1), ('c++11', 1), ('commented', 1), ('constant memory', 1), ('cpp easy', 1), ('csharp', 1), ('easy understand', 1), ('easy-solution', 1), ('easy-to-understand', 1), ('easy-understand', 1), ('efficient', 1), ('explanation of logic', 1), ('explanations', 1), ('give stars and subscribe', 1), ('go', 1), ('iteration', 1), ('iterative', 1), ('java solution', 1), ('kotlin', 1), ('leetcode', 1), ('local maximum', 1), ('local minimum', 1), ('longest-peak', 1), ('longestmountaininarray', 1), ('math solution', 1), ('next-greater-element', 1), ('no space', 1), ('one-pass', 1), ('onepass', 1), ('oops', 1), ('optimal', 1), ('optimisation', 1), ('peak finding', 1), ('performance', 1), ('php', 1), ('pointer', 1), ('python2', 1), ('python3.8', 1), ('ritik', 1), ('rust', 1), ('simulation', 1), ('single-pass', 1), ('slidingwindow', 1), ('solution explained', 1), ('state machine', 1), ('state-machine', 1), ('status', 1), ('super-easy', 1), ('three pointers', 1), ('twopointer', 1), ('vector', 1), ('video solution', 1), ('video-explanation', 1)]"
844,Backspace String Compare,https://leetcode.com/problems/backspace-string-compare,"Given two strings s and t, return true if they are equal when both are typed into empty text editors. '#' means a backspace character.

Note that after backspacing an empty text, the text will continue empty.","['two-pointers', 'stack']",Easy,2443,115,614759,290083,"[""Crawler Log Folder""]","[('c++', 76), ('cpp', 48), ('javascript', 45), ('java', 43), ('stack', 43), ('python', 38), ('stacks', 30), ('python 3', 27), ('easy-understanding', 24), ('python3', 20), ('easy-undestand', 15), ('java-solution', 14), ('two-pointer', 13), ('cpp solution', 12), ('string', 10), ('c#', 9), ('c++ code', 9), ('golang', 9), ('swift', 9), ('easy-to-understand', 7), ('fast-solution', 7), ('easy', 6), ('javascript solution', 6), ('js', 6), ('linear time', 6), ('stack-based', 6), ('0ms', 5), ('kotlin', 5), ('simple solution', 5), ('two-pointers', 5), ('c', 4), ('constant memory', 4), ('easytounderstand', 4), ('fast and simple', 4), ('fastest', 4), ('optimal', 4), ('100 space', 3), ('constant space', 3), ('go', 3), ('readable', 3), ('regex', 3), ('rust', 3), ('simple', 3), ('straight-forward', 3), ('stringbuilder', 3), ('two pointers', 3), ('0ms faster tha', 2), ('100 memory', 2), ('100 speed', 2), ('2 pointers', 2), ('beats 100', 2), ('beginner friendly', 2), ('c programming', 2), ('cpp easy', 2), ('csharp', 2), ('easy to understand', 2), ('easy-understand', 2), ('elegant', 2), ('explaination', 2), ('explained', 2), ('explanation', 2), ('functional', 2), ('golang-solution', 2), ('intuitive', 2), ('linear memory', 2), ('python2', 2), ('recursion', 2), ('regexp', 2), ('ruby', 2), ('stack-implementation', 2), ('string-operation', 2), ('strings', 2), ('two pointer technique', 2), ('vector', 2), ('.net', 1), ('#c', 1), ('#code', 1), ('#codegirl', 1), ('#javascript', 1), ('#ruby', 1), ('#stack', 1), ('0 ms', 1), ('0ms runtime', 1), ('0ms-solution', 1), ('100', 1), ('90+ solution', 1), ('90+faster', 1), ('algorithms', 1), ('backspace', 1), ('backtracing', 1), ('beats 100 percent', 1), ('best space complexity', 1), ('best-solution', 1), ('built-in-function', 1), ('c# solutions', 1), ('c++ iterative sol', 1), ('c++14', 1), ('c++solution', 1), ('comment', 1), ('commented', 1), ('comments-added', 1), ('compare', 1), ('compression', 1), ('concise', 1), ('counter', 1), ('cpp-solution', 1), ('deque', 1), ('dequeue', 1), ('detailed-explanation', 1), ('drawings', 1), ('easiest', 1), ('easy implement', 1), ('easy understanding', 1), ('easy understood', 1), ('easyunderstanding', 1), ('efficent approach', 1), ('efficient solution', 1), ('elegant solution', 1), ('es6', 1), ('facebook', 1), ('fast', 1), ('full detailed explanation', 1), ('generator', 1), ('generators', 1), ('go lang', 1), ('go-solution', 1), ('golang solution', 1), ('google', 1), ('hari hari', 1), ('ienumerable', 1), ('in-place', 1), ('index', 1), ('ios', 1), ('izaac', 1), ('java simple', 1), ('java stringtoint', 1), ('javasccript', 1), ('js javascript', 1), ('keep it simple', 1), ('kotlinvim', 1), ('lengthy', 1), ('linear', 1), ('linearithmic', 1), ('loop', 1), ('loops', 1), ('malj', 1), ('memory efficient', 1), ('optimal solution', 1), ('php solution', 1), ('python deque', 1), ('pythonpython3', 1), ('queue', 1), ('queue-approach', 1), ('recurision', 1), ('reduce', 1), ('regular-expression', 1), ('reusable', 1), ('saravana', 1), ('scala', 1), ('short solution', 1), ('simple clear c++ solution', 1), ('solution-python', 1), ('stl', 1), ('straightforward', 1), ('string-matching', 1), ('swift5', 1), ('two pass', 1), ('twopointer', 1), ('typescript', 1), ('very-easy', 1), ('zea7ot', 1)]"
843,Guess the Word,https://leetcode.com/problems/guess-the-word,"This is an interactive problem.

You are given an array of unique strings wordlist where wordlist[i] is 6 letters long, and one word in this list is chosen as secret.

You may call Master.guess(word) to guess a word. The guessed word should have type string and must be from the original list with 6 lowercase letters.

This function returns an integer type, representing the number of exact matches (value and position) of your guess to the secret word. Also, if your guess is not in the given wordlist, it will return -1 instead.

For each test case, you have exactly 10 guesses to guess the word. At the end of any number of calls, if you have made 10 or fewer calls to Master.guess and at least one of these guesses was secret, then you pass the test case.",['minimax'],Hard,801,824,159364,73849,[],"[('python', 7), ('python 3', 6), ('javascript', 5), ('minimax', 5), ('c++', 4), ('java', 4), ('c#', 3), ('python3', 2), ('random', 2), ('random pick', 2), ('#c++', 1), ('#google', 1), ('beats 95', 1), ('c++ solution', 1), ('clear comments', 1), ('commented', 1), ('detailed explanation', 1), ('easy-understanding', 1), ('easy-undestand', 1), ('easytounderstand', 1), ('explained', 1), ('falsifying-example', 1), ('golang', 1), ('google', 1), ('greedy', 1), ('heuristic', 1), ('intuitive', 1), ('java-solution', 1), ('javascipt', 1), ('js', 1), ('linear-time', 1), ('minmax', 1), ('priorityqueue', 1), ('probabilisitic', 1), ('pruning', 1), ('random choice', 1), ('readable code', 1), ('rust', 1), ('set', 1), ('sets', 1), ('simple solution', 1), ('statistics', 1), ('swift', 1), ('video', 1), ('youtube', 1)]"
842,Split Array into Fibonacci Sequence,https://leetcode.com/problems/split-array-into-fibonacci-sequence,"Given a string S of digits, such as S = ""123456579"", we can split it into a Fibonacci-like sequence [123, 456, 579].

Formally, a Fibonacci-like sequence is a list F of non-negative integers such that:


	0 <= F[i] <= 2^31 - 1, (that is, each integer fits a 32-bit signed integer type);
	F.length >= 3;
	and F[i] + F[i+1] = F[i+2] for all 0 <= i < F.length - 2.


Also, note that when splitting the string into pieces, each piece must not have extra leading zeroes, except if the piece is the number 0 itself.

Return any Fibonacci-like sequence split from S, or return [] if it cannot be done.","['string', 'backtracking', 'greedy']",Medium,623,203,68532,25387,"[""Additive Number"", ""Fibonacci Number""]","[('backtracking', 15), ('python 3', 5), ('c++', 4), ('python', 4), ('python3', 4), ('c#', 3), ('dfs', 3), ('easy-understanding', 3), ('cpp', 2), ('depth first search', 2), ('java', 2), ('javascript', 2), ('python2', 2), ('back tracking', 1), ('backtrack', 1), ('bfs', 1), ('c++ code', 1), ('cpp solution', 1), ('dfs simple solution', 1), ('fastest', 1), ('fibonaccisequence', 1), ('greedy', 1), ('java ac solution', 1), ('pruning', 1), ('readable', 1), ('recursion', 1), ('recursively', 1), ('splitarray', 1), ('weak-tests', 1)]"
841,Keys and Rooms,https://leetcode.com/problems/keys-and-rooms,"There are N rooms and you start in room 0.  Each room has a distinct number in 0, 1, 2, ..., N-1, and each room may have some keys to access the next room. 

Formally, each room i has a list of keys rooms[i], and each key rooms[i][j] is an integer in [0, 1, ..., N-1] where N = rooms.length.  A key rooms[i][j] = v opens the room with number v.

Initially, all the rooms start locked (except for room 0). 

You can walk back and forth between rooms freely.

Return true if and only if you can enter every room.","['depth-first-search', 'graph']",Medium,1821,128,191764,127580,[],"[('dfs', 95), ('c++', 61), ('bfs', 51), ('python', 43), ('java', 41), ('cpp', 36), ('graph', 21), ('javascript', 21), ('python3', 21), ('python 3', 19), ('easy-understanding', 15), ('java-solution', 13), ('queue', 13), ('c#', 12), ('depth first search', 12), ('recursion', 11), ('stack', 10), ('breadth first search', 9), ('dfs simple solution', 9), ('easy', 7), ('explained', 7), ('easy-to-understand', 6), ('recursive', 6), ('simple', 6), ('golang', 5), ('ruby', 5), ('rust', 5), ('cpp solution', 4), ('go', 4), ('hashset', 4), ('set', 4), ('clean code', 3), ('dfs-bfs', 3), ('dfs-iterative', 3), ('easytounderstand', 3), ('fast and simple', 3), ('simple solution', 3), ('video-explanation', 3), ('backtracking', 2), ('bfs simple solution', 2), ('c++ code', 2), ('clean', 2), ('commented', 2), ('depth-first-search', 2), ('dfs recursive', 2), ('dfs solution', 2), ('fast', 2), ('fast-solution', 2), ('iterative', 2), ('java ac solution', 2), ('keysandrooms', 2), ('stacks', 2), ('typescript', 2), ('unionfind', 2), ('100', 1), ('100 faster', 1), ('100 memory', 1), ('100 space', 1), ('100 speed', 1), ('2d-array', 1), ('an7one', 1), ('awesome samriddhi', 1), ('beats 100', 1), ('beats 100 percent', 1), ('beauty', 1), ('begineer friendly', 1), ('beginnerfriendly', 1), ('bfs python', 1), ('bfs-cpp', 1), ('breadth first traversal', 1), ('breadth-first-search', 1), ('c', 1), ('c++ solution', 1), ('clean-efficient-code', 1), ('comments-added', 1), ('connected components', 1), ('connected graph', 1), ('counter', 1), ('cpp easy', 1), ('csharp', 1), ('depth first traversal', 1), ('depth-first search', 1), ('dfs with memo', 1), ('dfs-recursive', 1), ('easiest', 1), ('easy to read', 1), ('easy to understand', 1), ('easy-solition', 1), ('easy-undestand', 1), ('efficient solution', 1), ('es6', 1), ('explained solution', 1), ('fastest', 1), ('fastest solution', 1), ('golang-solution', 1), ('google interview', 1), ('graph-coloring', 1), ('greedy', 1), ('hash set', 1), ('helper function', 1), ('illustrated', 1), ('iteration', 1), ('iterative-dfs', 1), ('itereative', 1), ('javascript-solution', 1), ('js', 1), ('map', 1), ('memory-efficient', 1), ('oneliner', 1), ('pointers', 1), ('python deque', 1), ('queues', 1), ('raviinroorkee', 1), ('readable code', 1), ('recurision', 1), ('recursive easy', 1), ('recursive-dfs', 1), ('recursively', 1), ('ritik', 1), ('saravana', 1), ('sets', 1), ('short', 1), ('simple and easy', 1), ('specially for beginners', 1), ('speed', 1), ('swift', 1), ('topdown', 1), ('topological-sort', 1), ('unordered-map', 1), ('video explanation', 1)]"
840,Magic Squares In Grid,https://leetcode.com/problems/magic-squares-in-grid,"A 3 x 3 magic square is a 3 x 3 grid filled with distinct numbers from 1 to 9 such that each row, column, and both diagonals all have the same sum.

Given a row x col grid of integers, how many 3 x 3 ""magic square"" subgrids are there?  (Each subgrid is contiguous).",['array'],Medium,194,1348,74855,28354,[],"[('c++', 6), ('javascript', 6), ('python', 5), ('python 3', 5), ('java', 4), ('c#', 3), ('golang', 3), ('cpp', 2), ('easy-understanding', 2), ('python3', 2), ('ruby', 2), ('brute force', 1), ('c++11', 1), ('clean', 1), ('clean code', 1), ('comments-added', 1), ('cpp solution', 1), ('easy', 1), ('explanatory comments', 1), ('go', 1), ('good variable names', 1), ('java solution', 1), ('java-solution', 1), ('javascript solution', 1), ('js', 1), ('js javascript', 1), ('magicsquaresingrid', 1), ('matrix', 1), ('php', 1), ('regex', 1), ('set', 1), ('simulate', 1), ('structured code', 1), ('swift', 1), ('two solutions', 1), ('two-lines', 1)]"
839,Similar String Groups,https://leetcode.com/problems/similar-string-groups,"Two strings X and Y are similar if we can swap two letters (in different positions) of X, so that it equals Y. Also two strings X and Y are similar if they are equal.

For example, ""tars"" and ""rats"" are similar (swapping at positions 0 and 2), and ""rats"" and ""arts"" are similar, but ""star"" is not similar to ""tars"", ""rats"", or ""arts"".

Together, these form two connected groups by similarity: {""tars"", ""rats"", ""arts""} and {""star""}.  Notice that ""tars"" and ""arts"" are in the same group even though they are not similar.  Formally, each group is such that a word is in the group if and only if it is similar to at least one other word in the group.

We are given a list strs of strings where every string in strs is an anagram of every other string in strs. How many groups are there?","['depth-first-search', 'union-find', 'graph']",Hard,528,148,86295,36134,[],"[('union find', 17), ('java', 12), ('c++', 9), ('dfs', 9), ('c#', 5), ('unionfind', 4), ('cpp', 3), ('cpp solution', 3), ('python', 3), ('python 3', 3), ('dfs simple solution', 2), ('dsu', 2), ('easy-undestand', 2), ('hashmap', 2), ('java-solution', 2), ('javascript', 2), ('simple', 2), ('swift', 2), ('union-find', 2), ('100 faster', 1), ('bfs', 1), ('c++code', 1), ('clean code', 1), ('dfs-bfs', 1), ('disjoint sets', 1), ('disjoint-set', 1), ('disjoint-sets', 1), ('explanations', 1), ('facebook', 1), ('golang', 1), ('graph', 1), ('javascipt', 1), ('javascrip', 1), ('javascript solution', 1), ('map', 1), ('quick union', 1), ('union by rank', 1)]"
838,Push Dominoes,https://leetcode.com/problems/push-dominoes,"There are N dominoes in a line, and we place each domino vertically upright.

In the beginning, we simultaneously push some of the dominoes either to the left or to the right.



After each second, each domino that is falling to the left pushes the adjacent domino on the left.

Similarly, the dominoes falling to the right push their adjacent dominoes standing on the right.

When a vertical domino has dominoes falling on it from both sides, it stays still due to the balance of the forces.

For the purposes of this question, we will consider that a falling domino expends no additional force to a falling or already fallen domino.

Given a string ""S"" representing the initial state. S[i] = 'L', if the i-th domino has been pushed to the left; S[i] = 'R', if the i-th domino has been pushed to the right; S[i] = '.', if the i-th domino has not been pushed.

Return a string representing the final state.","['two-pointers', 'dynamic-programming']",Medium,851,79,55964,28052,[],"[('c++', 10), ('two-pointers', 7), ('java', 5), ('python', 5), ('python 3', 4), ('cpp', 3), ('easy-understanding', 3), ('javascript', 3), ('critical coding', 2), ('dynamic programming', 2), ('fuck noobs', 2), ('accepted solution', 1), ('bfs', 1), ('comments-added', 1), ('cpp easy', 1), ('easiest', 1), ('easy-undestand', 1), ('easytounderstand', 1), ('hashset', 1), ('java ac solution', 1), ('java-solution', 1), ('python3', 1), ('regex', 1), ('regular expression', 1), ('sets', 1), ('simple', 1), ('single pass', 1), ('tuples', 1)]"
837,New 21 Game,https://leetcode.com/problems/new-21-game,"Alice plays the following game, loosely based on the card game ""21"".

Alice starts with 0 points, and draws numbers while she has less than K points.  During each draw, she gains an integer number of points randomly from the range [1, W], where W is an integer.  Each draw is independent and the outcomes have equal probabilities.

Alice stops drawing numbers when she gets K or more points.  What is the probability that she has N or less points?",['dynamic-programming'],Medium,700,418,62169,22142,[],"[('dynamic programming', 5), ('c++', 2), ('bottom-up-algorithm', 1), ('deque', 1), ('dequeue', 1), ('easy-understanding', 1), ('easy-undestand', 1), ('help me', 1), ('javascript', 1), ('python', 1), ('python 3', 1), ('python3', 1), ('queue', 1), ('slide window', 1), ('sliding-window', 1)]"
836,Rectangle Overlap,https://leetcode.com/problems/rectangle-overlap,"An axis-aligned rectangle is represented as a list [x1, y1, x2, y2], where (x1, y1) is the coordinate of its bottom-left corner, and (x2, y2) is the coordinate of its top-right corner. Its top and bottom edges are parallel to the X-axis, and its left and right edges are parallel to the Y-axis.

Two rectangles overlap if the area of their intersection is positive. To be clear, two rectangles that only touch at the corner or edges do not overlap.

Given two axis-aligned rectangles rec1 and rec2, return true if they overlap, otherwise return false.",['math'],Easy,1008,301,172120,74845,"[""Rectangle Area""]","[('c++', 11), ('cpp', 10), ('python', 10), ('python 3', 8), ('java', 5), ('javascript', 4), ('one line', 4), ('python3', 4), ('c#', 3), ('go-solution', 3), ('commentary', 2), ('easy-to-understand', 2), ('golang', 2), ('swift', 2), ('0ms', 1), ('100', 1), ('100 beat', 1), ('100 bst', 1), ('beats 100', 1), ('c++ code', 1), ('c++11', 1), ('cpp easy', 1), ('cpp solution', 1), ('derivation', 1), ('diagrams', 1), ('easy', 1), ('easy-understanding', 1), ('easy-undestand', 1), ('easytounderstand', 1), ('elegant solution', 1), ('examples', 1), ('explaination', 1), ('explained', 1), ('faster', 1), ('faster than 100.00', 1), ('go', 1), ('golang solution', 1), ('golang-solution', 1), ('images', 1), ('java ac solution', 1), ('java-solution', 1), ('math', 1), ('memory optimized', 1), ('one-liner', 1), ('ruby', 1), ('simple solution', 1), ('simplest', 1), ('visualization', 1)]"
835,Image Overlap,https://leetcode.com/problems/image-overlap,"You are given two images img1 and img2 both of size n x n, represented as binary, square matrices of the same size. (A binary matrix has only 0s and 1s as values.)

We translate one image however we choose (sliding it left, right, up, or down any number of units), and place it on top of the other image.  After, the overlap of this translation is the number of positions that have a 1 in both images.

(Note also that a translation does not include any kind of rotation.)

What is the largest possible overlap?",['array'],Medium,584,770,70967,43711,[],"[('c++', 9), ('python 3', 7), ('python', 6), ('brute force', 5), ('bit manipulation', 4), ('c#', 4), ('easy-understanding', 4), ('java', 4), ('cpp', 3), ('simple solution', 3), ('clean-efficient', 2), ('convolution', 2), ('easytounderstand', 2), ('explained', 2), ('golang', 2), ('hashmap', 2), ('java-solution', 2), ('2d-array-java', 1), ('beginner friendly', 1), ('bit-manipulation', 1), ('bruteforce', 1), ('clean', 1), ('count', 1), ('counter', 1), ('cpp solution', 1), ('dictonary', 1), ('easy to understand', 1), ('easy-to-understand', 1), ('fast-solution', 1), ('go-solution', 1), ('hasher', 1), ('idiomatic', 1), ('iteration', 1), ('javascript', 1), ('kotlin', 1), ('matrix', 1), ('matrix-problem-solving', 1), ('optimal', 1), ('pair', 1), ('php', 1), ('question-not-clear', 1), ('ruby', 1), ('rust', 1), ('simple', 1), ('state-compression', 1), ('swift', 1), ('test-case', 1), ('testcase error', 1), ('translation', 1), ('vector', 1), ('vector-of-vector', 1), ('video', 1), ('video explaination', 1), ('video explanation', 1), ('video solution', 1), ('video-explanation', 1), ('well-commented', 1), ('well-explained', 1), ('wrong output', 1), ('wrong test case', 1), ('wrong-sample', 1)]"
834,Sum of Distances in Tree,https://leetcode.com/problems/sum-of-distances-in-tree,"An undirected, connected tree with N nodes labelled 0...N-1 and N-1 edges are given.

The ith edge connects nodes edges[i][0] and edges[i][1] together.

Return a list ans, where ans[i] is the sum of the distances between node i and all other nodes.","['tree', 'depth-first-search']",Hard,1256,47,43673,20426,"[""Distribute Coins in Binary Tree""]","[('c++', 3), ('bfs', 1), ('c#', 1), ('c++ solution', 1), ('depth first search', 1), ('dfs', 1), ('dfs simple solution', 1), ('google interview question', 1), ('java', 1), ('photo', 1), ('postorder-traversal', 1), ('tree', 1)]"
833,Find And Replace in String,https://leetcode.com/problems/find-and-replace-in-string,"To some string S, we will perform some replacement operations that replace groups of letters with new ones (not necessarily the same size).

Each replacement operation has 3 parameters: a starting index i, a source word x and a target word y.  The rule is that if x starts at position i in the original string S, then we will replace that occurrence of x with y.  If not, we do nothing.

For example, if we have S = ""abcd"" and we have some replacement operation i = 2, x = ""cd"", y = ""ffff"", then because ""cd"" starts at position 2 in the original string S, we will replace it with ""ffff"".

Using another example on S = ""abcd"", if we have both the replacement operation i = 0, x = ""ab"", y = ""eee"", as well as another replacement operation i = 2, x = ""ec"", y = ""ffff"", this second operation does nothing because in the original string S[2] = 'c', which doesn't match x[0] = 'e'.

All these operations occur simultaneously.  It's guaranteed that there won't be any overlap in replacement: for example, S = ""abc"", indexes = [0, 1], sources = [""ab"",""bc""] is not a valid test case.",['string'],Medium,459,530,117587,60580,[],"[('python', 13), ('c++', 9), ('java', 8), ('hashmap', 6), ('javascript', 6), ('python 3', 6), ('cpp', 5), ('easy-undestand', 3), ('easytounderstand', 3), ('golang', 3), ('python3', 3), ('c#', 2), ('easy-understanding', 2), ('go-solution', 2), ('golang-solution', 2), ('kotlin', 2), ('rust', 2), ('stringbuilder', 2), ('#clean', 1), ('#explained', 1), ('100 speed', 1), ('4lines', 1), ('comments', 1), ('complexity', 1), ('detailed', 1), ('detailed explanation', 1), ('dictionary', 1), ('dictionary c#', 1), ('easy-to-understand', 1), ('easy-understand', 1), ('elegant', 1), ('elegant solution', 1), ('explained', 1), ('explanation of logic', 1), ('faster than 95.46', 1), ('fasterthan100', 1), ('findandreplaceinstring', 1), ('go', 1), ('golang solution', 1), ('heapq', 1), ('intuitive', 1), ('java-solution', 1), ('javascript solution', 1), ('map', 1), ('map-stl', 1), ('nice', 1), ('nice explaination', 1), ('precise', 1), ('simple', 1), ('solution c++', 1), ('space-efficient', 1), ('swift', 1), ('zip', 1)]"
832,Flipping an Image,https://leetcode.com/problems/flipping-an-image,"Given an n x n binary matrix image, flip the image horizontally, then invert it, and return the resulting image.

To flip an image horizontally means that each row of the image is reversed.


	For example, flipping [1,1,0] horizontally results in [0,1,1].


To invert an image means that each 0 is replaced by 1, and each 1 is replaced by 0.


	For example, inverting [0,1,1] results in [1,0,0].",['array'],Easy,1329,181,301724,236499,[],"[('c++', 65), ('python', 54), ('python 3', 48), ('java', 44), ('javascript', 32), ('cpp', 27), ('python3', 19), ('java-solution', 17), ('cpp solution', 15), ('easy-understanding', 15), ('c#', 14), ('one-liner', 14), ('easy', 11), ('golang', 11), ('swift', 9), ('xor', 9), ('array', 8), ('golang-solution', 8), ('fast-solution', 7), ('list comprehension', 7), ('one line', 7), ('ruby', 7), ('simple solution', 7), ('two-pointers', 7), ('easy-to-understand', 6), ('easytounderstand', 6), ('matrix', 6), ('bit manipulation', 5), ('easy-undestand', 5), ('fast and simple', 5), ('go', 5), ('in-place', 5), ('kotlin', 5), ('php', 5), ('c', 4), ('inplace', 4), ('javascript solution', 4), ('bitwise operation', 3), ('c++ solution', 3), ('cpp easy', 3), ('easy to understand', 3), ('flippingimage', 3), ('go-solution', 3), ('ios', 3), ('map', 3), ('12ms', 2), ('2d-array', 2), ('8ms', 2), ('array nesting', 2), ('beginner friendly', 2), ('brute force', 2), ('csharp', 2), ('java simple', 2), ('js', 2), ('one pass', 2), ('oneline', 2), ('php solution', 2), ('python2', 2), ('readable', 2), ('scala', 2), ('simple', 2), ('#codegirl', 1), ('#javacript', 1), ('#javascript', 1), ('0ms', 1), ('0ms-4ms', 1), ('1 line', 1), ('1 liner', 1), ('1-line', 1), ('100', 1), ('100 faster', 1), ('100 percentage fastest', 1), ('100 speed', 1), ('1ms', 1), ('2d array', 1), ('2d vector', 1), ('2darray', 1), ('3linessolution', 1), ('beats 98 pc', 1), ('binary', 1), ('bitset', 1), ('c programming', 1), ('c++ code', 1), ('c++14', 1), ('c++stl', 1), ('clean code', 1), ('clean solution', 1), ('commented', 1), ('commented code', 1), ('comments', 1), ('cool', 1), ('divide and conquer', 1), ('dynamic programming', 1), ('easiest', 1), ('easy understanding', 1), ('easy undestanding', 1), ('easysolution', 1), ('efficient', 1), ('explained', 1), ('explained solution', 1), ('faster than 75', 1), ('fastest', 1), ('fastest java solution', 1), ('flip', 1), ('flipimage', 1), ('flipping and image', 1), ('for loops', 1), ('fp', 1), ('go lang', 1), ('imagerotation', 1), ('in place', 1), ('intuitive', 1), ('iteration', 1), ('iterative', 1), ('iterators', 1), ('java ac solution', 1), ('java solution', 1), ('javasccript', 1), ('javascriptes6', 1), ('kotlin-solution', 1), ('linq', 1), ('list', 1), ('list-comprehension', 1), ('logical', 1), ('loop', 1), ('math', 1), ('matrix inversion', 1), ('matrix rotate', 1), ('matrix rotation', 1), ('matrix-rotation', 1), ('modulo', 1), ('nested-loop', 1), ('no extra space', 1), ('one line solution', 1), ('oneliner', 1), ('onepass', 1), ('ptyhon', 1), ('python-2', 1), ('recursive', 1), ('recursively', 1), ('reverse-bits', 1), ('rust', 1), ('simpe', 1), ('simple clear c++ solution', 1), ('simple java solution', 1), ('simplest', 1), ('single pass', 1), ('slice operator', 1), ('solution c++', 1), ('stl', 1), ('strings', 1), ('swap-in-place', 1), ('swift5', 1), ('trick', 1), ('two pointers', 1), ('typescript', 1), ('understandable', 1), ('unshift', 1), ('video solution', 1), ('video-explanation', 1)]"
622,Design Circular Queue,https://leetcode.com/problems/design-circular-queue,"Design your implementation of the circular queue. The circular queue is a linear data structure in which the operations are performed based on FIFO (First In First Out) principle and the last position is connected back to the first position to make a circle. It is also called ""Ring Buffer"".

One of the benefits of the circular queue is that we can make use of the spaces in front of the queue. In a normal queue, once the queue becomes full, we cannot insert the next element even if there is a space in front of the queue. But using the circular queue, we can use the space to store new values.

Implementation the MyCircularQueue class:


	MyCircularQueue(k) Initializes the object with the size of the queue to be k.
	int Front() Gets the front item from the queue. If the queue is empty, return -1.
	int Rear() Gets the last item from the queue. If the queue is empty, return -1.
	boolean enQueue(int value) Inserts an element into the circular queue. Return true if the operation is successful.
	boolean deQueue() Deletes an element from the circular queue. Return true if the operation is successful.
	boolean isEmpty() Checks whether the circular queue is empty or not.
	boolean isFull() Checks whether the circular queue is full or not.","['design', 'queue']",Medium,1055,138,247466,118026,"[""Design Circular Deque"", ""Design Front Middle Back Queue""]","[('c++', 32), ('java', 19), ('python', 18), ('array', 17), ('cpp', 15), ('javascript', 14), ('queue', 12), ('easy-understanding', 8), ('python 3', 8), ('c#', 5), ('cpp solution', 5), ('golang', 5), ('list', 5), ('circular-queue', 4), ('deque', 4), ('go', 4), ('java-solution', 4), ('js', 4), ('python3', 4), ('singly-linked-list', 4), ('two-pointers', 4), ('vector', 4), ('circular queue', 3), ('easytounderstand', 3), ('explained', 3), ('c', 2), ('c++ solution', 2), ('circular-array', 2), ('circular-linked-list', 2), ('concise', 2), ('design', 2), ('fast', 2), ('fast and simple', 2), ('golang-solution', 2), ('linked list', 2), ('linkedlist', 2), ('queue and linkedlist', 2), ('rust', 2), ('swift', 2), ('vectors', 2), ('video', 2), ('youtube', 2), ('#circularqueue', 1), ('#designcircularqueue', 1), ('#javascript', 1), ('2 pointer approach', 1), ('2 pointers', 1), ('2-pointer', 1), ('2-pointer approach', 1), ('2-pointers', 1), ('4 ms', 1), ('accepted', 1), ('array implementation', 1), ('arrays', 1), ('awesome samriddhi', 1), ('beats 100', 1), ('c++ code', 1), ('circular linked list', 1), ('clean concise code', 1), ('clean-code', 1), ('comments', 1), ('comments-added', 1), ('design circular queue', 1), ('double-linked-list', 1), ('doubly-linked list', 1), ('easy', 1), ('easy to understand', 1), ('easy-to-understand', 1), ('easy-undestand', 1), ('fast-solution', 1), ('fastest', 1), ('fastest solution', 1), ('go-solution', 1), ('goalng', 1), ('java ac solution', 1), ('javascrip', 1), ('js javascript', 1), ('kotlin', 1), ('kotlinvim', 1), ('linked-list', 1), ('linkedlists', 1), ('modulo', 1), ('naive solution', 1), ('pythonic', 1), ('pythonpython3', 1), ('ritik', 1), ('ruby', 1), ('scratch', 1), ('sentinel node', 1), ('simple', 1), ('simple solution', 1), ('simplesweet', 1), ('single-linked-list', 1), ('stack-implementation', 1), ('swift debugging', 1), ('two pointer', 1), ('typescript', 1), ('using array', 1), ('vec', 1), ('video-explanation', 1)]"
641,Design Circular Deque,https://leetcode.com/problems/design-circular-deque,"Design your implementation of the circular double-ended queue (deque).

Your implementation should support following operations:


	MyCircularDeque(k): Constructor, set the size of the deque to be k.
	insertFront(): Adds an item at the front of Deque. Return true if the operation is successful.
	insertLast(): Adds an item at the rear of Deque. Return true if the operation is successful.
	deleteFront(): Deletes an item from the front of Deque. Return true if the operation is successful.
	deleteLast(): Deletes an item from the rear of Deque. Return true if the operation is successful.
	getFront(): Gets the front item from the Deque. If the deque is empty, return -1.
	getRear(): Gets the last item from Deque. If the deque is empty, return -1.
	isEmpty(): Checks whether Deque is empty or not. 
	isFull(): Checks whether Deque is full or not.","['design', 'queue']",Medium,407,42,49983,28151,"[""Design Circular Queue"", ""Design Front Middle Back Queue""]","[('c++', 16), ('cpp', 9), ('java', 8), ('deque', 7), ('array', 6), ('python', 6), ('cpp solution', 4), ('python 3', 4), ('python3', 4), ('easy-understanding', 3), ('javascript', 3), ('vector', 3), ('doubly-linked-list', 2), ('easy-undestand', 2), ('java-solution', 2), ('list', 2), ('arraydeque', 1), ('arrays', 1), ('beginners', 1), ('c++ solution', 1), ('circular-queue', 1), ('clean code', 1), ('doubly linked list', 1), ('doubly-linked list', 1), ('easy', 1), ('easytounderstand', 1), ('fast and simple', 1), ('go', 1), ('golang', 1), ('golang-solution', 1), ('java ac solution', 1), ('linked-list', 1), ('map', 1), ('optimisation', 1), ('performance', 1), ('queue', 1), ('queues', 1), ('scratch', 1), ('simple solution', 1), ('single pointer', 1), ('single-pointer', 1), ('slicing', 1), ('solution', 1), ('spread operator', 1), ('straight-forward', 1), ('swift', 1), ('two arrays', 1), ('two-pointer', 1)]"
831,Masking Personal Information,https://leetcode.com/problems/masking-personal-information,"We are given a personal information string S, which may represent either an email address or a phone number.

We would like to mask this personal information according to the following rules:


1. Email address:

We define a name to be a string of length ≥ 2 consisting of only lowercase letters a-z or uppercase letters A-Z.

An email address starts with a name, followed by the symbol '@', followed by a name, followed by the dot '.' and followed by a name. 

All email addresses are guaranteed to be valid and in the format of ""name1@name2.name3"".

To mask an email, all names must be converted to lowercase and all letters between the first and last letter of the first name must be replaced by 5 asterisks '*'.


2. Phone number:

A phone number is a string consisting of only the digits 0-9 or the characters from the set {'+', '-', '(', ')', ' '}. You may assume a phone number contains 10 to 13 digits.

The last 10 digits make up the local number, while the digits before those make up the country code. Note that the country code is optional. We want to expose only the last 4 digits and mask all other digits.

The local number should be formatted and masked as ""***-***-1111"", where 1 represents the exposed digits.

To mask a phone number with country code like ""+111 111 111 1111"", we write it in the form ""+***-***-***-1111"".  The '+' sign and the first '-' sign before the local number should only exist if there is a country code.  For example, a 12 digit phone number mask should start with ""+**-"".

Note that extraneous characters like ""("", "")"", "" "", as well as extra dashes or plus signs not part of the above formatting scheme should be removed.

 

Return the correct ""mask"" of the information provided.",['string'],Medium,96,354,27315,12236,[],"[('javascript', 4), ('c++', 3), ('python', 3), ('python 3', 3), ('cpp', 2), ('100 faster', 1), ('golang', 1), ('intutive', 1), ('java', 1), ('python3', 1), ('self explanatory', 1), ('ultra simple', 1), ('upvote', 1)]"
830,Positions of Large Groups,https://leetcode.com/problems/positions-of-large-groups,"In a string s of lowercase letters, these letters form consecutive groups of the same character.

For example, a string like s = ""abbxxxxzyy"" has the groups ""a"", ""bb"", ""xxxx"", ""z"", and ""yy"".

A group is identified by an interval [start, end], where start and end denote the start and end indices (inclusive) of the group. In the above example, ""xxxx"" has the interval [3,6].

A group is considered large if it has 3 or more characters.

Return the intervals of every large group sorted in increasing order by start index.",['array'],Easy,481,105,112766,57007,[],"[('c++', 19), ('python', 16), ('cpp', 14), ('java', 12), ('javascript', 11), ('python 3', 10), ('java-solution', 7), ('python3', 7), ('ruby', 5), ('easy-to-understand', 4), ('easy-understanding', 3), ('two-pointer', 3), ('two-pointers', 3), ('c++17', 2), ('cpp solution', 2), ('easytounderstand', 2), ('groupby', 2), ('linear time', 2), ('swift', 2), ('#codeboy', 1), ('#easy-understanding', 1), ('#easysolution', 1), ('#python', 1), ('#python 3', 1), ('#python3', 1), ('1 pass', 1), ('100 faster', 1), ('100 space', 1), ('2 ways', 1), ('accumulate', 1), ('algorithms', 1), ('array functions', 1), ('arraylist', 1), ('best', 1), ('c#', 1), ('c++11', 1), ('clean code', 1), ('commented', 1), ('distance', 1), ('east-to-understand', 1), ('easy', 1), ('easy to understand', 1), ('easy-undestand', 1), ('explanation', 1), ('fast-solution', 1), ('findif', 1), ('functional', 1), ('go', 1), ('golang', 1), ('golang-solution', 1), ('iterator', 1), ('java ac solution', 1), ('kotlin', 1), ('list', 1), ('no extra space', 1), ('optimized', 1), ('php', 1), ('pyhton3', 1), ('python2', 1), ('queue', 1), ('rajat', 1), ('regex', 1), ('short and simple', 1), ('simple solution', 1), ('sliding window', 1), ('slidingwindow', 1), ('stacks', 1), ('string', 1), ('two pointer technique', 1), ('two pointers', 1), ('two-lines', 1), ('twopointer', 1)]"
829,Consecutive Numbers Sum,https://leetcode.com/problems/consecutive-numbers-sum,"Given a positive integer N, how many ways can we write it as a sum of consecutive positive integers?",['math'],Hard,610,767,116676,45769,[],"[('math', 5), ('python', 4), ('c#', 3), ('python 3', 3), ('python3', 3), ('c++', 2), ('easy-to-understand', 2), ('easy-understanding', 2), ('java', 2), ('#easy-to-understand', 1), ('#easy-understanding', 1), ('#explanation', 1), ('#linear', 1), ('#python', 1), ('#python 3', 1), ('#python3', 1), ('1 line', 1), ('1-line', 1), ('cpp', 1), ('explanation of logic', 1), ('few lines', 1), ('inequalities', 1), ('javascript', 1), ('math solution', 1), ('math-proof', 1), ('ojerror', 1), ('one line', 1), ('one-liner', 1), ('series', 1), ('slidingwindow', 1)]"
828,Count Unique Characters of All Substrings of a Given String,https://leetcode.com/problems/count-unique-characters-of-all-substrings-of-a-given-string,"Let's define a function countUniqueChars(s) that returns the number of unique characters on s, for example if s = ""LEETCODE"" then ""L"", ""T"",""C"",""O"",""D"" are the unique characters since they appear only once in s, therefore countUniqueChars(s) = 5.

On this problem given a string s we need to return the sum of countUniqueChars(t) where t is a substring of s. Notice that some substrings can be repeated so on this case you have to count the repeated ones too.

Since the answer can be very large, return the answer modulo 10 ^ 9 + 7.",['two-pointers'],Hard,619,63,32999,15476,[],"[('c', 1), ('c#', 1), ('constant memory', 1), ('lee215', 1), ('linear time', 1), ('python', 1), ('python 3', 1), ('python3', 1), ('single pass', 1)]"
827,Making A Large Island,https://leetcode.com/problems/making-a-large-island,"You are given an n x n binary matrix grid. You are allowed to change at most one 0 to be 1.

Return the size of the largest island in grid after applying this operation.

An island is a 4-directionally connected group of 1s.","['depth-first-search', 'breadth-first-search']",Hard,744,22,70177,33071,[],"[('dfs', 11), ('bfs', 5), ('c++', 5), ('python', 5), ('java', 4), ('python3', 4), ('cpp', 3), ('cpp solution', 3), ('c#', 2), ('dfs solution', 2), ('floodfill', 2), ('javascript', 2), ('union find', 2), ('unionfind', 2), ('breadth-first-search', 1), ('c++ solution', 1), ('dfs simple solution', 1), ('dfs-bfs', 1), ('dfs-iterative', 1), ('dp', 1), ('dsu', 1), ('explained', 1), ('golang', 1), ('hashmap', 1), ('hasmap', 1), ('javascript solution', 1), ('js', 1), ('kotlin', 1), ('leetcode', 1), ('linear memory', 1), ('linear time', 1), ('python 3', 1), ('recursive-dfs', 1), ('rust', 1), ('testcases', 1)]"
826,Most Profit Assigning Work,https://leetcode.com/problems/most-profit-assigning-work,"We have jobs: difficulty[i] is the difficulty of the ith job, and profit[i] is the profit of the ith job. 

Now we have some workers. worker[i] is the ability of the ith worker, which means that this worker can only complete a job with difficulty at most worker[i]. 

Every worker can be assigned at most one job, but one job can be completed multiple times.

For example, if 3 people attempt the same job that pays $1, then the total profit will be $3.  If a worker cannot complete any job, his profit is $0.

What is the most profit we can make?",['two-pointers'],Medium,510,80,66248,26102,[],"[('greedy', 4), ('binary-search', 3), ('java', 3), ('javascript', 3), ('python', 3), ('binarysearch', 2), ('c#', 2), ('c++', 2), ('sorting', 2), ('2 pointers', 1), ('cpp', 1), ('csharp', 1), ('dp', 1), ('dynamic programming', 1), ('easy-understanding', 1), ('java ac solution', 1), ('java-solution', 1), ('python3', 1), ('question', 1), ('quick-sort', 1), ('segment tree', 1), ('simple clear c++ solution', 1), ('sorted array', 1), ('time complexity', 1)]"
825,Friends Of Appropriate Ages,https://leetcode.com/problems/friends-of-appropriate-ages,"Some people will make friend requests. The list of their ages is given and ages[i] is the age of the ith person. 

Person A will NOT friend request person B (B != A) if any of the following conditions are true:


	age[B] <= 0.5 * age[A] + 7
	age[B] > age[A]
	age[B] > 100 && age[A] < 100


Otherwise, A will friend request B.

Note that if A requests B, B does not necessarily request A.  Also, people will not friend request themselves.

How many total friend requests are made?",['array'],Medium,403,830,109252,48526,[],"[('javascript', 5), ('python', 5), ('python 3', 4), ('array', 3), ('java', 3), ('binary-search', 2), ('c#', 2), ('c++', 2), ('javascript solution', 2), ('python3', 2), ('binary search', 1), ('binarysearch', 1), ('clever', 1), ('counter', 1), ('csharp', 1), ('dictonary', 1), ('explained solution', 1), ('go', 1), ('golang', 1), ('golang-solution', 1), ('hashmap', 1), ('js javascript', 1), ('keep it simple', 1), ('kotlinvim', 1), ('map', 1), ('readable', 1), ('step by step', 1)]"
824,Goat Latin,https://leetcode.com/problems/goat-latin,"A sentence S is given, composed of words separated by spaces. Each word consists of lowercase and uppercase letters only.

We would like to convert the sentence to ""Goat Latin"" (a made-up language similar to Pig Latin.)

The rules of Goat Latin are as follows:


	If a word begins with a vowel (a, e, i, o, or u), append ""ma"" to the end of the word.
	For example, the word 'apple' becomes 'applema'.
	 
	If a word begins with a consonant (i.e. not a vowel), remove the first letter and append it to the end, then add ""ma"".
	For example, the word ""goat"" becomes ""oatgma"".
	 
	Add one letter 'a' to the end of each word per its word index in the sentence, starting with 1.
	For example, the first word gets ""a"" added to the end, the second word gets ""aa"" added to the end and so on.


Return the final sentence representing the conversion from S to Goat Latin.",['string'],Easy,519,942,175956,117832,[],"[('python', 35), ('python 3', 34), ('javascript', 31), ('c++', 28), ('java', 27), ('cpp', 24), ('easy-understanding', 21), ('python3', 18), ('java-solution', 13), ('easy-undestand', 10), ('string', 10), ('c#', 9), ('regex', 8), ('stringbuilder', 8), ('stringstream', 8), ('cpp solution', 7), ('easy-to-understand', 7), ('easytounderstand', 6), ('0ms', 5), ('easy', 5), ('explained', 5), ('golang', 5), ('kotlin', 4), ('one-liner', 4), ('simple', 4), ('c', 3), ('easy-understand', 3), ('go', 3), ('golang-solution', 3), ('javascript solution', 3), ('js', 3), ('python2', 3), ('regexp', 3), ('swift', 3), ('#easysolution', 2), ('array', 2), ('beginnerfriendly', 2), ('brute force', 2), ('cpp easy', 2), ('easy to understand', 2), ('functional programming', 2), ('go-solution', 2), ('map', 2), ('ruby', 2), ('sets', 2), ('shortest', 2), ('simple solution', 2), ('simple-solution', 2), ('solution', 2), ('straight-forward', 2), ('straightforward', 2), ('string concatenation', 2), ('strings', 2), ('#codeboy', 1), ('#easy-understand', 1), ('#easy-understanding', 1), ('#python', 1), ('#python 3', 1), ('#python3', 1), ('0 ms', 1), ('1-liner', 1), ('100 faster', 1), ('100 space', 1), ('83 faster', 1), ('accepted', 1), ('beats 100', 1), ('begineer', 1), ('beginner', 1), ('beginner friendly', 1), ('brute-force', 1), ('c++ code', 1), ('c++ easy to understand', 1), ('c++ iterative sol', 1), ('c++ solution', 1), ('c++11', 1), ('challenge-me', 1), ('char compare', 1), ('commented', 1), ('comments added', 1), ('comments-added', 1), ('csharp', 1), ('dynamic programming', 1), ('easiest', 1), ('easy understanding', 1), ('easy undestanding', 1), ('easy-to-read', 1), ('es6', 1), ('explaination', 1), ('faster than 100', 1), ('fastest', 1), ('functional-programming', 1), ('generator-expression', 1), ('golang solution', 1), ('google interview question', 1), ('greedy', 1), ('greedy algorithm', 1), ('greedy approach', 1), ('haskell', 1), ('heap-buffer-overflow', 1), ('helper', 1), ('implementation', 1), ('interview experience', 1), ('javascriptes6', 1), ('js javascript', 1), ('kotlinvim', 1), ('linear time', 1), ('linear-time', 1), ('list-comprehension', 1), ('one line', 1), ('one-pass', 1), ('pattern matching', 1), ('pyhton3', 1), ('python-solution', 1), ('python3.8', 1), ('pythonic', 1), ('quick', 1), ('recursion', 1), ('reduce', 1), ('regular expression', 1), ('runtime-error', 1), ('scala', 1), ('self-explanatory', 1), ('set', 1), ('simpler', 1), ('sliding-window', 1), ('solution-javascript', 1), ('stl', 1), ('str.erase', 1), ('str.find', 1), ('string manipulation', 1), ('string-operation', 1), ('strings manipulation', 1), ('strings.builder', 1), ('strings.join', 1), ('structured', 1), ('ternary-operator', 1), ('typescript', 1), ('unit-test', 1), ('very clear', 1), ('very simple', 1), ('video solution', 1), ('video-explanation', 1), ('with comments', 1)]"
823,Binary Trees With Factors,https://leetcode.com/problems/binary-trees-with-factors,"Given an array of unique integers, arr, where each integer arr[i] is strictly greater than 1.

We make a binary tree using these integers, and each number may be used for any number of times. Each non-leaf node's value should be equal to the product of the values of its children.

Return the number of binary trees we can make. The answer may be too large so return the answer modulo 109 + 7.",[],Medium,686,90,73857,32241,[],"[('dp', 20), ('dynamic programming', 18), ('c++', 14), ('python', 10), ('java', 9), ('explained', 8), ('javascript', 7), ('hashmap', 6), ('python3', 6), ('cpp', 5), ('golang', 3), ('java ac solution', 3), ('simple', 3), ('sorting', 3), ('c#', 2), ('cpp solution', 2), ('dynamic-programming', 2), ('easy-understanding', 2), ('go', 2), ('java solution', 2), ('map', 2), ('python 3', 2), ('recursive dp', 2), ('ruby', 2), ('rust', 2), ('video-explanation', 2), ('2 pointers', 1), ('5 liner', 1), ('awesome samriddhi', 1), ('binary-search', 1), ('binarytreeswithfactors', 1), ('c++ solution', 1), ('clean code', 1), ('combinatorics', 1), ('comments', 1), ('comments-added', 1), ('cp', 1), ('dfs', 1), ('dictionary c#', 1), ('dynamic programmin', 1), ('easy', 1), ('easy-to-understand', 1), ('easy-undestand', 1), ('explained solution', 1), ('explanation of logic', 1), ('faq', 1), ('fast and simple', 1), ('fastest', 1), ('graph theory', 1), ('hash table', 1), ('help needed', 1), ('iteration', 1), ('java-solution', 1), ('javascrip', 1), ('javascript solution', 1), ('javscript', 1), ('math', 1), ('memo', 1), ('memoization', 1), ('memoziation', 1), ('number theory', 1), ('observations', 1), ('pair sum', 1), ('permutations', 1), ('python2', 1), ('recurision', 1), ('recursion', 1), ('short code', 1), ('swift', 1), ('ting', 1), ('top-down', 1), ('tree', 1), ('two pointer approach', 1), ('two-pointers', 1), ('typescript', 1), ('video explanation', 1)]"
822,Card Flipping Game,https://leetcode.com/problems/card-flipping-game,"On a table are N cards, with a positive integer printed on the front and back of each card (possibly different).

We flip any number of cards, and after we choose one card. 

If the number X on the back of the chosen card is not on the front of any card, then this number X is good.

What is the smallest number that is good?  If no number is good, output 0.

Here, fronts[i] and backs[i] represent the number on the front and back of card i. 

A flip swaps the front and back numbers, so the value on the front is now on the back and vice versa.",[],Medium,86,531,24750,10844,[],"[('python3', 3), ('sets', 3), ('algorithms', 2), ('c#', 2), ('c++', 1), ('cpp', 1), ('csharp', 1), ('explanation', 1), ('golang', 1), ('javascript', 1), ('javascript solution', 1), ('linear time', 1), ('on', 1), ('one-liner', 1), ('oneline', 1), ('python', 1), ('python 3', 1), ('swift', 1)]"
821,Shortest Distance to a Character,https://leetcode.com/problems/shortest-distance-to-a-character,"Given a string s and a character c that occurs in s, return an array of integers answer where answer.length == s.length and answer[i] is the distance from index i to the closest occurrence of character c in s.

The distance between two indices i and j is abs(i - j), where abs is the absolute value function.",[],Easy,1597,101,151715,106387,[],"[('c++', 36), ('python', 35), ('javascript', 28), ('python 3', 27), ('java', 21), ('cpp', 20), ('easy-understanding', 17), ('c#', 12), ('python3', 11), ('java-solution', 10), ('easy', 8), ('simple', 6), ('golang', 5), ('two-pointers', 5), ('100 speed', 4), ('cpp solution', 4), ('easy to understand', 4), ('easy-to-understand', 4), ('easy-undestand', 4), ('explained', 4), ('javascript solution', 4), ('video-explanation', 4), ('100 memory', 3), ('bfs', 3), ('binary search', 3), ('c++ code', 3), ('easytounderstand', 3), ('kotlin', 3), ('linear time', 3), ('ruby', 3), ('stack', 3), ('100 space', 2), ('brute force', 2), ('c', 2), ('commented', 2), ('constant memory', 2), ('cpp easy', 2), ('easy understanding', 2), ('faster', 2), ('golang-solution', 2), ('interview', 2), ('linear', 2), ('one-pass', 2), ('optimal', 2), ('rust', 2), ('shortestdistancecharacter', 2), ('single pass', 2), ('space-compexity', 2), ('string parsing', 2), ('time-complexity', 2), ('two pass', 2), ('typescript', 2), ('#easy-understanding', 1), ('#java', 1), ('#java-solution', 1), ('#python 3', 1), ('#video-explanation', 1), ('#videoexplanation', 1), ('0ms-solution', 1), ('100 faster', 1), ('100 faster runtime', 1), ('100 percentage fastest', 1), ('2 line', 1), ('2 pointers', 1), ('2-pointer', 1), ('2pass', 1), ('algorithms', 1), ('any', 1), ('approach', 1), ('array', 1), ('array map', 1), ('array reduce', 1), ('auxillary space', 1), ('begineer friendly', 1), ('beginner friendly', 1), ('bfs python', 1), ('binary-search', 1), ('brute force to optimal', 1), ('brute-force', 1), ('c++ easy to understand', 1), ('c++ solution', 1), ('clean code', 1), ('comment', 1), ('comments', 1), ('cool', 1), ('cplusplus', 1), ('cpp 100', 1), ('declarative javascript', 1), ('deque', 1), ('distance', 1), ('easiest', 1), ('easy solution', 1), ('easy undestanding', 1), ('easy-solition', 1), ('easy-to-read', 1), ('easy-understand', 1), ('explanation of logic', 1), ('fast', 1), ('fast and simple', 1), ('fast-solution', 1), ('generator', 1), ('go', 1), ('graph', 1), ('intuition', 1), ('intuitive', 1), ('java-8', 1), ('kotlin-solution', 1), ('linear search', 1), ('mrmagician', 1), ('o of n', 1), ('on', 1), ('one line', 1), ('one pass', 1), ('one pass solution', 1), ('one-loop', 1), ('php', 1), ('priority queue', 1), ('propagation', 1), ('pushback', 1), ('python2', 1), ('python3.8', 1), ('raviinroorkee', 1), ('readable', 1), ('readable code', 1), ('regex', 1), ('reserve', 1), ('sequence', 1), ('series', 1), ('sets', 1), ('shortest', 1), ('shortest-distance', 1), ('simplest', 1), ('solution', 1), ('split', 1), ('stacks', 1), ('string', 1), ('strings', 1), ('strings parsing', 1), ('swift', 1), ('swift5', 1), ('two pointers', 1), ('two-pointer', 1), ('unique', 1), ('upvote', 1)]"
820,Short Encoding of Words,https://leetcode.com/problems/short-encoding-of-words,"A valid encoding of an array of words is any reference string s and array of indices indices such that:


	words.length == indices.length
	The reference string s ends with the '#' character.
	For each index indices[i], the substring of s starting from indices[i] and up to (but not including) the next '#' character is equal to words[i].


Given an array of words, return the length of the shortest reference string s possible of any valid encoding of words.",[],Medium,601,218,74365,40861,[],"[('trie', 23), ('java', 16), ('c++', 13), ('python', 10), ('javascript', 9), ('sort', 9), ('java-solution', 7), ('python3', 6), ('string', 6), ('cpp', 5), ('easy-to-understand', 5), ('golang', 5), ('video-explanation', 5), ('c#', 4), ('explained', 4), ('rust', 4), ('dfs', 3), ('easy-understanding', 3), ('go', 3), ('#java', 2), ('#videoexplanation', 2), ('array', 2), ('csharp', 2), ('easy', 2), ('hash table', 2), ('hashmap', 2), ('hashset', 2), ('hashtable', 2), ('ruby', 2), ('set', 2), ('tries', 2), ('video', 2), ('video solution', 2), ('#sort', 1), ('#string', 1), ('arrays', 1), ('bfs', 1), ('bucket sort', 1), ('c', 1), ('c++ code', 1), ('c++ solution', 1), ('c++14', 1), ('clean', 1), ('clean clode', 1), ('clean solution', 1), ('commented', 1), ('comments', 1), ('cpp solution', 1), ('dict', 1), ('dictionary c#', 1), ('easy understanding', 1), ('easytounderstand', 1), ('elegant', 1), ('explained solution', 1), ('explanation of logic', 1), ('filter', 1), ('go solution', 1), ('golang-solution', 1), ('hash set', 1), ('hashing', 1), ('js', 1), ('kotlin', 1), ('kotlin-solution', 1), ('linear time', 1), ('nlogn', 1), ('one pass solution', 1), ('optimal', 1), ('optimisation', 1), ('optimised', 1), ('performance', 1), ('postorder-traversal', 1), ('python 3', 1), ('qsort', 1), ('regex', 1), ('scala', 1), ('short', 1), ('simple', 1), ('simple clear c++ solution', 1), ('sort-function', 1), ('sorted', 1), ('sorted array', 1), ('sorting', 1), ('sortings', 1), ('substring', 1), ('suffix trie', 1), ('swift', 1), ('ting', 1), ('tire', 1), ('tree', 1), ('tree traversal', 1), ('treeset', 1), ('trie-dfs', 1), ('unordered set', 1)]"
707,Design Linked List,https://leetcode.com/problems/design-linked-list,"Design your implementation of the linked list. You can choose to use a singly or doubly linked list.
A node in a singly linked list should have two attributes: val and next. val is the value of the current node, and next is a pointer/reference to the next node.
If you want to use the doubly linked list, you will need one more attribute prev to indicate the previous node in the linked list. Assume all nodes in the linked list are 0-indexed.

Implement the MyLinkedList class:


	MyLinkedList() Initializes the MyLinkedList object.
	int get(int index) Get the value of the indexth node in the linked list. If the index is invalid, return -1.
	void addAtHead(int val) Add a node of value val before the first element of the linked list. After the insertion, the new node will be the first node of the linked list.
	void addAtTail(int val) Append a node of value val as the last element of the linked list.
	void addAtIndex(int index, int val) Add a node of value val before the indexth node in the linked list. If index equals the length of the linked list, the node will be appended to the end of the linked list. If index is greater than the length, the node will not be inserted.
	void deleteAtIndex(int index) Delete the indexth node in the linked list, if the index is valid.","['linked-list', 'design']",Medium,850,878,423848,110546,"[""Design Skiplist""]","[('linked-list', 14), ('java', 13), ('python', 12), ('javascript', 10), ('python 3', 9), ('c++', 8), ('cpp', 8), ('double-linked-list', 6), ('c#', 5), ('doubly-linked-list', 5), ('python3', 5), ('single-linked-list', 5), ('singly-linked-list', 5), ('doubly linked list', 4), ('golang', 4), ('typescript', 4), ('array', 3), ('c', 3), ('doubly-linked list', 3), ('easy-understanding', 3), ('iterative', 3), ('kotlin', 3), ('linkedlists', 3), ('sentinel node', 3), ('c++ code', 2), ('easy-to-understand', 2), ('easy-understand', 2), ('easytounderstand', 2), ('fast and simple', 2), ('java-solution', 2), ('javascrip', 2), ('swift', 2), ('#javascript', 1), ('beats 100', 1), ('beats 98 pc', 1), ('beginner', 1), ('beginner friendly', 1), ('beginners level', 1), ('c++ easy to understand', 1), ('c++17', 1), ('circular', 1), ('clean-efficient-code', 1), ('comments added', 1), ('concise-solution', 1), ('constant-time', 1), ('cpp eas', 1), ('cpp easy', 1), ('cpp-solution', 1), ('dequeue', 1), ('designlinkedlist', 1), ('double-pointers', 1), ('dummy-node', 1), ('easysolution', 1), ('fakehead', 1), ('faster than 99.21', 1), ('golang-solution', 1), ('java ac solution', 1), ('linear time', 1), ('linked list', 1), ('oop', 1), ('recursive', 1), ('sentinel-node', 1), ('simple', 1), ('simplesweet', 1), ('single', 1), ('solution', 1), ('stl algorithms', 1), ('swift debugging', 1), ('two pointers', 1), ('two-pointer', 1), ('two-pointers', 1)]"
819,Most Common Word,https://leetcode.com/problems/most-common-word,"Given a string paragraph and a string array of the banned words banned, return the most frequent word that is not banned. It is guaranteed there is at least one word that is not banned, and that the answer is unique.

The words in paragraph are case-insensitive and the answer should be returned in lowercase.",['string'],Easy,963,2094,503326,228841,[],"[('python 3', 41), ('python', 36), ('c++', 29), ('hashmap', 27), ('javascript', 26), ('java', 25), ('cpp', 19), ('python3', 13), ('dictionary', 12), ('c#', 9), ('easy-undestand', 9), ('hashset', 9), ('java-solution', 9), ('golang', 8), ('ruby', 7), ('easy', 6), ('easy-to-understand', 6), ('map', 6), ('swift', 6), ('clean code', 5), ('counter', 5), ('easy-understanding', 5), ('regex', 5), ('cpp solution', 4), ('go', 4), ('javascript solution', 4), ('string', 4), ('c', 3), ('dictonary', 3), ('easytounderstand', 3), ('explained', 3), ('kotlin', 3), ('regular-expression', 3), ('set', 3), ('simple solution', 3), ('string-operation', 3), ('amazon sde', 2), ('beginner friendly', 2), ('c++ code', 2), ('commetend', 2), ('easy to understand', 2), ('frequency count', 2), ('hash table', 2), ('linear', 2), ('linq', 2), ('regexp', 2), ('sets', 2), ('simple', 2), ('trie', 2), ('two-lines', 2), ('#dictionary', 1), ('#javascript', 1), ('#python', 1), ('100 faster', 1), ('98faster', 1), ('amazon interview', 1), ('amazon sde2', 1), ('an7one', 1), ('array', 1), ('basics', 1), ('beginnerfriendly', 1), ('brute force', 1), ('c#-solution', 1), ('c++11', 1), ('c++14', 1), ('clean', 1), ('clean-efficient', 1), ('clear explanation', 1), ('clear-understanding', 1), ('collections', 1), ('commented', 1), ('comments added', 1), ('commonword', 1), ('concise-solution', 1), ('cpp easy', 1), ('cpp-solution', 1), ('detailed', 1), ('dict', 1), ('dictionary c#', 1), ('dictionary comprehension', 1), ('easy-understand', 1), ('efficient', 1), ('es6', 1), ('explanation', 1), ('explanation of logic', 1), ('fast', 1), ('fast and simple', 1), ('frequency', 1), ('functional programming', 1), ('functional-programming', 1), ('good-variable-names', 1), ('hash', 1), ('heapq', 1), ('linear time', 1), ('linear-scan', 1), ('linear-time-space', 1), ('logical', 1), ('logical thinking', 1), ('loops', 1), ('maps', 1), ('nlogn', 1), ('nlogn time', 1), ('objects', 1), ('one-liner', 1), ('pair', 1), ('pyhton3', 1), ('python2', 1), ('readable code', 1), ('run time error', 1), ('simple clear c++ solution', 1), ('sort', 1), ('step by step', 1), ('stl algorithms', 1), ('str.maketrans', 1), ('streams', 1), ('stringbuilder', 1), ('stringstream', 1), ('strtok', 1), ('tolower', 1), ('translation', 1), ('typescript', 1), ('unit-test', 1), ('unordered map', 1), ('vector', 1)]"
818,Race Car,https://leetcode.com/problems/race-car,"Your car starts at position 0 and speed +1 on an infinite number line.  (Your car can go into negative positions.)

Your car drives automatically according to a sequence of instructions A (accelerate) and R (reverse).

When you get an instruction ""A"", your car does the following: position += speed, speed *= 2.

When you get an instruction ""R"", your car does the following: if your speed is positive then speed = -1 , otherwise speed = 1.  (Your position stays the same.)

For example, after commands ""AAR"", your car goes to positions 0->1->3->3, and your speed goes to 1->2->4->-1.

Now for some target position, say the length of the shortest sequence of instructions to get there.","['dynamic-programming', 'heap']",Hard,644,72,61615,24950,[],"[('bfs', 5), ('c++', 4), ('breadth first search', 3), ('python', 3), ('clean', 2), ('concise-solution', 2), ('dynamic programming', 2), ('memoization', 2), ('recursion', 2), ('c#', 1), ('dp', 1), ('dynamic-programming', 1), ('early termination', 1), ('easy-to-understand', 1), ('heapq', 1), ('javascript', 1), ('kotlin', 1), ('priority-queue', 1), ('two-solutions', 1), ('unordered set', 1)]"
817,Linked List Components,https://leetcode.com/problems/linked-list-components,"We are given head, the head node of a linked list containing unique integer values.

We are also given the list G, a subset of the values in the linked list.

Return the number of connected components in G, where two values are connected if they appear consecutively in the linked list.",['linked-list'],Medium,503,1370,96471,55772,[],"[('c++', 19), ('cpp', 19), ('python', 7), ('python 3', 7), ('python3', 5), ('javascript', 4), ('linked-list', 4), ('java', 3), ('sets', 3), ('beginner friendly', 2), ('binary-search', 2), ('c', 2), ('c#', 2), ('easy-to-understand', 2), ('easy-understanding', 2), ('fast and simple', 2), ('java-solution', 2), ('linked list', 2), ('python2', 2), ('set', 2), ('simple solution', 2), ('unordered set', 2), ('unorderedset', 2), ('100 speed', 1), ('array easy', 1), ('breadth first traversal', 1), ('buffer-overflow', 1), ('c code', 1), ('c++ code', 1), ('cpp easy', 1), ('cpp solution', 1), ('dictionaries', 1), ('easy', 1), ('easy understanding', 1), ('es6', 1), ('golang', 1), ('golang solution', 1), ('graph theory', 1), ('hashmap', 1), ('java solution sharing', 1), ('javascript solution', 1), ('linear', 1), ('linkedlists', 1), ('question', 1), ('queue', 1), ('ruby', 1), ('rust', 1), ('single pass', 1), ('straight-forward', 1), ('three-lines', 1), ('two-pointer', 1), ('union find', 1), ('union-find', 1), ('unordered map', 1), ('vectors', 1)]"
816,Ambiguous Coordinates,https://leetcode.com/problems/ambiguous-coordinates,"We had some 2-dimensional coordinates, like ""(1, 3)"" or ""(2, 0.5)"".  Then, we removed all commas, decimal points, and spaces, and ended up with the string S.  Return a list of strings representing all possibilities for what our original coordinates could have been.

Our original representation never had extraneous zeroes, so we never started with numbers like ""00"", ""0.0"", ""0.00"", ""1.0"", ""001"", ""00.01"", or any other number that can be represented with less digits.  Also, a decimal point within a number never occurs without at least one digit occuring before it, so we never started with numbers like "".1"".

The final answer list can be returned in any order.  Also note that all coordinates in the final answer have exactly one space between them (occurring after the comma.)",['string'],Medium,137,251,23598,11391,[],"[('c++', 3), ('cpp', 2), ('beginner friendly', 1), ('c#', 1), ('easy', 1), ('easy understanding', 1), ('easy-understanding', 1), ('explained', 1), ('golang', 1), ('java', 1), ('javascript', 1), ('python', 1), ('python 3', 1), ('python3', 1), ('string', 1)]"
815,Bus Routes,https://leetcode.com/problems/bus-routes,"You are given an array routes representing bus routes where routes[i] is a bus route that the ith bus repeats forever.


	For example, if routes[0] = [1, 5, 7], this means that the 0th bus travels in the sequence 1 -> 5 -> 7 -> 1 -> 5 -> 7 -> 1 -> ... forever.


You will start at the bus stop source (You are not on any bus initially), and you want to go to the bus stop target. You can travel between bus stops by buses only.

Return the least number of buses you must take to travel from source to target. Return -1 if it is not possible.",['breadth-first-search'],Hard,1101,34,112642,49105,[],"[('bfs', 16), ('python', 5), ('c++', 4), ('java', 4), ('breadth first search', 3), ('c#', 3), ('python 3', 2), ('bidirectional', 1), ('breadth-first-search', 1), ('dijkstra', 1), ('dijkstras algorithm', 1), ('easy', 1), ('easy-understanding', 1), ('explanation', 1), ('functional programming', 1), ('graph', 1), ('hashmap', 1), ('help needed', 1), ('java ac solution', 1), ('java-solution', 1), ('javascript', 1), ('optimal', 1), ('queue', 1), ('scala', 1), ('vector', 1)]"
814,Binary Tree Pruning,https://leetcode.com/problems/binary-tree-pruning,"We are given the head node root of a binary tree, where additionally every node's value is either a 0 or a 1.

Return the same tree where every subtree (of the given tree) not containing a 1 has been removed.

(Recall that the subtree of a node X is X, plus every node that is a descendant of X.)",['tree'],Medium,1421,53,120313,86515,[],"[('recursion', 34), ('c++', 30), ('dfs', 28), ('java', 19), ('cpp', 15), ('python 3', 15), ('python', 14), ('python3', 11), ('binary-tree', 10), ('recursive', 7), ('java-solution', 6), ('javascript', 6), ('cpp solution', 5), ('postorder traversal', 5), ('c', 4), ('c#', 4), ('easy-understanding', 4), ('easy understanding', 3), ('golang', 3), ('postorder-traversal', 3), ('recursive easy', 3), ('simple', 3), ('tree-traversal', 3), ('trees', 3), ('100 speed', 2), ('binary tree pruning', 2), ('c++ code', 2), ('commentary', 2), ('cpp easy', 2), ('easy-undestand', 2), ('easytounderstand', 2), ('iterative', 2), ('linear time', 2), ('post-order-traversal', 2), ('recursively', 2), ('recusion', 2), ('simple solution', 2), ('swift', 2), ('1-liner', 1), ('100', 1), ('100 faster', 1), ('100 faster runtime', 1), ('100 memory', 1), ('100 space', 1), ('4 lines', 1), ('algorithms', 1), ('beginner friendly', 1), ('best-solution', 1), ('binary tree', 1), ('c code', 1), ('clean code', 1), ('comments', 1), ('csharp', 1), ('deleteleaveswithgivenval', 1), ('depth first search', 1), ('depth-first search', 1), ('dfs simple solution', 1), ('dfs solution', 1), ('dfs-in-order', 1), ('dfs-tree', 1), ('divide and conquer', 1), ('duplicated-question', 1), ('easy to understand', 1), ('easy-to-understand', 1), ('easysolution', 1), ('es6', 1), ('explanation of logic', 1), ('fast and simple', 1), ('faster', 1), ('fasterthan100', 1), ('go', 1), ('go-solution', 1), ('golang-solution', 1), ('intution', 1), ('iterative solution', 1), ('js', 1), ('memoization', 1), ('mrmagician', 1), ('pass by reference', 1), ('postorder', 1), ('prune', 1), ('rajat', 1), ('readable', 1), ('recurision', 1), ('recurrsion', 1), ('recursion palindrome', 1), ('recusrion', 1), ('resursive', 1), ('rust', 1), ('self-explanatory', 1), ('short code', 1), ('shorter', 1), ('solution', 1), ('too easy', 1), ('tree', 1), ('tree traversal', 1), ('typescript', 1), ('unique', 1), ('upvote', 1), ('video-explanation', 1), ('without recursion', 1)]"
813,Largest Sum of Averages,https://leetcode.com/problems/largest-sum-of-averages,"We partition a row of numbers A into at most K adjacent (non-empty) groups, then our score is the sum of the average of each group. What is the largest score we can achieve?

Note that our partition must use every number in A, and that scores are not necessarily integers.",['dynamic-programming'],Medium,1207,55,61881,31733,[],"[('dynamic programming', 12), ('dp', 11), ('memoization', 9), ('c++', 7), ('cpp solution', 5), ('python 3', 5), ('python', 4), ('recursion', 4), ('bottom up', 2), ('dfs', 2), ('easy', 2), ('prefix sum', 2), ('python3', 2), ('bottom up dp', 1), ('brute force', 1), ('cpp', 1), ('difficulty', 1), ('easy-undestand', 1), ('error', 1), ('explained', 1), ('fast and simple', 1), ('golang', 1), ('interview-friendly', 1), ('intuitive', 1), ('iterative-dfs', 1), ('java', 1), ('javascrip', 1), ('javascript', 1), ('level', 1), ('linear space', 1), ('lrucache', 1), ('memo', 1), ('prefix', 1), ('recursion memoization', 1), ('recursive', 1), ('top down', 1), ('top down approach', 1), ('top down dp', 1), ('top-down', 1)]"
812,Largest Triangle Area,https://leetcode.com/problems/largest-triangle-area,You have a list of points in the plane. Return the area of the largest triangle that can be formed by any 3 of the points.,['math'],Easy,244,1129,44111,26074,"[""Largest Perimeter Triangle""]","[('python', 7), ('c++', 5), ('python 3', 5), ('python3', 3), ('cpp solution', 2), ('java', 2), ('javascript', 2), ('#codeboy', 1), ('#easy-understanding', 1), ('#easysolution', 1), ('#python', 1), ('#python 3', 1), ('brute force', 1), ('brute-force', 1), ('c', 1), ('c++11', 1), ('commented', 1), ('cpp', 1), ('easy-to-understand', 1), ('easy-understanding', 1), ('heorrule', 1), ('intutive', 1), ('java-solution', 1), ('javasccript', 1), ('math', 1), ('python2', 1), ('ruby', 1), ('shorter', 1), ('simpe', 1), ('swift', 1), ('ultra easy', 1)]"
811,Subdomain Visit Count,https://leetcode.com/problems/subdomain-visit-count,"A website domain like ""discuss.leetcode.com"" consists of various subdomains. At the top level, we have ""com"", at the next level, we have ""leetcode.com"", and at the lowest level, ""discuss.leetcode.com"". When we visit a domain like ""discuss.leetcode.com"", we will also visit the parent domains ""leetcode.com"" and ""com"" implicitly.

Now, call a ""count-paired domain"" to be a count (representing the number of visits this domain received), followed by a space, followed by the address. An example of a count-paired domain might be ""9001 discuss.leetcode.com"".

We are given a list cpdomains of count-paired domains. We would like a list of count-paired domains, (in the same format as the input, and in any order), that explicitly counts the number of visits to each subdomain.",['hash-table'],Easy,699,859,168713,121227,[],"[('hashmap', 29), ('c++', 24), ('python', 23), ('python3', 18), ('javascript', 17), ('java', 16), ('python 3', 14), ('cpp', 12), ('hash table', 8), ('c#', 7), ('map', 7), ('cpp solution', 6), ('dictionary', 5), ('easy-to-understand', 4), ('easy-understanding', 4), ('ruby', 4), ('simple', 4), ('c++ code', 3), ('defaultdict', 3), ('easy', 3), ('easy-undestand', 3), ('golang', 3), ('java-solution', 3), ('javascript solution', 3), ('js', 3), ('string', 3), ('beginner friendly', 2), ('c', 2), ('clean code', 2), ('commented', 2), ('counter', 2), ('cpp easy', 2), ('easy to understand', 2), ('easytounderstand', 2), ('self-explanatory', 2), ('simple solution', 2), ('split', 2), ('swift', 2), ('23ms', 1), ('beats 97', 1), ('bfs', 1), ('bug report', 1), ('c++11', 1), ('clean', 1), ('clean-code', 1), ('concise', 1), ('cpp clear', 1), ('cpp-solution', 1), ('dictonary', 1), ('easy to read', 1), ('easy understanding', 1), ('fast-solution', 1), ('faster than 100.00', 1), ('functional', 1), ('go', 1), ('golang-solution', 1), ('hash', 1), ('hashmap java', 1), ('iterative', 1), ('javascrip', 1), ('javascrpt', 1), ('kotlin', 1), ('list', 1), ('lists', 1), ('longest', 1), ('low memory', 1), ('map in c++', 1), ('oop', 1), ('regex', 1), ('regexp', 1), ('saravana', 1), ('scala', 1), ('solution', 1), ('stack', 1), ('stringbuilder', 1), ('substr', 1), ('trie', 1), ('trie-tree', 1), ('try-except', 1), ('unordered map', 1), ('unorderedmap', 1), ('unordermap', 1), ('uthash', 1)]"
810,Chalkboard XOR Game,https://leetcode.com/problems/chalkboard-xor-game,"We are given non-negative integers nums[i] which are written on a chalkboard.  Alice and Bob take turns erasing exactly one number from the chalkboard, with Alice starting first.  If erasing a number causes the bitwise XOR of all the elements of the chalkboard to become 0, then that player loses.  (Also, we'll say the bitwise XOR of one element is that element itself, and the bitwise XOR of no elements is 0.)

Also, if any player starts their turn with the bitwise XOR of all the elements of the chalkboard equal to 0, then that player wins.

Return True if and only if Alice wins the game, assuming both players play optimally.",['math'],Hard,80,202,10041,5055,[],"[('c++', 2), ('cpp', 2), ('beats 100', 1), ('c#', 1), ('game', 1), ('golang', 1), ('math', 1), ('one-liner', 1), ('python 3', 1), ('xor', 1)]"
809,Expressive Words,https://leetcode.com/problems/expressive-words,"Sometimes people repeat letters to represent extra feeling, such as ""hello"" -> ""heeellooo"", ""hi"" -> ""hiiii"".  In these strings like ""heeellooo"", we have groups of adjacent letters that are all the same:  ""h"", ""eee"", ""ll"", ""ooo"".

For some given string S, a query word is stretchy if it can be made to be equal to S by any number of applications of the following extension operation: choose a group consisting of characters c, and add some number of characters c to the group so that the size of the group is 3 or more.

For example, starting with ""hello"", we could do an extension on the group ""o"" to get ""hellooo"", but we cannot get ""helloo"" since the group ""oo"" has size less than 3.  Also, we could do another extension like ""ll"" -> ""lllll"" to get ""helllllooo"".  If S = ""helllllooo"", then the query word ""hello"" would be stretchy because of these two extension operations: query = ""hello"" -> ""hellooo"" -> ""helllllooo"" = S.

Given a list of query words, return the number of words that are stretchy.",['string'],Medium,470,1129,143410,66504,[],"[('c++', 10), ('python 3', 8), ('javascript', 7), ('python', 7), ('java', 5), ('cpp', 4), ('two-pointer', 4), ('clear', 3), ('js', 3), ('two-pointers', 3), ('compression', 2), ('easy', 2), ('python3', 2), ('string', 2), ('trie', 2), ('100 space', 1), ('c#', 1), ('c++ code', 1), ('character-hash-map', 1), ('constant space', 1), ('cpp solution', 1), ('detailed explanation', 1), ('easy-understand', 1), ('easy-understanding', 1), ('easy-undestand', 1), ('explained', 1), ('explanation of logic', 1), ('expressive words', 1), ('go lang', 1), ('golang', 1), ('golang-solution', 1), ('groupby', 1), ('grouping', 1), ('hash table', 1), ('linear seach', 1), ('pyhton3', 1), ('pythonic', 1), ('readable code', 1), ('recursion', 1), ('regex', 1), ('run-length-encoding', 1), ('short code', 1), ('stacks', 1), ('swift', 1), ('two pointers', 1), ('vector', 1)]"
808,Soup Servings,https://leetcode.com/problems/soup-servings,"There are two types of soup: type A and type B. Initially we have N ml of each type of soup. There are four kinds of operations:


	Serve 100 ml of soup A and 0 ml of soup B
	Serve 75 ml of soup A and 25 ml of soup B
	Serve 50 ml of soup A and 50 ml of soup B
	Serve 25 ml of soup A and 75 ml of soup B


When we serve some soup, we give it to someone and we no longer have it.  Each turn, we will choose from the four operations with equal probability 0.25. If the remaining volume of soup is not enough to complete the operation, we will serve as much as we can.  We stop once we no longer have some quantity of both types of soup.

Note that we do not have the operation where all 100 ml's of soup B are used first.  

Return the probability that soup A will be empty first, plus half the probability that A and B become empty at the same time.",['dynamic-programming'],Medium,199,622,29108,12005,[],"[('recursion', 3), ('c++', 2), ('dp', 2), ('javascript', 2), ('python', 2), ('top down', 2), ('#808', 1), ('100 speed', 1), ('bottom up', 1), ('c#', 1), ('dynamic programming', 1), ('memoization', 1), ('memorization', 1), ('memozation', 1), ('python3', 1), ('recursive', 1), ('soup servings', 1), ('top-down', 1)]"
807,Max Increase to Keep City Skyline,https://leetcode.com/problems/max-increase-to-keep-city-skyline,"In a 2 dimensional array grid, each value grid[i][j] represents the height of a building located there. We are allowed to increase the height of any number of buildings, by any amount (the amounts can be different for different buildings). Height 0 is considered to be a building as well. 

At the end, the ""skyline"" when viewed from all four directions of the grid, i.e. top, bottom, left, and right, must be the same as the skyline of the original grid. A city's skyline is the outer contour of the rectangles formed by all the buildings when viewed from a distance. See the following example.

What is the maximum total sum that the height of the buildings can be increased?",[],Medium,1137,333,119482,100938,[],"[('python', 18), ('javascript', 16), ('java', 15), ('c++', 12), ('python 3', 10), ('python3', 10), ('c#', 6), ('cpp', 5), ('cpp solution', 3), ('easytounderstand', 3), ('golang', 3), ('java-solution', 3), ('c', 2), ('c++ code', 2), ('csharp', 2), ('easy-understanding', 2), ('explained', 2), ('matrix', 2), ('simple solution', 2), ('#c++', 1), ('#cpp', 1), ('#easytounderstand', 1), ('#java-solution', 1), ('#simple', 1), ('100 memory', 1), ('100 space', 1), ('2d', 1), ('algorithms', 1), ('apl', 1), ('auxillary space', 1), ('beats 100', 1), ('brute force', 1), ('brute-force', 1), ('bruteforce', 1), ('c code', 1), ('clean code', 1), ('clear', 1), ('clear solution', 1), ('commentary', 1), ('commented', 1), ('comments', 1), ('confusing', 1), ('dictionary c#', 1), ('easy', 1), ('easy understand', 1), ('easy-to-understand', 1), ('efficient', 1), ('es6', 1), ('explanation', 1), ('fast', 1), ('fast and simple', 1), ('fast-solution', 1), ('faster', 1), ('faster than 95.46', 1), ('go', 1), ('golang-solution', 1), ('iteration', 1), ('javascrip', 1), ('javascript solution', 1), ('linq', 1), ('modular', 1), ('numpy gird', 1), ('one-liner', 1), ('php', 1), ('php solution', 1), ('problem', 1), ('question-not-clear', 1), ('readable', 1), ('rust', 1), ('scala', 1), ('simple', 1), ('transpose', 1), ('two-lines', 1), ('typescript', 1), ('visualization', 1)]"
806,Number of Lines To Write String,https://leetcode.com/problems/number-of-lines-to-write-string,"You are given a string s of lowercase English letters and an array widths denoting how many pixels wide each lowercase English letter is. Specifically, widths[0] is the width of 'a', widths[1] is the width of 'b', and so on.

You are trying to write s across several lines, where each line is no longer than 100 pixels. Starting at the beginning of s, write as many letters on the first line such that the total width does not exceed 100 pixels. Then, from where you stopped in s, continue writing as many letters as you can on the second line. Continue this process until you have written all of s.

Return an array result of length 2 where:


	result[0] is the total number of lines.
	result[1] is the width of the last line in pixels.",[],Easy,289,984,66271,43443,[],"[('c++', 13), ('python', 12), ('python 3', 11), ('cpp', 8), ('java', 7), ('easy-understanding', 6), ('cpp solution', 4), ('java-solution', 3), ('javascript', 3), ('ruby', 3), ('simple solution', 3), ('easy', 2), ('golang', 2), ('python3', 2), ('swift', 2), ('#codeboy', 1), ('#easy', 1), ('#easy-understanding', 1), ('#easysolution', 1), ('#java', 1), ('#java-solution', 1), ('#python', 1), ('#python 3', 1), ('0 ms', 1), ('1-line', 1), ('array', 1), ('beginner', 1), ('beginnerfriendly', 1), ('brute-force', 1), ('c', 1), ('c#', 1), ('c++ code', 1), ('c++11', 1), ('commented', 1), ('cpp easy-understanding', 1), ('description', 1), ('easy-to-understand', 1), ('easy-undestand', 1), ('explaination', 1), ('fast', 1), ('github', 1), ('go', 1), ('hash table', 1), ('helpful', 1), ('intutive', 1), ('js', 1), ('js javascript', 1), ('number-of-lines', 1), ('php', 1), ('self explanatory', 1), ('simple', 1), ('simple-solution', 1), ('string', 1), ('ultra simple', 1), ('understanding', 1), ('upvote', 1)]"
805,Split Array With Same Average,https://leetcode.com/problems/split-array-with-same-average,"You are given an integer array nums.

You should move each element of nums into one of the two arrays A and B such that A and B are non-empty, and average(A) == average(B).

Return true if it is possible to achieve that and false otherwise.

Note that for an array arr, average(arr) is the sum of all the elements of arr over the length of arr.",['math'],Hard,511,94,72763,19635,[],"[('dynamic programming', 5), ('bit-mask', 2), ('c++', 2), ('python 3', 2), ('algorithm', 1), ('backtracking', 1), ('c#', 1), ('depth first search', 1), ('dfs', 1), ('dp', 1), ('dp-techqique', 1), ('java', 1), ('javascript', 1), ('knapsack', 1), ('math', 1), ('memoization', 1), ('python', 1), ('recursion', 1), ('top-down dp', 1)]"
804,Unique Morse Code Words,https://leetcode.com/problems/unique-morse-code-words,"International Morse Code defines a standard encoding where each letter is mapped to a series of dots and dashes, as follows: ""a"" maps to "".-"", ""b"" maps to ""-..."", ""c"" maps to ""-.-."", and so on.

For convenience, the full table for the 26 letters of the English alphabet is given below:


["".-"",""-..."",""-.-."",""-.."",""."",""..-."",""--."",""...."","".."","".---"",""-.-"","".-.."",""--"",""-."",""---"","".--."",""--.-"","".-."",""..."",""-"",""..-"",""...-"","".--"",""-..-"",""-.--"",""--..""]

Now, given a list of words, each word can be written as a concatenation of the Morse code of each letter. For example, ""cab"" can be written as ""-.-..--..."", (which is the concatenation ""-.-."" + "".-"" + ""-...""). We'll call such a concatenation, the transformation of a word.

Return the number of different transformations among all words we have.",['string'],Easy,925,846,232667,184066,[],"[('python', 47), ('python 3', 43), ('c++', 36), ('java', 29), ('javascript', 29), ('cpp', 25), ('string', 17), ('c#', 16), ('python3', 16), ('set', 16), ('sets', 13), ('golang', 10), ('easy', 9), ('ruby', 9), ('swift', 9), ('hashset', 8), ('easy-understanding', 7), ('hashmap', 6), ('kotlin', 6), ('map', 6), ('c', 5), ('cpp solution', 5), ('dictionary', 5), ('explained', 5), ('java-solution', 5), ('simple', 5), ('ascii', 4), ('bit manipulation', 4), ('c++ set', 3), ('easy-to-understand', 3), ('easy-undestand', 3), ('go', 3), ('golang-solution', 3), ('hash table', 3), ('python2', 3), ('stl', 3), ('algorithms', 2), ('c++11', 2), ('crispygang', 2), ('dict', 2), ('dictionaries', 2), ('dictonary', 2), ('easytounderstand', 2), ('fastest', 2), ('go-solution', 2), ('javascript solution', 2), ('morse', 2), ('one-liner', 2), ('python3.8', 2), ('readable', 2), ('translate', 2), ('unordered map', 2), ('zip', 2), ('#easy-understanding', 1), ('#easysolution', 1), ('#python #codegirl', 1), ('#python 3', 1), ('0 ms', 1), ('0ms', 1), ('1 liner', 1), ('100 memory', 1), ('100 space', 1), ('100 speed', 1), ('2-liner', 1), ('array', 1), ('beats 98 pc', 1), ('beats100', 1), ('beginner friendly', 1), ('beginnerfriendly', 1), ('best-solution', 1), ('c++ ac', 1), ('c++ easy to understand', 1), ('c++ solution', 1), ('clean solution', 1), ('commented', 1), ('cplusplus', 1), ('cpp clear', 1), ('cpp doubt', 1), ('cpp easy', 1), ('csharp', 1), ('declarative', 1), ('detailed thinking step', 1), ('dictionary comprehension', 1), ('easiest', 1), ('easy understanding', 1), ('easy-understand', 1), ('es6', 1), ('explained solution', 1), ('explanation of logic', 1), ('explanations', 1), ('fast', 1), ('fast-solution', 1), ('faster than 100.00', 1), ('fastest java slution', 1), ('fastest solution', 1), ('for-each', 1), ('functional', 1), ('functional programming', 1), ('github', 1), ('hash', 1), ('hash-function', 1), ('hashing', 1), ('hashtable', 1), ('india', 1), ('ios', 1), ('iteration', 1), ('join', 1), ('kotlin-solution', 1), ('list', 1), ('lookup', 1), ('maketrans', 1), ('map-stl', 1), ('mapping', 1), ('modern', 1), ('php', 1), ('pythonic', 1), ('pythonpython3', 1), ('regex', 1), ('rust', 1), ('scala', 1), ('short', 1), ('short code', 1), ('shortcut', 1), ('simple solution', 1), ('simplest', 1), ('solution', 1), ('solution-sharing-cpp', 1), ('straight-forward', 1), ('string concatenation', 1), ('string manipulation', 1), ('string-operation', 1), ('stringarray', 1), ('strings', 1), ('strings manipulation', 1), ('swift5', 1), ('trie', 1), ('two-lines', 1), ('typescript', 1), ('uniquemorsecode', 1), ('unit-test', 1), ('vector', 1), ('vectors', 1), ('video', 1), ('video explanation', 1), ('while-loop', 1), ('youtube', 1)]"
803,Bricks Falling When Hit,https://leetcode.com/problems/bricks-falling-when-hit,"You are given an m x n binary grid, where each 1 represents a brick and 0 represents an empty space. A brick is stable if:


	It is directly connected to the top of the grid, or
	At least one other brick in its four adjacent cells is stable.


You are also given an array hits, which is a sequence of erasures we want to apply. Each time we want to erase the brick at the location hits[i] = (rowi, coli). The brick on that location (if it exists) will disappear. Some other bricks may no longer be stable because of that erasure and will fall. Once a brick falls, it is immediately erased from the grid (i.e., it does not land on other stable bricks).

Return an array result, where each result[i] is the number of bricks that will fall after the ith erasure is applied.

Note that an erasure may refer to a location with no brick, and if it does, no bricks drop.",['union-find'],Hard,545,153,56590,18126,[],"[('explanations', 2), ('golang', 2), ('python', 2), ('union find', 2), ('breadth-first-search', 1), ('c#', 1), ('comments', 1), ('commetend', 1), ('dfs', 1), ('disjoint-set', 1), ('explained', 1), ('functional-programming', 1), ('hashset', 1), ('javascript', 1), ('logical thinking', 1), ('python 3', 1), ('python3', 1)]"
802,Find Eventual Safe States,https://leetcode.com/problems/find-eventual-safe-states,"We start at some node in a directed graph, and every turn, we walk along a directed edge of the graph. If we reach a terminal node (that is, it has no outgoing directed edges), we stop.

We define a starting node to be safe if we must eventually walk to a terminal node. More specifically, there is a natural number k, so that we must have stopped at a terminal node in less than k steps for any choice of where to walk.

Return an array containing all the safe nodes of the graph. The answer should be sorted in ascending order.

The directed graph has n nodes with labels from 0 to n - 1, where n is the length of graph. The graph is given in the following form: graph[i] is a list of labels j such that (i, j) is a directed edge of the graph, going from node i to node j.","['depth-first-search', 'graph']",Medium,1132,222,103641,51918,[],"[('dfs', 26), ('c++', 13), ('cpp', 10), ('cycle detection', 8), ('java', 8), ('python', 6), ('python 3', 5), ('javascript', 4), ('simple', 4), ('topological-sort', 4), ('comments-added', 3), ('dfs simple solution', 3), ('easy', 3), ('graph', 3), ('python3', 3), ('bfs', 2), ('c#', 2), ('clean code', 2), ('cycle', 2), ('depth first search', 2), ('dfs solution', 2), ('golang', 2), ('java ac solution', 2), ('recursive', 2), ('topological-sorting', 2), ('backtracking', 1), ('c++11', 1), ('color', 1), ('cpp solution', 1), ('depth-first search', 1), ('dfs with memo', 1), ('dfs-non-recursive', 1), ('dp-techqique', 1), ('dynamic programming', 1), ('easy-to-understand', 1), ('easy-understanding', 1), ('explained solution', 1), ('go', 1), ('graph coloring', 1), ('graph cycle', 1), ('memo', 1), ('memoization', 1), ('memoziation', 1), ('pyhton3', 1), ('recursion', 1), ('rust', 1), ('stack', 1), ('swift', 1), ('test case issue', 1)]"
801,Minimum Swaps To Make Sequences Increasing,https://leetcode.com/problems/minimum-swaps-to-make-sequences-increasing,"We have two integer sequences A and B of the same non-zero length.

We are allowed to swap elements A[i] and B[i].  Note that both elements are in the same index position in their respective sequences.

At the end of some number of swaps, A and B are both strictly increasing.  (A sequence is strictly increasing if and only if A[0] < A[1] < A[2] < ... < A[A.length - 1].)

Given A and B, return the minimum number of swaps to make both sequences strictly increasing.  It is guaranteed that the given input always makes it possible.",['dynamic-programming'],Medium,1506,110,108727,42301,[],"[('dynamic programming', 10), ('dp', 7), ('python 3', 6), ('c++', 5), ('java', 4), ('constant memory', 2), ('dynamic-programming', 2), ('golang', 2), ('linear time', 2), ('memoization', 2), ('recursion', 2), ('top down dp', 2), ('#801', 1), ('2d dynamic programming', 1), ('c', 1), ('concise-solution', 1), ('constant space', 1), ('cpp', 1), ('cpp solution', 1), ('cpp-solution', 1), ('go', 1), ('golang-solution', 1), ('greedy', 1), ('javascript', 1), ('linear', 1), ('minimum swaps', 1), ('non-dp', 1), ('optimizations', 1), ('python', 1), ('python3', 1), ('pythonpython3', 1), ('recusion', 1), ('ruby', 1), ('sequence increasing', 1), ('simple clear c++ solution', 1), ('six liner', 1), ('space o1', 1), ('swift', 1), ('top-down dp', 1), ('without dp', 1)]"
706,Design HashMap,https://leetcode.com/problems/design-hashmap,"Design a HashMap without using any built-in hash table libraries.

Implement the MyHashMap class:


	MyHashMap() initializes the object with an empty map.
	void put(int key, int value) inserts a (key, value) pair into the HashMap. If the key already exists in the map, update the corresponding value.
	int get(int key) returns the value to which the specified key is mapped, or -1 if this map contains no mapping for the key.
	void remove(key) removes the key and its corresponding value if the map contains the mapping for the key.","['hash-table', 'design']",Easy,1559,170,282315,180789,"[""Design HashSet"", ""Design Skiplist""]","[('java', 27), ('c++', 19), ('javascript', 18), ('hashmap', 17), ('python 3', 17), ('python', 16), ('array', 12), ('c#', 10), ('cpp', 10), ('java-solution', 10), ('python3', 9), ('c', 6), ('easy-to-understand', 5), ('easy-understanding', 5), ('golang', 5), ('linked-list', 5), ('ruby', 5), ('chaining', 4), ('explained', 4), ('hash table', 4), ('javascript solution', 4), ('arrays', 3), ('easy', 3), ('es6', 3), ('go', 3), ('hashing', 3), ('linkedlists', 3), ('list', 3), ('rust', 3), ('simple solution', 3), ('c++ solution', 2), ('chaining hash map', 2), ('collision handling', 2), ('easy to understand', 2), ('easy-undestand', 2), ('java ac solution', 2), ('js', 2), ('kotlin', 2), ('meiyaowen', 2), ('separate chaining', 2), ('simple', 2), ('swift', 2), ('trie', 2), ('vector', 2), ('video-explanation', 2), ('#easy-understand', 1), ('#javascript', 1), ('100 runtime', 1), ('100 space', 1), ('arrays.fill', 1), ('awesome samriddhi', 1), ('beginner friendly', 1), ('binary search tree', 1), ('binary-search-tree', 1), ('bucket', 1), ('c++ 98', 1), ('class-based', 1), ('clean-code', 1), ('comments', 1), ('constant-time', 1), ('cpp solution', 1), ('csharp', 1), ('custom class', 1), ('data structure', 1), ('data structures', 1), ('deque', 1), ('designhashmap', 1), ('diagram', 1), ('dictionary', 1), ('easiest', 1), ('easy undestanding', 1), ('easy-understand', 1), ('easytounderstand', 1), ('explanations', 1), ('fast-solution', 1), ('hack', 1), ('hash-function', 1), ('hashtable', 1), ('js javascript', 1), ('kotlinvim', 1), ('linked list', 1), ('linkedlist', 1), ('lists', 1), ('loadfactor', 1), ('logarithmic time', 1), ('modular', 1), ('module', 1), ('modulo', 1), ('multiplicative hash', 1), ('open-hashing', 1), ('optimisation', 1), ('pair', 1), ('performance', 1), ('pointer', 1), ('prime factorization', 1), ('rehash', 1), ('rehashing', 1), ('resizeable', 1), ('ritik', 1), ('short code', 1), ('simple understanding', 1), ('simple-solution', 1), ('simpler', 1), ('simplest', 1), ('simplesweet', 1), ('slice', 1), ('slot', 1), ('solution', 1), ('straight-forward', 1), ('swift5', 1), ('very fast', 1)]"
705,Design HashSet,https://leetcode.com/problems/design-hashset,"Design a HashSet without using any built-in hash table libraries.

Implement MyHashSet class:


	void add(key) Inserts the value key into the HashSet.
	bool contains(key) Returns whether the value key exists in the HashSet or not.
	void remove(key) Removes the value key in the HashSet. If key does not exist in the HashSet, do nothing.","['hash-table', 'design']",Easy,715,107,188721,121641,"[""Design HashMap"", ""Design Skiplist""]","[('c++', 23), ('java', 19), ('cpp', 13), ('javascript', 12), ('python', 10), ('python 3', 10), ('easy-understanding', 9), ('hash-function', 9), ('hashset', 9), ('java-solution', 8), ('python3', 6), ('hashmap', 5), ('swift', 5), ('c#', 4), ('cpp solution', 4), ('easy', 4), ('explained', 4), ('array', 3), ('beginner friendly', 3), ('bit manipulation', 3), ('bit-manipulation', 3), ('easy-to-understand', 3), ('explanation', 3), ('hash table', 3), ('bitset', 2), ('bst', 2), ('buckets', 2), ('c', 2), ('chaining hash map', 2), ('collision handling', 2), ('design', 2), ('easytounderstand', 2), ('golang', 2), ('hash-table', 2), ('hashing', 2), ('linked list', 2), ('linked-list', 2), ('list', 2), ('rehash', 2), ('ruby', 2), ('separate chaining', 2), ('set', 2), ('simple solution', 2), ('vector', 2), ('#go', 1), ('arraylist', 1), ('arrayutils', 1), ('awesome samriddhi', 1), ('binary-search-tree', 1), ('bitwise', 1), ('boolean', 1), ('bucket', 1), ('bytearray', 1), ('c++ solution', 1), ('chaining', 1), ('clean', 1), ('common.lang', 1), ('concise', 1), ('constant', 1), ('csharp', 1), ('designhashset', 1), ('dictonary', 1), ('division', 1), ('divisionhash', 1), ('doubly linked list', 1), ('easiest', 1), ('easy to understand', 1), ('easy-solition', 1), ('easy-undesrtanding', 1), ('easy-undestand', 1), ('efficient', 1), ('explained solution', 1), ('fast and simple', 1), ('fully explained', 1), ('go', 1), ('golang-solution', 1), ('hashcode', 1), ('hashing algorithm', 1), ('hashtable', 1), ('java ac solution', 1), ('javascript solution', 1), ('js', 1), ('kotlin', 1), ('linkedlist', 1), ('meiyaowen', 1), ('memory-efficient', 1), ('multi-layer arrays', 1), ('multiplicative hash', 1), ('one line', 1), ('one-liner', 1), ('open-addressing', 1), ('optimal', 1), ('pointer', 1), ('prefix tree', 1), ('python 2', 1), ('python2', 1), ('rust', 1), ('scala', 1), ('self-explanatory', 1), ('seperate chaining', 1), ('sets', 1), ('simple', 1), ('simple-solution', 1), ('space optimization', 1), ('swift5', 1), ('table-doubling', 1), ('test-cases', 1), ('time-space balanced', 1), ('trie', 1), ('typescript', 1), ('ultra easy', 1), ('upvote', 1), ('vectors', 1), ('video', 1), ('video solution', 1), ('video-explanation', 1)]"
799,Champagne Tower,https://leetcode.com/problems/champagne-tower,"We stack glasses in a pyramid, where the first row has 1 glass, the second row has 2 glasses, and so on until the 100th row.  Each glass holds one cup of champagne.

Then, some champagne is poured into the first glass at the top.  When the topmost glass is full, any excess liquid poured will fall equally to the glass immediately to the left and right of it.  When those glasses become full, any excess champagne will fall equally to the left and right of those glasses, and so on.  (A glass at the bottom row has its excess champagne fall on the floor.)

For example, after one cup of champagne is poured, the top most glass is full.  After two cups of champagne are poured, the two glasses on the second row are half full.  After three cups of champagne are poured, those two cups become full - there are 3 full glasses total now.  After four cups of champagne are poured, the third row has the middle glass half full, and the two outside glasses are a quarter full, as pictured below.



Now after pouring some non-negative integer cups of champagne, return how full the jth glass in the ith row is (both i and j are 0-indexed.)",['dynamic-programming'],Medium,795,60,76634,33769,[],"[('c++', 8), ('dynamic programming', 7), ('python 3', 7), ('python', 6), ('cpp solution', 4), ('dp', 4), ('java', 4), ('easy-understanding', 3), ('explained', 3), ('java-solution', 3), ('javascript', 3), ('pascals triangle', 3), ('cpp', 2), ('golang', 2), ('python3', 2), ('simple', 2), ('symmetry', 2), ('#easy', 1), ('#easy-understanding', 1), ('#java', 1), ('#pascal triangle', 1), ('100 memory', 1), ('100 speed', 1), ('1d array', 1), ('2d-array', 1), ('array', 1), ('beginner friendly', 1), ('c', 1), ('c#', 1), ('c++ solution', 1), ('dfs simple solution', 1), ('dp bottom up', 1), ('dp pattern', 1), ('dp-techqique', 1), ('dynamic-programming', 1), ('easy-to-understad', 1), ('easytounderstand', 1), ('fast and simple', 1), ('fastest', 1), ('intuitive', 1), ('java ac solution', 1), ('kotlin', 1), ('matrix', 1), ('memoization', 1), ('numpy', 1), ('optimisation', 1), ('performance', 1), ('php', 1), ('ruby', 1), ('rust', 1), ('simpe', 1), ('simplest', 1), ('simulation', 1), ('swift', 1), ('testcase error', 1), ('trees', 1), ('typescript', 1), ('video', 1), ('video explaination', 1), ('video-explanation', 1)]"
798,Smallest Rotation with Highest Score,https://leetcode.com/problems/smallest-rotation-with-highest-score,"Given an array A, we may rotate it by a non-negative integer K so that the array becomes A[K], A[K+1], A{K+2], ... A[A.length - 1], A[0], A[1], ..., A[K-1].  Afterward, any entries that are less than or equal to their index are worth 1 point. 

For example, if we have [2, 4, 1, 3, 0], and we rotate by K = 2, it becomes [1, 3, 0, 2, 4].  This is worth 3 points because 1 > 0 [no points], 3 > 1 [no points], 0 <= 2 [one point], 2 <= 3 [one point], 4 <= 4 [one point].

Over all possible rotations, return the rotation index K that corresponds to the highest score we could receive.  If there are multiple answers, return the smallest such index K.",[],Hard,265,17,15500,7009,[],"[('c#', 1), ('cpp', 1), ('hashmap', 1)]"
797,All Paths From Source to Target,https://leetcode.com/problems/all-paths-from-source-to-target,"Given a directed acyclic graph (DAG) of n nodes labeled from 0 to n - 1, find all possible paths from node 0 to node n - 1, and return them in any order.

The graph is given as follows: graph[i] is a list of all nodes you can visit from node i (i.e., there is a directed edge from node i to node graph[i][j]).","['backtracking', 'depth-first-search', 'graph']",Medium,1881,92,170018,133735,[],"[('dfs', 79), ('backtracking', 49), ('c++', 46), ('python', 34), ('java', 25), ('bfs', 23), ('cpp', 23), ('python 3', 20), ('python3', 16), ('recursion', 15), ('graph', 14), ('javascript', 14), ('dfs simple solution', 12), ('cpp solution', 10), ('c#', 8), ('dfs recursive', 8), ('golang', 7), ('easy', 6), ('back tracking', 4), ('backtrack', 4), ('clean code', 4), ('easy-understanding', 4), ('explained', 4), ('go', 4), ('java-solution', 4), ('memoization', 4), ('backtracking dfs', 3), ('depth first search', 3), ('easy-undestand', 3), ('queue', 3), ('swift', 3), ('acyclic graph', 2), ('beginner friendly', 2), ('c++ solution', 2), ('depth-first-search', 2), ('directed graph', 2), ('easy-to-understand', 2), ('easysolution', 2), ('fast', 2), ('help needed', 2), ('iterative', 2), ('javascript solution', 2), ('paths', 2), ('readable', 2), ('recurision', 2), ('recursive', 2), ('simple solution', 2), ('stack', 2), ('100', 1), ('797', 1), ('all paths', 1), ('backtacking', 1), ('bfs python', 1), ('bfs simple solution', 1), ('breadth-first-search', 1), ('breath first search', 1), ('c++ code', 1), ('clear explanation', 1), ('commented', 1), ('comments-added', 1), ('concise', 1), ('concise-solution', 1), ('csharp', 1), ('dag', 1), ('depth-first search', 1), ('deque', 1), ('dfs solution', 1), ('dfs traversal', 1), ('dfs-backtracking', 1), ('dfs-bottomup', 1), ('dfs-in-order', 1), ('dfs-iterative', 1), ('dfs-non-recursive', 1), ('dictonary', 1), ('dp', 1), ('easy to understand', 1), ('easytounderstand', 1), ('efficient solution', 1), ('explanation of logic', 1), ('fast-solution', 1), ('fastest', 1), ('functional-programming', 1), ('global-variables', 1), ('graph traversal', 1), ('iterative-dfs', 1), ('iteratve', 1), ('javscript', 1), ('july challenge', 1), ('memory optimized', 1), ('optimal', 1), ('python deque', 1), ('python3.8', 1), ('pythonic', 1), ('queue-approach', 1), ('recurrance', 1), ('recursive easy', 1), ('recursively', 1), ('recusive', 1), ('ruby', 1), ('scala', 1), ('self-explanatory', 1), ('short c++ code', 1), ('short solution', 1), ('simple', 1), ('square-time', 1), ('template', 1), ('time-complexity', 1), ('topological-sort', 1), ('typescript', 1), ('vector', 1), ('video', 1), ('wrong answer', 1)]"
796,Rotate String,https://leetcode.com/problems/rotate-string,"We are given two strings, A and B.

A shift on A consists of taking string A and moving the leftmost character to the rightmost position. For example, if A = 'abcde', then it will be 'bcdea' after one shift on A. Return True if and only if A can become B after some number of shifts on A.",[],Easy,1083,61,199774,98031,[],"[('c++', 31), ('cpp', 24), ('java', 20), ('python', 17), ('javascript', 13), ('java-solution', 10), ('python 3', 10), ('string', 10), ('cpp solution', 8), ('easy-understanding', 8), ('python3', 6), ('easy', 5), ('golang', 4), ('kmp', 4), ('kmp algorithm', 4), ('stringbuilder', 4), ('c#', 3), ('easy-to-understand', 3), ('fastest', 3), ('queue', 3), ('simple solution', 3), ('swift', 3), ('c', 2), ('go', 2), ('n', 2), ('oneline', 2), ('oneliner', 2), ('ruby', 2), ('swift5', 2), ('0ms', 1), ('100', 1), ('2ms', 1), ('99', 1), ('ac', 1), ('accepted', 1), ('array', 1), ('c code', 1), ('c# string', 1), ('c#-solution', 1), ('c++ code', 1), ('c++14', 1), ('code', 1), ('comment', 1), ('commentary', 1), ('concise-solution', 1), ('dp', 1), ('drewbie', 1), ('easy java solution', 1), ('easytounderstand', 1), ('faster', 1), ('find-function', 1), ('for-loop', 1), ('give stars and subscribe', 1), ('golang-solution', 1), ('graph', 1), ('indexof method', 1), ('interview-friendly', 1), ('javascrip', 1), ('javascript solution', 1), ('js', 1), ('js javascript', 1), ('knuth morris pratt', 1), ('linear', 1), ('linear-time', 1), ('linked-list', 1), ('linkedlists', 1), ('math', 1), ('memory optimized', 1), ('missing-test-case', 1), ('one-liner', 1), ('optimal', 1), ('prefix function', 1), ('rotate', 1), ('rotatestring', 1), ('rust', 1), ('simple clear c++ solution', 1), ('string concatenation', 1), ('string-searching', 1), ('strings', 1), ('substring', 1), ('test-case', 1), ('thought-process', 1), ('two-pointer', 1), ('unique solution', 1)]"
795,Number of Subarrays with Bounded Maximum,https://leetcode.com/problems/number-of-subarrays-with-bounded-maximum,"We are given an array A of positive integers, and two positive integers L and R (L <= R).

Return the number of (contiguous, non-empty) subarrays such that the value of the maximum array element in that subarray is at least L and at most R.",['array'],Medium,783,52,51237,24640,[],"[('python', 6), ('c++', 4), ('cpp', 4), ('explained', 3), ('golang', 3), ('java', 2), ('javascript', 2), ('one pass', 2), ('3-pointers', 1), ('constant space', 1), ('dp', 1), ('dynamic programming', 1), ('easy', 1), ('easy to understand', 1), ('explain', 1), ('go-solution', 1), ('golang-solution', 1), ('java-solution', 1), ('javascript solution', 1), ('math', 1), ('memoization', 1), ('onepass', 1), ('python3', 1), ('recursive', 1), ('simulation', 1), ('single pass', 1), ('sliding window', 1), ('sliding-window', 1), ('sliding-window-maximum', 1), ('twopointer', 1)]"
794,Valid Tic-Tac-Toe State,https://leetcode.com/problems/valid-tic-tac-toe-state,"A Tic-Tac-Toe board is given as a string array board. Return True if and only if it is possible to reach this board position during the course of a valid tic-tac-toe game.

The board is a 3 x 3 array, and consists of characters "" "", ""X"", and ""O"".  The "" "" character represents an empty square.

Here are the rules of Tic-Tac-Toe:


	Players take turns placing characters into empty squares ("" "").
	The first player always places ""X"" characters, while the second player always places ""O"" characters.
	""X"" and ""O"" characters are always placed into empty squares, never filled ones.
	The game ends when there are 3 of the same (non-empty) character filling any row, column, or diagonal.
	The game also ends if all squares are non-empty.
	No more moves can be played if the game is over.","['math', 'recursion']",Medium,267,758,98699,33686,"[""Design Tic-Tac-Toe""]","[('python', 12), ('python3', 7), ('javascript', 5), ('python 3', 4), ('c++', 3), ('cpp', 3), ('java', 3), ('0ms', 2), ('c#', 2), ('easy', 2), ('easy-understanding', 2), ('fastest', 2), ('rule', 2), ('array of vectors', 1), ('bit-manipulation', 1), ('bites', 1), ('bits', 1), ('board-scan', 1), ('c++ code', 1), ('c++11', 1), ('clean code', 1), ('clean-code', 1), ('comments', 1), ('comments-added', 1), ('concise', 1), ('cpp easy', 1), ('easiest', 1), ('easy to understand', 1), ('easy-to-understand', 1), ('explained', 1), ('fast-solution', 1), ('fastest java slution', 1), ('intuitive', 1), ('java-solution', 1), ('javasccript', 1), ('js', 1), ('map', 1), ('onepass', 1), ('readability', 1), ('readable', 1), ('recursion', 1), ('ruby', 1), ('rule-based', 1), ('simple', 1), ('simple clear c++ solution', 1), ('simple python accepted', 1), ('simpler', 1), ('three-lines', 1), ('tictactoe', 1)]"
793,Preimage Size of Factorial Zeroes Function,https://leetcode.com/problems/preimage-size-of-factorial-zeroes-function,"Let f(x) be the number of zeroes at the end of x!. (Recall that x! = 1 * 2 * 3 * ... * x, and by convention, 0! = 1.)

For example, f(3) = 0 because 3! = 6 has no zeroes at the end, while f(11) = 2 because 11! = 39916800 has 2 zeroes at the end. Given K, find how many non-negative integers x have the property that f(x) = K.",['binary-search'],Hard,221,62,23631,9607,"[""Factorial Trailing Zeroes""]","[('binary search', 4), ('binary-search', 3), ('cpp', 2), ('java', 2), ('0ms runtime', 1), ('c#', 1), ('c++', 1), ('c++ code', 1), ('cpp solution', 1), ('decimalism', 1), ('explanation of logic', 1), ('javascript', 1), ('python', 1), ('quinary', 1)]"
792,Number of Matching Subsequences,https://leetcode.com/problems/number-of-matching-subsequences,"Given a string s and an array of strings words, return the number of words[i] that is a subsequence of s.

A subsequence of a string is a new string generated from the original string with some characters (can be none) deleted without changing the relative order of the remaining characters.


	For example, ""ace"" is a subsequence of ""abcde"".",['array'],Medium,1367,88,120063,58120,"[""Is Subsequence"", ""Shortest Way to Form String""]","[('javascript', 9), ('python', 9), ('hashmap', 6), ('java', 6), ('python 3', 5), ('python3', 5), ('cpp', 4), ('binary search', 3), ('binary-search', 3), ('c#', 3), ('string', 3), ('c++', 2), ('fast and simple', 2), ('js', 2), ('queue', 2), ('ruby', 2), ('trie', 2), ('two pointers', 2), ('two-pointers', 2), ('array', 1), ('binarysearch', 1), ('c++14', 1), ('clean code', 1), ('dfa', 1), ('easy-understanding', 1), ('easytounderstand', 1), ('efficient', 1), ('explained solution', 1), ('explanations', 1), ('google', 1), ('hashing', 1), ('is subsequence', 1), ('java solution', 1), ('java-solution', 1), ('javascript solution', 1), ('linear', 1), ('linq', 1), ('list', 1), ('map', 1), ('optimal', 1), ('sequential', 1), ('simple', 1), ('simple clear c++ solution', 1), ('simple efficient', 1), ('sort', 1), ('unorderedmap', 1)]"
791,Custom Sort String,https://leetcode.com/problems/custom-sort-string,"S and T are strings composed of lowercase letters. In S, no letter occurs more than once.

S was sorted in some custom order previously. We want to permute the characters of T so that they match the order that S was sorted. More specifically, if x occurs before y in S, then x should occur before y in the returned string.

Return any permutation of T (as a string) that satisfies this property.",['string'],Medium,1020,215,135899,89549,[],"[('python', 25), ('python 3', 25), ('c++', 22), ('cpp', 17), ('javascript', 15), ('easy-to-understand', 14), ('easy-understanding', 12), ('python3', 12), ('java', 11), ('map', 11), ('c#', 6), ('hashmap', 5), ('java-solution', 5), ('sort-function', 5), ('counter', 4), ('dictionary', 4), ('fast and simple', 4), ('c', 3), ('clean code', 3), ('easy', 3), ('easytounderstand', 3), ('python2', 3), ('sorting', 3), ('string', 3), ('100 speed', 2), ('charset', 2), ('counting-sort', 2), ('cpp solution', 2), ('custom sorting', 2), ('easy-undestand', 2), ('fast-solution', 2), ('fasterthan100', 2), ('golang', 2), ('java solution', 2), ('kotlin', 2), ('linear time', 2), ('oneline', 2), ('simple solution', 2), ('sorted', 2), ('vector', 2), ('#easy-understanding', 1), ('#explained', 1), ('#python', 1), ('1 liner', 1), ('100 memory', 1), ('2 solutions', 1), ('4lines', 1), ('array', 1), ('beautiful', 1), ('beauty', 1), ('brute force', 1), ('c++ code', 1), ('c++11', 1), ('c++17', 1), ('clean', 1), ('clean-efficient-code', 1), ('collections', 1), ('commented', 1), ('comparator', 1), ('concise', 1), ('counting algorithm', 1), ('cpp easy', 1), ('custom comparator', 1), ('dictionary comprehension', 1), ('dictonary', 1), ('easy to read', 1), ('easy to understand', 1), ('easy understand', 1), ('explained', 1), ('explanation of logic', 1), ('go', 1), ('go lang', 1), ('hash table', 1), ('hashing', 1), ('java ac solution', 1), ('javascript solution', 1), ('js', 1), ('js javascript', 1), ('lambda', 1), ('linear', 1), ('list', 1), ('map in c++', 1), ('mergesort', 1), ('multiset', 1), ('o-n', 1), ('one liner', 1), ('one-line', 1), ('one-liner', 1), ('python3.8', 1), ('pythonic', 1), ('rank', 1), ('short code', 1), ('simple python solution', 1), ('simplest', 1), ('somal', 1), ('sort', 1), ('stl', 1), ('swift', 1), ('try-except', 1), ('two-pointers', 1), ('typescript', 1), ('yield return', 1)]"
790,Domino and Tromino Tiling,https://leetcode.com/problems/domino-and-tromino-tiling,"We have two types of tiles: a 2x1 domino shape, and an ""L"" tromino shape. These shapes may be rotated.


XX  <- domino

XX  <- ""L"" tromino
X


Given N, how many ways are there to tile a 2 x N board? Return your answer modulo 10^9 + 7.

(In a tiling, every square must be covered by a tile. Two tilings are different if and only if there are two 4-directionally adjacent cells on the board such that exactly one of the tilings has both squares occupied by a tile.)",['dynamic-programming'],Medium,547,287,47455,19133,[],"[('dynamic programming', 12), ('c++', 10), ('cpp', 6), ('dp', 6), ('memoization', 3), ('beginner friendly', 2), ('c++11', 2), ('explained', 2), ('java', 2), ('recursion', 2), ('100 faster', 1), ('100 faster runtime', 1), ('100 space', 1), ('2d-array', 1), ('bottom-up approach', 1), ('cpp easy', 1), ('cpp solution', 1), ('cpp-solution', 1), ('dp-programming', 1), ('dynamic-programming', 1), ('easiest', 1), ('explained solution', 1), ('functional', 1), ('golang', 1), ('intuitive', 1), ('iterative', 1), ('java ac solution', 1), ('javascript', 1), ('js', 1), ('python3', 1), ('recursive solution', 1), ('space o1', 1)]"
789,Escape The Ghosts,https://leetcode.com/problems/escape-the-ghosts,"You are playing a simplified PAC-MAN game on an infinite 2-D grid. You start at the point [0, 0], and you are given a destination point target = [xtarget, ytarget], which you are trying to get to. There are several ghosts on the map with their starting positions given as an array ghosts, where ghosts[i] = [xi, yi] represents the starting position of the ith ghost. All inputs are integral coordinates.

Each turn, you and all the ghosts may independently choose to either move 1 unit in any of the four cardinal directions: north, east, south, or west or stay still. All actions happen simultaneously.

You escape if and only if you can reach the target before any ghost reaches you. If you reach any square (including the target) at the same time as a ghost, it does not count as an escape.

Return true if it is possible to escape, otherwise return false.",['math'],Medium,228,373,29626,17375,"[""Cat and Mouse II""]","[('c++', 5), ('100 speed', 2), ('c#', 2), ('easy-understanding', 2), ('java', 2), ('python', 2), ('python3', 2), ('0ms', 1), ('100 memory', 1), ('100 space', 1), ('5 lines', 1), ('cpp', 1), ('fully explained', 1), ('geometry', 1), ('java ac solution', 1), ('java-solution', 1), ('javascript', 1), ('manhattan distance', 1), ('math', 1), ('simple', 1)]"
788,Rotated Digits,https://leetcode.com/problems/rotated-digits,"X is a good number if after rotating each digit individually by 180 degrees, we get a valid number that is different from X.  Each digit must be rotated - we cannot choose to leave it alone.

A number is valid if each digit remains a digit after rotation. 0, 1, and 8 rotate to themselves; 2 and 5 rotate to each other (on this case they are rotated in a different direction, in other words 2 or 5 gets mirrored); 6 and 9 rotate to each other, and the rest of the numbers do not rotate to any other number and become invalid.

Now given a positive number N, how many numbers X from 1 to N are good?",['string'],Easy,430,1431,114932,66170,[],"[('c++', 20), ('python', 15), ('cpp', 12), ('python 3', 9), ('java', 8), ('javascript', 8), ('python3', 7), ('easy-understanding', 5), ('fast-solution', 5), ('easy', 4), ('c#', 2), ('commented', 2), ('depth-first-search', 2), ('dynamic programming', 2), ('easy to understand', 2), ('easy-to-understand', 2), ('python2', 2), ('ruby', 2), ('rust', 2), ('0ms', 1), ('100 speed', 1), ('array', 1), ('bool', 1), ('brute force', 1), ('brute-force', 1), ('c++ code', 1), ('cpp solution', 1), ('dfs', 1), ('dictionary', 1), ('digit-by-digit', 1), ('dp', 1), ('easiest solution', 1), ('easy-to-follow', 1), ('easy-undestand', 1), ('easytounderstand', 1), ('explaination', 1), ('explained solution', 1), ('fast and simple', 1), ('faster', 1), ('faster than 99', 1), ('functional', 1), ('functional programming', 1), ('go', 1), ('golang', 1), ('intuitive', 1), ('java-solution', 1), ('javasript', 1), ('kotlin', 1), ('maths', 1), ('no lambda function', 1), ('one-liner', 1), ('permutations', 1), ('python3.8', 1), ('regexp', 1), ('simple solution', 1), ('simplest', 1), ('swift', 1), ('unit-test', 1), ('without dp', 1)]"
787,Cheapest Flights Within K Stops,https://leetcode.com/problems/cheapest-flights-within-k-stops,"There are n cities connected by m flights. Each flight starts from city u and arrives at v with a price w.

Now given all the cities and flights, together with starting city src and the destination dst, your task is to find the cheapest price from src to dst with up to k stops. If there is no such route, output -1.","['dynamic-programming', 'heap', 'breadth-first-search']",Medium,2961,97,379944,150796,"[""Maximum Vacation Days""]","[('bfs', 41), ('python', 26), ('c++', 25), ('java', 22), ('cpp', 21), ('dfs', 19), ('dijkstra', 19), ('priority queue', 14), ('dijkstras algorithm', 13), ('dp', 12), ('graph', 8), ('python 3', 8), ('python3', 8), ('javascript', 7), ('dynamic programming', 6), ('easy-understanding', 6), ('java-solution', 6), ('bellman-ford', 5), ('dijkstras', 5), ('golang', 5), ('bellman ford', 4), ('memoization', 4), ('recursion', 4), ('djikstra', 3), ('heap', 3), ('simple solution', 3), ('backtracking', 2), ('bfs python', 2), ('breadth first search', 2), ('c#', 2), ('c++ code', 2), ('comments', 2), ('cpp solution', 2), ('dijkstra algorithm', 2), ('easy-undestand', 2), ('golang-solution', 2), ('heapq', 2), ('min-heap', 2), ('queue', 2), ('ruby', 2), ('shortest-path', 2), ('#bfs', 1), ('#graph', 1), ('#java', 1), ('#priority-queue', 1), ('2d dp', 1), ('adjacency list', 1), ('awesome samriddhi', 1), ('bfs with prev path map', 1), ('branch-and-bound', 1), ('breadth-first-search', 1), ('brute-force', 1), ('c# solutions', 1), ('c++ easy to understand', 1), ('c++14', 1), ('commented', 1), ('commetend', 1), ('cost-uniform search', 1), ('cpp easy', 1), ('cppsolution', 1), ('dag', 1), ('depth first search', 1), ('dfs solution', 1), ('dfs-topdown', 1), ('diagram', 1), ('dictionary', 1), ('dynamic-programming', 1), ('easy', 1), ('easy-solition', 1), ('easy-to-understand', 1), ('easytoundersatand', 1), ('explained', 1), ('explanation with logic', 1), ('explanations', 1), ('floyd warshall', 1), ('hash table', 1), ('iteration', 1), ('java ac solution', 1), ('java solution', 1), ('javascript solution', 1), ('javscript', 1), ('kotlinvim', 1), ('min heap', 1), ('minimum spanning tree', 1), ('non-recursive', 1), ('oop', 1), ('pictorial-flow', 1), ('prim', 1), ('priorityqueue', 1), ('pruning', 1), ('pythno3', 1), ('python2', 1), ('queue-approach', 1), ('recursion memoization', 1), ('relaxation', 1), ('ritik', 1), ('scala', 1), ('simple', 1), ('sort method', 1), ('swift', 1), ('tle solved', 1), ('top down dp', 1), ('video explanation', 1), ('video-explanation', 1)]"
786,K-th Smallest Prime Fraction,https://leetcode.com/problems/k-th-smallest-prime-fraction,"You are given a sorted integer array arr containing 1 and prime numbers, where all the integers of arr are unique. You are also given an integer k.

For every i and j where 0 <= i < j < arr.length, we consider the fraction arr[i] / arr[j].

Return the kth smallest fraction considered. Return your answer as an array of integers of size 2, where answer[0] == arr[i] and answer[1] == arr[j].","['binary-search', 'heap']",Hard,521,30,42815,18740,"[""Kth Smallest Element in a Sorted Matrix"", ""Kth Smallest Number in Multiplication Table"", ""Find K-th Smallest Pair Distance""]","[('java', 3), ('priority queue', 3), ('binary search', 2), ('c++', 2), ('java-solution', 2), ('binary-search', 1), ('c#', 1), ('cpp', 1), ('fraction', 1), ('golang', 1), ('heap', 1), ('heapq', 1), ('javascript', 1), ('min-heap', 1), ('minheap', 1), ('python 3', 1), ('set', 1), ('sort-function', 1), ('statistics', 1)]"
785,Is Graph Bipartite?,https://leetcode.com/problems/is-graph-bipartite,"There is an undirected graph with n nodes, where each node is numbered between 0 and n - 1. You are given a 2D array graph, where graph[u] is an array of nodes that node u is adjacent to. More formally, for each v in graph[u], there is an undirected edge between node u and node v. The graph has the following properties:


	There are no self-edges (graph[u] does not contain u).
	There are no parallel edges (graph[u] does not contain duplicate values).
	If v is in graph[u], then u is in graph[v] (the graph is undirected).
	The graph may not be connected, meaning there may be two nodes u and v such that there is no path between them.


A graph is bipartite if the nodes can be partitioned into two independent sets A and B such that every edge in the graph connects a node in set A and a node in set B.

Return true if and only if it is bipartite.","['depth-first-search', 'breadth-first-search', 'graph']",Medium,2552,225,398298,194396,[],"[('bfs', 64), ('dfs', 48), ('c++', 37), ('java', 29), ('cpp', 26), ('graph', 26), ('python', 22), ('graph coloring', 21), ('python 3', 19), ('javascript', 16), ('breadth first search', 10), ('c#', 8), ('coloring', 8), ('easy-understanding', 8), ('java-solution', 6), ('depth first search', 5), ('dfs simple solution', 5), ('dfs-bfs', 5), ('easy', 5), ('color', 4), ('cpp solution', 4), ('graph-coloring', 4), ('python3', 4), ('union find', 4), ('bipartite-partition', 3), ('clean code', 3), ('easy-undestand', 3), ('java solution', 3), ('javascript solution', 3), ('queue', 3), ('bfs python', 2), ('bipartite', 2), ('bipartite graph', 2), ('c++ code', 2), ('comments-added', 2), ('depth-first-search', 2), ('dfs with memo', 2), ('dfs-recursive', 2), ('explained', 2), ('fast', 2), ('javascrip', 2), ('js', 2), ('recursion', 2), ('recusion', 2), ('ruby', 2), ('rust', 2), ('set', 2), ('sets', 2), ('simple', 2), ('simple solution', 2), ('unionfind', 2), ('video-explanation', 2), ('1ms', 1), ('2-coloring', 1), ('ad7one', 1), ('awesome samriddhi', 1), ('bfs simple solution', 1), ('breadth first traversal', 1), ('breadth-first-search', 1), ('breath first search', 1), ('c', 1), ('c++ dfs', 1), ('c++ easy to understand', 1), ('c++ solution', 1), ('comment', 1), ('comments', 1), ('concise-solution', 1), ('cpp-solution', 1), ('depth first traversal', 1), ('detailed explanation', 1), ('dfs recursive', 1), ('dfs simple', 1), ('dfs solution', 1), ('dfs-iterative', 1), ('dfs-non-recursive', 1), ('dfs-tree', 1), ('drewbie', 1), ('dsu', 1), ('easiest', 1), ('easy sloution', 1), ('easy to understand', 1), ('easy-code', 1), ('easy-implementation', 1), ('easy-to-read', 1), ('easy-to-understand', 1), ('easy-understand', 1), ('easytounderstand', 1), ('explaination', 1), ('facebook', 1), ('fast-solution', 1), ('faster', 1), ('graph theory', 1), ('graph traversal', 1), ('graph-partitioning', 1), ('graphs', 1), ('hashmap', 1), ('hashset', 1), ('help', 1), ('interview', 1), ('isgraphbipartite', 1), ('iterative', 1), ('java ac solution', 1), ('javascript bfs', 1), ('javascript recursive', 1), ('javasript', 1), ('js javascript', 1), ('kotlinvim', 1), ('kotllin', 1), ('linear time', 1), ('node coloring', 1), ('optimal', 1), ('preoder', 1), ('racket', 1), ('recurision', 1), ('recursive', 1), ('recursiveley', 1), ('ritik', 1), ('short', 1), ('simple and elegant', 1), ('simple approach', 1), ('simple clear c++ solution', 1), ('simple-solution', 1), ('swift', 1), ('thinking process', 1), ('union', 1), ('union-find', 1), ('video explanation', 1), ('visualization', 1)]"
784,Letter Case Permutation,https://leetcode.com/problems/letter-case-permutation,"Given a string S, we can transform every letter individually to be lowercase or uppercase to create another string.

Return a list of all possible strings we could create. You can return the output in any order.","['backtracking', 'bit-manipulation']",Medium,2038,124,203431,140117,"[""Subsets"", ""Brace Expansion""]","[('backtracking', 87), ('c++', 59), ('recursion', 52), ('java', 42), ('python', 42), ('javascript', 30), ('python 3', 30), ('cpp', 25), ('dfs', 24), ('python3', 20), ('easy-understanding', 15), ('recursive', 14), ('c#', 12), ('simple', 9), ('java-solution', 8), ('recurision', 6), ('bfs', 5), ('cpp solution', 5), ('golang', 5), ('permutations', 5), ('simple solution', 5), ('dfs simple solution', 4), ('easy-to-understand', 4), ('easytounderstand', 4), ('kotlin', 4), ('recusion', 4), ('swift', 4), ('back tracking', 3), ('backtrack', 3), ('bit manipulation', 3), ('built-in-function', 3), ('expalanation', 3), ('fast and simple', 3), ('iterative', 3), ('iteratively', 3), ('java ac solution', 3), ('queue', 3), ('ruby', 3), ('simplest', 3), ('video-explanation', 3), ('beginner friendly', 2), ('bitmask', 2), ('bitmasking', 2), ('c++ code', 2), ('c++ solution', 2), ('combinatorics', 2), ('cpp easy', 2), ('depth first search', 2), ('dfs solution', 2), ('easy', 2), ('easy to understand', 2), ('explained', 2), ('one-liner', 2), ('recursive solution', 2), ('recursively', 2), ('rust', 2), ('stl', 2), ('string', 2), ('string-operation', 2), ('typescript', 2), ('vector', 2), ('#backtracking', 1), ('100 faster cpp', 1), ('99.63 faster', 1), ('ascii', 1), ('backrtracking', 1), ('backtacking', 1), ('backtracing', 1), ('backtracking template', 1), ('beginnerfriendly', 1), ('binary numbers', 1), ('binarysearch', 1), ('bit masking', 1), ('bitmanipulation', 1), ('bitmasks', 1), ('bitwise', 1), ('breadth-first search', 1), ('c', 1), ('c++ dfs', 1), ('cascading', 1), ('character', 1), ('clean code', 1), ('commented', 1), ('comments-added', 1), ('cpp-solution', 1), ('csharp', 1), ('depth first traversal', 1), ('depth-first search', 1), ('dfs-in-order', 1), ('dfs-iterative', 1), ('dfs-topdown', 1), ('dp', 1), ('drewbie', 1), ('dynamic programming', 1), ('easy to read', 1), ('easy-undestand', 1), ('easysolution', 1), ('efficient solution', 1), ('explanation', 1), ('explanation with logic', 1), ('fast', 1), ('fast-solution', 1), ('faster', 1), ('faster than 99.41', 1), ('fastest', 1), ('fastest solution', 1), ('go', 1), ('helper functions', 1), ('intuitive', 1), ('iterative-solution', 1), ('iterator', 1), ('javascript solution', 1), ('js', 1), ('js javascript', 1), ('kotlin-solution', 1), ('lettercasepermutation', 1), ('memoization', 1), ('mrmagician', 1), ('oneline', 1), ('oneliner', 1), ('original solution', 1), ('performance', 1), ('permutation', 1), ('please upvote', 1), ('python combinatorics', 1), ('python3.8', 1), ('queue-approach', 1), ('racket', 1), ('readable', 1), ('recurrance', 1), ('recurrence tree', 1), ('recursion tree', 1), ('redirect21', 1), ('reduce', 1), ('regular-expression', 1), ('scrolling array', 1), ('set', 1), ('sets', 1), ('short solution', 1), ('simple clear c++ solution', 1), ('string parsing', 1), ('stringbuilder', 1), ('strings', 1), ('subset', 1), ('swift5', 1), ('time complexity', 1), ('video', 1), ('wrong answer', 1), ('wrong output', 1)]"
783,Minimum Distance Between BST Nodes,https://leetcode.com/problems/minimum-distance-between-bst-nodes,"Given the root of a Binary Search Tree (BST), return the minimum difference between the values of any two different nodes in the tree.","['tree', 'depth-first-search', 'recursion']",Easy,1028,255,162571,88343,"[""Binary Tree Inorder Traversal""]","[('java', 22), ('c++', 21), ('cpp', 21), ('recursion', 19), ('inorder', 15), ('python', 14), ('javascript', 12), ('python 3', 10), ('bst', 9), ('dfs', 8), ('inorder traversal', 8), ('inorder-traversal', 8), ('cpp solution', 7), ('java-solution', 6), ('dfs-in-order', 4), ('easy-understanding', 4), ('golang', 4), ('iterative', 4), ('recusion', 4), ('c#', 3), ('easy', 3), ('easy to understand', 3), ('fast and simple', 3), ('in-order-traversal', 3), ('morris-traversal', 3), ('python3', 3), ('recursive', 3), ('simple', 3), ('c', 2), ('cpp easy', 2), ('easy-undestand', 2), ('go', 2), ('golang-solution', 2), ('inordertraversal', 2), ('js', 2), ('ruby', 2), ('stack', 2), ('swift', 2), ('tree-traversal', 2), ('0ms runtime', 1), ('100 faster cpp', 1), ('6 lines', 1), ('array', 1), ('beginner friendly', 1), ('bfs', 1), ('brute force', 1), ('c++ code', 1), ('c++ solution', 1), ('c++14', 1), ('clean code', 1), ('comments', 1), ('concise', 1), ('constant space', 1), ('cpp doubt', 1), ('dfs traversal', 1), ('dfs-topdown', 1), ('easy-to-follow', 1), ('easy-to-read', 1), ('easy-to-understand', 1), ('easysolution', 1), ('easytounderstand', 1), ('explaination', 1), ('faster', 1), ('for loop', 1), ('go-solution', 1), ('golang solution', 1), ('immutable', 1), ('in-order', 1), ('in-order traversal', 1), ('in-order-dfs', 1), ('iteratively', 1), ('java solution', 1), ('js javascript', 1), ('level-order-traversal', 1), ('linear time', 1), ('lnr', 1), ('mindistbwbstnodes', 1), ('morris traversal', 1), ('morris-inorder-traversal', 1), ('mrmagician', 1), ('non-recursive', 1), ('queue', 1), ('recurision', 1), ('recursive easy', 1), ('simple solution', 1), ('tree', 1), ('tree node ancestor', 1), ('trees', 1), ('upvote', 1)]"
782,Transform to Chessboard,https://leetcode.com/problems/transform-to-chessboard,"An N x N board contains only 0s and 1s. In each move, you can swap any 2 rows with each other, or any 2 columns with each other.

What is the minimum number of moves to transform the board into a ""chessboard"" - a board where no 0s and no 1s are 4-directionally adjacent? If the task is impossible, return -1.","['array', 'math']",Hard,151,156,14199,6682,[],"[('bit-manipulation', 1), ('c#', 1), ('java', 1)]"
781,Rabbits in Forest,https://leetcode.com/problems/rabbits-in-forest,"In a forest, each rabbit has some color. Some subset of rabbits (possibly all of them) tell you how many other rabbits have the same color as them. Those answers are placed in an array.

Return the minimum number of rabbits that could be in the forest.","['hash-table', 'math']",Medium,399,371,47079,26282,[],"[('c++', 10), ('hashmap', 9), ('cpp', 7), ('python 3', 7), ('python', 6), ('java', 4), ('100 space', 3), ('c#', 3), ('counter', 3), ('easy-understanding', 3), ('java-solution', 2), ('python3', 2), ('1 liner', 1), ('100 memory', 1), ('4 liner', 1), ('c++ code', 1), ('c++11', 1), ('ceil', 1), ('comments-added', 1), ('consice', 1), ('cpp solution', 1), ('dictionaries', 1), ('dictonary', 1), ('easiest solution', 1), ('easy-understand', 1), ('easytounderstand', 1), ('explanations', 1), ('fast and simple', 1), ('fasterthan100', 1), ('go', 1), ('golang', 1), ('golang-solution', 1), ('google', 1), ('hashtable', 1), ('java 8', 1), ('java ac solution', 1), ('javascript', 1), ('logic', 1), ('map', 1), ('map-stl', 1), ('memory optimized', 1), ('priority queue', 1), ('rajat', 1), ('readable code', 1), ('self-explanatory', 1), ('simplest', 1), ('single-line', 1), ('whysomanydislikes', 1)]"
780,Reaching Points,https://leetcode.com/problems/reaching-points,"A move consists of taking a point (x, y) and transforming it to either (x, x+y) or (x+y, y).

Given a starting point (sx, sy) and a target point (tx, ty), return True if and only if a sequence of moves exists to transform the point (sx, sy) to (tx, ty). Otherwise, return False.",['math'],Hard,732,129,103748,31588,[],"[('recursion', 4), ('java', 3), ('python3', 3), ('cpp', 2), ('python', 2), ('python 3', 2), ('bottom up', 1), ('c#', 1), ('c++', 1), ('cpp solution', 1), ('detailed explanation', 1), ('easy-understand', 1), ('easy-understsand', 1), ('euclidean algorithm', 1), ('examples', 1), ('explained', 1), ('explanation of logic', 1), ('javascript', 1), ('math', 1), ('maths', 1), ('recursive easy', 1), ('rust', 1), ('top down', 1)]"
779,K-th Symbol in Grammar,https://leetcode.com/problems/k-th-symbol-in-grammar,"On the first row, we write a 0. Now in every subsequent row, we look at the previous row and replace each occurrence of 0 with 01, and each occurrence of 1 with 10.

Given row N and index K, return the K-th indexed symbol in row N. (The values of K are 1-indexed.) (1 indexed).",['recursion'],Medium,852,201,136410,53000,[],"[('recursion', 41), ('c++', 30), ('cpp', 22), ('python 3', 15), ('easy-understanding', 13), ('java', 13), ('javascript', 8), ('python', 8), ('easy', 6), ('one-liner', 5), ('c#', 4), ('python3', 4), ('simple', 4), ('0ms', 3), ('one line', 3), ('oneline', 3), ('oneliner', 3), ('recurision', 3), ('recursive', 3), ('recusion', 3), ('bit manipulation', 2), ('cpp solution', 2), ('easy-to-understand', 2), ('easy-undestand', 2), ('explained solution', 2), ('fast-solution', 2), ('iterative', 2), ('math', 2), ('neat', 2), ('recursive easy', 2), ('simple solution', 2), ('100 faster', 1), ('100 speed', 1), ('3linessolution', 1), ('assembler', 1), ('beginner', 1), ('binary tree', 1), ('binary-search', 1), ('binary-tree', 1), ('bit-manipulation', 1), ('bitwise', 1), ('c', 1), ('c# recursive', 1), ('c#-solution', 1), ('c++ code', 1), ('c++ recursive solution', 1), ('c++17', 1), ('clean', 1), ('clean code', 1), ('comments-added', 1), ('constant space', 1), ('count of 1', 1), ('cpp easy', 1), ('cpp with explanation', 1), ('dfs solution', 1), ('dynamic programmin', 1), ('easy-understand', 1), ('easytounderstand', 1), ('efficient', 1), ('efficient solution', 1), ('explained', 1), ('explanation of logic', 1), ('explanation with logic', 1), ('fasterthan100', 1), ('fastest java solution', 1), ('golang', 1), ('iterative solution', 1), ('java bit-manipulation', 1), ('java-solution', 1), ('non-recursive', 1), ('o1', 1), ('observation', 1), ('observations', 1), ('one-line', 1), ('optimal', 1), ('python3.8', 1), ('pythonpython3', 1), ('rajat', 1), ('recrusive', 1), ('recurrance', 1), ('recursion formula', 1), ('rust', 1), ('search', 1), ('solution', 1), ('somal', 1), ('tree-traversal', 1), ('trees', 1), ('x86', 1)]"
778,Swim in Rising Water,https://leetcode.com/problems/swim-in-rising-water,"On an N x N grid, each square grid[i][j] represents the elevation at that point (i,j).

Now rain starts to fall. At time t, the depth of the water everywhere is t. You can swim from a square to another 4-directionally adjacent square if and only if the elevation of both squares individually are at most t. You can swim infinite distance in zero time. Of course, you must stay within the boundaries of the grid during your swim.

You start at the top left square (0, 0). What is the least time until you can reach the bottom right square (N-1, N-1)?","['binary-search', 'heap', 'depth-first-search', 'union-find']",Hard,893,68,62966,34670,[],"[('java', 8), ('binary-search', 7), ('dfs', 7), ('c++', 6), ('python', 5), ('cpp', 4), ('dijkstra', 4), ('priority queue', 4), ('c#', 3), ('bfs', 2), ('binary search', 2), ('dfs solution', 2), ('heapq', 2), ('java-solution', 2), ('union find', 2), ('unionfind', 2), ('clean solution', 1), ('cpp solution', 1), ('dfs simple solution', 1), ('dijkstras algorithm', 1), ('dijsktra', 1), ('disjoint sets', 1), ('djikstra algorithm', 1), ('dsu', 1), ('easy understanding', 1), ('javascript', 1), ('javascript solution', 1), ('min heap', 1), ('pruning', 1), ('python 3', 1), ('python2', 1)]"
777,Swap Adjacent in LR String,https://leetcode.com/problems/swap-adjacent-in-lr-string,"In a string composed of 'L', 'R', and 'X' characters, like ""RXXLRXRXL"", a move consists of either replacing one occurrence of ""XL"" with ""LX"", or replacing one occurrence of ""RX"" with ""XR"". Given the starting string start and the ending string end, return True if and only if there exists a sequence of moves to transform one string to the other.",['brainteaser'],Medium,532,514,107337,38363,[],"[('python', 5), ('python3', 3), ('c++', 2), ('clear', 2), ('java', 2), ('javascript', 2), ('python 3', 2), ('brute force', 1), ('c#', 1), ('complexity-analysis', 1), ('cpp', 1), ('easy', 1), ('easy-to-understand', 1), ('easy-undestand', 1), ('explained', 1), ('golang', 1), ('greedy', 1), ('java-solution', 1), ('one pass', 1), ('one pass solution', 1), ('picture explanation', 1), ('pythonpython3', 1), ('simple solution', 1), ('stack-based', 1), ('string', 1)]"
704,Binary Search,https://leetcode.com/problems/binary-search,"Given an array of integers nums which is sorted in ascending order, and an integer target, write a function to search target in nums. If target exists, then return its index. Otherwise, return -1.",['binary-search'],Easy,1321,62,475497,258881,"[""Search in a Sorted Array of Unknown Size""]","[('binary-search', 58), ('c++', 26), ('java', 26), ('javascript', 21), ('python', 21), ('binary search', 18), ('python 3', 14), ('iterative', 12), ('python3', 11), ('cpp', 8), ('binarysearch', 7), ('java-solution', 7), ('recursion', 7), ('recursive', 6), ('ruby', 6), ('rust', 6), ('explained', 5), ('cpp solution', 4), ('easy-understanding', 4), ('easytounderstand', 4), ('binarysearh', 3), ('c#', 3), ('easy', 3), ('golang', 3), ('logn', 3), ('scala', 3), ('binary search algorithm', 2), ('c', 2), ('cpp easy', 2), ('fastest', 2), ('go', 2), ('java ac solution', 2), ('recurision', 2), ('stl', 2), ('video explanation', 2), ('#704', 1), ('100 speed', 1), ('2-liner', 1), ('algorithms', 1), ('alternatives', 1), ('arrays', 1), ('beats 100', 1), ('beats 98 pc', 1), ('beginner', 1), ('beginner friendly', 1), ('binary search logic', 1), ('binary-search-algorithm', 1), ('binary-srach', 1), ('binary-tree', 1), ('binarysearchfirst', 1), ('binarysearchlast', 1), ('bisect', 1), ('bit manipulation', 1), ('bitwise', 1), ('brute force', 1), ('c#-solution', 1), ('c++ code', 1), ('c++ solution', 1), ('commentary', 1), ('comments-added', 1), ('consice', 1), ('constant-space', 1), ('description', 1), ('divide and conquer', 1), ('divide-and-conquer', 1), ('easiest', 1), ('easy to follow', 1), ('easy to understant', 1), ('easy-solition', 1), ('easy-understand', 1), ('explained solution', 1), ('explanation', 1), ('for comprehension', 1), ('for-comprehension', 1), ('index', 1), ('interpolation', 1), ('iterative approch', 1), ('iterative-dfs', 1), ('iteratve-recursive', 1), ('javascript solution', 1), ('js javascript', 1), ('kotlin-solution', 1), ('library', 1), ('logarithmic time', 1), ('lowerbound', 1), ('one-liner', 1), ('oneline', 1), ('oneliner', 1), ('optimized', 1), ('php', 1), ('poorly-written-problem', 1), ('Premium', 1), ('python2', 1), ('pythonic', 1), ('recursively', 1), ('short', 1), ('simple', 1), ('simple solution', 1), ('simple-solution', 1), ('solution', 1), ('swift', 1), ('swift5', 1), ('tailrec', 1), ('ternary-search', 1), ('test-case-too-weak', 1), ('time-complexity', 1), ('tutorial', 1), ('two pointer', 1), ('typescript', 1), ('universal template', 1), ('upperbound', 1), ('vector', 1), ('while loop', 1)]"
775,Global and Local Inversions,https://leetcode.com/problems/global-and-local-inversions,"You are given an integer array nums of length n which represents a permutation of all the integers in the range [0, n - 1].

The number of global inversions is the number of the different pairs (i, j) where:


	0 <= i < j < n
	nums[i] > nums[j]


The number of local inversions is the number of indices i where:


	0 <= i < n - 1
	nums[i] > nums[i + 1]


Return true if the number of global inversions is equal to the number of local inversions.","['array', 'math']",Medium,777,260,102571,47444,[],"[('c++', 27), ('java', 17), ('easy-understanding', 13), ('python', 11), ('cpp', 10), ('explained', 10), ('javascript', 7), ('python3', 7), ('fast and simple', 5), ('java-solution', 4), ('c#', 3), ('cpp solution', 3), ('golang', 3), ('rust', 3), ('clean code', 2), ('easy', 2), ('easy to understand', 2), ('easy-to-understand', 2), ('fast', 2), ('math', 2), ('merge-sort', 2), ('optimal', 2), ('python 3', 2), ('typescript', 2), ('video-explanation', 2), ('#interview', 1), ('100 speed', 1), ('7 lines', 1), ('array', 1), ('array-sort', 1), ('binary indexed tree', 1), ('binary-indexed-tree', 1), ('bit-manipulation', 1), ('brute-force', 1), ('c++ solution', 1), ('c++11', 1), ('comments-added', 1), ('common', 1), ('declarative', 1), ('detailed explanation', 1), ('easiest', 1), ('easy to understant', 1), ('efficient solution', 1), ('es2015', 1), ('explanations', 1), ('fast solution', 1), ('fast-solution', 1), ('generic', 1), ('globallocalinversion', 1), ('go', 1), ('helpful', 1), ('index', 1), ('iteration', 1), ('linear', 1), ('linear-time', 1), ('lineartime', 1), ('logic-solution', 1), ('math solution', 1), ('mergesort', 1), ('observation', 1), ('one line', 1), ('onepass', 1), ('ruby', 1), ('short', 1), ('short c++ code', 1), ('simple', 1), ('simple clear c++ solution', 1), ('single pass', 1), ('swift', 1), ('thinking process', 1), ('time', 1), ('trie', 1)]"
703,Kth Largest Element in a Stream,https://leetcode.com/problems/kth-largest-element-in-a-stream,"Design a class to find the kth largest element in a stream. Note that it is the kth largest element in the sorted order, not the kth distinct element.

Implement KthLargest class:


	KthLargest(int k, int[] nums) Initializes the object with the integer k and the stream of integers nums.
	int add(int val) Returns the element representing the kth largest element in the stream.","['heap', 'design']",Easy,1226,751,256709,131051,"[""Kth Largest Element in an Array"", ""Finding MK Average""]","[('c++', 21), ('heap', 20), ('java', 16), ('priority queue', 15), ('python', 14), ('cpp', 13), ('min heap', 10), ('minheap', 10), ('python 3', 10), ('javascript', 8), ('heapq', 7), ('bst', 5), ('c#', 5), ('min-heap', 5), ('python3', 5), ('binary search tree', 4), ('easy-understanding', 4), ('#heap', 3), ('binary search', 3), ('cpp solution', 3), ('golang', 3), ('heaps', 3), ('simple', 3), ('binary-search-tree', 2), ('clean code', 2), ('concise', 2), ('easy', 2), ('easy-undestand', 2), ('ruby', 2), ('swift', 2), ('#codegirl', 1), ('#cpp', 1), ('#javascript', 1), ('#maxheap', 1), ('#min heap', 1), ('#priority-queue', 1), ('#python', 1), ('algorithms', 1), ('array', 1), ('awesome-samriddhi', 1), ('binarysearch', 1), ('bisect', 1), ('c', 1), ('c-code', 1), ('c++ code', 1), ('c++ solution', 1), ('c++11', 1), ('commentary', 1), ('comments-added', 1), ('cpp easy', 1), ('easy to understand', 1), ('easy understand', 1), ('easy-to-understand', 1), ('easy-understand', 1), ('easytounderstand', 1), ('efficient', 1), ('efficient solution', 1), ('es6', 1), ('explanation of logic', 1), ('explanations', 1), ('faster', 1), ('go', 1), ('golang-solution', 1), ('heapsort', 1), ('help needed', 1), ('insert', 1), ('insertion sort', 1), ('iterative', 1), ('java-solution', 1), ('js', 1), ('keep it simple', 1), ('kotlin', 1), ('kotlinvim', 1), ('linear', 1), ('linked-list', 1), ('logn', 1), ('lowerbound', 1), ('max heap', 1), ('mrmagician', 1), ('multiset', 1), ('ordered sets', 1), ('ordering', 1), ('pbds', 1), ('php', 1), ('priority-queue', 1), ('priorityqueue', 1), ('pyhton', 1), ('python2', 1), ('pythonpython3', 1), ('recursion', 1), ('ritik', 1), ('runtime-error', 1), ('sets', 1), ('solution', 1), ('solution c++', 1), ('sortedset', 1), ('stable sort', 1), ('stack', 1), ('stl', 1), ('upvote', 1)]"
773,Sliding Puzzle,https://leetcode.com/problems/sliding-puzzle,"On a 2x3 board, there are 5 tiles represented by the integers 1 through 5, and an empty square represented by 0.

A move consists of choosing 0 and a 4-directionally adjacent number and swapping it.

The state of the board is solved if and only if the board is [[1,2,3],[4,5,0]].

Given a puzzle board, return the least number of moves required so that the state of the board is solved. If it is impossible for the state of the board to be solved, return -1.",['breadth-first-search'],Hard,963,30,87037,53341,[],"[('bfs', 36), ('python', 11), ('c++', 9), ('cpp', 6), ('java', 6), ('python 3', 5), ('javascript', 4), ('breadth first search', 3), ('c#', 3), ('cpp solution', 3), ('a-star', 2), ('easy', 2), ('easy to understand', 2), ('golang', 2), ('golang-solution', 2), ('0 ms', 1), ('a star', 1), ('a-star search', 1), ('astar', 1), ('bfs java', 1), ('bit operation', 1), ('comments-added', 1), ('dfs-iterative', 1), ('easiest', 1), ('easy-understanding', 1), ('faster than 100.00', 1), ('go-solution', 1), ('javascript solution', 1), ('kotlin', 1), ('manhattan distance', 1), ('math', 1), ('priority queue', 1), ('pythno3', 1), ('python bfs', 1), ('question need help', 1), ('queue', 1), ('recursion', 1), ('ruby', 1), ('scala', 1), ('sets', 1), ('state', 1), ('swift', 1), ('trie', 1)]"
701,Insert into a Binary Search Tree,https://leetcode.com/problems/insert-into-a-binary-search-tree,"You are given the root node of a binary search tree (BST) and a value to insert into the tree. Return the root node of the BST after the insertion. It is guaranteed that the new value does not exist in the original BST.

Notice that there may exist multiple valid ways for the insertion, as long as the tree remains a BST after insertion. You can return any of them.",['tree'],Medium,1535,98,236568,178134,"[""Search in a Binary Search Tree""]","[('java', 41), ('recursion', 37), ('c++', 34), ('python', 29), ('python 3', 26), ('iterative', 24), ('recursive', 20), ('cpp', 19), ('python3', 19), ('bst', 16), ('javascript', 16), ('java-solution', 13), ('easy-understanding', 11), ('recurision', 11), ('cpp solution', 10), ('binary search tree', 9), ('c#', 9), ('easy', 6), ('easy-to-understand', 6), ('easytounderstand', 6), ('binary-tree', 5), ('c', 5), ('dfs', 5), ('recusion', 5), ('simple', 5), ('golang', 4), ('recursive easy', 4), ('recursively', 4), ('simple solution', 4), ('swift', 4), ('0ms', 3), ('100 speed', 3), ('fast-solution', 3), ('iteration', 3), ('java ac solution', 3), ('kotlin', 3), ('100 faster', 2), ('binary tree insert', 2), ('binary-search', 2), ('binary-search-tree', 2), ('c++ code', 2), ('c++11', 2), ('clean code', 2), ('comments', 2), ('cpp easy', 2), ('dfs simple solution', 2), ('easy to understand', 2), ('easy-undestand', 2), ('explained', 2), ('fast and simple', 2), ('iterative traversal', 2), ('iterative way', 2), ('java solution', 2), ('logarithmic time', 2), ('medium', 2), ('recursive solution', 2), ('tree problem', 2), ('trees', 2), ('typescript', 2), ('0ms runtime', 1), ('100 space', 1), ('2 solutions', 1), ('algorithms', 1), ('beats 100', 1), ('beats 100 memory', 1), ('beginner friendly', 1), ('binary search', 1), ('binary tree', 1), ('binary tree traversal', 1), ('bst-iterator', 1), ('bug report', 1), ('c programming', 1), ('c recursive', 1), ('c++ solution', 1), ('commentary', 1), ('comments added', 1), ('cpp clear', 1), ('cpp doubt', 1), ('cpp with explanation', 1), ('csharp', 1), ('depth first-search', 1), ('dfs solution', 1), ('difficulty', 1), ('effiecinet', 1), ('explaination', 1), ('explained solution', 1), ('explanation of logic', 1), ('faster', 1), ('go', 1), ('go-solution', 1), ('golang-solution', 1), ('in-order', 1), ('in-order-traversal', 1), ('insert', 1), ('insertintobst', 1), ('insertion', 1), ('iteration vs recursion', 1), ('iterative-dfs', 1), ('iteratively', 1), ('iteratve', 1), ('itereative', 1), ('javascript solution', 1), ('kotlinvim', 1), ('level-order-traversal', 1), ('mrmagician', 1), ('newbie', 1), ('non-recursion', 1), ('optimal', 1), ('php', 1), ('python2', 1), ('python3.8', 1), ('question', 1), ('queue', 1), ('recursion palindrome', 1), ('recursion vs iteration', 1), ('recursive approach', 1), ('recursive vs iterative', 1), ('recusive', 1), ('resursive', 1), ('ruby', 1), ('run time error', 1), ('rune-time-error', 1), ('rust', 1), ('short code', 1), ('solution', 1), ('sorting', 1), ('space', 1), ('swift5', 1), ('ternary-operator', 1), ('time-complexity', 1), ('tree', 1), ('tree traversal', 1), ('tree-traversal', 1), ('upvote', 1), ('video explanation', 1), ('video link', 1), ('video solution', 1), ('video-explanation', 1), ('while-iterative', 1)]"
700,Search in a Binary Search Tree,https://leetcode.com/problems/search-in-a-binary-search-tree,"You are given the root of a binary search tree (BST) and an integer val.

Find the node in the BST that the node's value equals val and return the subtree rooted with that node. If such a node does not exist, return null.",['tree'],Easy,1393,132,373164,274181,"[""Closest Binary Search Tree Value"", ""Insert into a Binary Search Tree""]","[('recursion', 57), ('c++', 42), ('java', 42), ('python', 42), ('python 3', 34), ('cpp', 30), ('iterative', 27), ('javascript', 27), ('binary search tree', 23), ('easy-understanding', 19), ('recursive', 17), ('java-solution', 16), ('python3', 14), ('c#', 11), ('dfs', 11), ('bst', 10), ('recurision', 9), ('recusion', 9), ('swift', 9), ('c', 8), ('cpp solution', 8), ('golang', 7), ('bfs', 6), ('easy-undestand', 6), ('iteratively', 6), ('recursive solution', 6), ('recursively', 6), ('simple solution', 6), ('binary-search', 5), ('binary-tree', 5), ('js', 5), ('recursive easy', 5), ('100 speed', 4), ('c code', 4), ('c++ code', 4), ('easy-to-understand', 4), ('one-liner', 4), ('1 line', 3), ('easy', 3), ('easytounderstand', 3), ('efficient', 3), ('go', 3), ('golang-solution', 3), ('queue', 3), ('ruby', 3), ('rust', 3), ('simple', 3), ('typescript', 3), ('video explanation', 3), ('0ms', 2), ('1-liner', 2), ('binary search', 2), ('clean code', 2), ('cpp easy', 2), ('explanation', 2), ('fast and simple', 2), ('faster', 2), ('iteration', 2), ('iteratve-recursive', 2), ('java ac solution', 2), ('javascipt', 2), ('javascript solution', 2), ('kotlin', 2), ('one line', 2), ('python2', 2), ('search', 2), ('video-explanation', 2), ('0ms-solution', 1), ('1 liner', 1), ('100 space', 1), ('3 lines', 1), ('3-liner', 1), ('ac', 1), ('algorithms', 1), ('awesome samriddhi', 1), ('beats 100', 1), ('beginner friendly', 1), ('big o', 1), ('binary tree', 1), ('binary-search-tree', 1), ('binarysearch', 1), ('bst-deserialisation', 1), ('bst-iterator', 1), ('c#-solution', 1), ('c++ recursive solution', 1), ('c++ solution', 1), ('c++11', 1), ('compact', 1), ('concise', 1), ('concise-solution', 1), ('consice', 1), ('cpp doubt', 1), ('csharp', 1), ('deep-first-search', 1), ('dfs-bfs', 1), ('divide-and-conquer', 1), ('doboy', 1), ('easy to understand', 1), ('easy to understandd', 1), ('easy to understant', 1), ('easy-to-read', 1), ('easy-understand', 1), ('easysolution', 1), ('easytoundersatand', 1), ('efficent approach', 1), ('efficiency', 1), ('explanation of logic', 1), ('explanations', 1), ('faang', 1), ('fast', 1), ('faster than 97.42', 1), ('fasterthan100', 1), ('fastest', 1), ('functional-programming', 1), ('fx', 1), ('github', 1), ('go-solution', 1), ('inorder', 1), ('ios', 1), ('itereative', 1), ('java easy to understand', 1), ('javac++c#', 1), ('javasccript', 1), ('js javascript', 1), ('kotlin-solution', 1), ('logn', 1), ('mensenvau', 1), ('mrmagician', 1), ('one line solution', 1), ('one liner', 1), ('php', 1), ('postorder', 1), ('preorder', 1), ('pseudocode', 1), ('pythonic', 1), ('pythonpython3', 1), ('reccursion', 1), ('recoursive', 1), ('recursion palindrome', 1), ('recursion stack', 1), ('recursive lines clean', 1), ('recursive-dfs', 1), ('recursive-solution', 1), ('recursiveley', 1), ('recusive', 1), ('ritik', 1), ('runtime', 1), ('scala', 1), ('searchinbst', 1), ('searching', 1), ('simpe', 1), ('solution by python', 1), ('solved', 1), ('stack', 1), ('super', 1), ('swift5', 1), ('tailrec', 1), ('tree', 1), ('tree traversal', 1), ('tree-traversal', 1), ('trees', 1), ('two-solutions', 1), ('upvote', 1), ('very-easy', 1), ('while loop', 1), ('with explanation', 1), ('youtube', 1)]"
771,Jewels and Stones,https://leetcode.com/problems/jewels-and-stones,"You're given strings jewels representing the types of stones that are jewels, and stones representing the stones you have. Each character in stones is a type of stone you have. You want to know how many of the stones you have are also jewels.

Letters are case sensitive, so ""a"" is considered a different type of stone from ""A"".",['hash-table'],Easy,2627,415,712529,620181,[],"[('c++', 80), ('python', 67), ('java', 60), ('python 3', 47), ('javascript', 44), ('cpp', 42), ('hashmap', 32), ('java-solution', 29), ('python3', 25), ('c#', 24), ('golang', 19), ('hashset', 17), ('set', 17), ('easy', 16), ('easy-understanding', 14), ('c', 13), ('cpp solution', 13), ('swift', 13), ('string', 11), ('c++ code', 10), ('simple', 9), ('simple solution', 9), ('fast-solution', 8), ('ruby', 8), ('cpp easy', 7), ('easy-undestand', 7), ('go', 7), ('hash table', 7), ('regex', 7), ('rust', 7), ('javascript solution', 6), ('jewelsandstones', 6), ('js', 6), ('kotlin', 6), ('one-liner', 6), ('scala', 6), ('sets', 6), ('0ms', 5), ('c++11', 5), ('golang-solution', 5), ('regexp', 5), ('brute force', 4), ('counter', 4), ('dictionary', 4), ('solution', 4), ('accepted', 3), ('array', 3), ('beating-100-submissions', 3), ('cpp-solution', 3), ('dictionaries', 3), ('easy-to-understand', 3), ('easytounderstand', 3), ('efficient solution', 3), ('fast', 3), ('fast and simple', 3), ('for-loop', 3), ('hashing', 3), ('linear time', 3), ('linq', 3), ('one line', 3), ('php', 3), ('regular-expression', 3), ('stl', 3), ('swiftsolution', 3), ('100 faster runtime', 2), ('6ms java', 2), ('ascii', 2), ('basic', 2), ('beginner', 2), ('beginner friendly', 2), ('bruteforce', 2), ('c programming', 2), ('c++ easy to understand', 2), ('clean code', 2), ('count', 2), ('csharp', 2), ('easiest', 2), ('go-solution', 2), ('iterative', 2), ('javascrip', 2), ('jewels and stone c#', 2), ('jlovenpk1', 2), ('large memory footprint', 2), ('leetcode contest', 2), ('list comprehension', 2), ('maps', 2), ('reduce', 2), ('simple clear c++ solution', 2), ('solution-sharing-cpp', 2), ('streams', 2), ('string-operation', 2), ('unordered map', 2), ('unorderedmap', 2), ('#pythonic', 1), ('0ms faster tha', 1), ('0ms runtime', 1), ('100', 1), ('100 bst', 1), ('100 faster', 1), ('100 faster cpp', 1), ('100 memory', 1), ('100 speed', 1), ('1ms', 1), ('2liner', 1), ('2lines', 1), ('52ms', 1), ('95 per faster', 1), ('99', 1), ('accepted solution', 1), ('algorithms', 1), ('alphabet', 1), ('apple', 1), ('array functions', 1), ('arrays', 1), ('asahiocean', 1), ('beats100', 1), ('best', 1), ('best-solution-ever', 1), ('big o of n', 1), ('bit manipulation', 1), ('bit-manipulation', 1), ('c code', 1), ('c++ hash', 1), ('c++ solution', 1), ('c++multiset map', 1), ('char', 1), ('charat', 1), ('clear', 1), ('collections', 1), ('commentary', 1), ('comments', 1), ('complexity-analysis', 1), ('constant-space', 1), ('contains', 1), ('countarray', 1), ('counters', 1), ('counting algorithm', 1), ('counting-sort', 1), ('cpp clear', 1), ('default dict', 1), ('defaultdict', 1), ('dictionary comprehension', 1), ('double-pointers', 1), ('dynamic programming', 1), ('easiest solution', 1), ('easy to understand', 1), ('easy-understand', 1), ('easytoundersatand', 1), ('ecmascript', 1), ('es6', 1), ('exception', 1), ('expalanation', 1), ('explained', 1), ('explained solution', 1), ('explanation', 1), ('faster than 100', 1), ('faster than 100.00', 1), ('fastest js', 1), ('fold', 1), ('for loop', 1), ('frequency count', 1), ('frequencycounting', 1), ('generator', 1), ('generator expressions', 1), ('github', 1), ('hash-function', 1), ('help me', 1), ('immutable', 1), ('implementation', 1), ('includes', 1), ('indexof method', 1), ('ios', 1), ('iterator', 1), ('java 8', 1), ('java-hashmap', 1), ('javascipt', 1), ('javascriptes6', 1), ('javascrpt', 1), ('javscript', 1), ('jewels and stones', 1), ('linear solution', 1), ('linear-time', 1), ('list-comprehension', 1), ('loop', 1), ('map', 1), ('map-stl', 1), ('memory usage', 1), ('memory-efficient', 1), ('naive-solution', 1), ('no hashmap', 1), ('no slices', 1), ('noob', 1), ('on', 1), ('one-loop', 1), ('oneline', 1), ('oneliner', 1), ('optimal', 1), ('optimized', 1), ('pattern matching', 1), ('php solution', 1), ('pseudocode', 1), ('questions', 1), ('readability', 1), ('readable', 1), ('regular expression', 1), ('regx', 1), ('set c++', 1), ('short', 1), ('short code', 1), ('simple python accepted', 1), ('simple-solution', 1), ('simpler', 1), ('single-line', 1), ('solution c++', 1), ('sort', 1), ('stl algorithms', 1), ('string parsing', 1), ('string-searching', 1), ('string.contains', 1), ('strings', 1), ('success', 1), ('time-complexity-o', 1), ('typescript', 1), ('unordered set', 1), ('unordered-set', 1), ('unorderedset', 1), ('using map in c++', 1), ('vector', 1), ('werfree', 1)]"
770,Basic Calculator IV,https://leetcode.com/problems/basic-calculator-iv,"Given an expression such as expression = ""e + 8 - a + 5"" and an evaluation map such as {""e"": 1} (given in terms of evalvars = [""e""] and evalints = [1]), return a list of tokens representing the simplified expression, such as [""-1*a"",""14""]


	An expression alternates chunks and symbols, with a space separating each chunk and symbol.
	A chunk is either an expression in parentheses, a variable, or a non-negative integer.
	A variable is a string of lowercase letters (not including digits.) Note that variables can be multiple letters, and note that variables never have a leading coefficient or unary operator like ""2x"" or ""-x"".


Expressions are evaluated in the usual order: brackets first, then multiplication, then addition and subtraction. For example, expression = ""1 + 2 * 3"" has an answer of [""7""].

The format of the output is as follows:


	For each term of free variables with non-zero coefficient, we write the free variables within a term in sorted order lexicographically. For example, we would never write a term like ""b*a*c"", only ""a*b*c"".
	Terms have degree equal to the number of free variables being multiplied, counting multiplicity. (For example, ""a*a*b*c"" has degree 4.) We write the largest degree terms of our answer first, breaking ties by lexicographic order ignoring the leading coefficient of the term.
	The leading coefficient of the term is placed directly to the left with an asterisk separating it from the variables (if they exist.)  A leading coefficient of 1 is still printed.
	An example of a well formatted answer is [""-2*a*a*a"", ""3*a*a*b"", ""3*b*b"", ""4*a"", ""5*c"", ""-6""] 
	Terms (including constant terms) with coefficient 0 are not included.  For example, an expression of ""0"" has an output of [].","['hash-table', 'string', 'stack']",Hard,93,808,11605,6330,"[""Parse Lisp Expression"", ""Basic Calculator III""]","[('c#', 2), ('deque', 1), ('javascript', 1), ('microsoft', 1), ('oop', 1), ('queues', 1), ('recursion', 1), ('rust', 1), ('stacks', 1)]"
769,Max Chunks To Make Sorted,https://leetcode.com/problems/max-chunks-to-make-sorted,"Given an array arr that is a permutation of [0, 1, ..., arr.length - 1], we split the array into some number of ""chunks"" (partitions), and individually sort each chunk.  After concatenating them, the result equals the sorted array.

What is the most number of chunks we could have made?",['array'],Medium,1047,144,87150,48810,"[""Max Chunks To Make Sorted II""]","[('c++', 9), ('cpp', 8), ('java', 8), ('python', 6), ('java-solution', 4), ('simple solution', 4), ('c#', 3), ('python 3', 3), ('0ms', 2), ('c++ code', 2), ('cpp solution', 2), ('easy-undestand', 2), ('python3', 2), ('sum', 2), ('100', 1), ('100 faster cpp', 1), ('100 speed', 1), ('array', 1), ('brute force', 1), ('c', 1), ('c++ easy to understand', 1), ('c++code', 1), ('clean code', 1), ('cpp easy', 1), ('detailed explanation', 1), ('dp', 1), ('dynamic programming', 1), ('easy', 1), ('easy to understand', 1), ('easy-understanding', 1), ('easytounderstand', 1), ('explanation with logic', 1), ('fast and simple', 1), ('fast-solution', 1), ('faster than 100.00', 1), ('fastest c++ solution', 1), ('functional', 1), ('go', 1), ('golang-solution', 1), ('greedy', 1), ('iteratively', 1), ('linear time', 1), ('prefix sum', 1), ('recursion', 1), ('rust', 1), ('scala', 1), ('sliding-window', 1), ('solution-sharing-cpp', 1), ('space o1', 1), ('time complexity', 1), ('two-pointers', 1)]"
768,Max Chunks To Make Sorted II,https://leetcode.com/problems/max-chunks-to-make-sorted-ii,"This question is the same as ""Max Chunks to Make Sorted"" except the integers of the given array are not necessarily distinct, the input array could be up to length 2000, and the elements could be up to 10**8.



Given an array arr of integers (not necessarily distinct), we split the array into some number of ""chunks"" (partitions), and individually sort each chunk.  After concatenating them, the result equals the sorted array.

What is the most number of chunks we could have made?",['array'],Hard,587,25,53178,26581,"[""Max Chunks To Make Sorted""]","[('c++', 7), ('cpp', 3), ('java', 3), ('sorting', 3), ('2-iterations', 2), ('array', 2), ('clean code', 2), ('cpp solution', 2), ('java-solution', 2), ('python', 2), ('python 3', 2), ('c#', 1), ('easy code', 1), ('easy-understanding', 1), ('easy-undestand', 1), ('explained', 1), ('fastest', 1), ('hashmap', 1), ('hint', 1), ('javascript', 1), ('mergeintervals', 1), ('n2logn', 1), ('python3', 1), ('simple solution', 1), ('solution-sharing-cpp', 1), ('sort', 1), ('sortiing', 1), ('stack', 1), ('stacks', 1), ('two-pointer', 1), ('vectors', 1)]"
767,Reorganize String,https://leetcode.com/problems/reorganize-string,"Given a string S, check if the letters can be rearranged so that two characters that are adjacent to each other are not the same.

If possible, output any possible result.  If not possible, return the empty string.","['string', 'heap', 'greedy', 'sort']",Medium,2808,136,275253,138578,"[""Rearrange String k Distance Apart"", ""Task Scheduler""]","[('priority queue', 43), ('c++', 40), ('heap', 33), ('java', 25), ('python', 25), ('python 3', 19), ('cpp', 17), ('heapq', 15), ('cpp solution', 12), ('python3', 9), ('java-solution', 8), ('javascript', 8), ('hashmap', 7), ('greedy', 6), ('map', 6), ('priorityqueue', 6), ('c#', 5), ('kotlin', 5), ('easy-understanding', 4), ('max-heap', 4), ('maxheap', 4), ('c', 3), ('counter', 3), ('cpp easy', 3), ('easy to understand', 3), ('easy-undestand', 3), ('greedy approach', 3), ('priority-queue', 3), ('simple solution', 3), ('string-operation', 3), ('c code', 2), ('clean code', 2), ('comments-added', 2), ('easy', 2), ('easytounderstand', 2), ('explained', 2), ('explanation of logic', 2), ('frequencycounting', 2), ('golang', 2), ('heapsort', 2), ('php', 2), ('queue', 2), ('simple', 2), ('sorteddictionary', 2), ('string', 2), ('100 faster cpp', 1), ('100 speed', 1), ('ac solution', 1), ('accepted solution', 1), ('akku', 1), ('array', 1), ('awesome samriddhi', 1), ('beats 100', 1), ('beginner friendly', 1), ('bucket', 1), ('c++ code', 1), ('c++ neat', 1), ('c++ simple', 1), ('c++14', 1), ('clean solution', 1), ('commented', 1), ('comments', 1), ('complexity-analysis', 1), ('concise-solution', 1), ('counting-array', 1), ('custom comparator', 1), ('detailed', 1), ('detailed explanation', 1), ('easy to read', 1), ('easy-to-understand', 1), ('explanation', 1), ('go', 1), ('golang-solution', 1), ('hash table', 1), ('heaps', 1), ('heaps algorithm', 1), ('iterator', 1), ('java ac solution', 1), ('js', 1), ('keep it simple', 1), ('kotlinvim', 1), ('max heap', 1), ('min heap', 1), ('ptyhon3', 1), ('recurision', 1), ('ritik', 1), ('ruby', 1), ('scala', 1), ('short', 1), ('solution-sharing-cpp', 1), ('sorting', 1), ('swift', 1), ('template', 1), ('test-case-too-weak', 1), ('two passes', 1), ('two-pointer', 1), ('unordered map', 1), ('vector', 1), ('video', 1), ('youtube', 1)]"
766,Toeplitz Matrix,https://leetcode.com/problems/toeplitz-matrix,"Given an m x n matrix, return true if the matrix is Toeplitz. Otherwise, return false.

A matrix is Toeplitz if every diagonal from top-left to bottom-right has the same elements.",['array'],Easy,1376,91,190962,126064,"[""Valid Word Square""]","[('python', 22), ('java', 21), ('python 3', 19), ('c++', 14), ('javascript', 14), ('cpp', 10), ('easy-understanding', 7), ('java-solution', 6), ('python3', 6), ('simple solution', 6), ('c#', 5), ('golang', 4), ('easy', 3), ('easy-to-understand', 3), ('array', 2), ('c', 2), ('for loops', 2), ('go', 2), ('hashmap', 2), ('javascript solution', 2), ('matrix', 2), ('python2', 2), ('swift', 2), ('0ms runtime', 1), ('0ms-solution', 1), ('1 line', 1), ('100 faster runtime', 1), ('2 pointer', 1), ('2d-array', 1), ('90+faster', 1), ('arrays', 1), ('beats 100', 1), ('beats94', 1), ('boolean', 1), ('brute force', 1), ('brute-force', 1), ('c++ code', 1), ('clean code', 1), ('commented', 1), ('concise', 1), ('cpp solution', 1), ('dfs', 1), ('diagram', 1), ('dictionary c#', 1), ('dictonary', 1), ('different approach', 1), ('dynamic programming', 1), ('easy to understand', 1), ('easy-undestand', 1), ('ecmascript', 1), ('efficient', 1), ('explaination', 1), ('explained', 1), ('explanation', 1), ('facebook', 1), ('fast and simple', 1), ('faster than 86.5', 1), ('fastest solution', 1), ('go-solution', 1), ('golang-solution', 1), ('hashset', 1), ('image', 1), ('images', 1), ('implementation', 1), ('invariant', 1), ('java ac solution', 1), ('javasciprt', 1), ('kotlin', 1), ('kotlinvim', 1), ('less memory than 94.5', 1), ('loop', 1), ('loops', 1), ('nlogn', 1), ('one-liner', 1), ('optimal', 1), ('python3.8', 1), ('recursion', 1), ('ruby', 1), ('self-explanatory', 1), ('short', 1), ('simple', 1), ('simple-solution', 1), ('solution c++', 1), ('solution-python', 1), ('solution-sharing-cpp', 1), ('structured', 1), ('swift5', 1), ('toeplitz', 1), ('toeplitzmatrix', 1), ('two solutions', 1), ('understandable', 1), ('unique', 1), ('unordered map', 1), ('why', 1), ('zip', 1)]"
590,N-ary Tree Postorder Traversal,https://leetcode.com/problems/n-ary-tree-postorder-traversal,"Given the root of an n-ary tree, return the postorder traversal of its nodes' values.

Nary-Tree input serialization is represented in their level order traversal. Each group of children is separated by the null value (See examples)",['tree'],Easy,1004,74,177131,130692,"[""Binary Tree Postorder Traversal"", ""N-ary Tree Level Order Traversal"", ""N-ary Tree Preorder Traversal""]","[('iterative', 29), ('c++', 28), ('java', 28), ('javascript', 23), ('recursion', 20), ('python', 19), ('python 3', 17), ('cpp', 15), ('recursive', 13), ('stack', 12), ('c#', 11), ('python3', 8), ('dfs', 7), ('iteratively', 6), ('postorder-traversal', 5), ('recursive solution', 5), ('cpp solution', 4), ('easy-undestand', 4), ('java-solution', 4), ('kotlin', 4), ('c', 3), ('easy', 3), ('easy-to-understand', 3), ('easy-understanding', 3), ('go', 3), ('golang', 3), ('n-ary-tree', 3), ('stack-based', 3), ('stacks', 3), ('c++ code', 2), ('easy to understand', 2), ('easytounderstand', 2), ('explained', 2), ('hashmap', 2), ('iterate', 2), ('iterative solution', 2), ('iterative-solution', 2), ('php', 2), ('recurision', 2), ('recursively', 2), ('ruby', 2), ('simple', 2), ('simple solution', 2), ('solution', 2), ('swift', 2), ('tree traversal', 2), ('tree-traversal', 2), ('trees', 2), ('#codegirl', 1), ('#iterative', 1), ('#postorder-traversal', 1), ('#python 3', 1), ('100 faster', 1), ('100 space', 1), ('5 lines', 1), ('algorithms', 1), ('along-the-way', 1), ('append', 1), ('awesome samriddhi', 1), ('beginner friendly', 1), ('bfs', 1), ('binary-tree', 1), ('c programming', 1), ('c recursive', 1), ('c++ solution', 1), ('c++11', 1), ('c++17', 1), ('clean code', 1), ('collections', 1), ('commentary', 1), ('commetend', 1), ('concise', 1), ('csharp', 1), ('depth first search', 1), ('depth-first-search', 1), ('deque', 1), ('detailed explanation', 1), ('dfs simple solution', 1), ('dfs solution', 1), ('dfs-iterative', 1), ('dfs-non-recursive', 1), ('dfs-topdown', 1), ('easy undestanding', 1), ('easy-understand', 1), ('easysolution', 1), ('explanation', 1), ('fast', 1), ('fast-solution', 1), ('faster than 95', 1), ('faster then 95', 1), ('functional', 1), ('insert', 1), ('interative', 1), ('iteration', 1), ('iteration vs recursion', 1), ('iterative way', 1), ('iterative-dfs', 1), ('iteratve', 1), ('iteratve-recursive', 1), ('javascipt', 1), ('js', 1), ('kotlin-solution', 1), ('linear-space', 1), ('linear-time', 1), ('list', 1), ('meiyaowen', 1), ('mrmagician', 1), ('n-ary tree', 1), ('narypostordertraversal', 1), ('on time', 1), ('php solution', 1), ('postorder', 1), ('postorder-iterative', 1), ('python2', 1), ('recursion vs iteration', 1), ('recursive dictionary', 1), ('recursive easy', 1), ('recursive vs iterative', 1), ('recursive-solution', 1), ('recursiveley', 1), ('recusion', 1), ('recusive', 1), ('reverse', 1), ('reversed', 1), ('ritik', 1), ('scala', 1), ('short code', 1), ('short solution', 1), ('tree', 1), ('two approaches', 1), ('unorderedmap', 1), ('upvote', 1), ('visited', 1)]"
589,N-ary Tree Preorder Traversal,https://leetcode.com/problems/n-ary-tree-preorder-traversal,"Given the root of an n-ary tree, return the preorder traversal of its nodes' values.

Nary-Tree input serialization is represented in their level order traversal. Each group of children is separated by the null value (See examples)",['tree'],Easy,1034,65,219528,163173,"[""Binary Tree Preorder Traversal"", ""N-ary Tree Level Order Traversal"", ""N-ary Tree Postorder Traversal""]","[('c++', 36), ('iterative', 36), ('java', 29), ('python', 27), ('recursion', 27), ('javascript', 23), ('cpp', 21), ('python 3', 19), ('recursive', 19), ('dfs', 18), ('c#', 12), ('stack', 12), ('cpp solution', 8), ('python3', 8), ('golang', 7), ('stacks', 5), ('easy', 4), ('easytounderstand', 4), ('go', 4), ('preorder', 4), ('c', 3), ('easy-understanding', 3), ('iteratively', 3), ('java-solution', 3), ('preorder traversal', 3), ('preorder-iterative', 3), ('preorder-recursive', 3), ('recursive solution', 3), ('simple', 3), ('tree traversal', 3), ('vector', 3), ('algorithms', 2), ('an7one', 2), ('bfs', 2), ('c++11', 2), ('comments', 2), ('dfs-iterative', 2), ('dfs-recursive', 2), ('iterative way', 2), ('iterative-dfs', 2), ('iteratve', 2), ('kotlin', 2), ('list', 2), ('n-ary tree', 2), ('n-ary-tree', 2), ('recursive easy', 2), ('scala', 2), ('tree', 2), ('#codegirl', 1), ('0ms runtime', 1), ('100 speed', 1), ('4 lines', 1), ('awesome samriddhi', 1), ('beats 100', 1), ('beauty', 1), ('binary tree', 1), ('binary-tree', 1), ('bottoms-up', 1), ('c programming', 1), ('c++ code', 1), ('c++ iterative sol', 1), ('c++ recursive solution', 1), ('c++ solution', 1), ('clean code', 1), ('commented', 1), ('csharp', 1), ('depth first search', 1), ('depth-first-search', 1), ('deque', 1), ('dfs recursive', 1), ('dfs-topdown', 1), ('easy to understand', 1), ('easy-to-understand', 1), ('easy-understand', 1), ('easy-undestand', 1), ('explaination', 1), ('explained', 1), ('fast', 1), ('fast-solution', 1), ('faster', 1), ('functional-programming', 1), ('generator', 1), ('go-solution', 1), ('golang-solution', 1), ('iterative solution', 1), ('iterator', 1), ('iteratve-recursive', 1), ('itereative', 1), ('java ac solution', 1), ('java simple', 1), ('javasccript', 1), ('javascipt', 1), ('javascript iterative', 1), ('javascript recursive', 1), ('js', 1), ('js javascript', 1), ('js solution', 1), ('kotlin-solution', 1), ('linear-space', 1), ('linear-time', 1), ('linkedlist', 1), ('list comprehension', 1), ('meiyaowen', 1), ('mrmagician', 1), ('n-ary', 1), ('nary-tree', 1), ('narytreepreordertraversal', 1), ('non-recursion', 1), ('non-recursive', 1), ('one-liner', 1), ('optimal', 1), ('php', 1), ('php solution', 1), ('pre-order', 1), ('preorder-recursion', 1), ('preorder-traversal', 1), ('python2', 1), ('recurision', 1), ('recursive dfs', 1), ('recursively', 1), ('recusion', 1), ('reverse', 1), ('ritik', 1), ('ruby', 1), ('solution', 1), ('swift', 1), ('tail-call', 1), ('trees', 1), ('typescript', 1), ('upvote', 1)]"
559,Maximum Depth of N-ary Tree,https://leetcode.com/problems/maximum-depth-of-n-ary-tree,"Given a n-ary tree, find its maximum depth.

The maximum depth is the number of nodes along the longest path from the root node down to the farthest leaf node.

Nary-Tree input serialization is represented in their level order traversal, each group of children is separated by the null value (See examples).","['tree', 'depth-first-search', 'breadth-first-search']",Easy,1332,60,227865,158731,"[""Maximum Depth of Binary Tree""]","[('c++', 43), ('dfs', 40), ('java', 35), ('recursion', 35), ('bfs', 34), ('python', 32), ('python 3', 28), ('javascript', 20), ('cpp', 18), ('recursive', 18), ('java-solution', 13), ('iterative', 12), ('c#', 9), ('python3', 9), ('queue', 8), ('easy-understanding', 6), ('cpp solution', 5), ('depth-first-search', 5), ('easy-to-understand', 5), ('swift', 5), ('dfs recursive', 4), ('dfs simple solution', 4), ('recursive solution', 4), ('simple solution', 4), ('depth first search', 3), ('easy to understand', 3), ('javascript recursive', 3), ('simple', 3), ('0ms', 2), ('breadth first search', 2), ('breadth-first-search', 2), ('c++ code', 2), ('cpp easy', 2), ('depth', 2), ('dfs-bfs', 2), ('dfs-iterative', 2), ('easy', 2), ('es6', 2), ('explained', 2), ('faster than 100.00', 2), ('golang', 2), ('javascript solution', 2), ('n-ary-tree', 2), ('python deque', 2), ('recursive-descent', 2), ('recursive-dfs', 2), ('recusion', 2), ('ruby', 2), ('short', 2), ('solution', 2), ('tree', 2), ('trees', 2), ('upvote', 2), ('1 line', 1), ('1-liner', 1), ('100 faster', 1), ('100 memory', 1), ('basic', 1), ('beginner friendly', 1), ('bfs simple solution', 1), ('bfs vs dfs', 1), ('bfs-dfs', 1), ('bfs+dfs', 1), ('binary tree', 1), ('binary-tree', 1), ('bottom up', 1), ('c++ recursive solution', 1), ('c++ solution', 1), ('clean code', 1), ('csharp', 1), ('depth-first search', 1), ('dfs simple', 1), ('dfs solution', 1), ('dfs-topdown', 1), ('doubts', 1), ('easy understanding', 1), ('easy-understand', 1), ('easy-undestand', 1), ('explanation of logic', 1), ('fast-solution', 1), ('faster', 1), ('faster then 95', 1), ('functional-programming', 1), ('generator expressions', 1), ('generator-expression', 1), ('go-solution', 1), ('golang-solution', 1), ('graph', 1), ('implementation', 1), ('intuitive', 1), ('intutive', 1), ('iterative solution', 1), ('iteratve', 1), ('javascrip', 1), ('kotlin', 1), ('level order traversal', 1), ('linear', 1), ('linear-space', 1), ('linear-time', 1), ('linq', 1), ('max', 1), ('maxdepthnarytree', 1), ('mrmagician', 1), ('n-ary tree', 1), ('n-tree', 1), ('nary-tree', 1), ('nodejs', 1), ('one line', 1), ('one-liner', 1), ('optimal', 1), ('php', 1), ('php solution', 1), ('preorder-traversal', 1), ('python2', 1), ('queue-approach', 1), ('readable', 1), ('recursive easy', 1), ('recursive lines clean', 1), ('self explanatory', 1), ('solution-c++', 1), ('solution-sharing-cpp', 1), ('stack', 1), ('top down', 1), ('top-down', 1), ('traverse', 1), ('tree-traversal', 1), ('ultra easy', 1), ('vector', 1)]"
558,Logical OR of Two Binary Grids Represented as Quad-Trees,https://leetcode.com/problems/logical-or-of-two-binary-grids-represented-as-quad-trees,"A Binary Matrix is a matrix in which all the elements are either 0 or 1.

Given quadTree1 and quadTree2. quadTree1 represents a n * n binary matrix and quadTree2 represents another n * n binary matrix. 

Return a Quad-Tree representing the n * n binary matrix which is the result of logical bitwise OR of the two binary matrixes represented by quadTree1 and quadTree2.

Notice that you can assign the value of a node to True or False when isLeaf is False, and both are accepted in the answer.

A Quad-Tree is a tree data structure in which each internal node has exactly four children. Besides, each node has two attributes:


	val: True if the node represents a grid of 1's or False if the node represents a grid of 0's. 
	isLeaf: True if the node is leaf node on the tree or False if the node has the four children.



class Node {
    public boolean val;
    public boolean isLeaf;
    public Node topLeft;
    public Node topRight;
    public Node bottomLeft;
    public Node bottomRight;
}

We can construct a Quad-Tree from a two-dimensional area using the following steps:


	If the current grid has the same value (i.e all 1's or all 0's) set isLeaf True and set val to the value of the grid and set the four children to Null and stop.
	If the current grid has different values, set isLeaf to False and set val to any value and divide the current grid into four sub-grids as shown in the photo.
	Recurse for each of the children with the proper sub-grid.


If you want to know more about the Quad-Tree, you can refer to the wiki.

Quad-Tree format:

The input/output represents the serialized format of a Quad-Tree using level order traversal, where null signifies a path terminator where no node exists below.

It is very similar to the serialization of the binary tree. The only difference is that the node is represented as a list [isLeaf, val].

If the value of isLeaf or val is True we represent it as 1 in the list [isLeaf, val] and if the value of isLeaf or val is False we represent it as 0.",[],Medium,112,369,21164,9682,[],"[('c#', 1), ('python3', 1), ('tag', 1)]"
427,Construct Quad Tree,https://leetcode.com/problems/construct-quad-tree,"Given a n * n matrix grid of 0's and 1's only. We want to represent the grid with a Quad-Tree.

Return the root of the Quad-Tree representing the grid.

Notice that you can assign the value of a node to True or False when isLeaf is False, and both are accepted in the answer.

A Quad-Tree is a tree data structure in which each internal node has exactly four children. Besides, each node has two attributes:


	val: True if the node represents a grid of 1's or False if the node represents a grid of 0's. 
	isLeaf: True if the node is leaf node on the tree or False if the node has the four children.



class Node {
    public boolean val;
    public boolean isLeaf;
    public Node topLeft;
    public Node topRight;
    public Node bottomLeft;
    public Node bottomRight;
}

We can construct a Quad-Tree from a two-dimensional area using the following steps:


	If the current grid has the same value (i.e all 1's or all 0's) set isLeaf True and set val to the value of the grid and set the four children to Null and stop.
	If the current grid has different values, set isLeaf to False and set val to any value and divide the current grid into four sub-grids as shown in the photo.
	Recurse for each of the children with the proper sub-grid.


If you want to know more about the Quad-Tree, you can refer to the wiki.

Quad-Tree format:

The output represents the serialized format of a Quad-Tree using level order traversal, where null signifies a path terminator where no node exists below.

It is very similar to the serialization of the binary tree. The only difference is that the node is represented as a list [isLeaf, val].

If the value of isLeaf or val is True we represent it as 1 in the list [isLeaf, val] and if the value of isLeaf or val is False we represent it as 0.",[],Medium,322,490,44772,28145,[],"[('python', 6), ('java', 5), ('recursion', 5), ('c++', 4), ('dfs', 4), ('javascript', 4), ('python 3', 3), ('python3', 3), ('c#', 2), ('fastest', 2), ('flyweight pattern', 2), ('recursive', 2), ('recusion', 2), ('swift', 2), ('comments', 1), ('cpp', 1), ('divide and conquer', 1), ('easy-undestand', 1), ('explained', 1), ('explanation', 1), ('golang', 1), ('javascript solution', 1), ('prefix-sum', 1), ('python2', 1), ('recursive-dfs', 1), ('ruby', 1), ('simple', 1), ('stl', 1), ('swift5', 1)]"
765,Couples Holding Hands,https://leetcode.com/problems/couples-holding-hands,"N couples sit in 2N seats arranged in a row and want to hold hands.  We want to know the minimum number of swaps so that every couple is sitting side by side.  A swap consists of choosing any two people, then they stand up and switch seats. 

The people and seats are represented by an integer from 0 to 2N-1, the couples are numbered in order, the first couple being (0, 1), the second couple being (2, 3), and so on with the last couple being (2N-2, 2N-1).

The couples' initial seating is given by row[i] being the value of the person who is initially sitting in the i-th seat.","['greedy', 'union-find', 'graph']",Hard,1055,68,60353,33568,"[""First Missing Positive"", ""Missing Number"", ""K-Similar Strings""]","[('java', 12), ('c++', 9), ('greedy', 9), ('union-find', 7), ('union find', 6), ('greedy approach', 5), ('cpp solution', 4), ('java-solution', 4), ('python', 4), ('c#', 3), ('cpp', 3), ('javascript', 3), ('#javascript', 2), ('c', 2), ('map', 2), ('0 ms', 1), ('100 faster runtime', 1), ('beats 100', 1), ('bit manipulation', 1), ('brute force', 1), ('c code', 1), ('clean code', 1), ('clear explanation', 1), ('connected components', 1), ('couple', 1), ('couplesholdinghands', 1), ('cpp easy', 1), ('cycle pemutation', 1), ('depth first search', 1), ('description', 1), ('disjoint-set', 1), ('doubts', 1), ('dsu', 1), ('easy', 1), ('easy-to-understand', 1), ('easy-understanding', 1), ('easy-undestand', 1), ('explanation-need', 1), ('fastest c++ solution', 1), ('for loop', 1), ('golang', 1), ('google', 1), ('graph', 1), ('greedy algorithm', 1), ('hands', 1), ('hard', 1), ('hash table', 1), ('hashmap', 1), ('holding', 1), ('itereative', 1), ('javascript solution', 1), ('linear time', 1), ('missing', 1), ('number', 1), ('python 3', 1), ('python3', 1), ('readable code', 1), ('shortest-solution', 1), ('swapping', 1), ('unionfind', 1), ('works-on-run-code', 1)]"
764,Largest Plus Sign,https://leetcode.com/problems/largest-plus-sign,"In a 2D grid from (0, 0) to (N-1, N-1), every cell contains a 1, except those cells in the given list mines which are 0.  What is the largest axis-aligned plus sign of 1s contained in the grid?  Return the order of the plus sign.  If there is none, return 0.

An ""axis-aligned plus sign of 1s of order k"" has some center grid[x][y] = 1 along with 4 arms of length k-1 going up, down, left, and right, and made of 1s.  This is demonstrated in the diagrams below.  Note that there could be 0s or 1s beyond the arms of the plus sign, only the relevant area of the plus sign is checked for 1s.",['dynamic-programming'],Medium,579,118,54542,25498,"[""Maximal Square""]","[('c++', 6), ('dp', 6), ('dynamic programming', 5), ('cpp', 4), ('java', 3), ('python3', 3), ('2d-array', 2), ('java-solution', 2), ('javascript', 2), ('python', 2), ('python 3', 2), ('100 memory', 1), ('bomb enemy', 1), ('bottom up', 1), ('dynamic programmin', 1), ('easy', 1), ('explaination', 1), ('explanation', 1), ('explanations', 1), ('go', 1), ('golang', 1), ('iterative approch', 1), ('runtime analysis', 1), ('solution-sharing-cpp', 1), ('space', 1), ('space analysis', 1)]"
763,Partition Labels,https://leetcode.com/problems/partition-labels,"A string S of lowercase English letters is given. We want to partition this string into as many parts as possible so that each letter appears in at most one part, and return a list of integers representing the size of these parts.","['two-pointers', 'greedy']",Medium,4493,191,323183,252543,"[""Merge Intervals""]","[('c++', 66), ('java', 53), ('python 3', 43), ('greedy', 35), ('python', 35), ('cpp', 32), ('javascript', 30), ('python3', 21), ('explained', 16), ('easy', 13), ('greedy approach', 13), ('java-solution', 13), ('cpp solution', 11), ('easy-understanding', 11), ('hashmap', 11), ('c#', 10), ('easy-to-understand', 10), ('golang', 9), ('two-pointers', 9), ('map', 8), ('simple', 6), ('string', 6), ('swift', 6), ('two pointers', 6), ('linear time', 5), ('merge intervals', 5), ('sets', 5), ('comments-added', 4), ('greedy algorithm', 4), ('optimal', 4), ('set', 4), ('simple solution', 4), ('c++ code', 3), ('easytounderstand', 3), ('explained solution', 3), ('go', 3), ('golang-solution', 3), ('interval-merging', 3), ('javascript solution', 3), ('partition', 3), ('scala', 3), ('slidingwindow', 3), ('c', 2), ('commented', 2), ('constant space', 2), ('cpp easy', 2), ('dictionaries', 2), ('dictionary', 2), ('dictonary', 2), ('explanation', 2), ('fast and simple', 2), ('go-solution', 2), ('hash table', 2), ('haskell', 2), ('java ac solution', 2), ('java solution', 2), ('merge-intervals', 2), ('parition label', 2), ('php', 2), ('recursion', 2), ('ruby', 2), ('sliding-window', 2), ('solution', 2), ('sorting', 2), ('stack', 2), ('string manipulation', 2), ('two-pointer', 2), ('typescript', 2), ('video-explanation', 2), ('#java', 1), ('#javascript', 1), ('#python 3', 1), ('#simple', 1), ('1 ms', 1), ('100 speed', 1), ('100efficient', 1), ('2 pointer approach', 1), ('2ms', 1), ('2pointer', 1), ('99 faster', 1), ('adobe', 1), ('amazon', 1), ('amazon interview', 1), ('amazon sde', 1), ('asahiocean', 1), ('basic', 1), ('beats 100 percent', 1), ('beginners', 1), ('bloomberg', 1), ('c programming', 1), ('c# string', 1), ('c#-solution', 1), ('c++ solution', 1), ('c++11', 1), ('charset', 1), ('clean code', 1), ('commentary', 1), ('comments', 1), ('concise', 1), ('counter', 1), ('dict', 1), ('dictionary comprehension', 1), ('do while', 1), ('easy understanding', 1), ('easy-coding', 1), ('easy-solution', 1), ('easy-to-read', 1), ('easy-understand', 1), ('easyunderstand', 1), ('efficient solution', 1), ('expalanation', 1), ('explanation of logic', 1), ('explanations', 1), ('explanatory comments', 1), ('facebook', 1), ('fast', 1), ('fasterthan100', 1), ('fastest c++ solution', 1), ('good variable names', 1), ('hash', 1), ('hash map', 1), ('hashing', 1), ('hashset', 1), ('indexof method', 1), ('indices', 1), ('intuition', 1), ('intuitive', 1), ('js', 1), ('kotlin', 1), ('less space than 100.00', 1), ('linq', 1), ('map in c++', 1), ('map-stl', 1), ('maps', 1), ('mergeintervals', 1), ('n time', 1), ('non-overlap', 1), ('one pass', 1), ('one pass solution', 1), ('one-pass', 1), ('ordereddict', 1), ('overlapping subproblems', 1), ('partition labels', 1), ('picture explanation', 1), ('python easy', 1), ('python2', 1), ('python38', 1), ('ranges', 1), ('readable', 1), ('recursive', 1), ('rust', 1), ('simple and elegant', 1), ('simplesolution', 1), ('simplest', 1), ('single pass', 1), ('sliding window', 1), ('solution-sharing-cpp', 1), ('space', 1), ('stl', 1), ('string parsing', 1), ('string-operation', 1), ('structured code', 1), ('substring', 1), ('substrings', 1), ('swift5', 1), ('tailrec', 1), ('three pointer', 1), ('time', 1), ('two', 1), ('two passes', 1), ('twopointer', 1), ('uber', 1), ('unorderedset', 1), ('video', 1), ('video explanation', 1), ('video solution', 1), ('visualization', 1), ('yield', 1)]"
762,Prime Number of Set Bits in Binary Representation,https://leetcode.com/problems/prime-number-of-set-bits-in-binary-representation,"Given two integers L and R, find the count of numbers in the range [L, R] (inclusive) having a prime number of set bits in their binary representation.

(Recall that the number of set bits an integer has is the number of 1s present when written in binary.  For example, 21 written in binary is 10101 which has 3 set bits.  Also, 1 is not a prime.)",['bit-manipulation'],Easy,321,404,84934,54922,"[""Number of 1 Bits""]","[('c++', 21), ('python', 12), ('cpp', 11), ('python 3', 8), ('bit manipulation', 5), ('python3', 5), ('java', 4), ('bit-manipulation', 3), ('c', 3), ('c#', 3), ('easy-to-understand', 3), ('easy-understanding', 3), ('javascript', 3), ('simple', 3), ('cpp solution', 2), ('look-up-table', 2), ('#codegirl', 1), ('#python', 1), ('2 lines', 1), ('2lines', 1), ('bit', 1), ('bit-operation', 1), ('bit-shift', 1), ('bitset', 1), ('bitwise', 1), ('bucket sort', 1), ('cache', 1), ('clean', 1), ('comment', 1), ('commented', 1), ('comments', 1), ('cpp easy', 1), ('cpp-solution', 1), ('dp', 1), ('easy', 1), ('easy to understand', 1), ('easy understand', 1), ('easytounderstand', 1), ('explanation', 1), ('function', 1), ('go', 1), ('golang', 1), ('golang-solution', 1), ('hash', 1), ('hashset', 1), ('implementation', 1), ('java-solution', 1), ('kotlin', 1), ('one line', 1), ('popcount', 1), ('quickly', 1), ('regexp', 1), ('ruby', 1), ('simpe', 1), ('simple-solution', 1), ('simplest', 1), ('solution-sharing-cpp', 1), ('swift', 1), ('two-lines', 1)]"
430,Flatten a Multilevel Doubly Linked List,https://leetcode.com/problems/flatten-a-multilevel-doubly-linked-list,"You are given a doubly linked list which in addition to the next and previous pointers, it could have a child pointer, which may or may not point to a separate doubly linked list. These child lists may have one or more children of their own, and so on, to produce a multilevel data structure, as shown in the example below.

Flatten the list so that all the nodes appear in a single-level, doubly linked list. You are given the head of the first level of the list.","['linked-list', 'depth-first-search']",Medium,2233,188,277157,158133,"[""Flatten Binary Tree to Linked List"", ""Correct a Binary Tree""]","[('java', 64), ('recursion', 63), ('c++', 43), ('dfs', 39), ('python', 39), ('javascript', 30), ('python 3', 26), ('cpp', 23), ('stacks', 22), ('iterative', 20), ('java-solution', 16), ('stack', 16), ('linked-list', 10), ('c++ code', 9), ('easy-understanding', 9), ('recursive', 9), ('python3', 8), ('cpp solution', 7), ('double-linked-list', 7), ('doubly linked list', 7), ('easy-undestand', 7), ('linkedlists', 7), ('cpp easy', 6), ('depth first search', 6), ('dfs simple solution', 6), ('simple', 6), ('stack-based', 6), ('c#', 5), ('iteration', 5), ('java ac solution', 5), ('linked list', 5), ('simple solution', 5), ('0ms', 4), ('beats 100', 4), ('easy', 4), ('recursive easy', 4), ('100 speed', 3), ('clean', 3), ('doubly-linked-list', 3), ('easy to understand', 3), ('easy-to-understand', 3), ('easysolution', 3), ('explained', 3), ('flatten', 3), ('intuitive', 3), ('js', 3), ('linear time', 3), ('linkedlist', 3), ('recusion', 3), ('#recursion', 2), ('array', 2), ('c++ easy to understand', 2), ('c++ iterative sol', 2), ('c++ recursion', 2), ('commented', 2), ('comments', 2), ('constant memory', 2), ('csharp', 2), ('dfs recursive', 2), ('dfs solution', 2), ('dfs-iterative', 2), ('dfs-topdown', 2), ('explaination', 2), ('explanation', 2), ('explanation of logic', 2), ('golang', 2), ('iterative-dfs', 2), ('iteratve', 2), ('python2', 2), ('queue', 2), ('recurision', 2), ('recursive-dfs', 2), ('recursively', 2), ('short', 2), ('swift', 2), ('two-pointers', 2), ('#java', 1), ('#list', 1), ('#memoization', 1), ('#python', 1), ('100 faster', 1), ('4 ms', 1), ('96 meory', 1), ('algorithms', 1), ('arraylist', 1), ('backtracing', 1), ('backtracking', 1), ('beat 100', 1), ('beginner friendly', 1), ('best', 1), ('bfs', 1), ('c', 1), ('c++ solution', 1), ('c++11', 1), ('clean clode', 1), ('code golf', 1), ('comments-added', 1), ('commetend', 1), ('data structures', 1), ('deep-first-search', 1), ('depth-first search', 1), ('deque', 1), ('dfs queue', 1), ('dfs traversal', 1), ('dfs-non-recursive', 1), ('diagram', 1), ('doubly linkedlist', 1), ('dry-run', 1), ('easy solution', 1), ('easy-solution', 1), ('easy-understand', 1), ('easytounderstand', 1), ('error', 1), ('es6', 1), ('facebook interview', 1), ('fast and simple', 1), ('fast solution', 1), ('fastest', 1), ('golang-solution', 1), ('help needed', 1), ('images', 1), ('intutive', 1), ('iterative way', 1), ('iteratively', 1), ('iteratve-recursive', 1), ('java simple', 1), ('javascrip', 1), ('javascript recursive', 1), ('javascript solution', 1), ('july challenge', 1), ('k1ch', 1), ('keep it simple', 1), ('kotlin', 1), ('kotlinvim', 1), ('link list', 1), ('linked lists', 1), ('linked-lists', 1), ('mediun', 1), ('morris traversal', 1), ('need-help', 1), ('needhelp', 1), ('no space', 1), ('one-loop', 1), ('optimization', 1), ('optimized', 1), ('pointer', 1), ('pointers', 1), ('preorder', 1), ('preorder-traversal', 1), ('pyhton3', 1), ('python3.8', 1), ('question', 1), ('readable code', 1), ('recursive solution', 1), ('recusrive', 1), ('rescursion', 1), ('ruby', 1), ('scala', 1), ('sentinel', 1), ('solution with picture', 1), ('solution-sharing-cpp', 1), ('space', 1), ('space o1', 1), ('stack python', 1), ('stackoverflow', 1), ('structure', 1), ('three-pointers', 1), ('time', 1), ('tree traversal', 1), ('understand', 1), ('understandable', 1), ('vectors', 1), ('video', 1), ('video solution', 1), ('video-explanation', 1), ('visualization', 1), ('whiteboard', 1)]"
429,N-ary Tree Level Order Traversal,https://leetcode.com/problems/n-ary-tree-level-order-traversal,"Given an n-ary tree, return the level order traversal of its nodes' values.

Nary-Tree input serialization is represented in their level order traversal, each group of children is separated by the null value (See examples).","['tree', 'breadth-first-search']",Medium,952,63,154345,103458,"[""Binary Tree Level Order Traversal"", ""N-ary Tree Preorder Traversal"", ""N-ary Tree Postorder Traversal""]","[('bfs', 67), ('c++', 37), ('python', 29), ('cpp', 25), ('queue', 24), ('python 3', 21), ('java', 20), ('javascript', 18), ('iterative', 12), ('python3', 9), ('c#', 8), ('java-solution', 8), ('level-order-traversal', 8), ('breadth first search', 7), ('dfs', 6), ('easy-understanding', 6), ('easy-undestand', 6), ('bfs simple solution', 5), ('c++ code', 5), ('cpp easy', 4), ('cpp solution', 4), ('easy-understand', 4), ('golang', 4), ('recursion', 4), ('recursive', 4), ('easy-to-understand', 3), ('ruby', 3), ('simple', 3), ('bfs-cpp', 2), ('breadth-first-search', 2), ('c++ solution', 2), ('c++14', 2), ('complexity', 2), ('deque', 2), ('easy', 2), ('easy to understand', 2), ('easytounderstand', 2), ('n-ary-tree', 2), ('php', 2), ('php solution', 2), ('queue-approach', 2), ('short', 2), ('tree traversal', 2), ('awesome samriddhi', 1), ('beats 100', 1), ('beats 99', 1), ('beginner friendly', 1), ('beginners level', 1), ('bfs ruby', 1), ('bfs vs dfs', 1), ('bfs+dfs', 1), ('bsf', 1), ('c', 1), ('clear-understanding', 1), ('commented', 1), ('concise', 1), ('cpp doubt', 1), ('csharp', 1), ('depth first search', 1), ('depth-first-search', 1), ('dfs simple solution', 1), ('dictionary', 1), ('easy sloution', 1), ('easy undestanding', 1), ('es6', 1), ('explanation', 1), ('extend', 1), ('facebook-india', 1), ('fast', 1), ('functional-programming', 1), ('global-variables', 1), ('go', 1), ('golang-solution', 1), ('idiomatic', 1), ('interview', 1), ('intuitive', 1), ('iterate', 1), ('iteration', 1), ('iteration vs recursion', 1), ('iterative vs recursive', 1), ('iterative way', 1), ('iterative-bfs', 1), ('iteratively', 1), ('java ac solution', 1), ('java-8', 1), ('javascript solution', 1), ('kotlin', 1), ('linear time', 1), ('linear-space', 1), ('linear-time', 1), ('meiyaowen', 1), ('n-ary tree', 1), ('narytreelevelorder', 1), ('pre-order', 1), ('python deque', 1), ('python2', 1), ('question', 1), ('queue and linkedlist', 1), ('rajat', 1), ('readable', 1), ('recursion vs iteration', 1), ('recursive easy', 1), ('recursive vs iterative', 1), ('recursively', 1), ('recusion', 1), ('ritik', 1), ('scala', 1), ('self explanatory', 1), ('solution', 1), ('stream', 1), ('swift', 1), ('tail-recursion', 1), ('tail-recursive', 1), ('tailrec', 1), ('template', 1), ('tree problem', 1), ('tree-traversal', 1), ('typescript', 1), ('ultra simple', 1), ('vector', 1)]"
761,Special Binary String,https://leetcode.com/problems/special-binary-string,"Special binary strings are binary strings with the following two properties:

The number of 0's is equal to the number of 1's.
Every prefix of the binary string has at least as many 1's as 0's.

Given a special string S, a move consists of choosing two consecutive, non-empty, special substrings of S, and swapping them.  (Two strings are consecutive if the last character of the first string is exactly one index before the first character of the second string.)

At the end of any number of moves, what is the lexicographically largest resulting string possible?","['string', 'recursion']",Hard,407,138,19021,11184,"[""Valid Parenthesis String""]","[('3ms', 1), ('c++ code', 1), ('java', 1), ('javascript', 1), ('solution-sharing-cpp', 1), ('sort', 1), ('stacks', 1), ('string-operation', 1), ('substring', 1)]"
757,Set Intersection Size At Least Two,https://leetcode.com/problems/set-intersection-size-at-least-two,"An integer interval [a, b] (for integers a < b) is a set of all consecutive integers from a to b, including a and b.

Find the minimum size of a set S such that for every integer interval A in intervals, the intersection of S with A has a size of at least two.",['greedy'],Hard,362,46,29604,12626,[],"[('greedy', 2), ('javascript', 2), ('binary-search', 1), ('greedy approach', 1), ('help me', 1), ('solution-sharing-cpp', 1), ('suggestion', 1), ('test-cases', 1)]"
756,Pyramid Transition Matrix,https://leetcode.com/problems/pyramid-transition-matrix,"We are stacking blocks to form a pyramid. Each block has a color which is a one-letter string.

We are allowed to place any color block C on top of two adjacent blocks of colors A and B, if and only if ABC is an allowed triple.

We start with a bottom row of bottom, represented as a single string. We also start with a list of allowed triples allowed. Each allowed triple is represented as a string of length 3.

Return true if we can build the pyramid all the way to the top, otherwise false.","['bit-manipulation', 'depth-first-search']",Medium,364,380,43156,24041,[],"[('backtracking', 7), ('c++', 5), ('dfs', 5), ('java', 5), ('c#', 3), ('recursion', 3), ('bfs', 2), ('cpp', 2), ('python3', 2), ('backtracing', 1), ('c++ recursive solution', 1), ('clean code', 1), ('cpp solution', 1), ('cpp-solution', 1), ('csharp', 1), ('depth first search', 1), ('dynamic programming', 1), ('easy', 1), ('easy-understanding', 1), ('fastest', 1), ('kotllin', 1), ('ruby', 1), ('set python pyramid', 1), ('solution-sharing-cpp', 1), ('tries', 1)]"
754,Reach a Number,https://leetcode.com/problems/reach-a-number,"You are standing at position 0 on an infinite number line.  There is a goal at position target.

On each move, you can either go left or right.  During the n-th move (starting from 1), you take n steps.

Return the minimum number of steps required to reach the destination.",['math'],Medium,716,541,76570,31059,[],"[('math', 12), ('c++', 8), ('cpp', 6), ('explained', 5), ('java', 5), ('python', 5), ('golang', 4), ('java-solution', 4), ('javascript', 4), ('easy', 3), ('python 3', 3), ('python3', 3), ('binary search', 2), ('cpp easy', 2), ('golang-solution', 2), ('swift', 2), ('#recursion', 1), ('#target number', 1), ('100 faster', 1), ('accumulate', 1), ('binary-search', 1), ('bitwise', 1), ('c', 1), ('c++ solution', 1), ('chinese', 1), ('comments', 1), ('confuse-description', 1), ('constant time', 1), ('cpp solution', 1), ('dummy', 1), ('easy-understanding', 1), ('easytounderstand', 1), ('explained solution', 1), ('explanation', 1), ('explanation of logic', 1), ('go', 1), ('go-solution', 1), ('greedy approach', 1), ('interview help', 1), ('kotlin', 1), ('logic-solution', 1), ('math solution', 1), ('mathematic', 1), ('maths', 1), ('noloop', 1), ('o1', 1), ('phonepe', 1), ('quadratic equation', 1), ('ruby', 1), ('set-union', 1), ('short solution', 1), ('simple', 1), ('simple clear c++ solution', 1), ('solution-sharing-cpp', 1), ('suggestion', 1), ('swift5', 1), ('swift5.3', 1), ('swiftsolution', 1), ('thinking process', 1), ('understandable', 1), ('visualization', 1)]"
753,Cracking the Safe,https://leetcode.com/problems/cracking-the-safe,"There is a box protected by a password. The password is a sequence of n digits where each digit can be one of the first k digits 0, 1, ..., k-1.

While entering a password, the last n digits entered will automatically be matched against the correct password.

For example, assuming the correct password is ""345"", if you type ""012345"", the box will open because the correct password matches the suffix of the entered password.

Return any password of minimum length that is guaranteed to open the box at some point of entering it.","['math', 'depth-first-search']",Hard,559,820,68905,36291,[],"[('dfs', 5), ('comments', 2), ('explained', 2), ('golang', 2), ('javascript', 2), ('cpp', 1), ('debug', 1), ('hamiltonian path', 1), ('hashset', 1), ('java', 1), ('python', 1), ('questions', 1), ('readable', 1), ('solution-sharing-cpp', 1), ('time-limit-exceeded-java', 1)]"
752,Open the Lock,https://leetcode.com/problems/open-the-lock,"You have a lock in front of you with 4 circular wheels. Each wheel has 10 slots: '0', '1', '2', '3', '4', '5', '6', '7', '8', '9'. The wheels can rotate freely and wrap around: for example we can turn '9' to be '0', or '0' to be '9'. Each move consists of turning one wheel one slot.

The lock initially starts at '0000', a string representing the state of the 4 wheels.

You are given a list of deadends dead ends, meaning if the lock displays any of these codes, the wheels of the lock will stop turning and you will be unable to open it.

Given a target representing the value of the wheels that will unlock the lock, return the minimum total number of turns required to open the lock, or -1 if it is impossible.",['breadth-first-search'],Medium,1575,57,179053,94914,[],"[('bfs', 56), ('python', 17), ('c++', 15), ('java', 13), ('python 3', 9), ('breadth first search', 8), ('javascript', 7), ('cpp', 6), ('queue', 6), ('c#', 4), ('python3', 4), ('bidirectional bfs', 3), ('golang', 3), ('bfs python', 2), ('commented', 2), ('easy-to-understand', 2), ('easy-undestand', 2), ('explained solution', 2), ('graph', 2), ('java-solution', 2), ('priority queue', 2), ('readable', 2), ('2-end bfs', 1), ('a-star', 1), ('bfs simple solution', 1), ('bidirectional', 1), ('bit manipulation', 1), ('c', 1), ('c code', 1), ('c++ code', 1), ('c++ set', 1), ('clean', 1), ('cpp solution', 1), ('deque', 1), ('easy-understanding', 1), ('easytounderstand', 1), ('explained', 1), ('explanation with code', 1), ('fast', 1), ('fast and simple', 1), ('fastest', 1), ('for beginners', 1), ('golang-solution', 1), ('help needed', 1), ('javascript solution', 1), ('kotlinvim', 1), ('meet-in-the-middle', 1), ('memoization', 1), ('paint', 1), ('pictures', 1), ('python bfs', 1), ('python2', 1), ('queue-approach', 1), ('recursion', 1), ('set', 1), ('sets', 1), ('simple', 1), ('simple solution', 1), ('solution-sharing-cpp', 1), ('string to integer', 1), ('test-case-too-weak', 1), ('two-end-bfs', 1), ('typescript', 1), ('yield', 1)]"
749,Contain Virus,https://leetcode.com/problems/contain-virus,"A virus is spreading rapidly, and your task is to quarantine the infected area by installing walls.

The world is modeled as a 2-D array of cells, where 0 represents uninfected cells, and 1 represents cells contaminated with the virus.  A wall (and only one wall) can be installed between any two 4-directionally adjacent cells, on the shared boundary.

Every night, the virus spreads to all neighboring cells in all four directions unless blocked by a wall.
Resources are limited. Each day, you can install walls around only one region -- the affected area (continuous block of infected cells) that threatens the most uninfected cells the following night. There will never be a tie.

Can you save the day? If so, what is the number of walls required? If not, and the world becomes fully infected, return the number of walls used.",['depth-first-search'],Hard,140,312,13433,6516,[],"[('dfs', 4), ('bfs', 2), ('c#', 1), ('cpp', 1), ('java-solution', 1), ('javascript', 1), ('python 3', 1), ('solution-sharing-cpp', 1), ('straight-forward', 1), ('union-find', 1)]"
748,Shortest Completing Word,https://leetcode.com/problems/shortest-completing-word,"Given a string licensePlate and an array of strings words, find the shortest completing word in words.

A completing word is a word that contains all the letters in licensePlate. Ignore numbers and spaces in licensePlate, and treat letters as case insensitive. If a letter appears more than once in licensePlate, then it must appear in the word the same number of times or more.

For example, if licensePlate = ""aBc 12c"", then it contains letters 'a', 'b' (ignoring case), and 'c' twice. Possible completing words are ""abccdef"", ""caaacab"", and ""cbca"".

Return the shortest completing word in words. It is guaranteed an answer exists. If there are multiple shortest completing words, return the first one that occurs in words.",['hash-table'],Easy,235,704,69044,39845,[],"[('python', 11), ('c++', 10), ('javascript', 9), ('java', 7), ('python 3', 7), ('python3', 7), ('hashmap', 5), ('cpp', 3), ('dictionary', 3), ('golang', 3), ('beginner friendly', 2), ('easy', 2), ('easy-understanding', 2), ('ruby', 2), ('swift', 2), ('#easy-understanding', 1), ('#explanation', 1), ('#python', 1), ('#python 3', 1), ('#python3', 1), ('11 lines', 1), ('algorithms', 1), ('c', 1), ('c++ code', 1), ('character-hash-map', 1), ('commented', 1), ('comments', 1), ('cpp solution', 1), ('cpp-solution', 1), ('dictonary', 1), ('easy to understand', 1), ('easy-undestand', 1), ('explaination', 1), ('explained', 1), ('functional-programming', 1), ('go', 1), ('go-solution', 1), ('golang solution', 1), ('golang-solution', 1), ('hash table', 1), ('hashmap and sorting', 1), ('java-solution', 1), ('js', 1), ('js javascript', 1), ('kotlin', 1), ('mapping', 1), ('modular arithmetic', 1), ('prime numbers', 1), ('regular-expression', 1), ('solution', 1), ('solution-sharing-cpp', 1), ('sorting', 1), ('swift5', 1), ('vector', 1)]"
747,Largest Number At Least Twice of Others,https://leetcode.com/problems/largest-number-at-least-twice-of-others,"You are given an integer array nums where the largest integer is unique.

Determine whether the largest element in the array is at least twice as much as every other number in the array. If it is, return the index of the largest element, or return -1 otherwise.",['array'],Easy,444,676,265938,115145,[],"[('c++', 27), ('python', 22), ('cpp', 21), ('python 3', 21), ('javascript', 20), ('java', 16), ('easy-understanding', 9), ('python3', 8), ('java-solution', 7), ('golang', 5), ('one pass', 5), ('c', 3), ('clean code', 3), ('swift', 3), ('c++11', 2), ('cpp solution', 2), ('easy to understand', 2), ('easy understanding', 2), ('easy-to-understand', 2), ('easy-undestand', 2), ('fast-solution', 2), ('fastest', 2), ('go', 2), ('javascript solution', 2), ('js', 2), ('kotlin', 2), ('single pass', 2), ('two pass', 2), ('#javascript', 1), ('0ms', 1), ('1 scan', 1), ('100 fast', 1), ('7 lines', 1), ('algorithms', 1), ('array', 1), ('beginnerfriendly', 1), ('c code', 1), ('c#', 1), ('c#-solution', 1), ('c++ code', 1), ('c++ solution', 1), ('cpp easy', 1), ('cpp-solution', 1), ('easiest', 1), ('easily understood', 1), ('easy code', 1), ('easy-to-read', 1), ('easytounderstand', 1), ('es6', 1), ('explained', 1), ('explanatory comments', 1), ('faster than 100.00', 1), ('find', 1), ('go-solution', 1), ('golang-solution', 1), ('good variable names', 1), ('iteratively', 1), ('java solution', 1), ('linear', 1), ('list-comprehension', 1), ('loops', 1), ('maximum', 1), ('missing test case', 1), ('missing-test-case', 1), ('one iteration', 1), ('onepass', 1), ('ordered map', 1), ('priority queue', 1), ('python2', 1), ('recursively', 1), ('ruby', 1), ('rust', 1), ('self-explanatory', 1), ('simple', 1), ('simple java solution', 1), ('solution', 1), ('solution-sharing-cpp', 1), ('sorting', 1), ('two passes', 1), ('vector', 1)]"
746,Min Cost Climbing Stairs,https://leetcode.com/problems/min-cost-climbing-stairs,"You are given an integer array cost where cost[i] is the cost of ith step on a staircase. Once you pay the cost, you can either climb one or two steps.

You can either start from the step with index 0, or the step with index 1.

Return the minimum cost to reach the top of the floor.","['array', 'dynamic-programming']",Easy,3098,676,449644,230491,"[""Climbing Stairs""]","[('dynamic programming', 80), ('java', 51), ('dp', 50), ('c++', 38), ('java-solution', 35), ('cpp', 27), ('python', 25), ('python 3', 18), ('dynamic-programming', 17), ('javascript', 17), ('easy-understanding', 12), ('python3', 12), ('memoization', 9), ('bottom up', 8), ('recursion', 7), ('cpp solution', 6), ('easy', 6), ('dfs', 5), ('golang', 5), ('swift', 4), ('tabulation', 4), ('beginner friendly', 3), ('bottom-up', 3), ('easy understanding', 3), ('easy-to-understand', 3), ('easy-undestand', 3), ('easytounderstand', 3), ('explained', 3), ('golang-solution', 3), ('python3.8', 3), ('pythonpython3', 3), ('top down dp', 3), ('amazon', 2), ('bottom up dp', 2), ('bottom-up-algorithm', 2), ('cpp easy', 2), ('dp-techqique', 2), ('java ac solution', 2), ('javascript solution', 2), ('js', 2), ('kotlin', 2), ('linear time', 2), ('python2', 2), ('recursive', 2), ('recusion', 2), ('ruby', 2), ('simple', 2), ('staircase', 2), ('top-down', 2), ('1 ms', 1), ('1d-dp', 1), ('analysis', 1), ('basic', 1), ('beginner', 1), ('beginnerfriendly', 1), ('buttom-up', 1), ('c#', 1), ('c++11', 1), ('c++14', 1), ('clean code', 1), ('commented', 1), ('constant memory', 1), ('constant space', 1), ('constant-space', 1), ('cpp-solution', 1), ('dp made easy', 1), ('dp python', 1), ('dyanamic programming', 1), ('dynamic programing', 1), ('dynamic programmin', 1), ('easiest', 1), ('easy solution', 1), ('easy to follow', 1), ('easy-understand', 1), ('explained solution', 1), ('explanation of logic', 1), ('fast', 1), ('fast-solution', 1), ('faster then 95', 1), ('fastest', 1), ('fibonacci', 1), ('in-place', 1), ('intutive', 1), ('iterate', 1), ('iterative', 1), ('itereative', 1), ('izaac', 1), ('java simple', 1), ('javasccript', 1), ('javascipt', 1), ('javasript', 1), ('linear', 1), ('linear-time', 1), ('memo', 1), ('memoisation', 1), ('memorization', 1), ('memoziation', 1), ('optimal', 1), ('optimised', 1), ('optimised code', 1), ('optimized', 1), ('problem', 1), ('pythonic', 1), ('queue', 1), ('rajat', 1), ('recursive easy', 1), ('recursiveley', 1), ('rust', 1), ('self explanatory', 1), ('short', 1), ('short code', 1), ('short solution', 1), ('simpe', 1), ('simple clear c++ solution', 1), ('solution-sharing-cpp', 1), ('started', 1), ('test-cases', 1), ('testcase-missing', 1), ('top down', 1), ('typescript', 1), ('ultra simple', 1), ('understanding', 1), ('unorderedmap', 1), ('upvote', 1)]"
745,Prefix and Suffix Search,https://leetcode.com/problems/prefix-and-suffix-search,"Design a special dictionary which has some words and allows you to search the words in it by a prefix and a suffix.

Implement the WordFilter class:


	WordFilter(string[] words) Initializes the object with the words in the dictionary.
	f(string prefix, string suffix) Returns the index of the word in the dictionary which has the prefix prefix and the suffix suffix. If there is more than one valid index, return the largest of them. If there is no such word in the dictionary, return -1.",['trie'],Hard,465,235,63229,22505,"[""Design Add and Search Words Data Structure""]","[('trie', 15), ('c++', 5), ('cpp', 4), ('python', 3), ('c#', 2), ('java', 2), ('rust', 2), ('easy-understanding', 1), ('golang', 1), ('hashmap', 1), ('javascript', 1), ('map-stl', 1), ('memoization', 1), ('python 3', 1), ('solution-sharing-cpp', 1), ('trie-tree', 1), ('tries', 1), ('unordered map', 1)]"
744,Find Smallest Letter Greater Than Target,https://leetcode.com/problems/find-smallest-letter-greater-than-target,"Given a list of sorted characters letters containing only lowercase letters, and given a target letter target, find the smallest element in the list that is larger than the given target.

Letters also wrap around.  For example, if the target is target = 'z' and letters = ['a', 'b'], the answer is 'a'.",['binary-search'],Easy,634,718,226203,103216,[],"[('binary-search', 35), ('java', 25), ('python 3', 21), ('c++', 17), ('python', 14), ('cpp', 12), ('javascript', 11), ('binary search', 10), ('java-solution', 10), ('easy-understanding', 7), ('python3', 7), ('binarysearch', 5), ('easy-undestand', 4), ('easy', 3), ('golang', 3), ('ruby', 3), ('#cpp', 2), ('100 speed', 2), ('c', 2), ('c#', 2), ('comments', 2), ('cpp solution', 2), ('java solution', 2), ('kotlin', 2), ('upperbound', 2), ('#c++', 1), ('#easy-understand', 1), ('#stack', 1), ('0 space', 1), ('0ms', 1), ('100 faster runtime', 1), ('100 space', 1), ('99.63 faster', 1), ('99.73 faster', 1), ('algorithms', 1), ('array', 1), ('arraylist', 1), ('binary search c++', 1), ('c++11', 1), ('clean code', 1), ('comments-added', 1), ('cpp easy', 1), ('easiest solution', 1), ('easy to understand', 1), ('easy-to-understand', 1), ('easy-understand', 1), ('easytounderstand', 1), ('explaination', 1), ('explained', 1), ('explained solution', 1), ('fastest solution', 1), ('filter', 1), ('go-solution', 1), ('golang-solution', 1), ('javascript solution', 1), ('library', 1), ('linear time', 1), ('log n', 1), ('pseudocode', 1), ('python2', 1), ('python38', 1), ('readability', 1), ('readable', 1), ('rust', 1), ('sandeepkumar', 1), ('semantic', 1), ('simple', 1), ('sliding-window', 1), ('solution-sharing-cpp', 1), ('stl', 1), ('swift', 1), ('traverse', 1), ('two-pointers', 1), ('typescript', 1)]"
743,Network Delay Time,https://leetcode.com/problems/network-delay-time,"You are given a network of n nodes, labeled from 1 to n. You are also given times, a list of travel times as directed edges times[i] = (ui, vi, wi), where ui is the source node, vi is the target node, and wi is the time it takes for a signal to travel from source to target.

We will send a signal from a given node k. Return the time it takes for all the n nodes to receive the signal. If it is impossible for all the n nodes to receive the signal, return -1.","['heap', 'depth-first-search', 'breadth-first-search', 'graph']",Medium,2528,246,319410,146282,[],"[('c++', 35), ('dijkstra', 28), ('dijkstras algorithm', 27), ('java', 25), ('cpp', 20), ('bfs', 19), ('priority queue', 18), ('python', 16), ('javascript', 11), ('graph', 10), ('python 3', 8), ('queue', 8), ('dijkstras', 7), ('bellman ford', 6), ('c#', 6), ('java-solution', 6), ('bellman-ford', 5), ('dfs', 5), ('golang', 5), ('python3', 5), ('dijikstra', 4), ('djikstra', 4), ('heapq', 4), ('shortestpath', 4), ('clean code', 3), ('dijkastra', 3), ('dijksta', 3), ('dijsktra', 3), ('network delay time', 3), ('priority-queue', 3), ('adjacency matrix', 2), ('c sharp', 2), ('c++ code', 2), ('comments', 2), ('dfs simple solution', 2), ('dijkstra algorithm', 2), ('djikstra algorithm', 2), ('djiktras', 2), ('easy-undestand', 2), ('fast', 2), ('fibonacci heap', 2), ('heap', 2), ('min heap', 2), ('sets', 2), ('spfa', 2), ('weighted graph', 2), ('#c++', 1), ('#dijikstra', 1), ('adjacency list', 1), ('algorithms', 1), ('awesome samriddhi', 1), ('bfs python', 1), ('brute force', 1), ('c# solutions', 1), ('c++ easy to understand', 1), ('c++17', 1), ('clrs', 1), ('coding is fun', 1), ('commented', 1), ('cpp easy', 1), ('cpp solution', 1), ('data structures', 1), ('dijikstra algorithm', 1), ('dp', 1), ('easy', 1), ('easy to understand', 1), ('easy understand', 1), ('easy-understand', 1), ('easy-understanding', 1), ('explained solution', 1), ('floyd warshall', 1), ('floyd-algorithm', 1), ('flyod warshall', 1), ('ford', 1), ('go', 1), ('go-solution', 1), ('golang-solution', 1), ('heaps', 1), ('heaps algorithm', 1), ('intuitive', 1), ('jigneshpanchal', 1), ('log n', 1), ('minheap', 1), ('minimum path', 1), ('optimized', 1), ('picture explanation', 1), ('priorityqueue', 1), ('python2', 1), ('pythonpython3', 1), ('queue-approach', 1), ('raviinroorkee', 1), ('readable', 1), ('ritik', 1), ('ruby', 1), ('sandeepkumar', 1), ('set', 1), ('set of pair', 1), ('shorter', 1), ('solution-sharing-cpp', 1), ('solution-sharing-java', 1), ('sortedset', 1), ('sortest-path', 1), ('swift', 1), ('three solutions', 1), ('typescript', 1), ('video explanation', 1)]"
709,To Lower Case,https://leetcode.com/problems/to-lower-case,"Implement function ToLowerCase() that has a string parameter str, and returns the same string in lowercase.",['string'],Easy,678,1881,329911,264972,[],"[('c++', 60), ('python', 30), ('java', 29), ('cpp', 28), ('ascii', 24), ('javascript', 24), ('python 3', 22), ('c', 17), ('easy-understanding', 14), ('c#', 13), ('cpp solution', 13), ('array', 11), ('java-solution', 11), ('easy', 10), ('golang', 9), ('fastest', 8), ('python3', 8), ('list', 7), ('string', 7), ('0ms', 6), ('swift', 6), ('cpp easy', 5), ('explained', 5), ('go', 5), ('kotlin', 5), ('one-liner', 5), ('simple solution', 5), ('solution', 5), ('stringbuilder', 5), ('c++ code', 4), ('c++11', 4), ('fast and simple', 4), ('golang-solution', 4), ('javascript solution', 4), ('lowercase', 4), ('ruby', 4), ('simple', 4), ('stl', 4), ('100 faster cpp', 3), ('100 faster runtime', 3), ('100 speed', 3), ('easy-undestand', 3), ('fast-solution', 3), ('js', 3), ('one line', 3), ('simplest', 3), ('to lower case', 3), ('tolower', 3), ('transform', 3), ('0ms runtime', 2), ('100', 2), ('100 faster', 2), ('bit manipulation', 2), ('bit-manipulation', 2), ('c programming', 2), ('explanation', 2), ('fast', 2), ('go-solution', 2), ('hexadecimal', 2), ('ios', 2), ('iterative', 2), ('javascriptes6', 2), ('linear time', 2), ('naive-solution', 2), ('one line solution', 2), ('string-operation', 2), ('#python 3', 1), ('0ms-4ms', 1), ('1 line', 1), ('16ms', 1), ('4ms', 1), ('accepted', 1), ('array-sort', 1), ('basic', 1), ('begineer', 1), ('beginner friendly', 1), ('branchless', 1), ('brute force', 1), ('c code', 1), ('c# easy', 1), ('c++ solution', 1), ('c++17', 1), ('charat', 1), ('clean code', 1), ('clear', 1), ('commentary', 1), ('constant-space', 1), ('cpp-functional', 1), ('csharp', 1), ('dumb solution', 1), ('easiest', 1), ('easiest solution', 1), ('easy to read', 1), ('easy to understand', 1), ('easy-solition', 1), ('easy-understand', 1), ('easytounderstand', 1), ('ecmascript', 1), ('elegant', 1), ('es6', 1), ('explanations', 1), ('extension', 1), ('ez', 1), ('fast solutions', 1), ('faster than 100.00', 1), ('for-loop', 1), ('function', 1), ('generators', 1), ('github', 1), ('go lang', 1), ('hashmap', 1), ('in-built function', 1), ('inbuilt function', 1), ('iterative way', 1), ('iteratively', 1), ('iterator', 1), ('java ac solution', 1), ('kotlin-solution', 1), ('lambda', 1), ('less memory than 100', 1), ('library-notused', 1), ('linear', 1), ('linear space', 1), ('linear-time', 1), ('map', 1), ('mera hai', 1), ('mutability', 1), ('one liner', 1), ('optimal', 1), ('question', 1), ('rajat', 1), ('readable', 1), ('reduce', 1), ('regexp', 1), ('rust', 1), ('shortestpath', 1), ('simple clear c++ solution', 1), ('simple python accepted', 1), ('simpler', 1), ('single-line', 1), ('solution by python', 1), ('string manipulation', 1), ('string-function', 1), ('strings', 1), ('strings manipulation', 1), ('test-cases', 1), ('time-complexity', 1), ('to lower string', 1), ('to-lower-case', 1), ('tolowercase', 1), ('unicode', 1), ('unit-test', 1), ('whatever', 1), ('with-explanation', 1), ('without inbuild function', 1), ('without stl', 1), ('zea7ot', 1)]"
741,Cherry Pickup,https://leetcode.com/problems/cherry-pickup,"You are given an n x n grid representing a field of cherries, each cell is one of three possible integers.


	0 means the cell is empty, so you can pass through,
	1 means the cell contains a cherry that you can pick up and pass through, or
	-1 means the cell contains a thorn that blocks your way.


Return the maximum number of cherries you can collect by following the rules below:


	Starting at the position (0, 0) and reaching (n - 1, n - 1) by moving right or down through valid path cells (cells with value 0 or 1).
	After reaching (n - 1, n - 1), returning to (0, 0) by moving left or up through valid path cells.
	When passing through a path cell containing a cherry, you pick it up, and the cell becomes an empty cell 0.
	If there is no valid path between (0, 0) and (n - 1, n - 1), then no cherries can be collected.",['dynamic-programming'],Hard,1590,95,107187,37796,"[""Minimum Path Sum"", ""Dungeon Game""]","[('dp', 8), ('java', 5), ('c++', 3), ('dynamic programming', 3), ('memoization', 3), ('backtracking', 2), ('dynamic-programming', 2), ('javascript', 2), ('python 3', 2), ('wrong-test-cases', 2), ('bottom up', 1), ('brute-force', 1), ('c#', 1), ('clear-understanding', 1), ('depth first search', 1), ('dfs', 1), ('dfs solution', 1), ('dp java', 1), ('dp-techqique', 1), ('easy', 1), ('easy-to-understand', 1), ('explaination', 1), ('fastest', 1), ('go', 1), ('go-solution', 1), ('golang', 1), ('golang-solution', 1), ('help', 1), ('intuition', 1), ('memo', 1), ('memoisation', 1), ('memoziation', 1), ('needhelp', 1), ('python', 1), ('python3', 1), ('simple', 1), ('solution-sharing-cpp', 1), ('space-efficient', 1), ('space-optimized', 1), ('testcases', 1), ('top-down', 1), ('top-down dp', 1), ('wrong output', 1)]"
740,Delete and Earn,https://leetcode.com/problems/delete-and-earn,"Given an array nums of integers, you can perform operations on the array.

In each operation, you pick any nums[i] and delete it to earn nums[i] points. After, you must delete every element equal to nums[i] - 1 or nums[i] + 1.

You start with 0 points. Return the maximum number of points you can earn by applying such operations.",['dynamic-programming'],Medium,1493,111,103770,52115,"[""House Robber""]","[('dynamic programming', 23), ('c++', 11), ('dp', 11), ('python 3', 9), ('cpp', 7), ('javascript', 7), ('dynamic-programming', 6), ('java', 5), ('memoization', 5), ('java-solution', 3), ('map', 3), ('golang', 2), ('python', 2), ('python3', 2), ('#740', 1), ('#delete and earn', 1), ('100 memory', 1), ('1d-dp', 1), ('begginers', 1), ('bottom up', 1), ('c#', 1), ('c++ code', 1), ('c++ iterative sol', 1), ('clear', 1), ('cpp solution', 1), ('cpp-solution', 1), ('detailed explanation', 1), ('dp c++', 1), ('easy', 1), ('easy solution', 1), ('easytounderstand', 1), ('gkt', 1), ('go', 1), ('golang-solution', 1), ('hash table', 1), ('iteratively', 1), ('itereative', 1), ('java ac solution', 1), ('kotlin', 1), ('lis', 1), ('map in c++', 1), ('recurision', 1), ('recursion', 1), ('solution-sharing-cpp', 1), ('sorting', 1), ('space-efficient', 1), ('top down', 1), ('top-down', 1), ('top-down dp', 1), ('zea7ot', 1)]"
739,Daily Temperatures,https://leetcode.com/problems/daily-temperatures,"Given a list of daily temperatures T, return a list such that, for each day in the input, tells you how many days you would have to wait until a warmer temperature.  If there is no future day for which this is possible, put 0 instead.

For example, given the list of temperatures T = [73, 74, 75, 71, 69, 72, 76, 73], your output should be [1, 1, 4, 2, 1, 1, 0, 0].


Note:
The length of temperatures will be in the range [1, 30000].
Each temperature will be an integer in the range [30, 100].","['hash-table', 'stack']",Medium,4164,129,366383,237913,"[""Next Greater Element I""]","[('stack', 48), ('java', 36), ('stacks', 32), ('c++', 26), ('python', 25), ('javascript', 18), ('cpp', 16), ('python 3', 11), ('python3', 11), ('java-solution', 10), ('dynamic programming', 6), ('easy-understanding', 6), ('monotonic stack', 6), ('c#', 5), ('golang', 4), ('stack-based', 4), ('swift', 4), ('cpp solution', 3), ('golang-solution', 3), ('hashmap', 3), ('kotlin', 3), ('next-greater-element', 3), ('array', 2), ('brute force', 2), ('easy', 2), ('easy-to-understand', 2), ('explanation of logic', 2), ('fast', 2), ('heap', 2), ('javascript solution', 2), ('linear time', 2), ('optimal', 2), ('two-pointers', 2), ('#array', 1), ('#dynamic programming', 1), ('#python', 1), ('#stack #nextgreater', 1), ('100', 1), ('100 space', 1), ('100 speed', 1), ('algorithm', 1), ('amortized', 1), ('bst', 1), ('c++ easy to understand', 1), ('c++ solution', 1), ('c++11', 1), ('clean', 1), ('clean code', 1), ('clear explanation', 1), ('daily temperatures', 1), ('daily-temperatures', 1), ('dailytemperatures', 1), ('dyanmic programming', 1), ('easy understand', 1), ('easy understanding', 1), ('easy-undestand', 1), ('easysolution', 1), ('explain', 1), ('explanation', 1), ('go', 1), ('greedy', 1), ('hash', 1), ('help me', 1), ('high performance', 1), ('in-place', 1), ('inefficient', 1), ('inplace', 1), ('intuitive', 1), ('intutive', 1), ('java ac solution', 1), ('js', 1), ('kotlinvim', 1), ('linear memory', 1), ('lis', 1), ('min heap', 1), ('monotonic-stack', 1), ('n', 1), ('nearest-neighbor', 1), ('next greater element', 1), ('ngr', 1), ('one-liner', 1), ('oop', 1), ('optimisation', 1), ('optimized', 1), ('pair', 1), ('patience sorting', 1), ('pattern', 1), ('performance', 1), ('priority queue', 1), ('python2', 1), ('python3.8', 1), ('quadratic', 1), ('recursion', 1), ('reverse traversal', 1), ('scala', 1), ('segment tree', 1), ('self explanatory', 1), ('self-explanatory', 1), ('sequence', 1), ('series', 1), ('simple', 1), ('simple solution', 1), ('single pass', 1), ('solution-sharing-cpp', 1), ('speed', 1), ('stack javascript', 1), ('stack vs. array', 1), ('stack-stl', 1), ('suffix array', 1), ('suffix based', 1), ('tabula', 1), ('tail-recursive', 1), ('time-limit-exceeded-java', 1), ('tuples', 1), ('typescript', 1), ('ultra simple', 1), ('upvote', 1)]"
738,Monotone Increasing Digits,https://leetcode.com/problems/monotone-increasing-digits,"Given a non-negative integer N, find the largest number that is less than or equal to N with monotone increasing digits.

(Recall that an integer has monotone increasing digits if and only if each pair of adjacent digits x and y satisfy x .)",['greedy'],Medium,620,77,63528,29097,"[""Remove K Digits""]","[('python', 11), ('greedy', 10), ('c++', 8), ('python 3', 7), ('javascript', 6), ('cpp', 4), ('python3', 4), ('java', 3), ('c#', 2), ('easy', 2), ('easy-understanding', 2), ('math', 2), ('stack', 2), ('0ms', 1), ('100 faster', 1), ('brute force', 1), ('c', 1), ('c++ code', 1), ('c++11', 1), ('cpp easy', 1), ('cpp solution', 1), ('csharp', 1), ('easy-to-understand', 1), ('easytounderstand', 1), ('fast-solution', 1), ('fasterthan100', 1), ('go', 1), ('golang', 1), ('golang-solution', 1), ('greedy approach', 1), ('hashing', 1), ('iterative', 1), ('java-solution', 1), ('js javascript', 1), ('kotlinvim', 1), ('map', 1), ('python2', 1), ('recusion', 1), ('simple', 1), ('simple solution', 1), ('solution-sharing-cpp', 1), ('swift', 1), ('without string', 1)]"
736,Parse Lisp Expression,https://leetcode.com/problems/parse-lisp-expression,"You are given a string expression representing a Lisp-like expression to return the integer value of.

The syntax for these expressions is given as follows.

An expression is either an integer, a let-expression, an add-expression, a mult-expression, or an assigned variable.  Expressions always evaluate to a single integer.

(An integer could be positive or negative.)

A let-expression takes the form (let v1 e1 v2 e2 ... vn en expr), where let is always the string ""let"", then there are 1 or more pairs of alternating variables and expressions, meaning that the first variable v1 is assigned the value of the expression e1, the second variable v2 is assigned the value of the expression e2, and so on sequentially; and then the value of this let-expression is the value of the expression expr.

An add-expression takes the form (add e1 e2) where add is always the string ""add"", there are always two expressions e1, e2, and this expression evaluates to the addition of the evaluation of e1 and the evaluation of e2.

A mult-expression takes the form (mult e1 e2) where mult is always the string ""mult"", there are always two expressions e1, e2, and this expression evaluates to the multiplication of the evaluation of e1 and the evaluation of e2.

For the purposes of this question, we will use a smaller subset of variable names.  A variable starts with a lowercase letter, then zero or more lowercase letters or digits.  Additionally for your convenience, the names ""add"", ""let"", or ""mult"" are protected and will never be used as variable names.

Finally, there is the concept of scope.  When an expression of a variable name is evaluated, within the context of that evaluation, the innermost scope (in terms of parentheses) is checked first for the value of that variable, and then outer scopes are checked sequentially.  It is guaranteed that every expression is legal.  Please see the examples for more details on scope.


Evaluation",['string'],Hard,329,243,30280,15074,"[""Ternary Expression Parser"", ""Number of Atoms"", ""Basic Calculator IV""]","[('java', 4), ('recursion', 4), ('c++', 2), ('hashmap', 2), ('comments', 1), ('easy-understanding', 1), ('explained', 1), ('golang-solution', 1), ('javascript solution', 1), ('linear time', 1), ('python', 1), ('recurision', 1), ('solition-sharing', 1), ('solution-sharing-cpp', 1), ('stack', 1), ('string', 1), ('string-operation', 1), ('stringview', 1), ('unorderedmap', 1)]"
735,Asteroid Collision,https://leetcode.com/problems/asteroid-collision,"We are given an array asteroids of integers representing asteroids in a row.

For each asteroid, the absolute value represents its size, and the sign represents its direction (positive meaning right, negative meaning left). Each asteroid moves at the same speed.

Find out the state of the asteroids after all collisions. If two asteroids meet, the smaller one will explode. If both are the same size, both will explode. Two asteroids moving in the same direction will never meet.",['stack'],Medium,1934,166,264039,114627,"[""Can Place Flowers""]","[('stack', 37), ('stacks', 32), ('c++', 24), ('python', 20), ('java', 19), ('cpp', 17), ('python 3', 12), ('javascript', 11), ('stack-based', 9), ('cpp solution', 7), ('java-solution', 7), ('c#', 6), ('python3', 6), ('simple solution', 6), ('easy-understanding', 5), ('swift', 5), ('golang', 4), ('ruby', 4), ('explained', 3), ('java ac solution', 3), ('kotlin', 3), ('2ms', 2), ('c++11', 2), ('detailed explanation', 2), ('divide and conquer', 2), ('easy', 2), ('easy-to-understand', 2), ('easy-undestand', 2), ('easytounderstand', 2), ('explanation of logic', 2), ('explanations', 2), ('golang-solution', 2), ('js', 2), ('php', 2), ('#stack', 1), ('2-pointer approach', 1), ('2pointers', 1), ('5ms', 1), ('array', 1), ('arraylist', 1), ('brute force', 1), ('c++ code', 1), ('c++ solution', 1), ('c++14', 1), ('commented', 1), ('comments', 1), ('comments-added', 1), ('commetend', 1), ('constant space', 1), ('csharp', 1), ('datastructure', 1), ('easy to understand', 1), ('easy understanding', 1), ('efficent approach', 1), ('explanation', 1), ('facebook intern', 1), ('fast-solution', 1), ('fastest', 1), ('go', 1), ('go-solution', 1), ('greedy', 1), ('hashmap', 1), ('iteration', 1), ('java solution', 1), ('javascrip', 1), ('kotlinvim', 1), ('lambda function', 1), ('linear', 1), ('linear memory', 1), ('linear time', 1), ('linked list', 1), ('list', 1), ('no stack', 1), ('no-stack', 1), ('optimisation', 1), ('performance', 1), ('php solution', 1), ('python deque', 1), ('python2', 1), ('python3.8', 1), ('readable', 1), ('recursion', 1), ('rust', 1), ('sequence', 1), ('series', 1), ('simple', 1), ('simulation', 1), ('solution-sharing-cpp', 1), ('stack vs. array', 1), ('stack-implementation', 1), ('step by step explanation', 1), ('straight-forward', 1), ('subsequence', 1), ('swift5', 1), ('test-case', 1), ('thought-process', 1), ('two pointer technique', 1), ('two stacks', 1), ('typescript', 1), ('verbose', 1), ('video', 1), ('video explanation', 1), ('video-explanation', 1), ('zea7ot', 1)]"
733,Flood Fill,https://leetcode.com/problems/flood-fill,"An image is represented by a 2-D array of integers, each integer representing the pixel value of the image (from 0 to 65535).

Given a coordinate (sr, sc) representing the starting pixel (row and column) of the flood fill, and a pixel value newColor, ""flood fill"" the image.

To perform a ""flood fill"", consider the starting pixel, plus any pixels connected 4-directionally to the starting pixel of the same color as the starting pixel, plus any pixels connected 4-directionally to those pixels (also with the same color as the starting pixel), and so on.  Replace the color of all of the aforementioned pixels with the newColor.

At the end, return the modified image.",['depth-first-search'],Easy,1900,241,407796,228376,"[""Island Perimeter""]","[('dfs', 82), ('java', 43), ('c++', 41), ('bfs', 38), ('python', 38), ('cpp', 31), ('python 3', 30), ('javascript', 25), ('dfs simple solution', 23), ('python3', 23), ('easy-understanding', 15), ('recursion', 15), ('java-solution', 12), ('cpp solution', 8), ('golang', 6), ('breadth first search', 5), ('js', 5), ('recursive', 5), ('dfs recursive', 4), ('dfs-bfs', 4), ('easy-undestand', 4), ('flood fill', 4), ('iterative-dfs', 4), ('python2', 4), ('queue', 4), ('ruby', 4), ('simple', 4), ('simple solution', 4), ('c#', 3), ('c++ code', 3), ('clean code', 3), ('easy', 3), ('easytounderstand', 3), ('recursive solution', 3), ('rust', 3), ('scala', 3), ('swift', 3), ('0ms', 2), ('clean-efficient-code', 2), ('commented', 2), ('concise', 2), ('cpp easy', 2), ('dfs simple', 2), ('dfs solution', 2), ('dfs-non-recursive', 2), ('dfs-recursive', 2), ('golang-solution', 2), ('java ac solution', 2), ('javascript solution', 2), ('js javascript', 2), ('non-recursive', 2), ('recursively', 2), ('tle', 2), ('100 faster', 1), ('100 speed', 1), ('amazon', 1), ('animation', 1), ('avnish', 1), ('awesome samriddhi', 1), ('back tracking', 1), ('backtracking', 1), ('beginner friendly', 1), ('bfs simple solution', 1), ('breadth-first-search', 1), ('c', 1), ('c++ recursion', 1), ('c++ solution', 1), ('commentary', 1), ('comments', 1), ('comments added', 1), ('comments-added', 1), ('concise-solution', 1), ('connectedcomponent', 1), ('cpp clear', 1), ('cpp eas', 1), ('csharp', 1), ('depth first search', 1), ('depth first-search', 1), ('depth-first search', 1), ('depth-first-search', 1), ('dfs traversal', 1), ('dfs-iterative', 1), ('dfs-topdown', 1), ('diagrams', 1), ('dictionary', 1), ('easy to understand', 1), ('easy-understand', 1), ('ecmascript', 1), ('explaination', 1), ('fast', 1), ('fast and simple', 1), ('faster', 1), ('faster than 100.00', 1), ('faster than 95', 1), ('flood-fill', 1), ('go', 1), ('go-solution', 1), ('graph', 1), ('iterative', 1), ('java bfs', 1), ('java easy to understand', 1), ('java solution', 1), ('javascript recursive', 1), ('leetcode 394', 1), ('meiyaowen', 1), ('memoization', 1), ('mrmagician', 1), ('nodejs', 1), ('non-recursion', 1), ('optimal', 1), ('pyhton', 1), ('python dfs', 1), ('queue and linkedlist', 1), ('queue-approach', 1), ('recusion', 1), ('region-growing', 1), ('ritik', 1), ('set of vector', 1), ('set-union', 1), ('short code', 1), ('simple clear c++ solution', 1), ('simple recursion', 1), ('simple-solution', 1), ('simpler', 1), ('solution', 1), ('solution-sharing-cpp', 1), ('stack', 1), ('stack-based', 1), ('succinct', 1), ('thinking process', 1), ('upvote', 1), ('using-recursion', 1), ('video-explanation', 1), ('visualization', 1), ('well explained', 1), ('while loop', 1), ('while-loop', 1)]"
732,My Calendar III,https://leetcode.com/problems/my-calendar-iii,"A k-booking happens when k events have some non-empty intersection (i.e., there is some time that is common to all k events.)

You are given some events [start, end), after each given event, return an integer k representing the maximum k-booking between all the previous events.

Implement the MyCalendarThree class:


	MyCalendarThree() Initializes the object.
	int book(int start, int end) Returns an integer k representing the largest integer such that there exists a k-booking in the calendar.","['segment-tree', 'ordered-map']",Hard,479,110,44163,27633,"[""My Calendar I"", ""My Calendar II""]","[('python', 6), ('segment tree', 4), ('c++', 3), ('cpp', 3), ('javascript', 3), ('python 3', 3), ('c#', 2), ('java', 2), ('lazy-propagation', 2), ('map', 2), ('binary search', 1), ('boundary count', 1), ('data-structure', 1), ('design', 1), ('dynamic segment tree', 1), ('easy', 1), ('easy-undestand', 1), ('golang', 1), ('hashmap', 1), ('heap', 1), ('javascript solution', 1), ('map-stl', 1), ('meeting room', 1), ('ood', 1), ('oop', 1), ('priority queue', 1), ('similar-problems', 1), ('simple', 1), ('solution-sharing-cpp', 1), ('sorted list', 1), ('swift', 1), ('with comments', 1)]"
731,My Calendar II,https://leetcode.com/problems/my-calendar-ii,"Implement a MyCalendarTwo class to store your events. A new event can be added if adding the event will not cause a triple booking.

Your class will have one method, book(int start, int end). Formally, this represents a booking on the half open interval [start, end), the range of real numbers x such that start <= x < end.

A triple booking happens when three events have some non-empty intersection (ie., there is some time that is common to all 3 events.)

For each call to the method MyCalendar.book, return true if the event can be added to the calendar successfully without causing a triple booking. Otherwise, return false and do not add the event to the calendar.
Your class will be called like this: MyCalendar cal = new MyCalendar(); MyCalendar.book(start, end)",['ordered-map'],Medium,811,105,106781,54543,"[""My Calendar I"", ""My Calendar III""]","[('c++', 7), ('python', 5), ('java', 3), ('cpp', 2), ('cpp solution', 2), ('easy-understanding', 2), ('easy-undestand', 2), ('map', 2), ('python 3', 2), ('python3', 2), ('sweep line', 2), ('binary search', 1), ('binary-search-tree', 1), ('binarysearch', 1), ('bisect', 1), ('brute force', 1), ('c#', 1), ('clean code', 1), ('detailed explanation', 1), ('hashtable', 1), ('heap', 1), ('heaps', 1), ('interval tree', 1), ('intervals', 1), ('interview-friendly', 1), ('javascript', 1), ('lazy-propagation', 1), ('list', 1), ('memory-limited-exceeded', 1), ('merge', 1), ('multimap', 1), ('multiset', 1), ('n-space', 1), ('nlogn time', 1), ('priority queue', 1), ('python2', 1), ('recursion', 1), ('ruby', 1), ('segment tree', 1), ('set', 1), ('simple', 1), ('solution-sharing-cpp', 1), ('testcase-wrong', 1), ('treemap', 1), ('two solutions', 1)]"
730,Count Different Palindromic Subsequences,https://leetcode.com/problems/count-different-palindromic-subsequences,"Given a string S, find the number of different non-empty palindromic subsequences in S, and return that number modulo 10^9 + 7.

A subsequence of a string S is obtained by deleting 0 or more characters from S.

A sequence is palindromic if it is equal to the sequence reversed.

Two sequences A_1, A_2, ... and B_1, B_2, ... are different if there is some i for which A_i != B_i.","['string', 'dynamic-programming']",Hard,772,50,45266,19695,"[""Longest Palindromic Subsequence""]","[('dynamic programming', 8), ('c++', 3), ('cpp', 2), ('java', 2), ('java-solution', 2), ('javascript', 2), ('no-dp', 2), ('python', 2), ('awesome samriddhi', 1), ('c#', 1), ('cpp solution', 1), ('dp', 1), ('dp c++', 1), ('dynamic-programming', 1), ('javasciprt', 1), ('js', 1), ('python 3', 1), ('python2', 1), ('python3', 1), ('ritik', 1), ('solution-sharing-cpp', 1), ('string', 1), ('strings', 1), ('swift', 1), ('tabulation', 1), ('video', 1), ('youtube', 1)]"
729,My Calendar I,https://leetcode.com/problems/my-calendar-i,"Implement a MyCalendar class to store your events. A new event can be added if adding the event will not cause a double booking.

Your class will have the method, book(int start, int end). Formally, this represents a booking on the half open interval [start, end), the range of real numbers x such that start <= x < end.

A double booking happens when two events have some non-empty intersection (ie., there is some time that is common to both events.)

For each call to the method MyCalendar.book, return true if the event can be added to the calendar successfully without causing a double booking. Otherwise, return false and do not add the event to the calendar.
Your class will be called like this: MyCalendar cal = new MyCalendar(); MyCalendar.book(start, end)",['array'],Medium,1066,45,165851,89016,"[""My Calendar II"", ""My Calendar III""]","[('python', 12), ('binary-search', 10), ('c++', 10), ('java', 7), ('cpp', 6), ('treemap', 6), ('map', 5), ('python 3', 5), ('bisect', 4), ('c#', 3), ('cpp solution', 3), ('easy-to-understand', 3), ('javascript', 3), ('binary search', 2), ('binary search tree', 2), ('easy-undestand', 2), ('go', 2), ('golang', 2), ('python3', 2), ('simple', 2), ('swift', 2), ('.net', 1), ('#binary-search', 1), ('#python', 1), ('avnish', 1), ('binary tree', 1), ('bisect-python', 1), ('bst', 1), ('c++ code', 1), ('comment', 1), ('comments', 1), ('comments-added', 1), ('concise', 1), ('detailed explanation', 1), ('east-to-understand', 1), ('easy', 1), ('golang-solution', 1), ('heapsort', 1), ('interval tree', 1), ('intervals', 1), ('java solution', 1), ('java-solution', 1), ('js', 1), ('js javascript', 1), ('list', 1), ('lower bound', 1), ('o1', 1), ('priority queue', 1), ('ruby', 1), ('segment tree', 1), ('short', 1), ('simplest', 1), ('solution-sharing-cpp', 1), ('sorted-map', 1), ('sortedcontainers', 1), ('timestamp', 1), ('ts', 1), ('typescript', 1)]"
728,Self Dividing Numbers,https://leetcode.com/problems/self-dividing-numbers,"A self-dividing number is a number that is divisible by every digit it contains.

For example, 128 is a self-dividing number because 128 % 1 == 0, 128 % 2 == 0, and 128 % 8 == 0.

Also, a self-dividing number is not allowed to contain the digit zero.

Given a lower and upper number bound, output a list of every possible self dividing number, including the bounds if possible.",['math'],Easy,857,317,200794,152137,"[""Perfect Number""]","[('javascript', 38), ('c++', 35), ('java', 24), ('python', 24), ('cpp', 22), ('python 3', 19), ('cpp solution', 12), ('easy-understanding', 11), ('python3', 9), ('easy-undestand', 8), ('brute force', 7), ('easy-to-understand', 7), ('easytounderstand', 7), ('java-solution', 7), ('javascript solution', 7), ('easy', 6), ('kotlin', 6), ('c', 5), ('c#', 5), ('golang', 5), ('ruby', 4), ('swift', 4), ('1ms', 3), ('c++ code', 3), ('fast-solution', 3), ('php', 3), ('simple solution', 3), ('100 speed', 2), ('arraylist', 2), ('c code', 2), ('c programming', 2), ('digit-by-digit', 2), ('easy-understand', 2), ('easytoundersatand', 2), ('fast and simple', 2), ('go', 2), ('golang-solution', 2), ('maths', 2), ('self dividing numbers', 2), ('simple', 2), ('time-complexity', 2), ('typescript', 2), ('0ms', 1), ('100', 1), ('100 space', 1), ('4ms', 1), ('8.1mb', 1), ('abomination', 1), ('algorithms', 1), ('beats 100', 1), ('bisect', 1), ('c language', 1), ('c++ iterative sol', 1), ('c++ solution', 1), ('c++14', 1), ('clean', 1), ('clean code', 1), ('clean-efficient-code', 1), ('clear-understanding', 1), ('commented', 1), ('concise-solution', 1), ('correction', 1), ('cpp-easy', 1), ('cpp-solution', 1), ('csharp', 1), ('declarative', 1), ('divide', 1), ('divisibility', 1), ('division', 1), ('dynamic-allocation', 1), ('easiest', 1), ('easy to read', 1), ('easy-solution', 1), ('efficient solution', 1), ('es6', 1), ('faster', 1), ('fasterthan100', 1), ('forloophell', 1), ('fp', 1), ('go-solution', 1), ('improve', 1), ('integers', 1), ('ios', 1), ('java 8', 1), ('java script', 1), ('js', 1), ('js javascript', 1), ('kotlin-solution', 1), ('linear-time-space', 1), ('list', 1), ('lists', 1), ('logical', 1), ('math power', 1), ('modulo', 1), ('mrmagician', 1), ('number', 1), ('one', 1), ('oneline', 1), ('onelineexpression', 1), ('optimal', 1), ('optimization process', 1), ('python2', 1), ('range', 1), ('rangesumbst', 1), ('recursion', 1), ('rust', 1), ('self-dividing', 1), ('self-dividing-numbers', 1), ('selfdividingnumbers', 1), ('sequence', 1), ('series', 1), ('simple-efficient', 1), ('simple-solution', 1), ('simplest', 1), ('slow', 1), ('solution-sharing-cpp', 1), ('solutions', 1), ('space n', 1), ('space-complexity', 1), ('syntax', 1), ('upvote', 1)]"
726,Number of Atoms,https://leetcode.com/problems/number-of-atoms,"Given a chemical formula (given as a string), return the count of each atom.

The atomic element always starts with an uppercase character, then zero or more lowercase letters, representing the name.

One or more digits representing that element's count may follow if the count is greater than 1. If the count is 1, no digits will follow. For example, H2O and H2O2 are possible, but H1O2 is impossible.

Two formulas concatenated together to produce another formula. For example, H2O2He3Mg4 is also a formula.

A formula placed in parentheses, and a count (optionally added) is also a formula. For example, (H2O2) and (H2O2)3 are formulas.

Given a formula, return the count of all elements as a string in the following form: the first name (in sorted order), followed by its count (if that count is more than 1), followed by the second name (in sorted order), followed by its count (if that count is more than 1), and so on.","['hash-table', 'stack', 'recursion']",Hard,639,165,64748,32989,"[""Decode String"", ""Encode String with Shortest Length"", ""Parse Lisp Expression""]","[('stack', 7), ('java', 6), ('java-solution', 6), ('c++', 5), ('hashmap', 5), ('linear time', 5), ('stacks', 5), ('easy-understanding', 4), ('map', 4), ('python', 4), ('iterative', 3), ('javascript', 3), ('recursion', 3), ('c#', 2), ('cpp', 2), ('dfs simple solution', 2), ('easy-to-understand', 2), ('easy-undestand', 2), ('kotlin', 2), ('python3', 2), ('recursive', 2), ('treemap', 2), ('100 memory', 1), ('arraylist', 1), ('comments', 1), ('cpp easy', 1), ('cpp solution', 1), ('dictionary c#', 1), ('easy-to-follow', 1), ('easy-to-read', 1), ('explained', 1), ('fast and simple', 1), ('fastest', 1), ('golang', 1), ('itereative', 1), ('pair', 1), ('parser', 1), ('parsing', 1), ('python 3', 1), ('queue', 1), ('recursive-descent', 1), ('resursive', 1), ('scala', 1), ('simpe', 1), ('simple clear c++ solution', 1), ('simple-solution', 1), ('solution', 1), ('solution-sharing-cpp', 1), ('stack-based', 1), ('string', 1), ('swift', 1), ('swiftsolution', 1), ('with comments', 1)]"
725,Split Linked List in Parts,https://leetcode.com/problems/split-linked-list-in-parts,"Given a (singly) linked list with head node root, write a function to split the linked list into k consecutive linked list ""parts"".

The length of each part should be as equal as possible: no two parts should have a size differing by more than 1.  This may lead to some parts being null.

The parts should be in order of occurrence in the input list, and parts occurring earlier should always have a size greater than or equal parts occurring later.

Return a List of ListNode's representing the linked list parts that are formed.",['linked-list'],Medium,952,152,113229,60243,"[""Rotate List"", ""Odd Even Linked List""]","[('c++', 20), ('cpp', 16), ('java', 12), ('python', 9), ('python 3', 9), ('linked-list', 8), ('javascript', 6), ('beats 100', 5), ('python3', 5), ('c#', 4), ('easy-understanding', 3), ('java-solution', 3), ('linked list', 3), ('linkedlists', 3), ('clear-understanding', 2), ('cpp solution', 2), ('easy-undestand', 2), ('fast and simple', 2), ('simple', 2), ('solution', 2), ('straight forward', 2), ('swift', 2), ('#java', 1), ('2d-array', 1), ('c', 1), ('c++ code', 1), ('c++ solution', 1), ('clean-code', 1), ('comments', 1), ('comments-added', 1), ('commetend', 1), ('constant memory', 1), ('constant space', 1), ('cpp easy', 1), ('cpp question', 1), ('cpp-solution', 1), ('data-structures', 1), ('division', 1), ('efficient', 1), ('explanations', 1), ('iterative', 1), ('iteratively', 1), ('java ac solution', 1), ('linear-time', 1), ('linked lists', 1), ('linked-lists', 1), ('list', 1), ('list comprehension', 1), ('math', 1), ('mod', 1), ('one-loop', 1), ('partition', 1), ('pointer', 1), ('recursion', 1), ('simulation', 1), ('solution-sharing-cpp', 1), ('splitting', 1), ('swift5', 1)]"
724,Find Pivot Index,https://leetcode.com/problems/find-pivot-index,"Given an array of integers nums, calculate the pivot index of this array.

The pivot index is the index where the sum of all the numbers strictly to the left of the index is equal to the sum of all the numbers strictly to the index's right.

If the index is on the left edge of the array, then the left sum is 0 because there are no elements to the left. This also applies to the right edge of the array.

Return the leftmost pivot index. If no such index exists, return -1.",['array'],Easy,1718,316,420623,195131,"[""Subarray Sum Equals K""]","[('java', 38), ('c++', 34), ('cpp', 22), ('python', 19), ('javascript', 16), ('python 3', 15), ('java-solution', 14), ('easy-understanding', 10), ('python3', 10), ('easy-undestand', 8), ('prefix sum', 8), ('clean code', 6), ('easytounderstand', 6), ('c#', 5), ('golang', 5), ('cpp solution', 4), ('good variable names', 4), ('java solution', 4), ('simple solution', 4), ('dynamic programming', 3), ('easy-to-understand', 3), ('linear time', 3), ('pivot', 3), ('python2', 3), ('simple', 3), ('swift', 3), ('array', 2), ('c++ code', 2), ('dp', 2), ('easy', 2), ('one pass', 2), ('ruby', 2), ('simplest', 2), ('#java', 1), ('#javascript', 1), ('#simplecode', 1), ('100 speed', 1), ('1ms', 1), ('2 pass', 1), ('adobe', 1), ('amazon', 1), ('array easy', 1), ('array of set', 1), ('arrays', 1), ('avnish', 1), ('balance-scale', 1), ('beats 100', 1), ('beginner friendly', 1), ('beginners', 1), ('c++14', 1), ('clarification', 1), ('clean solution', 1), ('commented', 1), ('comments added', 1), ('concise-solution', 1), ('constant memory', 1), ('constant space', 1), ('cplusplus', 1), ('cpp easy', 1), ('doubts', 1), ('easiest', 1), ('easy to understand', 1), ('easy understanding', 1), ('efficient solution', 1), ('esay-understand', 1), ('explaination', 1), ('explanatory comments', 1), ('fasterthan100', 1), ('fastest', 1), ('for-loop', 1), ('go', 1), ('golang-solution', 1), ('hashmap', 1), ('hints', 1), ('ios', 1), ('iterative', 1), ('java ac solution', 1), ('java-8', 1), ('js', 1), ('js javascript', 1), ('kotlinvim', 1), ('linear memory', 1), ('linear-time', 1), ('loop', 1), ('php', 1), ('prefix-sum', 1), ('pythonic', 1), ('question-not-clear', 1), ('readable', 1), ('recursion', 1), ('recursive', 1), ('recursively', 1), ('running sum', 1), ('runningtotal', 1), ('single pass', 1), ('slicing', 1), ('sliding-window', 1), ('solution', 1), ('solution-sharing-cpp', 1), ('stl algorithms', 1), ('sum', 1), ('two-pointer', 1), ('typescript', 1), ('very fast', 1), ('while loop', 1)]"
722,Remove Comments,https://leetcode.com/problems/remove-comments,"Given a C++ program, remove comments from it. The program source is an array where source[i] is the i-th line of the source code.  This represents the result of splitting the original source code string by the newline character \n.

In C++, there are two types of comments, line comments, and block comments.

The string // denotes a line comment, which represents that it and rest of the characters to the right of it in the same line should be ignored.

The string /* denotes a block comment, which represents that all characters until the next (non-overlapping) occurrence of */ should be ignored.  (Here, occurrences happen in reading order: line by line from left to right.)  To be clear, the string /*/ does not yet end the block comment, as the ending would be overlapping the beginning.

The first effective comment takes precedence over others: if the string // occurs in a block comment, it is ignored. Similarly, if the string /* occurs in a line or block comment, it is also ignored.

If a certain line of code is empty after removing comments, you must not output that line: each string in the answer list will be non-empty.

There will be no control characters, single quote, or double quote characters.  For example, source = ""string s = ""/* Not a comment. */"";"" will not be a test case.  (Also, nothing else such as defines or macros will interfere with the comments.)

It is guaranteed that every open block comment will eventually be closed, so /* outside of a line or block comment always starts a new comment.

Finally, implicit newline characters can be deleted by block comments.  Please see the examples below for details.


After removing the comments from the source code, return the source code in the same format.",['string'],Medium,465,1215,117690,43025,"[""Mini Parser"", ""Ternary Expression Parser""]","[('python', 4), ('python 3', 4), ('java', 3), ('javascript', 3), ('c#', 2), ('c++', 2), ('explained', 2), ('golang', 2), ('java-solution', 2), ('python3', 2), ('regex', 2), ('rust', 2), ('solution-sharing-cpp', 2), ('state machine', 2), ('100 faster runtime', 1), ('confusion', 1), ('cpp', 1), ('explanation', 1), ('explanation of logic', 1), ('go-solution', 1), ('golang-solution', 1), ('memory efficient', 1), ('microsoft interview', 1), ('one line', 1), ('question', 1), ('questionable-test-case', 1), ('readable code', 1), ('regular expression', 1), ('regular-expression', 1), ('simple java solution', 1), ('solution', 1), ('string', 1), ('string-operation', 1), ('string-searching', 1), ('stringstream', 1), ('swift', 1)]"
721,Accounts Merge,https://leetcode.com/problems/accounts-merge,"Given a list of accounts where each element accounts[i] is a list of strings, where the first element accounts[i][0] is a name, and the rest of the elements are emails representing emails of the account.

Now, we would like to merge these accounts. Two accounts definitely belong to the same person if there is some common email to both accounts. Note that even if two accounts have the same name, they may belong to different people as people could have the same name. A person can have any number of accounts initially, but all of their accounts definitely have the same name.

After merging the accounts, return the accounts in the following format: the first element of each account is the name, and the rest of the elements are emails in sorted order. The accounts themselves can be returned in any order.","['depth-first-search', 'union-find']",Medium,2363,427,267815,140625,"[""Redundant Connection"", ""Sentence Similarity"", ""Sentence Similarity II""]","[('union find', 26), ('java', 15), ('python', 12), ('dfs', 11), ('unionfind', 10), ('javascript', 9), ('c#', 8), ('bfs', 6), ('c++', 5), ('graph', 5), ('python3', 5), ('union-find', 5), ('python 3', 4), ('java-solution', 3), ('dfs solution', 2), ('dfs-iterative', 2), ('easytounderstand', 2), ('iterative', 2), ('javascript solution', 2), ('js', 2), ('readable', 2), ('swift', 2), ('algorithms', 1), ('breadth first search', 1), ('brute force', 1), ('commented', 1), ('cpp', 1), ('cpp solution', 1), ('dfs simple solution', 1), ('dfs-bfs', 1), ('dict', 1), ('disjoint-set', 1), ('dsu', 1), ('easy', 1), ('easy-peasy', 1), ('easy-understanding', 1), ('explanations', 1), ('faceebook', 1), ('fast-solution', 1), ('find-union', 1), ('go', 1), ('golang', 1), ('google', 1), ('group values', 1), ('hashmap', 1), ('java ac solution', 1), ('java11', 1), ('javascrip', 1), ('js javascript', 1), ('kotlinvim', 1), ('linq', 1), ('map', 1), ('ruby', 1), ('set', 1), ('simple', 1), ('techbacker', 1), ('thinking process', 1), ('union', 1), ('weighted', 1)]"
720,Longest Word in Dictionary,https://leetcode.com/problems/longest-word-in-dictionary,"Given an array of strings words representing an English Dictionary, return the longest word in words that can be built one character at a time by other words in words.

If there is more than one possible answer, return the longest word with the smallest lexicographical order. If there is no answer, return the empty string.","['hash-table', 'trie']",Easy,887,1059,169138,83880,"[""Longest Word in Dictionary through Deleting"", ""Implement Magic Dictionary""]","[('trie', 30), ('c++', 25), ('java', 22), ('javascript', 14), ('python', 13), ('python 3', 13), ('cpp', 11), ('easy-understanding', 6), ('golang', 5), ('c#', 4), ('dfs', 4), ('hashset', 4), ('python3', 4), ('set', 4), ('trie-dfs', 4), ('tries', 4), ('c', 3), ('dictionary', 3), ('easy-undestand', 3), ('java-solution', 3), ('sorting', 3), ('algorithms', 2), ('bfs', 2), ('brute force', 2), ('bucket sort', 2), ('c++ code', 2), ('c++17', 2), ('comments-added', 2), ('dfs simple solution', 2), ('explaination', 2), ('explained solution', 2), ('fast', 2), ('golang-solution', 2), ('js', 2), ('kotlin', 2), ('map', 2), ('nlogn', 2), ('recursive', 2), ('simplest', 2), ('string', 2), ('swift', 2), ('#dfs', 1), ('#trie', 1), ('c code', 1), ('c++ set', 1), ('c++ solution', 1), ('c++11', 1), ('clean code', 1), ('comparator', 1), ('cpp easy', 1), ('cpp solution', 1), ('depth-first-search', 1), ('dfs traversal', 1), ('dfs-tree', 1), ('dp', 1), ('drewbie', 1), ('dynamic programming', 1), ('easy', 1), ('easy to understand', 1), ('easy-to-understand', 1), ('easytounderstand', 1), ('es6', 1), ('explained', 1), ('explanation of logic', 1), ('explanation with logic', 1), ('faster-than-100', 1), ('for loops', 1), ('go', 1), ('go-solution', 1), ('golang solution', 1), ('hashmap', 1), ('hashtable', 1), ('heap', 1), ('java ac solution', 1), ('linear time', 1), ('longest-word-in-dict', 1), ('optimised', 1), ('optimised code', 1), ('python set', 1), ('queue', 1), ('recursion', 1), ('ruby', 1), ('rust', 1), ('sets', 1), ('simple solution', 1), ('solution', 1), ('solution-sharing-cpp', 1), ('sort-function', 1), ('string search', 1), ('strings', 1), ('substring', 1), ('swift5', 1), ('trie explained', 1), ('with-explanation', 1)]"
719,Find K-th Smallest Pair Distance,https://leetcode.com/problems/find-k-th-smallest-pair-distance,"Given an integer array, return the k-th smallest distance among all the pairs. The distance of a pair (A, B) is defined as the absolute difference between A and B.","['array', 'binary-search', 'heap']",Hard,1331,51,132283,43261,"[""Find K Pairs with Smallest Sums"", ""Kth Smallest Element in a Sorted Matrix"", ""Find K Closest Elements"", ""Kth Smallest Number in Multiplication Table"", ""K-th Smallest Prime Fraction""]","[('binary-search', 11), ('binary search', 8), ('python', 6), ('java', 4), ('binarysearch', 3), ('c++', 3), ('python 3', 3), ('cpp', 2), ('golang', 2), ('java-solution', 2), ('javascript', 2), ('trial and error', 2), ('binarysearh', 1), ('bisect', 1), ('buckets', 1), ('c#', 1), ('clean', 1), ('cppsolution', 1), ('dp', 1), ('explanations', 1), ('python3', 1), ('ror', 1), ('ruby', 1), ('sliding-window', 1), ('slidingwindow', 1)]"
718,Maximum Length of Repeated Subarray,https://leetcode.com/problems/maximum-length-of-repeated-subarray,"Given two integer arrays nums1 and nums2, return the maximum length of a subarray that appears in both arrays.","['array', 'hash-table', 'binary-search', 'dynamic-programming']",Medium,2011,55,181274,91753,"[""Minimum Size Subarray Sum""]","[('dynamic programming', 39), ('c++', 19), ('dp', 13), ('cpp', 11), ('java', 11), ('python', 10), ('python 3', 7), ('dynamic-programming', 5), ('python3', 5), ('javascript', 4), ('binary-search', 3), ('clear', 3), ('lcs', 3), ('longest common substring', 3), ('c#', 2), ('cpp solution', 2), ('cpp-solution', 2), ('explained', 2), ('fast and simple', 2), ('golang', 2), ('kotlin', 2), ('rolling hash', 2), ('slidingwindow', 2), ('1-liner', 1), ('1l', 1), ('arrays', 1), ('bf1l', 1), ('bottom up', 1), ('bottom-up approach', 1), ('bottoms-up', 1), ('brute force', 1), ('brute-force', 1), ('c', 1), ('code', 1), ('cpp clear', 1), ('dfs', 1), ('dictionary', 1), ('dp-programming', 1), ('dp-techqique', 1), ('dynaminc programming', 1), ('easiest', 1), ('easy', 1), ('easy dp', 1), ('easy to understand', 1), ('easy-understanding', 1), ('easytounderstand', 1), ('efficient algorithm', 1), ('fast-solution', 1), ('fastest', 1), ('fp', 1), ('fp1l', 1), ('go', 1), ('golang-solution', 1), ('hash', 1), ('hashmap', 1), ('image-understanding', 1), ('interview', 1), ('iteration', 1), ('iterative way', 1), ('izaac', 1), ('java ac solution', 1), ('java-solution', 1), ('javascrip', 1), ('javascript solution', 1), ('js', 1), ('js javascript', 1), ('kmp', 1), ('library', 1), ('maxlengthrepeatedsubarray', 1), ('nlogn time', 1), ('no-dp', 1), ('oneliner', 1), ('optimal', 1), ('python perfomance', 1), ('pythonic', 1), ('rabin-karp', 1), ('readable', 1), ('recursion palindrome', 1), ('rolling-hash', 1), ('scala', 1), ('simple clear c++ solution', 1), ('simple solution', 1), ('simplesolution', 1), ('solution-sharing-cpp', 1), ('space-efficient', 1), ('tabular', 1), ('top down dp', 1), ('top-down dp', 1), ('tutorial', 1), ('video-explanation', 1)]"
717,1-bit and 2-bit Characters,https://leetcode.com/problems/1-bit-and-2-bit-characters,"We have two special characters. The first character can be represented by one bit 0. The second character can be represented by two bits (10 or 11).  

Now given a string represented by several bits. Return whether the last character must be a one-bit character or not. The given string will always end with a zero.",['array'],Easy,563,1446,185047,86586,"[""Gray Code""]","[('c++', 25), ('cpp', 19), ('python', 11), ('python 3', 11), ('java', 10), ('javascript', 9), ('python3', 7), ('easy-understanding', 6), ('array', 5), ('c', 5), ('java-solution', 5), ('easy', 3), ('easy-undestand', 3), ('golang', 3), ('c#', 2), ('clean code', 2), ('clean-efficient-code', 2), ('cpp solution', 2), ('#python', 1), ('#python 3', 1), ('0ms', 1), ('100 faster', 1), ('100 space', 1), ('100 speed', 1), ('1bit', 1), ('1bit2bitcharacters', 1), ('2bit', 1), ('3 lines', 1), ('algorithms', 1), ('best-solution', 1), ('binary', 1), ('bit manipulation', 1), ('brute force', 1), ('c code', 1), ('c programming', 1), ('c++ code', 1), ('clean', 1), ('clean-code', 1), ('clear explanation', 1), ('comment', 1), ('commentary', 1), ('comments', 1), ('condition variable', 1), ('correct description', 1), ('cpp easy', 1), ('easiest', 1), ('easy-to-understand', 1), ('easy-understand', 1), ('efficient solution', 1), ('explanation with code', 1), ('fast', 1), ('for-loop', 1), ('golang-solution', 1), ('haskell', 1), ('iterative', 1), ('java simple', 1), ('java solution', 1), ('javascript solution', 1), ('js', 1), ('js javascript', 1), ('kotlin', 1), ('machine code', 1), ('observation', 1), ('one pass', 1), ('one pass solution', 1), ('python2', 1), ('racket', 1), ('recursion', 1), ('ruby', 1), ('short', 1), ('simple and fast', 1), ('simple solution', 1), ('simplest', 1), ('solution-sharing-cpp', 1), ('stack', 1), ('swift', 1), ('three-lines', 1), ('trie', 1)]"
715,Range Module,https://leetcode.com/problems/range-module,"A Range Module is a module that tracks ranges of numbers. Your task is to design and implement the following interfaces in an efficient manner.

addRange(int left, int right) Adds the half-open interval [left, right), tracking every real number in that interval.  Adding an interval that partially overlaps with currently tracked numbers should add any numbers in the interval [left, right) that are not already tracked.

queryRange(int left, int right) Returns true if and only if every real number in the interval [left, right)
 is currently being tracked.

removeRange(int left, int right) Stops tracking every real number currently being tracked in the interval [left, right).","['segment-tree', 'ordered-map']",Hard,650,51,70285,28854,"[""Merge Intervals"", ""Insert Interval"", ""Data Stream as Disjoint Intervals""]","[('c#', 3), ('javascript', 3), ('segment tree', 3), ('binary-search', 2), ('explained', 2), ('python', 2), ('.net', 1), ('accepted', 1), ('binarysearch', 1), ('bisect-python', 1), ('c++', 1), ('c++ set', 1), ('give stars and subscribe', 1), ('help needed', 1), ('interval-merging', 1), ('java', 1), ('js', 1), ('linked-list', 1), ('pain-in-the-a', 1), ('python 3', 1), ('python3', 1), ('time limit exceeded', 1), ('tough', 1)]"
714,Best Time to Buy and Sell Stock with Transaction Fee,https://leetcode.com/problems/best-time-to-buy-and-sell-stock-with-transaction-fee,"You are given an array prices where prices[i] is the price of a given stock on the ith day, and an integer fee representing a transaction fee.

Find the maximum profit you can achieve. You may complete as many transactions as you like, but you need to pay the transaction fee for each transaction.

Note: You may not engage in multiple transactions simultaneously (i.e., you must sell the stock before you buy again).","['array', 'dynamic-programming', 'greedy']",Medium,2515,74,186847,108722,"[""Best Time to Buy and Sell Stock II""]","[('c++', 25), ('dynamic programming', 25), ('dp', 22), ('cpp', 12), ('java', 12), ('python', 12), ('python 3', 9), ('dynamic-programming', 8), ('easy-understanding', 5), ('explained', 5), ('linear time', 5), ('state-machine', 5), ('memoization', 4), ('c#', 3), ('c++ code', 3), ('cpp solution', 3), ('greedy', 3), ('java-solution', 3), ('javascript', 3), ('state machine', 3), ('video-explanation', 3), ('c++14', 2), ('comments-added', 2), ('constant memory', 2), ('explanation of logic', 2), ('explanatory video', 2), ('golang', 2), ('no extra space', 2), ('python3', 2), ('recursion', 2), ('rust', 2), ('simple', 2), ('single pass', 2), ('state-transition', 2), ('stock', 2), ('#714', 1), ('#dynamic programming', 1), ('#dynamic-programming', 1), ('#greedy', 1), ('#python', 1), ('#python3', 1), ('accepted solution', 1), ('awesome samriddhi', 1), ('buy sell stock', 1), ('c++ solution', 1), ('c++11', 1), ('clean', 1), ('code comments', 1), ('comments', 1), ('constant space', 1), ('declarative', 1), ('detailed explanation', 1), ('dynamic programing', 1), ('dynamic programming.', 1), ('easy', 1), ('easytounderstand', 1), ('explained solution', 1), ('explanation with code', 1), ('fast and simple', 1), ('finite state machine', 1), ('finite-state-machine', 1), ('functional', 1), ('go', 1), ('golang-solution', 1), ('greedy algorithm', 1), ('greedy approach', 1), ('hash table', 1), ('help needed', 1), ('issuse', 1), ('iterators', 1), ('kotlin', 1), ('math', 1), ('memo', 1), ('memoize', 1), ('memoziation', 1), ('multiple-ways', 1), ('noob coding', 1), ('o1 space', 1), ('optimized', 1), ('peak valley approach', 1), ('problem', 1), ('python-3', 1), ('recursion formula', 1), ('recursive dp', 1), ('ritik', 1), ('ruby', 1), ('short', 1), ('simply explained', 1), ('solution-sharing-cpp', 1), ('state', 1), ('stockexchangeproblem', 1), ('stocks', 1), ('swift', 1), ('tabulation', 1), ('top down dp', 1), ('top-down dp', 1), ('transaction fee', 1), ('valley-and-peak', 1), ('video-explaination', 1), ('video-solution', 1), ('visualization', 1), ('window-sliding', 1), ('without dp', 1)]"
713,Subarray Product Less Than K,https://leetcode.com/problems/subarray-product-less-than-k,"Your are given an array of positive integers nums.
Count and print the number of (contiguous) subarrays where the product of all the elements in the subarray is less than k.","['array', 'two-pointers']",Medium,2304,86,251367,102097,"[""Maximum Product Subarray"", ""Maximum Size Subarray Sum Equals k"", ""Subarray Sum Equals K"", ""Two Sum Less Than K""]","[('sliding-window', 25), ('c++', 16), ('python', 16), ('cpp', 14), ('slidingwindow', 13), ('python 3', 12), ('two pointers', 11), ('two-pointers', 10), ('java', 9), ('javascript', 8), ('cpp easy', 6), ('easy-understanding', 6), ('sliding window', 6), ('python3', 5), ('golang', 4), ('c#', 3), ('cpp solution', 3), ('explained', 3), ('explained solution', 3), ('queue', 3), ('2 pointers', 2), ('binary-search', 2), ('easy', 2), ('100 speed', 1), ('2 ways', 1), ('2-pointers', 1), ('2pointers', 1), ('aditya-verma', 1), ('c', 1), ('c++ solution', 1), ('comments-added', 1), ('constant space', 1), ('csharp', 1), ('dfs simple solution', 1), ('easy understanding', 1), ('easy-undestand', 1), ('easytounderstand', 1), ('efficient', 1), ('efficient solution', 1), ('es6', 1), ('fast-solution', 1), ('golang-solution', 1), ('help needed', 1), ('intuitive', 1), ('java ac solution', 1), ('java-solution', 1), ('js', 1), ('kotlin', 1), ('kotlinvim', 1), ('linear time', 1), ('linear-time', 1), ('on', 1), ('pointer', 1), ('python2', 1), ('python3.8', 1), ('questions', 1), ('rajat', 1), ('recursion', 1), ('ruby', 1), ('rust', 1), ('sequence', 1), ('series', 1), ('short', 1), ('short code', 1), ('slide window', 1), ('sliding window algorithm', 1), ('solution', 1), ('solution-sharing-cpp', 1), ('space complexity', 1), ('subarrayproductlessthank', 1), ('subsequence', 1), ('swift', 1), ('tag', 1), ('test-case-too-weak', 1), ('test-cases', 1), ('time complexity', 1), ('tle', 1), ('two pointer', 1), ('two pointer approach', 1), ('two pointer technique', 1), ('two-pointer', 1), ('twopointer', 1), ('typescript', 1), ('video solution', 1), ('video-explanation', 1), ('whileloop', 1)]"
712,Minimum ASCII Delete Sum for Two Strings,https://leetcode.com/problems/minimum-ascii-delete-sum-for-two-strings,"Given two strings s1, s2, find the lowest ASCII sum of deleted characters to make two strings equal.",['dynamic-programming'],Medium,1311,55,77027,45995,"[""Edit Distance"", ""Longest Increasing Subsequence"", ""Delete Operation for Two Strings""]","[('dynamic programming', 25), ('c++', 17), ('lcs', 12), ('dp', 11), ('memoization', 9), ('java', 8), ('python 3', 6), ('python', 5), ('cpp', 4), ('cpp solution', 3), ('dynamic-programming', 3), ('java-solution', 3), ('javascript', 3), ('recursion', 3), ('c#', 2), ('explained', 2), ('help needed', 2), ('longest common sequence', 2), ('top down', 2), ('top down dp', 2), ('#712', 1), ('2d-dp', 1), ('awesome samriddhi', 1), ('backtracking', 1), ('bottom up', 1), ('bottom up dp', 1), ('bottom-up-algorithm', 1), ('bottomup', 1), ('coding interview', 1), ('cpp-solution', 1), ('dynamic programmin', 1), ('easy', 1), ('easy-undestand', 1), ('easysolution', 1), ('edit-distance', 1), ('fast and simple', 1), ('go', 1), ('golang', 1), ('help me', 1), ('kotlin', 1), ('memoizarion', 1), ('minimum ascii', 1), ('python3', 1), ('recursion memoization', 1), ('recursive approach', 1), ('recurssion', 1), ('ritik', 1), ('simple', 1), ('tabular', 1), ('tle', 1), ('top-down', 1), ('top-down dp', 1), ('video-explanation', 1), ('zea7ot', 1)]"
699,Falling Squares,https://leetcode.com/problems/falling-squares,"On an infinite number line X-axis, we drop given squares in the order they are given.

You are given an array positions where positions[i] = [lefti, sideLengthi] represents the ith square dropped with the left-most point being lefti and the sidelength sideLengthi.

The square is dropped with the bottom edge parallel to the number line and from a higher height than all currently landed squares. We wait for each square to stick before dropping the next.

The squares are infinitely sticky on their bottom edge and remain fixed to any positive length surface they touch (either the number line or another square). Squares dropped adjacent to each other will not stick together prematurely.

Return an integer array ans where ans[i] represents the current highest height of any square we have dropped, after dropping the ith square.","['segment-tree', 'ordered-map']",Hard,334,65,37461,16249,"[""The Skyline Problem""]","[('java', 2), ('segment tree', 2), ('c#', 1), ('c++', 1), ('intervals', 1), ('kotlin', 1), ('lazy-propagation', 1), ('orderedmap', 1), ('pyhton', 1), ('python 3', 1), ('segment-tree', 1), ('segment-tree-binary-tree', 1), ('solution-sharing-java', 1)]"
698,Partition to K Equal Sum Subsets,https://leetcode.com/problems/partition-to-k-equal-sum-subsets,"Given an integer array nums and an integer k, return true if it is possible to divide this array into k non-empty subsets whose sums are all equal.","['dynamic-programming', 'recursion']",Medium,2850,190,274779,124763,"[""Partition Equal Subset Sum""]","[('backtracking', 29), ('dfs', 16), ('c++', 13), ('python 3', 13), ('recursion', 9), ('python', 8), ('java', 6), ('javascript', 5), ('bitmasking', 4), ('cpp', 4), ('dynamic programming', 4), ('back tracking', 3), ('python2', 3), ('subset sum', 3), ('c#', 2), ('c++ code', 2), ('dfs recursive', 2), ('dfs simple solution', 2), ('dp', 2), ('golang', 2), ('help needed', 2), ('knapsack', 2), ('kotlin', 2), ('pruning', 2), ('accepted solution', 1), ('backpack dp', 1), ('bit masking', 1), ('bit-mask', 1), ('bitmask', 1), ('c++ solution', 1), ('c++11', 1), ('comments', 1), ('comments added', 1), ('complexity', 1), ('cpp solution', 1), ('csharp', 1), ('detailed explanation', 1), ('dfs solution', 1), ('dfs-backtracking', 1), ('dfs-bottomup', 1), ('dyanamic programming', 1), ('easy', 1), ('easy to read', 1), ('easy to understand', 1), ('easytounderstand', 1), ('explained', 1), ('fast', 1), ('faster solution', 1), ('golang-solution', 1), ('help', 1), ('intuition', 1), ('java ac solution', 1), ('javscript', 1), ('js', 1), ('js javascript', 1), ('math', 1), ('memoization', 1), ('partitionkequalsubsets', 1), ('python3', 1), ('readable', 1), ('recrusion', 1), ('recursive', 1), ('rust', 1), ('simple', 1), ('simple solution', 1), ('simple-solution', 1), ('sorting', 1), ('swift', 1), ('test-case-too-weak', 1), ('thinking process', 1)]"
697,Degree of an Array,https://leetcode.com/problems/degree-of-an-array,"Given a non-empty array of non-negative integers nums, the degree of this array is defined as the maximum frequency of any one of its elements.

Your task is to find the smallest possible length of a (contiguous) subarray of nums, that has the same degree as nums.",['array'],Easy,1316,943,198702,108330,"[""Maximum Subarray""]","[('c++', 20), ('hashmap', 20), ('python 3', 18), ('java', 17), ('cpp', 15), ('python', 15), ('javascript', 10), ('easy', 6), ('dictionary', 5), ('easy-to-understand', 5), ('java-solution', 5), ('python3', 5), ('array', 4), ('cpp solution', 4), ('golang', 4), ('map', 4), ('c#', 3), ('easy-understanding', 3), ('hash table', 3), ('swift', 3), ('#cpp', 2), ('easy understanding', 2), ('easy-understand', 2), ('explanation', 2), ('fast', 2), ('go', 2), ('golang-solution', 2), ('hashtable', 2), ('linear complexity', 2), ('one pass solution', 2), ('ruby', 2), ('simple', 2), ('simple clear c++ solution', 2), ('unordermap', 2), ('#array', 1), ('#easiest', 1), ('#easy-understanding', 1), ('#oldschool', 1), ('arraylist', 1), ('arrays', 1), ('basic', 1), ('beginner friendly', 1), ('c++ code', 1), ('c++ solution', 1), ('c++14', 1), ('c++code', 1), ('clean code', 1), ('commented', 1), ('comments', 1), ('complexity analysis', 1), ('complexity-analysis', 1), ('counter', 1), ('cpp-solution', 1), ('dictionaries', 1), ('easiest', 1), ('easy to understand', 1), ('easy-solution', 1), ('easy-undestand', 1), ('easytounderstand', 1), ('enumeration', 1), ('explain', 1), ('explained', 1), ('fast and simple', 1), ('fast-solution', 1), ('faster then 95', 1), ('fastest', 1), ('for-loop', 1), ('frequency', 1), ('frequency count', 1), ('frequency table', 1), ('go-solution', 1), ('golang solution', 1), ('hashing', 1), ('histogram', 1), ('index', 1), ('java ac solution', 1), ('javascript solution', 1), ('javascriptes6', 1), ('kotlin', 1), ('linear time', 1), ('linear timecomplexity', 1), ('linq', 1), ('mapping', 1), ('onepass', 1), ('optimal', 1), ('pair', 1), ('question', 1), ('sandeepkumar', 1), ('sequence', 1), ('series', 1), ('simple solution', 1), ('simple-solution', 1), ('simplest', 1), ('sliding-window', 1), ('slidingwindow', 1), ('stl algorithms', 1), ('subsequence', 1), ('vector', 1)]"
696,Count Binary Substrings,https://leetcode.com/problems/count-binary-substrings,"Give a binary string s, return the number of non-empty substrings that have the same number of 0's and 1's, and all the 0's and all the 1's in these substrings are grouped consecutively.

Substrings that occur multiple times are counted the number of times they occur.",['string'],Easy,1595,275,126389,77378,"[""Encode and Decode Strings""]","[('c++', 26), ('python', 19), ('cpp', 15), ('javascript', 12), ('java', 11), ('c#', 10), ('python 3', 9), ('linear time', 8), ('string', 8), ('easy-understanding', 7), ('python3', 6), ('two-pointers', 5), ('cpp solution', 3), ('go', 3), ('golang', 3), ('linear-time', 3), ('ruby', 3), ('rust', 3), ('simple', 3), ('stack', 3), ('#easy', 2), ('#easy-understanding', 2), ('constant space', 2), ('easy-to-understand', 2), ('explained', 2), ('java-solution', 2), ('js', 2), ('linear', 2), ('one-liner', 2), ('optimal', 2), ('string-operation', 2), ('#codeboy', 1), ('#easy #java', 1), ('#easy solution', 1), ('#easy-understand', 1), ('#java', 1), ('#linear time', 1), ('#python', 1), ('#python 3', 1), ('array', 1), ('arraylist', 1), ('awesome samriddhi', 1), ('begginer friendly', 1), ('c', 1), ('c++ code', 1), ('c++ solution', 1), ('char compare', 1), ('char comparison', 1), ('clean code', 1), ('commented', 1), ('constant memory', 1), ('constant-space', 1), ('countbinarysubstrings', 1), ('countbonarysubstrings', 1), ('crazy-code', 1), ('csharp', 1), ('easy to code', 1), ('easy to understand', 1), ('easy-undestand', 1), ('es6', 1), ('explained solution', 1), ('explanation', 1), ('explanation of logic', 1), ('fast and simple', 1), ('fast-solution', 1), ('functional programming', 1), ('golang-solution', 1), ('greedy', 1), ('groupby', 1), ('iteration', 1), ('js javascript', 1), ('memory-limit-exceeded', 1), ('nested loop', 1), ('one pass', 1), ('oneline', 1), ('regexp', 1), ('ritik', 1), ('salesforce', 1), ('scala', 1), ('single-pass', 1), ('sliding window', 1), ('slidingwindow', 1), ('solution-sharing-cpp', 1), ('solved', 1), ('straightforward', 1), ('string parsing', 1), ('strings', 1), ('swift', 1), ('test-case', 1), ('two pointer approach', 1), ('typescript', 1), ('unit-test', 1), ('vector', 1), ('window', 1)]"
695,Max Area of Island,https://leetcode.com/problems/max-area-of-island,"Given a non-empty 2D array grid of 0's and 1's, an island is a group of 1's (representing land) connected 4-directionally (horizontal or vertical.) You may assume all four edges of the grid are surrounded by water.

Find the maximum area of an island in the given 2D array. (If there is no island, the maximum area is 0.)","['array', 'depth-first-search']",Medium,3024,105,361235,236078,"[""Number of Islands"", ""Island Perimeter"", ""Largest Submatrix With Rearrangements""]","[('dfs', 98), ('java', 44), ('c++', 37), ('python', 37), ('python 3', 25), ('bfs', 23), ('dfs simple solution', 21), ('cpp', 20), ('javascript', 18), ('python3', 16), ('recursion', 10), ('c#', 8), ('recursive', 7), ('depth first search', 6), ('dfs recursive', 6), ('golang', 5), ('unionfind', 5), ('dfs solution', 4), ('easy-to-understand', 4), ('easy-understanding', 4), ('easy-undestand', 4), ('recusion', 4), ('swift', 4), ('union find', 4), ('c++ code', 3), ('cpp solution', 3), ('dfs-bfs', 3), ('dfs-iterative', 3), ('graph', 3), ('iterative', 3), ('java-solution', 3), ('queue', 3), ('readable', 3), ('#dfs', 2), ('#easy-understand', 2), ('breadth first search', 2), ('depth-first-search', 2), ('dfs-non-recursive', 2), ('dfs-topdown', 2), ('easy', 2), ('easy to understand', 2), ('easytounderstand', 2), ('go', 2), ('go-solution', 2), ('golang-solution', 2), ('js javascript', 2), ('number-of-islands', 2), ('python2', 2), ('pythonpython3', 2), ('recursive-dfs', 2), ('ruby', 2), ('scala', 2), ('simple', 2), ('simple solution', 2), ('simplest', 2), ('straightforward', 2), ('#clean', 1), ('#easy-understanding', 1), ('#java', 1), ('#java #recursion', 1), ('#recursion', 1), ('#withcomments', 1), ('100 speed', 1), ('amazon interview', 1), ('amazon interview question', 1), ('array', 1), ('avnish', 1), ('backtracking', 1), ('bfs python', 1), ('breadth-first-search', 1), ('c', 1), ('c++ dfs', 1), ('c++ solution', 1), ('clean code', 1), ('clean-code', 1), ('clean-efficient-code', 1), ('clear explanation', 1), ('comments', 1), ('concise', 1), ('concise-solution', 1), ('constant memory', 1), ('dfs vs bfs', 1), ('dfs with memo', 1), ('dfs-recursive', 1), ('dictionary', 1), ('disjoint-set', 1), ('dp', 1), ('dynamic programming', 1), ('easy sloution', 1), ('easy to read', 1), ('easy understand', 1), ('easy-to-read', 1), ('easy-understand', 1), ('efficient', 1), ('explained', 1), ('explanation of logic', 1), ('faang', 1), ('fast and simple', 1), ('fast-solution', 1), ('faster', 1), ('flood-fill', 1), ('functional programming', 1), ('graph theory', 1), ('graph traversal', 1), ('graph-theory', 1), ('greedy', 1), ('grid', 1), ('hashset', 1), ('intuitive', 1), ('island', 1), ('islands', 1), ('java solution using dfs', 1), ('javscript', 1), ('js', 1), ('kotlinvim', 1), ('less memory', 1), ('linear time', 1), ('matrix', 1), ('maxareaisland', 1), ('meiyaowen', 1), ('no extra space', 1), ('number of islands', 1), ('optimized', 1), ('pair', 1), ('pyhton', 1), ('python 2', 1), ('python deque', 1), ('python dfs', 1), ('recurision', 1), ('recursive approach', 1), ('recursive easy', 1), ('recursive solution', 1), ('recusive', 1), ('short', 1), ('simple clear c++ solution', 1), ('solution', 1), ('solution-sharing-cpp', 1), ('space', 1), ('space-complexity', 1), ('space-efficient', 1), ('sparse array', 1), ('stack', 1), ('straight-forward', 1), ('time', 1), ('time-complexity', 1), ('union-find', 1), ('video explaination', 1)]"
693,Binary Number with Alternating Bits,https://leetcode.com/problems/binary-number-with-alternating-bits,"Given a positive integer, check whether it has alternating bits: namely, if two adjacent bits will always have different values.",['bit-manipulation'],Easy,623,94,124673,74867,"[""Number of 1 Bits""]","[('c++', 38), ('python', 21), ('bit manipulation', 20), ('cpp', 20), ('python 3', 17), ('java', 16), ('bit-manipulation', 10), ('easy-to-understand', 10), ('cpp solution', 8), ('python3', 8), ('easy-understanding', 7), ('javascript', 7), ('simple', 6), ('c#', 4), ('easy', 4), ('java-solution', 4), ('100 faster runtime', 3), ('binary', 3), ('xor', 3), ('bits', 2), ('bitset', 2), ('c', 2), ('cpp easy', 2), ('java bit-manipulation', 2), ('one-liner', 2), ('python2', 2), ('simplest', 2), ('#bit-manipulation', 1), ('#c++', 1), ('#cpp', 1), ('#easy-understanding', 1), ('#ruby', 1), ('0ms runtime', 1), ('1-liner', 1), ('100 memory', 1), ('algorithms', 1), ('alternative-bits', 1), ('beats 99', 1), ('best java solution', 1), ('best-solution', 1), ('best-submission', 1), ('binary conversion', 1), ('binary number', 1), ('binary-number', 1), ('bit', 1), ('bit mask', 1), ('bit operation', 1), ('bit-wise', 1), ('bitmasking', 1), ('bitwise', 1), ('c solution', 1), ('c++ code', 1), ('c++ easy to understand', 1), ('clean code', 1), ('commented', 1), ('constant memory', 1), ('cpp-solution', 1), ('easy to understand', 1), ('easy-understand', 1), ('explaination', 1), ('explained', 1), ('explanation', 1), ('fast', 1), ('fast and simple', 1), ('fast-solution', 1), ('faster', 1), ('faster than 100', 1), ('go', 1), ('golang', 1), ('iteration', 1), ('iterative', 1), ('java ac solution', 1), ('java reverse int', 1), ('java stringtoint', 1), ('java-8', 1), ('java-zigzag', 1), ('kotlin', 1), ('loop', 1), ('manipulation', 1), ('maths', 1), ('mrmagician', 1), ('one line', 1), ('php', 1), ('regex', 1), ('ruby', 1), ('short', 1), ('short c++ code', 1), ('simple-solution', 1), ('stack-based', 1), ('straightforward', 1), ('string', 1), ('swift', 1), ('upvote', 1), ('vectors', 1), ('very easy to understand', 1)]"
692,Top K Frequent Words,https://leetcode.com/problems/top-k-frequent-words,"Given a non-empty list of words, return the k most frequent elements.
Your answer should be sorted by frequency from highest to lowest. If two words have the same frequency, then the word with the lower alphabetical order comes first.","['hash-table', 'heap', 'trie']",Medium,2953,195,516033,275195,"[""Top K Frequent Elements"", ""K Closest Points to Origin"", ""Sort Features by Popularity""]","[('priority queue', 50), ('hashmap', 45), ('c++', 44), ('java', 40), ('python 3', 36), ('python', 35), ('heap', 34), ('cpp', 29), ('javascript', 22), ('python3', 16), ('c#', 15), ('sorting', 12), ('cpp solution', 10), ('map', 10), ('bucket sort', 9), ('heapq', 8), ('trie', 8), ('swift', 7), ('java-solution', 6), ('min heap', 6), ('priority-queue', 6), ('golang', 5), ('hashing', 5), ('kotlin', 5), ('linq', 5), ('priorityqueue', 5), ('simple solution', 5), ('comparator', 4), ('heaps', 4), ('js', 4), ('simple', 4), ('bucket-sort', 3), ('c', 3), ('clean code', 3), ('easy', 3), ('easy-understanding', 3), ('java 8', 3), ('java ac solution', 3), ('min-heap', 3), ('nlogk', 3), ('partial sort', 3), ('quick select', 3), ('ruby', 3), ('sets', 3), ('sorted array', 3), ('sortedset', 3), ('topkfrequestwords', 3), ('tries', 3), ('unordered map', 3), ('8ms', 2), ('bucket', 2), ('buckets', 2), ('c++ code', 2), ('counter', 2), ('csharp', 2), ('dictionary', 2), ('easy-undestand', 2), ('easytounderstand', 2), ('es6', 2), ('fast-solution', 2), ('go', 2), ('golang-solution', 2), ('greedy', 2), ('hash table', 2), ('hash-table', 2), ('iterative', 2), ('lambda', 2), ('max heap', 2), ('maxheap', 2), ('python2', 2), ('queue', 2), ('quick-selection', 2), ('resources', 2), ('scala', 2), ('solution', 2), ('sort', 2), ('sort-function', 2), ('swift5', 2), ('1-liner', 1), ('100 speed', 1), ('3 lines', 1), ('692', 1), ('algorithms', 1), ('avnish', 1), ('beginners', 1), ('binary search tree', 1), ('brute force', 1), ('c++ hash', 1), ('c++ solution', 1), ('clean', 1), ('clean solution', 1), ('commented', 1), ('comments', 1), ('complex', 1), ('consice', 1), ('cpp easy', 1), ('diagrams', 1), ('dict', 1), ('dictionaries', 1), ('dictionary c#', 1), ('easiest solution', 1), ('easy understanding', 1), ('easy-to-understand', 1), ('easy-understand', 1), ('efficient solution', 1), ('expalanation', 1), ('explaination', 1), ('explained', 1), ('explained solution', 1), ('explanation of logic', 1), ('fast and simple', 1), ('faster', 1), ('faster than 100', 1), ('four-line-code', 1), ('frequency-count', 1), ('functional', 1), ('functional-programming', 1), ('functorsorting', 1), ('go-solution', 1), ('golang solution', 1), ('hashset', 1), ('hasmap', 1), ('heapify', 1), ('heapsort', 1), ('help me', 1), ('help needed', 1), ('ill give you mushrooms', 1), ('illustration', 1), ('images', 1), ('interface', 1), ('interview-friendly', 1), ('java8', 1), ('java9', 1), ('javasacript', 1), ('javascrip', 1), ('javascript heap', 1), ('js javascript', 1), ('kotlin-solution', 1), ('kotlinvim', 1), ('kth largest element', 1), ('lambda expression', 1), ('less memory', 1), ('linear memory', 1), ('linear-space', 1), ('linear-time', 1), ('list comprehension', 1), ('logarithmic time', 1), ('map-stl', 1), ('maps', 1), ('max-heap', 1), ('minheap', 1), ('mrmagician', 1), ('ologn', 1), ('one-liner', 1), ('oneline', 1), ('optimal', 1), ('optimized', 1), ('pair', 1), ('php', 1), ('python-3', 1), ('quick', 1), ('quick sort', 1), ('quick-sort', 1), ('readable', 1), ('recursive', 1), ('set', 1), ('short', 1), ('short code', 1), ('shortest', 1), ('simple clear c++ solution', 1), ('simple-solution', 1), ('sorted dictionary', 1), ('sorted-map', 1), ('space-optimized', 1), ('stl', 1), ('streams', 1), ('structured', 1), ('techbacker', 1), ('topkelements', 1), ('topkfrequentwords', 1), ('treeset', 1), ('trie explained', 1), ('trie-dfs', 1), ('unique', 1), ('unordered-map', 1)]"
691,Stickers to Spell Word,https://leetcode.com/problems/stickers-to-spell-word,"We are given n different types of stickers. Each sticker has a lowercase English word on it.

You would like to spell out the given string target by cutting individual letters from your collection of stickers and rearranging them. You can use each sticker more than once if you want, and you have infinite quantities of each sticker.

Return the minimum number of stickers that you need to spell out target. If the task is impossible, return -1.

Note: In all test cases, all words were chosen randomly from the 1000 most common US English words, and target was chosen as a concatenation of two random words.","['dynamic-programming', 'backtracking']",Hard,506,47,45820,20788,"[""Ransom Note""]","[('dynamic programming', 6), ('c++', 5), ('backtracking', 3), ('bfs', 3), ('cpp', 2), ('dfs', 2), ('java', 2), ('memoization', 2), ('01 knapsack', 1), ('backpack dp', 1), ('bit manipulation', 1), ('bitmask', 1), ('c#', 1), ('deep-first-search', 1), ('dfs with memo', 1), ('dp', 1), ('fastest', 1), ('golang', 1), ('greedy', 1), ('hash-function', 1), ('heuristic', 1), ('javascript', 1), ('memo', 1), ('pruning', 1), ('recursion', 1), ('solution-sharing-python', 1), ('timeout', 1)]"
690,Employee Importance,https://leetcode.com/problems/employee-importance,"You are given a data structure of employee information, which includes the employee's unique id, their importance value and their direct subordinates' id.

For example, employee 1 is the leader of employee 2, and employee 2 is the leader of employee 3. They have importance value 15, 10 and 5, respectively. Then employee 1 has a data structure like [1, 15, [2]], and employee 2 has [2, 10, [3]], and employee 3 has [3, 5, []]. Note that although employee 3 is also a subordinate of employee 1, the relationship is not direct.

Now given the employee information of a company, and an employee id, you need to return the total importance value of this employee and all their subordinates.","['hash-table', 'depth-first-search', 'breadth-first-search']",Easy,989,896,193400,114351,"[""Nested List Weight Sum""]","[('c++', 27), ('hashmap', 25), ('dfs', 24), ('bfs', 23), ('javascript', 21), ('java', 18), ('python', 17), ('python 3', 17), ('cpp', 12), ('python3', 12), ('queue', 9), ('java-solution', 8), ('recursive', 7), ('recursion', 6), ('stack', 5), ('breadth first search', 4), ('c#', 4), ('depth first search', 4), ('easy', 4), ('iterative', 4), ('breadth-first-search', 3), ('comments', 3), ('easy-understanding', 3), ('golang', 3), ('ruby', 3), ('simple', 3), ('stacks', 3), ('bfs simple solution', 2), ('dfs solution', 2), ('dictionary', 2), ('easy to understand', 2), ('intuitive', 2), ('javascript solution', 2), ('simple solution', 2), ('unordered map', 2), ('unorderedmap', 2), ('upvote', 2), ('#javascript', 1), ('#recursion', 1), ('100', 1), ('99.73 faster', 1), ('backtracking', 1), ('beginner friendly', 1), ('bfs vs dfs', 1), ('binary search', 1), ('bug report', 1), ('c++ hash', 1), ('c++ set', 1), ('clean code', 1), ('clean-efficient-code', 1), ('clear', 1), ('comparator', 1), ('cpp solution', 1), ('depth-first-search', 1), ('detailed explanation', 1), ('dfs simple solution', 1), ('dfs-non-recursive', 1), ('easy to read', 1), ('easy-to-understand', 1), ('easy-undestand', 1), ('easysolution', 1), ('easytounderstand', 1), ('error', 1), ('explained', 1), ('fast and simple', 1), ('faster', 1), ('go', 1), ('golang-solution', 1), ('google', 1), ('graph', 1), ('hash map', 1), ('hash-table', 1), ('hashing', 1), ('hashtable', 1), ('helper', 1), ('intutive', 1), ('iteration', 1), ('iterative approch', 1), ('iterative-dfs', 1), ('javascript-solution', 1), ('joke', 1), ('kotlin', 1), ('less space', 1), ('linked list', 1), ('linkedlists', 1), ('map', 1), ('map in c++', 1), ('mrmagician', 1), ('php', 1), ('php solution', 1), ('pyhton', 1), ('python2', 1), ('recusive', 1), ('rust', 1), ('self-explanatory', 1), ('set', 1), ('solution-sharing-cpp', 1), ('sort', 1), ('typescript', 1), ('ultra simple', 1), ('unordered set', 1)]"
689,Maximum Sum of 3 Non-Overlapping Subarrays,https://leetcode.com/problems/maximum-sum-of-3-non-overlapping-subarrays,"Given an integer array nums and an integer k, find three non-overlapping subarrays of length k with maximum sum and return them.

Return the result as a list of indices representing the starting position of each interval (0-indexed). If there are multiple answers, return the lexicographically smallest one.","['array', 'dynamic-programming']",Hard,1226,81,113416,53745,"[""Best Time to Buy and Sell Stock III""]","[('dynamic programming', 9), ('c++', 7), ('dp', 6), ('cpp', 3), ('python', 3), ('python 3', 3), ('c#', 2), ('c++ code', 2), ('cpp solution', 2), ('javascript', 2), ('backtacking', 1), ('bottom-up', 1), ('buysell', 1), ('c++14', 1), ('concise', 1), ('dfs', 1), ('dp c++', 1), ('dp python', 1), ('dynamic-programming', 1), ('easy', 1), ('easysolution', 1), ('fast and simple', 1), ('fast-solution', 1), ('general', 1), ('java', 1), ('prefix array', 1), ('prefix sum', 1), ('python3', 1), ('recursive', 1), ('simplest', 1), ('sliding window', 1), ('sliding-window', 1), ('stocks', 1), ('suffix-array', 1), ('top down dp', 1)]"
688,Knight Probability in Chessboard,https://leetcode.com/problems/knight-probability-in-chessboard,"On an n x n chessboard, a knight starts at the cell (row, column) and attempts to make exactly k moves. The rows and columns are 0-indexed, so the top-left cell is (0, 0), and the bottom-right cell is (n - 1, n - 1).

A chess knight has eight possible moves it can make, as illustrated below. Each move is two cells in a cardinal direction, then one cell in an orthogonal direction.

Each time the knight is to move, it chooses one of eight possible moves uniformly at random (even if the piece would go off the chessboard) and moves there.

The knight continues moving until it has made exactly k moves or has moved off the chessboard.

Return the probability that the knight remains on the board after it has stopped moving.",['dynamic-programming'],Medium,1266,236,118791,59807,"[""Out of Boundary Paths""]","[('dynamic programming', 17), ('memoization', 17), ('python', 15), ('c++', 12), ('dp', 11), ('cpp', 8), ('java', 8), ('python 3', 8), ('bfs', 7), ('dynamic-programming', 5), ('easy-to-understand', 5), ('javascript', 5), ('concise', 4), ('dfs', 4), ('recursion', 4), ('c#', 3), ('python3', 3), ('c++ code', 2), ('easy-understanding', 2), ('fast', 2), ('golang', 2), ('java-solution', 2), ('recurision', 2), ('swift', 2), ('backtacking', 1), ('backtracking', 1), ('board-scan', 1), ('bottom up', 1), ('bottoms-up', 1), ('bottomup', 1), ('brute force', 1), ('c++ ac', 1), ('consice', 1), ('cplusplus', 1), ('dfs simple solution', 1), ('dictionary', 1), ('doubt', 1), ('dyanamic programming', 1), ('fast-solution', 1), ('general', 1), ('iteration vs recursion', 1), ('java ac solution', 1), ('knight problem', 1), ('knight walk problem', 1), ('kotlin', 1), ('map', 1), ('matrix', 1), ('memoize', 1), ('memory-limited-exceeded', 1), ('queue', 1), ('recursion memoization', 1), ('recursive', 1), ('recursive dfs', 1), ('recursive equation', 1), ('recursive solution', 1), ('recusion', 1), ('scala', 1), ('short', 1), ('short code', 1), ('simple', 1), ('simple solution', 1), ('tabulation', 1), ('template', 1), ('tle', 1), ('top down', 1), ('top down dp', 1), ('topdown', 1), ('without memoization', 1)]"
687,Longest Univalue Path,https://leetcode.com/problems/longest-univalue-path,"Given the root of a binary tree, return the length of the longest path, where each node in the path has the same value. This path may or may not pass through the root.

The length of the path between two nodes is represented by the number of edges between them.","['tree', 'recursion']",Medium,2277,557,302927,114078,"[""Binary Tree Maximum Path Sum"", ""Count Univalue Subtrees"", ""Path Sum III""]","[('dfs', 18), ('c++', 16), ('recursion', 16), ('python', 10), ('easy-understanding', 7), ('binary-tree', 6), ('cpp', 6), ('python3', 6), ('javascript', 5), ('python 3', 5), ('cpp solution', 4), ('c#', 3), ('easy-to-understand', 3), ('java', 3), ('java-solution', 3), ('postorder-traversal', 3), ('recursive', 3), ('binary tree', 2), ('golang', 2), ('longest univalue path', 2), ('problem 687', 2), ('recusion', 2), ('tree', 2), ('tree traversal', 2), ('tree-traversal', 2), ('trees', 2), ('#dfs', 1), ('#longestunivaluepath', 1), ('100 efficient', 1), ('100 faster runtime', 1), ('100 memory', 1), ('100 space', 1), ('100 speed', 1), ('algorithms', 1), ('bottom-up approach', 1), ('bst', 1), ('c++ code', 1), ('check parent', 1), ('dfs simple solution', 1), ('dfs-tree', 1), ('diameter', 1), ('easy', 1), ('easy java solution', 1), ('easy to understant', 1), ('explanation', 1), ('facebook', 1), ('fastest', 1), ('fastest c++ solution', 1), ('give stars and subscribe', 1), ('go', 1), ('go-solution', 1), ('golang-solution', 1), ('help me', 1), ('iterative', 1), ('java ac solution', 1), ('js', 1), ('js javascript', 1), ('linear time', 1), ('longest-univalue-path', 1), ('mark tree node', 1), ('maximum path sum', 1), ('pair', 1), ('path to parent node', 1), ('post order traversal', 1), ('post-order-traversal', 1), ('postorder traversal', 1), ('python2', 1), ('recurision', 1), ('recursive approach', 1), ('recursive-descent', 1), ('recursively', 1), ('recurssion', 1), ('ruby', 1), ('sandeepkumar', 1), ('simple', 1), ('solution-sharing-cpp', 1), ('two solutions', 1), ('typescript', 1), ('univalued-binary-tree', 1)]"
686,Repeated String Match,https://leetcode.com/problems/repeated-string-match,"Given two strings a and b, return the minimum number of times you should repeat string a so that string b is a substring of it. If it is impossible for b​​​​​​ to be a substring of a after repeating it, return -1.

Notice: string ""abc"" repeated 0 times is """",  repeated 1 time is ""abc"" and repeated 2 times is ""abcabc"".",['string'],Medium,1023,841,322423,106059,"[""Repeated Substring Pattern""]","[('cpp', 11), ('python', 11), ('c++', 10), ('kmp', 10), ('python 3', 9), ('java', 8), ('javascript', 7), ('c#', 5), ('golang', 4), ('kmp algorithm', 4), ('c++11', 3), ('easy-understanding', 3), ('java-solution', 3), ('python3', 3), ('binary search', 2), ('failure function', 2), ('go-solution', 2), ('golang-solution', 2), ('rabin-karp', 2), ('simple solution', 2), ('string', 2), ('stringbuilder', 2), ('unit-test', 2), ('100 faster', 1), ('100 space', 1), ('90+faster', 1), ('algorithms', 1), ('basic', 1), ('beginner friendly', 1), ('brute force to optimal', 1), ('bug-test-case', 1), ('c', 1), ('c#-solution', 1), ('c++17', 1), ('cpp solution', 1), ('csharp', 1), ('doubts', 1), ('easy', 1), ('easy understanding', 1), ('easy-to-understand', 1), ('easy-undestand', 1), ('explained', 1), ('explanation', 1), ('fast and simple', 1), ('go', 1), ('google', 1), ('modulo', 1), ('python2', 1), ('readable', 1), ('recursive easy', 1), ('rolling-hash', 1), ('ruby', 1), ('short', 1), ('short solution', 1), ('simple', 1), ('solution-sharing-cpp', 1), ('stl', 1), ('swift', 1)]"
685,Redundant Connection II,https://leetcode.com/problems/redundant-connection-ii,"In this problem, a rooted tree is a directed graph such that, there is exactly one node (the root) for which all other nodes are descendants of this node, plus every node has exactly one parent, except for the root node which has no parents.

The given input is a directed graph that started as a rooted tree with n nodes (with distinct values from 1 to n), with one additional directed edge added. The added edge has two different vertices chosen from 1 to n, and was not an edge that already existed.

The resulting graph is given as a 2D-array of edges. Each element of edges is a pair [ui, vi] that represents a directed edge connecting nodes ui and vi, where ui is a parent of child vi.

Return an edge that can be removed so that the resulting graph is a rooted tree of n nodes. If there are multiple answers, return the answer that occurs last in the given 2D-array.","['tree', 'depth-first-search', 'union-find', 'graph']",Hard,1080,244,128234,42557,"[""Redundant Connection""]","[('java', 10), ('union find', 7), ('c++', 5), ('dfs', 5), ('graph', 5), ('python', 3), ('unionfind', 3), ('c#', 2), ('c++ union find', 2), ('concise-solution', 2), ('cpp', 2), ('easy', 2), ('expalanation', 2), ('bruteforce', 1), ('c++ easy to understand', 1), ('clean', 1), ('dfs recursive', 1), ('dfs simple solution', 1), ('disjoint sets', 1), ('easy to understand', 1), ('easy-understanding', 1), ('easy-undestand', 1), ('explaination', 1), ('hashmap', 1), ('high performance', 1), ('java-solution', 1), ('javascript', 1), ('kruskals algorithm', 1), ('mother vertex', 1), ('python 3', 1), ('question', 1), ('questions', 1), ('short code', 1), ('tree', 1), ('wrong-answer-javascript', 1)]"
684,Redundant Connection,https://leetcode.com/problems/redundant-connection,"In this problem, a tree is an undirected graph that is connected and has no cycles.

The given input is a graph that started as a tree with N nodes (with distinct values 1, 2, ..., N), with one additional edge added.  The added edge has two different vertices chosen from 1 to N, and was not an edge that already existed.

The resulting graph is given as a 2D-array of edges.  Each element of edges is a pair [u, v] with u , that represents an undirected edge connecting nodes u and v.

Return an edge that can be removed so that the resulting graph is a tree of N nodes.  If there are multiple answers, return the answer that occurs last in the given 2D-array.  The answer edge [u, v] should be in the same format, with u .","['tree', 'union-find', 'graph']",Medium,2063,249,216610,128300,"[""Redundant Connection II"", ""Accounts Merge""]","[('union find', 71), ('c++', 40), ('java', 30), ('union-find', 21), ('dfs', 19), ('unionfind', 19), ('cpp', 16), ('python', 13), ('graph', 12), ('javascript', 10), ('python 3', 10), ('dsu', 9), ('java-solution', 9), ('cpp solution', 5), ('c#', 4), ('dfs simple solution', 4), ('easy-understanding', 4), ('swift', 4), ('union-by-rank', 4), ('#unionfind', 3), ('c++ code', 3), ('easy', 3), ('easy-to-understand', 3), ('explaination', 3), ('kruskals algorithm', 3), ('brute force', 2), ('clean code', 2), ('cpp easy', 2), ('disjoint sets', 2), ('disjoint-set', 2), ('disjointset', 2), ('go', 2), ('golang', 2), ('path compression', 2), ('rajat', 2), ('redundantconnection', 2), ('ruby', 2), ('#cpp', 1), ('#simplest', 1), ('100 faster cpp', 1), ('ac', 1), ('akku', 1), ('arrays', 1), ('awesome samriddhi', 1), ('backtracking', 1), ('backward edge', 1), ('beginnerfriendly', 1), ('bfs with prev path map', 1), ('bridges', 1), ('c++11', 1), ('c++14', 1), ('concise', 1), ('cycle detection', 1), ('detailed explanation', 1), ('dfs solution', 1), ('disjoint set', 1), ('dsu for graphs', 1), ('easy to understand', 1), ('easytounderstand', 1), ('explained solution', 1), ('explanation', 1), ('explanation with code', 1), ('fast and easy', 1), ('fast and simple', 1), ('faster', 1), ('fasterthan100', 1), ('functional', 1), ('golang-solution', 1), ('google interview', 1), ('graphs', 1), ('incorrect-test-case', 1), ('intuitive', 1), ('intutive', 1), ('iteration', 1), ('java ac solution', 1), ('java solution', 1), ('javascrip', 1), ('javascript solution', 1), ('kotlin', 1), ('kotlinvim', 1), ('linear time', 1), ('linear-time', 1), ('memory efficient', 1), ('notes', 1), ('path-compression', 1), ('pictures', 1), ('pyhton', 1), ('python easy', 1), ('python3', 1), ('queue', 1), ('quick-union', 1), ('rank', 1), ('ritik', 1), ('scala', 1), ('set-union', 1), ('sets', 1), ('simple', 1), ('simple java solution', 1), ('simple solution', 1), ('solution', 1), ('tarjan', 1), ('typescript', 1), ('undirected graph', 1), ('union and find', 1), ('union by rank', 1), ('visualization', 1)]"
682,Baseball Game,https://leetcode.com/problems/baseball-game,"You are keeping score for a baseball game with strange rules. The game consists of several rounds, where the scores of past rounds may affect future rounds' scores.

At the beginning of the game, you start with an empty record. You are given a list of strings ops, where ops[i] is the ith operation you must apply to the record and is one of the following:


	An integer x - Record a new score of x.
	""+"" - Record a new score that is the sum of the previous two scores. It is guaranteed there will always be two previous scores.
	""D"" - Record a new score that is double the previous score. It is guaranteed there will always be a previous score.
	""C"" - Invalidate the previous score, removing it from the record. It is guaranteed there will always be a previous score.


Return the sum of all the scores on the record.",['stack'],Easy,720,1221,169693,114618,"[""Crawler Log Folder""]","[('stack', 37), ('c++', 26), ('python 3', 23), ('java', 21), ('stacks', 18), ('python', 16), ('javascript', 14), ('java-solution', 10), ('python3', 9), ('cpp', 8), ('easy', 6), ('golang', 5), ('c#', 4), ('golang-solution', 4), ('swift', 4), ('vector', 4), ('c', 3), ('cpp solution', 3), ('easy-to-understand', 3), ('easy-understanding', 3), ('go-solution', 3), ('javascript solution', 3), ('ruby', 3), ('easy to understand', 2), ('fast-solution', 2), ('faster', 2), ('java ac solution', 2), ('rust', 2), ('simple', 2), ('simple solution', 2), ('stack-based', 2), ('100', 1), ('2 line python solution', 1), ('3 lines python', 1), ('accumulate', 1), ('adding stack', 1), ('algorithms', 1), ('amazon online assesment', 1), ('approach', 1), ('array', 1), ('atoi', 1), ('baseballgame', 1), ('c++ easy', 1), ('clean code', 1), ('code', 1), ('deque', 1), ('easy-solution', 1), ('easybasic', 1), ('easytounderstand', 1), ('fast', 1), ('js', 1), ('js javascript', 1), ('kotlin', 1), ('less memory', 1), ('list', 1), ('mrmagician', 1), ('onepass', 1), ('racket', 1), ('reduce', 1), ('scheme', 1), ('simple-solution', 1), ('simplified', 1), ('slice', 1), ('solution', 1), ('solution-python', 1), ('solution-sharing-cpp', 1), ('stack-implementation', 1), ('stack-operation', 1), ('stackoverflow', 1), ('stl', 1), ('stoi', 1), ('straightforward', 1), ('string', 1), ('ultra easy', 1), ('upvote', 1), ('wrong judgement', 1)]"
680,Valid Palindrome II,https://leetcode.com/problems/valid-palindrome-ii,"Given a non-empty string s, you may delete at most one character.  Judge whether you can make it a palindrome.",['string'],Easy,2551,163,702549,261134,"[""Valid Palindrome""]","[('java', 35), ('c++', 25), ('python 3', 22), ('javascript', 21), ('python', 21), ('cpp', 20), ('two-pointers', 20), ('c#', 13), ('palindrome', 12), ('java-solution', 10), ('recursion', 10), ('easy-understanding', 9), ('golang', 8), ('python3', 6), ('two pointers', 6), ('simple', 5), ('cpp solution', 4), ('palindrome-check', 4), ('an7one', 3), ('clean code', 3), ('csharp', 3), ('easy', 3), ('easy-to-understand', 3), ('go', 3), ('high-low-pointers', 3), ('recursion palindrome', 3), ('recursive solution', 3), ('swift', 3), ('back tracking', 2), ('best', 2), ('c', 2), ('clean', 2), ('easytounderstand', 2), ('iteration', 2), ('iterative', 2), ('iteratively', 2), ('javascript solution', 2), ('readable', 2), ('recursive', 2), ('recusion', 2), ('ruby', 2), ('rust', 2), ('short', 2), ('simple solution', 2), ('two-pointer', 2), ('#easy-understanding', 1), ('#python', 1), ('100-faster', 1), ('2 pointers', 1), ('2-pointers', 1), ('2pointers', 1), ('algorithms', 1), ('beats 100', 1), ('bfs', 1), ('bfs+dfs', 1), ('c#-solution', 1), ('c++ code', 1), ('c++ solution', 1), ('c++11', 1), ('clear', 1), ('concise', 1), ('concise-solution', 1), ('cpp-solution', 1), ('dfs', 1), ('easiest', 1), ('easy-understand', 1), ('easy-undestand', 1), ('easyiest solution', 1), ('explained', 1), ('explanation', 1), ('explanation with code', 1), ('explanatory comments', 1), ('facebook', 1), ('fast', 1), ('fast-solution', 1), ('faster', 1), ('faster than 100.00', 1), ('fastest', 1), ('follow-up', 1), ('generalized', 1), ('go-solution', 1), ('golang-solution', 1), ('good variable names', 1), ('implementation', 1), ('intutive', 1), ('java solution', 1), ('java string builder', 1), ('kotlin', 1), ('kotlin-solution', 1), ('kotlinvim', 1), ('linear', 1), ('linear time', 1), ('linear-time', 1), ('naive approach', 1), ('optimal', 1), ('pointer', 1), ('proof', 1), ('python2', 1), ('recursive easy', 1), ('recusrive', 1), ('short code', 1), ('simple clear c++ solution', 1), ('sliding window', 1), ('solution c++', 1), ('solution-sharing-cpp', 1), ('space-efficient', 1), ('straight-forward', 1), ('string', 1), ('strings', 1), ('strings manipulation', 1), ('structured code', 1), ('subpalindrome', 1), ('substring', 1), ('test-case-too-weak', 1), ('test-cases', 1), ('time-limit-exceeded-java', 1), ('twopointer', 1), ('ultra easy', 1), ('unit-test', 1), ('valid-palindrome', 1)]"
679,24 Game,https://leetcode.com/problems/24-game,"You have 4 cards each containing a number from 1 to 9.  You need to judge whether they could operated through *, /, +, -, (, ) to get the value of 24.",['depth-first-search'],Hard,918,185,105410,49919,[],"[('javascript', 5), ('backtracking', 4), ('python', 4), ('python 3', 4), ('efficient', 3), ('java', 3), ('brute force', 2), ('dfs', 2), ('easy-understanding', 2), ('lol', 2), ('python3', 2), ('c++', 1), ('cheat', 1), ('combination', 1), ('dfs simple solution', 1), ('dfs solution', 1), ('easy-to-understand', 1), ('efficient solution', 1), ('fastest', 1), ('iteration', 1), ('iteratve', 1), ('itertools', 1), ('javascript solution', 1), ('joke', 1), ('non-recursion', 1), ('one line', 1), ('one-liner', 1), ('permutations', 1), ('precacluation', 1), ('recursion', 1), ('scala', 1), ('simpe', 1), ('simple', 1), ('swift', 1)]"
678,Valid Parenthesis String,https://leetcode.com/problems/valid-parenthesis-string,"Given a string s containing only three types of characters: '(', ')' and '*', return true if s is valid.

The following rules define a valid string:


	Any left parenthesis '(' must have a corresponding right parenthesis ')'.
	Any right parenthesis ')' must have a corresponding left parenthesis '('.
	Left parenthesis '(' must go before the corresponding right parenthesis ')'.
	'*' could be treated as a single right parenthesis ')' or a single left parenthesis '(' or an empty string """".",['string'],Medium,2370,67,418270,132988,"[""Special Binary String""]","[('c++', 24), ('stacks', 21), ('python', 20), ('java', 17), ('javascript', 12), ('cpp', 11), ('python 3', 11), ('stack', 11), ('linear', 9), ('c#', 6), ('python3', 6), ('easy-to-understand', 5), ('easy-understanding', 5), ('greedy', 5), ('linear time', 5), ('recursion', 5), ('stack-based', 5), ('dp', 4), ('golang', 4), ('memoization', 4), ('c++ code', 3), ('dynamic programming', 3), ('easy', 3), ('easytounderstand', 3), ('explained', 3), ('fast', 3), ('java-solution', 3), ('count', 2), ('cpp easy', 2), ('cpp solution', 2), ('csharp', 2), ('easy-undestand', 2), ('js', 2), ('lru-cache', 2), ('on', 2), ('simple', 2), ('simple solution', 2), ('string', 2), ('top down dp', 2), ('#java', 1), ('0ms', 1), ('0ms runtime', 1), ('100', 1), ('100 faster runtime', 1), ('back tracking', 1), ('backtracking', 1), ('begineer', 1), ('beginner', 1), ('big o', 1), ('bit-manipulation', 1), ('brute force', 1), ('commetend', 1), ('compact', 1), ('constant space', 1), ('cpp doubt', 1), ('doubts', 1), ('easy-to-follow', 1), ('explaination', 1), ('faster than 90', 1), ('golang-solution', 1), ('greedy approach', 1), ('help needed', 1), ('issue', 1), ('iteration', 1), ('iterative', 1), ('javascript solution', 1), ('kotlin', 1), ('linear memory', 1), ('linear solution', 1), ('linearscan', 1), ('linked-list', 1), ('linkedlists', 1), ('not working', 1), ('one pass', 1), ('parantheses', 1), ('query', 1), ('reccursion', 1), ('recusion', 1), ('rust', 1), ('short', 1), ('simple clear c++ solution', 1), ('state-machine', 1), ('swift', 1), ('switch-case', 1), ('top down', 1), ('topdown', 1), ('two stack', 1), ('validparenthesisstring', 1), ('with explanation', 1)]"
677,Map Sum Pairs,https://leetcode.com/problems/map-sum-pairs,"Implement the MapSum class:


	MapSum() Initializes the MapSum object.
	void insert(String key, int val) Inserts the key-val pair into the map. If the key already existed, the original key-value pair will be overridden to the new one.
	int sum(string prefix) Returns the sum of all the pairs' value whose key starts with the prefix.",['trie'],Medium,654,94,94777,51415,[],"[('trie', 26), ('c++', 17), ('cpp', 10), ('tries', 8), ('javascript', 7), ('python', 7), ('java', 6), ('python 3', 6), ('hashmap', 5), ('golang', 3), ('dict', 2), ('easy', 2), ('easy-to-understand', 2), ('simple solution', 2), ('100 memory', 1), ('binary search tree', 1), ('c#', 1), ('c++ code', 1), ('clean code', 1), ('comments', 1), ('custom class', 1), ('easy to understand', 1), ('easy-understanding', 1), ('easy-undestand', 1), ('es6', 1), ('exception handling', 1), ('filter', 1), ('intuitive', 1), ('java-solution', 1), ('map', 1), ('optimized', 1), ('php', 1), ('prefixsums', 1), ('python3', 1), ('pythonpython3', 1), ('ruby', 1), ('rust', 1), ('self explanatory', 1), ('set', 1), ('simple', 1), ('smart pointer', 1), ('stack', 1), ('too easy', 1), ('trie-dfs', 1), ('trie-in-c++', 1), ('trie-tree', 1), ('ultra easy', 1), ('unorderedmap', 1), ('upvote', 1)]"
676,Implement Magic Dictionary,https://leetcode.com/problems/implement-magic-dictionary,"Design a data structure that is initialized with a list of different words. Provided a string, you should determine if you can change exactly one character in this string to match any word in the data structure.

Implement the MagicDictionary class:


	MagicDictionary() Initializes the object.
	void buildDict(String[] dictionary) Sets the data structure with an array of distinct strings dictionary.
	bool search(String searchWord) Returns true if you can change exactly one character in searchWord to match any string in the data structure, otherwise returns false.","['hash-table', 'trie']",Medium,732,160,89482,49605,"[""Implement Trie (Prefix Tree)"", ""Longest Word in Dictionary""]","[('trie', 20), ('python', 12), ('c++', 9), ('javascript', 8), ('cpp', 7), ('python 3', 7), ('java', 6), ('python3', 6), ('dfs', 5), ('tries', 4), ('backtracking', 3), ('clean code', 3), ('easy-understanding', 2), ('golang', 2), ('hash-table', 2), ('hashmap', 2), ('hashset', 2), ('recursion', 2), ('set', 2), ('swift', 2), ('c#', 1), ('c++ solution', 1), ('c++11', 1), ('concise', 1), ('cpp solution', 1), ('dict', 1), ('dictionary comprehension', 1), ('easy', 1), ('easy-to-understand', 1), ('effiecinet', 1), ('explain', 1), ('explanations', 1), ('fastest', 1), ('graph', 1), ('graph theory', 1), ('hash table', 1), ('hashing', 1), ('interview', 1), ('intuitional', 1), ('java-solution', 1), ('javascript solution', 1), ('map', 1), ('rajat', 1), ('recurision', 1), ('ruby', 1), ('rust', 1), ('sets', 1), ('simple solution', 1), ('stack', 1), ('string-operation', 1), ('time-complexity', 1), ('tree traversal', 1), ('trie-dfs', 1), ('tries in c++', 1), ('unorderedset', 1), ('vector', 1), ('video-explanation', 1)]"
675,Cut Off Trees for Golf Event,https://leetcode.com/problems/cut-off-trees-for-golf-event,"You are asked to cut off all the trees in a forest for a golf event. The forest is represented as an m x n matrix. In this matrix:


	0 means the cell cannot be walked through.
	1 represents an empty cell that can be walked through.
	A number greater than 1 represents a tree in a cell that can be walked through, and this number is the tree's height.


In one step, you can walk in any of the four directions: north, east, south, and west. If you are standing in a cell with a tree, you can choose whether to cut it off.

You must cut off the trees in order from shortest to tallest. When you cut off a tree, the value at its cell becomes 1 (an empty cell).

Starting from the point (0, 0), return the minimum steps you need to walk to cut off all the trees. If you cannot cut off all the trees, return -1.

You are guaranteed that no two trees have the same height, and there is at least one tree needs to be cut off.",['breadth-first-search'],Hard,675,397,121207,43030,[],"[('bfs', 20), ('c#', 6), ('c++', 5), ('javascript', 5), ('python', 5), ('priority queue', 4), ('python 3', 4), ('breadth first search', 3), ('java', 3), ('python3', 2), ('testcase-wrong', 2), ('a-star search', 1), ('astar', 1), ('commented', 1), ('cpp', 1), ('cpp solution', 1), ('cumulative sum', 1), ('dp', 1), ('easy-understand', 1), ('go-solution', 1), ('golang', 1), ('golang-solution', 1), ('heap', 1), ('help', 1), ('java ac solution', 1), ('java-solution', 1), ('simple solution', 1), ('solution-sharing-cpp', 1), ('sort', 1), ('sortedset', 1), ('swift', 1), ('testcase', 1), ('testcase error', 1), ('testcase-wrong-and-not', 1), ('testcases', 1), ('tle solved', 1), ('wrong output', 1)]"
674,Longest Continuous Increasing Subsequence,https://leetcode.com/problems/longest-continuous-increasing-subsequence,"Given an unsorted array of integers nums, return the length of the longest continuous increasing subsequence (i.e. subarray). The subsequence must be strictly increasing.

A continuous increasing subsequence is defined by two indices l and r (l < r) such that it is [nums[l], nums[l + 1], ..., nums[r - 1], nums[r]] and for each l <= i < r, nums[i] < nums[i + 1].",['array'],Easy,1155,143,317382,146035,"[""Number of Longest Increasing Subsequence"", ""Minimum Window Subsequence""]","[('java', 23), ('python', 18), ('python 3', 18), ('c++', 16), ('cpp', 16), ('javascript', 15), ('java-solution', 9), ('linear time', 7), ('easy-understanding', 4), ('greedy', 4), ('python3', 4), ('slidingwindow', 4), ('c#', 3), ('golang', 3), ('kotlin', 3), ('ruby', 3), ('simple', 3), ('100 faster', 2), ('c', 2), ('cpp solution', 2), ('easy-undestand', 2), ('easytounderstand', 2), ('js', 2), ('rust', 2), ('sliding window', 2), ('swift', 2), ('100 space', 1), ('100 speed', 1), ('2 pointer', 1), ('algorithms', 1), ('apl', 1), ('array', 1), ('avnish', 1), ('c code', 1), ('c++ solution', 1), ('clean', 1), ('clean code', 1), ('constant memory', 1), ('defaultdict', 1), ('easy', 1), ('easy understanding', 1), ('easy-to-understand', 1), ('efficient', 1), ('explaination', 1), ('explanation', 1), ('faster', 1), ('go', 1), ('golang-solution', 1), ('haskell', 1), ('intuitive', 1), ('iterative', 1), ('iterator', 1), ('js javascript', 1), ('kadane', 1), ('linear-time', 1), ('meiyaowen', 1), ('one pass solution', 1), ('one-pass', 1), ('optimal solution', 1), ('php', 1), ('pythonpython3', 1), ('q', 1), ('recursively', 1), ('rust vec', 1), ('simple clear c++ solution', 1), ('simple solution', 1), ('simpler', 1), ('single pass', 1), ('sketch', 1), ('sliding-window', 1), ('solution-sharing-cpp', 1), ('solution-sharing-java', 1), ('stacks', 1), ('straight-forward', 1), ('trivial', 1), ('two pointer technique', 1), ('two-pointer', 1), ('twopointer', 1), ('upvote', 1), ('while loop', 1), ('zea7ot', 1)]"
673,Number of Longest Increasing Subsequence,https://leetcode.com/problems/number-of-longest-increasing-subsequence,"Given an integer array nums, return the number of longest increasing subsequences.

Notice that the sequence has to be strictly increasing.",['dynamic-programming'],Medium,2240,121,201938,78133,"[""Longest Increasing Subsequence"", ""Longest Continuous Increasing Subsequence""]","[('dynamic programming', 24), ('dp', 14), ('python', 9), ('python 3', 9), ('cpp', 8), ('c++', 7), ('java', 6), ('javascript', 4), ('dynamic-programming', 3), ('easy-to-understand', 3), ('memoization', 2), ('swift', 2), ('2 pointer', 1), ('2-pointer', 1), ('binary search', 1), ('binary-search', 1), ('bisect', 1), ('bottom up', 1), ('c', 1), ('c#', 1), ('cpp-solution', 1), ('easy-understanding', 1), ('explained', 1), ('explanations', 1), ('iteration', 1), ('java ac solution', 1), ('java-solution', 1), ('linear memory', 1), ('maps', 1), ('nlogn', 1), ('nlogn time', 1), ('numberoflis', 1), ('patience sorting', 1), ('python3', 1), ('readable', 1), ('ruby', 1), ('sequence', 1), ('simple clear c++ solution', 1), ('slidingwindow', 1), ('solution', 1), ('tabulation', 1)]"
672,Bulb Switcher II,https://leetcode.com/problems/bulb-switcher-ii,"There is a room with n lights which are turned on initially and 4 buttons on the wall. After performing exactly m unknown operations towards buttons, you need to return how many different kinds of status of the n lights could be.

Suppose n lights are labeled as number [1, 2, 3 ..., n], function of these 4 buttons are given below:


	Flip all the lights.
	Flip lights with even numbers.
	Flip lights with odd numbers.
	Flip lights with (3k + 1) numbers, k = 0, 1, 2, ...",['math'],Medium,168,964,28247,14452,"[""Bulb Switcher"", ""Bulb Switcher III""]","[('bit-manipulation', 2), ('cpp', 2), ('python3', 2), ('bitwise', 1), ('breath first search', 1), ('c++ code', 1), ('closure', 1), ('depth first search', 1), ('golang', 1), ('javascript', 1), ('math', 1), ('python', 1), ('python 3', 1), ('state-diagram', 1), ('swift', 1)]"
671,Second Minimum Node In a Binary Tree,https://leetcode.com/problems/second-minimum-node-in-a-binary-tree,"Given a non-empty special binary tree consisting of nodes with the non-negative value, where each node in this tree has exactly two or zero sub-node. If the node has two sub-nodes, then this node's value is the smaller value among its two sub-nodes. More formally, the property root.val = min(root.left.val, root.right.val) always holds.

Given such a binary tree, you need to output the second minimum value in the set made of all the nodes' value in the whole tree.

If no such second minimum value exists, output -1 instead.",['tree'],Easy,820,1077,234844,100638,"[""Kth Smallest Element in a BST""]","[('c++', 36), ('cpp', 29), ('java', 25), ('dfs', 19), ('python 3', 18), ('python', 16), ('bfs', 12), ('java-solution', 11), ('python3', 10), ('easy-understanding', 9), ('javascript', 9), ('recursion', 7), ('golang', 6), ('iterative', 6), ('set', 6), ('c#', 5), ('inorder', 5), ('priority queue', 5), ('sets', 5), ('cpp solution', 4), ('easy-to-understand', 4), ('easytounderstand', 4), ('recursive', 4), ('c++ code', 3), ('dfs simple solution', 3), ('inorder traversal', 3), ('python2', 3), ('stack', 3), ('beats 100', 2), ('cpp easy', 2), ('easy', 2), ('easy to understand', 2), ('fast', 2), ('go-solution', 2), ('golang-solution', 2), ('heap', 2), ('map', 2), ('preorder', 2), ('ruby', 2), ('simple', 2), ('simple clear c++ solution', 2), ('solution', 2), ('sorted', 2), ('swift', 2), ('0ms', 1), ('0ms runtime', 1), ('0ms-solution', 1), ('100', 1), ('100 faster', 1), ('accepted', 1), ('algorithm-explained', 1), ('algorithms', 1), ('bfs python', 1), ('bfs simple solution', 1), ('binary-tree', 1), ('breath first search', 1), ('brute', 1), ('brute force', 1), ('c', 1), ('c++ iterative sol', 1), ('c++ recursive solution', 1), ('c++ set', 1), ('c++ solution', 1), ('c++11', 1), ('class', 1), ('comments', 1), ('complexity-analysis', 1), ('cplusplus', 1), ('csharp', 1), ('deep-first-search', 1), ('depth-first search', 1), ('dfs-in-order', 1), ('easiest', 1), ('east-to-understand', 1), ('easy peasy', 1), ('easy understand', 1), ('easy undestanding', 1), ('easy-peasy', 1), ('easy-to-implement', 1), ('easy-understand', 1), ('easy-undestand', 1), ('easyunderstanding', 1), ('explained solution', 1), ('fast-solution', 1), ('faster than 100', 1), ('general', 1), ('go', 1), ('hack', 1), ('hash map', 1), ('inorder-traversal', 1), ('intuitive', 1), ('iterative solution', 1), ('java ac solution', 1), ('js', 1), ('kotlin', 1), ('level order traversal', 1), ('level-order-traversal', 1), ('long', 1), ('map-stl', 1), ('minheap', 1), ('missing-test-case', 1), ('morris-inorder-traversal', 1), ('morris-traversal', 1), ('php', 1), ('php solution', 1), ('preorder-recursion', 1), ('priority-queue', 1), ('priorityqueue', 1), ('python bfs', 1), ('python bfs iterative', 1), ('python bfs iterative easy', 1), ('python fast queue', 1), ('recurision', 1), ('recursively', 1), ('recurssion', 1), ('recusive', 1), ('secondminnodeintree', 1), ('solution-sharing-cpp', 1), ('sorted set', 1), ('stack python', 1), ('stacks', 1), ('super fast python', 1), ('test-case', 1), ('traverse-a-tree', 1), ('tree traversal', 1), ('tree-traversal', 1), ('trees', 1), ('tuple', 1), ('understandable', 1), ('unordered set', 1), ('vector', 1), ('video', 1), ('with-explanation', 1), ('youtube', 1)]"
670,Maximum Swap,https://leetcode.com/problems/maximum-swap,"Given a non-negative integer, you could swap two digits at most once to get the maximum valued number. Return the maximum valued number you could get.","['array', 'math']",Medium,1477,93,214778,97429,"[""Create Maximum Number""]","[('c++', 17), ('python 3', 13), ('cpp', 11), ('java', 8), ('python', 8), ('c#', 6), ('javascript', 6), ('python3', 5), ('greedy', 4), ('string-to-integer', 4), ('swift', 4), ('array', 2), ('easy to understand', 2), ('easy-solition', 2), ('easytounderstand', 2), ('java-solution', 2), ('linear', 2), ('math', 2), ('recursion', 2), ('simple solution', 2), ('solution-sharing-cpp', 2), ('0ms', 1), ('accepted solution', 1), ('akku', 1), ('algorithms', 1), ('backtracking', 1), ('beat 100', 1), ('bruteforce', 1), ('c++ code', 1), ('commented', 1), ('easy-understanding', 1), ('easy-undestand', 1), ('explained', 1), ('explanations', 1), ('fast-solution', 1), ('greedyapproach', 1), ('hashmap', 1), ('integer to string', 1), ('java simple', 1), ('javacript', 1), ('javascrip', 1), ('js', 1), ('kotlin', 1), ('kotlinvim', 1), ('linear time', 1), ('map', 1), ('maximumswap', 1), ('nlogn', 1), ('olla', 1), ('one pass', 1), ('python2', 1), ('python3.8', 1), ('readable', 1), ('recursive', 1), ('short c++ code', 1), ('solution-share', 1), ('sort', 1), ('sorted array', 1), ('sorting', 1), ('stack', 1), ('two-pass', 1), ('twopointer', 1)]"
669,Trim a Binary Search Tree,https://leetcode.com/problems/trim-a-binary-search-tree,"Given the root of a binary search tree and the lowest and highest boundaries as low and high, trim the tree so that all its elements lies in [low, high]. Trimming the tree should not change the relative structure of the elements that will remain in the tree (i.e., any node's descendant should remain a descendant). It can be proven that there is a unique answer.

Return the root of the trimmed binary search tree. Note that the root may change depending on the given bounds.","['tree', 'recursion']",Medium,2790,209,244462,157322,[],"[('c++', 49), ('recursion', 41), ('java', 31), ('python', 20), ('cpp', 19), ('dfs', 17), ('easy-understanding', 17), ('javascript', 16), ('recursive', 15), ('python3', 12), ('iterative', 11), ('java-solution', 11), ('cpp solution', 9), ('python 3', 9), ('bst', 8), ('c#', 8), ('recurision', 7), ('recursive easy', 7), ('binary search tree', 6), ('dfs solution', 6), ('explained', 6), ('tree', 6), ('postorder-traversal', 5), ('c code', 4), ('explanation', 4), ('postorder', 4), ('bfs', 3), ('c', 3), ('detailed explanation', 3), ('easy', 3), ('easy-to-understand', 3), ('golang', 3), ('recusion', 3), ('ruby', 3), ('simple', 3), ('stack', 3), ('swift', 3), ('trimbst', 3), ('100 faster runtime', 2), ('beginner friendly', 2), ('clean code', 2), ('csharp', 2), ('depth first search', 2), ('easytounderstand', 2), ('fastest', 2), ('iteration', 2), ('post-order', 2), ('post-order-dfs', 2), ('post-order-traversal', 2), ('rust', 2), ('tree-traversal', 2), ('video-explanation', 2), ('#java #recursion', 1), ('#trees', 1), ('#videoexplanation', 1), ('0ms runtime', 1), ('100', 1), ('100 memory', 1), ('100 speed', 1), ('abomination', 1), ('beats 100 percent', 1), ('beginner', 1), ('beginnerfriendly', 1), ('best', 1), ('binary search', 1), ('binary-search', 1), ('binary-search-tree', 1), ('binary-tree', 1), ('c#-solution', 1), ('c++ code', 1), ('c++ solution', 1), ('c++11', 1), ('commented', 1), ('comments-added', 1), ('concise', 1), ('cpp easy', 1), ('datastructure', 1), ('delete', 1), ('depth-first-search', 1), ('detailed', 1), ('dfs-iterative', 1), ('divide and conquer', 1), ('double-pointer', 1), ('easy coding', 1), ('easy-undestand', 1), ('explanatory comments', 1), ('faster than 99.80', 1), ('fastest java solution', 1), ('fastest solution', 1), ('for-loop', 1), ('go-solution', 1), ('golang-solution', 1), ('graph theory', 1), ('graph traversal', 1), ('interview', 1), ('interview question', 1), ('iterative approch', 1), ('iterative solution', 1), ('iteratively', 1), ('iterator', 1), ('itereative', 1), ('java solution', 1), ('java-8', 1), ('javascript brute force', 1), ('js', 1), ('js javascript', 1), ('kotlin', 1), ('mistake', 1), ('morris', 1), ('no recursion', 1), ('non-recursion', 1), ('non-recursive', 1), ('php', 1), ('pointer', 1), ('postorder traversal', 1), ('preorder', 1), ('preorder traversal', 1), ('preorder-traversal', 1), ('pruning', 1), ('queue', 1), ('recurrance', 1), ('recursive approach', 1), ('recursively', 1), ('redirect21', 1), ('rune-time-error', 1), ('short', 1), ('simplest', 1), ('single-linked-list', 1), ('sketch', 1), ('solution-sharing-cpp', 1), ('sublinear time', 1), ('swift5', 1), ('tree traversal', 1), ('why', 1)]"
668,Kth Smallest Number in Multiplication Table,https://leetcode.com/problems/kth-smallest-number-in-multiplication-table,"Nearly every one have used the Multiplication Table. But could you find out the k-th smallest number quickly from the multiplication table?



Given the height m and the length n of a m * n Multiplication Table, and a positive integer k, you need to return the k-th smallest number in this table.",['binary-search'],Hard,713,25,54880,26357,"[""Kth Smallest Element in a Sorted Matrix"", ""Find K-th Smallest Pair Distance"", ""K-th Smallest Prime Fraction""]","[('binary search', 5), ('binary-search', 5), ('java', 5), ('c++', 2), ('cpp', 2), ('cpp easy', 2), ('explained', 2), ('java-solution', 2), ('python', 2), ('python 3', 2), ('binary stride', 1), ('binarysearch', 1), ('c#', 1), ('cpp solution', 1), ('csharp', 1), ('easy to read', 1), ('easy-to-read', 1), ('easy-understanding', 1), ('efficient solution', 1), ('explanation of logic', 1), ('fast and simple', 1), ('golang', 1), ('java ac solution', 1), ('jump search', 1), ('math-solution', 1), ('multiplication table', 1), ('walkthrough', 1)]"
667,Beautiful Arrangement II,https://leetcode.com/problems/beautiful-arrangement-ii,"Given two integers n and k, construct a list answer that contains n different positive integers ranging from 1 to n and obeys the following requirement:


	Suppose this list is answer = [a1, a2, a3, ... , an], then the list [|a1 - a2|, |a2 - a3|, |a3 - a4|, ... , |an-1 - an|] has exactly k distinct integers.


Return the list answer. If there multiple valid answers, return any of them.",['array'],Medium,554,886,72665,42881,"[""Beautiful Arrangement""]","[('c++', 19), ('python', 11), ('cpp', 10), ('greedy approach', 8), ('java', 8), ('python3', 5), ('c#', 4), ('cpp solution', 4), ('javascript', 4), ('go', 3), ('golang', 3), ('greedy', 3), ('intuitive', 3), ('c', 2), ('easy', 2), ('easy-understanding', 2), ('explained', 2), ('fast', 2), ('java-solution', 2), ('math', 2), ('one-liner', 2), ('python 3', 2), ('rust', 2), ('1 line', 1), ('2 pointers', 1), ('accepted solution', 1), ('ad-hoc', 1), ('array', 1), ('awesome samriddhi', 1), ('beat 97', 1), ('beautifularrangement', 1), ('beautifularrangementii', 1), ('beginner friendly', 1), ('brute force solution', 1), ('c++ solution', 1), ('c++14', 1), ('comments', 1), ('constructive algorithm', 1), ('declarative', 1), ('deque', 1), ('easy to read', 1), ('easy to understand', 1), ('easy to understandd', 1), ('easytounderstand', 1), ('efficient', 1), ('efficient solution', 1), ('example', 1), ('go lang', 1), ('golang-solution', 1), ('incorrect-expected-output', 1), ('iterative', 1), ('kotlin', 1), ('kotlin-solution', 1), ('linear', 1), ('linear time', 1), ('list comprehension', 1), ('list-comprehension', 1), ('mathematics', 1), ('maths', 1), ('observation', 1), ('permutations', 1), ('proof', 1), ('ritik', 1), ('ruby', 1), ('sequence', 1), ('sequences', 1), ('series', 1), ('short', 1), ('simple', 1), ('simple clear c++ solution', 1), ('swift', 1), ('two-pointers', 1), ('video-explanation', 1)]"
665,Non-decreasing Array,https://leetcode.com/problems/non-decreasing-array,"Given an array nums with n integers, your task is to check if it could become non-decreasing by modifying at most one element.

We define an array is non-decreasing if nums[i] <= nums[i + 1] holds for every i (0-based) such that (0 <= i <= n - 2).",['array'],Medium,2620,606,641243,127826,[],"[('java', 24), ('c++', 22), ('python 3', 22), ('cpp', 18), ('python', 17), ('java-solution', 12), ('javascript', 12), ('python3', 8), ('array', 5), ('c#', 5), ('explaination', 5), ('explained', 5), ('golang', 5), ('simple', 5), ('easy-understanding', 4), ('explanation', 4), ('simple solution', 4), ('solution', 4), ('swift', 4), ('easy', 3), ('go', 3), ('linear-time', 3), ('backtracking', 2), ('easy understanding', 2), ('easy-undestand', 2), ('for loop', 2), ('go-solution', 2), ('linear time', 2), ('recursion', 2), ('ruby', 2), ('scala', 2), ('stack', 2), ('100 memory', 1), ('algorithms', 1), ('algosexplained', 1), ('arrays', 1), ('asahiocean', 1), ('beats 99', 1), ('bfs', 1), ('brute force', 1), ('brute force to optimal', 1), ('c', 1), ('c++ code', 1), ('clear', 1), ('come on', 1), ('comments-added', 1), ('constant space', 1), ('constant-space', 1), ('cpp solution', 1), ('csharp', 1), ('decrease', 1), ('deepcopy', 1), ('detailed explanation', 1), ('diagram', 1), ('difference', 1), ('easy to understand', 1), ('easy-to-understand', 1), ('easytounderstand', 1), ('effiecinet', 1), ('explanation of logic', 1), ('fast-solution', 1), ('golang-solution', 1), ('greedy', 1), ('greedy approach', 1), ('if-else', 1), ('image-understanding', 1), ('increase', 1), ('intuition based solution', 1), ('ios', 1), ('iterators', 1), ('javascript solution', 1), ('js', 1), ('js javascript', 1), ('leftpassrightpass', 1), ('list', 1), ('minimal', 1), ('non decrease array', 1), ('non-decreasing', 1), ('optimal', 1), ('options', 1), ('php', 1), ('python2', 1), ('pythonpython3', 1), ('reduce', 1), ('run time error', 1), ('runtime-error', 1), ('rust', 1), ('simpe', 1), ('simple approach', 1), ('simple clear c++ solution', 1), ('simple python accepted', 1), ('simplest', 1), ('solution-javascript', 1), ('solution-sharing-cpp', 1), ('straightforward', 1), ('two-pointers', 1), ('video explanation', 1), ('want a star', 1), ('youtube', 1)]"
664,Strange Printer,https://leetcode.com/problems/strange-printer,"There is a strange printer with the following two special requirements:


The printer can only print a sequence of the same character each time.
At each turn, the printer can print new characters starting from and ending at any places, and will cover the original existing characters.





Given a string consists of lower English letters only, your job is to count the minimum number of turns the printer needed in order to print it.","['dynamic-programming', 'depth-first-search']",Hard,570,54,43156,17963,"[""Remove Boxes"", ""Strange Printer II""]","[('dynamic programming', 6), ('c++', 4), ('dp', 4), ('javascript', 2), ('top down dp', 2), ('2d-array', 1), ('c#', 1), ('c++ code', 1), ('c++14', 1), ('constraint-satisfaction', 1), ('cpp', 1), ('cpp solution', 1), ('explained', 1), ('followup', 1), ('java', 1), ('understanding', 1)]"
662,Maximum Width of Binary Tree,https://leetcode.com/problems/maximum-width-of-binary-tree,"Given a binary tree, write a function to get the maximum width of the given tree. The maximum width of a tree is the maximum width among all levels.

The width of one level is defined as the length between the end-nodes (the leftmost and right most non-null nodes in the level, where the null nodes between the end-nodes are also counted into the length calculation.

It is guaranteed that the answer will in the range of 32-bit signed integer.",['tree'],Medium,2184,385,278750,110648,[],"[('bfs', 70), ('c++', 29), ('queue', 20), ('java', 19), ('cpp', 18), ('python', 18), ('python 3', 15), ('javascript', 11), ('deque', 9), ('c#', 8), ('dfs', 6), ('java-solution', 6), ('python3', 6), ('cpp solution', 5), ('level order traversal', 5), ('level-order-traversal', 5), ('binary-tree', 4), ('breadth first search', 4), ('easy-understanding', 4), ('hashmap', 4), ('overflow fix', 4), ('recursion', 4), ('breath first search', 3), ('c++ code', 3), ('easy to understand', 3), ('easy-undestand', 3), ('easytounderstand', 3), ('golang', 3), ('iterative', 3), ('tree', 3), ('#bfs', 2), ('bfs simple solution', 2), ('binary tree', 2), ('breadth first traversal', 2), ('depth first search', 2), ('dfs simple solution', 2), ('easy', 2), ('explained', 2), ('explanation of logic', 2), ('kotlin', 2), ('linear time', 2), ('pyhton3', 2), ('readable', 2), ('ruby', 2), ('short', 2), ('simple solution', 2), ('swift', 2), ('tree traversal', 2), ('#bigint', 1), ('#breadth-first-search', 1), ('#c++', 1), ('#javascript', 1), ('#python', 1), ('#python 3', 1), ('#simplecode', 1), ('begineer friendly', 1), ('beginner friendly', 1), ('best-solution', 1), ('bfs java', 1), ('bigint', 1), ('binarytree', 1), ('breadth-first-search', 1), ('brute force', 1), ('c++ queue', 1), ('c++ solution', 1), ('commentary', 1), ('commented', 1), ('complexity-analysis', 1), ('constant space', 1), ('csharp', 1), ('depth-first search', 1), ('depth-first-search', 1), ('dfs clean code', 1), ('dfs solution', 1), ('dfs-iterative', 1), ('dfs-tree', 1), ('explained solution', 1), ('fast-solution', 1), ('go', 1), ('go-solution', 1), ('golang-solution', 1), ('hash table', 1), ('hash-table', 1), ('hashtable', 1), ('help needed', 1), ('intuitive', 1), ('java ac solution', 1), ('javascript solution', 1), ('js', 1), ('level order', 1), ('levelorder', 1), ('linkedlist', 1), ('map', 1), ('maxwidthbinarytree', 1), ('prefix sum', 1), ('pyhton', 1), ('python bfs', 1), ('python deque', 1), ('queues', 1), ('quick', 1), ('recursive', 1), ('rust', 1), ('scala', 1), ('shortest', 1), ('stack', 1), ('straightforward', 1), ('tree index', 1), ('tree-traversal', 1), ('trees', 1), ('video', 1), ('video solution', 1), ('video-explanation', 1), ('visualization', 1)]"
661,Image Smoother,https://leetcode.com/problems/image-smoother,"Given a 2D integer matrix M representing the gray scale of an image, you need to design a smoother to make the gray scale of each cell becomes the average gray scale (rounding down) of all the 8 surrounding cells and itself.  If a cell has less than 8 surrounding cells, then use as many as you can.",['array'],Easy,299,1268,104746,54869,[],"[('c++', 9), ('python', 8), ('javascript', 7), ('java', 5), ('cpp', 4), ('python 3', 3), ('python3', 3), ('brute force', 2), ('c#', 2), ('easy', 2), ('golang', 2), ('python2', 2), ('algorithms', 1), ('best-solution', 1), ('c++11', 1), ('challenge-me', 1), ('closure', 1), ('cpp solution', 1), ('dictionary', 1), ('easy-understanding', 1), ('easy-undestand', 1), ('explanation', 1), ('functional programming', 1), ('go-solution', 1), ('golang-solution', 1), ('javascript solution', 1), ('js', 1), ('list of list', 1), ('matrix', 1), ('ruby', 1), ('rust', 1), ('rust vec', 1), ('simple', 1), ('straight-forward', 1), ('swift', 1), ('vec', 1), ('vector', 1)]"
659,Split Array into Consecutive Subsequences,https://leetcode.com/problems/split-array-into-consecutive-subsequences,"Given an integer array nums that is sorted in ascending order, return true if and only if you can split it into one or more subsequences such that each subsequence consists of consecutive integers and has a length of at least 3.","['heap', 'greedy']",Medium,1585,485,129194,57597,"[""Top K Frequent Elements"", ""Divide Array in Sets of K Consecutive Numbers""]","[('greedy', 12), ('hashmap', 5), ('java', 5), ('c++', 4), ('heap', 4), ('python', 4), ('python3', 4), ('cpp', 3), ('javascript', 3), ('python 3', 3), ('count', 2), ('greedy algorithm', 2), ('greedy approach', 2), ('hash table', 2), ('priority queue', 2), ('with-explanation', 2), ('#question', 1), ('array', 1), ('buckets', 1), ('c', 1), ('c#', 1), ('counter', 1), ('cpp clear', 1), ('cpp solution', 1), ('easy to understand', 1), ('easy-to-understand', 1), ('explaination', 1), ('explained', 1), ('explained solution', 1), ('fast and simple', 1), ('fast-solution', 1), ('golang', 1), ('hash', 1), ('heapq', 1), ('intuition', 1), ('iterative', 1), ('java ac solution', 1), ('java-solution', 1), ('map', 1), ('min-heap', 1), ('minheap', 1), ('naive-solution', 1), ('o n', 1), ('one-pass', 1), ('optimal', 1), ('proof', 1), ('queue', 1), ('ruby', 1), ('rust', 1), ('simple', 1), ('simple clear c++ solution', 1), ('simple implementation', 1), ('story based explanation', 1), ('treemap', 1), ('true-false', 1), ('unordered map', 1)]"
658,Find K Closest Elements,https://leetcode.com/problems/find-k-closest-elements,"Given a sorted integer array arr, two integers k and x, return the k closest integers to x in the array. The result should also be sorted in ascending order.

An integer a is closer to x than an integer b if:


	|a - x| < |b - x|, or
	|a - x| == |b - x| and a < b",['binary-search'],Medium,2076,326,357742,151667,"[""Guess Number Higher or Lower"", ""Guess Number Higher or Lower II"", ""Find K-th Smallest Pair Distance""]","[('binary-search', 41), ('c++', 24), ('python', 24), ('python 3', 19), ('java', 15), ('python3', 15), ('binary search', 12), ('javascript', 11), ('priority queue', 11), ('easy-understanding', 10), ('two-pointers', 9), ('heap', 8), ('cpp', 7), ('cpp solution', 7), ('binarysearch', 6), ('c#', 5), ('easy', 4), ('go-solution', 3), ('golang', 3), ('maxheap', 3), ('swift', 3), ('two-pointer', 3), ('2 pointer', 2), ('comments', 2), ('cpp easy', 2), ('deque', 2), ('easy-to-understand', 2), ('easytounderstand', 2), ('golang-solution', 2), ('heapq', 2), ('java-solution', 2), ('k closest elements', 2), ('linear memory', 2), ('linear time', 2), ('list comprehension', 2), ('one-liner', 2), ('python2', 2), ('#google', 1), ('2 pointers', 1), ('2-lines', 1), ('2pointer', 1), ('2pointers', 1), ('algorithms', 1), ('beauty', 1), ('binarysearh', 1), ('bisectleft', 1), ('c# solution', 1), ('c++ map', 1), ('clean-efficient-code', 1), ('comments-added', 1), ('debug', 1), ('easy to understand', 1), ('easy-undestand', 1), ('explaination', 1), ('explained solution', 1), ('explanation of logic', 1), ('explanations', 1), ('functional-programming', 1), ('go', 1), ('golang solution', 1), ('heaps algorithm', 1), ('heapsort', 1), ('helper', 1), ('intuitive', 1), ('intutive', 1), ('java ac solution', 1), ('java solution', 1), ('javascript solution', 1), ('js', 1), ('linkedlist', 1), ('lodash', 1), ('lower-bound', 1), ('map-stl', 1), ('max heap', 1), ('max-heap', 1), ('merge', 1), ('nlogn', 1), ('not optimized', 1), ('one liner', 1), ('oneline', 1), ('pointer', 1), ('priority-queue', 1), ('python 2', 1), ('short code', 1), ('simple', 1), ('single-line', 1), ('sort', 1), ('sorted', 1), ('sorting', 1), ('stack', 1), ('stl vector', 1), ('summary', 1), ('treemap', 1), ('two pointer technique', 1), ('twopointer', 1), ('typescript', 1), ('vector-operation', 1), ('window', 1), ('zip', 1)]"
657,Robot Return to Origin,https://leetcode.com/problems/robot-return-to-origin,"There is a robot starting at position (0, 0), the origin, on a 2D plane. Given a sequence of its moves, judge if this robot ends up at (0, 0) after it completes its moves.

The move sequence is represented by a string, and the character moves[i] represents its ith move. Valid moves are R (right), L (left), U (up), and D (down). If the robot returns to the origin after it finishes all of its moves, return true. Otherwise, return false.

Note: The way that the robot is ""facing"" is irrelevant. ""R"" will always make the robot move to the right once, ""L"" will always make it move left, etc. Also, assume that the magnitude of the robot's movement is the same for each move.",['string'],Easy,1292,694,381295,282649,"[""Number of Provinces""]","[('c++', 36), ('java', 32), ('python', 32), ('python 3', 29), ('javascript', 27), ('cpp', 24), ('java-solution', 17), ('easy-understanding', 16), ('c#', 11), ('python3', 9), ('cpp solution', 8), ('simple', 7), ('easy', 6), ('easytounderstand', 6), ('golang', 6), ('counter', 5), ('easy-undestand', 5), ('swift', 5), ('easy-to-understand', 4), ('kotlin', 4), ('ruby', 4), ('string', 4), ('beginner friendly', 3), ('c', 3), ('clean code', 3), ('easy to understand', 3), ('golang-solution', 3), ('if-else', 3), ('array', 2), ('cpp easy', 2), ('fast and simple', 2), ('go', 2), ('go-solution', 2), ('hashmap', 2), ('js javascript', 2), ('one-liner', 2), ('php', 2), ('php solution', 2), ('pythonpython3', 2), ('simple solution', 2), ('simulation', 2), ('switch-case', 2), ('upvote', 2), ('#javascript', 1), ('1-line', 1), ('100 faster', 1), ('100 speed', 1), ('2 lines', 1), ('2liner', 1), ('2lines', 1), ('85.33faster', 1), ('algorithms', 1), ('all-language', 1), ('arrays', 1), ('boolean', 1), ('both', 1), ('c# solution', 1), ('c++ code', 1), ('c++14', 1), ('char array', 1), ('commented', 1), ('commented code', 1), ('comments-added', 1), ('compare', 1), ('coordinate geometry', 1), ('correct solution', 1), ('counters', 1), ('cpp doubt', 1), ('csharp', 1), ('description-disambiguation', 1), ('dictionary', 1), ('easy-solition', 1), ('easy-solution', 1), ('easysolution', 1), ('error in question', 1), ('esay', 1), ('expalanation', 1), ('explanation with logic', 1), ('fast', 1), ('fast-solution', 1), ('faster', 1), ('fastest', 1), ('filter', 1), ('fp', 1), ('fun', 1), ('functional', 1), ('funny', 1), ('github', 1), ('hash', 1), ('hashes', 1), ('java script', 1), ('javascript solution', 1), ('joke', 1), ('js', 1), ('kotlin-solution', 1), ('logic', 1), ('logic explained', 1), ('loop based', 1), ('map', 1), ('mrmagician', 1), ('naive', 1), ('noob approach', 1), ('object oriented', 1), ('observations', 1), ('one line', 1), ('origin', 1), ('pointer', 1), ('python-2', 1), ('quick', 1), ('self explanatory', 1), ('silly', 1), ('simplest', 1), ('solution-sharing-cpp', 1), ('stack', 1), ('straightforward', 1), ('string-operation', 1), ('string-searching', 1), ('strings', 1), ('suggestion', 1), ('switch', 1), ('switch case', 1), ('ternary-operator', 1), ('testcase error', 1), ('wrong answer', 1), ('wrong output', 1), ('wrong-test-cases', 1)]"
655,Print Binary Tree,https://leetcode.com/problems/print-binary-tree,"Print a binary tree in an m*n 2D string array following these rules: 


The row number m should be equal to the height of the given binary tree.
The column number n should always be an odd number.
The root node's value (in string format) should be put in the exactly middle of the first row it can be put. The column and the row where the root node belongs will separate the rest space into two parts (left-bottom part and right-bottom part). You should print the left subtree in the left-bottom part and print the right subtree in the right-bottom part. The left-bottom part and the right-bottom part should have the same size. Even if one subtree is none while the other is not, you don't need to print anything for the none subtree but still need to leave the space as large as that for the other subtree. However, if two subtrees are none, then you don't need to leave space for both of them. 
Each unused space should contain an empty string """".
Print the subtrees following the same rules.",['tree'],Medium,422,981,69475,39188,[],"[('java', 9), ('c++', 7), ('python', 6), ('recursion', 5), ('bfs', 4), ('concise-solution', 4), ('dfs', 4), ('python 3', 4), ('cpp', 3), ('dfs simple solution', 3), ('java-solution', 3), ('javascript', 3), ('python3', 3), ('recursive', 3), ('c#', 2), ('concise', 2), ('depth first search', 2), ('easytounderstand', 2), ('golang', 2), ('iterative', 2), ('ruby', 2), ('simple clear c++ solution', 2), ('typescript', 2), ('1ms runtime', 1), ('2pass', 1), ('array-creation', 1), ('c++ code', 1), ('c++ easy to understand', 1), ('clean code', 1), ('comment', 1), ('commentary', 1), ('commented', 1), ('comments', 1), ('comments added', 1), ('easy', 1), ('easy-peasy', 1), ('explaination', 1), ('explained', 1), ('explanation', 1), ('go lang', 1), ('golang-solution', 1), ('inorder', 1), ('kotlin', 1), ('level-order-traversal', 1), ('linear time', 1), ('photo', 1), ('python2', 1), ('queue', 1), ('recursive solution', 1), ('recusion', 1), ('recusrive', 1), ('short code', 1), ('swift', 1), ('swift5', 1), ('very clear', 1)]"
654,Maximum Binary Tree,https://leetcode.com/problems/maximum-binary-tree,"You are given an integer array nums with no duplicates. A maximum binary tree can be built recursively from nums using the following algorithm:


	Create a root node whose value is the maximum value in nums.
	Recursively build the left subtree on the subarray prefix to the left of the maximum value.
	Recursively build the right subtree on the subarray suffix to the right of the maximum value.


Return the maximum binary tree built from nums.",['tree'],Medium,2475,271,200464,163199,"[""Maximum Binary Tree II""]","[('recursion', 35), ('java', 30), ('c++', 21), ('cpp', 20), ('recursive', 20), ('python 3', 19), ('python', 15), ('javascript', 10), ('c#', 7), ('python3', 6), ('dfs', 5), ('easy-to-understand', 5), ('recurision', 5), ('c', 4), ('java-solution', 4), ('recursively', 4), ('divide and conquer', 3), ('easy-understanding', 3), ('fast-solution', 3), ('golang', 3), ('recursive solution', 3), ('recusion', 3), ('simple', 3), ('stack', 3), ('100 speed', 2), ('binary-tree', 2), ('concise', 2), ('cpp solution', 2), ('csharp', 2), ('divide-and-conquer', 2), ('easy', 2), ('easy to understand', 2), ('easytounderstand', 2), ('explanation', 2), ('iterative', 2), ('recursive easy', 2), ('simple clear c++ solution', 2), ('trees', 2), ('100', 1), ('100 memory', 1), ('100 space', 1), ('654', 1), ('begineer friendly', 1), ('binary tree', 1), ('binary tree traversal', 1), ('binary-search', 1), ('binarysearch', 1), ('built-in-function', 1), ('c code', 1), ('c++ recursion', 1), ('cartesian-tree', 1), ('constant space', 1), ('cpp doubt', 1), ('depth first search', 1), ('deque', 1), ('dfs solution', 1), ('diagram', 1), ('easiest', 1), ('easy-undestand', 1), ('easyunderstanding', 1), ('faster than 75', 1), ('golang-solution', 1), ('help', 1), ('help me', 1), ('java simple', 1), ('javasccript', 1), ('javasciprt', 1), ('javascript recursive', 1), ('javascriptes6', 1), ('js', 1), ('judge-problem', 1), ('kotlin', 1), ('magic', 1), ('max-heap', 1), ('min-heap', 1), ('min-max', 1), ('mrmagician', 1), ('nlogn', 1), ('partition', 1), ('poorly-written-problem', 1), ('preorder traversal', 1), ('priority queue', 1), ('pyhton', 1), ('questions', 1), ('rajat', 1), ('recurrance', 1), ('rescursion', 1), ('ruby', 1), ('scale', 1), ('simple-solution', 1), ('slicing', 1), ('sparse-table', 1), ('stack magic', 1), ('stack-operation', 1), ('stacks', 1), ('step by step', 1), ('superlinear time', 1), ('swift', 1), ('swift5', 1), ('time complexity', 1), ('tree', 1), ('tree-traversal', 1), ('upvote', 1)]"
653,Two Sum IV - Input is a BST,https://leetcode.com/problems/two-sum-iv-input-is-a-bst,"Given the root of a Binary Search Tree and a target number k, return true if there exist two elements in the BST such that their sum is equal to the given target.",['tree'],Easy,2036,153,338317,190869,"[""Two Sum"", ""Two Sum II - Input array is sorted"", ""Two Sum III - Data structure design"", ""Two Sum BSTs""]","[('c++', 30), ('python', 24), ('cpp', 18), ('java', 18), ('javascript', 15), ('bfs', 14), ('bst', 13), ('python 3', 13), ('inorder traversal', 12), ('recursion', 10), ('dfs', 9), ('cpp solution', 7), ('set', 7), ('two-pointers', 7), ('inorder', 6), ('inorder-traversal', 6), ('binary search tree', 5), ('hashmap', 5), ('java-solution', 5), ('python3', 5), ('iterative', 4), ('iterator', 4), ('recursive', 4), ('swift', 4), ('two pointers', 4), ('two sum', 4), ('amazon', 3), ('binary-search', 3), ('c#', 3), ('easy-to-understand', 3), ('easy-understanding', 3), ('golang', 3), ('hash table', 3), ('level-order-traversal', 3), ('queue', 3), ('ruby', 3), ('stacks', 3), ('tree-traversal', 3), ('100 memory', 2), ('binary-tree', 2), ('breadth-first-search', 2), ('c', 2), ('c++ code', 2), ('c++11', 2), ('cpp easy', 2), ('easy-understand', 2), ('explanation', 2), ('golang-solution', 2), ('hashset', 2), ('in-order-traversal', 2), ('js', 2), ('preorder', 2), ('rust', 2), ('sets', 2), ('twosum', 2), ('100 beat', 1), ('100 faster', 1), ('100 runtime', 1), ('100 space', 1), ('100 speed', 1), ('100-faster', 1), ('2 pointer', 1), ('algorithms', 1), ('array', 1), ('arraylist', 1), ('awesome samriddhi', 1), ('beginner friendly', 1), ('binary tree', 1), ('breadth first search', 1), ('bsf', 1), ('c++ recursive solution', 1), ('clean code', 1), ('commented', 1), ('comments', 1), ('concise', 1), ('cpp-solution', 1), ('depth first search', 1), ('dfs simple solution', 1), ('dfs-non-recursive', 1), ('dfs-topdown', 1), ('dll', 1), ('easy', 1), ('easy to understand', 1), ('easy-solition', 1), ('easy-undestand', 1), ('efficient solution', 1), ('esay-understand', 1), ('explaination', 1), ('explained', 1), ('fastest swift solution', 1), ('help needed', 1), ('iteration', 1), ('iteratively', 1), ('iteratve-recursive', 1), ('itereative', 1), ('javascrip', 1), ('javascript recursive', 1), ('javascript solution', 1), ('kotlin', 1), ('logarithmic-space', 1), ('map', 1), ('memory efficient', 1), ('morris', 1), ('o1 space complexity', 1), ('onlog', 1), ('optimized', 1), ('php', 1), ('php solution', 1), ('predecessor', 1), ('preorder traversal', 1), ('readable', 1), ('recurision', 1), ('recursively', 1), ('recursiveplushashset', 1), ('recusion', 1), ('ritik', 1), ('scala', 1), ('short', 1), ('short circuit', 1), ('simple', 1), ('simple-solution', 1), ('solution-sharing-cpp', 1), ('sorted array', 1), ('sortingplus2pointer', 1), ('space-efficient', 1), ('straight-forward', 1), ('successor', 1), ('swift5', 1), ('tree problem', 1), ('trees', 1), ('two pointer', 1), ('two-pointer', 1), ('two-sum', 1), ('twopointers', 1), ('twosumivbst', 1), ('typescript', 1), ('unordered map', 1), ('vector', 1)]"
652,Find Duplicate Subtrees,https://leetcode.com/problems/find-duplicate-subtrees,"Given the root of a binary tree, return all duplicate subtrees.

For each kind of duplicate subtrees, you only need to return the root node of any one of them.

Two trees are duplicate if they have the same structure with the same node values.",['tree'],Medium,1957,242,174862,93086,"[""Serialize and Deserialize Binary Tree"", ""Serialize and Deserialize BST"", ""Construct String from Binary Tree""]","[('python', 9), ('dfs', 8), ('c++', 7), ('hashmap', 7), ('javascript', 5), ('python 3', 5), ('c#', 4), ('cpp', 4), ('java', 4), ('postorder-traversal', 3), ('python3', 3), ('depth first search', 2), ('dfs-tree', 2), ('easy to read', 2), ('iterative', 2), ('recursion', 2), ('recursive', 2), ('ruby', 2), ('serialization', 2), ('unordered map', 2), ('c++code', 1), ('dfs solution', 1), ('dfs-pre-order', 1), ('easy understanding', 1), ('easy-to-understand', 1), ('encoding', 1), ('findduplicatesubtrees', 1), ('golang', 1), ('hashing', 1), ('java ac solution', 1), ('java-solution', 1), ('json', 1), ('leetcode-solution', 1), ('linear time', 1), ('map', 1), ('maps', 1), ('memoization', 1), ('post-order-dfs', 1), ('post-order-traversal', 1), ('postorder', 1), ('preorder traversal', 1), ('recursive easy', 1), ('stringbuilder', 1), ('swift', 1), ('tree-traversal', 1), ('union', 1), ('wrong answer', 1), ('wrong definition', 1), ('wrong-example', 1), ('wrong-sample', 1)]"
650,2 Keys Keyboard,https://leetcode.com/problems/2-keys-keyboard,"Initially on a notepad only one character 'A' is present. You can perform two operations on this notepad for each step:


	Copy All: You can copy all the characters present on the notepad (partial copy is not allowed).
	Paste: You can paste the characters which are copied last time.


 

Given a number n. You have to get exactly n 'A' on the notepad by performing the minimum number of steps permitted. Output the minimum number of steps to get n 'A'.",['dynamic-programming'],Medium,1765,126,151447,76199,"[""4 Keys Keyboard"", ""Broken Calculator""]","[('dynamic programming', 23), ('c++', 21), ('dp', 18), ('python', 10), ('python3', 10), ('cpp', 8), ('java', 8), ('javascript', 7), ('java-solution', 6), ('recursion', 6), ('c#', 5), ('dfs', 5), ('greedy approach', 4), ('python 3', 4), ('2keyskeyboard', 3), ('memoization', 3), ('recursive', 3), ('simple solution', 3), ('bfs', 2), ('c++ code', 2), ('csharp', 2), ('depth first search', 2), ('easy-to-understand', 2), ('explanation', 2), ('golang', 2), ('greedy', 2), ('iterative', 2), ('simple', 2), ('swift', 2), ('top-down dp', 2), ('100 faster', 1), ('100 speed', 1), ('algorithm', 1), ('backtracking', 1), ('bottom up', 1), ('bottom-up-algorithm', 1), ('bottomup', 1), ('botton-up dp', 1), ('c', 1), ('c++ dynamic programming', 1), ('c++ easy', 1), ('c++ iterative sol', 1), ('clean', 1), ('clean-code', 1), ('clean-efficient-code', 1), ('comments', 1), ('common sense', 1), ('complexity-analysis', 1), ('constant memory', 1), ('cpp solution', 1), ('dp-programming', 1), ('dynamic-programming', 1), ('easiest', 1), ('easy', 1), ('easy-understanding', 1), ('easy-undestand', 1), ('explain', 1), ('explained', 1), ('explanation of logic', 1), ('factorization', 1), ('fastest', 1), ('greatest divisor', 1), ('help', 1), ('intuition', 1), ('intuitional', 1), ('iteratve', 1), ('java ac solution', 1), ('javasccript', 1), ('javascript recursive', 1), ('kotlin', 1), ('linear time', 1), ('logic explained', 1), ('math', 1), ('memorization', 1), ('no-dp', 1), ('non dp', 1), ('prime', 1), ('prime factorization', 1), ('prime-factors', 1), ('proof', 1), ('python2', 1), ('readable', 1), ('recusion', 1), ('ruby', 1), ('sieve-of-eratosthenes', 1), ('solution', 1), ('top down', 1), ('top-down', 1)]"
649,Dota2 Senate,https://leetcode.com/problems/dota2-senate,"In the world of Dota2, there are two parties: the Radiant and the Dire.

The Dota2 senate consists of senators coming from two parties. Now the senate wants to make a decision about a change in the Dota2 game. The voting for this change is a round-based procedure. In each round, each senator can exercise one of the two rights:


	Ban one senator's right:
	A senator can make another senator lose all his rights in this and all the following rounds.
	Announce the victory:
	If this senator found the senators who still have rights to vote are all from the same party, he can announce the victory and make the decision about the change in the game.


 

Given a string representing each senator's party belonging. The character 'R' and 'D' represent the Radiant party and the Dire party respectively. Then if there are n senators, the size of the given string will be n.

The round-based procedure starts from the first senator to the last senator in the given order. This procedure will last until the end of voting. All the senators who have lost their rights will be skipped during the procedure.

Suppose every senator is smart enough and will play the best strategy for his own party, you need to predict which party will finally announce the victory and make the change in the Dota2 game. The output should be Radiant or Dire.",['greedy'],Medium,332,260,38531,15172,"[""Teemo Attacking""]","[('greedy', 4), ('python', 3), ('python3', 3), ('queue', 3), ('c#', 2), ('cpp', 2), ('golang', 2), ('python 3', 2), ('c++', 1), ('cpp solution', 1), ('cpp with explanation', 1), ('easy', 1), ('easy to code', 1), ('explanations', 1), ('go', 1), ('golang-solution', 1), ('intuitive', 1), ('java', 1), ('javascript', 1), ('javascript solution', 1), ('linkedlist', 1), ('sets', 1), ('simulation', 1), ('stl', 1), ('swift', 1)]"
648,Replace Words,https://leetcode.com/problems/replace-words,"In English, we have a concept called root, which can be followed by some other word to form another longer word - let's call this word successor. For example, when the root ""an"" is followed by the successor word ""other"", we can form a new word ""another"".

Given a dictionary consisting of many roots and a sentence consisting of words separated by spaces, replace all the successors in the sentence with the root forming it. If a successor can be replaced by more than one root, replace it with the root that has the shortest length.

Return the sentence after the replacement.","['hash-table', 'trie']",Medium,988,144,119840,70958,"[""Implement Trie (Prefix Tree)""]","[('trie', 50), ('java', 19), ('c++', 17), ('python', 14), ('tries', 14), ('javascript', 12), ('cpp', 11), ('python 3', 9), ('python3', 7), ('hashmap', 4), ('java-solution', 4), ('swift', 4), ('string', 3), ('trie-tree', 3), ('tries in c++', 3), ('c++ code', 2), ('clean', 2), ('cpp solution', 2), ('easytounderstand', 2), ('fastest', 2), ('javascript solution', 2), ('js', 2), ('simple solution', 2), ('array', 1), ('avnish', 1), ('c', 1), ('c#', 1), ('clean-efficient-code', 1), ('comments-added', 1), ('cpp easy', 1), ('cpp-solution', 1), ('dfs', 1), ('digital tree', 1), ('easy-to-understand', 1), ('easy-undestand', 1), ('es6', 1), ('faster', 1), ('find', 1), ('golang', 1), ('hash-table', 1), ('hashing', 1), ('javasript', 1), ('js javascript', 1), ('kotlin', 1), ('mrmagician', 1), ('prefix', 1), ('prefix tree', 1), ('readable', 1), ('set', 1), ('simple', 1), ('simple python accepted', 1), ('solution', 1), ('stl', 1), ('stringstream', 1), ('test-case-too-weak', 1), ('trie data structure', 1), ('video', 1)]"
647,Palindromic Substrings,https://leetcode.com/problems/palindromic-substrings,"Given a string, your task is to count how many palindromic substrings in this string.

The substrings with different start indexes or end indexes are counted as different substrings even they consist of same characters.","['string', 'dynamic-programming']",Medium,4192,137,445570,279699,"[""Longest Palindromic Substring"", ""Longest Palindromic Subsequence""]","[('dynamic programming', 56), ('c++', 50), ('java', 39), ('python', 36), ('dp', 26), ('cpp', 23), ('easy-understanding', 22), ('python 3', 16), ('python3', 16), ('javascript', 14), ('easy', 11), ('explained', 10), ('c#', 9), ('dynamic-programming', 9), ('java-solution', 9), ('palindrome', 8), ('golang', 7), ('cpp solution', 6), ('simple', 6), ('comments-added', 5), ('java ac solution', 5), ('clean clode', 4), ('constant space', 4), ('easy-undestand', 4), ('golang-solution', 4), ('accepted', 3), ('backtracking', 3), ('comments', 3), ('easytounderstand', 3), ('go', 3), ('recursion', 3), ('short', 3), ('simple solution', 3), ('top down dp', 3), ('2d-array', 2), ('bottom-up', 2), ('brute force', 2), ('c++ code', 2), ('clean code', 2), ('cpp-solution', 2), ('dp-iterative', 2), ('easy to understand', 2), ('easy-to-understand', 2), ('expand', 2), ('fast', 2), ('javascript solution', 2), ('js', 2), ('kotlin', 2), ('manachers-algorithm', 2), ('memoization', 2), ('palindrome-check', 2), ('ruby', 2), ('rust', 2), ('scala', 2), ('solution', 2), ('space', 2), ('string', 2), ('top-down', 2), ('two-pointers', 2), ('video', 2), ('#javascript', 1), ('#python', 1), ('1 liner', 1), ('2ms', 1), ('akku', 1), ('answer', 1), ('awesome samriddhi', 1), ('best-solution', 1), ('bottom up', 1), ('bottom-up dp', 1), ('c', 1), ('c++ easy to understand', 1), ('c++ iterative sol', 1), ('c++14', 1), ('center expansion', 1), ('centre', 1), ('clear-understanding', 1), ('code', 1), ('comments added', 1), ('commetend', 1), ('complexity', 1), ('constant-space', 1), ('cpp easy', 1), ('csharp', 1), ('declarative', 1), ('detailed explanation', 1), ('doubts', 1), ('dp bottom up', 1), ('dp pattern', 1), ('easy-understand', 1), ('easysolution', 1), ('explain', 1), ('explaination', 1), ('explanation', 1), ('explanation of logic', 1), ('extend', 1), ('fast-solution', 1), ('fastest', 1), ('for-loop', 1), ('iteration', 1), ('iterative', 1), ('kotlinvim', 1), ('linear memory', 1), ('linear-time-space', 1), ('manacher', 1), ('manacher-algorithm', 1), ('matrix', 1), ('no-dp', 1), ('non-recursion', 1), ('one-liner', 1), ('palindrom', 1), ('palindromic substrings', 1), ('peymannp', 1), ('pyhton', 1), ('python2', 1), ('questions', 1), ('readable', 1), ('ritik', 1), ('run-time', 1), ('self explanatory', 1), ('simple explanation', 1), ('solution-javascript', 1), ('solution-share', 1), ('solution-sharing-java', 1), ('state-compression', 1), ('string-operation', 1), ('strings', 1), ('swift', 1), ('time', 1), ('tips', 1), ('typescript', 1), ('video-explanation', 1), ('youtube', 1)]"
646,Maximum Length of Pair Chain,https://leetcode.com/problems/maximum-length-of-pair-chain,"You are given an array of n pairs pairs where pairs[i] = [lefti, righti] and lefti < righti.

A pair p2 = [c, d] follows a pair p1 = [a, b] if b < c. A chain of pairs can be formed in this fashion.

Return the length longest chain which can be formed.

You do not need to use up all the given intervals. You can select pairs in any order.",['dynamic-programming'],Medium,1357,88,143596,76465,"[""Longest Increasing Subsequence"", ""Increasing Subsequences""]","[('dynamic programming', 18), ('c++', 17), ('greedy', 14), ('dp', 10), ('python', 9), ('cpp', 7), ('java', 6), ('javascript', 6), ('python 3', 5), ('lis', 4), ('dynamic-programming', 3), ('greedy approach', 3), ('java-solution', 3), ('python3', 3), ('cpp easy', 2), ('golang', 2), ('greedy algorithm', 2), ('kotlin', 2), ('memoization', 2), ('recursion', 2), ('ruby', 2), ('simple solution', 2), ('swift', 2), ('#bisect', 1), ('#dynamic-programming', 1), ('#greedy', 1), ('#python', 1), ('1d-dp', 1), ('activity selection', 1), ('akku', 1), ('binary-search', 1), ('c', 1), ('c#', 1), ('c++ code', 1), ('c++11', 1), ('cpp solution', 1), ('csharp', 1), ('dp-iterative', 1), ('dp-techqique', 1), ('dyanmic programming', 1), ('easy sloution', 1), ('easy understanding', 1), ('easy-understanding', 1), ('easytounderstand', 1), ('explained', 1), ('fast and simple', 1), ('faster then 95', 1), ('go', 1), ('go-solution', 1), ('i-good', 1), ('math', 1), ('memoziation', 1), ('pointer', 1), ('priority queue', 1), ('problem-bad', 1), ('proof', 1), ('python-3', 1), ('python2', 1), ('python3.8', 1), ('scala', 1), ('simple', 1), ('simple clear c++ solution', 1), ('solution-sharing-cpp', 1), ('top-down dp', 1), ('zea7ot', 1)]"
645,Set Mismatch,https://leetcode.com/problems/set-mismatch,"You have a set of integers s, which originally contains all the numbers from 1 to n. Unfortunately, due to some error, one of the numbers in s got duplicated to another number in the set, which results in repetition of one number and loss of another number.

You are given an integer array nums representing the data status of this set after the error.

Find the number that occurs twice and the number that is missing and return them in the form of an array.","['hash-table', 'math']",Easy,1153,437,316077,129350,"[""Find the Duplicate Number""]","[('c++', 38), ('java', 32), ('python', 28), ('cpp', 23), ('easy-understanding', 23), ('java-solution', 15), ('python 3', 15), ('javascript', 13), ('python3', 13), ('math', 12), ('c#', 6), ('array', 5), ('c', 5), ('cpp solution', 5), ('hashmap', 5), ('simple', 5), ('bit-manipulation', 4), ('clean code', 4), ('constant memory', 4), ('explained', 4), ('fast and simple', 4), ('go', 4), ('hashset', 4), ('vector', 4), ('xor', 4), ('bitset', 3), ('commented', 3), ('cplusplus', 3), ('easy', 3), ('easy-to-understand', 3), ('golang', 3), ('golang-solution', 3), ('linear time', 3), ('ruby', 3), ('set', 3), ('algorithms', 2), ('bit operation', 2), ('constant space', 2), ('cpp easy', 2), ('dictonary', 2), ('easy to understand', 2), ('easytounderstand', 2), ('explanation', 2), ('hash table', 2), ('kotlin', 2), ('sum of n natural number', 2), ('tricky', 2), ('unordered map', 2), ('video', 2), ('#easy-understand', 1), ('#java #easy-understand', 1), ('#xor', 1), ('arithmetic progression', 1), ('avnish', 1), ('awesome samriddhi', 1), ('beats 100 percent', 1), ('beginner friendly', 1), ('best space complexity', 1), ('bit manipulation', 1), ('c programming', 1), ('c++ solution', 1), ('clean', 1), ('comment', 1), ('concise-solution', 1), ('constant-space', 1), ('counter', 1), ('counting-sort', 1), ('cpp c++', 1), ('csharp', 1), ('cycle sort', 1), ('cyclic-sort', 1), ('dbabichev', 1), ('dictionary c#', 1), ('easy understanding', 1), ('easy-undestand', 1), ('explain', 1), ('explaination', 1), ('extra array', 1), ('faster', 1), ('fastest', 1), ('gauss formula', 1), ('go-solution', 1), ('golang solution', 1), ('hash set', 1), ('hash-table', 1), ('hashtable', 1), ('help me', 1), ('js', 1), ('js javascript', 1), ('mathematical', 1), ('memory 96', 1), ('mrmagician', 1), ('optimal', 1), ('optimisation', 1), ('performance', 1), ('racket', 1), ('range', 1), ('ritik', 1), ('rust', 1), ('self-explanatory', 1), ('sequence', 1), ('series', 1), ('setmismatch', 1), ('sets', 1), ('short', 1), ('simplesolution', 1), ('single pass', 1), ('sorting', 1), ('space-non', 1), ('straightforward', 1), ('summation', 1), ('swap value', 1), ('swift', 1), ('triangular number', 1), ('two-lines', 1), ('two-pass', 1), ('vectors', 1), ('video-explanation', 1), ('xor-linked-list', 1)]"
643,Maximum Average Subarray I,https://leetcode.com/problems/maximum-average-subarray-i,"Given an array consisting of n integers, find the contiguous subarray of given length k that has the maximum average value. And you need to output the maximum average value.",['array'],Easy,978,136,236292,99366,"[""Maximum Average Subarray II""]","[('python 3', 16), ('slidingwindow', 16), ('python', 15), ('sliding window', 14), ('c++', 13), ('javascript', 12), ('sliding-window', 12), ('cpp', 11), ('java', 10), ('linear time', 6), ('python3', 5), ('c#', 4), ('easy', 4), ('clean code', 3), ('easy-understanding', 3), ('golang', 3), ('java-solution', 3), ('javascrip', 3), ('ruby', 3), ('simple solution', 3), ('array', 2), ('easiest', 2), ('easy-to-understand', 2), ('fast-solution', 2), ('javascript solution', 2), ('self-explanatory', 2), ('swift', 2), ('#sliding-window', 1), ('100', 1), ('algorithms', 1), ('beginner', 1), ('beginner friendly', 1), ('c', 1), ('c code', 1), ('clean', 1), ('constant memory', 1), ('constant space', 1), ('cpp-solution', 1), ('easy understanding', 1), ('easy-undestand', 1), ('easytounderstand', 1), ('es6', 1), ('explained', 1), ('fast and simple', 1), ('fastest', 1), ('findmaxaverage', 1), ('for loop', 1), ('go', 1), ('javasciprt', 1), ('js', 1), ('js javascript', 1), ('kotlin', 1), ('memoization', 1), ('noob', 1), ('o of n', 1), ('one pass', 1), ('oneliner', 1), ('prefix sum', 1), ('python2', 1), ('readable', 1), ('scala', 1), ('simple', 1), ('simple python solution', 1), ('sliding-window-maximum', 1), ('solution-javascript', 1), ('solution-sharing-cpp', 1), ('two pointers', 1), ('ultra easy', 1), ('upvote', 1)]"
640,Solve the Equation,https://leetcode.com/problems/solve-the-equation,"Solve a given equation and return the value of x in the form of string ""x=#value"". The equation contains only '+', '-' operation, the variable x and its coefficient.



If there is no solution for the equation, return ""No solution"".


If there are infinite solutions for the equation, return ""Infinite solutions"".


If there is exactly one solution for the equation, we ensure that the value of x is an integer.",['math'],Medium,294,591,66124,28298,"[""Fraction Addition and Subtraction""]","[('java', 5), ('c++', 4), ('python', 4), ('python3', 4), ('cpp', 3), ('javascript', 3), ('math', 3), ('string', 3), ('c#', 2), ('swift', 2), ('c', 1), ('c++ ac', 1), ('c++ easy to understand', 1), ('clean code', 1), ('complex number', 1), ('concise', 1), ('easy', 1), ('easy-to-understand', 1), ('easy-understanding', 1), ('efficient', 1), ('explained', 1), ('explanation', 1), ('explanations', 1), ('golang', 1), ('iterative', 1), ('java-solution', 1), ('just brain', 1), ('kotlin', 1), ('kotlin-solution', 1), ('on', 1), ('python 3', 1), ('sandeepkumar', 1), ('solution-sharing-cpp', 1), ('solve-the-equation', 1)]"
639,Decode Ways II,https://leetcode.com/problems/decode-ways-ii,"A message containing letters from A-Z can be encoded into numbers using the following mapping:


'A' -> ""1""
'B' -> ""2""
...
'Z' -> ""26""


To decode an encoded message, all the digits must be grouped then mapped back into letters using the reverse of the mapping above (there may be multiple ways). For example, ""11106"" can be mapped into:


	""AAJF"" with the grouping (1 1 10 6)
	""KJF"" with the grouping (11 10 6)


Note that the grouping (1 11 06) is invalid because ""06"" cannot be mapped into 'F' since ""6"" is different from ""06"".

In addition to the mapping above, an encoded message may contain the '*' character, which can represent any digit from '1' to '9' ('0' is excluded). For example, the encoded message ""1*"" may represent any of the encoded messages ""11"", ""12"", ""13"", ""14"", ""15"", ""16"", ""17"", ""18"", or ""19"". Decoding ""1*"" is equivalent to decoding any of the encoded messages it can represent.

Given a string s containing digits and the '*' character, return the number of ways to decode it.

Since the answer may be very large, return it modulo 109 + 7.",['dynamic-programming'],Hard,592,594,140736,38992,"[""Decode Ways""]","[('dynamic programming', 13), ('c++', 9), ('memoization', 7), ('dp', 6), ('java', 4), ('python', 4), ('recursion', 4), ('cpp', 3), ('easy-understanding', 3), ('clean code', 2), ('explanation', 2), ('java-solution', 2), ('python 3', 2), ('#cpp', 1), ('#dynamic-programming', 1), ('100 memory', 1), ('100 speed', 1), ('bottom-up-algorithm', 1), ('c#', 1), ('clean solution', 1), ('constant space', 1), ('dp-programming', 1), ('dp-techqique', 1), ('dyanmic programming', 1), ('dynamic programmin', 1), ('dynammic programming', 1), ('easy', 1), ('easy understanding', 1), ('easytounderstand', 1), ('fast and simple', 1), ('iterative', 1), ('javascript', 1), ('js javascript', 1), ('linear timecomplexity', 1), ('math', 1), ('no-array', 1), ('python3', 1), ('recursive easy', 1), ('solition-sharing', 1), ('top down dp', 1), ('topdown', 1)]"
638,Shopping Offers,https://leetcode.com/problems/shopping-offers,"In LeetCode Store, there are n items to sell. Each item has a price. However, there are some special offers, and a special offer consists of one or more different kinds of items with a sale price.

You are given an integer array price where price[i] is the price of the ith item, and an integer array needs where needs[i] is the number of pieces of the ith item you want to buy.

You are also given an array special where special[i] is of size n + 1 where special[i][j] is the number of pieces of the jth item in the ith offer and special[i][n] (i.e., the last integer in the array) is the price of the ith offer.

Return the lowest price you have to pay for exactly certain items as given, where you could make optimal use of the special offers. You are not allowed to buy more items than you want, even if that would lower the overall price. You could use any of the special offers as many times as you want.","['dynamic-programming', 'depth-first-search']",Medium,735,524,70023,37347,[],"[('python', 9), ('c++', 7), ('dynamic programming', 6), ('memoization', 6), ('dfs', 5), ('python3', 5), ('recursion', 5), ('dp', 4), ('python 3', 4), ('recursive', 4), ('backtracking', 3), ('bfs', 2), ('dynamic-programming', 2), ('golang', 2), ('memorization', 2), ('9ms', 1), ('akku', 1), ('c++ ac', 1), ('clean code', 1), ('cpp', 1), ('cpp soltuion', 1), ('dfs-topdown', 1), ('dp java', 1), ('easy', 1), ('easy-to-understand', 1), ('explanation', 1), ('fast-solution', 1), ('java-solution', 1), ('javascript', 1), ('js javascript', 1), ('knapsack', 1), ('map', 1), ('math', 1), ('memoized', 1), ('question', 1), ('recursive dp', 1), ('recursive solution', 1), ('straight-forward', 1), ('swift', 1), ('top down', 1), ('topdown', 1)]"
637,Average of Levels in Binary Tree,https://leetcode.com/problems/average-of-levels-in-binary-tree,"Given the root of a binary tree, return the average value of the nodes on each level in the form of an array. Answers within 10-5 of the actual answer will be accepted.",['tree'],Easy,1992,206,292489,193676,"[""Binary Tree Level Order Traversal"", ""Binary Tree Level Order Traversal II""]","[('bfs', 97), ('c++', 61), ('python', 40), ('cpp', 39), ('javascript', 32), ('queue', 29), ('java', 26), ('python 3', 24), ('python3', 24), ('level-order-traversal', 23), ('dfs', 13), ('recursion', 13), ('c#', 11), ('cpp solution', 11), ('java-solution', 11), ('easy', 10), ('easy-understanding', 10), ('level order traversal', 10), ('easy-to-understand', 9), ('breadth first search', 8), ('explained', 8), ('breadth-first-search', 7), ('iterative', 7), ('simple', 7), ('swift', 6), ('golang', 5), ('ruby', 5), ('rust', 5), ('trees', 5), ('bfs simple solution', 4), ('binary-tree', 4), ('c++ code', 4), ('cpp easy', 4), ('go', 4), ('vector', 4), ('breadth first traversal', 3), ('depth first search', 3), ('dfs-bfs', 3), ('easytounderstand', 3), ('fast and simple', 3), ('map', 3), ('queue-approach', 3), ('recusion', 3), ('tree-traversal', 3), ('video-explanation', 3), ('bfs java', 2), ('breath first search', 2), ('c', 2), ('c++ solution', 2), ('concise', 2), ('dfs recursive', 2), ('easy-undestand', 2), ('go-solution', 2), ('golang-solution', 2), ('hashmap', 2), ('iterative-bfs', 2), ('js', 2), ('recursive', 2), ('simple-solution', 2), ('straight-forward', 2), ('swift5', 2), ('tree', 2), ('wrong output', 2), ('100', 1), ('100 space', 1), ('2ms', 1), ('637 java', 1), ('90+faster', 1), ('algorithm', 1), ('algorithms', 1), ('array map', 1), ('awesome samriddhi', 1), ('beats 100', 1), ('beginner', 1), ('bfs example', 1), ('bfs python', 1), ('bfs-cpp', 1), ('binary search', 1), ('binarytree', 1), ('bsf', 1), ('built in queue of python3', 1), ('c++ queue', 1), ('clean code', 1), ('clear', 1), ('clear-understanding', 1), ('commentary', 1), ('correct', 1), ('cpp-solution', 1), ('depth first traversal', 1), ('deque', 1), ('dequeu', 1), ('dfs simple solution', 1), ('dfs vs bfs', 1), ('dictionary', 1), ('dictonary', 1), ('easy to understand', 1), ('easy understanding', 1), ('easy-peasy', 1), ('easy-understand', 1), ('explained solution', 1), ('fast python bfs iterative', 1), ('hash', 1), ('in-order-traversal', 1), ('interview', 1), ('intutive', 1), ('iterate', 1), ('iteration', 1), ('iterative way', 1), ('iteratve', 1), ('java ac solution', 1), ('javascriot', 1), ('javascript solution', 1), ('leetcode 637', 1), ('level order', 1), ('level-order', 1), ('list comprehension', 1), ('mapreduce', 1), ('overflow', 1), ('pro', 1), ('pyhton 3', 1), ('python bfs iterative', 1), ('pythonic', 1), ('question', 1), ('queue and linkedlist', 1), ('raviinroorkee', 1), ('readable', 1), ('recurision', 1), ('reference', 1), ('ritik', 1), ('sandeepkumar', 1), ('self-explanatory', 1), ('short concise', 1), ('simple clear c++ solution', 1), ('simplest', 1), ('solution', 1), ('solution-sharing-cpp', 1), ('space-efficient', 1), ('stack', 1), ('straightforward', 1), ('struct', 1), ('supereasy', 1), ('traversal', 1), ('traverse', 1), ('tree traversal', 1), ('typescript', 1), ('understandable', 1), ('video', 1), ('wrong answer', 1)]"
636,Exclusive Time of Functions,https://leetcode.com/problems/exclusive-time-of-functions,"On a single-threaded CPU, we execute a program containing n functions. Each function has a unique ID between 0 and n-1.

Function calls are stored in a call stack: when a function call starts, its ID is pushed onto the stack, and when a function call ends, its ID is popped off the stack. The function whose ID is at the top of the stack is the current function being executed. Each time a function starts or ends, we write a log with the ID, whether it started or ended, and the timestamp.

You are given a list logs, where logs[i] represents the ith log message formatted as a string ""{function_id}:{""start"" | ""end""}:{timestamp}"". For example, ""0:start:3"" means a function call with function ID 0 started at the beginning of timestamp 3, and ""1:end:2"" means a function call with function ID 1 ended at the end of timestamp 2. Note that a function can be called multiple times, possibly recursively.

A function's exclusive time is the sum of execution times for all function calls in the program. For example, if a function is called twice, one call executing for 2 time units and another call executing for 1 time unit, the exclusive time is 2 + 1 = 3.

Return the exclusive time of each function in an array, where the value at the ith index represents the exclusive time for the function with ID i.",['stack'],Medium,1049,1799,196753,108780,[],"[('stack', 32), ('c++', 12), ('python', 10), ('stacks', 10), ('java', 9), ('python3', 7), ('javascript', 5), ('python 3', 4), ('swift', 4), ('c#', 3), ('cpp', 3), ('clean code', 2), ('explain', 2), ('intuitive', 2), ('javascript solution', 2), ('linear time', 2), ('recursive', 2), ('clear explanation', 1), ('dfs', 1), ('easy', 1), ('easy-to-understand', 1), ('easytounderstand', 1), ('explained', 1), ('explanation of logic', 1), ('explanations', 1), ('faceebook', 1), ('fast and simple', 1), ('functional-programming', 1), ('intuition', 1), ('java solution', 1), ('kotlin', 1), ('kotlin-solution', 1), ('parsing', 1), ('problem-statement', 1), ('queue', 1), ('simulation', 1), ('single pass', 1), ('solution-sharing-cpp', 1), ('stack-based', 1), ('tree', 1)]"
633,Sum of Square Numbers,https://leetcode.com/problems/sum-of-square-numbers,"Given a non-negative integer c, decide whether there're two integers a and b such that a2 + b2 = c.",['math'],Medium,691,385,255274,83514,"[""Valid Perfect Square""]","[('c++', 13), ('python', 11), ('cpp', 10), ('java', 8), ('java-solution', 5), ('python 3', 5), ('two-pointer', 5), ('two-pointers', 5), ('javascript', 4), ('binary search', 3), ('cpp solution', 3), ('math', 3), ('python3', 3), ('two sum', 3), ('algorithms', 2), ('c', 2), ('c#', 2), ('go', 2), ('golang', 2), ('math.sqrt', 2), ('sqrt', 2), ('two pointers', 2), ('0 ms', 1), ('0ms runtime', 1), ('clean code', 1), ('csharp', 1), ('data structures', 1), ('easy', 1), ('easy-to-understand', 1), ('easy-understanding', 1), ('easytounderstand', 1), ('explanation', 1), ('fermat', 1), ('golang-solution', 1), ('hash', 1), ('intutive', 1), ('javascript solution', 1), ('js', 1), ('number-theory', 1), ('pyhton', 1), ('remainderinteger', 1), ('ruby', 1), ('self explanatory', 1), ('set', 1), ('short', 1), ('solution-sharing-cpp', 1), ('straight-forward', 1), ('straightforward', 1), ('swift', 1), ('ultra simple', 1), ('upvote', 1), ('video', 1), ('youtube', 1)]"
632,Smallest Range Covering Elements from K Lists,https://leetcode.com/problems/smallest-range-covering-elements-from-k-lists,"You have k lists of sorted integers in non-decreasing order. Find the smallest range that includes at least one number from each of the k lists.

We define the range [a, b] is smaller than range [c, d] if b - a < d - c or a < c if b - a == d - c.","['hash-table', 'two-pointers', 'string']",Hard,1408,26,85849,46955,"[""Minimum Window Substring""]","[('c++', 13), ('priority queue', 13), ('java', 11), ('heapq', 5), ('min-heap', 5), ('cpp', 4), ('heap', 4), ('golang', 3), ('slidingwindow', 3), ('cpp solution', 2), ('easy', 2), ('java-solution', 2), ('min heap', 2), ('python', 2), ('two pointers', 2), ('two-pointers', 2), ('arrays', 1), ('backtracking', 1), ('binary-search', 1), ('c', 1), ('c#', 1), ('cpp-solution', 1), ('custom class', 1), ('easy-understanding', 1), ('easy-undestand', 1), ('easytounderstand', 1), ('hash table', 1), ('heaps', 1), ('minheap', 1), ('pointer', 1), ('pointers', 1), ('priority-queue', 1), ('python 3', 1), ('set', 1), ('set c++', 1), ('slide window', 1), ('sort', 1), ('sorted set', 1), ('swift', 1), ('treemap', 1), ('twopointer', 1), ('window-sliding', 1)]"
630,Course Schedule III,https://leetcode.com/problems/course-schedule-iii,"There are n different online courses numbered from 1 to n. Each course has some duration(course length) t and closed on dth day. A course should be taken continuously for t days and must be finished before or on the dth day. You will start at the 1st day.

Given n online courses represented by pairs (t,d), your task is to find the maximal number of courses that can be taken.",['greedy'],Hard,1028,41,83960,28442,"[""Course Schedule"", ""Course Schedule II""]","[('heap', 6), ('priority queue', 4), ('python', 4), ('c++', 3), ('cpp', 3), ('javascript', 3), ('python3', 3), ('bottom-up', 2), ('dp', 2), ('greedy', 2), ('c#', 1), ('commented', 1), ('explained', 1), ('heapq', 1), ('java', 1), ('max-heap', 1), ('nlogn time', 1), ('priority-queue', 1), ('priorityqueue', 1), ('python2', 1), ('recursion', 1), ('scala', 1), ('sort', 1), ('top-down', 1)]"
629,K Inverse Pairs Array,https://leetcode.com/problems/k-inverse-pairs-array,"Given two integers n and k, find how many different arrays consist of numbers from 1 to n such that there are exactly k inverse pairs.

We define an inverse pair as following: For ith and jth element in the array, if i < j and a[i] > a[j] then it's an inverse pair; Otherwise, it's not.

Since the answer may be very large, the answer should be modulo 109 + 7.",['dynamic-programming'],Hard,399,79,40586,12903,[],"[('dynamic programming', 3), ('c++', 2), ('clean code', 1), ('cpp', 1), ('java', 1), ('javascript', 1), ('python 3', 1), ('time-limit-exceeded-c#', 1)]"
628,Maximum Product of Three Numbers,https://leetcode.com/problems/maximum-product-of-three-numbers,"Given an integer array nums, find three numbers whose product is maximum and return the maximum product.","['array', 'math']",Easy,1601,447,324247,151588,"[""Maximum Product Subarray""]","[('c++', 17), ('python', 17), ('javascript', 14), ('cpp', 12), ('java', 9), ('python 3', 9), ('easy-to-understand', 7), ('easy-understanding', 7), ('python3', 7), ('constant space', 6), ('c++ code', 4), ('cpp solution', 4), ('golang', 4), ('c#', 3), ('easy-undestand', 3), ('java-solution', 3), ('linear time', 3), ('ruby', 3), ('simple', 3), ('swift', 3), ('accepted solution', 2), ('clean', 2), ('easiest', 2), ('greedy approach', 2), ('heapq', 2), ('math', 2), ('sorting', 2), ('2liner', 1), ('amazon', 1), ('array nesting', 1), ('c', 1), ('c++11', 1), ('constant memory', 1), ('cpp simple', 1), ('cpp-solution', 1), ('dynamic programming', 1), ('easy', 1), ('easy understand', 1), ('easy-to-remember', 1), ('easytounderstating', 1), ('fast-solution', 1), ('faster than 99.66', 1), ('fastest', 1), ('go', 1), ('heaps algorithm', 1), ('helper', 1), ('ios', 1), ('java solution', 1), ('javascript solution', 1), ('linertime', 1), ('maxproductof3nums', 1), ('nested for loops', 1), ('one pass solution', 1), ('one-liner', 1), ('oneline', 1), ('priority queue', 1), ('python 2', 1), ('python2', 1), ('pythonpython3', 1), ('remove-element', 1), ('rust', 1), ('scala', 1), ('simple clear c++ solution', 1), ('sorted', 1), ('sorted array', 1), ('swift5', 1)]"
627,Swap Salary,https://leetcode.com/problems/swap-salary,"Table: Salary


+-------------+----------+
| Column Name | Type     |
+-------------+----------+
| id          | int      |
| name        | varchar  |
| sex         | ENUM     |
| salary      | int      |
+-------------+----------+
id is the primary key for this table.
The sex column is ENUM value of type ('m', 'f').
The table contains information about an employee.


 

Write an SQL query to swap all 'f' and 'm' values (i.e., change all 'f' values to 'm' and vice versa) with a single update statement and no intermediate temp table(s).

Note that you must write a single update statement, DO NOT write any select statement for this problem.

The query result format is in the following example:

 


Salary table:
+----+------+-----+--------+
| id | name | sex | salary |
+----+------+-----+--------+
| 1  | A    | m   | 2500   |
| 2  | B    | f   | 1500   |
| 3  | C    | m   | 5500   |
| 4  | D    | f   | 500    |
+----+------+-----+--------+

Result table:
+----+------+-----+--------+
| id | name | sex | salary |
+----+------+-----+--------+
| 1  | A    | f   | 2500   |
| 2  | B    | m   | 1500   |
| 3  | C    | f   | 5500   |
| 4  | D    | m   | 500    |
+----+------+-----+--------+
(1, A) and (3, C) were changed from 'm' to 'f'.
(2, B) and (4, D) were changed from 'f' to 'm'.",[],Easy,602,314,180336,141096,[],"[('mysql', 9), ('sql', 7), ('case statement', 3), ('case when', 3), ('easy', 3), ('commentary', 2), ('if', 2), ('simple', 2), ('update', 2), ('case', 1), ('chinese', 1), ('decode', 1), ('if-else', 1), ('medium', 1), ('oracle', 1), ('oracle sql', 1), ('real-world-scenario', 1), ('set', 1), ('solution', 1), ('sql case', 1), ('t-sql', 1), ('tsql', 1), ('video explanation', 1), ('video-explanation', 1), ('youtube', 1)]"
626,Exchange Seats,https://leetcode.com/problems/exchange-seats,"Mary is a teacher in a middle school and she has a table seat storing students' names and their corresponding seat ids.

The column id is continuous increment.

Mary wants to change seats for the adjacent students.

Can you write a SQL query to output the result for Mary?

 


+---------+---------+
|    id   | student |
+---------+---------+
|    1    | Abbot   |
|    2    | Doris   |
|    3    | Emerson |
|    4    | Green   |
|    5    | Jeames  |
+---------+---------+


For the sample input, the output is:


+---------+---------+
|    id   | student |
+---------+---------+
|    1    | Doris   |
|    2    | Abbot   |
|    3    | Green   |
|    4    | Emerson |
|    5    | Jeames  |
+---------+---------+


Note:

If the number of students is odd, there is no need to change the last one's seat.",[],Medium,444,300,106674,70844,[],"[('mysql', 16), ('sql', 6), ('mssql', 3), ('oracle', 3), ('sql server', 3), ('case', 2), ('t-sql', 2), ('window function', 2), ('626. exchange seats', 1), ('case when', 1), ('cte', 1), ('easy-understanding', 1), ('lag', 1), ('lead', 1), ('max', 1), ('mod', 1), ('ms sql server', 1), ('my sql', 1), ('postgresql', 1), ('solution', 1), ('union', 1), ('union mysql', 1)]"
623,Add One Row to Tree,https://leetcode.com/problems/add-one-row-to-tree,"Given the root of a binary tree and two integers val and depth, add a row of nodes with value val at the given depth depth.

Note that the root node is at depth 1.

The adding rule is:


	Given the integer depth, for each not null tree node cur at the depth depth - 1, create two tree nodes with value val as cur's left subtree root and right subtree root.
	cur's original left subtree should be the left subtree of the new left subtree root.
	cur's original right subtree should be the right subtree of the new right subtree root.
	If depth == 1 that means there is no depth depth - 1 at all, then create a tree node with value val as the new root of the whole original tree, and the original tree is the new root's left subtree.",['tree'],Medium,911,163,131344,69635,[],"[('bfs', 46), ('c++', 41), ('java', 37), ('dfs', 33), ('python', 26), ('cpp', 22), ('level-order-traversal', 14), ('recursion', 13), ('python3', 10), ('java-solution', 9), ('queue', 9), ('easy-to-understand', 8), ('recursive', 8), ('c#', 7), ('javascript', 7), ('python 3', 7), ('easy', 5), ('easy-understanding', 5), ('golang', 5), ('ruby', 5), ('breadth first search', 4), ('explained', 4), ('bfs simple solution', 3), ('binary-tree', 3), ('go', 3), ('recurision', 3), ('simple', 3), ('0ms', 2), ('c++ solution', 2), ('cpp solution', 2), ('depth first search', 2), ('dfs solution', 2), ('intuitive', 2), ('iterative', 2), ('iterative-bfs', 2), ('level order traversal', 2), ('linear time', 2), ('recursive easy', 2), ('recusion', 2), ('rust', 2), ('simple solution', 2), ('swift', 2), ('tree', 2), ('trees', 2), ('video-explanation', 2), ('0ms-solution', 1), ('100 faster cpp', 1), ('100 speed', 1), ('addonerowtotree', 1), ('awesome samriddhi', 1), ('beats 100', 1), ('beginner friendly', 1), ('bfs-java', 1), ('breadth first traversal', 1), ('breadth-first-search', 1), ('c', 1), ('c++ easy to understand', 1), ('c++ solution simple', 1), ('clean code', 1), ('clean-code', 1), ('cplusplus', 1), ('depth-first-search', 1), ('deque', 1), ('dfs simple solution', 1), ('dfs vs bfs', 1), ('dsf', 1), ('easytounderstand', 1), ('explanation of logic', 1), ('fast', 1), ('fast and simple', 1), ('fasterthan100', 1), ('golang-solution', 1), ('iteration vs recursion', 1), ('iterative vs recursive', 1), ('javascriptes6', 1), ('kotlin', 1), ('level order', 1), ('level-order', 1), ('linear memory', 1), ('notmpvariable', 1), ('preorder', 1), ('python bfs', 1), ('queues', 1), ('raviinroorkee', 1), ('recursion vs iteration', 1), ('recursive vs iterative', 1), ('recursively', 1), ('ritik', 1), ('simple clear c++ solution', 1), ('simplest', 1), ('single queue', 1), ('solution', 1), ('solution-python', 1), ('space-efficient', 1), ('traversal tree', 1), ('tree traversal', 1), ('video solution', 1)]"
621,Task Scheduler,https://leetcode.com/problems/task-scheduler,"Given a characters array tasks, representing the tasks a CPU needs to do, where each letter represents a different task. Tasks could be done in any order. Each task is done in one unit of time. For each unit of time, the CPU could complete either one task or just be idle.

However, there is a non-negative integer n that represents the cooldown period between two same tasks (the same letter in the array), that is that there must be at least n units of time between any two same tasks.

Return the least number of units of times that the CPU will take to finish all the given tasks.","['array', 'greedy', 'queue']",Medium,4687,890,498448,261050,"[""Rearrange String k Distance Apart"", ""Reorganize String""]","[('c++', 22), ('python', 20), ('java', 15), ('priority queue', 12), ('python 3', 11), ('easy-to-understand', 10), ('easy-understanding', 9), ('javascript', 8), ('cpp', 6), ('java-solution', 6), ('python3', 6), ('c#', 5), ('cpp solution', 5), ('greedy', 5), ('heapq', 5), ('explained', 4), ('hashmap', 4), ('c++ code', 3), ('dictionary', 3), ('easy-undestand', 3), ('easytounderstand', 3), ('hash table', 3), ('heap', 3), ('map', 3), ('maxheap', 3), ('priorityqueue', 3), ('queue', 3), ('algorithm', 2), ('clean', 2), ('greedy algorithm', 2), ('greedy approach', 2), ('intuitive', 2), ('java ac solution', 2), ('javascript solution', 2), ('math', 2), ('max-heap', 2), ('priority-queue', 2), ('simple clear c++ solution', 2), ('simple solution', 2), ('solution-sharing-cpp', 2), ('task-scheduler', 2), ('#easy-understand', 1), ('#easysolution', 1), ('arrays', 1), ('basic', 1), ('c', 1), ('c++ ac', 1), ('c++ solution', 1), ('c++11', 1), ('clean code', 1), ('concise', 1), ('cooldown', 1), ('count', 1), ('counting algorithm', 1), ('deque', 1), ('easy', 1), ('example', 1), ('explain', 1), ('explained solution', 1), ('explanation of logic', 1), ('facebook-india', 1), ('frequency', 1), ('frequency count', 1), ('frequencycounting', 1), ('golang', 1), ('help me', 1), ('hints', 1), ('idleslots', 1), ('javsacript', 1), ('kotlinvim', 1), ('linear', 1), ('linear time', 1), ('linear-time', 1), ('math based solution', 1), ('max heap', 1), ('mininal', 1), ('nutanix', 1), ('object-oriented', 1), ('optimal', 1), ('proof', 1), ('recursion', 1), ('rule-based', 1), ('rust', 1), ('scala', 1), ('scheduling-problem', 1), ('sequence', 1), ('series', 1), ('simple', 1), ('simple logic', 1), ('sort', 1), ('sort-by-parity', 1), ('sorted', 1), ('swift', 1), ('taskscheduler', 1), ('techbacker', 1), ('test-cases', 1), ('vector-operation', 1), ('video', 1), ('video solution', 1), ('video-explanation', 1), ('visualization', 1)]"
620,Not Boring Movies,https://leetcode.com/problems/not-boring-movies,"X city opened a new cinema, many people would like to go to this cinema. The cinema also gives out a poster indicating the movies’ ratings and descriptions.
Please write a SQL query to output movies with an odd numbered ID and a description that is not 'boring'. Order the result by rating.

 

For example, table cinema:


+---------+-----------+--------------+-----------+
|   id    | movie     |  description |  rating   |
+---------+-----------+--------------+-----------+
|   1     | War       |   great 3D   |   8.9     |
|   2     | Science   |   fiction    |   8.5     |
|   3     | irish     |   boring     |   6.2     |
|   4     | Ice song  |   Fantacy    |   8.6     |
|   5     | House card|   Interesting|   9.1     |
+---------+-----------+--------------+-----------+

For the example above, the output should be:


+---------+-----------+--------------+-----------+
|   id    | movie     |  description |  rating   |
+---------+-----------+--------------+-----------+
|   5     | House card|   Interesting|   9.1     |
|   1     | War       |   great 3D   |   8.9     |
+---------+-----------+--------------+-----------+",[],Easy,351,329,195292,137405,[],"[('mysql', 20), ('sql', 7), ('easy', 4), ('database', 3), ('easy-understanding', 2), ('fast', 2), ('mssql', 2), ('oracle', 2), ('simple', 2), ('boring', 1), ('cool', 1), ('easiest', 1), ('easy-understand', 1), ('easy-understsand', 1), ('easytounderstand', 1), ('faster', 1), ('great', 1), ('javascript', 1), ('like', 1), ('mod', 1), ('modulo', 1), ('ms sql', 1), ('ms sql server', 1), ('order', 1), ('order by', 1), ('solution', 1), ('tsql', 1), ('understandable', 1), ('video solution', 1), ('video-explanation', 1)]"
617,Merge Two Binary Trees,https://leetcode.com/problems/merge-two-binary-trees,"You are given two binary trees root1 and root2.

Imagine that when you put one of them to cover the other, some nodes of the two trees are overlapped while the others are not. You need to merge the two trees into a new binary tree. The merge rule is that if two nodes overlap, then sum node values up as the new value of the merged node. Otherwise, the NOT null node will be used as the node of the new tree.

Return the merged tree.

Note: The merging process must start from the root nodes of both trees.",['tree'],Easy,4255,196,510838,386332,[],"[('java', 45), ('c++', 43), ('recursion', 42), ('javascript', 30), ('python', 26), ('recursive', 26), ('cpp', 22), ('binary-tree', 18), ('python 3', 18), ('java-solution', 16), ('c#', 11), ('cpp solution', 11), ('trees', 9), ('dfs', 8), ('easy', 8), ('python3', 7), ('recusion', 7), ('tree', 7), ('c', 6), ('golang', 6), ('iterative', 6), ('c++ code', 5), ('easy-understanding', 5), ('recursively', 5), ('golang-solution', 4), ('kotlin', 4), ('merge binary two trees', 4), ('preorder traversal', 4), ('ruby', 4), ('bfs', 3), ('binary search tree', 3), ('clean', 3), ('dfs-tree', 3), ('easy-to-understand', 3), ('go-solution', 3), ('iterative solution', 3), ('iteratively', 3), ('merge', 3), ('merge-two-binary-trees', 3), ('readable', 3), ('scala', 3), ('simple solution', 3), ('solution', 3), ('swift', 3), ('tree traversal', 3), ('typescript', 3), ('100 faster runtime', 2), ('100 space', 2), ('100 speed', 2), ('binary tree', 2), ('c++11', 2), ('concise', 2), ('cpp easy', 2), ('dfs simple solution', 2), ('dfs-topdown', 2), ('easytounderstand', 2), ('efficient', 2), ('explained', 2), ('explanation', 2), ('go', 2), ('javascript recursive', 2), ('javascript solution', 2), ('preorder', 2), ('queues', 2), ('recurision', 2), ('recursive easy', 2), ('recursive solution', 2), ('simple', 2), ('stacks', 2), ('100 faster', 1), ('40ms', 1), ('algorithm', 1), ('amazon', 1), ('awesome samriddhi', 1), ('binary trees', 1), ('c code', 1), ('c programming', 1), ('c++ ac', 1), ('c++ recursive solution', 1), ('c++ solution', 1), ('clean clode', 1), ('clear', 1), ('commented', 1), ('comments', 1), ('csharp', 1), ('data structures', 1), ('deepcopy', 1), ('depth first search', 1), ('depth-first search', 1), ('depth-first-search', 1), ('dfs-bfs', 1), ('dfs-non-recursive', 1), ('dfs-recursive', 1), ('early-returns', 1), ('easiest', 1), ('easy to read', 1), ('easy understanding', 1), ('easy-solution', 1), ('easy-to-read', 1), ('easy-undestand', 1), ('esay', 1), ('explaination', 1), ('faceebook', 1), ('fast', 1), ('fast-solution', 1), ('fasterthan100', 1), ('go lang', 1), ('go-solutiong', 1), ('golang solution', 1), ('google-phone-interview', 1), ('implementation', 1), ('inorder travarsal', 1), ('input-not-modified', 1), ('iterate', 1), ('iteration', 1), ('iterative traversal', 1), ('iterative-solution', 1), ('izaac', 1), ('java solution', 1), ('javascrip', 1), ('javscript', 1), ('kotlinvim', 1), ('lazysoul', 1), ('level-order-traversal', 1), ('linear-time', 1), ('merge-binary-tree', 1), ('mergetrees', 1), ('merging', 1), ('minimal', 1), ('no recursion', 1), ('no-new-node', 1), ('non-destructive', 1), ('nutanix', 1), ('postorder-traversal', 1), ('pre-order', 1), ('preorder-recursion', 1), ('python2', 1), ('python3.8', 1), ('pythonic', 1), ('queue', 1), ('recrusive', 1), ('recurrance', 1), ('recursive dfs', 1), ('recursive dp', 1), ('recursive-dfs', 1), ('resursive', 1), ('ritik', 1), ('rust', 1), ('share java solution', 1), ('short code', 1), ('solution-cpp', 1), ('solution-sharing-cpp', 1), ('solution-sharing-python', 1), ('stack', 1), ('stack-based', 1), ('sum', 1), ('traversal', 1), ('tree problem', 1), ('tree-traversal', 1), ('treenode', 1), ('understandable', 1)]"
611,Valid Triangle Number,https://leetcode.com/problems/valid-triangle-number,"Given an array consists of non-negative integers,  your task is to count the number of triplets chosen from the array that can make triangles if we take them as side lengths of a triangle.",['array'],Medium,1391,106,167904,83194,"[""3Sum Smaller""]","[('python', 6), ('java', 4), ('python 3', 4), ('python3', 4), ('c#', 3), ('cpp', 3), ('javascript', 3), ('binary-search', 2), ('c++', 2), ('sort', 2), ('three-sum', 2), ('two-pointers', 2), ('2 pointers', 1), ('2-lines', 1), ('algorithms', 1), ('bisect', 1), ('easy', 1), ('easy undestanding', 1), ('easytounderstand', 1), ('go', 1), ('hashtable', 1), ('javascrip', 1), ('javascript solution', 1), ('kotlinvim', 1), ('queue', 1), ('simple solution', 1), ('sliding-window', 1), ('solution-sharing-cpp', 1), ('solution-sharing-python', 1), ('sorting', 1), ('swift', 1), ('three-pointers', 1), ('two pointer approach', 1), ('two pointers', 1)]"
609,Find Duplicate File in System,https://leetcode.com/problems/find-duplicate-file-in-system,"Given a list paths of directory info, including the directory path, and all the files with contents in this directory, return all the duplicate files in the file system in terms of their paths. You may return the answer in any order.

A group of duplicate files consists of at least two files that have the same content.

A single directory info string in the input list has the following format:


	""root/d1/d2/.../dm f1.txt(f1_content) f2.txt(f2_content) ... fn.txt(fn_content)""


It means there are n files (f1.txt, f2.txt ... fn.txt) with content (f1_content, f2_content ... fn_content) respectively in the directory ""root/d1/d2/.../dm"". Note that n >= 1 and m >= 0. If m = 0, it means the directory is just the root directory.

The output is a list of groups of duplicate file paths. For each group, it contains all the file paths of the files that have the same content. A file path is a string that has the following format:


	""directory_path/file_name.txt""","['hash-table', 'string']",Medium,557,708,111341,68237,[],"[('hashmap', 14), ('javascript', 8), ('c++', 7), ('python 3', 7), ('java', 6), ('python3', 6), ('c#', 5), ('python', 5), ('c++ hash', 3), ('dictionary', 3), ('hash table', 3), ('string', 3), ('swift', 3), ('easy-undestand', 2), ('java ac solution', 2), ('java-solution', 2), ('kotlin', 2), ('map', 2), ('oops', 2), ('simple', 2), ('abstraction', 1), ('algorithms', 1), ('beat 99.8', 1), ('c', 1), ('c++ code', 1), ('clean', 1), ('codingtuting', 1), ('cpp', 1), ('cpp solution', 1), ('defaultdict', 1), ('dictionary c#', 1), ('dsa', 1), ('easy', 1), ('easy to follow', 1), ('easy to read', 1), ('easy to understand', 1), ('easy-implementation', 1), ('easy-understanding', 1), ('easysolution', 1), ('fast', 1), ('good-practices', 1), ('hash', 1), ('hash map', 1), ('hashamp', 1), ('hashing', 1), ('hashtable', 1), ('immutable', 1), ('intuitive', 1), ('javascript solution', 1), ('jigneshpanchal', 1), ('js', 1), ('oop', 1), ('optimized', 1), ('pythonic', 1), ('scala', 1), ('slicing', 1), ('straight forward', 1), ('string-operation', 1), ('stringstream', 1), ('unordered map', 1), ('well commented', 1), ('zea7ot', 1)]"
606,Construct String from Binary Tree,https://leetcode.com/problems/construct-string-from-binary-tree,"You need to construct a string consists of parenthesis and integers from a binary tree with the preorder traversing way.

The null node needs to be represented by empty parenthesis pair ""()"". And you need to omit all the empty parenthesis pairs that don't affect the one-to-one mapping relationship between the string and the original binary tree.","['string', 'tree']",Easy,951,1296,183381,102407,"[""Construct Binary Tree from String"", ""Find Duplicate Subtrees""]","[('c++', 19), ('recursion', 18), ('recursive', 16), ('java', 15), ('cpp', 13), ('python', 11), ('javascript', 10), ('python3', 10), ('c#', 5), ('dfs', 4), ('golang', 4), ('preorder traversal', 4), ('swift', 4), ('java-solution', 3), ('python 3', 3), ('binary tree', 2), ('binary-tree', 2), ('cpp solution', 2), ('iterative', 2), ('post-order-traversal', 2), ('pre-order', 2), ('ruby', 2), ('simple clear c++ solution', 2), ('stringbuilder', 2), ('4 lines', 1), ('beginner friendly', 1), ('c', 1), ('c++ code', 1), ('c++ recursive solution', 1), ('c++ solution simple', 1), ('c++11', 1), ('c++14', 1), ('comments', 1), ('constructstringfrombt', 1), ('cpp easy', 1), ('csharp', 1), ('dfs recursive', 1), ('dfs-tree', 1), ('easy', 1), ('easy solution', 1), ('easy to understand', 1), ('easy-to-understand', 1), ('easy-understanding', 1), ('example', 1), ('explained', 1), ('explanation', 1), ('go', 1), ('intutive', 1), ('iterative way', 1), ('java ac solution', 1), ('js', 1), ('js javascript', 1), ('kotlin', 1), ('linear time', 1), ('no recursion', 1), ('pre-order traversal', 1), ('preorder-recursion', 1), ('preorder-traversal', 1), ('pythondfs', 1), ('pythonpython3', 1), ('question-not-clear', 1), ('recurision', 1), ('recursive-dfs', 1), ('recursively', 1), ('recurssion', 1), ('recusion', 1), ('recusrion', 1), ('self explanatory', 1), ('simplest', 1), ('solution-sharing-cpp', 1), ('solution-sharing-python', 1), ('straight-forward', 1), ('swift5', 1), ('tree-traversal', 1), ('trees', 1), ('ultra simple', 1), ('unit-test', 1), ('upvote', 1)]"
605,Can Place Flowers,https://leetcode.com/problems/can-place-flowers,"You have a long flowerbed in which some of the plots are planted, and some are not. However, flowers cannot be planted in adjacent plots.

Given an integer array flowerbed containing 0's and 1's, where 0 means empty and 1 means not empty, and an integer n, return if n new flowers can be planted in the flowerbed without violating the no-adjacent-flowers rule.","['array', 'greedy']",Easy,1416,462,531124,168389,"[""Teemo Attacking"", ""Asteroid Collision""]","[('java', 34), ('c++', 32), ('python', 31), ('javascript', 25), ('python 3', 24), ('cpp', 16), ('greedy', 16), ('java-solution', 14), ('easy', 10), ('python3', 10), ('easy-understanding', 9), ('explained', 7), ('js', 7), ('c#', 6), ('cpp solution', 6), ('golang', 6), ('easytounderstand', 5), ('explanation', 4), ('ruby', 4), ('c', 3), ('easy-to-understand', 3), ('golang-solution', 3), ('javascript solution', 3), ('math', 3), ('python2', 3), ('simple', 3), ('simple solution', 3), ('solution', 3), ('array', 2), ('brute force', 2), ('clean code', 2), ('dp', 2), ('go', 2), ('greedy approach', 2), ('js javascript', 2), ('kotlin', 2), ('linear', 2), ('one pass solution', 2), ('passed', 2), ('ritik', 2), ('swift', 2), ('#easy-understand', 1), ('#optimized', 1), ('100 space', 1), ('100 speed', 1), ('8 lines', 1), ('arr', 1), ('awesome samriddhi', 1), ('awesome-samriddhi', 1), ('bit', 1), ('bit manipulation', 1), ('bit-manipulation', 1), ('brute-force', 1), ('c code', 1), ('c++ code', 1), ('c++ solution', 1), ('c++ solution simple', 1), ('c++11', 1), ('can place flowers', 1), ('canplaceflowers', 1), ('cleancode', 1), ('comments', 1), ('comments-added', 1), ('cool', 1), ('cpp easy', 1), ('csharp', 1), ('divide and conquer', 1), ('dynamic programming', 1), ('easy to understand', 1), ('easy understand', 1), ('easy-understand', 1), ('easy-undestand', 1), ('explanation of logic', 1), ('explanation with logic', 1), ('explanatory comments', 1), ('fast and simple', 1), ('fast-solution', 1), ('fastest', 1), ('fastest java solution', 1), ('github', 1), ('go-solution', 1), ('good variable names', 1), ('greedy algorithm', 1), ('groupby', 1), ('helpful comments', 1), ('if condition', 1), ('iterative', 1), ('java solution', 1), ('java-8', 1), ('javscript', 1), ('kotlinvim', 1), ('linear seach', 1), ('linear time', 1), ('linear-time', 1), ('math-solution', 1), ('memo', 1), ('memoization', 1), ('nomodifications', 1), ('one pass', 1), ('one-liner', 1), ('optimisation', 1), ('performance', 1), ('php', 1), ('python solution', 1), ('python3.8', 1), ('recursion', 1), ('regex', 1), ('run-length-encoding', 1), ('rust', 1), ('scala', 1), ('sequence', 1), ('series', 1), ('simple java solution', 1), ('simple logic', 1), ('single pass', 1), ('single scan', 1), ('solution-sharing-cpp', 1), ('structured code', 1), ('swift5', 1), ('tail-recursive', 1), ('test case', 1), ('two-pointer', 1), ('vector', 1), ('video', 1), ('video explanation', 1), ('video-explanation', 1), ('want a star', 1), ('with comments', 1), ('with explanation', 1), ('without updating input', 1), ('xor', 1)]"
601,Human Traffic of Stadium,https://leetcode.com/problems/human-traffic-of-stadium,"Table: Stadium


+---------------+---------+
| Column Name   | Type    |
+---------------+---------+
| id            | int     |
| visit_date    | date    |
| people        | int     |
+---------------+---------+
visit_date is the primary key for this table.
Each row of this table contains the visit date and visit id to the stadium with the number of people during the visit.
No two rows will have the same visit_date, and as the id increases, the dates increase as well.


 

Write an SQL query to display the records with three or more rows with consecutive id's, and the number of people is greater than or equal to 100 for each.

Return the result table ordered by visit_date in ascending order.

The query result format is in the following example.

 


Stadium table:
+------+------------+-----------+
| id   | visit_date | people    |
+------+------------+-----------+
| 1    | 2017-01-01 | 10        |
| 2    | 2017-01-02 | 109       |
| 3    | 2017-01-03 | 150       |
| 4    | 2017-01-04 | 99        |
| 5    | 2017-01-05 | 145       |
| 6    | 2017-01-06 | 1455      |
| 7    | 2017-01-07 | 199       |
| 8    | 2017-01-09 | 188       |
+------+------------+-----------+

Result table:
+------+------------+-----------+
| id   | visit_date | people    |
+------+------------+-----------+
| 5    | 2017-01-05 | 145       |
| 6    | 2017-01-06 | 1455      |
| 7    | 2017-01-07 | 199       |
| 8    | 2017-01-09 | 188       |
+------+------------+-----------+
The four rows with ids 5, 6, 7, and 8 have consecutive ids and each of them has >= 100 people attended. Note that row 8 was included even though the visit_date was not the next day after row 7.
The rows with ids 2 and 3 are not included because we need at least three consecutive ids.",[],Hard,234,420,91679,42239,[],"[('mysql', 11), ('window function', 7), ('sql', 5), ('lag', 4), ('lead', 4), ('ms-sql', 2), ('mssql', 2), ('oracle sql', 2), ('sql server', 2), ('analytic function', 1), ('cte', 1), ('ctes', 1), ('easy to read', 1), ('explanations', 1), ('ms sql server', 1), ('oracle', 1), ('rank', 1), ('solution', 1), ('sql case', 1), ('subquery', 1), ('video explanation', 1), ('video solution', 1), ('youtube', 1)]"
600,Non-negative Integers without Consecutive Ones,https://leetcode.com/problems/non-negative-integers-without-consecutive-ones,"Given a positive integer n, return the number of the integers in the range [0, n] whose binary representations do not contain consecutive ones.",['dynamic-programming'],Hard,539,78,42940,14755,"[""House Robber"", ""House Robber II"", ""Ones and Zeroes""]","[('dp', 5), ('digit dp', 4), ('dynamic programming', 4), ('c++', 3), ('cpp', 2), ('python', 2), ('bit manipulation', 1), ('bitmask', 1), ('bugs', 1), ('c#', 1), ('constant space', 1), ('constant time', 1), ('cpp solution', 1), ('dp on digits', 1), ('dynamic-programming', 1), ('easy', 1), ('explanation of logic', 1), ('fibonacci', 1), ('golang', 1), ('java', 1), ('java-solution', 1), ('logical thinking', 1), ('math', 1), ('python 3', 1), ('python3', 1), ('pythonpython3', 1), ('recursion', 1), ('recursive dp', 1), ('solition-sharing', 1), ('swift', 1), ('time limit exceeded', 1), ('two-pass', 1)]"
599,Minimum Index Sum of Two Lists,https://leetcode.com/problems/minimum-index-sum-of-two-lists,"Suppose Andy and Doris want to choose a restaurant for dinner, and they both have a list of favorite restaurants represented by strings.

You need to help them find out their common interest with the least list index sum. If there is a choice tie between answers, output all of them with no order requirement. You could assume there always exists an answer.",['hash-table'],Easy,790,241,217589,113102,"[""Intersection of Two Linked Lists""]","[('hashmap', 26), ('python', 22), ('javascript', 18), ('python 3', 17), ('c++', 12), ('python3', 10), ('cpp', 7), ('easy-to-understand', 6), ('easy-understanding', 5), ('golang', 5), ('hash table', 5), ('java', 5), ('dictionary', 4), ('easytounderstand', 3), ('map', 3), ('arrays', 2), ('c#', 2), ('cpp easy', 2), ('easy-undestand', 2), ('faster', 2), ('hash-table', 2), ('hashtable', 2), ('java-solution', 2), ('js', 2), ('kotlin', 2), ('linear', 2), ('python2', 2), ('simple', 2), ('swift', 2), ('unordered map', 2), ('avnish', 1), ('beats 100', 1), ('beats 100 percent', 1), ('beginner friendly', 1), ('c', 1), ('commented', 1), ('cpp solution', 1), ('dictionary c#', 1), ('easy', 1), ('fast and simple', 1), ('fast-solution', 1), ('go', 1), ('hash map', 1), ('hashmaps', 1), ('heapq', 1), ('index-array', 1), ('indexof', 1), ('intersection arrays', 1), ('java ac solution', 1), ('javasolution', 1), ('js javascript', 1), ('linear-complexity', 1), ('list comprehension', 1), ('map-stl', 1), ('min', 1), ('mrmagician', 1), ('notation', 1), ('one-loop', 1), ('priority queue', 1), ('python 2', 1), ('recursive', 1), ('ruby', 1), ('scala', 1), ('set intersection', 1), ('sets', 1), ('short code', 1), ('shortcut', 1), ('simple clear c++ solution', 1), ('simple solution', 1), ('solution-sharing-cpp', 1), ('straight-forward', 1), ('test-case-validation', 1), ('treemap', 1)]"
598,Range Addition II,https://leetcode.com/problems/range-addition-ii,"You are given an m x n matrix M initialized with all 0's and an array of operations ops, where ops[i] = [ai, bi] means M[x][y] should be incremented by one for all 0 <= x < ai and 0 <= y < bi.

Count and return the number of maximum integers in the matrix after performing all the operations.",['math'],Easy,368,616,93055,46823,"[""Range Addition""]","[('c++', 14), ('python', 9), ('cpp', 6), ('javascript', 6), ('python3', 6), ('python 3', 5), ('java', 3), ('accepted', 2), ('c', 2), ('c#', 2), ('golang', 2), ('java solution', 2), ('ruby', 2), ('solution-sharing-cpp', 2), ('#java', 1), ('1-liner', 1), ('accpected', 1), ('array', 1), ('c++ solution', 1), ('cpp easy', 1), ('cpp solution', 1), ('easy-to-understand', 1), ('easy-understanding', 1), ('efficiency', 1), ('error', 1), ('explained solution', 1), ('explanation', 1), ('explanation of logic', 1), ('fast and simple', 1), ('go', 1), ('golang-solution', 1), ('js', 1), ('linear time', 1), ('math.min', 1), ('matrix', 1), ('min', 1), ('minimum', 1), ('one-liner', 1), ('oneline', 1), ('optimisation', 1), ('performance', 1), ('product', 1), ('question-not-clear', 1), ('rust', 1), ('simple solution', 1), ('solution-sharing-python', 1), ('solutions', 1), ('straight-forward', 1), ('swift', 1)]"
596,Classes More Than 5 Students,https://leetcode.com/problems/classes-more-than-5-students,"There is a table courses with columns: student and class

Please list out all classes which have more than or equal to 5 students.

For example, the table:


+---------+------------+
| student | class      |
+---------+------------+
| A       | Math       |
| B       | English    |
| C       | Math       |
| D       | Biology    |
| E       | Math       |
| F       | Computer   |
| G       | Math       |
| H       | Math       |
| I       | Math       |
+---------+------------+


Should output:


+---------+
| class   |
+---------+
| Math    |
+---------+


 

Note:
The students should not be counted duplicate in each course.",[],Easy,289,767,276913,107921,[],"[('mysql', 10), ('distinct', 4), ('having', 4), ('sql', 4), ('oracle', 3), ('oracle sql', 2), ('#bug', 1), ('#mysql', 1), ('bug', 1), ('comments', 1), ('count', 1), ('easy-understand', 1), ('group by', 1), ('groupby', 1), ('leetcode', 1), ('ms sql server', 1), ('ms-sql', 1), ('my sql', 1), ('python', 1), ('python 3', 1), ('simple', 1), ('sql server', 1), ('subquery', 1), ('video solution', 1), ('video-explanation', 1)]"
595,Big Countries,https://leetcode.com/problems/big-countries,"There is a table World


+-----------------+------------+------------+--------------+---------------+
| name            | continent  | area       | population   | gdp           |
+-----------------+------------+------------+--------------+---------------+
| Afghanistan     | Asia       | 652230     | 25500100     | 20343000      |
| Albania         | Europe     | 28748      | 2831741      | 12960000      |
| Algeria         | Africa     | 2381741    | 37100000     | 188681000     |
| Andorra         | Europe     | 468        | 78115        | 3712000       |
| Angola          | Africa     | 1246700    | 20609294     | 100990000     |
+-----------------+------------+------------+--------------+---------------+


A country is big if it has an area of bigger than 3 million square km or a population of more than 25 million.

Write a SQL solution to output big countries' name, population and area.

For example, according to the above table, we should output:


+--------------+-------------+--------------+
| name         | population  | area         |
+--------------+-------------+--------------+
| Afghanistan  | 25500100    | 652230       |
| Algeria      | 37100000    | 2381741      |
+--------------+-------------+--------------+",[],Easy,584,757,274709,216292,[],"[('mysql', 23), ('sql', 8), ('easy', 6), ('chinese', 2), ('easy-understanding', 2), ('explanation', 2), ('madarin', 2), ('medium', 2), ('my sql', 2), ('or', 2), ('simple', 2), ('union', 2), ('accepted solution', 1), ('basic', 1), ('c#', 1), ('cool', 1), ('easiest', 1), ('easy-understsand', 1), ('easytounderstand', 1), ('fast', 1), ('github', 1), ('great', 1), ('intutive', 1), ('javascript', 1), ('ms-sql', 1), ('mssql', 1), ('oracle sql', 1), ('select', 1), ('self explanatory', 1), ('short', 1), ('simple solution', 1), ('solution', 1), ('tsql', 1), ('tutorial', 1), ('ultra simple', 1), ('understandable', 1), ('upvote', 1), ('video-explanation', 1), ('where', 1), ('youtube', 1)]"
594,Longest Harmonious Subsequence,https://leetcode.com/problems/longest-harmonious-subsequence,"We define a harmonious array as an array where the difference between its maximum value and its minimum value is exactly 1.

Given an integer array nums, return the length of its longest harmonious subsequence among all its possible subsequences.

A subsequence of array is a sequence that can be derived from the array by deleting some or no elements without changing the order of the remaining elements.",['hash-table'],Easy,1167,125,187661,96319,[],"[('c++', 38), ('hashmap', 27), ('java', 20), ('cpp', 19), ('python 3', 15), ('python', 14), ('javascript', 13), ('python3', 11), ('easy-understanding', 10), ('map', 10), ('counter', 7), ('java-solution', 6), ('c#', 5), ('explained', 5), ('dictionary', 4), ('golang', 4), ('linear time', 4), ('easy-undestand', 3), ('sort', 3), ('video-explanation', 3), ('100 faster runtime', 2), ('cplusplus', 2), ('cpp solution', 2), ('dict', 2), ('easy', 2), ('easy-to-understand', 2), ('go', 2), ('kotlin', 2), ('ruby', 2), ('sorting', 2), ('treemap', 2), ('unordered map', 2), ('#easy-understanding', 1), ('#efficient', 1), ('#hashmap', 1), ('#java', 1), ('#python', 1), ('#python 3', 1), ('#ruby #hashmap', 1), ('#videoexplanation', 1), ('100 faster', 1), ('100 fastest', 1), ('100 memory', 1), ('100 speed', 1), ('5 lines', 1), ('averagecode', 1), ('beginner friendly', 1), ('binarysearh', 1), ('bisect', 1), ('bisectleft', 1), ('c', 1), ('c++ solution', 1), ('c++11', 1), ('clear', 1), ('commented', 1), ('cpp clear', 1), ('detailed', 1), ('dictionaries', 1), ('dictonary', 1), ('easy to understand', 1), ('easy understand', 1), ('easy understandcpp', 1), ('easy-implementation', 1), ('easy-peasy', 1), ('easysolution', 1), ('efficient solution', 1), ('explanation', 1), ('fast-solution', 1), ('frequency', 1), ('frequency count', 1), ('frequency map', 1), ('frequency table', 1), ('golang-solution', 1), ('golf', 1), ('harmonioussubsequence', 1), ('hash', 1), ('hash table', 1), ('hasmap', 1), ('interview', 1), ('interview question', 1), ('java-8', 1), ('javascript solution', 1), ('js', 1), ('js javascript', 1), ('kotlin-solution', 1), ('let me know if u got questions', 1), ('map-stl', 1), ('one pass solution', 1), ('preparation strategy', 1), ('python2', 1), ('python3.8', 1), ('queue-approach', 1), ('redirect21', 1), ('runtime', 1), ('rust', 1), ('scala', 1), ('sequence', 1), ('series', 1), ('sets', 1), ('shorting', 1), ('simple', 1), ('simple solution', 1), ('slidingwindow', 1), ('sorted array', 1), ('straight-forward', 1), ('swift', 1), ('ting', 1), ('two pointers', 1), ('two-lines', 1), ('two-pointers', 1), ('typescript', 1), ('typescript javascript', 1), ('vector', 1), ('video explanation', 1)]"
593,Valid Square,https://leetcode.com/problems/valid-square,"Given the coordinates of four points in 2D space p1, p2, p3 and p4, return true if the four points construct a square.

The coordinate of a point pi is represented as [xi, yi]. The input is not given in any order.

A valid square has four equal sides with positive length and four equal angles (90-degree angles).",['math'],Medium,460,606,141209,61116,[],"[('python', 19), ('python 3', 19), ('c++', 14), ('easy-to-understand', 14), ('javascript', 11), ('math', 9), ('python3', 9), ('c#', 8), ('cpp', 7), ('java', 6), ('simple', 6), ('easy-understanding', 4), ('easy-undestand', 4), ('complex number', 3), ('easytounderstand', 3), ('geometry', 3), ('math solution', 3), ('maths', 3), ('ruby', 3), ('constant time', 2), ('explanation of logic', 2), ('golang', 2), ('hashmap', 2), ('javascript solution', 2), ('permutations', 2), ('python2', 2), ('rust', 2), ('simpe', 2), ('video-explanation', 2), ('#fast', 1), ('#hashmap', 1), ('#math', 1), ('#python', 1), ('0ms', 1), ('24ms', 1), ('6disatances', 1), ('beats 95 percent', 1), ('begginer friendly', 1), ('beginner friendly', 1), ('bestsolution', 1), ('brute force', 1), ('c++ ac', 1), ('c++ code', 1), ('c++ solution', 1), ('clear', 1), ('clear-understanding', 1), ('code golf', 1), ('commented', 1), ('comments added', 1), ('comments-added', 1), ('computational geometry', 1), ('concise', 1), ('constant space', 1), ('cpp solution', 1), ('csharp', 1), ('diagonal', 1), ('distance', 1), ('easiest', 1), ('easy to understand', 1), ('easy-understand', 1), ('easysolution', 1), ('elegant', 1), ('euclidean', 1), ('euclidean distance', 1), ('explained', 1), ('explained solution', 1), ('explanation', 1), ('explanation simple', 1), ('explanations', 1), ('fast and simple', 1), ('golang-solution', 1), ('hashing', 1), ('hashmaps', 1), ('java ac solution', 1), ('java solution', 1), ('java-8', 1), ('java-solution', 1), ('length method', 1), ('linear time', 1), ('logic explained', 1), ('mathematic', 1), ('o1', 1), ('optimal approach', 1), ('php', 1), ('php solution', 1), ('pythagoran', 1), ('pythagoras', 1), ('pythagorean', 1), ('python 2', 1), ('python3.8', 1), ('pythonpython3', 1), ('readable', 1), ('set', 1), ('simple-solution', 1), ('solution', 1), ('straight-forward', 1), ('swift', 1), ('typescript', 1), ('valid sqare', 1), ('valid-square', 1), ('validsquare', 1), ('vectors', 1), ('video solution', 1), ('visualization', 1)]"
592,Fraction Addition and Subtraction,https://leetcode.com/problems/fraction-addition-and-subtraction,"Given a string expression representing an expression of fraction addition and subtraction, return the calculation result in string format.

The final result should be an irreducible fraction. If your final result is an integer, say 2, you need to change it to the format of a fraction that has a denominator 1. So in this case, 2 should be converted to 2/1.",['math'],Medium,231,355,45213,22827,"[""Solve the Equation""]","[('gcd', 10), ('python', 10), ('python 3', 7), ('c++', 5), ('python3', 5), ('math', 4), ('javascript', 2), ('lcm', 2), ('stringstream', 2), ('basic', 1), ('c#', 1), ('c++ code', 1), ('clean code', 1), ('code', 1), ('cpp', 1), ('design', 1), ('easy', 1), ('fast', 1), ('fraction', 1), ('golang', 1), ('greatest-common-divisor', 1), ('int num', 1), ('interview-friendly', 1), ('java', 1), ('java-solution', 1), ('num', 1), ('object-oriented', 1), ('short c++ code', 1), ('simple solution', 1), ('simple-solution', 1), ('stream', 1), ('swift', 1), ('three-lines', 1)]"
591,Tag Validator,https://leetcode.com/problems/tag-validator,"Given a string representing a code snippet, implement a tag validator to parse the code and return whether it is valid.

A code snippet is valid if all the following rules hold:


	The code must be wrapped in a valid closed tag. Otherwise, the code is invalid.
	A closed tag (not necessarily valid) has exactly the following format : <TAG_NAME>TAG_CONTENT</TAG_NAME>. Among them, <TAG_NAME> is the start tag, and </TAG_NAME> is the end tag. The TAG_NAME in start and end tags should be the same. A closed tag is valid if and only if the TAG_NAME and TAG_CONTENT are valid.
	A valid TAG_NAME only contain upper-case letters, and has length in range [1,9]. Otherwise, the TAG_NAME is invalid.
	A valid TAG_CONTENT may contain other valid closed tags, cdata and any characters (see note1) EXCEPT unmatched <, unmatched start and end tag, and unmatched or closed tags with invalid TAG_NAME. Otherwise, the TAG_CONTENT is invalid.
	A start tag is unmatched if no end tag exists with the same TAG_NAME, and vice versa. However, you also need to consider the issue of unbalanced when tags are nested.
	A < is unmatched if you cannot find a subsequent >. And when you find a < or </, all the subsequent characters until the next > should be parsed as TAG_NAME (not necessarily valid).
	The cdata has the following format : <![CDATA[CDATA_CONTENT]]>. The range of CDATA_CONTENT is defined as the characters between <![CDATA[ and the first subsequent ]]>.
	CDATA_CONTENT may contain any characters. The function of cdata is to forbid the validator to parse CDATA_CONTENT, so even it has some characters that can be parsed as tag (no matter valid or invalid), you should treat it as regular characters.","['string', 'stack']",Hard,104,470,25537,8949,"[""Add Bold Tag in String""]","[('c++', 1), ('fsm', 1), ('golang', 1), ('higher order functions', 1), ('iterator', 1), ('javascript', 1), ('kotlin', 1), ('php', 1), ('python3', 1), ('ruby', 1), ('rust', 1)]"
587,Erect the Fence,https://leetcode.com/problems/erect-the-fence,"You are given an array trees where trees[i] = [xi, yi] represents the location of a tree in the garden.

You are asked to fence the entire garden using the minimum length of rope as it is expensive. The garden is well fenced only if all the trees are enclosed.

Return the coordinates of trees that are exactly located on the fence perimeter.",['geometry'],Hard,287,198,29913,10943,[],"[('cpp', 2), ('jarvis', 2), ('python', 2), ('c#', 1), ('c++', 1), ('cpp soltuion', 1), ('geometry', 1), ('gift wrapping', 1), ('jarvis march', 1), ('java', 1), ('kotlin', 1), ('monotone chain', 1), ('python3', 1), ('simple and elegant', 1)]"
583,Delete Operation for Two Strings,https://leetcode.com/problems/delete-operation-for-two-strings,"Given two strings word1 and word2, return the minimum number of steps required to make word1 and word2 the same.

In one step, you can delete exactly one character in either string.",['string'],Medium,1485,36,126875,64116,"[""Edit Distance"", ""Minimum ASCII Delete Sum for Two Strings"", ""Longest Common Subsequence""]","[('dynamic programming', 31), ('dp', 15), ('java', 14), ('c++', 11), ('lcs', 11), ('python', 9), ('cpp', 8), ('javascript', 7), ('python 3', 6), ('c#', 4), ('easy-understanding', 4), ('java-solution', 4), ('python3', 4), ('bottom up', 3), ('cpp solution', 3), ('memoization', 3), ('c++ code', 2), ('dynamic-programming', 2), ('easy', 2), ('fast-solution', 2), ('memoized', 2), ('recursion', 2), ('recursive', 2), ('simple solution', 2), ('swift', 2), ('tabulation', 2), ('#cpp', 1), ('#dp', 1), ('#easysolution', 1), ('#longestsubsequence', 1), ('bfs', 1), ('bfs tle', 1), ('bottom up dp', 1), ('bottoms-up', 1), ('c', 1), ('c++ dynamic programming', 1), ('clear', 1), ('csharp', 1), ('dfs', 1), ('easy-undestand', 1), ('easytounderstand', 1), ('explained', 1), ('explanations', 1), ('fast', 1), ('fast and simple', 1), ('follow-up', 1), ('golang', 1), ('java ac solution', 1), ('longest common sequence', 1), ('optimised code', 1), ('overlapping subproblems', 1), ('pyhton', 1), ('recursive dp', 1), ('short', 1), ('solution-sharing-c', 1), ('space-efficient', 1), ('top-down dp', 1), ('video-explanation', 1)]"
581,Shortest Unsorted Continuous Subarray,https://leetcode.com/problems/shortest-unsorted-continuous-subarray,"Given an integer array nums, you need to find one continuous subarray that if you only sort this subarray in ascending order, then the whole array will be sorted in ascending order.

Return the shortest such subarray and output its length.",['array'],Medium,3851,175,538106,177463,[],"[('c++', 39), ('python', 38), ('python 3', 24), ('cpp', 23), ('java', 22), ('easy-understanding', 20), ('javascript', 19), ('easy-to-understand', 14), ('python3', 10), ('array', 9), ('java-solution', 9), ('sort', 9), ('sorting', 8), ('two-pointers', 8), ('easy to understand', 7), ('c#', 6), ('explained', 5), ('cpp solution', 4), ('kotlin', 4), ('linear time', 4), ('rust', 4), ('stack', 4), ('binary-search', 3), ('c++ solution', 3), ('golang', 3), ('iterative', 3), ('#easy-understand', 2), ('begineer', 2), ('c++ code', 2), ('commented', 2), ('constant space', 2), ('constant-space', 2), ('fast-solution', 2), ('iterator', 2), ('java ac solution', 2), ('java solution', 2), ('javascript solution', 2), ('optimal', 2), ('ruby', 2), ('simple', 2), ('sorted array', 2), ('swift', 2), ('two pass', 2), ('two pointers', 2), ('two-pointer', 2), ('video-explanation', 2), ('#array', 1), ('#python 3', 1), ('1-line', 1), ('2 pointer', 1), ('2 pointers', 1), ('2-pointer', 1), ('2-pointers', 1), ('5 liner', 1), ('algorithms', 1), ('beats 95 percent', 1), ('beginner friendly', 1), ('binary search', 1), ('binarysearch', 1), ('brute force', 1), ('brute-force', 1), ('bubble-sort', 1), ('c++11', 1), ('clean code', 1), ('clean-code', 1), ('clone', 1), ('compare', 1), ('concise-solution', 1), ('contiguous-array', 1), ('cpp easy', 1), ('detailed explanation', 1), ('double pointer', 1), ('drewbie', 1), ('easy', 1), ('easy explanation', 1), ('easy to follow', 1), ('easy to understandd', 1), ('easy-implementation', 1), ('easy-understand', 1), ('easy-undestand', 1), ('easysolution', 1), ('easytounderstand', 1), ('efficient', 1), ('es6', 1), ('explanation', 1), ('explanatory comments', 1), ('fast and simple', 1), ('fastest', 1), ('fastest java slution', 1), ('give stars and subscribe', 1), ('golang-solution', 1), ('good variable names', 1), ('index-array', 1), ('iteration', 1), ('js', 1), ('js javascript', 1), ('linear seach', 1), ('linear time complexity', 1), ('linear-search', 1), ('linear-time', 1), ('lowerbound', 1), ('map', 1), ('min-max', 1), ('minimum and maximum', 1), ('naive-solution', 1), ('nlogn', 1), ('one pass', 1), ('onepass', 1), ('optimisation', 1), ('performance', 1), ('priority queue', 1), ('pyhton3', 1), ('python2', 1), ('pythonpython3', 1), ('readable', 1), ('recursively', 1), ('scala', 1), ('self explanatory', 1), ('short c++ code', 1), ('shortestunsortedsubarray', 1), ('simplest', 1), ('single pass', 1), ('sliding window', 1), ('solution', 1), ('solution-sharing-cpp', 1), ('sort-function', 1), ('sorted', 1), ('space-efficient', 1), ('step by step', 1), ('straightforward', 1), ('string', 1), ('structured code', 1), ('subarray', 1), ('super-easy', 1), ('thinking process', 1), ('time complexity', 1), ('ting', 1), ('traits', 1), ('trim', 1), ('two pointer', 1), ('two-pointer method', 1), ('twopointer', 1), ('typescript', 1), ('unique solution', 1), ('upperbound', 1), ('visual', 1)]"
576,Out of Boundary Paths,https://leetcode.com/problems/out-of-boundary-paths,"There is an m x n grid with a ball. The ball is initially at the position [startRow, startColumn]. You are allowed to move the ball to one of the four adjacent four cells in the grid (possibly out of the grid crossing the grid boundary). You can apply at most maxMove moves to the ball.

Given the five integers m, n, maxMove, startRow, startColumn, return the number of paths to move the ball out of the grid boundary. Since the answer can be very large, return it modulo 109 + 7.","['dynamic-programming', 'depth-first-search']",Medium,764,148,101094,36568,"[""Knight Probability in Chessboard""]","[('dynamic programming', 18), ('memoization', 15), ('c++', 12), ('cpp', 11), ('dfs', 7), ('dp', 6), ('recursion', 6), ('python', 5), ('python 3', 4), ('java', 3), ('python3', 3), ('dynamic-programming', 2), ('javascript', 2), ('#576', 1), ('3d dp', 1), ('bfs', 1), ('c++ code', 1), ('c++ dp', 1), ('c++ dynamic programming', 1), ('concise', 1), ('dfs recursive', 1), ('dictionary', 1), ('dynaminc programming', 1), ('explained', 1), ('forward dp', 1), ('fully-explained', 1), ('grid', 1), ('lru-cache', 1), ('memoziation', 1), ('out of boundary paths', 1), ('push dp', 1), ('readable', 1), ('recursive', 1), ('ruby', 1), ('scala', 1), ('simple', 1), ('simple clear c++ solution', 1), ('simple solution', 1), ('swift', 1), ('tle', 1), ('top down dp', 1)]"
575,Distribute Candies,https://leetcode.com/problems/distribute-candies,"Alice has n candies, where the ith candy is of type candyType[i]. Alice noticed that she started to gain weight, so she visited a doctor.

The doctor advised Alice to only eat n / 2 of the candies she has (n is always even). Alice likes her candies very much, and she wants to eat the maximum number of different types of candies while still following the doctor's advice.

Given the integer array candyType of length n, return the maximum number of different types of candies she can eat if she only eats n / 2 of them.",['hash-table'],Easy,739,1025,258658,166501,[],"[('c++', 52), ('python', 34), ('cpp', 27), ('java', 24), ('python 3', 21), ('easy-understanding', 18), ('javascript', 17), ('set', 16), ('python3', 13), ('one-liner', 11), ('java-solution', 9), ('hashmap', 8), ('hashset', 8), ('c#', 7), ('cpp solution', 7), ('easy-to-understand', 7), ('easytounderstand', 5), ('sets', 5), ('easy', 4), ('2 lines', 2), ('2-lines', 2), ('c++ code', 2), ('c++ set', 2), ('counter', 2), ('distributecandies', 2), ('easy to understand', 2), ('easy-undestand', 2), ('explained', 2), ('fast-solution', 2), ('fastest', 2), ('golang', 2), ('maps', 2), ('one line', 2), ('simple', 2), ('swift', 2), ('unordered map', 2), ('unordered set', 2), ('1-liner', 1), ('beginner friendly', 1), ('c++ easy', 1), ('c++ easy solution', 1), ('c++ solution', 1), ('c++11', 1), ('c++easy-understanding', 1), ('c++solution', 1), ('candies', 1), ('candy', 1), ('commented', 1), ('cplusplus', 1), ('cpp easy', 1), ('cpp-functional', 1), ('cpp-solution', 1), ('cppsolution', 1), ('dict', 1), ('dictionary', 1), ('easy to follow', 1), ('easy to read', 1), ('explained solution', 1), ('fast and simple', 1), ('faster than 99.66', 1), ('functional', 1), ('functional programming', 1), ('functools', 1), ('go', 1), ('golang-solution', 1), ('hash set', 1), ('hash table', 1), ('itertools', 1), ('java 8', 1), ('java-8', 1), ('javascrip', 1), ('js', 1), ('js javascript', 1), ('kotlin', 1), ('linear time', 1), ('map', 1), ('map-stl', 1), ('math', 1), ('no lambda function', 1), ('oneline', 1), ('oneliner', 1), ('operator', 1), ('optimisation', 1), ('performance', 1), ('python2', 1), ('python3.8', 1), ('python3.9', 1), ('rajawatbanna', 1), ('ruby', 1), ('rust', 1), ('self explanatory', 1), ('simple-solution', 1), ('solution', 1), ('solution by python', 1), ('solution-sharing-cpp', 1), ('solution-sharing-python', 1), ('sorting', 1), ('stl', 1), ('straight-forward', 1), ('two-lines', 1), ('unique elements', 1), ('unique value', 1), ('video-explanation', 1)]"
572,Subtree of Another Tree,https://leetcode.com/problems/subtree-of-another-tree,"Given the roots of two binary trees root and subRoot, return true if there is a subtree of root with the same structure and node values of subRoot and false otherwise.

A subtree of a binary tree tree is a tree that consists of a node in tree and all of this node's descendants. The tree tree could also be considered as a subtree of itself.",['tree'],Easy,3378,170,693939,309560,"[""Count Univalue Subtrees"", ""Most Frequent Subtree Sum""]","[('c++', 42), ('java', 34), ('recursion', 30), ('dfs', 24), ('cpp', 23), ('python', 21), ('javascript', 20), ('recursive', 14), ('python 3', 13), ('bfs', 8), ('c#', 7), ('iterative', 7), ('cpp solution', 6), ('java-solution', 6), ('python3', 6), ('c++ code', 5), ('golang', 5), ('simple clear c++ solution', 5), ('tree', 5), ('easy-understanding', 4), ('easy-undestand', 4), ('preorder', 4), ('swift', 4), ('tree-traversal', 4), ('c++11', 3), ('clean', 3), ('cpp easy', 3), ('kmp', 3), ('recurision', 3), ('recursively', 3), ('simple', 3), ('c', 2), ('description', 2), ('dfs simple solution', 2), ('dfs-bfs', 2), ('easy', 2), ('easy to understand', 2), ('easy-to-understand', 2), ('fast', 2), ('go', 2), ('golang-solution', 2), ('hashing', 2), ('kmp algorithm', 2), ('level-order-traversal', 2), ('preorder traversal', 2), ('queue', 2), ('readable', 2), ('recursive approach', 2), ('ruby', 2), ('solution', 2), ('subtree', 2), ('tree traversal', 2), ('trees', 2), ('beat 97', 1), ('bfs python', 1), ('binary tree', 1), ('binary-tree', 1), ('clean code', 1), ('clean-code', 1), ('cpp-solution', 1), ('csharp', 1), ('ctci', 1), ('depth first search', 1), ('dfs-tree', 1), ('east-understanding', 1), ('easy-understand', 1), ('easytounderstand', 1), ('efficent approach', 1), ('efficient', 1), ('efficient algorithm', 1), ('efficient solution', 1), ('explained', 1), ('fast-solution', 1), ('generator', 1), ('go-solution', 1), ('hash-on-tree', 1), ('heroku', 1), ('inorder', 1), ('inorder-traversal', 1), ('intuitive', 1), ('javacript', 1), ('javascript recursive', 1), ('kotlinvim', 1), ('level order traversal', 1), ('linear memory', 1), ('linear time', 1), ('linear-space', 1), ('linear-time', 1), ('map', 1), ('memory efficient', 1), ('no recursion', 1), ('one line', 1), ('pattern matching', 1), ('postorder', 1), ('postorder-traversal', 1), ('pre-order', 1), ('pre-order traversal', 1), ('preorder-iterative', 1), ('reccursion', 1), ('recurrance', 1), ('recursive easy', 1), ('recursive solution', 1), ('rust', 1), ('salesforce', 1), ('same-tree', 1), ('self explanatory', 1), ('sequence', 1), ('serialization', 1), ('short', 1), ('short solution', 1), ('solution-python', 1), ('solution-sharing-cpp', 1), ('space', 1), ('stack', 1), ('string', 1), ('string-searching', 1), ('subtreeofanothertree', 1), ('symmetric-tree', 1), ('time', 1), ('time complexity', 1), ('typescript', 1), ('ultra easy', 1), ('upvote', 1), ('video explanation', 1), ('wrong answer', 1), ('xor', 1)]"
567,Permutation in String,https://leetcode.com/problems/permutation-in-string,"Given two strings s1 and s2, return true if s2 contains the permutation of s1.

In other words, one of s1's permutations is the substring of s2.","['two-pointers', 'sliding-window']",Medium,2392,79,418266,186383,"[""Minimum Window Substring"", ""Find All Anagrams in a String""]","[('sliding-window', 60), ('slidingwindow', 38), ('c++', 36), ('python', 32), ('java', 27), ('cpp', 21), ('javascript', 21), ('python 3', 19), ('easy-understanding', 11), ('hashmap', 11), ('python3', 10), ('sliding window', 10), ('c#', 9), ('two-pointers', 9), ('cpp solution', 7), ('simple solution', 7), ('easy-undestand', 5), ('java-solution', 5), ('linear time', 5), ('map', 5), ('slide window', 5), ('explained', 4), ('hash', 4), ('easy-to-understand', 3), ('hash table', 3), ('hashing', 3), ('swift', 3), ('#python', 2), ('#sliding-window', 2), ('accepted solution', 2), ('brute-force', 2), ('constant space', 2), ('dictionary', 2), ('east-to-understand', 2), ('easy', 2), ('easy-solution', 2), ('easytounderstand', 2), ('golang', 2), ('permutation', 2), ('permutations', 2), ('ruby', 2), ('rust', 2), ('simple-solution', 2), ('sliding window algorithm', 2), ('string', 2), ('strings', 2), ('vector', 2), ('#dictionary', 1), ('#easy-understanding', 1), ('#easysolution', 1), ('#hashmaps', 1), ('#python 3', 1), ('10 lines', 1), ('2pointers', 1), ('anagrams', 1), ('array', 1), ('arrays', 1), ('brute force', 1), ('bruteforce', 1), ('c++ code', 1), ('c++ easy to understand', 1), ('clean code', 1), ('commented', 1), ('comments', 1), ('constant memory', 1), ('constant-space', 1), ('counter', 1), ('cpp easy', 1), ('csharp', 1), ('detailed explanation', 1), ('dynamic programming', 1), ('easy-code', 1), ('explained solution', 1), ('explanation', 1), ('explanation with logic', 1), ('fast', 1), ('fast and simple', 1), ('fastest', 1), ('fuck noobs', 1), ('functional programming', 1), ('give stars if you like', 1), ('hahs', 1), ('hash-function', 1), ('iteration', 1), ('javascript solution', 1), ('javascriptes6', 1), ('javasript', 1), ('js', 1), ('kotlin', 1), ('kotlinvim', 1), ('kotllin', 1), ('linear expected', 1), ('linear-time', 1), ('linear-time-space', 1), ('nochutipaya', 1), ('o of n', 1), ('optimised', 1), ('permutation in string', 1), ('permutationinstring', 1), ('php', 1), ('precomputation', 1), ('pyhton 3', 1), ('query', 1), ('question', 1), ('rabin-karp', 1), ('recursion', 1), ('rolling hash', 1), ('rolling-hash', 1), ('scala', 1), ('simpe', 1), ('simple', 1), ('simplest', 1), ('single pass', 1), ('sorting', 1), ('space optimization', 1), ('straight-forward', 1), ('straightforward', 1), ('string-operation', 1), ('substring', 1), ('template', 1), ('two pointers', 1), ('unordered map', 1)]"
566,Reshape the Matrix,https://leetcode.com/problems/reshape-the-matrix,"In MATLAB, there is a handy function called reshape which can reshape an m x n matrix into a new one with a different size r x c keeping its original data.

You are given an m x n matrix mat and two integers r and c representing the row number and column number of the wanted reshaped matrix.

The reshaped matrix should be filled with all the elements of the original matrix in the same row-traversing order as they were.

If the reshape operation with given parameters is possible and legal, output the new reshaped matrix; Otherwise, output the original matrix.",['array'],Easy,977,114,190066,116181,[],"[('python', 23), ('c++', 20), ('python 3', 17), ('java', 15), ('cpp', 14), ('javascript', 14), ('python3', 9), ('c#', 7), ('easy', 5), ('easy-to-understand', 4), ('java-solution', 4), ('array', 3), ('c', 3), ('cpp solution', 3), ('easy to understand', 3), ('beginnerfriendly', 2), ('easy-understanding', 2), ('easysolution', 2), ('easytounderstand', 2), ('golang', 2), ('list-comprehension', 2), ('matrix', 2), ('ruby', 2), ('solution', 2), ('swift', 2), ('1 loop', 1), ('100 space', 1), ('100 speed', 1), ('90+faster', 1), ('algorithms', 1), ('amazon phone interview', 1), ('beats 100', 1), ('begginer friendly', 1), ('c code', 1), ('c++ code', 1), ('c++ easy to understand', 1), ('c++11', 1), ('clean', 1), ('concat', 1), ('cpp easy', 1), ('csharp', 1), ('easy understanding', 1), ('easy-to-read', 1), ('easy-undestand', 1), ('easytoundersatand', 1), ('explanation', 1), ('fast', 1), ('fast and simple', 1), ('fast-solution', 1), ('fastest c++ solution', 1), ('fastest solution', 1), ('flatten', 1), ('generator', 1), ('github', 1), ('go', 1), ('intutive', 1), ('iteration', 1), ('java solution', 1), ('javascript solution', 1), ('loop method', 1), ('math', 1), ('math-solution', 1), ('no extra space', 1), ('numpy', 1), ('please help me find the bug', 1), ('pythonic', 1), ('queue', 1), ('reduce', 1), ('reshape', 1), ('simple', 1), ('simple-solution', 1), ('slicing', 1), ('solution-sharing-cpp', 1), ('splice', 1), ('straight-forward', 1), ('stream', 1), ('syntax', 1), ('two-lines', 1), ('ultra easy', 1), ('vector', 1)]"
565,Array Nesting,https://leetcode.com/problems/array-nesting,"You are given an integer array nums of length n where nums is a permutation of the numbers in the range [0, n - 1].

You should build a set s[k] = {nums[k], nums[nums[i]], nums[nums[nums[k]]], ... } subjected to the following rule:


	The first element in s[k] starts with the selection of the element nums[k] of index = k.
	The next element in s[k] should be nums[nums[k]], and then nums[nums[nums[k]]], and so on.
	We stop adding right before a duplicate element occurs in s[k].


Return the longest length of a set s[k].",['array'],Medium,1053,116,114019,63886,"[""Nested List Weight Sum"", ""Flatten Nested List Iterator"", ""Nested List Weight Sum II""]","[('c++', 10), ('dfs', 10), ('cpp', 9), ('python', 7), ('java', 6), ('c#', 5), ('javascript', 5), ('java-solution', 4), ('python 3', 3), ('python3', 3), ('constant space', 2), ('easy', 2), ('easy-to-understand', 2), ('linear time', 2), ('100 faster', 1), ('1ms runtime', 1), ('array nesting', 1), ('arraynesting', 1), ('arrays', 1), ('c++ code', 1), ('cpp solution', 1), ('cycle detection', 1), ('easy-undestand', 1), ('efficient solution', 1), ('fast', 1), ('golang', 1), ('hashset', 1), ('js', 1), ('memoization', 1), ('nested-loop', 1), ('novel approach', 1), ('on', 1), ('optimal', 1), ('readable', 1), ('recursion', 1), ('recursive', 1), ('simple', 1), ('union find', 1), ('without extra space', 1)]"
564,Find the Closest Palindrome,https://leetcode.com/problems/find-the-closest-palindrome,"Given a string n representing an integer, return the closest integer (not including itself), which is a palindrome. If there is a tie, return the smaller one.

The closest is defined as the absolute difference minimized between two integers.",['string'],Hard,360,977,125961,25675,"[""Next Palindrome Using Same Digits""]","[('c++', 3), ('java', 2), ('python 3', 2), ('0ms', 1), ('c', 1), ('c#', 1), ('clean code', 1), ('constant space', 1), ('cpp', 1), ('easy-understanding', 1), ('examples', 1), ('interview-friendly', 1), ('python3', 1), ('pythonpython3', 1), ('short', 1), ('stl', 1), ('yelp', 1)]"
563,Binary Tree Tilt,https://leetcode.com/problems/binary-tree-tilt,"Given the root of a binary tree, return the sum of every tree node's tilt.

The tilt of a tree node is the absolute difference between the sum of all left subtree node values and all right subtree node values. If a node does not have a left child, then the sum of the left subtree node values is treated as 0. The rule is similar if there the node does not have a right child.","['tree', 'depth-first-search', 'recursion']",Easy,878,1574,217614,116177,"[""Find All The Lonely Nodes""]","[('c++', 31), ('recursion', 23), ('cpp', 20), ('dfs', 18), ('python', 17), ('java', 16), ('recursive', 15), ('python 3', 13), ('c#', 8), ('javascript', 8), ('java-solution', 7), ('cpp solution', 4), ('dfs simple solution', 4), ('golang', 4), ('iterative', 4), ('postorder-traversal', 4), ('binary-tree', 3), ('python3', 3), ('recurision', 3), ('ruby', 3), ('swift', 3), ('0ms', 2), ('0ms-solution', 2), ('clean code', 2), ('csharp', 2), ('depth first search', 2), ('dfs solution', 2), ('easy-understanding', 2), ('easy-undestand', 2), ('fastest', 2), ('golang-solution', 2), ('linear time', 2), ('php', 2), ('recursive approach', 2), ('rust', 2), ('scala', 2), ('simple', 2), ('tree traversal', 2), ('tree-traversal', 2), ('100 space', 1), ('100 speed', 1), ('8 lines', 1), ('aditya-verma', 1), ('algorithms', 1), ('binary tree tilt', 1), ('binarytree', 1), ('c', 1), ('c++ code', 1), ('c++ solution', 1), ('c++11', 1), ('cpp easy', 1), ('deep-first-search', 1), ('dfs-postorder', 1), ('easy to understand', 1), ('easy to understandd', 1), ('easy-to-understand', 1), ('easytounderstand', 1), ('esay-understand', 1), ('explained', 1), ('explanation', 1), ('fail', 1), ('fast', 1), ('go-solution', 1), ('graph theory', 1), ('help needed', 1), ('in-order traversal', 1), ('in-order-dfs', 1), ('in-order-traversal', 1), ('inorder', 1), ('inorder traversal', 1), ('intutive', 1), ('iterative solution', 1), ('iterative traversal', 1), ('iterative way', 1), ('iterative-dfs', 1), ('java ac solution', 1), ('js', 1), ('memory efficient', 1), ('no-global', 1), ('oop', 1), ('pair', 1), ('php solution', 1), ('post-order', 1), ('post-order-traversal', 1), ('postorder', 1), ('postorder traversal', 1), ('python3.8', 1), ('recurrance', 1), ('recursive easy', 1), ('self explanatory', 1), ('simple solution', 1), ('solution-sharing-cpp', 1), ('speed', 1), ('swift5', 1), ('thread-safety', 1), ('tree', 1), ('trees', 1), ('typescript', 1), ('ultra easy', 1), ('upvote', 1), ('wtf', 1)]"
561,Array Partition I,https://leetcode.com/problems/array-partition-i,"Given an integer array nums of 2n integers, group these integers into n pairs (a1, b1), (a2, b2), ..., (an, bn) such that the sum of min(ai, bi) for all i is maximized. Return the maximized sum.",['array'],Easy,207,52,356649,262541,[],"[('c++', 35), ('python', 25), ('cpp', 22), ('python 3', 21), ('easy-understanding', 17), ('java', 17), ('javascript', 17), ('sorting', 15), ('java-solution', 10), ('python3', 10), ('array', 6), ('ruby', 6), ('sort', 6), ('c#', 5), ('easy-to-understand', 5), ('c', 4), ('easy', 4), ('swift', 4), ('cpp solution', 3), ('easytounderstand', 3), ('fast-solution', 3), ('golang', 3), ('kotlin', 3), ('linear time', 3), ('one-liner', 3), ('simple', 3), ('array-partition', 2), ('beginner friendly', 2), ('c++11', 2), ('csharp', 2), ('fast', 2), ('simple solution', 2), ('sort-function', 2), ('sorted array', 2), ('#c++', 1), ('#codegirl', 1), ('#hashmap', 1), ('#hashmaps', 1), ('#python', 1), ('#python3', 1), ('#quicksort', 1), ('1-liner', 1), ('add odd placede elements', 1), ('algorithms', 1), ('approach and code', 1), ('array-sort', 1), ('arraypartition', 1), ('arraypartitioni', 1), ('arrays', 1), ('brute-force', 1), ('bucket sort', 1), ('c programming', 1), ('c++ code', 1), ('c++ easy solution', 1), ('chain', 1), ('chunking', 1), ('clean code', 1), ('clear', 1), ('commented', 1), ('comments added', 1), ('counting algorithm', 1), ('cpp easy', 1), ('cpp-solution', 1), ('devloper', 1), ('easy explanation', 1), ('easy to understand', 1), ('easy understanding', 1), ('easy-undestand', 1), ('eawtf', 1), ('explanation', 1), ('fast and simple', 1), ('fastest c++ solution', 1), ('go', 1), ('golang-solution', 1), ('good-in-local-machine', 1), ('greedy', 1), ('greedy algorithm', 1), ('greedy approach', 1), ('i want to get a star', 1), ('intutive', 1), ('java solution', 1), ('javascript solution', 1), ('js', 1), ('lazysou', 1), ('linq', 1), ('list comprehension', 1), ('logical thinking', 1), ('math', 1), ('math-proof', 1), ('max-of-min', 1), ('min heap', 1), ('odd-positon', 1), ('one line', 1), ('oneline', 1), ('oneliner', 1), ('php', 1), ('php solution', 1), ('problem-explained', 1), ('python3.8', 1), ('question', 1), ('range', 1), ('rust', 1), ('short', 1), ('simplest', 1), ('slice notation', 1), ('solution', 1), ('solution-sharing-cpp', 1), ('solution-sharing-python', 1), ('sortingplus2pointer', 1), ('stepp', 1), ('stl', 1), ('straight-forward', 1), ('streams', 1), ('swift5', 1), ('triangle inequality', 1), ('two line', 1), ('ultra easy', 1), ('uz', 1), ('vector', 1)]"
560,Subarray Sum Equals K,https://leetcode.com/problems/subarray-sum-equals-k,"Given an array of integers nums and an integer k, return the total number of continuous subarrays whose sum equals to k.","['array', 'hash-table']",Medium,7227,249,1084257,474114,"[""Two Sum"", ""Continuous Subarray Sum"", ""Subarray Product Less Than K"", ""Find Pivot Index"", ""Subarray Sums Divisible by K"", ""Minimum Operations to Reduce X to Zero""]","[('hashmap', 54), ('c++', 39), ('java', 34), ('cpp', 28), ('prefix sum', 25), ('python', 25), ('python 3', 19), ('easy-understanding', 18), ('java-solution', 17), ('javascript', 14), ('hash table', 12), ('map', 9), ('python3', 9), ('linear time', 7), ('cpp solution', 6), ('easy-undestand', 6), ('simple solution', 5), ('defaultdict', 4), ('golang', 4), ('swift', 4), ('c#', 3), ('dictionary', 3), ('dynamic programming', 3), ('easy', 3), ('explained', 3), ('golang-solution', 3), ('intuitive', 3), ('subarray', 3), ('unordered map', 3), ('dryrun', 2), ('easytounderstand', 2), ('hash map', 2), ('hashtable', 2), ('java ac solution', 2), ('javascript solution', 2), ('kotlin', 2), ('linear-space', 2), ('linear-time', 2), ('prefix-sum', 2), ('rust', 2), ('short', 2), ('short code', 2), ('slidingwindow', 2), ('solution', 2), ('subarray sum equals k', 2), ('unorderedmap', 2), ('2sum', 1), ('99 faster', 1), ('accumlulative sum', 1), ('algorithms', 1), ('array', 1), ('arrays', 1), ('atony', 1), ('best explaination', 1), ('bfs', 1), ('brute force', 1), ('brute force to optimal', 1), ('brute-force', 1), ('c', 1), ('c#-solution', 1), ('c++ code', 1), ('c++ hash', 1), ('c++ iterative sol', 1), ('c++ solution', 1), ('clean', 1), ('clean code', 1), ('coding-style', 1), ('concise', 1), ('concise-solution', 1), ('cplusplus', 1), ('cpp easy', 1), ('csharp', 1), ('cubic', 1), ('cummulative', 1), ('cumulative sum', 1), ('description', 1), ('detailed explanation', 1), ('dfs', 1), ('dfs-bfs', 1), ('dict', 1), ('dictionaries', 1), ('dictionary c#', 1), ('dictonary', 1), ('divide and conquer', 1), ('dp', 1), ('easier to understand', 1), ('easy solution', 1), ('easy to understand', 1), ('easy understanding', 1), ('easy-to-understand', 1), ('easy-understand', 1), ('explaination', 1), ('explanation', 1), ('explanation of logic', 1), ('explanation with code', 1), ('facebook phone interview', 1), ('fast', 1), ('fastest', 1), ('give stars if you like', 1), ('go-solution', 1), ('hash-table', 1), ('hashing', 1), ('hashmat', 1), ('help', 1), ('help needed', 1), ('immutable', 1), ('immutable-values', 1), ('initial', 1), ('iterative', 1), ('itertools', 1), ('java 8', 1), ('js', 1), ('kotlinvim', 1), ('linear memory', 1), ('map stl', 1), ('merge sort', 1), ('multimap', 1), ('optimal', 1), ('optimized', 1), ('partial-sum', 1), ('partialsum', 1), ('php', 1), ('precomputation', 1), ('prefixsum', 1), ('prefixsums', 1), ('presum', 1), ('python2', 1), ('pythonic', 1), ('reduce', 1), ('ruby', 1), ('scala', 1), ('sequence', 1), ('series', 1), ('simple', 1), ('simple clear c++ solution', 1), ('sliding-window', 1), ('step by step', 1), ('subarray sum equals', 1), ('subarraysumequalsk', 1), ('sum', 1), ('super-easy', 1), ('techbacker', 1), ('test', 1), ('testcases', 1), ('two pointers', 1), ('two-pass', 1), ('typescript', 1), ('unodered-map', 1), ('upvote', 1)]"
557,Reverse Words in a String III,https://leetcode.com/problems/reverse-words-in-a-string-iii,"Given a string s, reverse the order of characters in each word within a sentence while still preserving whitespace and initial word order.",['string'],Easy,1438,103,354408,257204,"[""Reverse String II""]","[('c++', 43), ('cpp', 40), ('python', 38), ('java', 35), ('javascript', 31), ('python 3', 29), ('easy-understanding', 13), ('java-solution', 12), ('python3', 11), ('easy-undestand', 10), ('easy', 9), ('string', 9), ('easytounderstand', 8), ('c', 7), ('c#', 7), ('golang', 7), ('one-liner', 6), ('reverse', 6), ('cpp easy', 5), ('javascript solution', 5), ('ruby', 5), ('c++ code', 4), ('cpp solution', 4), ('easy-to-understand', 4), ('stack', 4), ('stringbuilder', 4), ('1line', 3), ('array', 3), ('commented', 3), ('csharp', 3), ('easy-understand', 3), ('fast', 3), ('go-solution', 3), ('golang-solution', 3), ('in-place', 3), ('js', 3), ('kotlin', 3), ('solution', 3), ('strings', 3), ('swift', 3), ('#python 3', 2), ('1 line', 2), ('beginner friendly', 2), ('c++ easy to understand', 2), ('commentary', 2), ('easiest', 2), ('easy to understand', 2), ('fast and simple', 2), ('go', 2), ('inplace', 2), ('join', 2), ('map', 2), ('one line', 2), ('python2', 2), ('reversestring', 2), ('split', 2), ('stacks', 2), ('streams', 2), ('swap', 2), ('two-pointers', 2), ('#beginner', 1), ('#easy', 1), ('#oneline', 1), ('#oneliner', 1), ('#python', 1), ('#python3', 1), ('1-line', 1), ('1-liner', 1), ('1liner', 1), ('2 pointer', 1), ('2-pointers', 1), ('4 ways', 1), ('accepted', 1), ('arrays', 1), ('basic', 1), ('beginner', 1), ('broken-tests', 1), ('brute force', 1), ('bug', 1), ('c code', 1), ('c++ solution', 1), ('c++ stack', 1), ('c++11', 1), ('char compare', 1), ('character', 1), ('clean', 1), ('counters', 1), ('cpp clear', 1), ('double-pointers', 1), ('easy-peasy', 1), ('error', 1), ('es6', 1), ('explanation with logic', 1), ('faang', 1), ('fast-solution', 1), ('faster than 97', 1), ('fastest', 1), ('general', 1), ('github', 1), ('help', 1), ('interview questions', 1), ('iterators', 1), ('java ac solution', 1), ('java-8', 1), ('java8', 1), ('javascrip', 1), ('lambda', 1), ('linear time', 1), ('list comprehension', 1), ('loops', 1), ('map function', 1), ('mapreduce', 1), ('oneliner', 1), ('optimized', 1), ('pointer', 1), ('python bivector', 1), ('rajat', 1), ('reduce', 1), ('reverse-string', 1), ('reverse-words', 1), ('short c++ code', 1), ('simple', 1), ('simple and elegant', 1), ('simple clear c++ solution', 1), ('simple solution', 1), ('slicing', 1), ('solution-sharing-c', 1), ('solution-sharing-python', 1), ('splitmethod - getline', 1), ('stl', 1), ('stl algorithms', 1), ('straight-forward', 1), ('string reverse', 1), ('string-operation', 1), ('stringbuffer', 1), ('strings manipulation', 1), ('stringstream', 1), ('swift5', 1), ('technique', 1), ('temp', 1), ('three-lines', 1), ('twopointers', 1), ('unit-test', 1)]"
556,Next Greater Element III,https://leetcode.com/problems/next-greater-element-iii,"Given a positive integer n, find the smallest integer which has exactly the same digits existing in the integer n and is greater in value than n. If no such positive integer exists, return -1.

Note that the returned integer should fit in 32-bit integer, if there is a valid answer but it does not fit in 32-bit integer, return -1.",['string'],Medium,1177,263,202636,67767,"[""Next Greater Element I"", ""Next Greater Element II"", ""Next Palindrome Using Same Digits""]","[('c++', 35), ('cpp', 25), ('java', 17), ('python', 15), ('permutation', 12), ('python 3', 11), ('easy', 10), ('easy-understanding', 9), ('javascript', 9), ('cpp solution', 7), ('python3', 7), ('permutations', 5), ('simple', 5), ('explained', 4), ('nextpermutation', 4), ('0ms', 3), ('c++ solution', 3), ('clean code', 3), ('golang', 3), ('greedy', 3), ('java-solution', 3), ('linear time', 3), ('self-explanatory', 3), ('string', 3), ('100 faster runtime', 2), ('100 speed', 2), ('binary-search', 2), ('c#', 2), ('c++ code', 2), ('clean', 2), ('concise-solution', 2), ('easy-to-understand', 2), ('easy-undestand', 2), ('explained solution', 2), ('explanation', 2), ('fast and simple', 2), ('fastest', 2), ('java solution', 2), ('next permutation', 2), ('simple solution', 2), ('sort', 2), ('stack', 2), ('100 space', 1), ('1ms', 1), ('1ms runtime', 1), ('algorithm', 1), ('beats 100 percent', 1), ('binary search', 1), ('bisect', 1), ('bottom-up', 1), ('brute force', 1), ('c++ ac', 1), ('clean solution', 1), ('combination', 1), ('combinations', 1), ('combinatorics', 1), ('combinatories', 1), ('commented', 1), ('comments added', 1), ('cpp clear', 1), ('easy code', 1), ('easy solution', 1), ('easytounderstand', 1), ('effiecinet', 1), ('examples', 1), ('expalanation', 1), ('explanation with logic', 1), ('fast-solution', 1), ('faster than 100', 1), ('faster than 100.00', 1), ('fastest c++ solution', 1), ('go', 1), ('golang-solution', 1), ('hashmap', 1), ('interview', 1), ('intuitive', 1), ('intutive', 1), ('itertools', 1), ('java solution sharing', 1), ('javascrip', 1), ('javascript solution', 1), ('kotlinvim', 1), ('kotllin', 1), ('learn with me', 1), ('logic', 1), ('loop', 1), ('map', 1), ('math', 1), ('memory-efficient', 1), ('monotonic stack', 1), ('next-permutation', 1), ('nextgreaterelementiii', 1), ('no built-in-function', 1), ('priority queue', 1), ('python2', 1), ('recursion', 1), ('reverselist', 1), ('ruby', 1), ('rust', 1), ('short c++ code', 1), ('solution', 1), ('sorted array', 1), ('space-complexity-1', 1), ('stack-based', 1), ('stacks', 1), ('stl', 1), ('substr', 1), ('swift', 1), ('time-complexity', 1), ('ultra simple', 1), ('upvote', 1), ('video-explanation', 1)]"
554,Brick Wall,https://leetcode.com/problems/brick-wall,"There is a rectangular brick wall in front of you with n rows of bricks. The ith row has some number of bricks each of the same height (i.e., one unit) but they can be of different widths. The total width of each row is the same.

Draw a vertical line from the top to the bottom and cross the least bricks. If your line goes through the edge of a brick, then the brick is not considered as crossed. You cannot draw a line just along one of the two vertical edges of the wall, in which case the line will obviously cross no bricks.

Given the 2D array wall that contains the information about the wall, return the minimum number of crossed bricks after drawing such a vertical line.",['hash-table'],Medium,1461,72,168221,86818,[],"[('hashmap', 39), ('c++', 34), ('cpp', 23), ('python', 22), ('java', 15), ('python 3', 13), ('easy-understanding', 10), ('javascript', 9), ('easy-to-understand', 8), ('map', 7), ('c#', 6), ('golang', 5), ('python3', 5), ('cpp solution', 4), ('go', 4), ('java-solution', 4), ('counter', 3), ('dictionary c#', 3), ('easy', 3), ('explained', 3), ('linear time', 3), ('maximum', 3), ('rust', 3), ('simple', 3), ('unordered map', 3), ('c++ code', 2), ('clean code', 2), ('cpp easy', 2), ('explain', 2), ('explanation', 2), ('frequency table', 2), ('heap', 2), ('linear memory', 2), ('numpy', 2), ('optimal', 2), ('prefix sum', 2), ('#codeboy', 1), ('#easy-understand', 1), ('#easy-understanding', 1), ('#easysolution', 1), ('#hashmap', 1), ('#python', 1), ('#python 3', 1), ('554', 1), ('awesome samriddhi', 1), ('binary search', 1), ('binary-search', 1), ('brick wall', 1), ('brickwall', 1), ('c++ solution', 1), ('clean', 1), ('clear-understanding', 1), ('commented', 1), ('concise', 1), ('cpp-solution', 1), ('cumulative sum', 1), ('dict', 1), ('dictionary', 1), ('dictonary', 1), ('easy to understand', 1), ('efficient solution', 1), ('explanation of logic', 1), ('fast and simple', 1), ('fast-solution', 1), ('fastest', 1), ('frequencies', 1), ('frequency count', 1), ('functional programming', 1), ('go-solution', 1), ('golang-solution', 1), ('hash map', 1), ('hash table', 1), ('hash table and map', 1), ('hashtable', 1), ('heapq', 1), ('kotlin', 1), ('map-stl', 1), ('maps', 1), ('min heap', 1), ('multiset', 1), ('one-liner', 1), ('optimisation', 1), ('performance', 1), ('prefixsum', 1), ('prefixsums', 1), ('python2', 1), ('pythonic', 1), ('rajat', 1), ('readable', 1), ('ritik', 1), ('ruby', 1), ('running sum', 1), ('scala', 1), ('short', 1), ('simple java solution', 1), ('solution-sharing-cpp', 1), ('swift', 1), ('swift5', 1), ('three-lines', 1), ('two-lines', 1), ('typescript', 1)]"
553,Optimal Division,https://leetcode.com/problems/optimal-division,"You are given an integer array nums. The adjacent integers in nums will perform the float division.


	For example, for nums = [2,3,4], we will evaluate the expression ""2/3/4"".


However, you can add any number of parenthesis at any position to change the priority of operations. You want to add these parentheses such the value of the expression after the evaluation is maximum.

Return the corresponding expression that has the maximum value in string format.

Note: your expression should not contain redundant parenthesis.","['math', 'string']",Medium,201,1215,48126,27711,[],"[('python', 5), ('python 3', 4), ('c#', 3), ('100 memory', 2), ('100 space', 2), ('dynamic programming', 2), ('easy-to-understand', 2), ('java', 2), ('python3', 2), ('c++', 1), ('cpp easy', 1), ('easy-understanding', 1), ('easy-undestand', 1), ('java ac solution', 1), ('java-solution', 1), ('javascript', 1), ('one-liner', 1), ('oneline', 1), ('recursion', 1), ('ruby', 1), ('simpler', 1), ('straight-forward', 1)]"
552,Student Attendance Record II,https://leetcode.com/problems/student-attendance-record-ii,"An attendance record for a student can be represented as a string where each character signifies whether the student was absent, late, or present on that day. The record only contains the following three characters:


	'A': Absent.
	'L': Late.
	'P': Present.


Any student is eligible for an attendance award if they meet both of the following criteria:


	The student was absent ('A') for strictly fewer than 2 days total.
	The student was never late ('L') for 3 or more consecutive days.


Given an integer n, return the number of possible attendance records of length n that make a student eligible for an attendance award. The answer may be very large, so return it modulo 109 + 7.",['dynamic-programming'],Hard,735,130,79918,30261,"[""Student Attendance Record I""]","[('c++', 10), ('cpp', 10), ('dynamic programming', 10), ('dp', 5), ('python', 4), ('java', 3), ('python3', 3), ('c#', 2), ('dynamic-programming', 2), ('python 3', 2), ('binary', 1), ('dfs', 1), ('dfs-iterative', 1), ('dp bottom up', 1), ('dp-techqique', 1), ('dynamicprogramming', 1), ('dynaminc programming', 1), ('easytounderstand', 1), ('fast-matrix-exp', 1), ('fast-matrix-exponentiation', 1), ('functional programming', 1), ('iterative', 1), ('javascript', 1), ('linear', 1), ('log', 1), ('markov chain', 1), ('math', 1), ('matrix exponentiation', 1), ('memoization', 1), ('memorization', 1), ('numpy', 1), ('one-pass', 1), ('reccurrence', 1), ('recursion', 1), ('recursive', 1), ('ruby', 1), ('scala', 1), ('studentattendancerecordii', 1), ('topdown', 1), ('wrong-test-cases', 1)]"
551,Student Attendance Record I,https://leetcode.com/problems/student-attendance-record-i,"You are given a string s representing an attendance record for a student where each character signifies whether the student was absent, late, or present on that day. The record only contains the following three characters:


	'A': Absent.
	'L': Late.
	'P': Present.


The student is eligible for an attendance award if they meet both of the following criteria:


	The student was absent ('A') for strictly fewer than 2 days total.
	The student was never late ('L') for 3 or more consecutive days.


Return true if the student is eligible for an attendance award, or false otherwise.",['string'],Easy,33,4,235671,108816,"[""Student Attendance Record II""]","[('java', 21), ('c++', 20), ('javascript', 14), ('python 3', 14), ('python', 13), ('cpp', 12), ('python3', 11), ('java-solution', 9), ('easy-understanding', 8), ('c#', 5), ('cpp solution', 5), ('golang', 5), ('regex', 5), ('string', 5), ('easy', 4), ('golang-solution', 4), ('easy-to-understand', 3), ('go', 3), ('c', 2), ('easy-undestand', 2), ('fast-solution', 2), ('js', 2), ('js javascript', 2), ('one line', 2), ('regular-expression', 2), ('single pass', 2), ('straight-forward', 2), ('swift', 2), ('1-liner', 1), ('7 lines', 1), ('algorithms', 1), ('avnish', 1), ('contains', 1), ('count', 1), ('cpp-easy', 1), ('csharp', 1), ('defaultdict', 1), ('easy to understand', 1), ('easy-solition', 1), ('easy-solution', 1), ('explained', 1), ('fasterthan100', 1), ('fastest', 1), ('full detailed explanation', 1), ('go-solution', 1), ('linear time', 1), ('malj', 1), ('no regex', 1), ('one-liner', 1), ('oneline', 1), ('python2', 1), ('regexp', 1), ('ruby', 1), ('short solution', 1), ('simple', 1), ('solution-sharing-python', 1), ('stl algorithms', 1), ('str.find', 1), ('straight forward', 1), ('string-operation', 1), ('strings', 1), ('studentattendancerecord1', 1), ('unit-test', 1)]"
547,Number of Provinces,https://leetcode.com/problems/number-of-provinces,"There are n cities. Some of them are connected, while some are not. If city a is connected directly with city b, and city b is connected directly with city c, then city a is connected indirectly with city c.

A province is a group of directly or indirectly connected cities and no other cities outside of the group.

You are given an n x n matrix isConnected where isConnected[i][j] = 1 if the ith city and the jth city are directly connected, and isConnected[i][j] = 0 otherwise.

Return the total number of provinces.","['depth-first-search', 'union-find']",Medium,2996,179,434974,264777,"[""Number of Connected Components in an Undirected Graph"", ""Robot Return to Origin"", ""Sentence Similarity"", ""Sentence Similarity II"", ""The Earliest Moment When Everyone Become Friends""]","[('dfs', 61), ('union find', 49), ('c++', 46), ('python', 43), ('cpp', 25), ('java', 25), ('python 3', 24), ('javascript', 18), ('union-find', 16), ('bfs', 15), ('python3', 14), ('graph', 12), ('dfs simple solution', 11), ('unionfind', 10), ('easy-understanding', 9), ('java-solution', 9), ('disjoint-set', 7), ('connected components', 6), ('c#', 5), ('simple', 5), ('cpp solution', 4), ('union-by-rank', 4), ('depth first search', 3), ('disjoint-sets', 3), ('path compression', 3), ('recursion', 3), ('c', 2), ('c++ code', 2), ('c++11', 2), ('clean code', 2), ('dfs-iterative', 2), ('disjoint set', 2), ('disjointset', 2), ('dsu', 2), ('easy', 2), ('easy-solution', 2), ('easy-to-understand', 2), ('explained', 2), ('explanation', 2), ('golang', 2), ('kotlin', 2), ('path-compression', 2), ('rank', 2), ('union by rank', 2), ('100 speed', 1), ('1ms runtime', 1), ('beats 100', 1), ('beats-100', 1), ('bfs vs dfs', 1), ('bit', 1), ('bit manipulation', 1), ('bit-manipulation', 1), ('bit-shift', 1), ('bitwise', 1), ('c++code', 1), ('clean-code', 1), ('commentary', 1), ('commented', 1), ('comments-added', 1), ('compressed', 1), ('depth first-search', 1), ('detailed explanation', 1), ('dfs recursive', 1), ('dfs solution', 1), ('dfs-bfs', 1), ('dfs-recursive', 1), ('disjoint sets', 1), ('easy code', 1), ('easy understanding', 1), ('easy-solition', 1), ('easy-to-implement', 1), ('easy-undesrtanding', 1), ('easytoundersatand', 1), ('explain', 1), ('explained solution', 1), ('fast', 1), ('find-union', 1), ('full explained', 1), ('go', 1), ('golang-solution', 1), ('google-india', 1), ('help needed', 1), ('in-place', 1), ('insights', 1), ('issue', 1), ('iterative', 1), ('java ac solution', 1), ('javascript solution', 1), ('js', 1), ('kotlinvim', 1), ('linear algebra', 1), ('map', 1), ('numpy', 1), ('path comparison', 1), ('pythno3', 1), ('queue', 1), ('quick find', 1), ('recursive', 1), ('recursive easy', 1), ('recursive solution', 1), ('recusion', 1), ('ruby', 1), ('rust', 1), ('search', 1), ('set', 1), ('sets', 1), ('solution', 1), ('stacks', 1), ('suggestion', 1), ('swift', 1), ('template', 1), ('trick', 1), ('typescript', 1), ('union', 1), ('video-explanation', 1)]"
546,Remove Boxes,https://leetcode.com/problems/remove-boxes,"You are given several boxes with different colors represented by different positive numbers.

You may experience several rounds to remove boxes until there is no box left. Each time you can choose some continuous boxes with the same color (i.e., composed of k boxes, k >= 1), remove them and get k * k points.

Return the maximum points you can get.","['dynamic-programming', 'depth-first-search']",Hard,857,58,42965,18929,"[""Strange Printer""]","[('dp', 5), ('dynamic programming', 3), ('c++', 2), ('bottomup', 1), ('c++ solution', 1), ('cpp', 1), ('cpp solution', 1), ('dynamic-programming', 1), ('explanation', 1), ('java', 1), ('memorization', 1), ('photo', 1)]"
543,Diameter of Binary Tree,https://leetcode.com/problems/diameter-of-binary-tree,"Given the root of a binary tree, return the length of the diameter of the tree.

The diameter of a binary tree is the length of the longest path between any two nodes in a tree. This path may or may not pass through the root.

The length of a path between two nodes is represented by the number of edges between them.",['tree'],Easy,4608,287,943724,469222,"[""Diameter of N-Ary Tree""]","[('recursion', 62), ('dfs', 45), ('java', 44), ('c++', 43), ('python', 33), ('cpp', 29), ('python 3', 23), ('binary-tree', 19), ('javascript', 18), ('recursive', 14), ('java-solution', 11), ('easy-understanding', 9), ('easy-undestand', 9), ('python3', 9), ('recusion', 9), ('c#', 7), ('golang', 7), ('tree', 7), ('cpp solution', 6), ('simple solution', 6), ('c++ code', 5), ('cpp easy', 5), ('tree traversal', 5), ('tree-traversal', 5), ('dfs simple solution', 4), ('diameter', 4), ('dp', 4), ('easy-to-understand', 4), ('easytounderstand', 4), ('postorder-traversal', 4), ('solution', 4), ('swift', 4), ('binary tree', 3), ('c', 3), ('commented', 3), ('depth first search', 3), ('dfs solution', 3), ('diameter of binary tree', 3), ('easy', 3), ('go', 3), ('golang-solution', 3), ('recurision', 3), ('trees', 3), ('csharp', 2), ('dfs-bottomup', 2), ('dynamic programming', 2), ('easy to understand', 2), ('explaination', 2), ('fast and simple', 2), ('height of tree', 2), ('javascript solution', 2), ('no-global', 2), ('optimal', 2), ('pair', 2), ('post-order-traversal', 2), ('recursively', 2), ('ruby', 2), ('scala', 2), ('simple', 2), ('simple clear c++ solution', 2), ('#binarytree', 1), ('#diameter', 1), ('#javascript', 1), ('#python', 1), ('0ms-solution', 1), ('accepted', 1), ('awesome samriddhi', 1), ('beat 99.8', 1), ('bfs', 1), ('brute force', 1), ('brute force to optimal', 1), ('brute-force', 1), ('c programming', 1), ('c++ recursion', 1), ('c++ recursive solution', 1), ('clean code', 1), ('clean-efficient-code', 1), ('commented code', 1), ('comments-added', 1), ('constant space', 1), ('cpp doubt', 1), ('depth first traversal', 1), ('depth-first search', 1), ('depth-first-search', 1), ('dfs recursive', 1), ('dfs-iterative', 1), ('dfs-tree', 1), ('diameterofbinarytree', 1), ('divide-conquer', 1), ('doubts', 1), ('dp on trees', 1), ('easy and simple', 1), ('easy-understand', 1), ('explained', 1), ('explanation of logic', 1), ('facebook', 1), ('faceebook', 1), ('go-solution', 1), ('google', 1), ('greedy', 1), ('inorder', 1), ('interview-tips', 1), ('intutive', 1), ('iterative', 1), ('iterative traversal', 1), ('java ac solution', 1), ('java recursion', 1), ('java solution', 1), ('javascrip', 1), ('javascript recursive', 1), ('js', 1), ('kadanes algorithm', 1), ('kotlinvim', 1), ('linear time', 1), ('linear-time', 1), ('longest-path', 1), ('map', 1), ('naive-solution', 1), ('nestedfunction', 1), ('nutanix', 1), ('oracle', 1), ('pass-by-reference', 1), ('peymannp', 1), ('pointer', 1), ('postorder', 1), ('preorder traversal', 1), ('printingpath', 1), ('python dfs', 1), ('python python3', 1), ('python2', 1), ('readable', 1), ('recursive easy', 1), ('recursive solution', 1), ('recusive', 1), ('ritik', 1), ('simple explanation', 1), ('solution-sharing-cpp', 1), ('space', 1), ('speed', 1), ('struggled', 1), ('topdown', 1), ('tree-depth', 1), ('tree-height', 1), ('tuple', 1), ('video-explanation', 1), ('wrong output', 1), ('wrong-answer-java', 1)]"
542,01 Matrix,https://leetcode.com/problems/01-matrix,"Given an m x n binary matrix mat, return the distance of the nearest 0 for each cell.

The distance between two adjacent cells is 1.","['depth-first-search', 'breadth-first-search']",Medium,2293,125,300879,123920,"[""Shortest Path to Get Food""]","[('bfs', 47), ('c++', 22), ('python', 17), ('java', 16), ('python 3', 14), ('cpp', 12), ('dp', 7), ('dynamic programming', 7), ('javascript', 7), ('commented', 5), ('python3', 5), ('bfs simple solution', 4), ('breadth first search', 4), ('c#', 4), ('dfs', 4), ('easy-undestand', 3), ('graph', 3), ('queue', 3), ('simple solution', 3), ('c', 2), ('c++ code', 2), ('clean', 2), ('cpp solution', 2), ('deque', 2), ('easy-to-understand', 2), ('easy-understanding', 2), ('explained', 2), ('in-place', 2), ('java-solution', 2), ('01-matrix', 1), ('100 space', 1), ('approach', 1), ('beginner friendly', 1), ('bfs java', 1), ('breadth-first', 1), ('breadth-first-search', 1), ('brute force', 1), ('clean code', 1), ('comments', 1), ('depth-first-search', 1), ('detailed explanation', 1), ('dfs solution', 1), ('dijakstras', 1), ('distance', 1), ('easy', 1), ('easy to read', 1), ('easy understand', 1), ('easy-undesrtanding', 1), ('easytounderstand', 1), ('explaination', 1), ('explanation of logic', 1), ('functional-programming', 1), ('golang', 1), ('help needed', 1), ('inplace', 1), ('intutive', 1), ('iteration', 1), ('iterative', 1), ('java solution sharing', 1), ('javascript solution', 1), ('js', 1), ('matrix', 1), ('multi-source-bfs', 1), ('performance question', 1), ('pls optimize my code', 1), ('propagation', 1), ('python dfs', 1), ('python2', 1), ('ruby', 1), ('self explanatory', 1), ('solution-cpp', 1), ('solution-javascript', 1), ('solution-sharing-c', 1), ('straight forward', 1), ('swift', 1), ('test-cases', 1), ('time complexity', 1), ('time exceed error', 1), ('time-complexity-o', 1), ('tle', 1), ('two approaches', 1), ('ultra simple', 1), ('worst', 1)]"
541,Reverse String II,https://leetcode.com/problems/reverse-string-ii,"Given a string s and an integer k, reverse the first k characters for every 2k characters counting from the start of the string.

If there are fewer than k characters left, reverse all of them. If there are less than 2k but greater than or equal to k characters, then reverse the first k characters and left the other as original.",['string'],Easy,596,1653,230089,114040,"[""Reverse String"", ""Reverse Words in a String III""]","[('c++', 22), ('cpp', 17), ('java', 15), ('python', 14), ('javascript', 13), ('python 3', 13), ('python3', 6), ('golang', 5), ('easy-understanding', 4), ('java-solution', 4), ('solution-sharing-cpp', 4), ('c#', 3), ('easy-to-understand', 3), ('recursion', 3), ('simple', 3), ('string', 3), ('cpp solution', 2), ('golang-solution', 2), ('string-operation', 2), ('stringbuilder', 2), ('substring', 2), ('swift', 2), ('two-pointers', 2), ('#java-solution', 1), ('#javacript', 1), ('100', 1), ('2 lines', 1), ('3 liner', 1), ('4ms', 1), ('array', 1), ('c', 1), ('c++ easy to understand', 1), ('c++ solution', 1), ('clean code', 1), ('commented', 1), ('comments-added', 1), ('cpp-solution', 1), ('csharp', 1), ('deque', 1), ('easy', 1), ('easy-undestand', 1), ('easytounderstand', 1), ('explained', 1), ('functional-programming', 1), ('github', 1), ('go-solution', 1), ('in-place', 1), ('iterative', 1), ('linear time', 1), ('loop', 1), ('loops', 1), ('no extra space', 1), ('one-pass', 1), ('python2', 1), ('recursive', 1), ('recusion', 1), ('reverse', 1), ('reverse string ii', 1), ('reverse-string', 1), ('reversestring', 1), ('ruby', 1), ('scala', 1), ('single pass', 1), ('slice', 1), ('slicing', 1), ('solution', 1), ('splice', 1), ('split', 1), ('step', 1), ('straightforward', 1), ('string manipulation', 1), ('string reverse', 1), ('two pointers', 1), ('two-pointer', 1), ('understandable', 1), ('unit-test', 1), ('with-explanation', 1)]"
540,Single Element in a Sorted Array,https://leetcode.com/problems/single-element-in-a-sorted-array,"You are given a sorted array consisting of only integers where every element appears exactly twice, except for one element which appears exactly once. Find this single element that appears only once.

Follow up: Your solution should run in O(log n) time and O(1) space.",['binary-search'],Medium,2408,88,326053,188963,[],"[('binary-search', 53), ('java', 38), ('binary search', 31), ('c++', 25), ('binarysearch', 20), ('python 3', 20), ('javascript', 19), ('python', 19), ('cpp', 17), ('easy-understanding', 13), ('java-solution', 11), ('cpp solution', 9), ('python3', 9), ('100 speed', 7), ('bit manipulation', 5), ('javascript solution', 5), ('ruby', 5), ('binarysearh', 4), ('c#', 4), ('easy', 4), ('golang', 4), ('js', 4), ('logarithmic time', 4), ('swift', 4), ('xor', 4), ('c++ code', 3), ('clear', 3), ('easytounderstand', 3), ('recursion', 3), ('2 pointer', 2), ('bit-manipulation', 2), ('bitwise', 2), ('bitwise operation', 2), ('constant-space', 2), ('csharp', 2), ('easy-to-understand', 2), ('easy-undestand', 2), ('fast and simple', 2), ('fastest c++ solution', 2), ('golang-solution', 2), ('hashmap', 2), ('linear time', 2), ('one-liner', 2), ('rust', 2), ('short solution', 2), ('#easy #java', 1), ('0ms', 1), ('100 space', 1), ('array', 1), ('array-sort', 1), ('arrays', 1), ('beginner', 1), ('best-solution', 1), ('binary search algorithm', 1), ('binary-sesarch', 1), ('binary-tree', 1), ('bitmanipulation', 1), ('boundary condition', 1), ('bs', 1), ('c#-solution', 1), ('c++ iterative sol', 1), ('c++ solution', 1), ('constant space', 1), ('cpp easy', 1), ('detailed explanation', 1), ('divide and concur', 1), ('easy understand', 1), ('easysolution', 1), ('error', 1), ('even odd', 1), ('exclusive or', 1), ('explained', 1), ('explanation', 1), ('explanation with logic', 1), ('fast-solution', 1), ('functional', 1), ('functional-programming', 1), ('general', 1), ('go', 1), ('go lang', 1), ('google', 1), ('help me', 1), ('intuitive', 1), ('java ac solution', 1), ('kotlin', 1), ('kotlinvim', 1), ('leetcode-solution', 1), ('logarithmic-time', 1), ('logn', 1), ('loops', 1), ('map', 1), ('mathematical', 1), ('neat', 1), ('problem solving', 1), ('python2', 1), ('recusion', 1), ('scala', 1), ('simple', 1), ('simple python accepted', 1), ('simple solution', 1), ('stack', 1), ('template-iii', 1), ('two pointer technique', 1), ('unordered map', 1), ('visual', 1), ('visualization', 1)]"
539,Minimum Time Difference,https://leetcode.com/problems/minimum-time-difference,"Given a list of 24-hour clock time points in ""HH:MM"" format, return the minimum minutes difference between any two time-points in the list.",['string'],Medium,674,172,117141,61481,[],"[('python', 13), ('c++', 10), ('python 3', 10), ('java', 8), ('cpp', 7), ('javascript', 6), ('python3', 6), ('sorting', 6), ('buckets', 4), ('c#', 4), ('sort', 3), ('linear', 2), ('#easy-understand', 1), ('#python', 1), ('#python #easy', 1), ('#python 3', 1), ('array', 1), ('bucket-sort', 1), ('c++ set', 1), ('clear solution', 1), ('commented', 1), ('concise', 1), ('constant', 1), ('constant space', 1), ('convert', 1), ('easy-understanding', 1), ('easy-undestand', 1), ('explanation', 1), ('explanations', 1), ('fastest', 1), ('golang-solution', 1), ('java ac solution', 1), ('linear memory', 1), ('linear time', 1), ('math', 1), ('readable', 1), ('ruby', 1), ('short c++ code', 1), ('solution-sharing-python', 1), ('sorted', 1), ('space complexity', 1), ('straight-forward', 1), ('stream', 1), ('swift', 1), ('test-case', 1), ('time complexity', 1), ('two pointers', 1), ('typescript', 1)]"
538,Convert BST to Greater Tree,https://leetcode.com/problems/convert-bst-to-greater-tree,"Given the root of a Binary Search Tree (BST), convert it to a Greater Tree such that every key of the original BST is changed to the original key plus sum of all keys greater than the original key in BST.

As a reminder, a binary search tree is a tree that satisfies these constraints:


	The left subtree of a node contains only nodes with keys less than the node's key.
	The right subtree of a node contains only nodes with keys greater than the node's key.
	Both the left and right subtrees must also be binary search trees.


Note: This question is the same as 1038: https://leetcode.com/problems/binary-search-tree-to-greater-sum-tree/","['tree', 'depth-first-search', 'binary-search-tree', 'recursion']",Medium,2614,144,276671,165960,[],"[('c++', 41), ('java', 26), ('recursion', 24), ('cpp', 21), ('dfs', 21), ('python', 20), ('recursive', 15), ('javascript', 14), ('python 3', 13), ('bst', 11), ('python3', 11), ('easy-understanding', 9), ('inorder traversal', 9), ('c#', 8), ('inorder', 7), ('easy', 6), ('inorder-traversal', 6), ('java-solution', 6), ('cool', 5), ('postorder-traversal', 5), ('cpp solution', 4), ('dfs-in-order', 4), ('explained', 4), ('explanations', 4), ('iterative', 4), ('simple', 4), ('depth first search', 3), ('recurision', 3), ('recusion', 3), ('reverse inorder traversal', 3), ('ruby', 3), ('tree', 3), ('tree traversal', 3), ('tree-traversal', 3), ('binary search tree', 2), ('c', 2), ('c++ code', 2), ('comments-added', 2), ('depth-first-search', 2), ('easy-to-understand', 2), ('easy-undestand', 2), ('fast', 2), ('golang', 2), ('hashmap', 2), ('inorder iterative', 2), ('javascript solution', 2), ('linear time', 2), ('morris-inorder-traversal', 2), ('morris-traversal', 2), ('python3.8', 2), ('reverse inorder', 2), ('reverse-inorder-traversal', 2), ('rust', 2), ('traversal', 2), ('2linesmethod', 1), ('accepted solution', 1), ('accumulation', 1), ('algorithms', 1), ('arraylist', 1), ('avnish', 1), ('backtracking', 1), ('c code', 1), ('c++ recursive solution', 1), ('c++ solution', 1), ('clean code', 1), ('clean-code', 1), ('commented', 1), ('comments added', 1), ('convertbsttogreatertree', 1), ('cplusplus', 1), ('cpp easy', 1), ('cpp easy-understanding', 1), ('cpp-solution', 1), ('detailed', 1), ('dfs simple solution', 1), ('drewbie', 1), ('easily understood', 1), ('easy to understand', 1), ('easysolution', 1), ('explanation', 1), ('fast and simple', 1), ('fold', 1), ('golang-solution', 1), ('graph theory', 1), ('graph traversal', 1), ('immutable', 1), ('implementation', 1), ('in order', 1), ('in-order', 1), ('in-order-dfs', 1), ('in-order-traversal', 1), ('in-place', 1), ('inroder', 1), ('interview', 1), ('iterate', 1), ('iterative-recursive', 1), ('iteratve-recursive', 1), ('java ac solution', 1), ('js', 1), ('js javascript', 1), ('kotlin', 1), ('kotlinvim', 1), ('medium', 1), ('no stack', 1), ('no-global', 1), ('one line', 1), ('one-line', 1), ('one-liner', 1), ('post-order-traversal', 1), ('postorder traversal', 1), ('recurrance', 1), ('recursively', 1), ('redirect21', 1), ('reverse-iterator', 1), ('scala', 1), ('side-effect-free', 1), ('simple clear c++ solution', 1), ('simple solution', 1), ('solution', 1), ('solution c++', 1), ('solution-sharing-cpp', 1), ('solution-sharing-java', 1), ('sum', 1), ('swift', 1), ('thought-process', 1), ('trees', 1), ('typescript', 1), ('video-explained', 1), ('video-explanation', 1)]"
537,Complex Number Multiplication,https://leetcode.com/problems/complex-number-multiplication,"A complex number can be represented as a string on the form ""real+imaginaryi"" where:


	real is the real part and is an integer in the range [-100, 100].
	imaginary is the imaginary part and is an integer in the range [-100, 100].
	i2 == -1.


Given two complex numbers num1 and num2 as strings, return a string of the complex number that represents their multiplications.","['math', 'string']",Medium,300,821,80032,54774,[],"[('c++', 24), ('python', 12), ('cpp', 11), ('easy-to-understand', 10), ('python 3', 10), ('javascript', 7), ('java', 6), ('python3', 6), ('java-solution', 5), ('c', 3), ('golang', 3), ('c#', 2), ('cpp solution', 2), ('easy', 2), ('explanations', 2), ('math', 2), ('simple', 2), ('simple solution', 2), ('0ms runtime', 1), ('1 liner', 1), ('100', 1), ('class', 1), ('clean code', 1), ('comments', 1), ('easy to understand', 1), ('easy-to-follow', 1), ('easy-understanding', 1), ('easy-undestand', 1), ('es6', 1), ('f-string', 1), ('fastest c++ solution', 1), ('functional programming', 1), ('go-solution', 1), ('golang-solution', 1), ('intuitive', 1), ('java ac solution', 1), ('javascript brute force', 1), ('kotlin', 1), ('linear time', 1), ('mathematics', 1), ('object oriented', 1), ('object oriented solution', 1), ('regular expression', 1), ('scala', 1), ('simplest', 1), ('stoi', 1), ('straight-forward', 1), ('string', 1), ('string manipulation', 1), ('string parsing', 1), ('string-operation', 1), ('strings', 1), ('substr', 1), ('substring', 1), ('swift', 1), ('two-lines', 1), ('typescript', 1), ('with explanation', 1)]"
535,Encode and Decode TinyURL,https://leetcode.com/problems/encode-and-decode-tinyurl,"Note: This is a companion problem to the System Design problem: Design TinyURL.

TinyURL is a URL shortening service where you enter a URL such as https://leetcode.com/problems/design-tinyurl and it returns a short URL such as http://tinyurl.com/4e9iAk. Design a class to encode a URL and decode a tiny URL.

There is no restriction on how your encode/decode algorithm should work. You just need to ensure that a URL can be encoded to a tiny URL and the tiny URL can be decoded to the original URL.

Implement the Solution class:


	Solution() Initializes the object of the system.
	String encode(String longUrl) Returns a tiny URL for the given longUrl.
	String decode(String shortUrl) Returns the original long URL for the given shortUrl. It is guaranteed that the given shortUrl was encoded by the same object.","['hash-table', 'math']",Medium,903,1810,174418,143757,[],"[('c++', 26), ('cpp', 19), ('python', 15), ('hashmap', 14), ('java', 14), ('python3', 10), ('python 3', 7), ('easy-understanding', 6), ('javascript', 6), ('random', 6), ('java-solution', 5), ('unordered map', 5), ('c#', 4), ('golang', 4), ('easy-to-understand', 3), ('encodedecodetinyurl', 3), ('go', 3), ('hash', 3), ('map', 3), ('alpha-numeric', 2), ('base64', 2), ('c++11', 2), ('clean code', 2), ('cpp solution', 2), ('dict', 2), ('dictionary c#', 2), ('explained', 2), ('fast and simple', 2), ('hash table', 2), ('hash-function', 2), ('hashcode', 2), ('hashing', 2), ('kotlin', 2), ('simple', 2), ('simple solution', 2), ('space', 2), ('string', 2), ('swift', 2), ('#c++', 1), ('#cpp', 1), ('#easysolution', 1), ('#fasterthan100percent', 1), ('#map', 1), ('algorithms', 1), ('amazon', 1), ('awesome samriddhi', 1), ('base62-encoding', 1), ('basic', 1), ('beginner friendly', 1), ('beginners', 1), ('c', 1), ('c++ code', 1), ('c++ solution', 1), ('compression', 1), ('computer science', 1), ('computer-science', 1), ('decompression', 1), ('dictionaries', 1), ('dictionary', 1), ('directi', 1), ('discussion', 1), ('distributed systems', 1), ('django', 1), ('easiest solution', 1), ('easy', 1), ('easy-code', 1), ('easy-undestand', 1), ('easytounderstand', 1), ('encoding', 1), ('explanation of logic', 1), ('external-memory', 1), ('facebook', 1), ('faster than 95.46', 1), ('fastest solution', 1), ('golang-solution', 1), ('hash function', 1), ('hash map', 1), ('hashlib', 1), ('huffman decoding', 1), ('huffman encoding', 1), ('java ac solution', 1), ('js', 1), ('list', 1), ('logic', 1), ('loop method', 1), ('md5', 1), ('one-liner', 1), ('optimisation', 1), ('performance', 1), ('python2', 1), ('python3.8', 1), ('pythonpython3', 1), ('question-not-clear', 1), ('questionable-test-case', 1), ('random funcation', 1), ('random uuid', 1), ('regular java random', 1), ('ritik', 1), ('ruby', 1), ('rust', 1), ('scalable', 1), ('short', 1), ('simplesolution', 1), ('simplest', 1), ('solution-explaining', 1), ('solution-python', 1), ('solution-sharing-cpp', 1), ('speed', 1), ('stdhash', 1), ('straight-forward', 1), ('straightforward', 1), ('string-operation', 1), ('stupid-question', 1), ('swift5', 1), ('system design', 1), ('time', 1), ('typescript', 1), ('url-shortner', 1), ('very easy to understand', 1), ('video', 1), ('video-explanation', 1)]"
532,K-diff Pairs in an Array,https://leetcode.com/problems/k-diff-pairs-in-an-array,"Given an array of integers nums and an integer k, return the number of unique k-diff pairs in the array.

A k-diff pair is an integer pair (nums[i], nums[j]), where the following are true:


	0 <= i < j < nums.length
	|nums[i] - nums[j]| == k


Notice that |val| denotes the absolute value of val.","['array', 'two-pointers']",Medium,1129,1576,464040,165461,"[""Minimum Absolute Difference in BST""]","[('c++', 39), ('hashmap', 28), ('cpp', 22), ('java', 20), ('python', 20), ('easy-understanding', 15), ('python 3', 15), ('javascript', 14), ('java-solution', 9), ('two-pointers', 8), ('c#', 7), ('cpp solution', 7), ('map', 7), ('python3', 6), ('easy-undestand', 5), ('hashset', 5), ('binary-search', 4), ('clean code', 4), ('counter', 4), ('cpp easy', 4), ('easy-to-understand', 4), ('k-diff pairs', 4), ('set', 4), ('sets', 4), ('swift', 4), ('two pointers', 4), ('two-pointer', 4), ('binary search', 3), ('easy', 3), ('easytounderstand', 3), ('explained', 3), ('fast', 3), ('golang', 3), ('hash table', 3), ('linear time', 3), ('sorting', 3), ('100 speed', 2), ('hash map', 2), ('hash set', 2), ('js', 2), ('optimal', 2), ('pairs', 2), ('php', 2), ('single pass', 2), ('slicing', 2), ('solution-sharing-cpp', 2), ('sort', 2), ('sorted array', 2), ('unordered map', 2), ('unorderedmap', 2), ('#cpp', 1), ('#easy-understanding', 1), ('#efficient', 1), ('#hashmaps', 1), ('#optimized', 1), ('100 memory', 1), ('2 pointers', 1), ('ac solution', 1), ('approach-explained', 1), ('array-sort', 1), ('beats 100 percent', 1), ('beginner friendly', 1), ('c', 1), ('c++ code', 1), ('c++ solution', 1), ('c++11', 1), ('c++14', 1), ('c++17', 1), ('code golf', 1), ('consise', 1), ('cp', 1), ('csharp', 1), ('detailed', 1), ('dict', 1), ('dictionary', 1), ('dictonary', 1), ('easy to understand', 1), ('efficient', 1), ('efficient solution', 1), ('es6', 1), ('explain', 1), ('explaination', 1), ('explanatory comments', 1), ('fast and simple', 1), ('fast-solution', 1), ('frequency count', 1), ('general', 1), ('golang-solution', 1), ('good variable names', 1), ('hash-function', 1), ('hash-map', 1), ('hash-table', 1), ('hashing', 1), ('hashtable', 1), ('i want to get a star', 1), ('java solution', 1), ('javascript solution', 1), ('kdiffpairsinarray', 1), ('linear', 1), ('linear memory', 1), ('linear-time', 1), ('linear-time-space', 1), ('list', 1), ('lookup', 1), ('map-stl', 1), ('o-n', 1), ('on', 1), ('one pass', 1), ('one pass solution', 1), ('optimisation', 1), ('plz post to post ideas', 1), ('pre-process', 1), ('rust', 1), ('self-explanatory', 1), ('sequence', 1), ('series', 1), ('set of pair', 1), ('short code', 1), ('simple clear c++ solution', 1), ('simplesolution', 1), ('sliding window', 1), ('solution-explaining', 1), ('structured code', 1), ('swift5', 1), ('time complexity', 1), ('treemap', 1), ('two pointer', 1), ('two pointer technique', 1), ('unique', 1), ('unordered-map', 1), ('unordered-multiset', 1), ('unordermap', 1), ('video explanation', 1), ('window-sliding', 1)]"
530,Minimum Absolute Difference in BST,https://leetcode.com/problems/minimum-absolute-difference-in-bst,"Given the root of a Binary Search Tree (BST), return the minimum absolute difference between the values of any two different nodes in the tree.",['tree'],Easy,1226,93,203771,112341,"[""K-diff Pairs in an Array""]","[('c++', 26), ('python', 24), ('cpp', 22), ('java', 17), ('dfs', 14), ('inorder traversal', 13), ('javascript', 11), ('python 3', 11), ('inorder-traversal', 10), ('inorder', 8), ('python3', 8), ('recursion', 7), ('recursive', 6), ('cpp solution', 5), ('easy', 4), ('easy-to-understand', 4), ('in-order-traversal', 4), ('java-solution', 4), ('simple', 4), ('bfs', 3), ('binary-search-tree', 3), ('bst', 3), ('clean', 3), ('golang', 3), ('swift', 3), ('beginner friendly', 2), ('c#', 2), ('depth first search', 2), ('dfs-in-order', 2), ('easy to understand', 2), ('easy-understanding', 2), ('explaination', 2), ('go', 2), ('golang-solution', 2), ('inordertraversal', 2), ('js', 2), ('linear time', 2), ('morris-traversal', 2), ('recusion', 2), ('ruby', 2), ('solution', 2), ('stack', 2), ('1ms runtime', 1), ('2 solutions', 1), ('6 lines', 1), ('accepted', 1), ('algorithms', 1), ('avnish', 1), ('binary search tree', 1), ('binary-tree', 1), ('binarysearch', 1), ('c++ code', 1), ('c++ recursive solution', 1), ('c++ solution', 1), ('c++11', 1), ('closure', 1), ('commented', 1), ('comments', 1), ('const space', 1), ('constant space', 1), ('cpp doubt', 1), ('cpp easy', 1), ('depth first traversal', 1), ('dfs solution', 1), ('dfs traversal', 1), ('dfs-topdown', 1), ('easiest', 1), ('easy python bfs iterative', 1), ('easy to read', 1), ('easy undestanding', 1), ('easy-undestand', 1), ('easysolution', 1), ('easytounderstand', 1), ('efficient solution', 1), ('explained', 1), ('explanation with logic', 1), ('fast and simple', 1), ('global', 1), ('go-solution', 1), ('golang solution', 1), ('in-order', 1), ('intutive', 1), ('iteration', 1), ('iterative', 1), ('js javascript', 1), ('level order traversal', 1), ('list', 1), ('min-heap', 1), ('morris', 1), ('morris traversal', 1), ('morris-inorder-traversal', 1), ('mrmagician', 1), ('preorder traversal', 1), ('python bfs', 1), ('python bfs iterative', 1), ('python queue', 1), ('python2', 1), ('queue', 1), ('recursive easy', 1), ('recursively', 1), ('simple python bfs', 1), ('sketch', 1), ('solution-explaining', 1), ('solution-sharing-cpp', 1), ('sorted', 1), ('straight-forward', 1), ('straightforward', 1), ('typescript', 1), ('vector', 1), ('wrong answer', 1)]"
529,Minesweeper,https://leetcode.com/problems/minesweeper,"Let's play the minesweeper game (Wikipedia, online game)!

You are given an m x n char matrix board representing the game board where:


	'M' represents an unrevealed mine,
	'E' represents an unrevealed empty square,
	'B' represents a revealed blank square that has no adjacent mines (i.e., above, below, left, right, and all 4 diagonals),
	digit ('1' to '8') represents how many mines are adjacent to this revealed square, and
	'X' represents a revealed mine.


You are also given an integer array click where click = [clickr, clickc] represents the next click position among all the unrevealed squares ('M' or 'E').

Return the board after revealing this position according to the following rules:


	If a mine 'M' is revealed, then the game is over. You should change it to 'X'.
	If an empty square 'E' with no adjacent mines is revealed, then change it to a revealed blank 'B' and all of its adjacent unrevealed squares should be revealed recursively.
	If an empty square 'E' with at least one adjacent mine is revealed, then change it to a digit ('1' to '8') representing the number of adjacent mines.
	Return the board when no more squares will be revealed.","['depth-first-search', 'breadth-first-search']",Medium,874,650,135244,83327,[],"[('dfs', 30), ('bfs', 26), ('python', 16), ('c++', 12), ('java', 11), ('python 3', 9), ('cpp', 8), ('python3', 8), ('javascript', 7), ('easy-understanding', 5), ('java-solution', 5), ('c#', 4), ('recursion', 4), ('breadth first search', 3), ('cpp solution', 3), ('dfs simple solution', 3), ('js', 3), ('recursive', 3), ('simple', 3), ('c++ easy to understand', 2), ('comments', 2), ('comments-added', 2), ('depth first search', 2), ('dfs solution', 2), ('easy-to-understand', 2), ('intuitive', 2), ('queue', 2), ('recursive solution', 2), ('#dfs', 1), ('#javascript', 1), ('#python', 1), ('#queue', 1), ('#recursive', 1), ('1ms', 1), ('beats 100', 1), ('c++ bfs 88ms', 1), ('c++ code', 1), ('concise-solution', 1), ('depth-first-search', 1), ('dfs recursive', 1), ('dfs-bfs', 1), ('dfs-iterative', 1), ('easy', 1), ('easy to understand', 1), ('easy-undestand', 1), ('easytounderstand', 1), ('explanations', 1), ('flood fill', 1), ('graph', 1), ('heavily commented', 1), ('iterative', 1), ('java ac solution', 1), ('java solution sharing', 1), ('javascript solution', 1), ('python bfs', 1), ('recursive-dfs', 1), ('recusion', 1), ('straight forward', 1), ('straight-forward', 1), ('swift', 1)]"
1721,Swapping Nodes in a Linked List,https://leetcode.com/problems/swapping-nodes-in-a-linked-list,"You are given the head of a linked list, and an integer k.

Return the head of the linked list after swapping the values of the kth node from the beginning and the kth node from the end (the list is 1-indexed).",['linked-list'],Medium,521,37,70852,47669,"[""Remove Nth Node From End of List"", ""Swap Nodes in Pairs"", ""Reverse Nodes in k-Group""]","[('c++', 47), ('java', 32), ('easy-understanding', 28), ('python', 26), ('cpp', 23), ('linked-list', 21), ('easy', 14), ('python3', 13), ('python 3', 12), ('linkedlists', 11), ('javascript', 10), ('c#', 8), ('simple', 8), ('cpp solution', 7), ('one pass solution', 7), ('golang', 6), ('java-solution', 6), ('swapping nodes', 6), ('comments-added', 5), ('easytounderstand', 5), ('explained', 5), ('linear time', 5), ('two-pointers', 5), ('clean code', 4), ('easy-to-understand', 4), ('explanation of logic', 4), ('fast and simple', 4), ('go', 4), ('javascript solution', 4), ('linked list', 4), ('linkedlist', 4), ('array', 3), ('explanation', 3), ('recursion', 3), ('swap', 3), ('#linkedlist', 2), ('2 pointers', 2), ('all approaches', 2), ('arraylist', 2), ('beginner friendly', 2), ('c', 2), ('c code', 2), ('constant space', 2), ('go-solution', 2), ('golang-solution', 2), ('kotlin', 2), ('one-pass', 2), ('python3.8', 2), ('ruby', 2), ('single pass', 2), ('swappingnodesinlinkedlist', 2), ('swift', 2), ('two pointers', 2), ('#c', 1), ('#c++', 1), ('#cpp', 1), ('#easy-understanding', 1), ('#fasterthan100percent', 1), ('#lesscode', 1), ('#python', 1), ('#python 3', 1), ('#singleiteration', 1), ('1 pass', 1), ('100 faster runtime', 1), ('100 memory', 1), ('100 space', 1), ('100 speed', 1), ('2 passes', 1), ('5ms', 1), ('awesome samriddhi', 1), ('begineer', 1), ('c language', 1), ('c#-solution', 1), ('c++ ac', 1), ('c++ solution', 1), ('c++11', 1), ('challenge', 1), ('comments added', 1), ('constant memory', 1), ('constant-space', 1), ('descriptive', 1), ('easy understanding', 1), ('efficient', 1), ('efficient solution', 1), ('error', 1), ('explaination', 1), ('explained solution', 1), ('explanations', 1), ('extra-space', 1), ('fast', 1), ('fast slow pointer', 1), ('fast-solution', 1), ('faster', 1), ('fastest', 1), ('github', 1), ('golang solution', 1), ('hashmap', 1), ('high-low-pointers', 1), ('java solution', 1), ('java-8', 1), ('js', 1), ('leetcode 1721', 1), ('linked list traversal', 1), ('linked-lists', 1), ('list', 1), ('list traversal', 1), ('listnode', 1), ('listnodes', 1), ('logic explained', 1), ('optimisation', 1), ('performance', 1), ('pointer approach', 1), ('python3.9', 1), ('pythonic', 1), ('pythonsolution', 1), ('question', 1), ('rajawatbanna', 1), ('ritik', 1), ('rust', 1), ('short', 1), ('single-pass', 1), ('slide window', 1), ('slow fast pointer', 1), ('slowfast pointers', 1), ('solution', 1), ('stack', 1), ('stl', 1), ('swap node value in pairs', 1), ('swaping', 1), ('swapping', 1), ('three pointers', 1), ('two pointer approach', 1), ('two-pointer', 1), ('vector', 1), ('vectors', 1), ('video-explanation', 1), ('window slide', 1)]"
526,Beautiful Arrangement,https://leetcode.com/problems/beautiful-arrangement,"Suppose you have n integers labeled 1 through n. A permutation of those n integers perm (1-indexed) is considered a beautiful arrangement if for every i (1 <= i <= n), either of the following is true:


	perm[i] is divisible by i.
	i is divisible by perm[i].


Given an integer n, return the number of the beautiful arrangements that you can construct.","['backtracking', 'depth-first-search']",Medium,1269,218,146163,90901,"[""Beautiful Arrangement II""]","[('backtracking', 46), ('c++', 18), ('java', 13), ('cpp', 12), ('dfs', 12), ('python', 10), ('dp', 9), ('javascript', 8), ('python 3', 8), ('back tracking', 5), ('c#', 5), ('cpp solution', 5), ('dynamic programming', 4), ('explained', 4), ('golang', 4), ('java-solution', 4), ('python3', 4), ('simple', 4), ('bit masking', 3), ('memoization', 3), ('permutations', 3), ('recursion', 3), ('bit manipulation', 2), ('bitmask', 2), ('bitmasking', 2), ('combinatorics', 2), ('depth-first-search', 2), ('dp with bitmask', 2), ('easy-understanding', 2), ('explanation', 2), ('recursive', 2), ('scala', 2), ('#526', 1), ('backtacking', 1), ('backtracing', 1), ('backtrack', 1), ('beautiful arrangement', 1), ('beautifularrangement', 1), ('begineer', 1), ('bfs', 1), ('bit hacks', 1), ('bitwise operator', 1), ('bitwise operators', 1), ('bottom up', 1), ('brute force', 1), ('c++ solution', 1), ('closed form', 1), ('combination', 1), ('comments', 1), ('cpp easy', 1), ('depth first search', 1), ('easy', 1), ('easy-to-understand', 1), ('explanations', 1), ('fast and simple', 1), ('fp', 1), ('golang-solution', 1), ('inefficient', 1), ('javascript solution', 1), ('linkedhashmap', 1), ('math', 1), ('modern', 1), ('optimal', 1), ('proof', 1), ('question', 1), ('recursive solution', 1), ('ruby', 1), ('rust', 1), ('solution-explaining', 1), ('solution-sharing-cpp', 1), ('straight-forward', 1), ('swift', 1), ('template', 1), ('top down dp', 1), ('typescript', 1)]"
525,Contiguous Array,https://leetcode.com/problems/contiguous-array,"Given a binary array nums, return the maximum length of a contiguous subarray with an equal number of 0 and 1.",['hash-table'],Medium,2784,139,427568,186692,"[""Maximum Size Subarray Sum Equals k""]","[('hashmap', 32), ('c++', 21), ('java', 19), ('cpp', 17), ('python 3', 17), ('python', 16), ('hash table', 12), ('javascript', 9), ('map', 7), ('python3', 6), ('cpp solution', 5), ('dictionary', 5), ('easy', 5), ('easy-understanding', 5), ('easy-undestand', 5), ('prefix sum', 5), ('linear time', 4), ('c#', 3), ('dict', 3), ('explained', 3), ('hashtable', 3), ('java-solution', 3), ('solution', 3), ('accumulate', 2), ('contiguous array', 2), ('dictionary c#', 2), ('easy-solition', 2), ('explaination', 2), ('faster', 2), ('hash map', 2), ('hash-table', 2), ('hashing', 2), ('javascript solution', 2), ('linear', 2), ('presum', 2), ('scala', 2), ('simple clear c++ solution', 2), ('simple solution', 2), ('solution-sharing-cpp', 2), ('swift', 2), ('array', 1), ('basic approach', 1), ('binary search', 1), ('branch prediction', 1), ('brute force', 1), ('c# dp', 1), ('c++11', 1), ('clear-understanding', 1), ('commented', 1), ('contiguous-array', 1), ('contiguousarray', 1), ('csharp', 1), ('cumulative sum', 1), ('defaultdict', 1), ('dictionaries', 1), ('dynamic programming', 1), ('easiest solution', 1), ('easy to read', 1), ('easy to understand', 1), ('easy-solution', 1), ('easy-to-understand', 1), ('easy-understand', 1), ('easysolution', 1), ('easytounderstand', 1), ('expalanation', 1), ('explanation', 1), ('explanation with code', 1), ('explanations', 1), ('functional programming', 1), ('golang', 1), ('invert prefix sum', 1), ('iterative', 1), ('java ac solution', 1), ('linear-space', 1), ('map-stl', 1), ('maps', 1), ('one pass', 1), ('partial-sum', 1), ('php', 1), ('prefix-sum', 1), ('prefixsum', 1), ('python deque', 1), ('python2', 1), ('ruby', 1), ('rust', 1), ('short', 1), ('short code', 1), ('short solution', 1), ('simple', 1), ('single pass', 1), ('solution-explaining', 1), ('solution-sharing-java', 1), ('solved', 1), ('the cumulative sum', 1), ('thinking process diagrams', 1), ('understandable', 1), ('unordered map', 1), ('vedio', 1), ('visualization', 1)]"
524,Longest Word in Dictionary through Deleting,https://leetcode.com/problems/longest-word-in-dictionary-through-deleting,"Given a string s and a string array dictionary, return the longest string in the dictionary that can be formed by deleting some of the given string characters. If there is more than one possible result, return the longest word with the smallest lexicographical order. If there is no possible result, return the empty string.","['two-pointers', 'sort']",Medium,1004,296,208681,104645,"[""Longest Word in Dictionary""]","[('c++', 24), ('python', 19), ('java', 17), ('cpp', 15), ('two-pointers', 15), ('javascript', 11), ('python3', 9), ('sort', 7), ('c#', 6), ('sorting', 5), ('string', 5), ('brute force', 4), ('golang', 4), ('two pointers', 4), ('easy', 3), ('easy-understanding', 3), ('java-solution', 3), ('python 3', 3), ('rust', 3), ('cpp solution', 2), ('easy-to-understand', 2), ('iterator', 2), ('linear time', 2), ('ruby', 2), ('simple solution', 2), ('strings', 2), ('swift', 2), ('answer', 1), ('bfs', 1), ('binary-search', 1), ('c', 1), ('c code', 1), ('c++ code', 1), ('c++ solution', 1), ('char compare', 1), ('contest', 1), ('dfs', 1), ('discuss', 1), ('doubts', 1), ('easy-undestand', 1), ('explained', 1), ('fail', 1), ('fastest', 1), ('follow up', 1), ('fun', 1), ('golang-solution', 1), ('greedy', 1), ('hashing', 1), ('hashmap', 1), ('interviews', 1), ('iterative approach', 1), ('java ac solution', 1), ('javascript solution', 1), ('kotlin', 1), ('large-input', 1), ('lcs', 1), ('maxwordindictthrudeletion', 1), ('no sort', 1), ('no sorting', 1), ('one-liner', 1), ('optimisation', 1), ('performance', 1), ('priority-queue', 1), ('readable', 1), ('redirect21', 1), ('search', 1), ('short', 1), ('short c++ code', 1), ('simple', 1), ('single pass', 1), ('solution', 1), ('solution-python', 1), ('solution-sharing-python', 1), ('sorted array', 1), ('sortings', 1), ('string-operation', 1), ('sub sequence', 1), ('subsequence', 1), ('test-cases', 1), ('time complexity', 1), ('trie', 1), ('tries', 1), ('two-pointer', 1), ('typescript', 1), ('video-explanation', 1), ('why itsnt working', 1), ('zea7ot', 1)]"
523,Continuous Subarray Sum,https://leetcode.com/problems/continuous-subarray-sum,"Given an integer array nums and an integer k, return true if nums has a continuous subarray of size at least two whose elements sum up to a multiple of k, or false otherwise.

An integer x is a multiple of k if there exists an integer n such that x = n * k. 0 is always a multiple of k.","['math', 'dynamic-programming']",Medium,135,28,758477,189218,"[""Subarray Sum Equals K""]","[('c++', 14), ('cpp', 13), ('python', 11), ('hashmap', 10), ('python 3', 10), ('dynamic programming', 8), ('java', 7), ('javascript', 6), ('hash table', 5), ('python3', 4), ('c#', 3), ('dynamic-programming', 3), ('prefix sum', 3), ('accumulate', 2), ('cpp solution', 2), ('easy-understanding', 2), ('easy-undestand', 2), ('explanation', 2), ('golang', 2), ('golang-solution', 2), ('hashset', 2), ('javascript solution', 2), ('linear time', 2), ('math', 2), ('swift', 2), ('#2pointer', 1), ('#helpneeded', 1), ('#java', 1), ('#mistake', 1), ('#solution', 1), ('100 speed', 1), ('array greedy', 1), ('brute force', 1), ('bruteforce', 1), ('c', 1), ('contiguous subarray sum', 1), ('csharp', 1), ('dictionary', 1), ('dictonary', 1), ('easy-to-understand', 1), ('easytounderstand', 1), ('hashamp', 1), ('java ac solution', 1), ('java-solution', 1), ('kotlin', 1), ('linear-time', 1), ('matrix', 1), ('memory efficient', 1), ('missing-edge-case', 1), ('missing-test-case', 1), ('modulo', 1), ('modulo-arithmatic', 1), ('on2', 1), ('picture explanation', 1), ('prefix-sum', 1), ('presum', 1), ('python2', 1), ('raviinroorkee', 1), ('ruby', 1), ('sets', 1), ('simple solution', 1), ('solution-sharing-cpp', 1), ('subarray sum equals k', 1), ('top down', 1), ('two passes', 1), ('unordered map', 1)]"
522,Longest Uncommon Subsequence II,https://leetcode.com/problems/longest-uncommon-subsequence-ii,"Given an array of strings strs, return the length of the longest uncommon subsequence between them. If the longest uncommon subsequence does not exist, return -1.

An uncommon subsequence between an array of strings is a string that is a subsequence of one string but not the others.

A subsequence of a string s is a string that can be obtained after deleting any number of characters from s.


	For example, ""abc"" is a subsequence of ""aebdc"" because you can delete the underlined characters in ""aebdc"" to get ""abc"". Other subsequences of ""aebdc"" include ""aebdc"", ""aeb"", and """" (empty string).",['string'],Medium,220,664,72271,24767,"[""Longest Uncommon Subsequence I""]","[('python', 5), ('python3', 5), ('c++', 4), ('cpp', 2), ('python 3', 2), ('brute force', 1), ('brute-force', 1), ('c#', 1), ('commentary', 1), ('comments', 1), ('counter', 1), ('dfs', 1), ('easy-to-understand', 1), ('easy-understanding', 1), ('explaination', 1), ('golang', 1), ('greedy', 1), ('hash', 1), ('java', 1), ('java-solution', 1), ('javascript', 1), ('short c++ code', 1), ('solution-python', 1), ('solution-sharing-cpp', 1), ('sorted array', 1), ('string', 1)]"
521,Longest Uncommon Subsequence I,https://leetcode.com/problems/longest-uncommon-subsequence-i,"Given two strings a and b, return the length of the longest uncommon subsequence between a and b. If the longest uncommon subsequence does not exist, return -1.

An uncommon subsequence between two strings is a string that is a subsequence of one but not the other.

A subsequence of a string s is a string that can be obtained after deleting any number of characters from s.


	For example, ""abc"" is a subsequence of ""aebdc"" because you can delete the underlined characters in ""aebdc"" to get ""abc"". Other subsequences of ""aebdc"" include ""aebdc"", ""aeb"", and """" (empty string).","['string', 'brainteaser']",Easy,405,4748,119684,70740,"[""Longest Uncommon Subsequence II""]","[('c++', 14), ('cpp', 8), ('python', 6), ('python 3', 6), ('python3', 6), ('javascript', 5), ('easy', 4), ('java', 4), ('c#', 3), ('one-liner', 3), ('simple', 3), ('cpp solution', 2), ('explanations', 2), ('fast-solution', 2), ('java-solution', 2), ('ruby', 2), ('1 line', 1), ('1-liner', 1), ('4 lines', 1), ('c', 1), ('c++11', 1), ('cpp easy', 1), ('easy to understand', 1), ('easy-understanding', 1), ('easytounderstand', 1), ('explanation', 1), ('ez solution', 1), ('fast', 1), ('fastest', 1), ('golang', 1), ('image', 1), ('java solution', 1), ('javascript solution', 1), ('lcs', 1), ('logic', 1), ('math', 1), ('max', 1), ('one line', 1), ('oneline', 1), ('php', 1), ('php solution', 1), ('problem understanding', 1), ('rust', 1), ('simple-solution', 1), ('string', 1), ('swift', 1), ('tricky', 1), ('unit-test', 1)]"
520,Detect Capital,https://leetcode.com/problems/detect-capital,"We define the usage of capitals in a word to be right when one of the following cases holds:


	All letters in this word are capitals, like ""USA"".
	All letters in this word are not capitals, like ""leetcode"".
	Only the first letter in this word is capital, like ""Google"".


Given a string word, return true if the usage of capitals in it is right.",['string'],Easy,816,292,354219,191902,[],"[('c++', 62), ('java', 48), ('python', 43), ('cpp', 38), ('python 3', 31), ('javascript', 27), ('python3', 26), ('easy-understanding', 21), ('cpp solution', 16), ('java-solution', 14), ('easy', 11), ('simple solution', 9), ('c', 8), ('easy-to-understand', 8), ('simple', 8), ('string', 8), ('c#', 7), ('easytounderstand', 7), ('golang', 6), ('one-liner', 5), ('beginner friendly', 4), ('cpp easy', 4), ('0ms', 3), ('ascii', 3), ('c code', 3), ('c++ solution', 3), ('count', 3), ('detect capital', 3), ('explained', 3), ('fast and simple', 3), ('fast-solution', 3), ('lowercase', 3), ('rust', 3), ('string-operation', 3), ('100 beat', 2), ('c++ code', 2), ('capital letter', 2), ('commented', 2), ('csharp', 2), ('easy to understand', 2), ('easy understand', 2), ('easy understanding', 2), ('easy-understand', 2), ('if-else', 2), ('islower', 2), ('isupper', 2), ('java solution', 2), ('javascript solution', 2), ('one line', 2), ('oneliner', 2), ('regex', 2), ('regular-expression', 2), ('scala', 2), ('self-explanatory', 2), ('simple clear c++ solution', 2), ('swift', 2), ('uppercase', 2), ('#javascript', 1), ('#ruby', 1), ('1 line', 1), ('100 faster', 1), ('100 space', 1), ('100 speed', 1), ('1ms', 1), ('2 only one capital', 1), ('3line', 1), ('adhoc', 1), ('algorithm-explained', 1), ('animation', 1), ('array functions', 1), ('beginners', 1), ('best-solution-ever', 1), ('big o of n', 1), ('bit-manipulation', 1), ('bool', 1), ('boolean', 1), ('brute force', 1), ('built-in-function', 1), ('c++-easy', 1), ('capital', 1), ('clean', 1), ('clean code', 1), ('code', 1), ('comprehensive', 1), ('concise-solution', 1), ('constant-space', 1), ('cpp-solution', 1), ('description', 1), ('dfa', 1), ('east-to-understand', 1), ('easy to read', 1), ('easy-undestand', 1), ('efficient', 1), ('explaination', 1), ('explanation of logic', 1), ('explanations', 1), ('faster-than-99', 1), ('fastest', 1), ('flag', 1), ('for-loop', 1), ('fsm', 1), ('functional programming', 1), ('github', 1), ('go', 1), ('go-solution', 1), ('golang-solution', 1), ('hardtounderstand', 1), ('haskell', 1), ('helper', 1), ('implementation', 1), ('intuitive', 1), ('iscapital', 1), ('iterative', 1), ('java ac solution', 1), ('java solution sharing', 1), ('javasacript', 1), ('kotlin', 1), ('lambda function', 1), ('linear time', 1), ('linear-time', 1), ('linq', 1), ('list comprehension', 1), ('logical thinking', 1), ('loops', 1), ('math', 1), ('modular', 1), ('naive approach', 1), ('one-line', 1), ('precode', 1), ('python2', 1), ('python3.8', 1), ('regexp', 1), ('ruby', 1), ('simpe', 1), ('simple-solution', 1), ('simplest', 1), ('solution', 1), ('solution-explaining', 1), ('solution-sharing-cpp', 1), ('state-machine', 1), ('stl', 1), ('the first', 1), ('toc', 1), ('two-pointers', 1), ('typescript', 1), ('unit-test', 1), ('valid word', 1), ('video', 1), ('video explanation', 1), ('video solution', 1), ('video-explanation', 1), ('without inbuild function', 1)]"
518,Coin Change 2,https://leetcode.com/problems/coin-change-2,"You are given an integer array coins representing coins of different denominations and an integer amount representing a total amount of money.

Return the number of combinations that make up that amount. If that amount of money cannot be made up by any combination of the coins, return -1.

You may assume that you have an infinite number of each kind of coin.

The answer is guaranteed to fit into a signed 32-bit integer.",[],Medium,3065,79,363149,189733,[],"[('dynamic programming', 76), ('dp', 30), ('c++', 25), ('java', 21), ('cpp', 17), ('memoization', 17), ('python', 13), ('javascript', 10), ('python 3', 10), ('java-solution', 9), ('knapsack', 9), ('python3', 8), ('recursion', 8), ('dynamic-programming', 7), ('tabulation', 6), ('coin-change', 5), ('coin-change 2', 5), ('cpp solution', 5), ('dp-techqique', 4), ('backtracking', 3), ('c#', 3), ('c++ code', 3), ('easy-understanding', 3), ('simple solution', 3), ('top down dp', 3), ('unbounded knapsack', 3), ('bottom up', 2), ('bottom-up', 2), ('bottom-up-algorithm', 2), ('dfs', 2), ('easiest', 2), ('easy', 2), ('easy-to-understand', 2), ('iterative', 2), ('javascript solution', 2), ('ruby', 2), ('rust', 2), ('simple', 2), ('solution', 2), ('swift', 2), ('top-down dp', 2), ('typescript', 2), ('video-explanation', 2), ('#c++', 1), ('#cpp', 1), ('#dp', 1), ('accepted', 1), ('awesome samriddhi', 1), ('beat 99.8', 1), ('bottom up dp', 1), ('c code', 1), ('c++ dp', 1), ('c++ dynamic programming', 1), ('c++ solution', 1), ('c++11', 1), ('clean', 1), ('coin change', 1), ('coin change problem', 1), ('combination', 1), ('comments-added', 1), ('cpp dp', 1), ('cpp easy', 1), ('csharp', 1), ('dfs with memo', 1), ('dfs-bfs', 1), ('documented', 1), ('doubt', 1), ('dp-python', 1), ('dynamic programmin', 1), ('dynamic typing', 1), ('easiest solution', 1), ('easy-understand', 1), ('easytounderstand', 1), ('explained', 1), ('facebook', 1), ('fast', 1), ('give stars and subscribe', 1), ('go-solution', 1), ('golang', 1), ('golang-solution', 1), ('ios', 1), ('linear-space', 1), ('loop', 1), ('math', 1), ('memoized', 1), ('memoziation', 1), ('optimization', 1), ('optimized', 1), ('problem analysis', 1), ('reccursive', 1), ('recurision', 1), ('recursive', 1), ('recursive bottom up dp', 1), ('ritik', 1), ('scala', 1), ('simple clear c++ solution', 1), ('space optimized', 1), ('top down', 1), ('top down approach', 1), ('top-down', 1), ('unbounded-knapsack', 1), ('video', 1), ('video explanation', 1), ('visualization', 1), ('well-commented', 1)]"
517,Super Washing Machines,https://leetcode.com/problems/super-washing-machines,"You have n super washing machines on a line. Initially, each washing machine has some dresses or is empty.

For each move, you could choose any m (1 <= m <= n) washing machines, and pass one dress of each washing machine to one of its adjacent washing machines at the same time.

Given an integer array machines representing the number of dresses in each washing machine from left to right on the line, return the minimum number of moves to make all the washing machines have the same number of dresses. If it is not possible to do it, return -1.","['math', 'dynamic-programming']",Hard,419,163,49009,18957,[],"[('c++', 2), ('cpp', 2), ('array', 1), ('c#', 1), ('constant space', 1), ('cpp solution', 1), ('dynamic programming', 1), ('dynamic-programming', 1), ('golang', 1), ('greedy', 1), ('java', 1), ('javascript', 1), ('linear time', 1), ('memory optimized', 1), ('proof', 1), ('scala', 1), ('solution-sharing-cpp', 1), ('super washing machines', 1)]"
516,Longest Palindromic Subsequence,https://leetcode.com/problems/longest-palindromic-subsequence,"Given a string s, find the longest palindromic subsequence's length in s.

A subsequence is a sequence that can be derived from another sequence by deleting some or no elements without changing the order of the remaining elements.",['dynamic-programming'],Medium,3059,217,299222,167480,"[""Longest Palindromic Substring"", ""Palindromic Substrings"", ""Count Different Palindromic Subsequences"", ""Longest Common Subsequence"", ""Longest Palindromic Subsequence II"", ""Maximize Palindrome Length From Subsequences""]","[('dynamic programming', 72), ('c++', 48), ('dp', 39), ('cpp', 25), ('java', 24), ('python', 21), ('lcs', 17), ('memoization', 11), ('python 3', 11), ('recursion', 9), ('javascript', 8), ('dynamic-programming', 7), ('cpp solution', 6), ('easy', 6), ('python3', 6), ('bottomup', 5), ('easy-understanding', 5), ('lps', 5), ('tabulation', 5), ('explained', 4), ('java-solution', 4), ('c#', 3), ('easy-to-understand', 3), ('easy-undestand', 3), ('recursive', 3), ('2d-array', 2), ('bottom up', 2), ('bottom-up-algorithm', 2), ('c++ code', 2), ('dfs', 2), ('dp-programming', 2), ('easytounderstand', 2), ('js', 2), ('optimal', 2), ('palindrome', 2), ('solution-explaining', 2), ('solution-sharing-cpp', 2), ('strings', 2), ('substring', 2), ('top down', 2), ('top down dp', 2), ('#516', 1), ('#dp', 1), ('#easy-understand', 1), ('#java', 1), ('awesome samriddhi', 1), ('bfs', 1), ('bottom up dp', 1), ('bottom-up', 1), ('bottoms-up', 1), ('c', 1), ('c++ dynamic programming', 1), ('c++14', 1), ('clean code', 1), ('clearly', 1), ('concise', 1), ('concise-solution', 1), ('confusing', 1), ('cplusplus', 1), ('cpp easy', 1), ('csharp', 1), ('dfs-topdown', 1), ('dp bottom up', 1), ('dp python', 1), ('dp-techqique', 1), ('dynamicprogramming', 1), ('easiest', 1), ('easy sloution', 1), ('easy to understand', 1), ('easy-understand', 1), ('explaination', 1), ('explanation', 1), ('explanation of logic', 1), ('fast', 1), ('fastest', 1), ('gap-method', 1), ('gkt', 1), ('golang', 1), ('intuitive', 1), ('iteration', 1), ('iterative', 1), ('izaac', 1), ('lcp', 1), ('linear memory', 1), ('linear space', 1), ('linear-space', 1), ('longest common sequence', 1), ('longest palindrome', 1), ('longest-palindrome-substr', 1), ('memorization', 1), ('memory-limit-exceeded', 1), ('pythonic', 1), ('rajat', 1), ('rajawatbanna', 1), ('recursion palindrome', 1), ('repeated-substring-pattern', 1), ('reverse', 1), ('ritik', 1), ('ruby', 1), ('scala', 1), ('simple', 1), ('simple clear c++ solution', 1), ('solution', 1), ('straight-forward', 1), ('subsequence', 1), ('swift', 1), ('tabular', 1), ('top down approach', 1), ('top-down dp', 1), ('topdown', 1)]"
515,Find Largest Value in Each Tree Row,https://leetcode.com/problems/find-largest-value-in-each-tree-row,"Given the root of a binary tree, return an array of the largest value in each row of the tree (0-indexed).","['tree', 'depth-first-search', 'breadth-first-search']",Medium,1305,72,215815,134859,[],"[('bfs', 92), ('c++', 43), ('java', 35), ('level-order-traversal', 29), ('python', 27), ('cpp', 25), ('queue', 23), ('dfs', 21), ('javascript', 17), ('python3', 17), ('python 3', 15), ('cpp solution', 8), ('iterative', 7), ('java-solution', 7), ('c#', 6), ('level order traversal', 6), ('simple solution', 6), ('javascript solution', 5), ('bfs simple solution', 4), ('golang-solution', 4), ('js', 4), ('recursion', 4), ('bfs java', 3), ('breadth first search', 3), ('cpp easy', 3), ('dfs simple solution', 3), ('easy', 3), ('easy-to-understand', 3), ('easy-understanding', 3), ('easytounderstand', 3), ('golang', 3), ('recursive', 3), ('swift', 3), ('bfs python', 2), ('breadth-first-search', 2), ('comments', 2), ('easy-undestand', 2), ('intuitive', 2), ('java solution', 2), ('simple', 2), ('stack', 2), ('tree-traversal', 2), ('typescript', 2), ('0ms', 1), ('10 lines', 1), ('arraylist', 1), ('beats 100', 1), ('beginner friendly', 1), ('binary tree', 1), ('binary-tree', 1), ('breadth first traversal', 1), ('breath first search', 1), ('c++ bfs', 1), ('c++ code', 1), ('c++ iterative sol', 1), ('clean code', 1), ('commented', 1), ('depth first search', 1), ('deque', 1), ('dfs recursive', 1), ('dfs solution', 1), ('dfs-in-order', 1), ('easy sloution', 1), ('easy to read', 1), ('easy to understand', 1), ('easy-implementation', 1), ('easy-peasy', 1), ('easy-to-understad', 1), ('easysolution', 1), ('explained', 1), ('go-solution', 1), ('iterative way', 1), ('iteratively', 1), ('itereative', 1), ('java ac solution', 1), ('java solution sharing', 1), ('js javascript', 1), ('klogn', 1), ('kotlin', 1), ('kotlinvim', 1), ('largestvalueineachrow', 1), ('level', 1), ('level order', 1), ('linear time', 1), ('morris-preorder-traversal', 1), ('morris-traversal', 1), ('none-recursion', 1), ('optimal', 1), ('postorder-traversal', 1), ('preorder traversal', 1), ('priority queue', 1), ('priorityqueue', 1), ('python2', 1), ('pythonpython3', 1), ('rajat', 1), ('recursive solution', 1), ('recusion', 1), ('rust', 1), ('solution', 1), ('solution-explaining', 1), ('solution-sharing-cpp', 1), ('solution-sharing-java', 1), ('stacks', 1), ('straight-forward', 1), ('swift5', 1), ('traversal tree', 1), ('tree', 1), ('video', 1), ('youtube', 1)]"
514,Freedom Trail,https://leetcode.com/problems/freedom-trail,"In the video game Fallout 4, the quest ""Road to Freedom"" requires players to reach a metal dial called the ""Freedom Trail Ring"" and use the dial to spell a specific keyword to open the door.

Given a string ring that represents the code engraved on the outer ring and another string key that represents the keyword that needs to be spelled, return the minimum number of steps to spell all the characters in the keyword.

Initially, the first character of the ring is aligned at the ""12:00"" direction. You should spell all the characters in key one by one by rotating ring clockwise or anticlockwise to make each character of the string key aligned at the ""12:00"" direction and then by pressing the center button.

At the stage of rotating the ring to spell the key character key[i]:


	You can rotate the ring clockwise or anticlockwise by one place, which counts as one step. The final purpose of the rotation is to align one of ring's characters at the ""12:00"" direction, where this character must equal key[i].
	If the character key[i] has been aligned at the ""12:00"" direction, press the center button to spell, which also counts as one step. After the pressing, you could begin to spell the next character in the key (next stage). Otherwise, you have finished all the spelling.","['divide-and-conquer', 'dynamic-programming', 'depth-first-search']",Hard,535,27,50142,22584,[],"[('dynamic programming', 5), ('memoization', 4), ('c++', 3), ('java', 3), ('c#', 2), ('cpp', 2), ('bfs', 1), ('comments', 1), ('cpp solution', 1), ('dfs', 1), ('dfs with memo', 1), ('dp-programming', 1), ('dynamic-programming', 1), ('easy', 1), ('easy-to-understand', 1), ('fastest', 1), ('freedomtrail', 1), ('graph', 1), ('hashmap', 1), ('heap', 1), ('photo', 1), ('priority queue', 1), ('python', 1), ('ruby', 1), ('rust', 1), ('swift', 1), ('tle cases', 1), ('treemap', 1)]"
513,Find Bottom Left Tree Value,https://leetcode.com/problems/find-bottom-left-tree-value,"Given the root of a binary tree, return the leftmost value in the last row of the tree.","['tree', 'depth-first-search', 'breadth-first-search']",Medium,1324,174,206898,130192,[],"[('bfs', 58), ('c++', 40), ('java', 25), ('level-order-traversal', 25), ('python', 22), ('cpp', 21), ('dfs', 19), ('python 3', 15), ('javascript', 14), ('python3', 13), ('queue', 13), ('cpp solution', 11), ('recursion', 11), ('java-solution', 9), ('easy-understanding', 7), ('breadth first search', 6), ('c#', 6), ('recursive', 6), ('easy-undestand', 5), ('level order traversal', 5), ('simple solution', 5), ('dfs simple solution', 4), ('easy', 4), ('easy-to-understand', 4), ('tree-traversal', 4), ('c++ code', 3), ('dfs-tree', 3), ('ruby', 3), ('simple', 3), ('tree', 3), ('breadth first traversal', 2), ('comments', 2), ('cpp easy', 2), ('depth first search', 2), ('deque', 2), ('dfs recursive', 2), ('easy understanding', 2), ('explained', 2), ('iterative', 2), ('level-order', 2), ('pair', 2), ('pre-order', 2), ('readable', 2), ('recusion', 2), ('simple clear c++ solution', 2), ('swift', 2), ('trees', 2), ('#bfs', 1), ('0ms', 1), ('12ms', 1), ('ac solution', 1), ('beats 100', 1), ('beginners level', 1), ('bfs java', 1), ('bfs simple solution', 1), ('bfs-java', 1), ('binary tree', 1), ('binary-tree', 1), ('breadth-first', 1), ('breath first search', 1), ('c++ dynamic programming', 1), ('c++ iterative sol', 1), ('c++ recursion', 1), ('c++ simple', 1), ('cpp eas', 1), ('cpp with explanation', 1), ('cpp-solution', 1), ('csharp', 1), ('depth first traversal', 1), ('depth-first-search', 1), ('dfs solution', 1), ('dfs traversal', 1), ('dfs-bfs', 1), ('dfs-pre-order', 1), ('dsf', 1), ('easy to understand', 1), ('easy undestanding', 1), ('easy-peasy', 1), ('easysolution', 1), ('easytounderstand', 1), ('explaination', 1), ('explanation', 1), ('explanation of logic', 1), ('fast and simple', 1), ('go lang', 1), ('golang', 1), ('hash table', 1), ('inorder', 1), ('inorder traversal', 1), ('intuitive', 1), ('iteration', 1), ('iterative way', 1), ('java ac solution', 1), ('java solution', 1), ('java solution sharing', 1), ('javascript solution', 1), ('js', 1), ('last level', 1), ('left view', 1), ('level order', 1), ('linear time', 1), ('linked-list', 1), ('naive solution', 1), ('one-pass', 1), ('postorder-traversal', 1), ('preorder traversal', 1), ('preorder-traversal', 1), ('python 2', 1), ('python deque', 1), ('python2', 1), ('pythonpython3', 1), ('queue-approach', 1), ('rajat', 1), ('recursion formula', 1), ('recursion stack', 1), ('recursive solution', 1), ('rust', 1), ('self explanatory', 1), ('short c++ code', 1), ('simple approach', 1), ('smallest', 1), ('solution-explaining', 1), ('solution-share', 1), ('solution-sharing-cpp', 1), ('solution-sharing-java', 1), ('straight-forward', 1), ('swift5', 1), ('time-complexity-o', 1), ('traverse', 1), ('traverse-a-tree', 1), ('typescript', 1), ('ultra easy', 1), ('unique', 1), ('visualization', 1)]"
508,Most Frequent Subtree Sum,https://leetcode.com/problems/most-frequent-subtree-sum,"Given the root of a binary tree, return the most frequent subtree sum. If there is a tie, return all the values with the highest frequency in any order.

The subtree sum of a node is defined as the sum of all the node values formed by the subtree rooted at that node (including the node itself).","['hash-table', 'tree']",Medium,881,144,142303,84490,"[""Subtree of Another Tree""]","[('c++', 23), ('dfs', 23), ('cpp', 17), ('java', 12), ('python', 12), ('hashmap', 11), ('javascript', 8), ('c#', 5), ('postorder-traversal', 5), ('python 3', 5), ('python3', 4), ('recursive', 4), ('easy-understanding', 3), ('recursion', 3), ('binary-tree', 2), ('bottom-up', 2), ('depth first search', 2), ('depth-first-search', 2), ('dictionary', 2), ('dp', 2), ('easytounderstand', 2), ('fast-solution', 2), ('go', 2), ('golang', 2), ('iterative', 2), ('java-solution', 2), ('map', 2), ('post order traversal', 2), ('postorder traversal', 2), ('sorting', 2), ('swift', 2), ('tree-traversal', 2), ('unorderedmap', 2), ('100 speed', 1), ('2 stacks', 1), ('avnish', 1), ('beginner friendly', 1), ('bfs', 1), ('c++ recursive solution', 1), ('clear', 1), ('comment', 1), ('counter', 1), ('cpp solution', 1), ('defaultdict', 1), ('dfs recursive', 1), ('dfs solution', 1), ('dfs-tree', 1), ('dynamic programming', 1), ('easy', 1), ('easy-to-understand', 1), ('fast and simple', 1), ('faster', 1), ('faster than 100', 1), ('go-solution', 1), ('golang-solution', 1), ('google-india', 1), ('hash map', 1), ('hashamp', 1), ('inorder', 1), ('intutive', 1), ('java 8', 1), ('js', 1), ('js javascript', 1), ('less memory than 96.33', 1), ('linear', 1), ('linear time', 1), ('medium', 1), ('monotonic stack', 1), ('mrmagician', 1), ('multiset', 1), ('post-order-traversal', 1), ('postorder', 1), ('rajat', 1), ('readable', 1), ('recursive solution', 1), ('recursively', 1), ('recusion', 1), ('ruby', 1), ('rust', 1), ('self explanatory', 1), ('simple', 1), ('simple clear c++ solution', 1), ('simplest', 1), ('solution-explaining', 1), ('solution-sharing-cpp', 1), ('straight-forward', 1), ('sum caching', 1), ('traversal tree', 1), ('tree', 1), ('typescript', 1), ('ultra easy', 1), ('unordered map', 1), ('upvote', 1)]"
507,Perfect Number,https://leetcode.com/problems/perfect-number,"A perfect number is a positive integer that is equal to the sum of its positive divisors, excluding the number itself. A divisor of an integer x is an integer that can divide x evenly.

Given an integer n, return true if n is a perfect number, otherwise return false.",['math'],Easy,384,728,219441,79883,"[""Self Dividing Numbers""]","[('c++', 23), ('cpp', 19), ('python 3', 13), ('python', 11), ('java', 9), ('javascript', 9), ('easy-understanding', 4), ('easytounderstand', 4), ('perfect number', 4), ('python3', 4), ('java-solution', 3), ('math', 3), ('algorithms', 2), ('c#', 2), ('c++ code', 2), ('constant space', 2), ('cpp solution', 2), ('faster than 100.00', 2), ('golang', 2), ('java ac solution', 2), ('beats 100', 1), ('beginners', 1), ('c', 1), ('c++ solution', 1), ('cheating', 1), ('clean code', 1), ('comments', 1), ('comments-added', 1), ('cpp easy', 1), ('easy-to-understand', 1), ('enumerate', 1), ('es6', 1), ('explanation of logic', 1), ('explanation simple', 1), ('explanations', 1), ('explanatory comments', 1), ('fastest c++ solution', 1), ('go-solution', 1), ('golang-solution', 1), ('good variable names', 1), ('iteration', 1), ('java solution', 1), ('js', 1), ('js javascript', 1), ('linear', 1), ('logn', 1), ('look-up table method', 1), ('math solution', 1), ('math.sqrt', 1), ('mathematical', 1), ('mathematics', 1), ('naive-solution', 1), ('number', 1), ('number theory', 1), ('numbers', 1), ('one line', 1), ('ruby', 1), ('rust', 1), ('short', 1), ('simple clear c++ solution', 1), ('sketch', 1), ('solution-sharing-cpp', 1), ('solutions', 1), ('sqrt', 1), ('square root', 1), ('square-root', 1), ('structured code', 1), ('swift', 1), ('tle solved', 1), ('vector', 1)]"
506,Relative Ranks,https://leetcode.com/problems/relative-ranks,"You are given an integer array score of size n, where score[i] is the score of the ith athlete in a competition. All the scores are guaranteed to be unique.

The athletes are placed based on their scores, where the 1st place athlete has the highest score, the 2nd place athlete has the 2nd highest score, and so on. The placement of each athlete determines their rank:


	The 1st place athlete's rank is ""Gold Medal"".
	The 2nd place athlete's rank is ""Silver Medal"".
	The 3rd place athlete's rank is ""Bronze Medal"".
	For the 4th place to the nth place athlete, their rank is their placement number (i.e., the xth place athlete's rank is ""x"").


Return an array answer of size n where answer[i] is the rank of the ith athlete.",[],Easy,21,0,119824,61879,[],"[('python', 16), ('c++', 12), ('javascript', 12), ('python 3', 10), ('python3', 10), ('cpp', 8), ('sorting', 6), ('easy understanding', 4), ('java', 4), ('map', 4), ('c#', 3), ('golang', 3), ('hashmap', 3), ('js', 3), ('c++11', 2), ('commented', 2), ('easy-understanding', 2), ('solution-sharing-cpp', 2), ('sort', 2), ('algorithms', 1), ('append', 1), ('clean code', 1), ('cpp easy', 1), ('dictionary', 1), ('easy-to-understand', 1), ('easy-undestand', 1), ('explanation', 1), ('hash map', 1), ('hash table', 1), ('heapq', 1), ('image', 1), ('index', 1), ('intutive', 1), ('lambda function', 1), ('list comprehension', 1), ('one line', 1), ('queue', 1), ('ruby', 1), ('self-explanatory', 1), ('short', 1), ('short code', 1), ('simple solution', 1), ('solution-explaining', 1), ('sorted', 1), ('straight-forward', 1), ('swift', 1), ('three-lines', 1), ('ultra easy', 1), ('upvote', 1)]"
504,Base 7,https://leetcode.com/problems/base-7,"Given an integer num, return a string of its base 7 representation.",[],Easy,310,164,142053,66053,[],"[('c++', 13), ('cpp', 13), ('java', 12), ('javascript', 9), ('python', 7), ('python 3', 5), ('c#', 3), ('easytounderstand', 3), ('c', 2), ('java-solution', 2), ('python3', 2), ('ruby', 2), ('simple solution', 2), ('0ms', 1), ('100 bst', 1), ('100 faster', 1), ('100 space', 1), ('1line', 1), ('algorithms', 1), ('beats 100', 1), ('c code', 1), ('c++ code', 1), ('c++ easy to understand', 1), ('cpp solution', 1), ('custom-math-function', 1), ('easy', 1), ('easy sloution', 1), ('easy undestanding', 1), ('easy-understanding', 1), ('easy-undestand', 1), ('fast', 1), ('go', 1), ('golang', 1), ('iterative', 1), ('java ac solution', 1), ('java solution using dfs', 1), ('java11', 1), ('javascript solution', 1), ('loop-unrolling', 1), ('memory efficient', 1), ('number', 1), ('simple', 1), ('simplest', 1), ('solution-sharing-cpp', 1), ('stack', 1), ('string-operation', 1), ('stringbuilder', 1), ('strings', 1)]"
503,Next Greater Element II,https://leetcode.com/problems/next-greater-element-ii,"Given a circular integer array nums (i.e., the next element of nums[nums.length - 1] is nums[0]), return the next greater number for every element in nums.

The next greater number of a number x is the first greater number to its traversing-order next in the array, which means you could search circularly to find its next greater number. If it doesn't exist, return -1 for this number.",['stack'],Medium,2417,92,231222,136174,"[""Next Greater Element I"", ""Next Greater Element III""]","[('stack', 37), ('stacks', 29), ('c++', 26), ('python', 22), ('python 3', 14), ('cpp', 13), ('javascript', 13), ('java', 12), ('python3', 10), ('stack-based', 7), ('linear time', 6), ('cpp solution', 4), ('easy', 4), ('c#', 3), ('java-solution', 3), ('monotonic stack', 3), ('swift', 3), ('brute force', 2), ('circular-array', 2), ('data-structure', 2), ('deque', 2), ('easy-understanding', 2), ('golang', 2), ('java ac solution', 2), ('100', 1), ('2 passes', 1), ('2-line', 1), ('analysis weakness', 1), ('array', 1), ('c', 1), ('c++ easy to understand', 1), ('c++ monotonic stack', 1), ('c++11', 1), ('clean', 1), ('cpp clear', 1), ('diagram', 1), ('dictionary', 1), ('doubt', 1), ('explained', 1), ('explanation-need', 1), ('explanations', 1), ('fast', 1), ('general', 1), ('golang-solution', 1), ('increase', 1), ('interviewer guideness', 1), ('iterative', 1), ('java solution', 1), ('kotlin', 1), ('linear', 1), ('loop', 1), ('mock interview', 1), ('modules', 1), ('monotonic-stack', 1), ('neat', 1), ('next greater element', 1), ('next-greater-element', 1), ('nextgreaterelementii', 1), ('optimal', 1), ('optimal solution', 1), ('optimized', 1), ('pattern-matching', 1), ('pythonpython3', 1), ('question', 1), ('ruby', 1), ('simple solution', 1), ('solution-sharing-cpp', 1), ('stack-stl', 1), ('time-complexity', 1), ('zea7ot', 1)]"
502,IPO,https://leetcode.com/problems/ipo,"Suppose LeetCode will start its IPO soon. In order to sell a good price of its shares to Venture Capital, LeetCode would like to work on some projects to increase its capital before the IPO. Since it has limited resources, it can only finish at most k distinct projects before the IPO. Help LeetCode design the best way to maximize its total capital after finishing at most k distinct projects.

You are given n projects where the ith project has a pure profit profits[i] and a minimum capital of capital[i] is needed to start it.

Initially, you have w capital. When you finish a project, you will obtain its pure profit and the profit will be added to your total capital.

Pick a list of at most k distinct projects from given projects to maximize your final capital, and return the final maximized capital.

The answer is guaranteed to fit in a 32-bit signed integer.","['heap', 'greedy']",Hard,512,49,54670,22888,[],"[('java', 9), ('c++', 7), ('heap', 6), ('priority-queue', 6), ('priority queue', 5), ('python', 5), ('greedy', 4), ('two heaps', 4), ('c#', 2), ('cpp', 2), ('easy-understanding', 2), ('heapq', 2), ('python 3', 2), ('scala', 2), ('clean code', 1), ('clear-understanding', 1), ('cpp solution', 1), ('dictionary', 1), ('easy', 1), ('explaination', 1), ('explanation', 1), ('explanation with logic', 1), ('greedy algorithm', 1), ('hash map', 1), ('hashing', 1), ('java ac solution', 1), ('java greedy', 1), ('java-solution', 1), ('maxheap', 1), ('minheap', 1), ('multi-sets', 1), ('multiset', 1), ('python3', 1), ('sets', 1), ('simple solution', 1), ('solution-explaining', 1), ('solution-sharing-cpp', 1), ('sorting', 1), ('super simple', 1), ('treemap', 1), ('treeset', 1), ('two-heap', 1)]"
501,Find Mode in Binary Search Tree,https://leetcode.com/problems/find-mode-in-binary-search-tree,"Given the root of a binary search tree (BST) with duplicates, return all the mode(s) (i.e., the most frequently occurred element) in it.

If the tree has more than one mode, return them in any order.

Assume a BST is defined as follows:


	The left subtree of a node contains only nodes with keys less than or equal to the node's key.
	The right subtree of a node contains only nodes with keys greater than or equal to the node's key.
	Both the left and right subtrees must also be binary search trees.",['tree'],Easy,1336,421,248052,109005,"[""Validate Binary Search Tree""]","[('c++', 23), ('cpp', 18), ('python', 18), ('python 3', 16), ('java', 12), ('dfs', 10), ('python3', 9), ('javascript', 7), ('recursion', 7), ('golang', 6), ('hashmap', 6), ('cpp solution', 5), ('iterative', 5), ('binary search tree', 4), ('c++ code', 4), ('in-order-traversal', 4), ('inorder traversal', 4), ('mode', 4), ('bfs', 3), ('c#', 3), ('constant space', 3), ('easy', 3), ('golang-solution', 3), ('inorder', 3), ('inorder iterative', 3), ('map', 3), ('recursive', 3), ('tree-traversal', 3), ('binary-tree', 2), ('bst', 2), ('counter', 2), ('dictonary', 2), ('easy-to-understand', 2), ('inorder-traversal', 2), ('iteration', 2), ('linear time', 2), ('morris-inorder-traversal', 2), ('python2', 2), ('stacks', 2), ('straight-forward', 2), ('swift', 2), ('15 lines', 1), ('501', 1), ('beginner friendly', 1), ('bfs python', 1), ('c++ cpp', 1), ('c++ recursive solution', 1), ('c++ solution', 1), ('cpp doubt', 1), ('cpp easy', 1), ('defaultdict', 1), ('definition of mode', 1), ('depth first search', 1), ('detailed explanation', 1), ('dfs simple solution', 1), ('dfs traversal', 1), ('dictionaries', 1), ('dictionary', 1), ('documentation', 1), ('easy to understand', 1), ('easy understand', 1), ('easy-understanding', 1), ('explain', 1), ('explaination', 1), ('fast and simple', 1), ('faster than 99.41', 1), ('follow up', 1), ('frequency map', 1), ('frequency table', 1), ('go', 1), ('go-solution', 1), ('iterate', 1), ('javascript solution', 1), ('javascript-solution', 1), ('js', 1), ('level-order-traversal', 1), ('morris', 1), ('morris-traversal', 1), ('no-extra-space', 1), ('no-global', 1), ('non-recursive', 1), ('pointer', 1), ('pythonpython3', 1), ('recurision', 1), ('recusion', 1), ('rust', 1), ('scala', 1), ('solution-explaining', 1), ('solution-sharing-cpp', 1), ('space-efficient', 1), ('straightforward', 1), ('tree traversal', 1), ('trees', 1), ('typescript', 1), ('unordered map', 1)]"
500,Keyboard Row,https://leetcode.com/problems/keyboard-row,"Given an array of strings words, return the words that can be typed using letters of the alphabet on only one row of American keyboard like the image below.

In the American keyboard:


	the first row consists of the characters ""qwertyuiop"",
	the second row consists of the characters ""asdfghjkl"", and
	the third row consists of the characters ""zxcvbnm"".",['hash-table'],Easy,651,762,190462,125650,[],"[('c++', 29), ('java', 27), ('python 3', 24), ('cpp', 23), ('python', 21), ('javascript', 13), ('python3', 12), ('hashset', 10), ('c#', 9), ('easy-understanding', 8), ('golang', 6), ('java-solution', 6), ('hashmap', 5), ('c++ code', 4), ('cpp solution', 4), ('easy', 4), ('easy-to-understand', 4), ('easy-undestand', 4), ('sets', 4), ('swift', 4), ('array', 3), ('clean code', 3), ('easy to understand', 3), ('explaination', 3), ('go', 3), ('golang-solution', 3), ('hash table', 3), ('js', 3), ('regex', 3), ('string', 3), ('strings', 3), ('0ms', 2), ('100 beat', 2), ('algorithms', 2), ('beginnerfriendly', 2), ('bit manipulation', 2), ('brute force', 2), ('c', 2), ('commented', 2), ('csharp', 2), ('dictionary', 2), ('efficient', 2), ('fast', 2), ('fast and simple', 2), ('intuitive', 2), ('javascrip', 2), ('javascript solution', 2), ('kotlin', 2), ('regexp', 2), ('regular-expression', 2), ('scala', 2), ('set', 2), ('simple', 2), ('simple clear c++ solution', 2), ('string-operation', 2), ('#roshankumar350', 1), ('100 faster', 1), ('100 memory', 1), ('100 speed', 1), ('all', 1), ('any', 1), ('arrays', 1), ('beginner', 1), ('bit-manipulation', 1), ('bit-mask', 1), ('bitmanipulation', 1), ('bitmasks', 1), ('brute-force', 1), ('c++17', 1), ('character', 1), ('commetend', 1), ('constant memory', 1), ('constant-space', 1), ('cpp-solution', 1), ('crazy-code', 1), ('dictonary', 1), ('different approach', 1), ('easy-understand', 1), ('efficient solution', 1), ('es6', 1), ('explained', 1), ('explanation with logic', 1), ('fast-solution', 1), ('faster than 100', 1), ('faster than 90', 1), ('function', 1), ('functional', 1), ('go-solution', 1), ('golang solution', 1), ('hash-table', 1), ('hashsmap', 1), ('java ac solution', 1), ('java solution', 1), ('javascriptes6', 1), ('keyboardrow', 1), ('linear time', 1), ('linear-time', 1), ('linq', 1), ('list-comprehension', 1), ('map', 1), ('mapping', 1), ('mrmagician', 1), ('one-liner', 1), ('oneline', 1), ('optimized', 1), ('php', 1), ('php solution', 1), ('python3.8', 1), ('ruby', 1), ('rust', 1), ('simple solution', 1), ('simple-solution', 1), ('solition-sharing', 1), ('solution', 1), ('solution-explaining', 1), ('solution-sharing-cpp', 1), ('stl', 1), ('straightforward', 1), ('swift5', 1), ('understandable', 1), ('unordered map', 1), ('upvote', 1), ('words', 1)]"
498,Diagonal Traverse,https://leetcode.com/problems/diagonal-traverse,"Given an m x n matrix mat, return an array of all the elements of the array in a diagonal order.",[],Medium,1246,411,249441,126433,[],"[('java', 35), ('c++', 28), ('python', 26), ('cpp', 18), ('javascript', 16), ('python 3', 16), ('easy-understanding', 14), ('java-solution', 14), ('python3', 11), ('matrix', 9), ('golang', 6), ('bfs', 5), ('easy', 5), ('explained', 5), ('2d-array', 4), ('c#', 4), ('golang-solution', 4), ('simulation', 4), ('2d array', 3), ('2darray', 3), ('defaultdict', 3), ('diagonal-traverse', 3), ('fast and simple', 3), ('hashmap', 3), ('javascript solution', 3), ('map', 3), ('matrix-traverse', 3), ('simple', 3), ('#java', 2), ('clear solution', 2), ('diagonal traverse', 2), ('diagonaltraverse', 2), ('easy-to-understand', 2), ('easy-undestand', 2), ('easytounderstand', 2), ('explanation', 2), ('explanation of logic', 2), ('go', 2), ('java solution', 2), ('java-zigzag', 2), ('js', 2), ('ruby', 2), ('#diagonaltraverse', 1), ('#javascript', 1), ('2d-matrix', 1), ('algorithms', 1), ('array', 1), ('beats 100', 1), ('beats100', 1), ('c++ code', 1), ('c++ solution', 1), ('clean', 1), ('clean-efficient-code', 1), ('clear', 1), ('code comments', 1), ('constant memory', 1), ('cpp easy', 1), ('cpp solution', 1), ('deque', 1), ('description', 1), ('detailed', 1), ('dict', 1), ('dictionary', 1), ('dictionary c#', 1), ('easy to understandd', 1), ('easy undestanding', 1), ('easy-code', 1), ('easy-solution', 1), ('easy-understand', 1), ('efficient approach', 1), ('explained solution', 1), ('facebook', 1), ('fast', 1), ('fastest', 1), ('generator', 1), ('give stars and subscribe', 1), ('go-solution', 1), ('hash', 1), ('helper functions', 1), ('image', 1), ('index', 1), ('interview experience', 1), ('intuitive', 1), ('iteration', 1), ('iterative', 1), ('java ac solution', 1), ('javascrip', 1), ('javscript', 1), ('kotlin-solution', 1), ('kotlinvim', 1), ('kotllin', 1), ('linear', 1), ('linear time', 1), ('linear-time', 1), ('list comprehension', 1), ('logical', 1), ('manhattan distance', 1), ('matrix traverse', 1), ('mn', 1), ('one loop', 1), ('one pass hash map', 1), ('one pass solution', 1), ('onm', 1), ('onm and o1', 1), ('picture explanation', 1), ('python3.8', 1), ('recurision', 1), ('reverse', 1), ('rust', 1), ('solution-explaining', 1), ('solution-sharing-cpp', 1), ('sort', 1), ('sorting', 1), ('space-complexity-1', 1), ('stack', 1), ('straight-forward', 1), ('straightforward', 1), ('tail-recursion', 1), ('traverse', 1), ('ugly', 1), ('video', 1), ('visual', 1), ('well-commented', 1)]"
496,Next Greater Element I,https://leetcode.com/problems/next-greater-element-i,"You are given two integer arrays nums1 and nums2 both of unique elements, where nums1 is a subset of nums2.

Find all the next greater numbers for nums1's elements in the corresponding places of nums2.

The Next Greater Number of a number x in nums1 is the first greater number to its right in nums2. If it does not exist, return -1 for this number.",['stack'],Easy,2425,2874,326228,215362,"[""Next Greater Element II"", ""Next Greater Element III"", ""Daily Temperatures""]","[('stack', 46), ('c++', 38), ('java', 37), ('python 3', 31), ('python', 30), ('hashmap', 28), ('cpp', 24), ('stacks', 23), ('javascript', 21), ('map', 13), ('python3', 13), ('easy-understanding', 11), ('c#', 9), ('cpp solution', 7), ('java-solution', 7), ('stack-based', 7), ('unordered map', 7), ('brute force', 5), ('easy', 5), ('fast', 5), ('array', 4), ('dictionary', 4), ('golang', 4), ('monotonic stack', 4), ('readable', 4), ('swift', 4), ('c++ code', 3), ('dict', 3), ('easy-to-understand', 3), ('easy-undestand', 3), ('explained', 3), ('next-greater-element', 3), ('simplest', 3), ('beginner friendly', 2), ('clean code', 2), ('code', 2), ('dynamic programming', 2), ('hash map', 2), ('hash table', 2), ('hasmap', 2), ('js', 2), ('linear time', 2), ('map-stl', 2), ('next greater element', 2), ('pythonic', 2), ('simple clear c++ solution', 2), ('simple solution', 2), ('100 faster cpp', 1), ('100 faster runtime', 1), ('100 memory', 1), ('100 speed', 1), ('2ms', 1), ('approach', 1), ('array easy', 1), ('begginer friendly', 1), ('beginners', 1), ('c++ easy to understand', 1), ('c++ monotonic stack', 1), ('c++ solution', 1), ('clear', 1), ('comments added', 1), ('cplusplus', 1), ('cpp easy', 1), ('cpp-solution', 1), ('data-structure', 1), ('decreasing stack', 1), ('deque', 1), ('dictionary c#', 1), ('dictonary', 1), ('dynamic-programming', 1), ('easy to understand', 1), ('easy-implementation', 1), ('easytounderstand', 1), ('efficient', 1), ('es6', 1), ('explanation', 1), ('explanation with code', 1), ('faster', 1), ('hashing', 1), ('haskell', 1), ('help needed', 1), ('increasing stack', 1), ('ios', 1), ('iterative', 1), ('iteratve', 1), ('java 8', 1), ('java-8', 1), ('javascript solution', 1), ('loops', 1), ('maps', 1), ('memoization', 1), ('monotone stack', 1), ('mrmagician', 1), ('nextgreaterelementi', 1), ('on', 1), ('on2', 1), ('optimal', 1), ('python2', 1), ('ruby', 1), ('rust', 1), ('scala', 1), ('simple', 1), ('solution-sharing-cpp', 1), ('two pointers', 1), ('two-pointers', 1), ('ugly', 1), ('understanding', 1), ('unordered-map', 1), ('upvote', 1), ('using dictionary', 1), ('using stack', 1)]"
495,Teemo Attacking,https://leetcode.com/problems/teemo-attacking,"You are given an integer array timeSeries and an integer duration. Our hero Teemo has attacked an enemy where the ith attack was done at the timeSeries[i]. When Teemo attacks their enemy, the enemy gets poisoned for duration time (i.e., the enemy is poisoned for the time interval [timeSeries[i], timeSeries[i] + duration - 1] inclusive).

Return the total time that the enemy is in a poisoned condition.",['array'],Medium,525,1050,132611,74324,"[""Merge Intervals"", ""Can Place Flowers"", ""Dota2 Senate""]","[('python 3', 27), ('c++', 21), ('java', 20), ('python', 18), ('easy-understanding', 12), ('cpp', 10), ('python3', 10), ('easy', 9), ('linear time', 9), ('array', 6), ('javascript', 5), ('c#', 4), ('explained', 4), ('java-solution', 4), ('linear', 4), ('cpp solution', 3), ('easy-to-understand', 3), ('fast and simple', 3), ('golang', 3), ('php', 3), ('simple', 3), ('simple solution', 3), ('swift', 3), ('100 memory', 2), ('c++ code', 2), ('constant memory', 2), ('easytounderstand', 2), ('expalanation', 2), ('merge intervals', 2), ('one pass solution', 2), ('pythonpython3', 2), ('ruby', 2), ('single pass', 2), ('1-line solution', 1), ('100 faster runtime', 1), ('100 speed', 1), ('1ms runtime', 1), ('arrays', 1), ('basic concept', 1), ('c', 1), ('c++ solution', 1), ('c++14', 1), ('constant space', 1), ('cpp easy', 1), ('cpp short solution', 1), ('csharp', 1), ('easiest', 1), ('easy solution', 1), ('easy understanding', 1), ('easy-undestand', 1), ('efficient', 1), ('explained solution', 1), ('explanation with code', 1), ('fast', 1), ('faster', 1), ('fasterthan100', 1), ('fastest solution', 1), ('go', 1), ('go-solution', 1), ('golang-solution', 1), ('intuitive', 1), ('iteration', 1), ('java ac solution', 1), ('javasacript', 1), ('kotlin', 1), ('linear seach', 1), ('linear time complexity', 1), ('list comprehension', 1), ('loop', 1), ('math', 1), ('merge-intervals', 1), ('nlogn', 1), ('one pass', 1), ('one-liner', 1), ('overlap', 1), ('overlapping', 1), ('overlapping intervals', 1), ('overlapping subproblems', 1), ('php solution', 1), ('poison', 1), ('python2', 1), ('rajat', 1), ('readable', 1), ('sequence', 1), ('series', 1), ('simplest', 1), ('simulation', 1), ('six liner', 1), ('solution', 1), ('solution-explaining', 1), ('solution-sharing-cpp', 1), ('sort', 1), ('swift5', 1), ('teemo', 1), ('teemo attacking', 1), ('video', 1), ('video explaination', 1), ('video solution', 1), ('video-explanation', 1), ('visualization', 1), ('well commented', 1), ('with explanation', 1)]"
494,Target Sum,https://leetcode.com/problems/target-sum,"You are given an integer array nums and an integer target.

You want to build an expression out of nums by adding one of the symbols '+' and '-' before each integer in nums and then concatenate all the integers.


	For example, if nums = [2, 1], you can add a '+' before 2 and a '-' before 1 and concatenate them to build the expression ""+2-1"".


Return the number of different expressions that you can build, which evaluates to target.","['dynamic-programming', 'depth-first-search']",Medium,4047,164,508167,231846,"[""Expression Add Operators""]","[('dynamic programming', 56), ('dp', 30), ('c++', 28), ('python', 22), ('memoization', 21), ('cpp', 19), ('java', 19), ('recursion', 15), ('python 3', 14), ('javascript', 13), ('dfs', 11), ('knapsack', 9), ('python3', 9), ('cpp solution', 6), ('golang', 5), ('top down dp', 5), ('dynamic-programming', 4), ('simple', 4), ('top-down', 4), ('c#', 3), ('clean code', 3), ('easy-understanding', 3), ('java-solution', 3), ('javascript solution', 3), ('memorization', 3), ('recurision', 3), ('backtracking', 2), ('brute force', 2), ('c++ solution', 2), ('dfs recursive', 2), ('dfs simple solution', 2), ('dfs solution', 2), ('dfs with early stopping', 2), ('dfs-recursive', 2), ('dfs-topdown', 2), ('dp-techqique', 2), ('easytounderstand', 2), ('explanation', 2), ('golang-solution', 2), ('help needed', 2), ('javascript recursive', 2), ('meet-in-the-middle', 2), ('memoziation', 2), ('recursive', 2), ('ruby', 2), ('solution-sharing-cpp', 2), ('subsetsum', 2), ('swift', 2), ('topdown', 2), ('2d-array', 1), ('algorithms', 1), ('beginner friendly', 1), ('bfs', 1), ('bidirectional bfs', 1), ('bit manipulation', 1), ('bit-manipulation', 1), ('bottom up', 1), ('bottom-up', 1), ('bottoms-up', 1), ('brute-force', 1), ('c++11', 1), ('callstack', 1), ('cpp doubt', 1), ('cpp easy', 1), ('cpp with explanation', 1), ('csharp', 1), ('depth first search', 1), ('diagram', 1), ('divide and conquer', 1), ('dp-programming', 1), ('dyanmic programming', 1), ('easy', 1), ('easy-to-understand', 1), ('elegant solution', 1), ('explained solution', 1), ('explanation of logic', 1), ('fast and simple', 1), ('go', 1), ('go-solution', 1), ('help', 1), ('intuition', 1), ('java ac solution', 1), ('map', 1), ('memoized', 1), ('memorisation', 1), ('optimized', 1), ('pattern', 1), ('pre-order traversal', 1), ('python2', 1), ('question', 1), ('readable', 1), ('reccursion', 1), ('recursion formula', 1), ('recursively', 1), ('ror', 1), ('runtime error', 1), ('rust', 1), ('scala', 1), ('short', 1), ('short code', 1), ('solution', 1), ('solution c++', 1), ('solution-explaining', 1), ('somal', 1), ('stack', 1), ('subset', 1), ('subset sum', 1), ('subset-sum', 1), ('swift5', 1), ('tabulation', 1), ('target-sum', 1), ('thinking process', 1), ('top down', 1), ('top-down dp', 1), ('traversal', 1)]"
493,Reverse Pairs,https://leetcode.com/problems/reverse-pairs,"Given an integer array nums, return the number of reverse pairs in the array.

A reverse pair is a pair (i, j) where 0 <= i < j < nums.length and nums[i] > 2 * nums[j].","['binary-search', 'divide-and-conquer', 'sort', 'binary-indexed-tree', 'segment-tree']",Hard,1363,146,199089,54388,"[""Count of Smaller Numbers After Self"", ""Count of Range Sum""]","[('c++', 10), ('python', 10), ('python 3', 9), ('cpp', 7), ('divide and conquer', 7), ('merge sort', 7), ('merge-sort', 7), ('mergesort', 6), ('java', 5), ('binary indexed tree', 4), ('binary-indexed-tree', 4), ('binary-search', 3), ('clean code', 3), ('fenwick-tree', 3), ('javascript', 3), ('binarysearch', 2), ('c#', 2), ('easy', 2), ('nlogn', 2), ('nlogn time', 2), ('python3', 2), ('binary search', 1), ('bisect', 1), ('bisection search', 1), ('bst', 1), ('c++17', 1), ('commented', 1), ('concise', 1), ('concise-solution', 1), ('csharp', 1), ('divid and conquer', 1), ('divide-and-conquer', 1), ('easy-to-understand', 1), ('easy-understanding', 1), ('fast-solution', 1), ('iterative', 1), ('java-solution', 1), ('less space than 100.00', 1), ('merge', 1), ('merge sor', 1), ('merged', 1), ('modified merge sort', 1), ('on2', 1), ('recursion', 1), ('segment tree', 1), ('short c++ code', 1), ('simpler', 1), ('solution-explaining', 1), ('solution-sharing-cpp', 1), ('sortedlist', 1), ('sorting', 1), ('test case', 1), ('time-cost', 1), ('treap', 1), ('trie', 1), ('two-pointers', 1)]"
492,Construct the Rectangle,https://leetcode.com/problems/construct-the-rectangle,"A web developer needs to know how to design a web page's size. So, given a specific rectangular web page’s area, your job by now is to design a rectangular web page, whose length L and width W satisfy the following requirements:


	The area of the rectangular web page you designed must equal to the given target area.
	The width W should not be larger than the length L, which means L >= W.
	The difference between length L and width W should be as small as possible.


Return an array [L, W] where L and W are the length and width of the web page you designed in sequence.",['math'],Easy,278,288,128084,64946,[],"[('c++', 17), ('python', 10), ('cpp', 8), ('python 3', 7), ('java', 5), ('javascript', 5), ('c#', 4), ('easy-to-understand', 3), ('python3', 3), ('easy-understanding', 2), ('math', 2), ('85.33faster', 1), ('arrays', 1), ('beginner friendly', 1), ('binary search', 1), ('c#-solution', 1), ('clean solution', 1), ('division', 1), ('easy understand', 1), ('easy understanding', 1), ('easy undestanding', 1), ('easy-undestand', 1), ('explained', 1), ('explanation of logic', 1), ('factor', 1), ('fast', 1), ('faster than 100.00', 1), ('full explained', 1), ('go', 1), ('golang', 1), ('golang-solution', 1), ('iteration', 1), ('java-solution', 1), ('javascript solution', 1), ('math-solution', 1), ('memory optimized', 1), ('number theory', 1), ('pyhton3', 1), ('pythonpython3', 1), ('simple', 1), ('simple math', 1), ('solution', 1), ('solution-explaining', 1), ('solution-sharing-cpp', 1), ('swift', 1), ('three-lines', 1), ('video', 1), ('video explaination', 1), ('video-explanation', 1)]"
491,Increasing Subsequences,https://leetcode.com/problems/increasing-subsequences,"Given an integer array nums, return all the different possible increasing subsequences of the given array with at least two elements. You may return the answer in any order.

The given array may contain duplicates, and two equal integers should also be considered a special case of increasing sequence.",['depth-first-search'],Medium,975,135,119440,57205,"[""Maximum Length of Pair Chain""]","[('c++', 9), ('dfs', 8), ('backtracking', 5), ('python', 5), ('python 3', 5), ('cpp', 4), ('java', 4), ('easy-understanding', 3), ('c#', 2), ('dynamic programming', 2), ('recursion', 2), ('array', 1), ('back tracking', 1), ('basic', 1), ('bfs', 1), ('bit manipulation', 1), ('c++ power set', 1), ('c++14', 1), ('cpp solution', 1), ('dfs simple solution', 1), ('dp', 1), ('dynamic-programming', 1), ('easy', 1), ('golang', 1), ('hashmap', 1), ('hashset', 1), ('help needed', 1), ('increasing-subsequences', 1), ('intuition', 1), ('iterator', 1), ('itertools', 1), ('java-solution', 1), ('javascript', 1), ('map-stl', 1), ('python3', 1), ('readable', 1), ('recursively', 1), ('ruby', 1), ('rust', 1), ('set', 1), ('solution', 1), ('solution-explaining', 1), ('solution-sharing-cpp', 1), ('vector', 1)]"
1643,Kth Smallest Instructions,https://leetcode.com/problems/kth-smallest-instructions,"Bob is standing at cell (0, 0), and he wants to reach destination: (row, column). He can only travel right and down. You are going to help Bob by providing instructions for him to reach destination.

The instructions are represented as a string, where each character is either:


	'H', meaning move horizontally (go right), or
	'V', meaning move vertically (go down).


Multiple instructions will lead Bob to destination. For example, if destination is (2, 3), both ""HHHVV"" and ""HVHVH"" are valid instructions.

However, Bob is very picky. Bob has a lucky number k, and he wants the kth lexicographically smallest instructions that will lead him to destination. k is 1-indexed.

Given an integer array destination and an integer k, return the kth lexicographically smallest instructions that will take Bob to destination.",['dynamic-programming'],Hard,205,3,11393,5119,[],"[('dp', 7), ('c++', 6), ('dynamic programming', 5), ('python', 5), ('combination', 4), ('combinatorics', 3), ('easy-understanding', 3), ('explained', 3), ('math', 3), ('python3', 3), ('c#', 2), ('python 3', 2), ('buttom-up', 1), ('combinatories', 1), ('counting', 1), ('explanation', 1), ('golang', 1), ('javascript', 1), ('math based solution', 1), ('maths', 1), ('ncr', 1), ('rust', 1), ('simple', 1), ('solution', 1), ('weekly-contests', 1)]"
488,Zuma Game,https://leetcode.com/problems/zuma-game,"Think about Zuma Game. You have a row of balls on the table, colored red(R), yellow(Y), blue(B), green(G), and white(W). You also have several balls in your hand.

Each time, you may choose a ball in your hand, and insert it into the row (including the leftmost place and rightmost place). Then, if there is a group of 3 or more balls in the same color touching, remove these balls. Keep doing this until no more balls can be removed.

Find the minimal balls you have to insert to remove all the balls on the table. If you cannot remove all the balls, output -1.",['depth-first-search'],Hard,285,306,44095,16787,[],"[('dfs', 7), ('java', 5), ('c++', 4), ('backtracking', 2), ('c#', 2), ('cpp', 2), ('memoization', 2), ('python 3', 2), ('recursion', 2), ('swift', 2), ('a star search algorithm', 1), ('back tracking', 1), ('bfs', 1), ('breadth first search', 1), ('brute-force', 1), ('comments', 1), ('correct', 1), ('dfs-iterative', 1), ('dijkstras algorithm', 1), ('dp', 1), ('dynamic programmin', 1), ('easy', 1), ('encoding', 1), ('java-solution', 1), ('javascript', 1), ('javascript solution', 1), ('js', 1), ('memorization', 1), ('memoziation', 1), ('priority queue', 1), ('recursive', 1), ('solution', 1), ('solution-explaining', 1), ('solution-sharing-cpp', 1), ('wrong answer', 1), ('wrong output', 1), ('zuma-game', 1)]"
486,Predict the Winner,https://leetcode.com/problems/predict-the-winner,"You are given an integer array nums. Two players are playing a game with this array: player 1 and player 2.

Player 1 and player 2 take turns, with player 1 starting first. Both players start the game with a score of 0. At each turn, the player takes one of the numbers from either end of the array (i.e., nums[0] or nums[nums.length - 1]) which reduces the size of the array by 1. The player adds the chosen number to their score. The game ends when there are no more elements in the array.

Return true if Player 1 can win the game. If the scores of both players are equal, then player 1 is still the winner, and you should also return true. You may assume that both players are playing optimally.","['dynamic-programming', 'minimax']",Medium,1906,109,176569,86667,"[""Can I Win""]","[('dynamic programming', 36), ('dp', 20), ('python', 18), ('c++', 13), ('cpp', 13), ('java', 9), ('python3', 9), ('recursion', 9), ('memoization', 6), ('minimax', 6), ('python 3', 6), ('dynamic-programming', 3), ('predict the winner', 3), ('bottom-up', 2), ('c#', 2), ('dfs', 2), ('explanation', 2), ('fast and simple', 2), ('javascript', 2), ('100 beat', 1), ('2ms', 1), ('32ms', 1), ('algorithms', 1), ('arrays', 1), ('bottom up', 1), ('cpp easy', 1), ('cpp solution', 1), ('cpp-solution', 1), ('depth-first-search', 1), ('dp top down', 1), ('dp-techqique', 1), ('dynamic programmin', 1), ('easy-understanding', 1), ('fastest', 1), ('game', 1), ('game theory + dp', 1), ('game-theory', 1), ('gap strategy', 1), ('gap-method', 1), ('goalng', 1), ('golang', 1), ('help', 1), ('iterative', 1), ('java-solution', 1), ('math', 1), ('memoziation', 1), ('naive', 1), ('predictthewinner', 1), ('ptyhon', 1), ('python dp', 1), ('readable', 1), ('recurrance', 1), ('recursive', 1), ('recursive dp', 1), ('recursive easy', 1), ('recusion', 1), ('simplest', 1), ('solution-cpp', 1), ('solution-explaining', 1), ('space-efficient', 1), ('swift', 1), ('top-down', 1)]"
485,Max Consecutive Ones,https://leetcode.com/problems/max-consecutive-ones,"Given a binary array nums, return the maximum number of consecutive 1's in the array.",['array'],Easy,1232,382,743604,391997,"[""Max Consecutive Ones II"", ""Max Consecutive Ones III"", ""Consecutive Characters""]","[('c++', 40), ('java', 35), ('python', 32), ('cpp', 25), ('easy-understanding', 24), ('javascript', 22), ('python 3', 19), ('java-solution', 18), ('python3', 13), ('easy', 10), ('c#', 9), ('cpp solution', 7), ('simple solution', 6), ('sliding-window', 5), ('swift', 5), ('easytounderstand', 4), ('simple', 4), ('slidingwindow', 4), ('array', 3), ('c++ code', 3), ('easy to understandd', 3), ('easy-to-understand', 3), ('golang', 3), ('javascript solution', 3), ('ruby', 3), ('solution-sharing-cpp', 3), ('two-pointers', 3), ('arrays', 2), ('c', 2), ('easy to understand', 2), ('iterate', 2), ('kotlin', 2), ('linear', 2), ('python2', 2), ('pythonpython3', 2), ('rust', 2), ('#explained', 1), ('#in place', 1), ('100 faster', 1), ('100 percentage fastest', 1), ('100 space', 1), ('100 speed', 1), ('1ms', 1), ('2 pointer approach', 1), ('3ms', 1), ('algorithm', 1), ('approach', 1), ('beats 100', 1), ('bit-manipulation', 1), ('bug-test-case', 1), ('c-cpp', 1), ('clean', 1), ('clear', 1), ('commented', 1), ('comments', 1), ('comments-added', 1), ('constant space', 1), ('counter', 1), ('cpp doubt', 1), ('cpp with explanation', 1), ('cpp-solution', 1), ('dp', 1), ('dynamic programming', 1), ('dynamic-programming', 1), ('easy-undestand', 1), ('explained', 1), ('fast and simple', 1), ('functional', 1), ('github', 1), ('go', 1), ('go-solution', 1), ('golang-solution', 1), ('if-else', 1), ('improved', 1), ('ios', 1), ('java-8', 1), ('js', 1), ('kadane-algorithm', 1), ('kotlinvim', 1), ('linear time', 1), ('linear-time', 1), ('linq', 1), ('memory', 1), ('one line', 1), ('one-liner', 1), ('one-loop', 1), ('onepass', 1), ('optimal', 1), ('performace', 1), ('programming', 1), ('pythonic', 1), ('question', 1), ('readable', 1), ('reduce', 1), ('rust vec', 1), ('scala', 1), ('simple explanation', 1), ('simple-solution', 1), ('simplest', 1), ('single line', 1), ('single pass', 1), ('solution', 1), ('solution-csharp', 1), ('stars move the article up', 1), ('stl', 1), ('straight-forward', 1), ('string-operation', 1), ('strings', 1), ('time', 1), ('two pointers', 1), ('two-pass', 1), ('two-pointer', 1), ('twopointers', 1), ('typescript', 1), ('vector', 1), ('visualization', 1), ('while-loop', 1), ('with-explanation', 1)]"
483,Smallest Good Base,https://leetcode.com/problems/smallest-good-base,"Given an integer n represented as a string, return the smallest good base of n.

We call k >= 2 a good base of n, if all digits of n base k are 1's.","['math', 'binary-search']",Hard,195,369,39555,14398,[],"[('binary search', 4), ('cpp', 2), ('java', 2), ('c++', 1), ('detailed explanation', 1), ('easy sloution', 1), ('easy-undestand', 1), ('golang', 1), ('interview', 1), ('java-solution', 1), ('math', 1), ('math-proof', 1), ('python', 1), ('python 3', 1), ('razorpay', 1), ('short c++ code', 1), ('smallest-good-base', 1), ('solution', 1), ('solution-explaining', 1), ('solution-sharing-cpp', 1)]"
482,License Key Formatting,https://leetcode.com/problems/license-key-formatting,"You are given a license key represented as a string s that consists of only alphanumeric characters and dashes. The string is separated into n + 1 groups by n dashes. You are also given an integer k.

We want to reformat the string s such that each group contains exactly k characters, except for the first group, which could be shorter than k but still must contain at least one character. Furthermore, there must be a dash inserted between two groups, and you should convert all lowercase letters to uppercase.

Return the reformatted license key.",[],Easy,582,885,381670,164653,[],"[('python', 20), ('python 3', 19), ('c++', 16), ('java', 14), ('javascript', 12), ('cpp', 11), ('c#', 8), ('python3', 6), ('easy', 5), ('string', 5), ('easy-understanding', 4), ('golang', 4), ('java-solution', 4), ('string-operation', 4), ('easy-to-understand', 3), ('solution-sharing-cpp', 3), ('#codeboy', 2), ('#easy solution', 2), ('#easy-understanding', 2), ('#python', 2), ('#python 3', 2), ('cpp solution', 2), ('csharp', 2), ('easy-undestand', 2), ('easytounderstand', 2), ('explaination', 2), ('go-solution', 2), ('golang-solution', 2), ('java solution', 2), ('list', 2), ('naive', 2), ('simple', 2), ('simple solution', 2), ('string builder', 2), ('stringbuilder', 2), ('algorithms', 1), ('bug-test-case', 1), ('c', 1), ('c#-solution', 1), ('chaining', 1), ('clean code', 1), ('cpp soltuion', 1), ('cpp-solution', 1), ('es6', 1), ('explanatory comments', 1), ('fast', 1), ('fast and simple', 1), ('for-loop', 1), ('functional programming', 1), ('go', 1), ('good variable names', 1), ('helper', 1), ('ios', 1), ('javascrip', 1), ('javascript solution', 1), ('join', 1), ('js', 1), ('linear', 1), ('one pass', 1), ('python2', 1), ('queue', 1), ('reduce', 1), ('ruby', 1), ('rust', 1), ('self-explanatory', 1), ('slicing', 1), ('solution', 1), ('solution-explaining', 1), ('split', 1), ('stack', 1), ('stacks', 1), ('strings', 1), ('swift', 1), ('swift5', 1), ('switch', 1), ('wrong-test-cases', 1)]"
481,Magical String,https://leetcode.com/problems/magical-string,"A magical string s consists of only '1' and '2' and obeys the following rules:


	The string s is magical because concatenating the number of contiguous occurrences of characters '1' and '2' generates the string s itself.


The first few elements of s is s = ""1221121221221121122……"". If we group the consecutive 1's and 2's in s, it will be ""1 22 11 2 1 22 1 22 11 2 11 22 ......"" and the occurrences of 1's or 2's in each group are ""1 2 2 1 1 2 1 2 2 1 2 2 ......"". You can see that the occurrence sequence is s itself.

Given an integer n, return the number of 1's in the first n number in the magical string s.",[],Medium,128,765,50630,24402,[],"[('algorithms', 2), ('python', 2), ('python3', 2), ('cpp', 1), ('explanation of logic', 1), ('golang', 1), ('javascript', 1), ('magical-string', 1), ('python 3', 1), ('reduce', 1), ('simple', 1), ('solution', 1), ('swift', 1)]"
480,Sliding Window Median,https://leetcode.com/problems/sliding-window-median,"The median is the middle value in an ordered integer list. If the size of the list is even, there is no middle value. So the median is the mean of the two middle values.


	For examples, if arr = [2,3,4], the median is 3.
	For examples, if arr = [1,2,3,4], the median is (2 + 3) / 2 = 2.5.


You are given an integer array nums and an integer k. There is a sliding window of size k which is moving from the very left of the array to the very right. You can only see the k numbers in the window. Each time the sliding window moves right by one position.

Return the median array for each window in the original array. Answers within 10-5 of the actual value will be accepted.",['sliding-window'],Hard,1397,98,193013,75393,"[""Find Median from Data Stream""]","[('java', 20), ('python 3', 13), ('heap', 12), ('c++', 9), ('priority queue', 9), ('python', 8), ('c#', 7), ('cpp', 7), ('java-solution', 7), ('javascript', 5), ('multiset', 5), ('binary search', 3), ('binary-search', 3), ('heaps', 3), ('python3', 3), ('sortedcontainers', 3), ('two heaps', 3), ('arraylist', 2), ('easy-understanding', 2), ('easy-undestand', 2), ('fast', 2), ('kotlin', 2), ('priority-queue', 2), ('sliding window', 2), ('slidingwindow', 2), ('solution', 2), ('sortedlist', 2), ('treeset', 2), ('binarysearch', 1), ('bisect', 1), ('c# priority queue', 1), ('c# sortedset', 1), ('c++ solution', 1), ('easiest solution', 1), ('easy', 1), ('easy to understand', 1), ('easy understanding', 1), ('easy-to-understand', 1), ('easy-understand', 1), ('es6', 1), ('explanations', 1), ('fast-solution', 1), ('go lang', 1), ('heapq', 1), ('heaps algorithm', 1), ('intuitive', 1), ('java ac solution', 1), ('java solution', 1), ('lazy deletion', 1), ('lazy-deletion', 1), ('median', 1), ('min-heap', 1), ('nlogk', 1), ('ordered-list', 1), ('pointer', 1), ('priorityqueue', 1), ('ruby', 1), ('rust', 1), ('scala', 1), ('simple solution', 1), ('sliding-window', 1), ('sliding-window-median', 1), ('sorted-array', 1), ('sorted-list', 1), ('sortedset', 1), ('sorting', 1), ('swift', 1), ('tree set', 1), ('two pointers', 1), ('typescript', 1), ('vector', 1)]"
479,Largest Palindrome Product,https://leetcode.com/problems/largest-palindrome-product,"Given an integer n, return the largest palindromic integer that can be represented as the product of two n-digits integers. Since the answer can be very large, return it modulo 1337.",[],Hard,101,1377,60789,18080,[],"[('c', 1), ('csharp', 1), ('javascript', 1), ('math-proof', 1), ('rust', 1), ('solution-sharing-cpp', 1)]"
477,Total Hamming Distance,https://leetcode.com/problems/total-hamming-distance,"The Hamming distance between two integers is the number of positions at which the corresponding bits are different.

Given an integer array nums, return the sum of Hamming distances between all the pairs of the integers in nums.",['bit-manipulation'],Medium,1106,66,142104,72066,"[""Hamming Distance""]","[('bit manipulation', 14), ('java', 8), ('bit-manipulation', 7), ('c++', 7), ('cpp', 7), ('python 3', 6), ('python', 5), ('python3', 4), ('c#', 3), ('javascript', 3), ('constant memory', 2), ('golang', 2), ('iterative', 2), ('java-solution', 2), ('linear-time', 2), ('scala', 2), ('solution', 2), ('algorithms', 1), ('bit manipulation.', 1), ('bit operation', 1), ('bitwise', 1), ('c++11', 1), ('constant-space', 1), ('cpp easy', 1), ('cpp solution', 1), ('cpp-solution', 1), ('easy', 1), ('easy-to-understand', 1), ('easy-understand', 1), ('easytounderstand', 1), ('efficient', 1), ('explanations', 1), ('fast', 1), ('fuck noobs', 1), ('functional-programming', 1), ('google', 1), ('hamming distance', 1), ('help needed', 1), ('java solution', 1), ('kotlin', 1), ('linear time', 1), ('numpy', 1), ('order of n', 1), ('php', 1), ('rust', 1), ('short', 1), ('swift', 1), ('time-limit-exceeded', 1), ('very easy to understand', 1), ('xor', 1)]"
476,Number Complement,https://leetcode.com/problems/number-complement,"Given a positive integer num, output its complement number. The complement strategy is to flip the bits of its binary representation.",['bit-manipulation'],Easy,1169,87,324525,211556,[],"[('bit manipulation', 48), ('c++', 40), ('python', 33), ('cpp', 29), ('java', 24), ('javascript', 24), ('python 3', 21), ('one-liner', 17), ('bit-manipulation', 11), ('python3', 11), ('xor', 10), ('easy-to-understand', 8), ('c++ code', 7), ('cpp solution', 7), ('easy-understanding', 7), ('explained', 7), ('bitwise operation', 6), ('c', 6), ('golang', 5), ('java-solution', 5), ('js', 5), ('bit-shift', 4), ('c#', 4), ('es6', 4), ('one line', 4), ('easytounderstand', 3), ('go', 3), ('golang-solution', 3), ('java ac solution', 3), ('simple', 3), ('simple solution', 3), ('solution', 3), ('#bit-manipulation', 2), ('0ms', 2), ('100 speed', 2), ('bitwise', 2), ('complement', 2), ('constant time', 2), ('cpp easy', 2), ('easy to understand', 2), ('explanation', 2), ('fast-solution', 2), ('go-solution', 2), ('java bit-manipulation', 2), ('javascript solution', 2), ('oneliner', 2), ('ruby', 2), ('#c++', 1), ('#cpp', 1), ('#log2 #conditional', 1), ('#python', 1), ('#python3', 1), ('1-line', 1), ('100 bst', 1), ('100 faster', 1), ('100 faster cpp', 1), ('100 memory', 1), ('100 space', 1), ('3linessolution', 1), ('5 lines', 1), ('6.8 mb memory usage', 1), ('beats 100', 1), ('best-solution-ever', 1), ('binary', 1), ('bit mask', 1), ('bit masking', 1), ('bit operation', 1), ('bit shifting', 1), ('bit-mask', 1), ('bit-operation', 1), ('bitmanipulation', 1), ('bitmask', 1), ('bitmasking', 1), ('bitset', 1), ('bitshift', 1), ('bitwise operator', 1), ('bitwise operators', 1), ('bitwise-operators', 1), ('brute force', 1), ('built-in', 1), ('c++ easy to understand', 1), ('c++ solution', 1), ('clean', 1), ('clean-code', 1), ('code', 1), ('codedecks', 1), ('commented', 1), ('cp', 1), ('cpp 100', 1), ('cpp-solution', 1), ('cppsolution', 1), ('csharp', 1), ('easy', 1), ('easy sloution', 1), ('easy to read', 1), ('easy-solution', 1), ('easy-understand', 1), ('easy-undestand', 1), ('efficient solution', 1), ('explanation with code', 1), ('fast and simple', 1), ('faster', 1), ('faster than 100', 1), ('fastest', 1), ('fastest solution', 1), ('fuck noobs', 1), ('help', 1), ('javascrip', 1), ('javascript recursive', 1), ('linear time', 1), ('logarithm', 1), ('math', 1), ('math-solution', 1), ('mathematical', 1), ('maths', 1), ('mrmagician', 1), ('msb', 1), ('no builtin function', 1), ('no code', 1), ('nodejs', 1), ('onelinecode', 1), ('pyhton', 1), ('python2', 1), ('quick', 1), ('rust', 1), ('self-explanatory', 1), ('short', 1), ('shorter', 1), ('simple clear c++ solution', 1), ('simple explanation', 1), ('simple-solution', 1), ('solution-explaining', 1), ('solution-sharing-cpp', 1), ('string', 1), ('string-to-integer', 1), ('swift', 1), ('timed', 1), ('traversal', 1), ('uglycode', 1), ('upvote', 1), ('very simple', 1), ('walrus operator', 1)]"
475,Heaters,https://leetcode.com/problems/heaters,"Winter is coming! During the contest, your first job is to design a standard heater with a fixed warm radius to warm all the houses.

Every house can be warmed, as long as the house is within the heater's warm radius range. 

Given the positions of houses and heaters on a horizontal line, return the minimum radius standard of heaters so that those heaters could cover all houses.

Notice that all the heaters follow your radius standard, and the warm radius will the same.",['binary-search'],Medium,906,932,218279,73710,[],"[('binary search', 10), ('binary-search', 9), ('python', 7), ('python 3', 7), ('c++', 6), ('cpp', 6), ('java', 6), ('golang', 5), ('javascript', 5), ('c#', 3), ('easy-understanding', 3), ('binarysearch', 2), ('golang-solution', 2), ('iterators', 2), ('java-solution', 2), ('pointer', 2), ('python3', 2), ('ruby', 2), ('rust', 2), ('solution', 2), ('solution-cpp', 2), ('solution-sharing-cpp', 2), ('beginner friendly', 1), ('binary-tree', 1), ('brute force', 1), ('brute-force', 1), ('constant space', 1), ('cpp solution', 1), ('easy', 1), ('easy understand', 1), ('easy-undestand', 1), ('eazy', 1), ('explained', 1), ('extended-question', 1), ('fast and simple', 1), ('go-solution', 1), ('heapify', 1), ('heapq', 1), ('heaters', 1), ('java ac solution', 1), ('java binary search', 1), ('lambda', 1), ('linear time', 1), ('lower-bound', 1), ('nearest-neighbor', 1), ('problem-discussion', 1), ('python2', 1), ('simple', 1), ('simple solution', 1), ('sorting', 1), ('testcase error', 1), ('three-lines', 1), ('treeset', 1), ('two pointers', 1)]"
474,Ones and Zeroes,https://leetcode.com/problems/ones-and-zeroes,"You are given an array of binary strings strs and two integers m and n.

Return the size of the largest subset of strs such that there are at most m 0's and n 1's in the subset.

A set x is a subset of a set y if all elements of x are also elements of y.",['dynamic-programming'],Medium,1867,290,188284,81894,"[""Non-negative Integers without Consecutive Ones""]","[('dynamic programming', 31), ('dp', 29), ('c++', 19), ('memoization', 15), ('knapsack', 13), ('java', 12), ('python', 12), ('python 3', 8), ('cpp', 7), ('javascript', 7), ('python3', 7), ('explained', 6), ('recursion', 6), ('clean code', 4), ('dp-techqique', 4), ('dynamic-programming', 4), ('c#', 3), ('cpp solution', 3), ('easy', 3), ('ruby', 3), ('simple', 3), ('easy-to-understand', 2), ('easy-understanding', 2), ('explanation', 2), ('go', 2), ('golang', 2), ('java-solution', 2), ('top down dp', 2), ('video-explanation', 2), ('#474', 1), ('akku', 1), ('bottomup', 1), ('dfs', 1), ('dp python', 1), ('dp-programming', 1), ('easy to understand', 1), ('explanation of logic', 1), ('faster', 1), ('intuition', 1), ('intution', 1), ('iteration', 1), ('memoized', 1), ('mrmagician', 1), ('ones and zeros', 1), ('onesandzeros', 1), ('pyton', 1), ('recusion', 1), ('short coded', 1), ('simple clear c++ solution', 1), ('simple solution', 1), ('solution-explaining', 1), ('solution-sharing-cpp', 1), ('sorting', 1), ('swift', 1), ('ting', 1), ('topdown', 1), ('typescript', 1), ('upvote', 1)]"
473,Matchsticks to Square,https://leetcode.com/problems/matchsticks-to-square,"You are given an integer array matchsticks where matchsticks[i] is the length of the ith matchstick. You want to use all the matchsticks to make one square. You should not break any stick, but you can link them up, and each matchstick must be used exactly one time.

Return true if you can make this square and false otherwise.",['depth-first-search'],Medium,776,66,114806,43974,[],"[('dfs', 12), ('cpp', 4), ('java', 4), ('c++', 3), ('python', 3), ('backtracking', 2), ('bitset', 2), ('easy-understanding', 2), ('accepted', 1), ('backtrack', 1), ('binary search', 1), ('bisect', 1), ('bit-mask', 1), ('bitmask', 1), ('c#', 1), ('c++17', 1), ('cpp solution', 1), ('design-snake-game', 1), ('dfs with dp', 1), ('dp', 1), ('easy-explanation', 1), ('explained', 1), ('explained solution', 1), ('fast', 1), ('fast and simple', 1), ('golang', 1), ('javascript', 1), ('pruning', 1), ('solution', 1), ('swift', 1)]"
472,Concatenated Words,https://leetcode.com/problems/concatenated-words,"Given an array of strings words (without duplicates), return all the concatenated words in the given list of words.

A concatenated word is defined as a string that is comprised entirely of at least two shorter words in the given array.","['dynamic-programming', 'depth-first-search', 'trie']",Hard,1168,153,212029,92333,"[""Word Break II""]","[('trie', 21), ('dfs', 15), ('java', 15), ('python', 14), ('recursion', 11), ('javascript', 9), ('dp', 8), ('python 3', 7), ('c#', 6), ('c++', 6), ('dynamic programming', 5), ('cpp', 4), ('python3', 4), ('hashmap', 3), ('dynamic-programming', 2), ('easytounderstand', 2), ('memoization', 2), ('sets', 2), ('tries', 2), ('#dfs', 1), ('#dp', 1), ('backtracking', 1), ('bfs', 1), ('bottomup', 1), ('bug', 1), ('c++ code', 1), ('c++ easy to understand', 1), ('c++17', 1), ('cpp easy', 1), ('cpp-solution', 1), ('csharp', 1), ('curry', 1), ('deep-first-search', 1), ('depth first search', 1), ('dfs recursive', 1), ('dfs solution', 1), ('dfs-recursive', 1), ('dfs-topdown', 1), ('dictionary', 1), ('easy understand', 1), ('easy-understanding', 1), ('edgecases', 1), ('explained', 1), ('explanation of logic', 1), ('fast and simple', 1), ('golang', 1), ('hashing', 1), ('help needed', 1), ('last case', 1), ('leetcode bug', 1), ('map', 1), ('memorization', 1), ('optimized', 1), ('photo', 1), ('prefix tree', 1), ('python2', 1), ('questions', 1), ('recursive dp', 1), ('recusive', 1), ('set c++', 1), ('string', 1), ('string concatenation', 1), ('swift', 1), ('tle', 1), ('top down dp', 1), ('trie-dfs', 1)]"
468,Validate IP Address,https://leetcode.com/problems/validate-ip-address,"Given a string IP, return ""IPv4"" if IP is a valid IPv4 address, ""IPv6"" if IP is a valid IPv6 address or ""Neither"" if IP is not a correct IP of any type.

A valid IPv4 address is an IP in the form ""x1.x2.x3.x4"" where 0 <= xi <= 255 and xi cannot contain leading zeros. For example, ""192.168.1.1"" and ""192.168.1.0"" are valid IPv4 addresses but ""192.168.01.1"", while ""192.168.1.00"" and ""192.168@1.1"" are invalid IPv4 addresses.

A valid IPv6 address is an IP in the form ""x1:x2:x3:x4:x5:x6:x7:x8"" where:


	1 <= xi.length <= 4
	xi is a hexadecimal string which may contain digits, lower-case English letter ('a' to 'f') and upper-case English letters ('A' to 'F').
	Leading zeros are allowed in xi.


For example, ""2001:0db8:85a3:0000:0000:8a2e:0370:7334"" and ""2001:db8:85a3:0:0:8A2E:0370:7334"" are valid IPv6 addresses, while ""2001:0db8:85a3::8A2E:037j:7334"" and ""02001:0db8:85a3:0000:0000:8a2e:0370:7334"" are invalid IPv6 addresses.",['string'],Medium,475,1999,395144,99428,"[""IP to CIDR""]","[('java', 26), ('c++', 20), ('python', 18), ('python 3', 17), ('regex', 17), ('easy-to-understand', 16), ('cpp', 12), ('javascript', 12), ('simple solution', 11), ('c#', 9), ('java-solution', 8), ('golang', 6), ('python3', 5), ('regular expression', 5), ('split', 5), ('easy-understanding', 4), ('regexp', 4), ('regular-expression', 4), ('simple', 4), ('swift', 4), ('c++ code', 3), ('clean code', 3), ('easy', 3), ('easy-undestand', 3), ('ifelse', 3), ('ascii', 2), ('check', 2), ('csharp', 2), ('divide and conquer', 2), ('easytounderstand', 2), ('explained', 2), ('fastest', 2), ('ipaddress', 2), ('js', 2), ('kotlin', 2), ('pythonpython3', 2), ('string-operation', 2), ('100 space', 1), ('100 speed', 1), ('1ms', 1), ('8ms', 1), ('algorithms', 1), ('basic', 1), ('beats 100', 1), ('big o', 1), ('board-scan', 1), ('border cases', 1), ('c', 1), ('c# solutions', 1), ('c++ easy to understand', 1), ('c++ solution', 1), ('commented', 1), ('comments-added', 1), ('cpp solution', 1), ('dart', 1), ('design', 1), ('detailed explanation', 1), ('discussion', 1), ('easy to understand', 1), ('easy understand', 1), ('easy understanding', 1), ('easy-peasy', 1), ('easy-solition', 1), ('easy-to-follow', 1), ('easy-understand', 1), ('easysolution', 1), ('elegant', 1), ('error', 1), ('expalanation', 1), ('explanation', 1), ('explanation of logic', 1), ('facebook', 1), ('fast-solution', 1), ('functional programming', 1), ('help needed', 1), ('implementation', 1), ('intuitive', 1), ('isxdigit', 1), ('iterative', 1), ('java ac solution', 1), ('linq', 1), ('no builtin function', 1), ('not regex', 1), ('object-oriented', 1), ('one-pass', 1), ('php', 1), ('python python3', 1), ('python2', 1), ('readable code', 1), ('regex expression', 1), ('runtime-error', 1), ('scala', 1), ('simple-solution', 1), ('solution', 1), ('space-efficient', 1), ('sstream', 1), ('straight-forward', 1), ('string', 1), ('string manipulation', 1), ('string parsing', 1), ('stringbuffer', 1), ('strings manipulation', 1), ('swift5', 1), ('tokenization', 1), ('understandable', 1), ('validator', 1), ('video explaination', 1), ('video solution', 1), ('video-explanation', 1), ('with comments', 1), ('with documentation', 1)]"
467,Unique Substrings in Wraparound String,https://leetcode.com/problems/unique-substrings-in-wraparound-string,"We define the string s to be the infinite wraparound string of ""abcdefghijklmnopqrstuvwxyz"", so s will look like this:


	""...zabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcd...."".


Given a string p, return the number of unique non-empty substrings of p are present in s.",['dynamic-programming'],Medium,785,100,81865,29638,[],"[('dynamic programming', 7), ('c++', 5), ('python', 3), ('cpp', 2), ('dp', 2), ('explanation', 2), ('golang', 2), ('java', 2), ('python 3', 2), ('python3', 2), ('c#', 1), ('easy-understanding', 1), ('easy-undestand', 1), ('go-solution', 1), ('golang-solution', 1), ('solution-explaining', 1), ('solution-sharing-cpp', 1), ('string', 1), ('string-searching', 1), ('swift', 1), ('two pointer technique', 1), ('twopointer', 1)]"
466,Count The Repetitions,https://leetcode.com/problems/count-the-repetitions,"We define str = [s, n] as the string str which consists of the string s concatenated n times.


	For example, str == [""abc"", 3] ==""abcabcabc"".


We define that string s1 can be obtained from string s2 if we can remove some characters from s2 such that it becomes s1.


	For example, s1 = ""abc"" can be obtained from s2 = ""abdbec"" based on our definition by removing the bolded underlined characters.


You are given two strings s1 and s2 and two integers n1 and n2. You have the two strings str1 = [s1, n1] and str2 = [s2, n2].

Return the maximum integer m such that str = [str2, m] can be obtained from str1.",['dynamic-programming'],Hard,219,201,43167,12399,[],"[('python', 3), ('python 3', 2), ('#java', 1), ('c#', 1), ('c++', 1), ('c++ ac', 1), ('double', 1), ('fast and simple', 1), ('fast-solution', 1), ('python3', 1)]"
464,Can I Win,https://leetcode.com/problems/can-i-win,"In the ""100 game"" two players take turns adding, to a running total, any integer from 1 to 10. The player who first causes the running total to reach or exceed 100 wins.

What if we change the game so that players cannot re-use integers?

For example, two players might take turns drawing from a common pool of numbers from 1 to 15 without replacement until they reach a total >= 100.

Given two integers maxChoosableInteger and desiredTotal, return true if the first player to move can force a win, otherwise, return false. Assume both players play optimally.","['dynamic-programming', 'minimax']",Medium,1316,207,208638,62084,"[""Flip Game II"", ""Guess Number Higher or Lower II"", ""Predict the Winner""]","[('memoization', 8), ('c++', 7), ('dfs', 5), ('dp', 4), ('python', 4), ('cpp', 3), ('python 3', 3), ('bitmasking', 2), ('c#', 2), ('minimax', 2), ('solution-sharing-cpp', 2), ('swift', 2), ('#bitmasking', 1), ('#dynamic-programming', 1), ('#java', 1), ('bit masking', 1), ('bit set', 1), ('bit-manipulation', 1), ('bitmask', 1), ('bitwise operation', 1), ('c++ code', 1), ('caniwin', 1), ('combination', 1), ('depth-first-search', 1), ('dynamic programming', 1), ('explaination', 1), ('fast-solution', 1), ('frozenset', 1), ('iterative', 1), ('javascript', 1), ('js', 1), ('map', 1), ('missing-test-case', 1), ('python3', 1), ('readable', 1), ('recursion', 1), ('rust', 1), ('solution-explaining', 1), ('video', 1), ('wrong answer', 1), ('youtube', 1)]"
463,Island Perimeter,https://leetcode.com/problems/island-perimeter,"You are given row x col grid representing a map where grid[i][j] = 1 represents land and grid[i][j] = 0 represents water.

Grid cells are connected horizontally/vertically (not diagonally). The grid is completely surrounded by water, and there is exactly one island (i.e., one or more connected land cells).

The island doesn't have ""lakes"", meaning the water inside isn't connected to the water around the island. One cell is a square with side length 1. The grid is rectangular, width and height don't exceed 100. Determine the perimeter of the island.",['hash-table'],Easy,2714,140,403672,270082,"[""Max Area of Island"", ""Flood Fill"", ""Coloring A Border""]","[('java', 48), ('python', 39), ('c++', 34), ('python 3', 29), ('javascript', 23), ('dfs', 19), ('cpp', 18), ('python3', 16), ('java-solution', 11), ('c#', 10), ('simple solution', 9), ('c++ code', 6), ('dfs simple solution', 6), ('easy', 6), ('easy-understanding', 6), ('iterative', 6), ('simple', 6), ('cpp solution', 5), ('easy-undestand', 5), ('explained', 5), ('bfs', 4), ('brute force', 4), ('c', 4), ('easy to understand', 4), ('golang', 4), ('accepted', 3), ('dfs recursive', 3), ('javascript solution', 3), ('js', 3), ('matrix', 3), ('optimal', 3), ('straight-forward', 3), ('swift', 3), ('array', 2), ('brought-force', 2), ('constant space', 2), ('easy-to-understand', 2), ('easytounderstand', 2), ('explanation of logic', 2), ('fast-solution', 2), ('go', 2), ('iteratively', 2), ('loop', 2), ('python2', 2), ('recursive', 2), ('scala', 2), ('short', 2), ('2d-array', 1), ('99.63 faster', 1), ('algorithm', 1), ('algorithms', 1), ('amazon sde', 1), ('avnish', 1), ('beats 98', 1), ('beginner friendly', 1), ('bool', 1), ('breadth first search', 1), ('brute-force', 1), ('c++ easy to understand', 1), ('c++ solution', 1), ('clean-code', 1), ('clear', 1), ('concise', 1), ('counting', 1), ('cpp easy', 1), ('csharp', 1), ('depth first search', 1), ('description-error', 1), ('detailed-steps', 1), ('dfs-bfs', 1), ('diagram', 1), ('dictionaries', 1), ('dictionary', 1), ('direct', 1), ('easy-implementation', 1), ('easy-solution', 1), ('easy-understand', 1), ('error', 1), ('explaination', 1), ('fast', 1), ('fold', 1), ('for loop', 1), ('functional-programming', 1), ('generators', 1), ('graph', 1), ('graph theory', 1), ('grid', 1), ('hash table', 1), ('hashing', 1), ('heap-buffer-overflow', 1), ('help', 1), ('help needed', 1), ('intuition', 1), ('ios', 1), ('iteration', 1), ('itereative', 1), ('java ac solution', 1), ('javascrip', 1), ('javscript', 1), ('js javascript', 1), ('kotlinvim', 1), ('loop method', 1), ('map', 1), ('math', 1), ('math-solution', 1), ('maths', 1), ('misleading-problem', 1), ('no-hash', 1), ('o1space', 1), ('one-liner', 1), ('python bfs', 1), ('python bfs iterative', 1), ('recurision', 1), ('recursive-dfs', 1), ('ruby', 1), ('simpe', 1), ('simple clear c++ solution', 1), ('simple iteration', 1), ('simple-solution', 1), ('simplest', 1), ('slow', 1), ('solution-sharing-cpp', 1), ('straightforward', 1), ('sum', 1), ('time limit exceeded', 1), ('ugly', 1), ('vector 2d', 1), ('video solution', 1), ('video-explanation', 1), ('wrong-test-cases', 1)]"
462,Minimum Moves to Equal Array Elements II,https://leetcode.com/problems/minimum-moves-to-equal-array-elements-ii,"Given an integer array nums of size n, return the minimum number of moves required to make all array elements equal.

In one move, you can increment or decrement an element of the array by 1.",['math'],Medium,666,53,96548,52583,"[""Best Meeting Point"", ""Minimum Moves to Equal Array Elements""]","[('c++', 13), ('median', 7), ('python3', 6), ('cpp', 5), ('java', 5), ('python', 5), ('python 3', 4), ('easy-understanding', 3), ('javascript', 3), ('sort', 3), ('c#', 2), ('cpp easy', 2), ('cpp solution', 2), ('golang', 2), ('quickselect', 2), ('simple', 2), ('2-liner', 1), ('algorithms', 1), ('arrays', 1), ('binary-search', 1), ('c', 1), ('c++ code', 1), ('c++ solution', 1), ('clean code', 1), ('clear', 1), ('constant space', 1), ('easytounderstand', 1), ('explaination', 1), ('explained', 1), ('explanation', 1), ('fast', 1), ('in-place', 1), ('iterative', 1), ('java-solution', 1), ('javascrip', 1), ('lambda', 1), ('linear time', 1), ('linq', 1), ('math-proof', 1), ('moves', 1), ('nlogn time', 1), ('one-liner', 1), ('oneline', 1), ('optimal', 1), ('python2', 1), ('qsort', 1), ('quick select', 1), ('short', 1), ('sorted', 1), ('swift', 1), ('triangle inequality', 1)]"
461,Hamming Distance,https://leetcode.com/problems/hamming-distance,"The Hamming distance between two integers is the number of positions at which the corresponding bits are different.

Given two integers x and y, return the Hamming distance between them.",['bit-manipulation'],Easy,2182,178,539124,395115,"[""Number of 1 Bits"", ""Total Hamming Distance""]","[('bit manipulation', 64), ('c++', 52), ('java', 42), ('python', 42), ('cpp', 40), ('python 3', 28), ('xor', 28), ('javascript', 22), ('bit-manipulation', 20), ('java-solution', 17), ('easy-understanding', 15), ('golang', 15), ('c++ code', 13), ('python3', 11), ('c', 9), ('explained', 9), ('easy', 8), ('go', 7), ('one-liner', 7), ('simple', 7), ('bitwise operation', 6), ('c#', 6), ('cpp solution', 6), ('easy-undestand', 6), ('fast-solution', 5), ('hamming distance', 5), ('oneline', 5), ('bitwise', 4), ('go-solution', 4), ('golang-solution', 4), ('js', 4), ('simple solution', 4), ('solution', 4), ('100 faster', 3), ('easytounderstand', 3), ('fast', 3), ('fastest', 3), ('kotlin', 3), ('steps', 3), ('swift', 3), ('0ms', 2), ('beginner friendly', 2), ('binary', 2), ('binary-operation', 2), ('binarynumber', 2), ('bit-shift', 2), ('bitmanipulation', 2), ('bitset', 2), ('bitwise-operators', 2), ('c++11', 2), ('constant space', 2), ('constant time', 2), ('easy to understand', 2), ('easy-to-understand', 2), ('explanation of logic', 2), ('fast and simple', 2), ('hamming distance in c++', 2), ('hamming distance solution', 2), ('modulo', 2), ('pyhton', 2), ('ruby', 2), ('rust', 2), ('xor operation', 2), ('#0ms', 1), ('#bit-manipulation', 1), ('#c', 1), ('#easytounderstand', 1), ('#hammingdistance', 1), ('#programming', 1), ('#python', 1), ('#python 3', 1), ('0 ms speed', 1), ('1 line', 1), ('100 faster runtime', 1), ('100 speed', 1), ('2different ways', 1), ('6.2 memory', 1), ('algorithms', 1), ('assembly', 1), ('basic', 1), ('beating-100-submission', 1), ('beats 100', 1), ('best-solution', 1), ('best-solution-ever', 1), ('bit mask', 1), ('bit operation', 1), ('bit shifting', 1), ('brian-kernighan', 1), ('brute force', 1), ('c++ set', 1), ('c++ solution', 1), ('c++14', 1), ('clean code', 1), ('clean-efficient-code', 1), ('code', 1), ('commentary', 1), ('comments-added', 1), ('constant memory', 1), ('constant-space', 1), ('constant-time', 1), ('cpp easy', 1), ('cpp-solution', 1), ('csharp', 1), ('decimaltobinary convertor', 1), ('easiest solution', 1), ('easy understand', 1), ('easy undestanding', 1), ('easy-solition', 1), ('easy-understand', 1), ('easysolution', 1), ('effecient approach', 1), ('efficient solution', 1), ('elegant solution', 1), ('es6', 1), ('esay-understand', 1), ('explaination', 1), ('explanation', 1), ('fasterthan100', 1), ('fastest python solution', 1), ('fenwick-tree', 1), ('golag', 1), ('google', 1), ('hamming', 1), ('hamming weight', 1), ('if-else', 1), ('javascrip', 1), ('javascript solution', 1), ('javascriptes6', 1), ('kernighans algorithm', 1), ('kotlin-solution', 1), ('linear time', 1), ('mrmagician', 1), ('no bit manipulation', 1), ('one line', 1), ('one liner', 1), ('oneliner', 1), ('php', 1), ('php solution', 1), ('pythonic', 1), ('reduce', 1), ('right justify', 1), ('right-shift', 1), ('scala', 1), ('short', 1), ('silly', 1), ('simple approach', 1), ('simplest', 1), ('small', 1), ('smart', 1), ('stdlib', 1), ('stl', 1), ('stl algorithms', 1), ('time optimize', 1), ('tricky', 1), ('two-lines', 1), ('verbose', 1), ('very easy to understand', 1), ('video', 1)]"
460,LFU Cache,https://leetcode.com/problems/lfu-cache,"Design and implement a data structure for a Least Frequently Used (LFU) cache.

Implement the LFUCache class:


	LFUCache(int capacity) Initializes the object with the capacity of the data structure.
	int get(int key) Gets the value of the key if the key exists in the cache. Otherwise, returns -1.
	void put(int key, int value) Update the value of the key if present, or inserts the key if not already present. When the cache reaches its capacity, it should invalidate and remove the least frequently used key before inserting a new item. For this problem, when there is a tie (i.e., two or more keys with the same frequency), the least recently used key would be invalidated.


To determine the least frequently used key, a use counter is maintained for each key in the cache. The key with the smallest use counter is the least frequently used key.

When a key is first inserted into the cache, its use counter is set to 1 (due to the put operation). The use counter for a key in the cache is incremented either a get or put operation is called on it.",['design'],Hard,1978,152,290407,106555,"[""LRU Cache"", ""Design In-Memory File System""]","[('hashmap', 21), ('c++', 20), ('double-linked-list', 12), ('python', 11), ('javascript', 7), ('cpp', 6), ('java', 6), ('linkedlists', 5), ('python 3', 5), ('doubly linked list', 4), ('c#', 3), ('doubly-linked list', 3), ('java-solution', 3), ('ordereddict', 3), ('priority queue', 3), ('unordered map', 3), ('commented', 2), ('constant time', 2), ('detailed explanation', 2), ('doubly-linked-list', 2), ('golang', 2), ('heap', 2), ('kotlin', 2), ('lfu-cache', 2), ('linked-list', 2), ('linkedhashset', 2), ('list', 2), ('lru-cache', 2), ('python3', 2), ('solution-sharing-cpp', 2), ('unorderedmap', 2), ('100 speed', 1), ('accepted solution', 1), ('array', 1), ('brute force', 1), ('c', 1), ('c++ code', 1), ('chinese', 1), ('clean', 1), ('clean-efficient-code', 1), ('clear', 1), ('clear explanation', 1), ('comments-added', 1), ('cpp solution', 1), ('defaultdict', 1), ('design', 1), ('detailed', 1), ('dict', 1), ('dictonary', 1), ('dll', 1), ('easiest solution', 1), ('easytounderstand', 1), ('esay-understand', 1), ('explained', 1), ('explained solution', 1), ('explanation with code', 1), ('explanations', 1), ('fast', 1), ('go', 1), ('golang-solution', 1), ('hash map', 1), ('hash table', 1), ('hashtabel', 1), ('iterator', 1), ('iterator design pattern', 1), ('java ac solution', 1), ('java solution', 1), ('java solution sharing', 1), ('javascrip', 1), ('least-frequently-used', 1), ('lfu', 1), ('lfu-lru-cache', 1), ('linked list', 1), ('list of list', 1), ('lists', 1), ('mutliset', 1), ('object-oriented', 1), ('priorityqueue', 1), ('pythonic', 1), ('ruby', 1), ('rust', 1), ('scala', 1), ('set', 1), ('sets', 1), ('short code', 1), ('simple', 1), ('simple solution', 1), ('sort', 1), ('struct', 1), ('time complexity', 1), ('treeset', 1), ('tuple', 1), ('vector of queue', 1), ('video explanation', 1), ('youtube', 1)]"
459,Repeated Substring Pattern,https://leetcode.com/problems/repeated-substring-pattern,"Given a string s, check if it can be constructed by taking a substring of it and appending multiple copies of the substring together.",['string'],Easy,2382,245,443068,192024,"[""Implement strStr()"", ""Repeated String Match""]","[('java', 36), ('python 3', 31), ('kmp', 22), ('python', 22), ('c++', 21), ('cpp', 19), ('string', 14), ('javascript', 11), ('c#', 10), ('java-solution', 7), ('cpp solution', 6), ('explained', 6), ('golang', 5), ('python3', 5), ('regex', 5), ('simple solution', 5), ('easy-understanding', 4), ('simple', 4), ('substring', 4), ('easy', 3), ('gcd', 3), ('kmp algorithm', 3), ('math', 3), ('one-liner', 3), ('python2', 3), ('recursion', 3), ('string-operation', 3), ('#codeboy', 2), ('#easy', 2), ('#easy-understanding', 2), ('#python', 2), ('#python 3', 2), ('accepted', 2), ('brute force', 2), ('go', 2), ('golang-solution', 2), ('java ac solution', 2), ('js', 2), ('repeated-string', 2), ('solution', 2), ('swift', 2), ('100 faster runtime', 1), ('100 memory', 1), ('100 space', 1), ('1line', 1), ('9ms', 1), ('algorithms', 1), ('beat 100', 1), ('beat 99', 1), ('beats 100 percent', 1), ('bottom up dp', 1), ('brute force to optimal', 1), ('c# easy', 1), ('c++ code', 1), ('c++ solution', 1), ('c++11', 1), ('clear-understanding', 1), ('comments', 1), ('cpp-solution', 1), ('csharp', 1), ('division', 1), ('dp', 1), ('dynamic programming', 1), ('easy solution', 1), ('easy to understandd', 1), ('easy understand', 1), ('easy understanding', 1), ('easy-undestand', 1), ('easytounderstand', 1), ('efficient solution', 1), ('explaination', 1), ('factors', 1), ('failure function', 1), ('false solution', 1), ('fast', 1), ('fastest', 1), ('give stars and subscribe', 1), ('go-solution', 1), ('golang solution', 1), ('image', 1), ('images', 1), ('improved', 1), ('intuition based solution', 1), ('intuitive', 1), ('intutive', 1), ('java solution', 1), ('javascript brute force', 1), ('javascript solution', 1), ('js javascript', 1), ('knuth morris pratt', 1), ('logic exlpained', 1), ('logic explained', 1), ('math-proof', 1), ('math-solution', 1), ('modulo', 1), ('naive solution', 1), ('next array', 1), ('one line', 1), ('one-line', 1), ('oneliner', 1), ('pointer', 1), ('prime', 1), ('primes', 1), ('question need help', 1), ('rabin-karp', 1), ('readable', 1), ('recursion memoization', 1), ('recursive', 1), ('recursive solution', 1), ('regex expression', 1), ('regexmatch', 1), ('regular-expression', 1), ('repeated substring', 1), ('repeated-substring-pattern', 1), ('rolling-hash', 1), ('ruby', 1), ('self explanatory', 1), ('self-explanatory', 1), ('short', 1), ('simple java solution', 1), ('simple-solution', 1), ('simplest', 1), ('sliding-window', 1), ('solution-python', 1), ('solution-sharing-cpp', 1), ('straight-forward', 1), ('string parsing', 1), ('string rotation', 1), ('string-searching', 1), ('stringbuilder', 1), ('strings', 1), ('substring pattern', 1), ('substrings', 1), ('time-limit-exceeded-java', 1), ('timeout', 1), ('top down dp', 1), ('two-pointers', 1), ('unit-test', 1), ('upvote', 1), ('video explaination', 1), ('video solution', 1), ('z-algorithm', 1)]"
458,Poor Pigs,https://leetcode.com/problems/poor-pigs,"There are buckets buckets of liquid, where exactly one of the buckets is poisonous. To figure out which one is poisonous, you feed some number of (poor) pigs the liquid to see whether they will die or not. Unfortunately, you only have minutesToTest minutes to determine which bucket is poisonous.

You can feed the pigs according to these steps:


	Choose some live pigs to feed.
	For each pig, choose which buckets to feed it. The pig will consume all the chosen buckets simultaneously and will take no time.
	Wait for minutesToDie minutes. You may not feed any other pigs during this time.
	After minutesToDie minutes have passed, any pigs that have been fed the poisonous bucket will die, and all others will survive.
	Repeat this process until you run out of time.


Given buckets, minutesToDie, and minutesToTest, return the minimum number of pigs needed to figure out which bucket is poisonous within the allotted time.",['math'],Hard,551,1037,56654,30945,[],"[('math', 6), ('c++', 4), ('python 3', 4), ('java', 3), ('#easysolution', 2), ('#fast', 2), ('#fasterthan100percent', 2), ('#math', 2), ('1-liner', 2), ('detailed explanation', 2), ('explained', 2), ('javascript', 2), ('pig', 2), ('python', 2), ('python3', 2), ('questionable-test-case', 2), ('ruby', 2), ('#c++', 1), ('#cpp', 1), ('#java', 1), ('#java-solution', 1), ('100 space', 1), ('100 speed', 1), ('1line', 1), ('beats 95 percent', 1), ('c', 1), ('c#', 1), ('c++ solution', 1), ('clean code', 1), ('cpp', 1), ('cpp solution', 1), ('easy-understanding', 1), ('easytounderstand', 1), ('explained solution', 1), ('go-solution', 1), ('golang', 1), ('golang-solution', 1), ('illustration', 1), ('information theory', 1), ('logarithm', 1), ('logarithms', 1), ('math solution', 1), ('maths', 1), ('optimisation', 1), ('performance', 1), ('php', 1), ('picture explanation', 1), ('poor', 1), ('poor pig', 1), ('puzzle', 1), ('question', 1), ('recursion', 1), ('solution-share', 1), ('swift', 1), ('video explaination', 1), ('video-explanation', 1)]"
457,Circular Array Loop,https://leetcode.com/problems/circular-array-loop,"You are playing a game involving a circular array of non-zero integers nums. Each nums[i] denotes the number of indices forward/backward you must move if you are located at index i:


	If nums[i] is positive, move nums[i] steps forward, and
	If nums[i] is negative, move nums[i] steps backward.


Since the array is circular, you may assume that moving forward from the last element puts you on the first element, and moving backwards from the first element puts you on the last element.

A cycle in the array consists of a sequence of indices seq of length k where:


	Following the movement rules above results in the repeating index sequence seq[0] -> seq[1] -> ... -> seq[k - 1] -> seq[0] -> ...
	Every nums[seq[j]] is either all positive or all negative.
	k > 1


Return true if there is a cycle in nums, or false otherwise.","['array', 'two-pointers']",Medium,61,62,149176,45403,[],"[('python', 12), ('java', 7), ('two-pointers', 7), ('javascript', 4), ('c++', 3), ('cpp', 3), ('cycle detection', 3), ('fast-slow-pointers', 3), ('python3', 3), ('easy-understanding', 2), ('fast slow pointer', 2), ('js', 2), ('linear time', 2), ('python 3', 2), ('solution-sharing-python', 2), ('#2pointer', 1), ('#circular-array-loop', 1), ('#circularqueue', 1), ('#cycledetection', 1), ('#easy-understanding', 1), ('#java', 1), ('#simple', 1), ('#twopointer', 1), ('arrays', 1), ('c++ code', 1), ('cpp-solution', 1), ('cycle-detection', 1), ('detailed explanation', 1), ('dfs', 1), ('easy', 1), ('easy understanding', 1), ('easytounderstand', 1), ('efficient', 1), ('explaination', 1), ('explanation with code', 1), ('explanations', 1), ('golang', 1), ('graph', 1), ('hashset', 1), ('in-place', 1), ('iterative', 1), ('javascript solution', 1), ('kotlin', 1), ('linear', 1), ('linear-time', 1), ('question', 1), ('scala', 1), ('set', 1), ('simple python solution', 1), ('simple-solution', 1), ('slow fast pointer', 1), ('testcase error', 1), ('two pointers', 1)]"
456,132 Pattern,https://leetcode.com/problems/132-pattern,"Given an array of n integers nums, a 132 pattern is a subsequence of three integers nums[i], nums[j] and nums[k] such that i < j < k and nums[i] < nums[k] < nums[j].

Return true if there is a 132 pattern in nums, otherwise, return false.

Follow up: The O(n^2) is trivial, could you come up with the O(n logn) or the O(n) solution?",['stack'],Medium,2263,142,283886,87302,[],"[('java', 16), ('stack', 14), ('c++', 11), ('stacks', 8), ('javascript', 7), ('easy-understanding', 6), ('python', 6), ('java-solution', 5), ('python 3', 5), ('cpp', 4), ('cpp solution', 4), ('explained', 4), ('python3', 4), ('kotlin', 3), ('132 pattern', 2), ('binary-search-tree', 2), ('brute force', 2), ('c++ solution', 2), ('interval', 2), ('sets', 2), ('#easy-understand', 1), ('123 sequence', 1), ('132-pattern', 1), ('ac solution', 1), ('accepted', 1), ('algorithms', 1), ('beginner friendly', 1), ('binary search', 1), ('binary search tree', 1), ('brute force to optimal', 1), ('c#', 1), ('c++ monotonic stack', 1), ('dp', 1), ('easy', 1), ('easy to understand', 1), ('easy understanding', 1), ('explaination', 1), ('explained solution', 1), ('fast', 1), ('golang', 1), ('greedy', 1), ('greedy approach', 1), ('interval-merging', 1), ('intervals', 1), ('linear time', 1), ('monotonic-stack', 1), ('next-greater-element', 1), ('nlogn', 1), ('one pass', 1), ('pattern', 1), ('pattern matching', 1), ('ruby', 1), ('set', 1), ('simple', 1), ('simple clear c++ solution', 1), ('simple-solution', 1), ('slidingwindow', 1), ('solution', 1), ('stack vs. array', 1), ('stack-based', 1), ('sweepline', 1), ('thought-process', 1), ('treeset', 1), ('twopointer', 1), ('video explaination', 1), ('video solution', 1), ('video-explanation', 1), ('well-explained', 1), ('zea7ot', 1)]"
455,Assign Cookies,https://leetcode.com/problems/assign-cookies,"Assume you are an awesome parent and want to give your children some cookies. But, you should give each child at most one cookie.

Each child i has a greed factor g[i], which is the minimum size of a cookie that the child will be content with; and each cookie j has a size s[j]. If s[j] >= g[i], we can assign the cookie j to the child i, and the child i will be content. Your goal is to maximize the number of your content children and output the maximum number.",['greedy'],Easy,858,119,240571,121241,[],"[('greedy', 19), ('python', 19), ('c++', 17), ('java', 15), ('python 3', 13), ('cpp', 9), ('sorting', 9), ('javascript', 7), ('greedy approach', 5), ('python3', 5), ('simple', 4), ('sort', 4), ('c#', 3), ('cpp solution', 3), ('easy-understanding', 3), ('golang', 3), ('two-pointers', 3), ('java-solution', 2), ('sorted array', 2), ('swift', 2), ('two pointers', 2), ('100 speed', 1), ('7 lines', 1), ('algorithm', 1), ('array-sort', 1), ('assign-cookies', 1), ('assigncookies', 1), ('avnish', 1), ('c++ ac', 1), ('commented', 1), ('cpp easy', 1), ('easy', 1), ('easy-understand', 1), ('easy-undestand', 1), ('easytounderstand', 1), ('explained', 1), ('fast and simple', 1), ('faster', 1), ('fastest', 1), ('iterative', 1), ('iterator', 1), ('long live moms', 1), ('math', 1), ('mrmagician', 1), ('nlogn', 1), ('python3.8', 1), ('rust', 1), ('short', 1), ('simple solution', 1), ('solution', 1), ('two-pointer', 1), ('twopointer', 1), ('video', 1)]"
454,4Sum II,https://leetcode.com/problems/4sum-ii,"Given four integer arrays nums1, nums2, nums3, and nums4 all of length n, return the number of tuples (i, j, k, l) such that:


	0 <= i, j, k, l < n
	nums1[i] + nums2[j] + nums3[k] + nums4[l] == 0","['hash-table', 'binary-search']",Medium,1924,84,296381,162168,"[""4Sum""]","[('hashmap', 27), ('c++', 19), ('javascript', 16), ('python', 12), ('python 3', 11), ('cpp', 10), ('java', 9), ('python3', 7), ('hash map', 6), ('java-solution', 6), ('c#', 4), ('easy-to-understand', 4), ('explained', 4), ('binary search', 3), ('dictionary', 3), ('golang', 3), ('hash table', 3), ('ruby', 3), ('c++ solution', 2), ('easy', 2), ('easy-understand', 2), ('hashtable', 2), ('js', 2), ('map', 2), ('recursion', 2), ('simple', 2), ('unordered map', 2), ('#array', 1), ('#easy-understand', 1), ('#hashmap', 1), ('#hashmaps', 1), ('#java', 1), ('#python', 1), ('#two sum', 1), ('2sum', 1), ('4sum', 1), ('4sum ii', 1), ('4sumii', 1), ('binary-search', 1), ('binarysearch', 1), ('clean solution', 1), ('combination sum', 1), ('commented', 1), ('complementarity', 1), ('concise', 1), ('cpp solution', 1), ('dfs', 1), ('dictionaries', 1), ('dictonary', 1), ('divide', 1), ('double ended dfs', 1), ('double-end-dfs', 1), ('easy-understanding', 1), ('easy-undestand', 1), ('explaination', 1), ('explained solution', 1), ('explanation', 1), ('explanation of logic', 1), ('frequency count', 1), ('go', 1), ('go-solution', 1), ('golang-solution', 1), ('hash', 1), ('hash-table', 1), ('hashmaps', 1), ('intuitive', 1), ('iterative', 1), ('itertools product', 1), ('java ac solution', 1), ('javascript solution', 1), ('kotlin', 1), ('ksum', 1), ('map in c++', 1), ('maps', 1), ('math', 1), ('math-proof', 1), ('partial sum', 1), ('partial-sum', 1), ('python2', 1), ('rust', 1), ('scala', 1), ('simple-solution', 1), ('solution', 1), ('solution-sharing-cpp', 1), ('sum', 1), ('swift', 1), ('time-complexity-o', 1), ('time-cost', 1), ('two-lin', 1), ('two-pointers', 1), ('twosum', 1), ('understandable', 1), ('video-explanation', 1)]"
453,Minimum Moves to Equal Array Elements,https://leetcode.com/problems/minimum-moves-to-equal-array-elements,"Given an integer array nums of size n, return the minimum number of moves required to make all array elements equal.

In one move, you can increment n - 1 elements of the array by 1.",['math'],Easy,815,1175,179509,91681,"[""Minimum Moves to Equal Array Elements II""]","[('c++', 13), ('python', 9), ('cpp', 7), ('python 3', 7), ('java', 6), ('python3', 5), ('c#', 4), ('javascript', 4), ('math', 4), ('c++11', 2), ('cpp solution', 2), ('easy-understanding', 2), ('one-liner', 2), ('#python 3', 1), ('#wrong-test-case', 1), ('automata', 1), ('c++ solution', 1), ('c++14', 1), ('csharp', 1), ('description', 1), ('easy-understand', 1), ('easytounderstand', 1), ('explaination', 1), ('explanation', 1), ('finite state machine', 1), ('intuition based solution', 1), ('java-solution', 1), ('js', 1), ('kotlin', 1), ('math-solution', 1), ('nlogn', 1), ('optimisation', 1), ('performance', 1), ('php', 1), ('python2', 1), ('reduce', 1), ('ruby', 1), ('rust', 1), ('sequence', 1), ('series', 1), ('simple clear c++ solution', 1), ('simpler', 1)]"
452,Minimum Number of Arrows to Burst Balloons,https://leetcode.com/problems/minimum-number-of-arrows-to-burst-balloons,"There are some spherical balloons spread in two-dimensional space. For each balloon, provided input is the start and end coordinates of the horizontal diameter. Since it's horizontal, y-coordinates don't matter, and hence the x-coordinates of start and end of the diameter suffice. The start is always smaller than the end.

An arrow can be shot up exactly vertically from different points along the x-axis. A balloon with xstart and xend bursts by an arrow shot at x if xstart ≤ x ≤ xend. There is no limit to the number of arrows that can be shot. An arrow once shot keeps traveling up infinitely.

Given an array points where points[i] = [xstart, xend], return the minimum number of arrows that must be shot to burst all balloons.","['greedy', 'sort']",Medium,1711,63,226058,112653,"[""Meeting Rooms II"", ""Non-overlapping Intervals""]","[('greedy', 45), ('c++', 26), ('python 3', 25), ('greedy approach', 22), ('java', 21), ('python', 18), ('sorting', 18), ('cpp', 13), ('sort', 13), ('c#', 7), ('easy-understanding', 7), ('java-solution', 7), ('cpp solution', 6), ('explained', 6), ('javascript', 6), ('easy-to-understand', 5), ('simple', 5), ('easy', 4), ('greedy algorithm', 4), ('python3', 4), ('simple clear c++ solution', 4), ('simple solution', 4), ('sorted array', 3), ('activity selection', 2), ('c++ code', 2), ('comments-added', 2), ('cpp easy', 2), ('dp', 2), ('easytounderstand', 2), ('golang', 2), ('heap', 2), ('interval', 2), ('intervals', 2), ('java solution', 2), ('javascript solution', 2), ('nlogn', 2), ('overlap', 2), ('overlapping', 2), ('overlapping intervals', 2), ('priority queue', 2), ('ruby', 2), ('sort-function', 2), ('100 space', 1), ('100 speed', 1), ('algos explained', 1), ('approach', 1), ('beginner friendly', 1), ('c', 1), ('c programming', 1), ('c++ solution', 1), ('concise-solution', 1), ('cpp doubt', 1), ('csharp', 1), ('detailed explanation', 1), ('edge-case', 1), ('edgecases', 1), ('explaination', 1), ('explained solution', 1), ('explanation with logic', 1), ('fast', 1), ('fast and simple', 1), ('fully-commented', 1), ('give stars and subscribe', 1), ('interval scheduling', 1), ('interval-merging', 1), ('kotlinvim', 1), ('lambda', 1), ('meeting room', 1), ('memory-optimized', 1), ('merge-intervals', 1), ('overlapping subproblems', 1), ('performance', 1), ('php', 1), ('runtime', 1), ('scala', 1), ('simple java solution', 1), ('sliding window', 1), ('sorting-algorithms', 1), ('stefan-pochmann', 1), ('straight-forward', 1), ('swift', 1), ('swift5', 1), ('test cases', 1), ('typescript', 1), ('video explanation', 1), ('video solution', 1), ('video-explanation', 1)]"
451,Sort Characters By Frequency,https://leetcode.com/problems/sort-characters-by-frequency,"Given a string s, sort it in decreasing order based on the frequency of characters, and return the sorted string.","['hash-table', 'heap']",Medium,2325,149,390048,252565,"[""Top K Frequent Elements"", ""First Unique Character in a String"", ""Sort Array by Increasing Frequency""]","[('hashmap', 59), ('python', 55), ('java', 52), ('c++', 46), ('python 3', 43), ('priority queue', 33), ('cpp', 32), ('javascript', 27), ('heap', 23), ('python3', 20), ('easy-understanding', 16), ('easy-undestand', 15), ('map', 15), ('counter', 14), ('dictionary', 13), ('java-solution', 12), ('cpp solution', 10), ('sorting', 10), ('c#', 8), ('easy', 8), ('maxheap', 8), ('bucket sort', 7), ('c++ code', 7), ('golang', 6), ('heapq', 6), ('heaps', 6), ('priority-queue', 6), ('sorted', 6), ('swift', 6), ('max heap', 5), ('one-liner', 5), ('simple', 5), ('streams', 5), ('vector', 5), ('bucket-sort', 4), ('clean code', 4), ('faster', 4), ('frequency count', 4), ('hashmap and sorting', 4), ('hashtable', 4), ('javascript solution', 4), ('scala', 4), ('simple solution', 4), ('sort', 4), ('unordered map', 4), ('arrays', 3), ('c', 3), ('cpp easy', 3), ('es6', 3), ('explained', 3), ('explanation', 3), ('golang-solution', 3), ('hash table', 3), ('hashing', 3), ('java ac solution', 3), ('js', 3), ('lambda expression', 3), ('linq', 3), ('multimap', 3), ('priorityqueue', 3), ('python2', 3), ('stringbuilder', 3), ('#hashmap', 2), ('#python', 2), ('array', 2), ('array-sort', 2), ('c++ solution', 2), ('collection', 2), ('csharp', 2), ('dict', 2), ('easy to understand', 2), ('easy-solition', 2), ('fast', 2), ('fast and simple', 2), ('go-solution', 2), ('hash', 2), ('java solution', 2), ('kotlin', 2), ('linear time', 2), ('max-heap', 2), ('min heap', 2), ('optimisation', 2), ('ruby', 2), ('sort-function', 2), ('string-operation', 2), ('#counter', 1), ('#dictionary', 1), ('#easy-understanding', 1), ('#python 3', 1), ('10ms', 1), ('1line', 1), ('451', 1), ('accepted', 1), ('amazon sde', 1), ('api', 1), ('best', 1), ('best explaination', 1), ('big o of n', 1), ('c++ easy to understand', 1), ('c++17', 1), ('char compare', 1), ('charcode', 1), ('code', 1), ('collections.sort', 1), ('commented', 1), ('commented code', 1), ('comments', 1), ('comments-added', 1), ('comparator', 1), ('counting-sort', 1), ('cpp doubt', 1), ('defaultdict', 1), ('dictionary c#', 1), ('double-linked-list', 1), ('easy explain', 1), ('easy sloution', 1), ('easy-to-understand', 1), ('easysolution', 1), ('easytounderstand', 1), ('easyunderstanding', 1), ('error', 1), ('explaination', 1), ('explanation with code', 1), ('faster than 99.07', 1), ('fastest solution', 1), ('freqs-map', 1), ('frequency map', 1), ('functional', 1), ('functional programming', 1), ('functional-programming', 1), ('functors', 1), ('functorsorting', 1), ('go', 1), ('google interview', 1), ('hash map', 1), ('hash-table', 1), ('heaps algorithm', 1), ('help needed', 1), ('important', 1), ('interviews', 1), ('intuit', 1), ('java stream', 1), ('java-8', 1), ('java11', 1), ('java8', 1), ('java9', 1), ('javascriptes6', 1), ('lambda', 1), ('lambdas', 1), ('leetcode', 1), ('less memory', 1), ('lesson', 1), ('linked-list', 1), ('list', 1), ('map entry', 1), ('map-stl', 1), ('medium', 1), ('meiyaowen', 1), ('mostcommon', 1), ('mrmagician', 1), ('multiset', 1), ('nlogn', 1), ('one line', 1), ('optimised', 1), ('quick sort', 1), ('radix-sort', 1), ('rust', 1), ('short', 1), ('short code', 1), ('short solution', 1), ('shorthand', 1), ('simple approach', 1), ('simple explanation', 1), ('simple java solution', 1), ('simple python solution', 1), ('solution', 1), ('solution-share', 1), ('solution-sharing-python', 1), ('sortcharactersbyfrequency', 1), ('sorted array', 1), ('stable-sort', 1), ('stl', 1), ('straight-forward', 1), ('string', 1), ('string manipulation', 1), ('swiftsolution', 1), ('three-lines', 1), ('time complexity', 1), ('timsort', 1), ('tuple', 1), ('uber', 1), ('unique', 1), ('unorderedmap', 1), ('upvote', 1), ('very-intuitive', 1), ('video explanation', 1), ('well commented', 1), ('wrong answer', 1)]"
450,Delete Node in a BST,https://leetcode.com/problems/delete-node-in-a-bst,"Given a root node reference of a BST and a key, delete the node with the given key in the BST. Return the root node reference (possibly updated) of the BST.

Basically, the deletion can be divided into two stages:


	Search for a node to remove.
	If the node is found, delete the node.


Follow up: Can you solve it with time complexity O(height of tree)?",['tree'],Medium,2887,107,368962,168246,"[""Split BST""]","[('java', 36), ('python', 32), ('recursion', 31), ('c++', 25), ('python 3', 20), ('bst', 18), ('binary search tree', 17), ('recursive', 14), ('cpp', 13), ('iterative', 12), ('javascript', 11), ('easy-understanding', 8), ('cpp solution', 6), ('java-solution', 6), ('python3', 6), ('c#', 5), ('easy-to-understand', 5), ('0ms', 4), ('binary-tree', 4), ('delete-node-in-a-bst', 4), ('dfs', 4), ('easytounderstand', 4), ('recusion', 4), ('c', 3), ('comments', 3), ('swift', 3), ('100 speed', 2), ('binary-search', 2), ('binary-search-tree', 2), ('binarysearch', 2), ('c++ solution', 2), ('deletion', 2), ('explained', 2), ('java ac solution', 2), ('photo', 2), ('recursive easy', 2), ('simple solution', 2), ('solution', 2), ('successor', 2), ('tree', 2), ('tree traversal', 2), ('tree-traversal', 2), ('typescript', 2), ('algorithms', 1), ('beat 97', 1), ('beginner friendly', 1), ('bottom-up', 1), ('clean code', 1), ('cleancode', 1), ('cleanest', 1), ('comments added', 1), ('concise', 1), ('constant memory', 1), ('delete root helper', 1), ('depth-first-search', 1), ('dfs pre-order traversal', 1), ('dfs recursive', 1), ('dfs simple solution', 1), ('easy', 1), ('elegant', 1), ('expalanation', 1), ('explain', 1), ('explaination', 1), ('explanation of logic', 1), ('fast and simple', 1), ('hibbard-deletion', 1), ('implementation', 1), ('inorder', 1), ('inorder traversal', 1), ('intutive', 1), ('iteration', 1), ('iterative way', 1), ('iteratively', 1), ('java solution', 1), ('javascrip', 1), ('kotlin', 1), ('linear time', 1), ('mistakes', 1), ('mycodeschool', 1), ('optimal solution', 1), ('php', 1), ('pointer', 1), ('predecessor', 1), ('rajat', 1), ('rearrange', 1), ('recrusive', 1), ('recurision', 1), ('recurrsion', 1), ('recursive solution', 1), ('recursive-dfs', 1), ('recurssion', 1), ('rescursion', 1), ('rust', 1), ('searching', 1), ('simple', 1), ('simple clear c++ solution', 1), ('solution-sharing-python', 1), ('space', 1), ('straight-forward', 1), ('time', 1), ('understandable', 1), ('video', 1), ('video explaination', 1), ('video solution', 1)]"
449,Serialize and Deserialize BST,https://leetcode.com/problems/serialize-and-deserialize-bst,"Serialization is converting a data structure or object into a sequence of bits so that it can be stored in a file or memory buffer, or transmitted across a network connection link to be reconstructed later in the same or another computer environment.

Design an algorithm to serialize and deserialize a binary search tree. There is no restriction on how your serialization/deserialization algorithm should work. You need to ensure that a binary search tree can be serialized to a string, and this string can be deserialized to the original tree structure.

The encoded string should be as compact as possible.",['tree'],Medium,1933,96,279578,152159,"[""Serialize and Deserialize Binary Tree"", ""Find Duplicate Subtrees"", ""Serialize and Deserialize N-ary Tree""]","[('c++', 19), ('preorder traversal', 15), ('java', 12), ('python', 11), ('bfs', 10), ('binary search tree', 9), ('c#', 8), ('javascript', 8), ('python 3', 8), ('cpp', 7), ('bst', 5), ('java-solution', 5), ('c', 4), ('deserialize', 4), ('easy-understanding', 4), ('serialize', 4), ('dfs', 3), ('python3', 3), ('breadth first search', 2), ('concise', 2), ('dfs simple solution', 2), ('easytounderstand', 2), ('inorder traversal', 2), ('java ac solution', 2), ('php', 2), ('pre-order', 2), ('queue', 2), ('serialization', 2), ('solution-sharing-cpp', 2), ('1liner', 1), ('array', 1), ('beginner friendly', 1), ('bfs python', 1), ('bfs tle', 1), ('binary tree', 1), ('binary-search-tree', 1), ('binary-tree-input', 1), ('binarytree', 1), ('breadth-first-search', 1), ('bst insertion', 1), ('bst-deserialisation', 1), ('c programming', 1), ('c recursive', 1), ('c++ code', 1), ('c++ solution', 1), ('chartoint', 1), ('comma seperated', 1), ('compression', 1), ('cpp code', 1), ('cpp solution', 1), ('Deserialization', 1), ('dfs pre-order traversal', 1), ('dfs solution', 1), ('dfs-pre-order', 1), ('duplicates', 1), ('easy', 1), ('elegant', 1), ('explained', 1), ('faceebook', 1), ('golang', 1), ('golang-solution', 1), ('inttochar', 1), ('iterative way', 1), ('iterative-preorder', 1), ('java-8', 1), ('js', 1), ('json', 1), ('kotlin', 1), ('kotlin-solution', 1), ('kotlinvim', 1), ('linear time', 1), ('php solution', 1), ('pre-order traversal', 1), ('preorder', 1), ('preorder sequence', 1), ('python deque', 1), ('pythonic', 1), ('question-not-clear', 1), ('readable', 1), ('recursion', 1), ('recursive', 1), ('recursive easy', 1), ('ruby', 1), ('serialisation', 1), ('serialise', 1), ('simple clear c++ solution', 1), ('solution', 1), ('solution-sharing-python', 1), ('stack', 1), ('stack-based', 1), ('stars move the article up', 1), ('string-operation', 1), ('stringbuffer', 1), ('stringstream', 1), ('super-easy', 1), ('swift', 1), ('time-limit-exceeded-java', 1), ('tle', 1), ('tle cases', 1), ('tree', 1), ('tree traversal', 1), ('very-intuitive', 1), ('video explaination', 1), ('video solution', 1), ('video-explanation', 1), ('wrong-answer-java', 1)]"
448,Find All Numbers Disappeared in an Array,https://leetcode.com/problems/find-all-numbers-disappeared-in-an-array,"Given an array nums of n integers where nums[i] is in the range [1, n], return an array of all the integers in the range [1, n] that do not appear in nums.",['array'],Easy,4132,298,655504,368821,"[""First Missing Positive"", ""Find All Duplicates in an Array""]","[('python', 40), ('java', 39), ('c++', 36), ('javascript', 33), ('cpp', 28), ('python 3', 24), ('python3', 18), ('easy', 12), ('java-solution', 10), ('accepted', 9), ('easy-understanding', 9), ('no extra space', 8), ('set', 8), ('array', 7), ('golang', 7), ('linear time', 7), ('swift', 7), ('c#', 6), ('cpp solution', 6), ('javascript solution', 6), ('constant space', 5), ('sets', 5), ('simple', 5), ('easytounderstand', 4), ('fast', 4), ('c++ code', 3), ('easy-undestand', 3), ('fast and simple', 3), ('hashmap', 3), ('inplace', 3), ('swap', 3), ('accepted solution', 2), ('arrays', 2), ('c', 2), ('commented', 2), ('csharp', 2), ('cycle sort', 2), ('dictonary', 2), ('easy-to-understand', 2), ('explanation', 2), ('fast-solution', 2), ('go-solution', 2), ('golang-solution', 2), ('hash table', 2), ('kotlin', 2), ('linear-time', 2), ('ruby', 2), ('scala', 2), ('simple-solution', 2), ('sorting', 2), ('#javascript', 1), ('1 line', 1), ('1-line', 1), ('2 solutions', 1), ('4 lines', 1), ('ac solution', 1), ('algorithms', 1), ('alternatives', 1), ('arrayashashmap', 1), ('arraylist', 1), ('beginner friendly', 1), ('best', 1), ('bfs', 1), ('binary search', 1), ('binary-search', 1), ('bit-manipulation', 1), ('brute force', 1), ('brute force to optimal', 1), ('c code', 1), ('c++ easy to understand', 1), ('c++ solution', 1), ('clean', 1), ('constant memory', 1), ('count', 1), ('counting sort', 1), ('counting-sort', 1), ('cpp easy', 1), ('cpp with explanation', 1), ('creative', 1), ('cycle', 1), ('cyclic sort', 1), ('cyclic-sort', 1), ('dictionary', 1), ('easiest', 1), ('easy code', 1), ('easy sloution', 1), ('easy to understand', 1), ('easy-solition', 1), ('easy-understand', 1), ('efficient solution', 1), ('explained', 1), ('faster', 1), ('faster than 100', 1), ('follow up solved', 1), ('for the input 11', 1), ('full detailed explanation', 1), ('functional programming', 1), ('google phone screen', 1), ('graph', 1), ('hash-table', 1), ('hashset', 1), ('in place', 1), ('in-place', 1), ('ios', 1), ('iterative', 1), ('iterator', 1), ('java 8', 1), ('javascrip', 1), ('javascriptes6', 1), ('javascrpt', 1), ('js', 1), ('js javascript', 1), ('kotlin-solution', 1), ('linear-space', 1), ('list', 1), ('list comprehension', 1), ('lists', 1), ('malj', 1), ('map', 1), ('mark and sweep', 1), ('mark by negating', 1), ('maximum product of word length', 1), ('memory', 1), ('missingnumbers', 1), ('mrmagician', 1), ('naive', 1), ('o1', 1), ('o1 space', 1), ('o1space', 1), ('on', 1), ('one liner', 1), ('one-liner', 1), ('optimal', 1), ('php', 1), ('pyhton', 1), ('python2', 1), ('python3.8', 1), ('readable', 1), ('recursion', 1), ('rust', 1), ('short c++ code', 1), ('sign-flip', 1), ('simple clear c++ solution', 1), ('single pass', 1), ('single space', 1), ('slow', 1), ('solition-sharing', 1), ('solution', 1), ('sort', 1), ('sorted', 1), ('stl', 1), ('stl binary search', 1), ('swap-in-place', 1), ('time complexity', 1), ('time limit exceeded', 1), ('time-limit-exceeded-java', 1), ('two pointers', 1), ('typescript', 1), ('unique', 1), ('upvote', 1), ('vector', 1), ('well-explained', 1), ('xor', 1)]"
447,Number of Boomerangs,https://leetcode.com/problems/number-of-boomerangs,"You are given n points in the plane that are all distinct, where points[i] = [xi, yi]. A boomerang is a tuple of points (i, j, k) such that the distance between i and j equals the distance between i and k (the order of the tuple matters).

Return the number of boomerangs.","['hash-table', 'math']",Medium,467,760,139712,73428,"[""Line Reflection""]","[('python 3', 7), ('python', 6), ('c++', 4), ('golang', 3), ('javascript', 3), ('python3', 3), ('cpp', 2), ('easy-understanding', 2), ('hashmap', 2), ('beginnerfriendly', 1), ('beginners', 1), ('c#', 1), ('c++ code', 1), ('c++11', 1), ('commented', 1), ('cpp solution', 1), ('cpp-functional', 1), ('dict', 1), ('distance', 1), ('doubts', 1), ('explanation', 1), ('fast and simple', 1), ('java', 1), ('java-solution', 1), ('math', 1), ('one-liner', 1), ('php', 1), ('scala', 1), ('set', 1), ('solution-sharing-cpp', 1), ('solution-sharing-java', 1)]"
446,Arithmetic Slices II - Subsequence,https://leetcode.com/problems/arithmetic-slices-ii-subsequence,"Given an integer array nums, return the number of all the arithmetic subsequences of nums.

A sequence of numbers is called arithmetic if it consists of at least three elements and if the difference between any two consecutive elements is the same.


	For example, [1, 3, 5, 7, 9], [7, 7, 7, 7], and [3, -1, -5, -9] are arithmetic sequences.
	For example, [1, 1, 2, 5, 7] is not an arithmetic sequence.


A subsequence of an array is a sequence that can be formed by removing some elements (possibly none) of the array.


	For example, [2,5,10] is a subsequence of [1,2,1,2,4,1,5,10].


The answer is guaranteed to fit in 32-bit integer.",['dynamic-programming'],Hard,696,66,74814,25217,"[""Arithmetic Slices""]","[('c++', 3), ('dynamic programming', 3), ('dynamic-programming', 3), ('java', 3), ('memoization', 2), ('python', 2), ('2d map', 1), ('7 lines', 1), ('binary-search', 1), ('cpp', 1), ('cpp solution', 1), ('cpp-solution', 1), ('dfs-iterative', 1), ('dp', 1), ('easy', 1), ('explained', 1), ('explanation', 1), ('fast', 1), ('map', 1), ('readable', 1), ('solution', 1), ('solution-explaining', 1), ('solution-share', 1), ('solution-sharing-cpp', 1), ('tabulation', 1)]"
445,Add Two Numbers II,https://leetcode.com/problems/add-two-numbers-ii,"You are given two non-empty linked lists representing two non-negative integers. The most significant digit comes first and each of their nodes contains a single digit. Add the two numbers and return the sum as a linked list.

You may assume the two numbers do not contain any leading zero, except the number 0 itself.",['linked-list'],Medium,2318,199,416591,236099,"[""Add Two Numbers"", ""Add Two Polynomials Represented as Linked Lists""]","[('python', 45), ('c++', 42), ('java', 42), ('python 3', 34), ('stacks', 33), ('cpp', 30), ('easy-understanding', 22), ('javascript', 19), ('python3', 18), ('stack', 17), ('recursion', 15), ('linked-list', 14), ('linkedlists', 10), ('java-solution', 9), ('c#', 7), ('cpp solution', 7), ('recursive', 7), ('easy', 6), ('easy-to-understand', 6), ('explained', 6), ('golang', 6), ('easytounderstand', 5), ('fast-solution', 5), ('linked list', 5), ('simple', 5), ('swift', 5), ('c', 4), ('linkedlist', 4), ('recurision', 4), ('reverse', 4), ('add two numbers ii', 3), ('clean code', 3), ('constant space', 3), ('easy to understand', 3), ('iterative', 3), ('java ac solution', 3), ('linear time', 3), ('listnode', 3), ('simple clear c++ solution', 3), ('simple solution', 3), ('string', 3), ('addtwonumbers', 2), ('c++ solution', 2), ('clean', 2), ('easy-undestand', 2), ('efficient solution', 2), ('fast and simple', 2), ('follow-up', 2), ('golang-solution', 2), ('kotlin', 2), ('php', 2), ('python2', 2), ('recusion', 2), ('reverse list', 2), ('solution', 2), ('stack-based', 2), ('swift5', 2), ('#java #countnsay', 1), ('#linkedlist', 1), ('#on', 1), ('100 memory', 1), ('2 approaches', 1), ('90+', 1), ('99.5 faster', 1), ('accepted', 1), ('accepted solution', 1), ('add numbers', 1), ('add-two-numbers-ii', 1), ('algorithms', 1), ('array', 1), ('beginner friendly', 1), ('bool-array', 1), ('c++11', 1), ('c++14', 1), ('c++17', 1), ('carry-in-addition', 1), ('comments', 1), ('comments-added', 1), ('constant time', 1), ('csharp', 1), ('debug', 1), ('deque', 1), ('easy code', 1), ('easy understanding', 1), ('easy-understand', 1), ('explained solution', 1), ('explanation with logic', 1), ('faster', 1), ('fastest', 1), ('functors', 1), ('go-solution', 1), ('heap free of use error', 1), ('in-place', 1), ('iteration', 1), ('javascript solution', 1), ('kotlinvim', 1), ('less-memory', 1), ('linear-space', 1), ('linear-time', 1), ('linked-list-cycle', 1), ('linked-lists', 1), ('linkedhashset', 1), ('list', 1), ('matching', 1), ('math', 1), ('memory optimized', 1), ('modular', 1), ('mrmagician', 1), ('must read', 1), ('naive solution', 1), ('no extra data structure', 1), ('non-recursive', 1), ('o of n solution', 1), ('optimisation', 1), ('performance', 1), ('php solution', 1), ('pythonpython3', 1), ('pyton', 1), ('recursive approach', 1), ('recursive solution', 1), ('reverse the list', 1), ('rust', 1), ('self-explanatory', 1), ('short code', 1), ('single-linked-list', 1), ('solution-explaining', 1), ('solution-python', 1), ('space 100', 1), ('stack vs. array', 1), ('strings', 1), ('two-lines', 1), ('unique', 1), ('upvote', 1), ('using stack', 1), ('vector', 1), ('video', 1), ('video explanation', 1), ('video solution', 1), ('video-explanation', 1), ('well-named variables', 1), ('whiteboard', 1)]"
443,String Compression,https://leetcode.com/problems/string-compression,"Given an array of characters chars, compress it using the following algorithm:

Begin with an empty string s. For each group of consecutive repeating characters in chars:


	If the group's length is 1, append the character to s.
	Otherwise, append the character followed by the group's length.


The compressed string s should not be returned separately, but instead be stored in the input character array chars. Note that group lengths that are 10 or longer will be split into multiple characters in chars.

After you are done modifying the input array, return the new length of the array.
 

Follow up:
Could you solve it using only O(1) extra space?",['string'],Medium,1284,3239,379391,168244,"[""Count and Say"", ""Encode and Decode Strings"", ""Design Compressed String Iterator"", ""Decompress Run-Length Encoded List""]","[('python', 36), ('c++', 25), ('python 3', 24), ('java', 22), ('javascript', 20), ('cpp', 18), ('java-solution', 13), ('constant space', 10), ('two-pointers', 9), ('easy', 8), ('python3', 8), ('easy-understanding', 6), ('inplace', 6), ('linear time', 6), ('c#', 5), ('c', 4), ('cpp solution', 4), ('easy-to-understand', 4), ('easy-undestand', 4), ('simple', 4), ('string', 4), ('string compression', 4), ('in-place', 3), ('js', 3), ('two pointers', 3), ('1ms', 2), ('easytounderstand', 2), ('explained', 2), ('golang', 2), ('help needed', 2), ('iterative', 2), ('no-improvement', 2), ('question-not-clear', 2), ('single pass', 2), ('straight-forward', 2), ('string-to-integer', 2), ('two-pointer', 2), ('#best', 1), ('#c++', 1), ('#cpp', 1), ('#easy', 1), ('#easy-understand', 1), ('#easy-understanding', 1), ('#easysolution', 1), ('#kotlin', 1), ('#python', 1), ('#python3', 1), ('0ms', 1), ('0ms runtime', 1), ('100 faster runtime', 1), ('100 space', 1), ('100 speed', 1), ('99 faster', 1), ('beginner friendly', 1), ('c programming', 1), ('clean code', 1), ('collections', 1), ('commentary', 1), ('comments added', 1), ('concise', 1), ('constant memory', 1), ('csharp', 1), ('easy to read', 1), ('easy understand', 1), ('easy-understand', 1), ('efficient', 1), ('efficient solution', 1), ('esay-uderstand', 1), ('fast and simple', 1), ('fast-solution', 1), ('give stars if you like', 1), ('go lang', 1), ('go-solution', 1), ('golang-solution', 1), ('i', 1), ('if-else', 1), ('in place', 1), ('interview preparation', 1), ('java solution', 1), ('javascript solution', 1), ('just read', 1), ('kotlin', 1), ('kotlinvim', 1), ('linear', 1), ('linear-time', 1), ('no extra space', 1), ('on', 1), ('one-pointer', 1), ('optimal', 1), ('pointer', 1), ('python2', 1), ('python3.8', 1), ('readable', 1), ('recursive', 1), ('ruby', 1), ('self-explanatory', 1), ('simple solution', 1), ('simplest', 1), ('sliding window', 1), ('sliding-window', 1), ('slidingwindow', 1), ('solition-sharing', 1), ('solution', 1), ('solution-explaining', 1), ('splice', 1), ('string-operation', 1), ('stringcompression', 1), ('strings', 1), ('swift', 1), ('test-case', 1), ('tricky', 1), ('two pointer', 1), ('typescript', 1), ('unit-test', 1), ('while', 1), ('wrong answer', 1), ('wrong output', 1), ('wrong-solution', 1)]"
442,Find All Duplicates in an Array,https://leetcode.com/problems/find-all-duplicates-in-an-array,"Given an integer array nums of length n where all the integers of nums are in the range [1, n] and each integer appears once or twice, return an array of all the integers that appears twice.",['array'],Medium,3544,183,389602,269904,"[""Find All Numbers Disappeared in an Array""]","[('c++', 47), ('java', 47), ('cpp', 32), ('python', 31), ('javascript', 23), ('python 3', 23), ('java-solution', 20), ('easy-understanding', 18), ('array', 15), ('python3', 12), ('c#', 11), ('linear time', 11), ('constant space', 10), ('cpp solution', 9), ('easy', 8), ('explained', 8), ('hashmap', 7), ('counter', 5), ('easy code', 5), ('easytounderstand', 5), ('solution', 5), ('sorted array', 5), ('cyclic-sort', 4), ('easy-to-understand', 4), ('javascript solution', 4), ('video explanation', 4), ('arraylist', 3), ('arrays', 3), ('best solution', 3), ('constant memory', 3), ('explaination', 3), ('golang', 3), ('hashset', 3), ('java ac solution', 3), ('simple', 3), ('simple solution', 3), ('swap', 3), ('vector', 3), ('90', 2), ('c', 2), ('c#-solution', 2), ('clean code', 2), ('cpp easy', 2), ('detailed explanation', 2), ('dictionary', 2), ('easiest', 2), ('easy-undestand', 2), ('javascipt', 2), ('js', 2), ('kotlin', 2), ('scala', 2), ('single pass', 2), ('swift', 2), ('two-pointers', 2), ('typescript', 2), ('#442', 1), ('1 liner', 1), ('abs', 1), ('algorithms', 1), ('array-sort', 1), ('arrayashashmap', 1), ('beginner friendly', 1), ('best cpp', 1), ('best cpp solution', 1), ('best solution in c++', 1), ('bigo', 1), ('binary search', 1), ('bit masking', 1), ('bitwise operation', 1), ('brute force', 1), ('brute force to optimal', 1), ('bucket sort', 1), ('c++ ac', 1), ('c++ code', 1), ('clear', 1), ('code-comments', 1), ('comments', 1), ('commnted', 1), ('complex number', 1), ('concept', 1), ('counting-sort', 1), ('cpp doubt', 1), ('cpp easy-understanding', 1), ('csharp', 1), ('cycle sort', 1), ('dfs', 1), ('dfs-iterative', 1), ('duplicate values', 1), ('duplicates', 1), ('duplicates in array', 1), ('dynamic programming', 1), ('easier to understand', 1), ('easy-solition', 1), ('easy-understand', 1), ('efficient solution', 1), ('elegant', 1), ('esay-understand', 1), ('exception', 1), ('expained', 1), ('expalanation', 1), ('explain', 1), ('explanation', 1), ('explanation with logic', 1), ('fast', 1), ('fast and simple', 1), ('faster than 95.46', 1), ('filter', 1), ('findduplicatesinarray', 1), ('hash', 1), ('hash table', 1), ('hashing algorithm', 1), ('hashtable', 1), ('in-place', 1), ('index', 1), ('indexes', 1), ('intutive', 1), ('iterative', 1), ('iteratively', 1), ('java simple', 1), ('java-8', 1), ('javasript', 1), ('lambda', 1), ('limited', 1), ('linear', 1), ('linear-complexity', 1), ('linear-scan', 1), ('linear-space', 1), ('linear-time', 1), ('linq', 1), ('list', 1), ('map', 1), ('math.abs', 1), ('memory-efficient', 1), ('most optimal solution', 1), ('o1space', 1), ('one liner', 1), ('one-liner', 1), ('optimal', 1), ('php', 1), ('pictorial', 1), ('python 2', 1), ('python2', 1), ('radix-sort', 1), ('range-property', 1), ('ruby', 1), ('rust', 1), ('sets', 1), ('sign-flip', 1), ('solution-java', 1), ('solution-sharing-cpp', 1), ('sorting', 1), ('stl vector', 1), ('stream', 1), ('swap sort', 1), ('swift5', 1), ('test-cases', 1), ('traversal', 1), ('two-pass', 1), ('video', 1), ('video solution', 1), ('video-explanation', 1), ('xor', 1)]"
441,Arranging Coins,https://leetcode.com/problems/arranging-coins,"You have n coins and you want to build a staircase with these coins. The staircase consists of k rows where the ith row has exactly i coins. The last row of the staircase may be incomplete.

Given the integer n, return the number of complete rows of the staircase you will build.","['math', 'binary-search']",Easy,941,789,450280,192202,[],"[('python', 30), ('c++', 29), ('java', 26), ('cpp', 25), ('python 3', 20), ('math', 19), ('javascript', 17), ('binary-search', 16), ('binary search', 15), ('python3', 14), ('java-solution', 13), ('math-solution', 13), ('easy-understanding', 9), ('easy-to-understand', 8), ('cpp solution', 7), ('explained', 6), ('binarysearch', 5), ('easy-undestand', 5), ('one-liner', 5), ('c#', 4), ('c++ code', 4), ('constant time', 4), ('golang', 4), ('python2', 4), ('easy', 3), ('easytounderstand', 3), ('go', 3), ('maths', 3), ('simple solution', 3), ('swift', 3), ('1 line', 2), ('c', 2), ('c++11', 2), ('cpp easy', 2), ('easy-solution', 2), ('explanation', 2), ('fast', 2), ('golang-solution', 2), ('logarithmic time', 2), ('math solution', 2), ('math.sqrt', 2), ('quadratic', 2), ('quadratic equation', 2), ('sequence', 2), ('short', 2), ('simple', 2), ('#easy-understand', 1), ('#python', 1), ('#python3', 1), ('1-line solution', 1), ('1-liner', 1), ('100 space', 1), ('100 speed', 1), ('441', 1), ('4line', 1), ('ap series', 1), ('arranging-coins', 1), ('beginner friendly', 1), ('binary search math', 1), ('binary search python', 1), ('binary-search-explanation', 1), ('clean code', 1), ('commetend', 1), ('complexity-analysis', 1), ('constant space', 1), ('csharp', 1), ('different solutions', 1), ('discrete math', 1), ('dynamic programming', 1), ('easy to understand', 1), ('easy-peasy', 1), ('easy-solition', 1), ('easysolution', 1), ('efficient solution', 1), ('error', 1), ('explain', 1), ('fast and simple', 1), ('fastest solution', 1), ('formula', 1), ('how-to-code-it', 1), ('integer', 1), ('iterative', 1), ('iterator', 1), ('java ac solution', 1), ('js', 1), ('logsqrtn', 1), ('loop', 1), ('mathematic', 1), ('oneline', 1), ('overflow', 1), ('partial-sum', 1), ('pyhton3', 1), ('python binary seach', 1), ('python math', 1), ('pythonpython3', 1), ('recursive', 1), ('recursive solution', 1), ('recursively', 1), ('runtime error', 1), ('rust', 1), ('simple clear c++ solution', 1), ('solition-sharing', 1), ('solution', 1), ('straight-forward', 1), ('suggestion', 1), ('sum of n natural number', 1), ('sum of series', 1), ('swift5', 1), ('video', 1), ('video-explanation', 1), ('while-loop', 1), ('whileloop', 1)]"
440,K-th Smallest in Lexicographical Order,https://leetcode.com/problems/k-th-smallest-in-lexicographical-order,"Given two integers n and k, return the kth lexicographically smallest integer in the range [1, n].",[],Hard,418,61,50568,15129,[],"[('cpp', 2), ('math', 2), ('bucket', 1), ('c#', 1), ('easy-understanding', 1), ('fast and simple', 1), ('golang', 1), ('k-th-smallest-in-lexicographic', 1), ('need-help', 1), ('python', 1), ('python 3', 1), ('recursive', 1), ('scala', 1), ('solution', 1), ('trees', 1)]"
438,Find All Anagrams in a String,https://leetcode.com/problems/find-all-anagrams-in-a-string,"Given two strings s and p, return an array of all the start indices of p's anagrams in s. You may return the answer in any order.",['hash-table'],Medium,4135,203,781862,354296,"[""Valid Anagram"", ""Permutation in String""]","[('sliding-window', 66), ('slidingwindow', 51), ('java', 42), ('python', 40), ('python 3', 29), ('c++', 28), ('javascript', 24), ('cpp', 18), ('sliding window', 15), ('hashmap', 14), ('c#', 13), ('python3', 13), ('java-solution', 10), ('cpp solution', 7), ('easy-understanding', 7), ('hash', 7), ('linear time', 7), ('anagrams', 6), ('counter', 6), ('easy-to-understand', 5), ('hash table', 5), ('kotlin', 5), ('simple solution', 5), ('sorting', 5), ('string', 5), ('two-pointers', 5), ('c++ code', 4), ('comments', 4), ('dict', 4), ('easy', 4), ('javascript solution', 4), ('slide window', 4), ('easytounderstand', 3), ('explained', 3), ('linear-time', 3), ('map', 3), ('pyhton 3', 3), ('rolling-hash', 3), ('unordered map', 3), ('algorithms', 2), ('array', 2), ('constant space', 2), ('cpp easy', 2), ('dictionary', 2), ('easy-understand', 2), ('easy-undestand', 2), ('faceebook', 2), ('golang', 2), ('linear', 2), ('math', 2), ('rust', 2), ('scala', 2), ('simple', 2), ('strings', 2), ('vector', 2), ('window', 2), ('#dictionary', 1), ('#easy-understanding', 1), ('#easysolution', 1), ('#hashmaps', 1), ('100 space', 1), ('absolute value', 1), ('algos explained', 1), ('anagram', 1), ('ascii', 1), ('beats 98 pc', 1), ('best-solution-ever', 1), ('brute force', 1), ('bytes', 1), ('c++ easy to understand', 1), ('closure', 1), ('codingtuting', 1), ('commented', 1), ('commented code', 1), ('comments added', 1), ('constant-space', 1), ('counting sort', 1), ('csharp', 1), ('data structures', 1), ('dynamic programming', 1), ('efficient', 1), ('elegant', 1), ('elegant solution', 1), ('es6', 1), ('explaination', 1), ('explanation of logic', 1), ('fast', 1), ('frequency count', 1), ('generator', 1), ('golang-solution', 1), ('hash map', 1), ('hashing', 1), ('hashing algorithm', 1), ('hashmaps', 1), ('hashtable', 1), ('help needed', 1), ('histogram', 1), ('inefficient', 1), ('intuitive', 1), ('java-simple-clean-solution', 1), ('jigneshpanchal', 1), ('js', 1), ('keep it simple', 1), ('map-stl', 1), ('min window substring', 1), ('no extra space', 1), ('olens+lenp', 1), ('perfect score', 1), ('php', 1), ('presum', 1), ('probabilisitic', 1), ('pure-c', 1), ('pyhton', 1), ('pythno3', 1), ('python3.8', 1), ('pythonpython3', 1), ('pytyhon', 1), ('reverse-engineer', 1), ('robinhood', 1), ('ruby', 1), ('share java solution', 1), ('share-solution', 1), ('short', 1), ('signature', 1), ('simplest', 1), ('single pass', 1), ('sliding', 1), ('sliding hash', 1), ('sliding window algorithm', 1), ('sliding-window-maximum', 1), ('stringbuilder', 1), ('structured', 1), ('swift', 1), ('two pointer technique', 1), ('two pointers', 1), ('two-pointer', 1), ('unordered set', 1), ('video explanation', 1), ('video solution', 1), ('visualization', 1)]"
437,Path Sum III,https://leetcode.com/problems/path-sum-iii,"Given the root of a binary tree and an integer targetSum, return the number of paths where the sum of the values along the path equals targetSum.

The path does not need to start or end at the root or a leaf, but it must go downwards (i.e., traveling only from parent nodes to child nodes).",['tree'],Medium,5063,323,551742,266880,"[""Path Sum"", ""Path Sum II"", ""Path Sum IV"", ""Longest Univalue Path""]","[('dfs', 43), ('c++', 36), ('java', 28), ('python', 28), ('cpp', 23), ('recursion', 20), ('python 3', 18), ('prefix sum', 17), ('tree-traversal', 11), ('hashmap', 10), ('javascript', 9), ('java-solution', 7), ('recursive', 7), ('path sum iii', 6), ('bfs', 5), ('cpp solution', 5), ('dfs simple solution', 5), ('golang', 5), ('binary-tree', 4), ('c#', 4), ('easy-understanding', 4), ('easytounderstand', 4), ('python3', 4), ('tree traversal', 4), ('dfs recursive', 3), ('iterative', 3), ('preorder traversal', 3), ('recusion', 3), ('subarray sum equals k', 3), ('swift', 3), ('trees', 3), ('100 faster', 2), ('arraylist', 2), ('counter', 2), ('depth first search', 2), ('dfs-bfs', 2), ('dfs-topdown', 2), ('dictionary', 2), ('dp', 2), ('easy to understand', 2), ('easy-to-understand', 2), ('easy-understand', 2), ('easy-undestand', 2), ('go-solution', 2), ('golang-solution', 2), ('hashing', 2), ('linear time', 2), ('map', 2), ('path sum 3', 2), ('path-sum', 2), ('presum', 2), ('queue', 2), ('recurision', 2), ('recursive easy', 2), ('recurssion', 2), ('ruby', 2), ('solution', 2), ('stack', 2), ('tree', 2), ('#437', 1), ('2-lines', 1), ('algorithms', 1), ('amazon interview', 1), ('analysis', 1), ('backtrack', 1), ('backtracking', 1), ('beating-100-submission', 1), ('beginner friendly', 1), ('bfs+dfs', 1), ('binary search', 1), ('binary tree', 1), ('breadth first search', 1), ('c++ code', 1), ('c++ solution', 1), ('cache', 1), ('clean', 1), ('clean-code', 1), ('complexity', 1), ('concise', 1), ('constant-time', 1), ('cumulative sum', 1), ('depth-first-search', 1), ('dfs java', 1), ('dfs pre-order traversal', 1), ('dfs with memo', 1), ('diagram', 1), ('dynamic programming', 1), ('easy understand', 1), ('easy-solution', 1), ('explained', 1), ('explained solution', 1), ('explanation of logic', 1), ('fastest', 1), ('go', 1), ('hash', 1), ('hash table', 1), ('hashtable', 1), ('help needed', 1), ('inorder traversal', 1), ('iterative bfs', 1), ('iterative-dfs', 1), ('iteratively', 1), ('java ac solution', 1), ('javascrip', 1), ('javascript solution', 1), ('javscript', 1), ('kotlin', 1), ('kotlinvim', 1), ('level-order', 1), ('level-order-traversal', 1), ('memoization', 1), ('memorization', 1), ('naive', 1), ('path-finding', 1), ('pathsumiii', 1), ('php', 1), ('postorder traversal', 1), ('precomputation', 1), ('preorder-recursion', 1), ('python2', 1), ('recursive solution', 1), ('recursive-descent', 1), ('recursive-dfs', 1), ('recursively', 1), ('recusrive', 1), ('rust', 1), ('scala', 1), ('short', 1), ('simple', 1), ('simple clear c++ solution', 1), ('simple solution', 1), ('sliding-window', 1), ('subarray sum', 1), ('sum of series', 1), ('swift5', 1), ('testcase error', 1), ('top-down', 1), ('two-queues', 1), ('typescript', 1), ('unordermap', 1), ('vector', 1), ('video', 1), ('video solution', 1), ('video-explanation', 1)]"
436,Find Right Interval,https://leetcode.com/problems/find-right-interval,"You are given an array of intervals, where intervals[i] = [starti, endi] and each starti is unique.

The right interval for an interval i is an interval j such that startj >= endi and startj is minimized.

Return an array of right interval indices for each interval i. If no right interval exists for interval i, then put -1 at index i.",['binary-search'],Medium,716,195,130316,63356,"[""Data Stream as Disjoint Intervals""]","[('binary-search', 37), ('python', 22), ('c++', 19), ('binary search', 18), ('java', 17), ('python 3', 17), ('easy-understanding', 12), ('cpp', 11), ('javascript', 8), ('sorting', 8), ('easy', 6), ('easytounderstand', 6), ('hashmap', 6), ('map', 6), ('treemap', 6), ('bisect', 5), ('c#', 5), ('java-solution', 5), ('python3', 4), ('binarysearch', 3), ('cpp solution', 3), ('easy-to-understand', 3), ('explained', 3), ('golang', 3), ('heap', 3), ('lower bound', 3), ('dictionary', 2), ('interval', 2), ('lowerbound', 2), ('scala', 2), ('sorted array', 2), ('swift', 2), ('typescript', 2), ('#explanation', 1), ('beginner friendly', 1), ('binary search logic', 1), ('binary-tree', 1), ('bisection', 1), ('brute force', 1), ('brute-force', 1), ('c++ solution', 1), ('comments', 1), ('constant space', 1), ('cpp easy', 1), ('easy to understand', 1), ('easy-undestand', 1), ('expalanation', 1), ('explained solution', 1), ('explanation of logic', 1), ('explanation with code', 1), ('explanations', 1), ('fast', 1), ('fast-solution', 1), ('find-right-interval', 1), ('fully commented', 1), ('fully-explained', 1), ('hard', 1), ('hash map', 1), ('hashing', 1), ('heapq', 1), ('index based', 1), ('intervals', 1), ('intuitive', 1), ('kotlin', 1), ('linearithmic', 1), ('lower-bound', 1), ('n2', 1), ('nlogn time', 1), ('php', 1), ('php solution', 1), ('priority queue', 1), ('rust', 1), ('set', 1), ('short', 1), ('short code', 1), ('simple solution', 1), ('solution', 1), ('sort', 1), ('sort-function', 1), ('tuple', 1), ('two heaps', 1), ('two-heap', 1), ('two-pointers', 1), ('video solution', 1), ('video-explanation', 1), ('walrus', 1), ('wrong answer', 1)]"
435,Non-overlapping Intervals,https://leetcode.com/problems/non-overlapping-intervals,"Given an array of intervals intervals where intervals[i] = [starti, endi], return the minimum number of intervals you need to remove to make the rest of the intervals non-overlapping.",['greedy'],Medium,2034,60,315313,138873,"[""Minimum Number of Arrows to Burst Balloons""]","[('greedy', 52), ('java', 40), ('c++', 27), ('sorting', 24), ('python', 22), ('cpp', 21), ('greedy approach', 15), ('java-solution', 10), ('javascript', 10), ('python 3', 9), ('c#', 7), ('easy-understanding', 7), ('easy', 6), ('sort', 6), ('easytounderstand', 5), ('greedy algorithm', 5), ('python3', 5), ('fast', 4), ('intervals', 4), ('pairs', 4), ('simple', 4), ('explained', 3), ('swift', 3), ('c++11', 2), ('easy-to-understand', 2), ('es6', 2), ('fast and simple', 2), ('golang', 2), ('java ac solution', 2), ('java solution', 2), ('kotlin', 2), ('nlogn', 2), ('overlapping', 2), ('scala', 2), ('2 pointers', 1), ('activity selection algo', 1), ('beginner', 1), ('beginner friendly', 1), ('c++ code', 1), ('c++ solution', 1), ('clean code', 1), ('comfused', 1), ('comparator', 1), ('concise', 1), ('concise-solution', 1), ('cpp easy', 1), ('cpp solution', 1), ('different', 1), ('doubts', 1), ('dp', 1), ('drawings', 1), ('easy-solution', 1), ('easy-undesrtanding', 1), ('easy-undestand', 1), ('end-points', 1), ('ending', 1), ('error', 1), ('fast-solution', 1), ('faster', 1), ('golang-solution', 1), ('help', 1), ('help needed', 1), ('helpful', 1), ('interval scheduling', 1), ('iteration', 1), ('javascript solution', 1), ('js', 1), ('kotlinvim', 1), ('less space', 1), ('memory-optimized', 1), ('min heap', 1), ('mit course youtube', 1), ('one pass solution', 1), ('one-liner', 1), ('pyhton3', 1), ('python 2', 1), ('pythonpython3', 1), ('question', 1), ('recursive', 1), ('ruby', 1), ('scheduler', 1), ('self-explanatory', 1), ('sequence', 1), ('series', 1), ('short', 1), ('short c++ code', 1), ('simple approach', 1), ('simple clear c++ solution', 1), ('sort-function', 1), ('stacks', 1), ('straight-forward', 1), ('swift5', 1), ('tailrec', 1), ('time limit exceed', 1), ('two pointers', 1), ('two-pointer', 1), ('two-pointers', 1), ('twopointer', 1), ('typescript', 1), ('updated', 1), ('video solution', 1), ('video-explanation', 1), ('wrong output', 1)]"
434,Number of Segments in a String,https://leetcode.com/problems/number-of-segments-in-a-string,"You are given a string s, return the number of segments in the string. 

A segment is defined to be a contiguous sequence of non-space characters.",['string'],Easy,299,863,246045,92825,[],"[('c++', 29), ('cpp', 17), ('java', 14), ('javascript', 13), ('python 3', 12), ('easy-undestand', 8), ('python', 8), ('one-liner', 6), ('easy-understanding', 5), ('java-solution', 5), ('python3', 5), ('easy', 4), ('easytounderstand', 4), ('simple', 4), ('accepted solution', 3), ('c#', 3), ('1 line', 2), ('c', 2), ('cpp solution', 2), ('easy-understand', 2), ('filter', 2), ('less memory', 2), ('string', 2), ('stringstream', 2), ('swift', 2), ('0ms', 1), ('0ms runtime', 1), ('100 faster cpp', 1), ('100 speed', 1), ('2 approaches', 1), ('beginner friendly', 1), ('boolean', 1), ('c++11', 1), ('clean code', 1), ('constant space', 1), ('csharp', 1), ('easy-solution', 1), ('efficient solution', 1), ('es6', 1), ('explanation', 1), ('explanatory comments', 1), ('fast', 1), ('fast and simple', 1), ('fast-solution', 1), ('fastest', 1), ('go', 1), ('golang', 1), ('golang-solution', 1), ('good variable names', 1), ('implicit return', 1), ('java solution', 1), ('javascrip', 1), ('javascript solution', 1), ('kotlin', 1), ('linear', 1), ('linear time', 1), ('linq', 1), ('one line', 1), ('one-line', 1), ('oneline', 1), ('php', 1), ('rajat', 1), ('regex', 1), ('regexp', 1), ('ruby', 1), ('rust', 1), ('simple approach', 1), ('simplest', 1), ('solution', 1), ('solved', 1), ('split', 1), ('stl', 1), ('tokenize', 1), ('unit-test', 1)]"
433,Minimum Genetic Mutation,https://leetcode.com/problems/minimum-genetic-mutation,"A gene string can be represented by an 8-character long string, with choices from 'A', 'C', 'G', and 'T'.

Suppose we need to investigate a mutation from a gene string start to a gene string end where one mutation is defined as one single character changed in the gene string.


	For example, ""AACCGGTT"" --> ""AACCGGTA"" is one mutation.


There is also a gene bank bank that records all the valid gene mutations. A gene must be in bank to make it a valid gene string.

Given the two gene strings start and end and the gene bank bank, return the minimum number of mutations needed to mutate from start to end. If there is no such a mutation, return -1.

Note that the starting point is assumed to be valid, so it might not be included in the bank.",[],Medium,546,74,89766,39217,"[""Word Ladder""]","[('bfs', 20), ('java', 12), ('python', 7), ('breadth first search', 5), ('c++', 5), ('dfs', 5), ('c#', 4), ('easy-understanding', 4), ('cpp', 3), ('java-solution', 3), ('python3', 3), ('bfs java', 2), ('bit manipulation', 2), ('easy-undestand', 2), ('swift', 2), ('accepted', 1), ('bfs python', 1), ('bfs simple solution', 1), ('bidirectional bfs', 1), ('c++14', 1), ('clean code', 1), ('commetend', 1), ('concise-solution', 1), ('cpp solution', 1), ('deque', 1), ('dfs simple solution', 1), ('easy to read', 1), ('easy-to-understand', 1), ('easytounderstand', 1), ('faster than 100', 1), ('golang', 1), ('graph', 1), ('hash table', 1), ('javascript solution', 1), ('python 3', 1), ('python deque', 1), ('queue', 1), ('ruby', 1), ('sandeepkumar', 1), ('set', 1), ('string', 1), ('two-way bfs', 1)]"
432,All O`one Data Structure,https://leetcode.com/problems/all-oone-data-structure,"Design a data structure to store the strings' count with the ability to return the strings with minimum and maximum counts.

Implement the AllOne class:


	AllOne() Initializes the object of the data structure.
	inc(String key) Increments the count of the string key by 1. If key does not exist in the data structure, insert it with count 1.
	dec(String key) Decrements the count of the string key by 1. If the count of key is 0 after the decrement, remove it from the data structure. It is guaranteed that key exists in the data structure before the decrement.
	getMaxKey() Returns one of the keys with the maximal count. If no element exists, return an empty string """".
	getMinKey() Returns one of the keys with the minimum count. If no element exists, return an empty string """".",['design'],Hard,784,95,118797,39589,[],"[('hashmap', 13), ('java', 9), ('python', 7), ('doubly linked list', 6), ('c++', 5), ('java-solution', 5), ('c#', 3), ('c', 2), ('cpp', 2), ('dictionary', 2), ('double-linked-list', 2), ('easy-understanding', 2), ('heaps', 2), ('linked-list', 2), ('map', 2), ('swift', 2), ('treemap', 2), ('accepted', 1), ('class-based', 1), ('concise', 1), ('concise-solution', 1), ('doubly-linked list', 1), ('doubly-linked-list', 1), ('easy-to-understand', 1), ('easy-undestand', 1), ('error', 1), ('golang', 1), ('hashset', 1), ('hashtable', 1), ('heap', 1), ('javascript', 1), ('lfu', 1), ('linked list', 1), ('linkedlist', 1), ('linkedlists', 1), ('maxheap', 1), ('minheap', 1), ('priority queue', 1), ('simple', 1), ('simplest', 1), ('solution-cpp', 1), ('test-case', 1), ('typescript', 1), ('typescript solution', 1), ('very easy to understand', 1), ('well-commented', 1)]"
424,Longest Repeating Character Replacement,https://leetcode.com/problems/longest-repeating-character-replacement,"You are given a string s and an integer k. You can choose any character of the string and change it to any other uppercase English character. You can perform this operation at most k times.

Return the length of the longest substring containing the same letter you can get after performing the above operations.","['two-pointers', 'sliding-window']",Medium,2349,119,228803,111082,"[""Longest Substring with At Most K Distinct Characters"", ""Max Consecutive Ones III""]","[('slidingwindow', 23), ('sliding-window', 18), ('c++', 15), ('sliding window', 12), ('javascript', 10), ('python', 10), ('java', 9), ('cpp', 7), ('python 3', 7), ('two-pointers', 4), ('explanation', 3), ('golang', 3), ('hashmap', 3), ('kotlin', 3), ('python3', 3), ('simple', 3), ('two pointers', 3), ('c#', 2), ('cpp solution', 2), ('hashing', 2), ('java-solution', 2), ('slide window', 2), ('#python', 1), ('#readable', 1), ('#sliding-window', 1), ('100', 1), ('100 space', 1), ('100speed', 1), ('13 lines', 1), ('2 pointers', 1), ('4ms', 1), ('array', 1), ('big o of n', 1), ('binary search', 1), ('counter', 1), ('cpp easy', 1), ('dictionary', 1), ('discussion', 1), ('dynamic programming', 1), ('easy', 1), ('easy to understand', 1), ('easy-understand', 1), ('easy-understanding', 1), ('easy-undestand', 1), ('easytounderstand', 1), ('efficient solution', 1), ('explanation of logic', 1), ('explanation with code', 1), ('explanation with logic', 1), ('explanatory video', 1), ('fast', 1), ('fast and simple', 1), ('fast-solution', 1), ('faster', 1), ('follow-up', 1), ('from 0 to hero', 1), ('linear time complexity', 1), ('longest-substring', 1), ('pseudocode', 1), ('video', 1), ('window', 1), ('window-sliding', 1)]"
423,Reconstruct Original Digits from English,https://leetcode.com/problems/reconstruct-original-digits-from-english,"Given a string s containing an out-of-order English representation of digits 0-9, return the digits in ascending order.",['math'],Medium,338,1002,81653,41578,[],"[('c++', 13), ('python', 11), ('explained', 10), ('java', 10), ('cpp', 8), ('javascript', 8), ('c#', 5), ('counter', 4), ('golang', 4), ('rust', 4), ('cpp solution', 3), ('elegant', 3), ('java-solution', 3), ('math', 3), ('python3', 3), ('simple', 3), ('string', 3), ('easy-to-understand', 2), ('easy-understanding', 2), ('go', 2), ('linear time', 2), ('python 3', 2), ('swift', 2), ('backtracking', 1), ('brainteaser', 1), ('bug-test-case', 1), ('c', 1), ('c++ solution', 1), ('c++11', 1), ('char compare', 1), ('char comparison', 1), ('clean code', 1), ('clear', 1), ('clear-understanding', 1), ('club10000', 1), ('combinations', 1), ('combinatorics', 1), ('commented', 1), ('comments added', 1), ('comments-added', 1), ('counters', 1), ('counting-array', 1), ('declarative', 1), ('delete', 1), ('dictionary', 1), ('digit', 1), ('elegent', 1), ('explaination', 1), ('explanation', 1), ('explanation of logic', 1), ('explanation with logic', 1), ('fast', 1), ('freqs-map', 1), ('frequencycounting', 1), ('go-solution', 1), ('golang-solution', 1), ('goodquestion', 1), ('greedy', 1), ('hash table', 1), ('hashmap', 1), ('heavily commented', 1), ('linear-complexity', 1), ('map', 1), ('optimisation', 1), ('performance', 1), ('reconstructoriginaldigits', 1), ('ruby', 1), ('self explanatory', 1), ('solution', 1), ('speed', 1), ('string builder', 1), ('strings', 1), ('time complexity', 1), ('tricky', 1), ('typescript', 1), ('video-explanation', 1), ('visualization', 1)]"
421,Maximum XOR of Two Numbers in an Array,https://leetcode.com/problems/maximum-xor-of-two-numbers-in-an-array,"Given an integer array nums, return the maximum result of nums[i] XOR nums[j], where 0 ≤ i ≤ j < n.

Follow up: Could you do this in O(n) runtime?","['bit-manipulation', 'trie']",Medium,2038,215,150092,81727,"[""Maximum XOR With an Element From Array""]","[('trie', 36), ('bit manipulation', 17), ('c++', 14), ('tries', 14), ('python', 12), ('java', 8), ('cpp', 7), ('python 3', 7), ('trie-tree', 6), ('bit-manipulation', 5), ('prefix tree', 5), ('java-solution', 4), ('javascript', 4), ('python3', 4), ('bit masking', 3), ('c#', 3), ('easy', 3), ('explained', 3), ('golang', 3), ('sets', 3), ('simple solution', 3), ('trie explained', 3), ('tries in c++', 3), ('beginner', 2), ('binary-tree', 2), ('c++ code', 2), ('comments', 2), ('easy to understand', 2), ('easy-understanding', 2), ('explanations', 2), ('go-solution', 2), ('php', 2), ('solution-explaining', 2), ('trie data structure', 2), ('100 faster', 1), ('100 speed', 1), ('best-solution-ever', 1), ('binary', 1), ('bit mask', 1), ('bitmanipulation', 1), ('c++11', 1), ('clean', 1), ('commentary', 1), ('cpp solution', 1), ('depth first search', 1), ('dfs', 1), ('dfs solution', 1), ('easy-to-understand', 1), ('fast', 1), ('golang-solution', 1), ('hashset', 1), ('help', 1), ('idiomatic', 1), ('implementation', 1), ('iteration', 1), ('iterative', 1), ('java ac solution', 1), ('java recursion', 1), ('joke', 1), ('linear time', 1), ('maximum xor', 1), ('missing-test-case', 1), ('modulatiry', 1), ('photo', 1), ('php solution', 1), ('recursion', 1), ('recursive', 1), ('ruby', 1), ('rust', 1), ('scala', 1), ('set', 1), ('swift', 1), ('time-complexity', 1), ('tle', 1), ('tree', 1), ('trees', 1), ('trie-in-c++', 1), ('trie-in-java', 1), ('twosum', 1), ('unique', 1), ('video', 1), ('video-explanation', 1), ('xor', 1)]"
420,Strong Password Checker,https://leetcode.com/problems/strong-password-checker,"A password is considered strong if the below conditions are all met:


	It has at least 6 characters and at most 20 characters.
	It contains at least one lowercase letter, at least one uppercase letter, and at least one digit.
	It does not contain three repeating characters in a row (i.e., ""...aaa..."" is weak, but ""...aa...a..."" is strong, assuming other conditions are met).


Given a string password, return the minimum number of steps required to make password strong. if password is already strong, return 0.

In one step, you can:


	Insert one character to password,
	Delete one character from password, or
	Replace one character of password with another character.",[],Hard,333,964,130657,18108,[],"[('python', 6), ('java', 4), ('c++', 3), ('cpp', 3), ('c#', 2), ('dynamic programming', 2), ('javascript', 2), ('solution', 2), ('video', 2), ('asahiocean', 1), ('bfs', 1), ('clear', 1), ('easy', 1), ('easy-understand', 1), ('expanded problem', 1), ('explained', 1), ('greedy', 1), ('modular', 1), ('python 3', 1), ('python3', 1), ('swift', 1), ('test-cases', 1), ('typescript', 1), ('well-commented', 1)]"
419,Battleships in a Board,https://leetcode.com/problems/battleships-in-a-board,"Given an m x n matrix board where each cell is a battleship 'X' or empty '.', return the number of the battleships on board.

Battleships can only be placed horizontally or vertically on board. In other words, they can only be made of the shape 1 x k (1 row, k columns) or k x 1 (k rows, 1 column), where k can be of any size. At least one horizontal or vertical cell separates between two battleships (i.e., there are no adjacent battleships).",[],Medium,958,603,159680,113937,[],"[('python', 16), ('java', 13), ('dfs', 9), ('c++', 8), ('python3', 8), ('cpp', 7), ('javascript', 6), ('python 3', 6), ('easy to understand', 5), ('c#', 3), ('easytounderstand', 3), ('golang', 3), ('java-solution', 3), ('javascript solution', 3), ('one pass', 3), ('onepass', 3), ('0ms', 2), ('c', 2), ('clean code', 2), ('constant space', 2), ('dfs simple solution', 2), ('golang-solution', 2), ('help needed', 2), ('linear', 2), ('one-pass', 2), ('scala', 2), ('simple', 2), ('simple solution', 2), ('beginner friendly', 1), ('bfs', 1), ('c++ code', 1), ('clear', 1), ('cpp easy', 1), ('cpp-solution', 1), ('depth first search', 1), ('deque', 1), ('dfs-bfs', 1), ('dictionary', 1), ('doube loop', 1), ('easy', 1), ('easy to read', 1), ('easy-undestand', 1), ('explaination', 1), ('explanation', 1), ('faster', 1), ('follow up', 1), ('follow-up', 1), ('followup', 1), ('functional-programming', 1), ('go', 1), ('ios', 1), ('iteratively', 1), ('java ac solution', 1), ('kotlinvim', 1), ('linear time', 1), ('no recursion', 1), ('number of islands', 1), ('o1 space', 1), ('object-oriented', 1), ('one-liner', 1), ('oneline', 1), ('oneliner', 1), ('php', 1), ('python dfs', 1), ('readable', 1), ('recursion', 1), ('recursive easy', 1), ('simplesolution', 1), ('solution', 1), ('straight forward', 1), ('swift', 1)]"
417,Pacific Atlantic Water Flow,https://leetcode.com/problems/pacific-atlantic-water-flow,"You are given an m x n integer matrix heights representing the height of each unit cell in a continent. The Pacific ocean touches the continent's left and top edges, and the Atlantic ocean touches the continent's right and bottom edges.

Water can only flow in four directions: up, down, left, and right. Water flows from a cell to an adjacent one with an equal or lower height.

Return a list of grid coordinates where water can flow to both the Pacific and Atlantic oceans.","['depth-first-search', 'breadth-first-search']",Medium,2139,547,272597,120512,[],"[('dfs', 42), ('bfs', 36), ('java', 29), ('c++', 24), ('javascript', 13), ('cpp', 10), ('python', 10), ('python 3', 8), ('python3', 8), ('c#', 6), ('dfs simple solution', 5), ('easy', 5), ('queue', 5), ('rust', 5), ('breadth first search', 4), ('comments-added', 4), ('dfs solution', 4), ('easy-understanding', 4), ('golang', 4), ('java-solution', 4), ('simple', 4), ('video-explanation', 4), ('clean code', 3), ('easy-to-understand', 3), ('easytounderstand', 3), ('backtracking', 2), ('breadth-first-search', 2), ('cpp solution', 2), ('depth first search', 2), ('easy to understand', 2), ('easy-undestand', 2), ('explained', 2), ('go', 2), ('graph', 2), ('recursion', 2), ('ruby', 2), ('scala', 2), ('set', 2), ('sets', 2), ('swift', 2), ('bfs tle', 1), ('bfs with prev path map', 1), ('c++ bfs 88ms', 1), ('clean', 1), ('clean-efficient-code', 1), ('concise', 1), ('concise-solution', 1), ('csharp', 1), ('deep-first-search', 1), ('deque', 1), ('detailed explanation', 1), ('dfs-bfs', 1), ('dfs-in-order', 1), ('dfs-iterative', 1), ('dictonary', 1), ('dps', 1), ('easy to read', 1), ('explain', 1), ('explanation', 1), ('explanation of logic', 1), ('explanation with code', 1), ('explanations', 1), ('fast-solution', 1), ('fastest', 1), ('golang-solution', 1), ('google interview', 1), ('help', 1), ('intersection', 1), ('iterative', 1), ('java ac solution', 1), ('java solution', 1), ('js', 1), ('kotlin', 1), ('memory-optimized', 1), ('new', 1), ('non-copy-paste', 1), ('pacificatlanticwaterflow', 1), ('pyhton', 1), ('raviinroorkee', 1), ('readable', 1), ('readable code', 1), ('recursive', 1), ('short', 1), ('solution', 1), ('space-efficient', 1), ('ting', 1), ('tle', 1), ('visualization', 1)]"
416,Partition Equal Subset Sum,https://leetcode.com/problems/partition-equal-subset-sum,"Given a non-empty array nums containing only positive integers, find if the array can be partitioned into two subsets such that the sum of elements in both subsets is equal.",['dynamic-programming'],Medium,4307,94,621641,279913,"[""Partition to K Equal Sum Subsets""]","[('dynamic programming', 58), ('c++', 49), ('dp', 39), ('java', 32), ('cpp', 30), ('python', 28), ('knapsack', 21), ('memoization', 21), ('python 3', 18), ('dynamic-programming', 13), ('easy-understanding', 11), ('recursion', 11), ('top-down dp', 8), ('cpp solution', 7), ('javascript', 7), ('python3', 7), ('c#', 6), ('easy', 6), ('backtracking', 5), ('easytounderstand', 5), ('java-solution', 5), ('top down dp', 5), ('explained', 4), ('ruby', 4), ('tabulation', 4), ('topdown', 4), ('01 knapsack', 3), ('bitset', 3), ('bottom up', 3), ('c', 3), ('dfs', 3), ('dp-programming', 3), ('dp-techqique', 3), ('recurision', 3), ('rust', 3), ('subsetsum', 3), ('target-sum', 3), ('top down', 3), ('best-solution-ever', 2), ('bit manipulation', 2), ('bitmanipulation', 2), ('bottom-up-algorithm', 2), ('bottoms-up', 2), ('c++ dynamic programming', 2), ('concise', 2), ('depth-first-search', 2), ('explanation', 2), ('full explanation', 2), ('golang', 2), ('hashmap', 2), ('iterative', 2), ('partitionequalsubsetsum', 2), ('performance', 2), ('recusion', 2), ('simple', 2), ('simplest', 2), ('solution', 2), ('swift', 2), ('#416', 1), ('#dynamic-programming', 1), ('#javascript', 1), ('01 knapsack problem', 1), ('100 speed', 1), ('1d-dp', 1), ('2d', 1), ('95 per faster', 1), ('algorithms', 1), ('awesome samriddhi', 1), ('backpack', 1), ('beginner friendly', 1), ('best explaination', 1), ('bitwise', 1), ('bitwise operation', 1), ('bool-array', 1), ('bottom up dp', 1), ('bottom-up', 1), ('bottomup', 1), ('broken-tests', 1), ('bug', 1), ('bug in leetcode', 1), ('bug report', 1), ('bugs', 1), ('c++ code', 1), ('c++11', 1), ('comments', 1), ('comments-added', 1), ('cplusplus', 1), ('cpp easy', 1), ('depth first search', 1), ('depth-first search', 1), ('detailed explanation', 1), ('dfs simple solution', 1), ('dfs solution', 1), ('dfs-bfs', 1), ('dictionary c#', 1), ('dp top down', 1), ('dp-iterative', 1), ('dps', 1), ('dynamic programing', 1), ('dynamic programmin', 1), ('dynamicprogramming', 1), ('dynammic programming', 1), ('easiest solution', 1), ('easy to understand', 1), ('easy understanding', 1), ('easy-undestand', 1), ('efficient solution', 1), ('explained solution', 1), ('explanations', 1), ('fast and simple', 1), ('fully-explained', 1), ('go-solution', 1), ('golang-solution', 1), ('greedy', 1), ('hack', 1), ('java solution', 1), ('javascript solution', 1), ('kotlin', 1), ('kotlinvim', 1), ('linear', 1), ('logical thinking', 1), ('memoizatin', 1), ('memoziation', 1), ('mit', 1), ('new-cases', 1), ('non-dp', 1), ('optimized', 1), ('partition equal subset', 1), ('partition-equal-subset-sum', 1), ('proof', 1), ('pyhton 3', 1), ('pythonic', 1), ('pythonpython3', 1), ('readable', 1), ('recursive', 1), ('recursiveley', 1), ('ritik', 1), ('short', 1), ('short code', 1), ('simple clear c++ solution', 1), ('simple solution', 1), ('simple-solution', 1), ('solition-sharing', 1), ('solution-sharing-java', 1), ('solution-sharing-python', 1), ('subarray sum equals k', 1), ('subset', 1), ('subset sum', 1), ('test case', 1), ('test-case-too-weak', 1), ('tle', 1), ('top dwon', 1), ('video explanation', 1), ('video solution', 1), ('video-explanation', 1), ('wrong-answer', 1), ('wrong-judge', 1), ('zero one knapsack', 1)]"
415,Add Strings,https://leetcode.com/problems/add-strings,"Given two non-negative integers, num1 and num2 represented as string, return the sum of num1 and num2 as a string.",['string'],Easy,1742,381,598239,291088,"[""Add Two Numbers"", ""Multiply Strings"", ""Add to Array-Form of Integer""]","[('python', 51), ('python 3', 38), ('java', 37), ('c++', 32), ('javascript', 28), ('python3', 21), ('easy-understanding', 19), ('cpp', 18), ('easy-undestand', 9), ('java-solution', 8), ('simple solution', 8), ('c#', 7), ('easy-to-understand', 6), ('kotlin', 6), ('swift', 6), ('c', 5), ('string', 5), ('cpp solution', 4), ('easy', 4), ('golang', 4), ('simple', 4), ('stringbuilder', 4), ('clear', 3), ('fast', 3), ('hashmap', 3), ('one-liner', 3), ('python2', 3), ('ruby', 3), ('accepted', 2), ('add strings', 2), ('c++ code', 2), ('clean code', 2), ('cpp easy', 2), ('easytounderstand', 2), ('facebook interview', 2), ('java solution', 2), ('javascript solution', 2), ('js', 2), ('linear', 2), ('ord', 2), ('python3.8', 2), ('rust', 2), ('short solution', 2), ('solution', 2), ('solution-sharing-cpp', 2), ('swift5', 2), ('twopointer', 2), ('#javascript', 1), ('0ms runtime', 1), ('100 bst', 1), ('2-lines', 1), ('ac solution', 1), ('add', 1), ('addstrings', 1), ('arithmetic-operations', 1), ('array', 1), ('ascii', 1), ('atoi', 1), ('avnish', 1), ('beats 100', 1), ('biginteger', 1), ('built-in', 1), ('built-in-function', 1), ('built-ins', 1), ('c-string', 1), ('c# string', 1), ('c# string.insert', 1), ('c++ solution', 1), ('charat', 1), ('chr', 1), ('clean', 1), ('cleanest', 1), ('coding interview', 1), ('constant space', 1), ('cpp-easy', 1), ('csharp', 1), ('deque', 1), ('dictionary', 1), ('dictonary', 1), ('easiest', 1), ('easy to understand', 1), ('easy understanding', 1), ('easy-solition', 1), ('easy-understsand', 1), ('easysolution', 1), ('easytoundersatand', 1), ('efficient', 1), ('elegant', 1), ('elegant solution', 1), ('explained', 1), ('fast and simple', 1), ('fast-solution', 1), ('fasterthan100', 1), ('fastest', 1), ('follow-up', 1), ('for loop', 1), ('for loops', 1), ('generators', 1), ('go', 1), ('golang-solution', 1), ('help me', 1), ('in place', 1), ('inplace', 1), ('insert', 1), ('interview experience', 1), ('interview help', 1), ('java ac solution', 1), ('js javascript', 1), ('kotlinvim', 1), ('live coding', 1), ('logical thinking', 1), ('loop method', 1), ('map', 1), ('math', 1), ('math-solution', 1), ('memory optimized', 1), ('mle', 1), ('no int', 1), ('no str', 1), ('not breaking rules', 1), ('not-easy', 1), ('one-loop', 1), ('oneline', 1), ('oneliner', 1), ('optimal', 1), ('padstart', 1), ('pyhton 3', 1), ('pythno3', 1), ('pythonic', 1), ('pythonpython3', 1), ('question', 1), ('recursion', 1), ('recursive', 1), ('reverse', 1), ('short', 1), ('simple python solution', 1), ('solution-sharing-python', 1), ('stack', 1), ('stack overflow', 1), ('stacks', 1), ('step by step', 1), ('step by step explanation', 1), ('string manipulation', 1), ('string-operation', 1), ('suggestion', 1), ('two-pointers', 1), ('typescript', 1), ('unicode', 1), ('unit-test', 1), ('video solution', 1), ('while-loop', 1), ('whileloop', 1), ('without int', 1), ('zfill', 1), ('zip longest', 1)]"
414,Third Maximum Number,https://leetcode.com/problems/third-maximum-number,"Given integer array nums, return the third maximum number in this array. If the third maximum does not exist, return the maximum number.",['array'],Easy,988,1709,721060,221845,"[""Kth Largest Element in an Array""]","[('c++', 38), ('python', 36), ('java', 35), ('python 3', 29), ('cpp', 26), ('javascript', 26), ('easy-understanding', 22), ('python3', 18), ('java-solution', 14), ('set', 14), ('c#', 10), ('heap', 9), ('simple', 9), ('cpp solution', 8), ('c', 7), ('sets', 6), ('easy', 5), ('golang', 5), ('heapq', 5), ('100 speed', 4), ('c++ code', 4), ('easy-to-understand', 4), ('easy-undestand', 4), ('js', 4), ('simple solution', 4), ('solution', 4), ('fast', 3), ('linq', 3), ('rust', 3), ('stl', 3), ('constant space', 2), ('cpp easy', 2), ('dynamic programming', 2), ('easy to understand', 2), ('efficient solution', 2), ('es6', 2), ('fast and simple', 2), ('fast-solution', 2), ('go', 2), ('hashing', 2), ('help', 2), ('javascript solution', 2), ('kotlin', 2), ('linear time', 2), ('linear-time', 2), ('one-liner', 2), ('priority queue', 2), ('sort', 2), ('sorted array', 2), ('sorting', 2), ('swift', 2), ('swift debugging', 2), ('third-maximum-number', 2), ('treeset', 2), ('vector', 2), ('#array', 1), ('#c++', 1), ('#javascript', 1), ('100 faster', 1), ('100 space', 1), ('100-faster', 1), ('3 pointer', 1), ('array', 1), ('beating-100-submission', 1), ('beginner friendly', 1), ('bisect', 1), ('brute-force', 1), ('bruteforce', 1), ('c code', 1), ('c# sortedset', 1), ('c++ ac', 1), ('c++11', 1), ('clean code', 1), ('clear explanation', 1), ('commentary', 1), ('comparator', 1), ('constant-space', 1), ('convertsettovector', 1), ('cpp-solution', 1), ('csharp', 1), ('dictionary', 1), ('easy approach', 1), ('easy solution', 1), ('easy to understandd', 1), ('easy-solition', 1), ('easy-understand', 1), ('easysolution', 1), ('easytounderstand', 1), ('esay-understand', 1), ('explained', 1), ('explanation with code', 1), ('explanations', 1), ('faster', 1), ('faster than 100.00', 1), ('faster-than-100', 1), ('feedback', 1), ('for loop', 1), ('functional-programming', 1), ('go lang', 1), ('golang-solution', 1), ('hashset', 1), ('heaps algorithm', 1), ('idea', 1), ('insertion sort', 1), ('insortleft', 1), ('invalid testcase', 1), ('iterative', 1), ('javascrip', 1), ('javascript-solution', 1), ('linear', 1), ('linear seach', 1), ('list', 1), ('maxheap', 1), ('maximum', 1), ('min-heap', 1), ('minimum heap', 1), ('mrmagician', 1), ('naive', 1), ('neat', 1), ('nlogk', 1), ('noneedinsert', 1), ('on', 1), ('one pass', 1), ('one pass solution', 1), ('one-pass', 1), ('php', 1), ('pointer', 1), ('priority-queue', 1), ('priorityqueue', 1), ('readable', 1), ('recursion', 1), ('recursive', 1), ('reduce', 1), ('resize', 1), ('reverse-sorted', 1), ('ruby', 1), ('scalibility', 1), ('set logic', 1), ('short', 1), ('short c++ code', 1), ('simple implementation', 1), ('simple logic', 1), ('solution-python', 1), ('solution-sharing-cpp', 1), ('solution-sharing-python', 1), ('sort-function', 1), ('sorted set', 1), ('sortedset', 1), ('stl algorithms', 1), ('streams', 1), ('third maximum number', 1), ('thirddistinctmax', 1), ('tracking 3 max using set', 1), ('trees', 1), ('tutorial for beginners', 1), ('two approaches', 1), ('unique', 1), ('upvote', 1)]"
413,Arithmetic Slices,https://leetcode.com/problems/arithmetic-slices,"An integer array is called arithmetic if it consists of at least three elements and if the difference between any two consecutive elements is the same.


	For example, [1,3,5,7,9], [7,7,7,7], and [3,-1,-5,-9] are arithmetic sequences.


Given an integer array nums, return the number of arithmetic subarrays of nums.

A subarray is a contiguous subsequence of the array.","['math', 'dynamic-programming']",Medium,1763,202,218538,131281,"[""Arithmetic Slices II - Subsequence"", ""Arithmetic Subarrays""]","[('c++', 43), ('dynamic programming', 27), ('cpp', 26), ('java', 25), ('python', 23), ('math', 18), ('python 3', 18), ('constant space', 12), ('dp', 12), ('python3', 12), ('java-solution', 10), ('javascript', 7), ('c#', 6), ('math-solution', 6), ('easy', 5), ('easy-understanding', 5), ('sliding-window', 5), ('slidingwindow', 5), ('dynamic-programming', 4), ('golang', 4), ('two-pointers', 4), ('100 faster runtime', 3), ('c', 3), ('cpp solution', 3), ('explained', 3), ('linear time', 3), ('recursion', 3), ('rust', 3), ('simple', 3), ('0ms', 2), ('100 speed', 2), ('deque', 2), ('easy-to-understand', 2), ('easy-undestand', 2), ('iteration', 2), ('mathematical', 2), ('maths', 2), ('simple solution', 2), ('video-explanation', 2), ('#constantspace', 1), ('#dynamic-programming', 1), ('#efficient', 1), ('#java', 1), ('#videoexplanation', 1), ('100 faster cpp', 1), ('100 memory', 1), ('2 pointer', 1), ('2-pointer approach', 1), ('algorithms', 1), ('arithmetic progression', 1), ('arithmetic-slices', 1), ('arithmeticslices', 1), ('array', 1), ('awesome samriddhi', 1), ('beginner friendly', 1), ('brute force', 1), ('c code', 1), ('c++ solution', 1), ('clean code', 1), ('comments-added', 1), ('constant-space', 1), ('cplusplus', 1), ('cpp easy', 1), ('csharp', 1), ('dfs-topdown', 1), ('dp bottom up', 1), ('dp-programming', 1), ('dp-techqique', 1), ('drewbie', 1), ('easy to understand', 1), ('easysolution', 1), ('explaination', 1), ('explanation of logic', 1), ('explanation with code', 1), ('fast', 1), ('fast and simple', 1), ('fast-solution', 1), ('gauss formula', 1), ('go', 1), ('intuitive', 1), ('iterative', 1), ('iteratively', 1), ('iterator', 1), ('java ac solution', 1), ('linear complexity', 1), ('linear memory', 1), ('math solution', 1), ('memory efficient', 1), ('no dp', 1), ('no extra space', 1), ('non-dp', 1), ('oneliner', 1), ('onepass', 1), ('optimal', 1), ('performance', 1), ('pointers', 1), ('polynomial-time', 1), ('prefix sum', 1), ('raviinroorkee', 1), ('redirect21', 1), ('ritik', 1), ('ruby', 1), ('scala', 1), ('self explanatory', 1), ('sequence', 1), ('series', 1), ('simple python accepted', 1), ('single pass', 1), ('slide window', 1), ('sliding window', 1), ('solution', 1), ('stack', 1), ('stl', 1), ('straight-forward', 1), ('subsequence', 1), ('sum of n natural number', 1), ('swift', 1), ('tabulation', 1), ('thought-process', 1), ('two pointers', 1), ('two-pointer', 1), ('twopointers', 1), ('typescript', 1), ('with precise comments', 1)]"
412,Fizz Buzz,https://leetcode.com/problems/fizz-buzz,"Given an integer n, return a string array answer (1-indexed) where:


	answer[i] == ""FizzBuzz"" if i is divisible by 3 and 5.
	answer[i] == ""Fizz"" if i is divisible by 3.
	answer[i] == ""Buzz"" if i is divisible by 5.
	answer[i] == i if non of the above conditions are true.",[],Easy,1335,1545,731383,466550,"[""Fizz Buzz Multithreaded""]","[('java', 33), ('c++', 32), ('javascript', 30), ('python', 28), ('python 3', 26), ('cpp', 19), ('fizzbuzz', 17), ('java-solution', 9), ('python3', 9), ('c#', 8), ('easy-understanding', 7), ('swift', 6), ('easy', 5), ('golang', 5), ('typescript', 5), ('beats 100', 4), ('cpp solution', 4), ('csharp', 4), ('easy-to-understand', 4), ('golang-solution', 4), ('if-else', 4), ('one-liner', 4), ('1ms', 3), ('c', 3), ('cpp easy', 3), ('es6', 3), ('fast', 3), ('fizz buzz', 3), ('javascript solution', 3), ('kotlin', 3), ('scala', 3), ('algorithms', 2), ('array', 2), ('basic', 2), ('clean', 2), ('cpp-solution', 2), ('easytounderstand', 2), ('explained', 2), ('generator', 2), ('go', 2), ('hashmap', 2), ('optimal', 2), ('php', 2), ('ruby', 2), ('rust', 2), ('simple solution', 2), ('solution', 2), ('stream', 2), ('string', 2), ('swift5', 2), ('vector', 2), ('0ms', 1), ('1 line', 1), ('100 memory', 1), ('100 speed', 1), ('24ms', 1), ('52ms', 1), ('beginner friendly', 1), ('benchmark', 1), ('branch prediction', 1), ('bug in leetcode', 1), ('c code', 1), ('c-solution', 1), ('c++ code', 1), ('c++ solution', 1), ('c++11', 1), ('collectorstolist', 1), ('commented', 1), ('conditional-expression', 1), ('conditions', 1), ('dictionary', 1), ('dynamic programming', 1), ('easiest', 1), ('easy to understand', 1), ('easy-understand', 1), ('easy-undestand', 1), ('fast-solution', 1), ('faster', 1), ('faster than 93.05', 1), ('fastest', 1), ('fizz-buzz', 1), ('functional', 1), ('functional programming', 1), ('functional-programming', 1), ('go-solution', 1), ('implementation', 1), ('interview', 1), ('ios', 1), ('iteration', 1), ('iteration vs recursion', 1), ('iterative', 1), ('iterative vs recursive', 1), ('itertools', 1), ('java solution', 1), ('java8', 1), ('javascrip', 1), ('javascript brute force', 1), ('js javascript', 1), ('kotlin-solution', 1), ('linear time', 1), ('list comprehension', 1), ('list-comprehension', 1), ('memory optimized', 1), ('mod', 1), ('modulo', 1), ('no branching', 1), ('oneline', 1), ('pattern-matching', 1), ('push', 1), ('python2', 1), ('pythonpython3', 1), ('recursion vs iteration', 1), ('recursive', 1), ('recursive vs iterative', 1), ('sequence', 1), ('series', 1), ('short', 1), ('simple-solution', 1), ('solition-sharing', 1), ('solution-explaining', 1), ('solution-sharing-cpp', 1), ('solved', 1), ('straight-forward', 1), ('straightforward', 1), ('string-operation', 1), ('stringbuilder', 1), ('structured', 1), ('super-easy', 1), ('switch', 1), ('synchronized', 1), ('ternary-operator', 1), ('tuple', 1), ('typescript javascript', 1), ('video solution', 1), ('video-explanation', 1), ('youtube', 1)]"
410,Split Array Largest Sum,https://leetcode.com/problems/split-array-largest-sum,"Given an array nums which consists of non-negative integers and an integer m, you can split the array into m non-empty continuous subarrays.

Write an algorithm to minimize the largest sum among these m subarrays.","['binary-search', 'dynamic-programming']",Hard,2574,95,257773,120637,[],"[('binary search', 24), ('binary-search', 23), ('c++', 16), ('java', 16), ('dynamic programming', 14), ('python', 11), ('dp', 10), ('cpp', 7), ('python 3', 7), ('memoization', 5), ('100 speed', 4), ('java-solution', 4), ('javascript', 4), ('commented', 3), ('python3', 3), ('100 memory', 2), ('binarysearch', 2), ('c#', 2), ('c++ code', 2), ('cpp solution', 2), ('easy', 2), ('easy-undestand', 2), ('explanation', 2), ('java solution', 2), ('python2', 2), ('recursion', 2), ('100 beat', 1), ('100 faster', 1), ('100 space', 1), ('2d dynamic programming', 1), ('7lines', 1), ('90+', 1), ('99 space', 1), ('algorithms', 1), ('c++ binary-search', 1), ('clean code', 1), ('comments', 1), ('complexity analysis', 1), ('debug', 1), ('dynamic-programming', 1), ('easy-to-understand', 1), ('easy-understanding', 1), ('easytounderstand', 1), ('elegant', 1), ('example', 1), ('explanation with code', 1), ('explanations', 1), ('fast and simple', 1), ('faster than 95.46', 1), ('fastest', 1), ('fastest java solution', 1), ('fastest solution', 1), ('golang', 1), ('greedy approach', 1), ('hints', 1), ('java ac solution', 1), ('js', 1), ('kotlin', 1), ('linear time', 1), ('minimax', 1), ('php', 1), ('prefix sum', 1), ('recursive-dp', 1), ('set', 1), ('simple', 1), ('solution', 1), ('swift', 1), ('top down approach', 1), ('top-down dp', 1), ('video', 1), ('youtube', 1)]"
409,Longest Palindrome,https://leetcode.com/problems/longest-palindrome,"Given a string s which consists of lowercase or uppercase letters, return the length of the longest palindrome that can be built with those letters.

Letters are case sensitive, for example, ""Aa"" is not considered a palindrome here.",['hash-table'],Easy,1560,102,382836,200254,"[""Palindrome Permutation""]","[('python', 41), ('java', 38), ('c++', 36), ('python 3', 29), ('hashmap', 24), ('cpp', 21), ('javascript', 21), ('easy-to-understand', 19), ('java-solution', 10), ('c#', 8), ('python3', 8), ('counter', 7), ('easy-understanding', 7), ('palindrome', 7), ('swift', 7), ('golang', 6), ('map', 6), ('dictionary', 5), ('hash table', 5), ('c', 4), ('explained', 4), ('set', 4), ('bit manipulation', 3), ('bitwise operation', 3), ('constant space', 3), ('cpp solution', 3), ('easy', 3), ('hash-table', 3), ('hashing', 3), ('java ac solution', 3), ('simple', 3), ('swift5', 3), ('100 beat', 2), ('array', 2), ('bitset', 2), ('commented', 2), ('cpp easy', 2), ('dictionary c#', 2), ('dictonary', 2), ('easy to understand', 2), ('easy-solition', 2), ('explained solution', 2), ('explanation', 2), ('fast', 2), ('fastest solution', 2), ('go', 2), ('golang-solution', 2), ('hashset', 2), ('kotlin', 2), ('linear time', 2), ('one-liner', 2), ('one-loop', 2), ('php', 2), ('python2', 2), ('ruby', 2), ('simple solution', 2), ('simplest', 2), ('100 speed', 1), ('2 liner', 1), ('4ms', 1), ('5min cost', 1), ('8 lines', 1), ('algorithm-proof', 1), ('algorithms', 1), ('algos explained', 1), ('ascii', 1), ('better', 1), ('boolean', 1), ('c code', 1), ('c++ easy to understand', 1), ('c++ solution', 1), ('c++11', 1), ('c++code', 1), ('char array', 1), ('clean solution', 1), ('clear', 1), ('collection', 1), ('collections', 1), ('commentedcppcode', 1), ('commetend', 1), ('consise', 1), ('count', 1), ('counts', 1), ('csharp', 1), ('defaultdict', 1), ('dict', 1), ('dictionaries', 1), ('easy sloution', 1), ('easy-solution', 1), ('easy-undestand', 1), ('easytounderstand', 1), ('efficient approach', 1), ('expalanation', 1), ('facebook', 1), ('fast and simple', 1), ('fast-solution', 1), ('fold', 1), ('frequency', 1), ('frequency count', 1), ('frequency map', 1), ('frequency table', 1), ('frequencycounting', 1), ('go-solution', 1), ('greedy', 1), ('hash map', 1), ('illustration', 1), ('immutable', 1), ('intuitive', 1), ('intutive', 1), ('iterative', 1), ('java streams', 1), ('java-8', 1), ('javascrip', 1), ('javascriprt', 1), ('js', 1), ('js javascript', 1), ('linear', 1), ('linear-time-space', 1), ('linq', 1), ('longest palindrom', 1), ('longest palindrome', 1), ('longestpalindrome', 1), ('math', 1), ('naive-solution', 1), ('one pass', 1), ('oneliner', 1), ('palindrom', 1), ('palindrome-check', 1), ('palindromenumber java', 1), ('priorityqueue', 1), ('readable', 1), ('rust', 1), ('scala', 1), ('self explanatory', 1), ('short', 1), ('short code', 1), ('simple clear c++ solution', 1), ('simple-solution', 1), ('single pass', 1), ('soultion-sharing', 1), ('store', 1), ('straight-forward', 1), ('streams', 1), ('string', 1), ('string-operation', 1), ('tricky', 1), ('two-pointers', 1), ('typescript', 1), ('ultra simple', 1), ('unordered map', 1), ('upvote', 1), ('vector', 1), ('video solution', 1), ('video-explanation', 1), ('without hashmap', 1)]"
407,Trapping Rain Water II,https://leetcode.com/problems/trapping-rain-water-ii,"Given an m x n integer matrix heightMap representing the height of each unit cell in a 2D elevation map, return the volume of water it can trap after raining.","['heap', 'breadth-first-search']",Hard,1815,40,118042,52684,"[""Trapping Rain Water""]","[('python', 7), ('priority queue', 6), ('c++', 5), ('priority-queue', 5), ('bfs', 4), ('heapq', 4), ('python 3', 4), ('c++ code', 3), ('cpp', 3), ('heap', 3), ('fast', 2), ('java', 2), ('2d-array', 1), ('accepted', 1), ('breadth-first-search', 1), ('bst', 1), ('c++11', 1), ('constant space', 1), ('cpp easy', 1), ('dijkstra', 1), ('dynamic programming', 1), ('easy to understand', 1), ('easy-understanding', 1), ('efficient', 1), ('explained', 1), ('fast and simple', 1), ('flood-fill', 1), ('global-index', 1), ('golang', 1), ('graph', 1), ('grid', 1), ('help', 1), ('javascript', 1), ('kotlin', 1), ('min heap', 1), ('min-heap', 1), ('nice explaination', 1), ('no code', 1), ('python3', 1), ('readability', 1), ('short', 1), ('solution', 1), ('sparse', 1), ('sssp', 1), ('test case', 1), ('time-complexity', 1), ('trapping-rain-water-ii', 1), ('video explaination', 1), ('visualization', 1)]"
406,Queue Reconstruction by Height,https://leetcode.com/problems/queue-reconstruction-by-height,"You are given an array of people, people, which are the attributes of some people in a queue (not necessarily in order). Each people[i] = [hi, ki] represents the ith person of height hi with exactly ki other people in front who have a height greater than or equal to hi.

Reconstruct and return the queue that is represented by the input array people. The returned queue should be formatted as an array queue, where queue[j] = [hj, kj] is the attributes of the jth person in the queue (queue[0] is the person at the front of the queue).",['greedy'],Medium,4022,448,283803,194908,"[""Count of Smaller Numbers After Self""]","[('python', 25), ('c++', 23), ('python 3', 22), ('greedy', 20), ('sorting', 19), ('java', 15), ('javascript', 13), ('c++ code', 10), ('cpp', 8), ('cpp solution', 8), ('java-solution', 8), ('comparator', 7), ('sort', 7), ('golang', 6), ('c#', 4), ('python3', 4), ('binary indexed tree', 3), ('easy-undestand', 3), ('greedy approach', 3), ('heap', 3), ('priority queue', 3), ('simple solution', 3), ('swift', 3), ('binary index tree', 2), ('bst', 2), ('cpp easy', 2), ('csharp', 2), ('easy-understand', 2), ('explaination', 2), ('explained', 2), ('explanations', 2), ('fast', 2), ('lambda', 2), ('list', 2), ('nlogn', 2), ('python2', 2), ('python3.8', 2), ('rust', 2), ('scala', 2), ('segment tree', 2), ('trees', 2), ('vector', 2), ('video explaination', 2), ('video explanation', 2), ('video solution', 2), ('1-line', 1), ('1-liner', 1), ('100 speed', 1), ('2d-array', 1), ('5ms', 1), ('array', 1), ('beat 99', 1), ('binary search', 1), ('binary search tree', 1), ('binary-search', 1), ('binary-tree', 1), ('bit', 1), ('bit indexed tree', 1), ('brute force', 1), ('bubble-sort', 1), ('c', 1), ('c++ easy to understand', 1), ('clean', 1), ('comments', 1), ('compare-function', 1), ('dynamic programming', 1), ('easy', 1), ('easy implementation', 1), ('easy understanding', 1), ('easy-implementation', 1), ('easy-to-understand', 1), ('efficient', 1), ('explanation', 1), ('explanation of logic', 1), ('explanation with code', 1), ('explanatory video', 1), ('fast and simple', 1), ('fast-solution', 1), ('fenwick tree', 1), ('fenwick-tree', 1), ('functional', 1), ('functional programming', 1), ('go-solution', 1), ('golang-solution', 1), ('greedy algorithm', 1), ('help me', 1), ('improve', 1), ('insert', 1), ('insertion sort', 1), ('javacsript', 1), ('javascript solution', 1), ('kotlin', 1), ('lambda function', 1), ('language', 1), ('linear time', 1), ('linked-list', 1), ('linkedlist', 1), ('linq', 1), ('nlgn', 1), ('no-code', 1), ('one-line', 1), ('one-liner', 1), ('oneline', 1), ('optimal solution', 1), ('optimization', 1), ('optimized', 1), ('pointers', 1), ('prefix sum', 1), ('queue', 1), ('readable', 1), ('recursion', 1), ('search', 1), ('self-explanatory', 1), ('sets', 1), ('shorter', 1), ('singly-linked-list', 1), ('sort-function', 1), ('sorted array', 1), ('streams', 1), ('swift5', 1), ('time complexity', 1), ('typescript', 1), ('understandable', 1), ('video', 1), ('wrong-answer', 1)]"
405,Convert a Number to Hexadecimal,https://leetcode.com/problems/convert-a-number-to-hexadecimal,"Given an integer num, return a string representing its hexadecimal representation. For negative integers, two’s complement method is used.

All the letters in the answer string should be lowercase characters, and there should not be any leading zeros in the answer except for the zero itself.",['bit-manipulation'],Easy,601,133,178831,79796,[],"[('python', 18), ('c++', 17), ('java', 14), ('python 3', 14), ('bit manipulation', 9), ('cpp', 8), ('python3', 8), ('javascript', 6), ('golang', 5), ('c#', 4), ('bit-manipulation', 3), ('c++ code', 3), ('one-liner', 3), ('simple', 3), ('bit-shift', 2), ('c', 2), ('clean', 2), ('easy', 2), ('easy-to-understand', 2), ('fast and simple', 2), ('hashmap', 2), ('hexadecimal', 2), ('recursion', 2), ('ruby', 2), ('solution-sharing-cpp', 2), ('swift', 2), ('algorithms', 1), ('ascii', 1), ('basic concept', 1), ('bits', 1), ('bitset', 1), ('c++ easy to understand', 1), ('c++11', 1), ('clean code', 1), ('complexity', 1), ('concise-solution', 1), ('cpp solution', 1), ('dfs', 1), ('easy-understanding', 1), ('easy-undestand', 1), ('explanation', 1), ('explanatory comments', 1), ('functional', 1), ('go-solution', 1), ('goalng', 1), ('good variable names', 1), ('group-shift', 1), ('hash table', 1), ('iteratively', 1), ('java solution', 1), ('java-solution', 1), ('js', 1), ('js javascript', 1), ('kotlinvim', 1), ('mod', 1), ('modulo', 1), ('one-line', 1), ('python2', 1), ('robust', 1), ('short code', 1), ('simpe', 1), ('simple-solution', 1), ('string', 1), ('stringbuilder', 1), ('stringstream', 1)]"
404,Sum of Left Leaves,https://leetcode.com/problems/sum-of-left-leaves,"Given the root of a binary tree, return the sum of all left leaves.",['tree'],Easy,1823,173,466297,244186,[],"[('java', 69), ('recursion', 68), ('c++', 49), ('dfs', 45), ('cpp', 37), ('python', 34), ('python 3', 32), ('bfs', 24), ('javascript', 20), ('python3', 19), ('recursive', 19), ('binary-tree', 16), ('easy-understanding', 14), ('java-solution', 8), ('trees', 8), ('c#', 7), ('cpp solution', 7), ('easy', 6), ('iterative', 6), ('recurision', 6), ('recusion', 6), ('dfs simple solution', 5), ('golang', 5), ('swift', 5), ('tree', 5), ('tree traversal', 5), ('tree-traversal', 5), ('0ms', 4), ('easy-to-understand', 4), ('easy-undestand', 4), ('inorder traversal', 4), ('kotlin', 4), ('one-liner', 4), ('100 faster', 3), ('c', 3), ('dfs-tree', 3), ('easytounderstand', 3), ('go', 3), ('golang-solution', 3), ('python2', 3), ('queue', 3), ('recursive easy', 3), ('recursive-dfs', 3), ('recursively', 3), ('simple', 3), ('simple solution', 3), ('stack', 3), ('bfs simple solution', 2), ('binary tree', 2), ('binarytree', 2), ('breadth first search', 2), ('c++ solution', 2), ('cpp doubt', 2), ('cpp easy', 2), ('dfs solution', 2), ('dfs-recursive', 2), ('explaination', 2), ('explained', 2), ('fast and simple', 2), ('fast-solution', 2), ('flag', 2), ('iteratively', 2), ('javascript recursive', 2), ('python bfs', 2), ('recursive lines clean', 2), ('recursive solution', 2), ('recusive', 2), ('ruby', 2), ('swift5', 2), ('#queue', 1), ('0ms runtime', 1), ('100', 1), ('100 speed', 1), ('4 lines', 1), ('4linejavarecursive', 1), ('approach and code', 1), ('beginner', 1), ('beginner friendly', 1), ('bfs ruby', 1), ('bfs vs dfs', 1), ('bfs-dfs', 1), ('binary-search-tree', 1), ('bst', 1), ('c#-solution', 1), ('c++ code', 1), ('c++solution', 1), ('clean-code', 1), ('comments', 1), ('concise', 1), ('csharp', 1), ('deep-first-search', 1), ('depth first search', 1), ('depth-first-search', 1), ('dfs-in-order', 1), ('easy c++ function solution', 1), ('easy python bfs iterative', 1), ('easy to read', 1), ('easy to understand', 1), ('easy understanding', 1), ('easy undestanding', 1), ('easy-peasy', 1), ('easy-to-read', 1), ('easysolution', 1), ('efficient', 1), ('elegant', 1), ('faster than 100.00', 1), ('fastest solution', 1), ('fully-explained', 1), ('functional-programming', 1), ('generator', 1), ('help', 1), ('inorder', 1), ('inorder iterative', 1), ('intutive', 1), ('iterate', 1), ('iterative traversal', 1), ('java solution sharing', 1), ('javasccript', 1), ('javascrip', 1), ('javascript solution', 1), ('javscript', 1), ('kotlin-solution', 1), ('leetcode', 1), ('left leaves', 1), ('level order traversal', 1), ('linear time', 1), ('meiyaowen', 1), ('memoization', 1), ('neat', 1), ('non-recursive', 1), ('oneline', 1), ('php', 1), ('post-order', 1), ('postorder-recursive', 1), ('postorder-traversal', 1), ('preorder', 1), ('pyhton', 1), ('python bfs iterative', 1), ('python easy bfs', 1), ('python simple', 1), ('recurssion', 1), ('recusrive', 1), ('rust', 1), ('self-explanatory', 1), ('simple clear c++ solution', 1), ('simple java', 1), ('simple-solution', 1), ('simplesweet', 1), ('solution', 1), ('solutionsharing', 1), ('stack-based', 1), ('stacks', 1), ('sum', 1), ('sum of left leaves', 1), ('sumofleftleaves', 1), ('thinking', 1), ('traversal', 1), ('traverse', 1), ('tree problem', 1), ('typescript', 1), ('video', 1)]"
403,Frog Jump,https://leetcode.com/problems/frog-jump,"A frog is crossing a river. The river is divided into some number of units, and at each unit, there may or may not exist a stone. The frog can jump on a stone, but it must not jump into the water.

Given a list of stones' positions (in units) in sorted ascending order, determine if the frog can cross the river by landing on the last stone. Initially, the frog is on the first stone and assumes the first jump must be 1 unit.

If the frog's last jump was k units, its next jump must be either k - 1, k, or k + 1 units. The frog can only jump in the forward direction.",['dynamic-programming'],Hard,1549,131,288948,120754,"[""Minimum Sideway Jumps""]","[('memoization', 18), ('dynamic programming', 16), ('java', 15), ('python', 15), ('dp', 12), ('c++', 10), ('dfs', 9), ('dynamic-programming', 7), ('python 3', 6), ('recursion', 6), ('python3', 5), ('c#', 4), ('easy-understanding', 4), ('hashmap', 4), ('java-solution', 4), ('cpp', 3), ('dynamic programmin', 3), ('frog-jump', 3), ('javascript', 3), ('bfs', 2), ('c++ code', 2), ('dfs simple solution', 2), ('dfs-iterative', 2), ('help needed', 2), ('pyhton', 2), ('#binarysearch', 1), ('#python', 1), ('array', 1), ('back-tracking', 1), ('backtracking', 1), ('binary search', 1), ('binary-search', 1), ('binarysearch', 1), ('bottom-up', 1), ('commented', 1), ('depth-first-search', 1), ('detail', 1), ('dfs traversal', 1), ('dfs with memo', 1), ('dp-programming', 1), ('dp-techqique', 1), ('easiest solution', 1), ('easy-undestand', 1), ('easysolution', 1), ('easytounderstand', 1), ('explaination', 1), ('explanation', 1), ('faster then 95', 1), ('frogjump', 1), ('full explanation', 1), ('golang', 1), ('hard', 1), ('hash map', 1), ('inline explanation', 1), ('intuition', 1), ('iterative', 1), ('iterative solution', 1), ('java ac solution', 1), ('lru cache', 1), ('map', 1), ('nlogn', 1), ('one pass solution', 1), ('proof', 1), ('python2', 1), ('quadratic time', 1), ('readable', 1), ('recurision', 1), ('recursion memoization', 1), ('recursive', 1), ('recursive solution', 1), ('recusion', 1), ('simpe', 1), ('stacks', 1), ('swift', 1), ('tabulation', 1), ('test-case', 1), ('time complexity', 1), ('time-complexity', 1), ('top down', 1), ('top-down', 1), ('top-down dp', 1), ('understanding', 1), ('unordered map', 1), ('unordered set', 1)]"
402,Remove K Digits,https://leetcode.com/problems/remove-k-digits,"Given string num representing a non-negative integer num, and an integer k, return the smallest possible integer after removing k digits from num.","['stack', 'greedy']",Medium,3263,141,622288,178644,"[""Create Maximum Number"", ""Monotone Increasing Digits"", ""Find the Most Competitive Subsequence""]","[('python', 23), ('stack', 22), ('python 3', 21), ('c++', 19), ('java', 19), ('stacks', 19), ('cpp', 17), ('greedy', 11), ('easy-understanding', 10), ('javascript', 10), ('python3', 7), ('greedy approach', 5), ('linear time', 5), ('c#', 4), ('stack-based', 4), ('string', 4), ('c++ code', 3), ('cpp solution', 3), ('java-solution', 3), ('simple solution', 3), ('deque', 2), ('easy understanding', 2), ('easy-to-understand', 2), ('golang', 2), ('javascript solution', 2), ('no extra space', 2), ('python3.8', 2), ('recursion', 2), ('ruby', 2), ('solution', 2), ('straightforward', 2), ('stringbuilder', 2), ('#easy-understand', 1), ('#explained', 1), ('#python', 1), ('0ms', 1), ('1ms', 1), ('adjacent', 1), ('arraydeque', 1), ('c', 1), ('c++ iterative sol', 1), ('c++ solution', 1), ('c++11', 1), ('c++14', 1), ('c++code', 1), ('clear solution', 1), ('complexity analysis', 1), ('concise', 1), ('cplusplus', 1), ('cpp easy', 1), ('csharp', 1), ('dequeu', 1), ('easy', 1), ('easy to understand', 1), ('easy-understand', 1), ('easy-undestand', 1), ('efficient', 1), ('explained solution', 1), ('fast and simple', 1), ('fast-solution', 1), ('faster than 99.98', 1), ('help needed', 1), ('in-place', 1), ('iterate', 1), ('iterative', 1), ('iteratively', 1), ('java ac solution', 1), ('kotlin', 1), ('linear space', 1), ('linear-space', 1), ('linear-time', 1), ('linear-time-space', 1), ('loop', 1), ('loops', 1), ('minqueue', 1), ('missing-test-case', 1), ('monotone queue', 1), ('nostack', 1), ('one iteration', 1), ('pair', 1), ('pairs', 1), ('priority queue', 1), ('pyhton 3', 1), ('python2', 1), ('pythonpython3', 1), ('queue', 1), ('recursive', 1), ('recursive lines clean', 1), ('recursively', 1), ('remove-k-digits', 1), ('removekdigits', 1), ('rust', 1), ('scala', 1), ('short', 1), ('slow', 1), ('solition-sharing', 1), ('solution-sharing-python', 1), ('stack python', 1), ('stack-implementation', 1), ('string builder', 1), ('strings', 1), ('testcase-wrong', 1), ('tricky', 1), ('ugly', 1), ('well explained', 1)]"
401,Binary Watch,https://leetcode.com/problems/binary-watch,"A binary watch has 4 LEDs on the top which represent the hours (0-11), and the 6 LEDs on the bottom represent the minutes (0-59). Each LED represents a zero or one, with the least significant bit on the right.


	For example, the below binary watch reads ""4:51"".




Given an integer turnedOn which represents the number of LEDs that are currently on, return all possible times the watch could represent. You may return the answer in any order.

The hour must not contain a leading zero.


	For example, ""01:00"" is not valid. It should be ""1:00"".


The minute must be consist of two digits and may contain a leading zero.


	For example, ""10:2"" is not valid. It should be ""10:02"".","['backtracking', 'bit-manipulation']",Easy,747,1303,196330,95552,"[""Letter Combinations of a Phone Number"", ""Number of 1 Bits""]","[('backtracking', 25), ('c++', 23), ('java', 11), ('python', 11), ('cpp', 10), ('javascript', 9), ('python3', 9), ('python 3', 8), ('recursion', 6), ('0ms', 5), ('bit manipulation', 5), ('bit-manipulation', 5), ('100 speed', 3), ('c#', 3), ('dfs', 3), ('easy understanding', 3), ('easy-understanding', 3), ('java-solution', 3), ('ruby', 3), ('simple solution', 3), ('swift', 3), ('back-tracking', 2), ('bit', 2), ('bitset', 2), ('clean', 2), ('combination', 2), ('easy', 2), ('easy-undestand', 2), ('golang', 2), ('solution-sharing-cpp', 2), ('#memoization', 1), ('#recursion', 1), ('0ms-4ms', 1), ('100 memory', 1), ('algorithms', 1), ('array', 1), ('back tracking', 1), ('backtrace', 1), ('backtrack', 1), ('bit-shift', 1), ('bitcount', 1), ('bitmanipulation', 1), ('brute force', 1), ('c++ code', 1), ('c++11', 1), ('clean-code', 1), ('cleancode', 1), ('code', 1), ('concise', 1), ('constexpr', 1), ('counting-bits', 1), ('cpp easy', 1), ('cpp solution', 1), ('cpp-solution', 1), ('depth first search', 1), ('digit', 1), ('easy python', 1), ('easy-code', 1), ('easy-understand', 1), ('easytounderstand', 1), ('explaination', 1), ('explanation', 1), ('explanation of logic', 1), ('explanations', 1), ('fast', 1), ('go', 1), ('go-solution', 1), ('golang-solution', 1), ('hamming distance', 1), ('hashmap', 1), ('hashtable', 1), ('illustration', 1), ('iterative', 1), ('java-8', 1), ('javascipt', 1), ('js', 1), ('js javascript', 1), ('map', 1), ('memory optimized', 1), ('nextpermutation', 1), ('numberof1bits', 1), ('one-liner', 1), ('oneline', 1), ('popcount', 1), ('python2', 1), ('python3.8', 1), ('python3.9', 1), ('question', 1), ('recursive solution', 1), ('rust', 1), ('simpe', 1), ('simple', 1), ('string-integer', 1), ('swift5', 1), ('test case', 1), ('test-case-bug', 1), ('testcase-wrong', 1), ('top questions', 1), ('well commented', 1)]"
400,Nth Digit,https://leetcode.com/problems/nth-digit,"Given an integer n, return the nth digit of the infinite integer sequence [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, ...].",['math'],Medium,469,1224,203382,66049,[],"[('c++', 10), ('cpp', 7), ('python3', 5), ('100 faster runtime', 4), ('golang', 3), ('explanation', 2), ('java', 2), ('javascript', 2), ('python 3', 2), ('c#', 1), ('c++ code', 1), ('clean code', 1), ('clear explanation', 1), ('explaination', 1), ('go-solution', 1), ('golang-solution', 1), ('math', 1), ('modular arithmetic', 1), ('python', 1), ('rust', 1), ('short c++ code', 1), ('simple clear c++ solution', 1), ('swift', 1)]"
399,Evaluate Division,https://leetcode.com/problems/evaluate-division,"You are given an array of variable pairs equations and an array of real numbers values, where equations[i] = [Ai, Bi] and values[i] represent the equation Ai / Bi = values[i]. Each Ai or Bi is a string that represents a single variable.

You are also given some queries, where queries[j] = [Cj, Dj] represents the jth query where you must find the answer for Cj / Dj = ?.

Return the answers to all queries. If a single answer cannot be determined, return -1.0.

Note: The input is always valid. You may assume that evaluating the queries will not result in division by zero and that there is no contradiction.","['union-find', 'graph']",Medium,3392,273,333974,182808,[],"[('dfs', 59), ('graph', 37), ('c++', 32), ('python', 32), ('java', 24), ('cpp', 23), ('bfs', 21), ('python 3', 19), ('union-find', 14), ('python3', 13), ('javascript', 12), ('union find', 10), ('dfs simple solution', 8), ('easy-understanding', 8), ('clean code', 6), ('c#', 5), ('easy', 5), ('unionfind', 5), ('explained', 4), ('java-solution', 4), ('100 speed', 3), ('clean-code', 3), ('cpp easy', 3), ('cpp solution', 3), ('dfs solution', 3), ('hashmap', 3), ('php', 3), ('simple', 3), ('simple solution', 3), ('0ms', 2), ('100 memory', 2), ('adjacency list', 2), ('backtracking', 2), ('bfs python', 2), ('breadth first search', 2), ('breadth-first-search', 2), ('c++11', 2), ('dfs-iterative', 2), ('dp', 2), ('easy-undestand', 2), ('flyod warshall', 2), ('golang', 2), ('javascript solution', 2), ('map-stl', 2), ('memoization', 2), ('rust', 2), ('swift', 2), ('#problem #c solution #bug', 1), ('0ms runtime', 1), ('100 faster', 1), ('1ms runtime', 1), ('accepted', 1), ('algorithms', 1), ('backtracing', 1), ('backtrack', 1), ('beginner friendly', 1), ('best-submission', 1), ('bfs with prev path map', 1), ('breath first search', 1), ('bug-test-case', 1), ('c++ code', 1), ('c++ solution', 1), ('cache', 1), ('commentary', 1), ('commented', 1), ('comments', 1), ('comments added', 1), ('confuse-description', 1), ('cpp-solution', 1), ('defaultdict', 1), ('depth first search', 1), ('depth-first search', 1), ('deque', 1), ('dequeue', 1), ('detailed explanation', 1), ('dfs simple', 1), ('dfs-non-recursive', 1), ('dfs-recursive', 1), ('dfs-tree', 1), ('disjoint-set', 1), ('disjointset', 1), ('easy to read', 1), ('easy to understand', 1), ('easy understand', 1), ('easy understanding', 1), ('easy-understand', 1), ('elegant solution', 1), ('es6', 1), ('example2', 1), ('explained solution', 1), ('explanation with logic', 1), ('fast-solution', 1), ('floyd-warshall', 1), ('fully explained', 1), ('go', 1), ('graph theory', 1), ('graph traversal', 1), ('graph-search', 1), ('graph-theory', 1), ('graphs', 1), ('hash', 1), ('interview-friendly', 1), ('iterative', 1), ('java ac solution', 1), ('java graph dis solution', 1), ('javascriptes6', 1), ('javscript', 1), ('kotlinvim', 1), ('linear algebra', 1), ('map', 1), ('math', 1), ('matrix', 1), ('memory-limit-exceeded', 1), ('missing-test-case', 1), ('modular', 1), ('oop', 1), ('optimal', 1), ('pair', 1), ('path compression', 1), ('path-compression', 1), ('precacluation', 1), ('production', 1), ('python bfs', 1), ('python2', 1), ('question-not-clear', 1), ('queue', 1), ('rank', 1), ('readable', 1), ('recursion', 1), ('recusion', 1), ('ruby', 1), ('set', 1), ('short code', 1), ('solution-explaining', 1), ('space', 1), ('test cases', 1), ('test-case', 1), ('test-case-too-weak', 1), ('time', 1), ('treemap', 1), ('typescript', 1), ('unordered map', 1), ('unordered set', 1), ('video', 1), ('video explanation', 1), ('video solution', 1), ('video-explanation', 1), ('youtube', 1)]"
398,Random Pick Index,https://leetcode.com/problems/random-pick-index,"Given an integer array nums with possible duplicates, randomly output the index of a given target number. You can assume that the given target number must exist in the array.

Implement the Solution class:


	Solution(int[] nums) Initializes the object with the array nums.
	int pick(int target) Picks a random index i from nums where nums[i] == target. If there are multiple valid i's, then each index should have an equal probability of returning.",['reservoir-sampling'],Medium,646,844,204623,119997,"[""Linked List Random Node"", ""Random Pick with Blacklist"", ""Random Pick with Weight""]","[('python', 14), ('python 3', 13), ('java', 6), ('python3', 6), ('c#', 4), ('c++', 4), ('hashmap', 4), ('easy-to-understand', 3), ('easy-understanding', 3), ('fisher-yates-shuffle', 3), ('javascript', 3), ('reservoir-sampling', 3), ('clear', 2), ('cpp', 2), ('kotlin', 2), ('linear time', 2), ('random', 2), ('algorithms', 1), ('arraylist', 1), ('binary-search', 1), ('clean code', 1), ('cpp easy', 1), ('csharp', 1), ('deque', 1), ('dictonary', 1), ('easiest', 1), ('easy', 1), ('easy to understand', 1), ('easy-understand', 1), ('explained', 1), ('fast and simple', 1), ('golang', 1), ('hash table', 1), ('heapq', 1), ('help me', 1), ('interview-friendly', 1), ('intuitive', 1), ('java ac solution', 1), ('javascript brute force', 1), ('javascript solution', 1), ('kotlin-solution', 1), ('kotlinvim', 1), ('linq', 1), ('map', 1), ('one-liner', 1), ('probability', 1), ('queue-approach', 1), ('quicksort', 1), ('random pick', 1), ('ruby', 1), ('runtime-error', 1), ('short c++ code', 1), ('simple', 1), ('simple solution', 1), ('solution-explaining', 1), ('solution-python', 1), ('swift', 1), ('video', 1), ('well-explained', 1), ('youtube', 1)]"
397,Integer Replacement,https://leetcode.com/problems/integer-replacement,"Given a positive integer n, you can apply one of the following operations:


	If n is even, replace n with n / 2.
	If n is odd, replace n with either n + 1 or n - 1.


Return the minimum number of operations needed for n to become 1.","['math', 'bit-manipulation']",Medium,516,365,194455,65357,[],"[('c++', 17), ('python', 14), ('cpp', 10), ('python 3', 10), ('java', 9), ('recursion', 9), ('bit manipulation', 6), ('python3', 6), ('javascript', 5), ('bit-manipulation', 4), ('easy-undestand', 4), ('recursive', 4), ('simple', 4), ('bfs', 3), ('dfs', 3), ('dp', 3), ('memoization', 3), ('swift', 3), ('bitwise', 2), ('easy', 2), ('java-solution', 2), ('kotlin', 2), ('math', 2), ('recursive dp', 2), ('solution', 2), ('100 faster', 1), ('100 memory', 1), ('accepted', 1), ('accepted solution', 1), ('algorithms', 1), ('basic maths', 1), ('bitwise operation', 1), ('c', 1), ('c#', 1), ('c++ code', 1), ('clearly', 1), ('cpp easy', 1), ('doubts', 1), ('easy-understanding', 1), ('explaination', 1), ('explained', 1), ('fast and simple', 1), ('fastest', 1), ('greedy', 1), ('interview-friendly', 1), ('intutive', 1), ('iterative', 1), ('logarithmic time', 1), ('logic explained', 1), ('popcount', 1), ('python2', 1), ('readable', 1), ('recursive solution', 1), ('self explanatory', 1), ('short c++ code', 1), ('simpe', 1), ('simple solution', 1), ('solition-sharing', 1), ('solution-cpp', 1), ('solution-explaining', 1), ('solution-sharing-python', 1), ('solution-sharingjava', 1), ('ultra simple', 1), ('unique', 1), ('upvote', 1), ('video', 1), ('youtube', 1), ('zea7ot', 1)]"
396,Rotate Function,https://leetcode.com/problems/rotate-function,"You are given an integer array nums of length n.

Assume arrk to be an array obtained by rotating nums by k positions clock-wise. We define the rotation function F on nums as follow:


	F(k) = 0 * arrk[0] + 1 * arrk[1] + ... + (n - 1) * arrk[n - 1].


Return the maximum value of F(0), F(1), ..., F(n-1).",['math'],Medium,521,166,136481,50190,[],"[('c++', 8), ('python', 6), ('javascript', 3), ('math', 3), ('python3', 3), ('cpp', 2), ('golang', 2), ('java', 2), ('python 3', 2), ('100 speed', 1), ('c#', 1), ('c++11', 1), ('dp c++', 1), ('easy to understand', 1), ('explanations', 1), ('go-solution', 1), ('golang-solution', 1), ('interview-friendly', 1), ('iterative', 1), ('java-solution', 1), ('kotlin', 1), ('linear-time', 1), ('no solution passing', 1), ('priority queue', 1), ('pyhton', 1), ('python3.8', 1), ('simple clear c++ solution', 1), ('solution', 1), ('solution-explaining', 1), ('solution-sharing-cpp', 1), ('vector', 1), ('video', 1), ('wrong answer', 1), ('wrong testcase', 1), ('youtube', 1)]"
395,Longest Substring with At Least K Repeating Characters,https://leetcode.com/problems/longest-substring-with-at-least-k-repeating-characters,"Given a string s and an integer k, return the length of the longest substring of s such that the frequency of each character in this substring is greater than or equal to k.","['divide-and-conquer', 'recursion', 'sliding-window']",Medium,2514,266,276779,120989,[],"[('java', 21), ('c++', 19), ('python 3', 17), ('divide and conquer', 13), ('recursion', 12), ('python', 11), ('slidingwindow', 10), ('cpp', 9), ('javascript', 8), ('cpp solution', 5), ('python3', 5), ('c#', 4), ('java-solution', 3), ('recurision', 3), ('ruby', 3), ('sliding window', 3), ('sliding-window', 3), ('comments-added', 2), ('dictionary', 2), ('dive-and-conquer', 2), ('easy', 2), ('easy-understanding', 2), ('explained', 2), ('golang', 2), ('hashmap', 2), ('javascript solution', 2), ('rust', 2), ('two-pointers', 2), ('100 faster cpp', 1), ('2 pointer', 1), ('accepted', 1), ('binary-search', 1), ('brute force', 1), ('c++ code', 1), ('c++ solution', 1), ('c++14', 1), ('chinese', 1), ('commentedcppcode', 1), ('counter', 1), ('crispygang', 1), ('dc', 1), ('depth first-search', 1), ('dict', 1), ('divid and conquer', 1), ('divide-and-conquer', 1), ('divide-conquer', 1), ('dividedconquer', 1), ('dp', 1), ('easy code', 1), ('easy to understand', 1), ('easy-understand', 1), ('fast-solution', 1), ('faster than 100', 1), ('fully commented', 1), ('go', 1), ('go-solution', 1), ('golang-solution', 1), ('hash table', 1), ('hint', 1), ('immutable', 1), ('importantobservation', 1), ('java ac solution', 1), ('kotlinvim', 1), ('map', 1), ('memoization', 1), ('optimisation', 1), ('performance', 1), ('php', 1), ('pruning', 1), ('re', 1), ('recursive', 1), ('recursive easy', 1), ('recusion', 1), ('runtime', 1), ('sandeepkumar', 1), ('scala', 1), ('short', 1), ('simple clear c++ solution', 1), ('split', 1), ('string', 1), ('string parsing', 1), ('string-operation', 1), ('strings', 1), ('substring', 1), ('summary', 1), ('swift', 1), ('time complexity', 1), ('two pointers', 1), ('typescript javascript', 1), ('video explaination', 1), ('with explanation', 1)]"
394,Decode String,https://leetcode.com/problems/decode-string,"Given an encoded string, return its decoded string.

The encoding rule is: k[encoded_string], where the encoded_string inside the square brackets is being repeated exactly k times. Note that k is guaranteed to be a positive integer.

You may assume that the input string is always valid; No extra white spaces, square brackets are well-formed, etc.

Furthermore, you may assume that the original data does not contain any digits and that digits are only for those repeat numbers, k. For example, there won't be input like 3a or 2[4].","['stack', 'depth-first-search']",Medium,4939,233,608395,323381,"[""Encode String with Shortest Length"", ""Number of Atoms"", ""Brace Expansion""]","[('stack', 75), ('java', 62), ('recursion', 59), ('c++', 58), ('stacks', 56), ('python', 55), ('python 3', 46), ('javascript', 28), ('cpp', 26), ('java-solution', 20), ('python3', 19), ('string', 15), ('c#', 14), ('stack-based', 13), ('golang', 12), ('recursive', 11), ('simple', 10), ('easy-understanding', 9), ('explained', 9), ('dfs', 8), ('recurision', 8), ('golang-solution', 7), ('stringbuilder', 7), ('iterative', 6), ('javascript solution', 6), ('cpp solution', 5), ('easy-to-understand', 5), ('go-solution', 5), ('regular-expression', 5), ('brute force', 4), ('cpp easy', 4), ('easy-undestand', 4), ('queue', 4), ('recusion', 4), ('rust', 4), ('0ms', 3), ('100 speed', 3), ('c', 3), ('c++ code', 3), ('c++11', 3), ('clean code', 3), ('cpp easy-understanding', 3), ('decoding', 3), ('easy', 3), ('easy to understand', 3), ('explanation of logic', 3), ('go', 3), ('itereative', 3), ('java ac solution', 3), ('javascrip', 3), ('kotlin', 3), ('regex', 3), ('2 stacks', 2), ('algorithms', 2), ('clean', 2), ('commented', 2), ('concise-solution', 2), ('csharp', 2), ('deque', 2), ('dfs simple solution', 2), ('easy understanding', 2), ('easytounderstand', 2), ('encoding', 2), ('intuitive', 2), ('iteration', 2), ('iterative approch', 2), ('js javascript', 2), ('recursively', 2), ('ruby', 2), ('simple solution', 2), ('strings', 2), ('strings manipulation', 2), ('swift', 2), ('typescript', 2), ('#easy-understanding', 1), ('#python 3', 1), ('#stacks', 1), ('0 ms', 1), ('100', 1), ('100 faster', 1), ('100 faster runtime', 1), ('100 space', 1), ('2 pointers', 1), ('99 memory', 1), ('addition', 1), ('beats 100', 1), ('beats 80', 1), ('beauty', 1), ('beginner friendly', 1), ('c++ ac', 1), ('c++ iterative sol', 1), ('c++ recursive solution', 1), ('c++ solution', 1), ('clear', 1), ('comments', 1), ('composition', 1), ('constant multipiers', 1), ('cpp doubt', 1), ('cpp soltuion', 1), ('datastructure', 1), ('dcode string', 1), ('decode string', 1), ('decode-ways', 1), ('decodestring', 1), ('dfs recursive', 1), ('dfs-recursive', 1), ('dfs-topdown', 1), ('dictionary', 1), ('divide and conquer', 1), ('dshah14', 1), ('easy soluton', 1), ('efficient', 1), ('elegant', 1), ('encryption', 1), ('es2015', 1), ('eval', 1), ('expalanation', 1), ('explained solution', 1), ('explanation with code', 1), ('explanation with logic', 1), ('fast', 1), ('faster', 1), ('faster 2ms', 1), ('fastest', 1), ('fastest solution', 1), ('follow-up', 1), ('for-beginner', 1), ('go lang', 1), ('google', 1), ('graph', 1), ('hashmap', 1), ('help', 1), ('iterative way', 1), ('java solution', 1), ('javascript recursive', 1), ('javascriptes6', 1), ('kotlinvim', 1), ('leetcode 394', 1), ('linear-complexity', 1), ('memory optimized', 1), ('mrmagician', 1), ('naive', 1), ('non-recursive', 1), ('norecursion', 1), ('nostacks', 1), ('operator-overloading', 1), ('php', 1), ('php solution', 1), ('python3.8', 1), ('readable', 1), ('recursive approach', 1), ('recursive easy', 1), ('recursiveley', 1), ('recurssion', 1), ('recusrive', 1), ('regex expression', 1), ('regexp', 1), ('regx', 1), ('resursive', 1), ('scala', 1), ('security', 1), ('short c++ code', 1), ('short solution', 1), ('simple-solution', 1), ('single pass', 1), ('space', 1), ('space-efficient', 1), ('stack recursion', 1), ('stack-implementation', 1), ('string parsing', 1), ('string-operation', 1), ('stringstream', 1), ('substring', 1), ('testcase', 1), ('testcases', 1), ('time', 1), ('time-complexity-o', 1), ('tips', 1), ('understandable', 1), ('upvote', 1), ('vector', 1), ('vectors', 1), ('very fast', 1), ('very glorious', 1), ('video explaination', 1), ('video solution', 1), ('video-explanation', 1), ('while-loop', 1), ('without stack', 1)]"
393,UTF-8 Validation,https://leetcode.com/problems/utf-8-validation,"Given an integer array data representing the data, return whether it is a valid UTF-8 encoding.

A character in UTF8 can be from 1 to 4 bytes long, subjected to the following rules:


	For a 1-byte character, the first bit is a 0, followed by its Unicode code.
	For an n-bytes character, the first n bits are all one's, the n + 1 bit is 0, followed by n - 1 bytes with the most significant 2 bits being 10.


This is how the UTF-8 encoding would work:


   Char. number range  |        UTF-8 octet sequence
      (hexadecimal)    |              (binary)
   --------------------+---------------------------------------------
   0000 0000-0000 007F | 0xxxxxxx
   0000 0080-0000 07FF | 110xxxxx 10xxxxxx
   0000 0800-0000 FFFF | 1110xxxx 10xxxxxx 10xxxxxx
   0001 0000-0010 FFFF | 11110xxx 10xxxxxx 10xxxxxx 10xxxxxx


Note: The input is an array of integers. Only the least significant 8 bits of each integer is used to store the data. This means each integer represents only 1 byte of data.",['bit-manipulation'],Medium,295,1247,150752,57550,[],"[('python', 10), ('bit manipulation', 9), ('java', 7), ('bit-manipulation', 6), ('cpp', 5), ('python 3', 4), ('string', 3), ('swift', 3), ('c', 2), ('c++', 2), ('easy-understanding', 2), ('javascript', 2), ('python3', 2), ('c++ code', 1), ('c++ summary of related problem', 1), ('concise', 1), ('cpp-solution', 1), ('dfa', 1), ('easy-undestand', 1), ('esay-understand', 1), ('fast', 1), ('faster than 100.00', 1), ('go', 1), ('go lang', 1), ('go-solution', 1), ('golang', 1), ('golang-solution', 1), ('java solution', 1), ('simple', 1), ('state-machine', 1), ('straightforward', 1), ('testcase error', 1), ('unclear', 1)]"
392,Is Subsequence,https://leetcode.com/problems/is-subsequence,"Given two strings s and t, check if s is a subsequence of t.

A subsequence of a string is a new string that is formed from the original string by deleting some (can be none) of the characters without disturbing the relative positions of the remaining characters. (i.e., ""ace"" is a subsequence of ""abcde"" while ""aec"" is not).","['binary-search', 'dynamic-programming', 'greedy']",Easy,2435,239,592605,294054,"[""Number of Matching Subsequences"", ""Shortest Way to Form String""]","[('c++', 89), ('java', 68), ('cpp', 51), ('python', 51), ('python 3', 33), ('javascript', 32), ('dynamic programming', 29), ('two-pointers', 28), ('easy-understanding', 27), ('simple solution', 23), ('python3', 22), ('java-solution', 20), ('easy', 16), ('cpp solution', 15), ('dp', 13), ('string', 12), ('cpp easy', 11), ('recursion', 11), ('two-pointer', 11), ('binary search', 10), ('two pointer', 10), ('two pointers', 10), ('simple', 9), ('greedy', 8), ('linear time', 8), ('c++ code', 7), ('golang', 7), ('easy-to-understand', 6), ('follow-up', 6), ('kotlin', 6), ('lcs', 6), ('100 speed', 5), ('javascript solution', 5), ('recursive', 5), ('subsequence', 5), ('swift', 5), ('0ms', 4), ('binary-search', 4), ('c', 4), ('c#', 4), ('constant space', 4), ('easytounderstand', 4), ('fast-solution', 4), ('is subsequence', 4), ('iterative', 4), ('java ac solution', 4), ('ruby', 4), ('simple clear c++ solution', 4), ('two pointer technique', 4), ('c code', 3), ('easy-undestand', 3), ('explained', 3), ('iterator', 3), ('longest common sequence', 3), ('one-liner', 3), ('simple-solution', 3), ('stacks', 3), ('amazon', 2), ('array', 2), ('beginner friendly', 2), ('binarysearch', 2), ('bottoms-up', 2), ('c++ solution', 2), ('commented', 2), ('dynamic-programming', 2), ('easy to understand', 2), ('easy understand', 2), ('easysolution', 2), ('efficient solution', 2), ('fast', 2), ('follow up', 2), ('golang-solution', 2), ('indexof', 2), ('java solution', 2), ('java8', 2), ('pythonic', 2), ('regular-expression', 2), ('rust', 2), ('stack', 2), ('subsequences', 2), ('swift5', 2), ('two pointer approach', 2), ('twopointer', 2), ('#javascript', 1), ('#kotlin', 1), ('#python', 1), ('100 faster runtime', 1), ('2 pointer', 1), ('2 pointers', 1), ('2-pointer', 1), ('2pointers', 1), ('3ms-runtime', 1), ('4lines', 1), ('99', 1), ('back tracking', 1), ('backtracking', 1), ('beating-100-submission', 1), ('beats 100', 1), ('best-solution-ever', 1), ('binarysearh', 1), ('bottom up', 1), ('bottom-up', 1), ('bottomup', 1), ('brute force', 1), ('c++ dynamic programming', 1), ('c++ iterative sol', 1), ('c++ string', 1), ('c++14', 1), ('clean code', 1), ('clean solution', 1), ('concise', 1), ('consice', 1), ('constant memory', 1), ('cplusplus', 1), ('cpp clear', 1), ('cpp doubt', 1), ('cpp string', 1), ('cpp-functional', 1), ('csharp', 1), ('data structures', 1), ('dp-programming', 1), ('dp-techqique', 1), ('dynamic programmin', 1), ('easiest solution', 1), ('easy solution', 1), ('easy-understand', 1), ('efficient', 1), ('elegant solution', 1), ('extended-question', 1), ('fast slow pointer', 1), ('fastest', 1), ('fastest c++ solution', 1), ('find', 1), ('forloophell', 1), ('go', 1), ('go-solution', 1), ('good-variable-names', 1), ('google', 1), ('greedy approach', 1), ('hashmap', 1), ('intuition', 1), ('intutive', 1), ('iteration', 1), ('iteratve', 1), ('java solution sharing', 1), ('java-8', 1), ('js', 1), ('kotlinvim', 1), ('linear', 1), ('linear seach', 1), ('linear-complexity', 1), ('linear-time', 1), ('look-up-table', 1), ('loop bsed', 1), ('lowspace', 1), ('maps', 1), ('memoization', 1), ('memoized', 1), ('o of n', 1), ('one pass solution', 1), ('one-pointer', 1), ('performance', 1), ('pointers', 1), ('python perfomance', 1), ('pythonpython3', 1), ('queue', 1), ('re', 1), ('readable', 1), ('recurrance', 1), ('recurrence', 1), ('recursive easy', 1), ('recusion', 1), ('reduction', 1), ('regexp', 1), ('self explanatory', 1), ('short', 1), ('short code', 1), ('single pass', 1), ('solution', 1), ('solution-cpp', 1), ('solution-explaining', 1), ('solution-sharing-cpp', 1), ('sorting', 1), ('space complexity', 1), ('stack-solution', 1), ('standard-library', 1), ('stars move the article up', 1), ('string search', 1), ('string subsequences', 1), ('string-operation', 1), ('stringstream', 1), ('substring', 1), ('time complexity', 1), ('time-complexity', 1), ('top-down dp', 1), ('topdown', 1), ('trie', 1), ('two-solutions', 1), ('ultra simple', 1), ('understandable', 1), ('unordered map', 1), ('upvote', 1), ('while', 1), ('yield', 1)]"
391,Perfect Rectangle,https://leetcode.com/problems/perfect-rectangle,"Given an array rectangles where rectangles[i] = [xi, yi, ai, bi] represents an axis-aligned rectangle. The bottom-left point of the rectangle is (xi, yi) and the top-right point of it is (ai, bi).

Return true if all the rectangles together form an exact cover of a rectangular region.",['line-sweep'],Hard,472,87,95018,29741,[],"[('python3', 2), ('c++', 1), ('c++ summary of related problem', 1), ('cpp solution', 1), ('hashmap', 1), ('heap', 1), ('java', 1), ('javascript', 1), ('python 3', 1), ('sort', 1), ('time-limit-exceeded-java', 1)]"
390,Elimination Game,https://leetcode.com/problems/elimination-game,"You have a list arr of all integers in the range [1, n] sorted in a strictly increasing order. Apply the following algorithm on arr:


	Starting from left to right, remove the first number and every other number afterward until you reach the end of the list.
	Repeat the previous step again, but this time from right to left, remove the rightmost number and every other number from the remaining numbers.
	Keep repeating the steps again, alternating left to right and right to left, until a single number remains.


Given the integer n, return the last number that remains in arr.",[],Medium,575,420,85030,38563,[],"[('c++', 5), ('python', 5), ('java-solution', 4), ('java', 3), ('python 3', 3), ('python3', 3), ('cpp', 2), ('javascript', 2), ('recursion', 2), ('recursive', 2), ('#python', 1), ('#recursive', 1), ('algorithms', 1), ('bit-operation', 1), ('c#', 1), ('commented', 1), ('correct solution', 1), ('easy', 1), ('easy-understanding', 1), ('golang', 1), ('java solution', 1), ('javascrip', 1), ('linked list', 1), ('math', 1), ('one-liner', 1), ('oneliner', 1), ('priority queue', 1), ('priority-queue', 1), ('priorityqueue', 1), ('recurision', 1), ('recursive solution', 1), ('swift', 1), ('tle', 1), ('two-pointer', 1), ('updowndota', 1), ('video', 1), ('wrong-test-cases', 1)]"
389,Find the Difference,https://leetcode.com/problems/find-the-difference,"You are given two strings s and t.

String t is generated by random shuffling string s and then add one more letter at a random position.

Return the letter that was added to t.","['hash-table', 'bit-manipulation']",Easy,1256,318,449662,260748,"[""Single Number""]","[('java', 52), ('python 3', 51), ('python', 47), ('c++', 46), ('javascript', 30), ('cpp', 27), ('bit manipulation', 23), ('easy-understanding', 23), ('python3', 22), ('xor', 20), ('java-solution', 15), ('bit-manipulation', 13), ('hashmap', 12), ('cpp solution', 10), ('simple solution', 10), ('easy', 9), ('ascii', 7), ('c#', 7), ('golang', 7), ('bitwise', 6), ('counter', 6), ('easytounderstand', 6), ('hash table', 6), ('c', 5), ('explained', 5), ('linear time', 5), ('simple', 5), ('bitwise operation', 4), ('dictionary', 4), ('javascript solution', 4), ('string', 4), ('swift', 4), ('constant memory', 3), ('csharp', 3), ('dictonary', 3), ('explained solution', 3), ('fast-solution', 3), ('go', 3), ('map', 3), ('solution', 3), ('100 memory', 2), ('algorithm-explained', 2), ('algorithms', 2), ('array', 2), ('bitwise-operators', 2), ('c++ code', 2), ('commentary', 2), ('constant space', 2), ('cpp easy', 2), ('dict', 2), ('easy-understand', 2), ('fast', 2), ('fast and simple', 2), ('golang-solution', 2), ('iterative', 2), ('linear-time', 2), ('one-liner', 2), ('python3.8', 2), ('ruby', 2), ('scala', 2), ('simple-solution', 2), ('super-easy', 2), ('#codegirl', 1), ('#python', 1), ('1-line', 1), ('100', 1), ('100 faster', 1), ('100 space', 1), ('100 speed', 1), ('2 solutions', 1), ('3-solutions', 1), ('36ms', 1), ('algorithm', 1), ('arraylist', 1), ('beats 100', 1), ('beginner', 1), ('beginner friendly', 1), ('beginnerfriendly', 1), ('bit masking', 1), ('brute force', 1), ('c++ cpp solution', 1), ('c++ solution', 1), ('char compare', 1), ('charcode', 1), ('charcodeat', 1), ('clean', 1), ('clean code', 1), ('collections', 1), ('commented code', 1), ('comments added', 1), ('concise-solution', 1), ('constant-space', 1), ('counting-sort', 1), ('description-error', 1), ('different-chars', 1), ('easy sloution', 1), ('easy undestanding', 1), ('easy-solution', 1), ('easy-to-understand', 1), ('easy-uderstanding', 1), ('easy-undestand', 1), ('efficient solution', 1), ('elegant', 1), ('faster than 99.14', 1), ('find the difference', 1), ('frequencycounting', 1), ('hash array', 1), ('hash-table', 1), ('hashing', 1), ('hashset', 1), ('int-array', 1), ('intui', 1), ('ios', 1), ('iteration', 1), ('kotlin', 1), ('leetcode', 1), ('linear', 1), ('linear memory', 1), ('linear-scan', 1), ('list', 1), ('map-stl', 1), ('mapping', 1), ('need help', 1), ('php', 1), ('python bivector', 1), ('python-solution', 1), ('python2', 1), ('pythonpython3', 1), ('rust', 1), ('short code', 1), ('simplest', 1), ('single pass', 1), ('solution-sharing-java', 1), ('solution-sharing-python', 1), ('sort-function', 1), ('space-non', 1), ('strings', 1), ('suggestion', 1), ('swift5', 1), ('three-different-solutions', 1), ('tired', 1), ('ugly', 1), ('understandable', 1), ('unorderedmap', 1), ('video explanation', 1), ('video solution', 1), ('video-explanation', 1)]"
388,Longest Absolute File Path,https://leetcode.com/problems/longest-absolute-file-path,"Suppose we have a file system that stores both files and directories. An example of one system is represented in the following picture:



Here, we have dir as the only directory in the root. dir contains two subdirectories, subdir1 and subdir2. subdir1 contains a file file1.ext and subdirectory subsubdir1. subdir2 contains a subdirectory subsubdir2, which contains a file file2.ext.

In text form, it looks like this (with ⟶ representing the tab character):


dir
⟶ subdir1
⟶ ⟶ file1.ext
⟶ ⟶ subsubdir1
⟶ subdir2
⟶ ⟶ subsubdir2
⟶ ⟶ ⟶ file2.ext


If we were to write this representation in code, it will look like this: ""dir\n\tsubdir1\n\t\tfile1.ext\n\t\tsubsubdir1\n\tsubdir2\n\t\tsubsubdir2\n\t\t\tfile2.ext"". Note that the '\n' and '\t' are the new-line and tab characters.

Every file and directory has a unique absolute path in the file system, which is the order of directories that must be opened to reach the file/directory itself, all concatenated by '/'s. Using the above example, the absolute path to file2.ext is ""dir/subdir2/subsubdir2/file2.ext"". Each directory name consists of letters, digits, and/or spaces. Each file name is of the form name.extension, where name and extension consist of letters, digits, and/or spaces.

Given a string input representing the file system in the explained format, return the length of the longest absolute path to a file in the abstracted file system. If there is no file in the system, return 0.",[],Medium,738,1712,236107,102223,[],"[('stack', 13), ('c++', 11), ('java', 9), ('javascript', 7), ('python3', 7), ('stacks', 5), ('easy-understanding', 4), ('python', 4), ('cpp', 3), ('go-solution', 3), ('golang', 3), ('golang-solution', 3), ('java-solution', 3), ('python 3', 3), ('swift', 3), ('c programming', 2), ('c#', 2), ('concise', 2), ('easy-to-understand', 2), ('hashmap', 2), ('string', 2), ('0ms', 1), ('algorithms', 1), ('backtracking', 1), ('char', 1), ('clarification', 1), ('clarify', 1), ('clean', 1), ('commented', 1), ('cpp solution', 1), ('dfs-topdown', 1), ('easy', 1), ('easy to underatnd', 1), ('easy-to-understad', 1), ('explanations', 1), ('kotlinvim', 1), ('list-slicing', 1), ('longest-absolute-file-path', 1), ('misleading-problem', 1), ('no-stack', 1), ('one-pass', 1), ('problem-discussion', 1), ('problem-statement', 1), ('solution', 1), ('stack python', 1), ('string-operation', 1), ('stringstream', 1), ('swift5', 1), ('test', 1), ('testcase', 1), ('testcases', 1), ('trie', 1), ('video', 1), ('video explanation', 1), ('video-explanation', 1)]"
387,First Unique Character in a String,https://leetcode.com/problems/first-unique-character-in-a-string,"Given a string s, return the first non-repeating character in it and return its index. If it does not exist, return -1.","['hash-table', 'string']",Easy,2900,141,1347798,728739,"[""Sort Characters By Frequency""]","[('java', 64), ('python', 61), ('c++', 48), ('javascript', 47), ('python 3', 46), ('hashmap', 42), ('cpp', 28), ('easy-understanding', 24), ('java-solution', 20), ('python3', 20), ('hash table', 17), ('counter', 14), ('easy', 13), ('simple solution', 12), ('c#', 10), ('c', 9), ('easy-undestand', 9), ('linear time', 9), ('string', 9), ('golang', 8), ('simple', 8), ('array', 7), ('cpp solution', 7), ('easy-to-understand', 7), ('dictionary', 6), ('fast-solution', 6), ('javascript solution', 6), ('c++ code', 5), ('cpp easy', 5), ('fast', 5), ('hashset', 5), ('map', 5), ('ruby', 5), ('constant space', 4), ('swift', 4), ('unordered map', 4), ('vector', 4), ('dictonary', 3), ('explained', 3), ('go-solution', 3), ('golang-solution', 3), ('hashing', 3), ('linear-time', 3), ('linkedhashmap', 3), ('no hashmap', 3), ('python2', 3), ('single pass', 3), ('solution', 3), ('string-operation', 3), ('typescript', 3), ('unique', 3), ('accepted', 2), ('ascii', 2), ('bit manipulation', 2), ('count', 2), ('dict', 2), ('dictionaries', 2), ('dictionary c#', 2), ('easy to understand', 2), ('easy-understand', 2), ('easytounderstand', 2), ('explanation', 2), ('fast and simple', 2), ('fastest', 2), ('first-unique', 2), ('first-unique-character', 2), ('frequency count', 2), ('go', 2), ('go lang', 2), ('iterative', 2), ('kotlin', 2), ('list comprehension', 2), ('loops', 2), ('one pass', 2), ('priority queue', 2), ('rust', 2), ('sets', 2), ('short', 2), ('unique character', 2), ('#easy-understanding', 1), ('#easysolution', 1), ('#javascript', 1), ('#python 3', 1), ('88 ms faster than\xa092.34', 1), ('90 space', 1), ('99.98 faster', 1), ('algorithm-explained', 1), ('algorithms', 1), ('amazon interview', 1), ('amazon sde', 1), ('array functions', 1), ('arrays', 1), ('beginner', 1), ('best-solution-ever', 1), ('big o', 1), ('bigo', 1), ('c++ solution', 1), ('c++11', 1), ('character', 1), ('charcodeat', 1), ('clean', 1), ('clean code', 1), ('clean-code', 1), ('clear', 1), ('commented', 1), ('comparator', 1), ('constant memory', 1), ('constant-space', 1), ('csharp', 1), ('defaultdict', 1), ('diagrams', 1), ('different', 1), ('doube loop', 1), ('easy solutions', 1), ('easy-solution', 1), ('efficient solution', 1), ('enumerate', 1), ('faceebook', 1), ('faster than 99.14', 1), ('first unique character', 1), ('for-loop', 1), ('frequency', 1), ('frequency array', 1), ('frequency table', 1), ('github', 1), ('hash', 1), ('hash set', 1), ('hash-function', 1), ('hasharray', 1), ('help needed', 1), ('index', 1), ('indexof', 1), ('infinite', 1), ('intuitive', 1), ('iteration', 1), ('javascipt', 1), ('jslover', 1), ('kotlinvim', 1), ('lastindexof', 1), ('linear memory', 1), ('linked list', 1), ('list', 1), ('memoziation', 1), ('minimalism', 1), ('multimap', 1), ('multiple solutions', 1), ('no explanation', 1), ('non-repeating-char', 1), ('on', 1), ('one pass solution', 1), ('one-liner', 1), ('ordered map', 1), ('ordered sets', 1), ('ordereddict', 1), ('output', 1), ('php', 1), ('php solution', 1), ('pythonic', 1), ('recursion', 1), ('scala', 1), ('set', 1), ('simple clear c++ solution', 1), ('simple-solution', 1), ('simplest', 1), ('single scan', 1), ('single traversal', 1), ('solution-javascript', 1), ('sorting', 1), ('stl', 1), ('straight-forward', 1), ('stream', 1), ('string-searching', 1), ('swift5', 1), ('three-lines', 1), ('time limit exceeded', 1), ('time-complexity-o', 1), ('two-pointers', 1), ('unit-test', 1), ('unordered', 1), ('why', 1)]"
386,Lexicographical Numbers,https://leetcode.com/problems/lexicographical-numbers,"Given an integer n, return all the numbers in the range [1, n] sorted in lexicographical order.",[],Medium,757,92,119278,65416,[],"[('c++', 14), ('java', 11), ('dfs', 9), ('backtracking', 8), ('python', 8), ('python 3', 8), ('recursion', 6), ('cpp', 4), ('javascript', 4), ('c++ code', 3), ('easy-understanding', 3), ('back tracking', 2), ('brute force', 2), ('golang', 2), ('java-solution', 2), ('python3', 2), ('stack', 2), ('string', 2), ('1-liner', 1), ('accepted', 1), ('algorithms', 1), ('backtrace', 1), ('c#', 1), ('c++ solution', 1), ('code for beginners', 1), ('cpp solution', 1), ('csharp', 1), ('datastructure', 1), ('dfs solution', 1), ('drawing', 1), ('easy', 1), ('easy to read', 1), ('efficient', 1), ('enjoy', 1), ('explained', 1), ('explanation', 1), ('fast', 1), ('go', 1), ('go-solution', 1), ('golang-solution', 1), ('illustration', 1), ('interview-friendly', 1), ('iterative', 1), ('lambda function', 1), ('lexicographical order', 1), ('list', 1), ('math', 1), ('memoization', 1), ('observations', 1), ('recurision', 1), ('recursion stack', 1), ('recursive', 1), ('ruby', 1), ('rust', 1), ('short', 1), ('simple clear c++ solution', 1), ('solution-cpp', 1), ('solution-java', 1), ('sort', 1), ('sorted', 1), ('sorted array', 1), ('stack-based', 1), ('swift', 1), ('time limit exceeded', 1)]"
385,Mini Parser,https://leetcode.com/problems/mini-parser,"Given a string s represents the serialization of a nested list, implement a parser to deserialize it and return the deserialized NestedInteger.

Each element is either an integer or a list whose elements may also be integers or other lists.","['string', 'stack']",Medium,289,975,123253,42775,"[""Flatten Nested List Iterator"", ""Ternary Expression Parser"", ""Remove Comments""]","[('c++', 5), ('java', 5), ('recursive', 5), ('stack', 5), ('swift', 4), ('c#', 2), ('cpp', 2), ('golang', 2), ('iterative', 2), ('one pass', 2), ('python', 2), ('python 3', 2), ('stack-based', 2), ('stacks', 2), ('accepted', 1), ('comment', 1), ('commentary', 1), ('commented', 1), ('comments', 1), ('elegant', 1), ('generalised-solution', 1), ('go lang', 1), ('golang-solution', 1), ('istringstream', 1), ('java-solution', 1), ('linear time', 1), ('meta', 1), ('non-recursive', 1), ('python3', 1), ('recursion', 1), ('simple', 1), ('simplesweet', 1), ('yeet', 1)]"
384,Shuffle an Array,https://leetcode.com/problems/shuffle-an-array,"Given an integer array nums, design an algorithm to randomly shuffle the array.

Implement the Solution class:


	Solution(int[] nums) Initializes the object with the integer array nums.
	int[] reset() Resets the array to its original configuration and returns it.
	int[] shuffle() Returns a random shuffling of the array.",[],Medium,134,159,315692,171051,[],"[('python', 10), ('c++', 9), ('python 3', 9), ('shuffle', 9), ('java', 7), ('python3', 7), ('c#', 6), ('cpp', 5), ('javascript', 5), ('fisher-yates-shuffle', 4), ('swift', 4), ('easy-understand', 3), ('javascript solution', 3), ('swap', 3), ('commented', 2), ('easy-understanding', 2), ('easy-undestand', 2), ('golang', 2), ('kotlin', 2), ('random', 2), ('random shuffle', 2), ('simple solution', 2), ('#codegirl', 1), ('#python', 1), ('algorithms', 1), ('array', 1), ('array shuffle', 1), ('arrays', 1), ('c plus plus', 1), ('c++11', 1), ('c++14', 1), ('clean code', 1), ('clean-code', 1), ('constant space', 1), ('cpp solution', 1), ('csharp', 1), ('explained solution', 1), ('fast and simple', 1), ('fisher-yatee', 1), ('fisher-yates', 1), ('in-place', 1), ('interviews', 1), ('iterative', 1), ('known-algorithm', 1), ('knuth', 1), ('knuths permutation algo', 1), ('linear time', 1), ('linear-space', 1), ('linear-time', 1), ('proofs', 1), ('pyhton', 1), ('random pick', 1), ('randomize-solution', 1), ('recursion', 1), ('ruby', 1), ('scala', 1), ('shortest-solution', 1), ('simple approach', 1), ('solution', 1), ('sorting', 1), ('space', 1), ('stl', 1), ('swap-in-place', 1), ('time-complexity-n', 1), ('typescript', 1), ('unpacking', 1), ('urng', 1)]"
383,Ransom Note,https://leetcode.com/problems/ransom-note,"Given two stings ransomNote and magazine, return true if ransomNote can be constructed from magazine and false otherwise.

Each letter in magazine can only be used once in ransomNote.",['string'],Easy,875,241,488715,261517,"[""Stickers to Spell Word""]","[('java', 33), ('python 3', 32), ('python', 29), ('javascript', 24), ('hashmap', 23), ('c++', 21), ('cpp', 21), ('python3', 13), ('java-solution', 10), ('c#', 9), ('array', 7), ('hash table', 7), ('c', 6), ('counter', 6), ('easy', 6), ('easy-undestand', 6), ('golang', 6), ('simple solution', 6), ('easy-understanding', 5), ('dictionary', 4), ('map', 4), ('swift', 4), ('arrays', 3), ('fast', 3), ('hashing', 3), ('javascript solution', 3), ('one-liner', 3), ('rust', 3), ('simple', 3), ('string', 3), ('clean', 2), ('clean code', 2), ('collections', 2), ('dict', 2), ('easy-understand', 2), ('easysolution', 2), ('fast-solution', 2), ('list', 2), ('ransomnote', 2), ('ruby', 2), ('short solution', 2), ('solution', 2), ('subtract', 2), ('#hashmap', 1), ('100 beat', 1), ('100 faster', 1), ('100 memory', 1), ('100 space', 1), ('array-based', 1), ('brute force to optimal', 1), ('c code', 1), ('c++ code', 1), ('c++11', 1), ('case insensitive', 1), ('character-hash-map', 1), ('clean-efficient-code', 1), ('collection', 1), ('complexity', 1), ('constant space', 1), ('count', 1), ('counting algorithm', 1), ('cpp solution', 1), ('csharp', 1), ('defaultdict', 1), ('dictionary c#', 1), ('easy understanding', 1), ('easy-code', 1), ('easy-to-understand', 1), ('easytounderstand', 1), ('efficient solution', 1), ('effiecinet', 1), ('elegant', 1), ('explained', 1), ('explanation', 1), ('fast and simple', 1), ('fastest', 1), ('frequency count', 1), ('frequencycounting', 1), ('go', 1), ('go-solution', 1), ('golang-solution', 1), ('guard clause', 1), ('hash', 1), ('hash map', 1), ('hash-table', 1), ('hashtable', 1), ('improved', 1), ('in place', 1), ('intuitive', 1), ('java solution', 1), ('java8', 1), ('js', 1), ('js javascript', 1), ('kotlin', 1), ('less space', 1), ('linear time', 1), ('linear-space', 1), ('linear-time', 1), ('memory o1', 1), ('one line', 1), ('oneline', 1), ('perfect score', 1), ('python2', 1), ('python3.9', 1), ('pythonic', 1), ('ransom note', 1), ('reduce', 1), ('scala', 1), ('short-circuit', 1), ('simple approach', 1), ('simple-solution', 1), ('simplest', 1), ('solution-javascript', 1), ('solution-python', 1), ('solution-ruby', 1), ('solution-sharing-java', 1), ('special characters', 1), ('stl', 1), ('stringbuilder', 1), ('super-easy', 1), ('unit-test', 1), ('unordermap', 1)]"
382,Linked List Random Node,https://leetcode.com/problems/linked-list-random-node,"Given a singly linked list, return a random node's value from the linked list. Each node must have the same probability of being chosen.",['reservoir-sampling'],Medium,914,235,192982,104888,"[""Random Pick Index""]","[('reservoir-sampling', 14), ('java', 11), ('c++', 10), ('cpp', 7), ('python 3', 7), ('random', 7), ('c#', 5), ('easy-understanding', 5), ('javascript', 5), ('java-solution', 4), ('python3', 4), ('cpp solution', 3), ('python', 3), ('rand function', 3), ('simple', 3), ('algorithms', 2), ('c++ solution', 2), ('csharp', 2), ('explained', 2), ('explained solution', 2), ('golang', 2), ('linked list', 2), ('php', 2), ('swift', 2), ('100 space', 1), ('100 speed', 1), ('array', 1), ('beginner friendly', 1), ('c', 1), ('circular linked list', 1), ('class definition', 1), ('cpp doubt', 1), ('cpp easy', 1), ('easy', 1), ('explain', 1), ('explanation of logic', 1), ('fast-solution', 1), ('follow-up', 1), ('go-solution', 1), ('golang-solution', 1), ('help', 1), ('iteration', 1), ('javascrip', 1), ('javascript solution', 1), ('kotlinvim', 1), ('linked lists', 1), ('linkedlistrandomnode', 1), ('linkedlists', 1), ('math-solution', 1), ('memory efficient', 1), ('pre-compute', 1), ('probability', 1), ('random choice', 1), ('random pick', 1), ('rnd', 1), ('ruby', 1), ('rust', 1), ('simple-solution', 1), ('single-linked-list', 1), ('stream', 1), ('typescript', 1), ('typescript javascript', 1), ('video explaination', 1), ('video solution', 1), ('video-explanation', 1)]"
381,Insert Delete GetRandom O(1) - Duplicates allowed,https://leetcode.com/problems/insert-delete-getrandom-o1-duplicates-allowed,"Implement the RandomizedCollection class:


	RandomizedCollection() Initializes the RandomizedCollection object.
	bool insert(int val) Inserts an item val into the multiset if not present. Returns true if the item was not present, false otherwise.
	bool remove(int val) Removes an item val from the multiset if present. Returns true if the item was present, false otherwise. Note that if val has multiple occurrences in the multiset, we only remove one of them.
	int getRandom() Returns a random element from the current multiset of elements (it's guaranteed that at least one element exists when this method is called). The probability of each element being returned is linearly related to the number of same values the multiset contains.","['array', 'hash-table', 'design']",Hard,1135,90,242780,85071,"[""Insert Delete GetRandom O(1)""]","[('cpp', 8), ('hashmap', 8), ('python', 8), ('c++', 7), ('java', 5), ('arraylist', 4), ('vector', 4), ('golang', 3), ('array', 2), ('c#', 2), ('c++ code', 2), ('discussion', 2), ('easy', 2), ('javascript', 2), ('map', 2), ('python 3', 2), ('python3', 2), ('random', 2), ('ruby', 2), ('set', 2), ('solution', 2), ('unorderedmultimap', 2), ('100 speed', 1), ('algorithms', 1), ('approach', 1), ('binary-index-tree', 1), ('blog', 1), ('csharp', 1), ('defaultdict', 1), ('deque', 1), ('dict', 1), ('easy-to-understand', 1), ('easy-understand', 1), ('easy-understanding', 1), ('easy-undestand', 1), ('explaination', 1), ('explanation with logic', 1), ('fast and simple', 1), ('fast-solution', 1), ('golang-solution', 1), ('hash set', 1), ('hash table', 1), ('hash-table', 1), ('hashset', 1), ('hashtable', 1), ('help', 1), ('kotlin', 1), ('lazy', 1), ('list', 1), ('memory', 1), ('multimap', 1), ('numpy', 1), ('o1', 1), ('question', 1), ('questions', 1), ('simple', 1), ('simple solution', 1), ('solution-sharing-cpp', 1), ('solution-sharing-python', 1), ('solutionsharing', 1), ('swift', 1), ('weighted-random-selection', 1)]"
380,Insert Delete GetRandom O(1),https://leetcode.com/problems/insert-delete-getrandom-o1,"Implement the RandomizedSet class:


	RandomizedSet() Initializes the RandomizedSet object.
	bool insert(int val) Inserts an item val into the set if not present. Returns true if the item was not present, false otherwise.
	bool remove(int val) Removes an item val from the set if present. Returns true if the item was present, false otherwise.
	int getRandom() Returns a random element from the current set of elements (it's guaranteed that at least one element exists when this method is called). Each element must have the same probability of being returned.","['array', 'hash-table', 'design']",Medium,3540,206,675989,332583,"[""Insert Delete GetRandom O(1) - Duplicates allowed""]","[('python', 25), ('hashmap', 24), ('c++', 23), ('java', 23), ('javascript', 18), ('random', 15), ('cpp', 14), ('python 3', 10), ('c#', 9), ('swift', 8), ('set', 7), ('vector', 7), ('array', 6), ('hashset', 6), ('java-solution', 6), ('arraylist', 5), ('python3', 5), ('javascript solution', 4), ('list', 4), ('simple', 4), ('unordered map', 4), ('csharp', 3), ('dict', 3), ('easy-understanding', 3), ('es6', 3), ('hash table', 3), ('map', 3), ('simple clear c++ solution', 3), ('#hashset', 2), ('c++ code', 2), ('c++11', 2), ('clean code', 2), ('cpp solution', 2), ('dictionary', 2), ('easy-to-understand', 2), ('easy-undestand', 2), ('easytounderstand', 2), ('fast and simple', 2), ('golang', 2), ('hashtable', 2), ('python2', 2), ('sets', 2), ('space-efficient', 2), ('algorithms', 1), ('c++ solution', 1), ('c++17', 1), ('class', 1), ('clean-code', 1), ('commented', 1), ('concise', 1), ('constant time', 1), ('constant-space', 1), ('constant-time', 1), ('cpp easy', 1), ('data structures', 1), ('defaultdict', 1), ('dictionaries', 1), ('dictonary', 1), ('doubt', 1), ('dynamic array', 1), ('easy', 1), ('easy-implementation', 1), ('easy-understand', 1), ('efficient', 1), ('efficient solution', 1), ('explained', 1), ('explanation of logic', 1), ('explanation with logic', 1), ('explanations', 1), ('fast', 1), ('getrandom', 1), ('go', 1), ('go-solution', 1), ('golang-solution', 1), ('hash', 1), ('hash-table', 1), ('help', 1), ('help needed', 1), ('insertdeletegetrandomo1', 1), ('intutive', 1), ('issue', 1), ('java ac solution', 1), ('js', 1), ('kotlin', 1), ('kotlinvim', 1), ('linkedhashset', 1), ('linkedlist', 1), ('map in c++', 1), ('object', 1), ('oop', 1), ('pop', 1), ('python3.8', 1), ('randomize-solution', 1), ('satya', 1), ('scala', 1), ('self explanatory', 1), ('short', 1), ('short solution', 1), ('simplest', 1), ('solution', 1), ('solution-javascript', 1), ('straight-forward', 1), ('swap', 1), ('swift5', 1), ('time-complexity', 1), ('two implementation', 1), ('ultra easy', 1), ('unordered set', 1), ('unordered-set', 1), ('unorderedmap', 1), ('unorderedset', 1), ('vectors', 1), ('very easy', 1), ('very simple', 1), ('video', 1), ('with-explanation', 1), ('without unordered map', 1), ('wrong answer', 1)]"
378,Kth Smallest Element in a Sorted Matrix,https://leetcode.com/problems/kth-smallest-element-in-a-sorted-matrix,"Given an n x n matrix where each of the rows and columns are sorted in ascending order, return the kth smallest element in the matrix.

Note that it is the kth smallest element in the sorted order, not the kth distinct element.","['binary-search', 'heap']",Medium,3559,184,453274,256549,"[""Find K Pairs with Smallest Sums"", ""Kth Smallest Number in Multiplication Table"", ""Find K-th Smallest Pair Distance"", ""K-th Smallest Prime Fraction""]","[('c++', 39), ('heap', 35), ('python', 31), ('java', 29), ('priority queue', 26), ('binary-search', 21), ('python 3', 20), ('cpp', 14), ('binary search', 13), ('javascript', 13), ('python3', 11), ('heapq', 8), ('maxheap', 8), ('easy-understanding', 7), ('easy', 6), ('java-solution', 5), ('min heap', 5), ('priority-queue', 5), ('c++ code', 4), ('max heap', 4), ('priorityqueue', 4), ('sort', 4), ('swift', 4), ('cpp solution', 3), ('kotlin', 3), ('max-heap', 3), ('min-heap', 3), ('minheap', 3), ('ruby', 3), ('simple', 3), ('2d-array', 2), ('beginner friendly', 2), ('binarysearch', 2), ('c#', 2), ('comments-added', 2), ('easy-undestand', 2), ('flatten', 2), ('golang', 2), ('golang-solution', 2), ('heaps', 2), ('list', 2), ('nlogn', 2), ('numpy', 2), ('one-liner', 2), ('rust', 2), ('short', 2), ('#python', 1), ('#python 3', 1), ('56ms', 1), ('algorithms', 1), ('array-sort', 1), ('beginnerfriendly', 1), ('bfs', 1), ('brute force', 1), ('c', 1), ('c++ binary-search', 1), ('c++ easy to understand', 1), ('c++ solution', 1), ('c++14', 1), ('c++code', 1), ('clean', 1), ('clean code', 1), ('commented', 1), ('comments', 1), ('comparator', 1), ('complexity-analysis', 1), ('cpp dfs 1-line', 1), ('cpp easy', 1), ('diagram', 1), ('easy-solution', 1), ('easy-to-understand', 1), ('easy-understand', 1), ('easytounderstand', 1), ('efficient', 1), ('efficient solution', 1), ('extend', 1), ('fast', 1), ('for loops', 1), ('go-solution', 1), ('hashcode', 1), ('heaps algorithm', 1), ('heapsort', 1), ('illustration', 1), ('javascrip', 1), ('javascript solution', 1), ('js', 1), ('kotlin-solution', 1), ('kotlinvim', 1), ('linear-time', 1), ('matrix', 1), ('median select saddleback', 1), ('merge sort', 1), ('merge-k-sorted-arrays', 1), ('merge-k-sorted-lists', 1), ('one liner', 1), ('python2', 1), ('python3.8', 1), ('quick select', 1), ('quick-select', 1), ('quick-selection', 1), ('quick-sort', 1), ('saddleback search', 1), ('scala', 1), ('simple python solution', 1), ('simple solution', 1), ('solution', 1), ('solution-rust', 1), ('solution-share', 1), ('sorting', 1), ('space-efficient', 1), ('stl', 1), ('summary', 1), ('terse', 1), ('video', 1)]"
377,Combination Sum IV,https://leetcode.com/problems/combination-sum-iv,"Given an array of distinct integers nums and a target integer target, return the number of possible combinations that add up to target.

The answer is guaranteed to fit in a 32-bit integer.",['dynamic-programming'],Medium,2232,253,364984,171907,"[""Combination Sum""]","[('dynamic programming', 55), ('c++', 32), ('dp', 31), ('java', 21), ('python', 17), ('cpp', 16), ('memoization', 16), ('javascript', 11), ('python 3', 11), ('dynamic-programming', 9), ('recursion', 9), ('easy-understanding', 6), ('golang', 6), ('java-solution', 6), ('cpp solution', 5), ('python3', 5), ('top down dp', 5), ('dfs', 4), ('recursive', 4), ('ruby', 4), ('simple', 4), ('bottom up', 3), ('clean code', 3), ('easy', 3), ('fast', 3), ('golang-solution', 3), ('hashmap', 3), ('rust', 3), ('swift', 3), ('top down', 3), ('100 speed', 2), ('arrays', 2), ('bottom-up-algorithm', 2), ('c#', 2), ('c++11', 2), ('caching', 2), ('combination sum', 2), ('commented', 2), ('comments-added', 2), ('dp java', 2), ('easy-understand', 2), ('explained', 2), ('go', 2), ('go-solution', 2), ('horrible', 2), ('iterative', 2), ('kotlin', 2), ('memo', 2), ('sandeepkumar', 2), ('scala', 2), ('simple clear c++ solution', 2), ('top-down dp', 2), ('video-explanation', 2), ('#377', 1), ('#dynamic programming', 1), ('#dynamic-programming', 1), ('#explained', 1), ('#fastest', 1), ('#python 3', 1), ('1d-dp', 1), ('2d', 1), ('algorithm', 1), ('alternative solution', 1), ('array', 1), ('awesome samriddhi', 1), ('back tracking', 1), ('backtacking', 1), ('backtracking', 1), ('best', 1), ('bottom up approach', 1), ('bottom up dp', 1), ('bottom-up', 1), ('bottom-up approach', 1), ('bottomup', 1), ('brute force', 1), ('c', 1), ('c code', 1), ('c++ dynamic programming', 1), ('c++ easy to understand', 1), ('c++ iterative sol', 1), ('c++ solution', 1), ('coin change problem', 1), ('combination', 1), ('combination sum 4', 1), ('combinatorics', 1), ('commentary', 1), ('comments', 1), ('complexity', 1), ('contribution on leetcode', 1), ('csharp', 1), ('depth-first search', 1), ('dynamic', 1), ('dynamic programmin', 1), ('easy-to-understand', 1), ('easysolution', 1), ('easytounderstand', 1), ('es6', 1), ('expalanation', 1), ('explained solution', 1), ('explanation', 1), ('explanations', 1), ('fast and simple', 1), ('follow-up', 1), ('forward dp', 1), ('generating functions', 1), ('gkt', 1), ('hack', 1), ('help', 1), ('help me', 1), ('help needed', 1), ('java ac solution', 1), ('java dynamic programming', 1), ('java8', 1), ('javascrip', 1), ('javascript solution', 1), ('knapsack', 1), ('linear dp', 1), ('map', 1), ('math', 1), ('medium', 1), ('memoisation', 1), ('memorization', 1), ('minimalism', 1), ('optimal', 1), ('optimisation', 1), ('overflow', 1), ('performance', 1), ('permutations', 1), ('problem', 1), ('push dp', 1), ('python2', 1), ('recurision', 1), ('recursive dp', 1), ('recursively', 1), ('ritik', 1), ('short', 1), ('short solution', 1), ('simpe', 1), ('std', 1), ('swift5', 1), ('tabulation', 1), ('tle', 1), ('topdown', 1), ('typescript', 1)]"
376,Wiggle Subsequence,https://leetcode.com/problems/wiggle-subsequence,"A wiggle sequence is a sequence where the differences between successive numbers strictly alternate between positive and negative. The first difference (if one exists) may be either positive or negative. A sequence with one element and a sequence with two non-equal elements are trivially wiggle sequences.


	For example, [1, 7, 4, 9, 2, 5] is a wiggle sequence because the differences (6, -3, 5, -7, 3) alternate between positive and negative.
	In contrast, [1, 4, 7, 2, 5] and [1, 7, 4, 5, 5] are not wiggle sequences. The first is not because its first two differences are positive, and the second is not because its last difference is zero.


A subsequence is obtained by deleting some elements (possibly zero) from the original sequence, leaving the remaining elements in their original order.

Given an integer array nums, return the length of the longest wiggle subsequence of nums.","['dynamic-programming', 'greedy']",Medium,1734,79,244727,103498,[],"[('c++', 46), ('greedy', 29), ('java', 25), ('dynamic programming', 23), ('python', 21), ('cpp', 20), ('easy-understanding', 17), ('dp', 12), ('simple', 10), ('python 3', 9), ('cpp solution', 8), ('greedy approach', 8), ('video-explanation', 8), ('easy', 7), ('java-solution', 7), ('c#', 6), ('clean code', 6), ('linear time', 6), ('explained', 5), ('python3', 5), ('easy-to-understand', 4), ('easy-undestand', 4), ('golang', 4), ('rust', 4), ('wiggle subsequence', 4), ('0ms', 3), ('comments-added', 3), ('constant space', 3), ('constant-space', 3), ('javascript', 3), ('short', 3), ('swift', 3), ('c++ code', 2), ('dp-techqique', 2), ('easytounderstand', 2), ('efficient', 2), ('explaination', 2), ('go', 2), ('linear', 2), ('ruby', 2), ('simple clear c++ solution', 2), ('single pass', 2), ('solution', 2), ('stack', 2), ('wigglesubsequence', 2), ('0ms-solution', 1), ('100 faster runtime', 1), ('100 speed', 1), ('1ms', 1), ('ac solution', 1), ('algorithms', 1), ('array', 1), ('awesome samriddhi', 1), ('bool error', 1), ('bottom - up', 1), ('bottom-up-algorithm', 1), ('c#-solution', 1), ('c++ iterative sol', 1), ('c++ solution', 1), ('c++14', 1), ('clean', 1), ('cleanest', 1), ('commented', 1), ('commented code', 1), ('declarative', 1), ('dfs', 1), ('dictionary', 1), ('difference', 1), ('discussion', 1), ('dynamic programmin', 1), ('dynamic-programming', 1), ('dynammic programming', 1), ('easy understand', 1), ('easy understanding', 1), ('easy-understand', 1), ('efficiency', 1), ('explanation', 1), ('functional', 1), ('in-place', 1), ('iteration', 1), ('java ac solution', 1), ('java solution sharing', 1), ('java video', 1), ('javascript solution', 1), ('linear-time', 1), ('lis', 1), ('math', 1), ('medium', 1), ('memory optimized', 1), ('no dp', 1), ('no extra space', 1), ('one pass solution', 1), ('onepass', 1), ('optimisation', 1), ('performance', 1), ('raviinroorkee', 1), ('recursion', 1), ('ritik', 1), ('scala', 1), ('self explanatory', 1), ('sequence', 1), ('sequences', 1), ('series', 1), ('simplest', 1), ('solution-sharing-java', 1), ('straight-forward', 1), ('switch-case', 1), ('two pointers', 1), ('typescript', 1), ('very easy to understand', 1), ('xor', 1)]"
375,Guess Number Higher or Lower II,https://leetcode.com/problems/guess-number-higher-or-lower-ii,"We are playing the Guessing Game. The game will work as follows:


	I pick a number between 1 and n.
	You guess a number.
	If you guess the right number, you win the game.
	If you guess the wrong number, then I will tell you whether the number I picked is higher or lower, and you will continue guessing.
	Every time you guess a wrong number x, you will pay x dollars. If you run out of money, you lose the game.


Given a particular n, return the minimum amount of money you need to guarantee a win regardless of what number I pick.","['dynamic-programming', 'minimax']",Medium,1032,1498,178025,75783,"[""Flip Game II"", ""Guess Number Higher or Lower"", ""Can I Win"", ""Find K Closest Elements""]","[('dynamic programming', 12), ('python', 9), ('dp', 8), ('c++', 7), ('recursion', 5), ('cpp', 3), ('memoization', 3), ('python 3', 3), ('dynamic-programming', 2), ('golang', 2), ('java', 2), ('javascript', 2), ('python3', 2), ('ruby', 2), ('short', 2), ('375', 1), ('bst', 1), ('c#', 1), ('cache', 1), ('comment', 1), ('comments', 1), ('cpp solution', 1), ('cpp-solution', 1), ('description', 1), ('divide and conquer', 1), ('doubts', 1), ('easy to read', 1), ('easy-to-understand', 1), ('explaination', 1), ('explained', 1), ('explanation', 1), ('google', 1), ('guess the number', 1), ('iterative', 1), ('kotlin', 1), ('meiyaowen', 1), ('memoziation', 1), ('minimax', 1), ('minmax', 1), ('parameter', 1), ('recursive', 1), ('recursive dp', 1), ('recusion', 1), ('rust', 1), ('shorter', 1), ('simple clear c++ solution', 1), ('solution-explaining', 1), ('solution-sharingjava', 1), ('solutionsharing', 1), ('swift', 1), ('top down', 1), ('top down dp', 1), ('trick', 1)]"
374,Guess Number Higher or Lower,https://leetcode.com/problems/guess-number-higher-or-lower,"We are playing the Guess Game. The game is as follows:

I pick a number from 1 to n. You have to guess which number I picked.

Every time you guess wrong, I will tell you whether the number I picked is higher or lower than your guess.

You call a pre-defined API int guess(int num), which returns 3 possible results:


	-1: The number I picked is lower than your guess (i.e. pick < num).
	1: The number I picked is higher than your guess (i.e. pick > num).
	0: The number I picked is equal to your guess (i.e. pick == num).


Return the number that I picked.",['binary-search'],Easy,601,2082,437561,197834,"[""First Bad Version"", ""Guess Number Higher or Lower II"", ""Find K Closest Elements""]","[('binary-search', 33), ('c++', 27), ('binary search', 22), ('cpp', 22), ('java', 19), ('python', 14), ('python 3', 12), ('binarysearch', 11), ('javascript', 7), ('java-solution', 6), ('python3', 5), ('c++ code', 4), ('easy-understanding', 3), ('golang', 3), ('0ms', 2), ('100 speed', 2), ('binarysearh', 2), ('c', 2), ('cpp solution', 2), ('explained', 2), ('iterative', 2), ('recursion', 2), ('#binary-search', 1), ('#python 3', 1), ('0 ms', 1), ('374', 1), ('binary', 1), ('c#', 1), ('c++11', 1), ('c++14', 1), ('c++17', 1), ('clean code', 1), ('comments', 1), ('comments-added', 1), ('cpp soltuion', 1), ('csharp', 1), ('divide-and-conquer', 1), ('easy', 1), ('easy to understand', 1), ('easy-to-understand', 1), ('easy-undestand', 1), ('efficient solution', 1), ('explanation', 1), ('explanatory comments', 1), ('fastest c++ solution', 1), ('functional programming', 1), ('functional-programming', 1), ('go', 1), ('golang-solution', 1), ('good variable names', 1), ('google', 1), ('help', 1), ('help me', 1), ('help-wanted', 1), ('implementation', 1), ('java solution', 1), ('library', 1), ('meiyaowen', 1), ('numbers', 1), ('recursive', 1), ('ruby', 1), ('scala', 1), ('self explanatory', 1), ('simple', 1), ('simple clear c++ solution', 1), ('simple solution', 1), ('solution', 1), ('tail-recursion', 1), ('tail-recursive', 1), ('tailrec', 1), ('ternary-search', 1), ('ultra easy', 1), ('upvote', 1), ('walrus', 1), ('walrus operator', 1)]"
373,Find K Pairs with Smallest Sums,https://leetcode.com/problems/find-k-pairs-with-smallest-sums,"You are given two integer arrays nums1 and nums2 sorted in ascending order and an integer k.

Define a pair (u, v) which consists of one element from the first array and one element from the second array.

Return the k pairs (u1, v1), (u2, v2), ..., (uk, vk) with the smallest sums.",['heap'],Medium,1931,130,333871,127240,"[""Kth Smallest Element in a Sorted Matrix"", ""Find K-th Smallest Pair Distance""]","[('priority queue', 33), ('heap', 32), ('c++', 24), ('java', 17), ('python', 16), ('cpp', 10), ('python 3', 10), ('heapq', 8), ('python3', 7), ('maxheap', 6), ('priorityqueue', 5), ('easytounderstand', 4), ('java-solution', 4), ('simple', 4), ('binary-search', 3), ('cpp solution', 3), ('easy-understanding', 3), ('easy-undestand', 3), ('javascript', 3), ('priority-queue', 3), ('short', 3), ('c', 2), ('c#', 2), ('c++ code', 2), ('easy', 2), ('golang', 2), ('heaps', 2), ('index-array', 2), ('min heap', 2), ('sorting', 2), ('two-pointers', 2), ('#heap', 1), ('9ms', 1), ('arraylist', 1), ('beginnerfriendly', 1), ('beginners', 1), ('bfs', 1), ('brute-force', 1), ('c++ solution', 1), ('clean', 1), ('clear-understanding', 1), ('commented', 1), ('comments', 1), ('comments-added', 1), ('comparator', 1), ('concise', 1), ('cpp short solution', 1), ('easiest', 1), ('easy understand', 1), ('easy understanding', 1), ('easy-to-understand', 1), ('easy-understand', 1), ('easysolution', 1), ('efficient solution', 1), ('error', 1), ('explanation with code', 1), ('explanations', 1), ('fast', 1), ('fast-solution', 1), ('generator', 1), ('google', 1), ('graph', 1), ('greedy', 1), ('harmonic sequence', 1), ('heap sort', 1), ('intutive', 1), ('klogk', 1), ('logarithmic time', 1), ('map', 1), ('map-stl', 1), ('merge-k-sorted-lists', 1), ('min-heap', 1), ('minimum heap', 1), ('naive', 1), ('neat-explanation', 1), ('new', 1), ('object-oriented', 1), ('oop', 1), ('optimal', 1), ('optimization', 1), ('python2', 1), ('ruby', 1), ('scala', 1), ('self explanatory', 1), ('simple solution', 1), ('simple-solution', 1), ('solution', 1), ('solution-share', 1), ('swift', 1), ('test-case-too-weak', 1), ('thought-process', 1), ('trick', 1), ('ultra simple', 1), ('upvote', 1)]"
372,Super Pow,https://leetcode.com/problems/super-pow,Your task is to calculate ab mod 1337 where a is a positive integer and b is an extremely large positive integer given in the form of an array.,['math'],Medium,305,900,109956,40440,"[""Pow(x, n)""]","[('python', 6), ('cpp', 4), ('java', 4), ('c++', 3), ('interview-friendly', 3), ('math', 3), ('python 3', 3), ('short', 3), ('clean-code', 2), ('javascript', 2), ('one-liner', 2), ('python3', 2), ('biginteger', 1), ('binary exponentiation', 1), ('binary-search', 1), ('c', 1), ('c#', 1), ('cpp solution', 1), ('divide and conquer', 1), ('euler-theorem', 1), ('explained', 1), ('explanation with logic', 1), ('fast and simple', 1), ('hashmap', 1), ('iterative', 1), ('java-solution', 1), ('math solution', 1), ('memory-efficient', 1), ('oneline', 1), ('php', 1), ('php solution', 1), ('pow', 1), ('recursive', 1), ('solution-sharing-cpp', 1)]"
371,Sum of Two Integers,https://leetcode.com/problems/sum-of-two-integers,"Given two integers a and b, return the sum of the two integers without using the operators + and -.",['bit-manipulation'],Medium,1660,2736,440796,223111,"[""Add Two Numbers""]","[('java', 30), ('bit-manipulation', 24), ('python', 24), ('javascript', 18), ('c++', 17), ('cpp', 17), ('bit manipulation', 16), ('python 3', 15), ('java-solution', 11), ('bitwise operation', 6), ('recursion', 5), ('0ms', 4), ('cpp solution', 4), ('easy-understand', 4), ('easy-understanding', 4), ('easy-undestand', 4), ('golang', 4), ('python3', 4), ('recusion', 4), ('solution', 4), ('swift', 4), ('bitwise', 3), ('c#', 3), ('easy', 3), ('go-solution', 3), ('golang-solution', 3), ('javascript solution', 3), ('math', 3), ('recursive', 3), ('xor', 3), ('100 speed', 2), ('addition', 2), ('c', 2), ('c++ code', 2), ('easy-to-understand', 2), ('go', 2), ('interview-friendly', 2), ('log', 2), ('simple', 2), ('stl', 2), ('sum of two integers', 2), ('0 ms', 1), ('100', 1), ('100 memory', 1), ('algorithms', 1), ('and', 1), ('beginner friendly', 1), ('binary', 1), ('binary-operation', 1), ('bit', 1), ('bit-shift', 1), ('bitmap', 1), ('c asm', 1), ('c++ ac', 1), ('c++ bitoperations', 1), ('c++ solution', 1), ('constant-space', 1), ('constant-time', 1), ('destructuring assignment', 1), ('dictionary', 1), ('easy understand', 1), ('efficient solution', 1), ('es6', 1), ('explaination', 1), ('explained', 1), ('explanation with code', 1), ('faceebook', 1), ('false solution', 1), ('fast', 1), ('fastest', 1), ('fuck noobs', 1), ('full adder', 1), ('go lang', 1), ('go-lang', 1), ('half adder', 1), ('intution', 1), ('java 8', 1), ('java bit-manipulation', 1), ('list', 1), ('list sum', 1), ('mask', 1), ('minimalism', 1), ('multiple-ways', 1), ('no bit manipulation', 1), ('one-liner', 1), ('php', 1), ('python3.8', 1), ('pythonpython3', 1), ('recursively', 1), ('resursive', 1), ('scala', 1), ('short', 1), ('simple solution', 1), ('simulation', 1), ('single-line', 1), ('solution-sharing-cpp', 1), ('solution-sharing-python', 1), ('streams', 1), ('string', 1), ('super-easy', 1), ('twos complement', 1), ('very easy', 1), ('working-solution', 1), ('xjq', 1), ('xor operation', 1)]"
368,Largest Divisible Subset,https://leetcode.com/problems/largest-divisible-subset,"Given a set of distinct positive integers nums, return the largest subset answer such that every pair (answer[i], answer[j]) of elements in this subset satisfies:


	answer[i] % answer[j] == 0, or
	answer[j] % answer[i] == 0


If there are multiple solutions, return any of them.","['math', 'dynamic-programming']",Medium,1836,90,290156,111706,[],"[('dynamic programming', 36), ('dynamic-programming', 23), ('dp', 21), ('java', 20), ('python', 12), ('python 3', 12), ('c++', 10), ('cpp', 9), ('lis', 9), ('dfs', 5), ('c++ code', 4), ('easy', 4), ('cpp solution', 3), ('golang', 3), ('java-solution', 3), ('javascript', 3), ('python3', 3), ('recursion', 3), ('swift', 3), ('backtracking', 2), ('commented', 2), ('dp-programming', 2), ('easy-undestand', 2), ('easysolution', 2), ('kotlin', 2), ('rust', 2), ('simple', 2), ('simple solution', 2), ('video explaination', 2), ('1d-dp', 1), ('best-solution-ever', 1), ('bottom up', 1), ('brute-force', 1), ('c#', 1), ('c++ easy to understand', 1), ('c++code', 1), ('clean code', 1), ('cpp easy', 1), ('cpp-solution', 1), ('dag', 1), ('diagram', 1), ('dynamic progr', 1), ('dynaminc programming', 1), ('easy understanding', 1), ('easy-understand', 1), ('easy-understanding', 1), ('easytoundersatand', 1), ('explanation of logic', 1), ('explanations', 1), ('fast-solution', 1), ('golang-solution', 1), ('graph', 1), ('improve', 1), ('iterative', 1), ('js', 1), ('linkedlist', 1), ('longest-path', 1), ('memoization', 1), ('nlogn', 1), ('run-time-error', 1), ('runtime-error', 1), ('set-union', 1), ('short', 1), ('short code', 1), ('simpler', 1), ('sorted', 1), ('sorting', 1), ('testcase error', 1), ('tle', 1), ('topological-sorting', 1), ('tree', 1), ('video explanation', 1), ('works-on-my-machine', 1), ('zea7ot', 1)]"
367,Valid Perfect Square,https://leetcode.com/problems/valid-perfect-square,"Given a positive integer num, write a function which returns True if num is a perfect square else False.

Follow up: Do not use any built-in library function such as sqrt.","['math', 'binary-search']",Easy,1224,194,638400,269765,"[""Sqrt(x)"", ""Sum of Square Numbers""]","[('binary-search', 59), ('c++', 38), ('python', 38), ('java', 37), ('cpp', 27), ('python 3', 27), ('javascript', 21), ('binarysearch', 18), ('cpp solution', 15), ('java-solution', 14), ('binary search', 13), ('python3', 12), ('c++ code', 7), ('cpp easy', 7), ('easy-understanding', 7), ('math', 7), ('one-liner', 7), ('c#', 6), ('simple solution', 6), ('0ms', 4), ('100 memory', 4), ('c', 4), ('easy', 4), ('golang', 4), ('iterative', 4), ('newtons-method', 4), ('100 speed', 3), ('easy-understand', 3), ('fast-solution', 3), ('go', 3), ('recursion', 3), ('short', 3), ('solution', 3), ('sqrt', 3), ('100 space', 2), ('babylonian method', 2), ('binarysearh', 2), ('csharp', 2), ('easy solution', 2), ('easy to understand', 2), ('easy-to-understand', 2), ('easy-undestand', 2), ('easytounderstand', 2), ('explained', 2), ('fast', 2), ('faster than 100.00', 2), ('golang-solution', 2), ('javascript solution', 2), ('math.sqrt', 2), ('one line', 2), ('simple', 2), ('sqrt-n', 2), ('#binary-search', 1), ('#c++', 1), ('#javascript', 1), ('#python', 1), ('0ms runtime', 1), ('0ms-solution', 1), ('1 line', 1), ('1 liner', 1), ('1-line', 1), ('100 faster runtime', 1), ('2 line code', 1), ('algorithms', 1), ('best-submission', 1), ('biginteger', 1), ('binary search algorithm', 1), ('binary search c++', 1), ('bit-manipulation', 1), ('brute force', 1), ('c++ binary-search', 1), ('c++ cpp solution', 1), ('clean code', 1), ('constant-space', 1), ('detailed explanation', 1), ('divide and conquer', 1), ('dynamic-programming', 1), ('easy sloution', 1), ('easy to code', 1), ('easy undestanding', 1), ('easy-solition', 1), ('efficient', 1), ('explained solution', 1), ('explanatory comments', 1), ('faster than 95.46', 1), ('fastest c++ solution', 1), ('fixed-point', 1), ('floor', 1), ('go-lang', 1), ('go-solution', 1), ('good variable names', 1), ('hashset', 1), ('ieee', 1), ('iteratively', 1), ('java ac solution', 1), ('java solution', 1), ('javacript', 1), ('js', 1), ('kotlinvim', 1), ('library', 1), ('logarithmic time', 1), ('logn', 1), ('loop', 1), ('math-solution', 1), ('math.ceil', 1), ('math.floor', 1), ('mathematical', 1), ('newton law', 1), ('noloop', 1), ('oneliner', 1), ('overflow', 1), ('pattern', 1), ('perfect square', 1), ('preprocessing', 1), ('python2', 1), ('pythonpython3', 1), ('racket', 1), ('recusion', 1), ('ruby', 1), ('rust', 1), ('sequence', 1), ('set', 1), ('short solution', 1), ('simple approach', 1), ('simple clear c++ solution', 1), ('simple loop', 1), ('simplest', 1), ('solution-sharing-cpp', 1), ('square root', 1), ('straight-forward', 1), ('structured code', 1), ('swift', 1), ('switch', 1), ('test-case-too-weak', 1), ('triangular number', 1), ('valid square', 1), ('valid-perfect-square', 1), ('video', 1), ('youtube', 1)]"
365,Water and Jug Problem,https://leetcode.com/problems/water-and-jug-problem,"You are given two jugs with capacities jug1Capacity and jug2Capacity liters. There is an infinite amount of water supply available. Determine whether it is possible to measure exactly targetCapacity liters using these two jugs.

If targetCapacity liters of water are measurable, you must have targetCapacity liters of water contained within one or both buckets by the end.

Operations allowed:


	Fill any of the jugs with water.
	Empty any of the jugs.
	Pour water from one jug into another till the other jug is completely full, or the first jug itself is empty.",['math'],Medium,427,881,151404,47606,[],"[('gcd', 9), ('cpp', 8), ('math', 5), ('java', 4), ('python', 4), ('python3', 4), ('java-solution', 3), ('python 3', 3), ('bfs', 2), ('c++', 2), ('easy-understand', 2), ('#gcd', 1), ('#golang', 1), ('#math', 1), ('algorithms', 1), ('breadth first search', 1), ('c#', 1), ('cpp solution', 1), ('easiest', 1), ('easy-undestand', 1), ('easytounderstand', 1), ('explaination', 1), ('explanation', 1), ('faster', 1), ('golang', 1), ('greatest-common-divisor', 1), ('help', 1), ('immutable', 1), ('incorrect-test-case', 1), ('javascript', 1), ('maths', 1), ('numbertheory', 1), ('one-liner', 1), ('oneline', 1), ('please help', 1), ('proof', 1), ('recursion', 1), ('scala', 1), ('test-case', 1), ('testcase-wrong', 1), ('updowndota', 1), ('vmware', 1), ('well-commented', 1), ('wrong-answer', 1), ('wrong-test-cases', 1)]"
363,Max Sum of Rectangle No Larger Than K,https://leetcode.com/problems/max-sum-of-rectangle-no-larger-than-k,"Given an m x n matrix matrix and an integer k, return the max sum of a rectangle in the matrix such that its sum is no larger than k.

It is guaranteed that there will be a rectangle with a sum no larger than k.","['binary-search', 'dynamic-programming', 'queue']",Hard,1128,81,141799,54689,[],"[('java', 6), ('javascript', 5), ('treeset', 4), ('dynamic-programming', 3), ('java-solution', 3), ('cpp', 2), ('dynamic programming', 2), ('binary-search', 1), ('bst', 1), ('concise', 1), ('dp', 1), ('easy-solution', 1), ('kadane', 1), ('kadanes', 1), ('mergesort', 1), ('python', 1), ('python 3', 1), ('solution', 1), ('well-commented', 1)]"
357,Count Numbers with Unique Digits,https://leetcode.com/problems/count-numbers-with-unique-digits,"Given an integer n, return the count of all numbers with unique digits, x, where 0 <= x < 10n.","['math', 'dynamic-programming', 'backtracking']",Medium,571,1010,179312,87936,[],"[('dynamic-programming', 28), ('java', 27), ('cpp', 19), ('python', 19), ('python 3', 14), ('dynamic programming', 11), ('c++', 10), ('dp', 9), ('math', 9), ('java-solution', 5), ('backtracking', 4), ('cpp solution', 4), ('python3', 4), ('recursion', 4), ('easy-understanding', 3), ('easytounderstand', 3), ('permutation', 3), ('100 faster', 2), ('easy-understand', 2), ('easy-undestand', 2), ('explanation', 2), ('maths', 2), ('memoization', 2), ('simple solution', 2), ('100 faster runtime', 1), ('akku', 1), ('analytical', 1), ('back tracking', 1), ('backtrack', 1), ('best space complexity', 1), ('best time complexity', 1), ('best-submission', 1), ('bottom up', 1), ('brute-force', 1), ('c', 1), ('c code', 1), ('c#', 1), ('c++ code', 1), ('code', 1), ('combinations', 1), ('combinatories', 1), ('comments-added', 1), ('constant-space', 1), ('constant-time', 1), ('cpp easy', 1), ('cpp-solution', 1), ('dp c', 1), ('dp python', 1), ('easiest', 1), ('easy', 1), ('easy-to-understand', 1), ('explained', 1), ('fast and simple', 1), ('faster than 100', 1), ('faster than 100.00', 1), ('hack', 1), ('highschoolknowledge', 1), ('interview-friendly', 1), ('iterative', 1), ('java ac solution', 1), ('javasacript', 1), ('javascript', 1), ('js', 1), ('linear', 1), ('math-solution', 1), ('mathematical', 1), ('observations', 1), ('oneline', 1), ('permutations', 1), ('proof', 1), ('python3.8', 1), ('recurision', 1), ('recurrsion', 1), ('recursive', 1), ('recusion', 1), ('short c++ code', 1), ('simple', 1), ('simple-solution', 1), ('solution-sharingjava', 1), ('tabulation', 1), ('testcase-wrong', 1), ('time', 1), ('top down dp', 1), ('weak-tests', 1), ('xjq', 1)]"
355,Design Twitter,https://leetcode.com/problems/design-twitter,"Design a simplified version of Twitter where users can post tweets, follow/unfollow another user, and is able to see the 10 most recent tweets in the user's news feed.

Implement the Twitter class:


	Twitter() Initializes your twitter object.
	void postTweet(int userId, int tweetId) Composes a new tweet with ID tweetId by the user userId. Each call to this function will be made with a unique tweetId.
	List<Integer> getNewsFeed(int userId) Retrieves the 10 most recent tweet IDs in the user's news feed. Each item in the news feed must be posted by users who the user followed or by the user themself. Tweets must be ordered from most recent to least recent.
	void follow(int followerId, int followeeId) The user with ID followerId started following the user with ID followeeId.
	void unfollow(int followerId, int followeeId) The user with ID followerId started unfollowing the user with ID followeeId.","['hash-table', 'heap', 'design']",Medium,1299,233,205582,65311,"[""Design a File Sharing System""]","[('java', 24), ('cpp', 19), ('hashmap', 15), ('c++', 13), ('heap', 12), ('python', 9), ('design', 5), ('javascript', 5), ('priority queue', 5), ('map', 4), ('design-twitter', 3), ('hashset', 3), ('hashtable', 3), ('python 3', 3), ('unorderedset', 3), ('cpp-solution', 2), ('deque', 2), ('easy-to-understand', 2), ('easy-understand', 2), ('easy-undestand', 2), ('functional programming', 2), ('heapq', 2), ('maxheap', 2), ('mergesort', 2), ('priority-queue', 2), ('priorityqueue', 2), ('python3', 2), ('set', 2), ('short', 2), ('simple', 2), ('swift', 2), ('unordered map', 2), ('unorderedmap', 2), ('algorithms', 1), ('arraylist', 1), ('c', 1), ('c#', 1), ('caching', 1), ('clean code', 1), ('comments-added', 1), ('design twitter', 1), ('easy', 1), ('easy-understanding', 1), ('easytounderstand', 1), ('explained', 1), ('explanations', 1), ('fast', 1), ('golang', 1), ('graph', 1), ('hash', 1), ('hash table', 1), ('java-8', 1), ('java-solution', 1), ('linkedlist', 1), ('linkedlists', 1), ('list', 1), ('listnode', 1), ('merge-k-sorted-lists', 1), ('min heap', 1), ('min-heap', 1), ('object-oriented', 1), ('ood', 1), ('oops', 1), ('python deque', 1), ('python2', 1), ('race conditions', 1), ('rajat', 1), ('ruby', 1), ('sets', 1), ('solution', 1), ('solution-sharing-cpp', 1), ('sort', 1), ('sortedset', 1), ('stl', 1), ('twitter', 1), ('unordermap', 1), ('vector', 1), ('wrong answer', 1), ('wrong-answer', 1)]"
354,Russian Doll Envelopes,https://leetcode.com/problems/russian-doll-envelopes,"You are given a 2D array of integers envelopes where envelopes[i] = [wi, hi] represents the width and the height of an envelope.

One envelope can fit into another if and only if both the width and height of one envelope are greater than the other envelope's width and height.

Return the maximum number of envelopes you can Russian doll (i.e., put one inside the other).

Note: You cannot rotate an envelope.","['binary-search', 'dynamic-programming']",Hard,2006,58,270851,102369,"[""Longest Increasing Subsequence""]","[('dynamic programming', 45), ('c++', 28), ('java', 25), ('lis', 24), ('binary-search', 23), ('cpp', 21), ('dp', 13), ('dynamic-programming', 11), ('nlogn', 11), ('python', 11), ('javascript', 10), ('c#', 7), ('python 3', 6), ('binary search', 5), ('cpp solution', 5), ('explanation', 5), ('explained', 4), ('java-solution', 4), ('sort', 4), ('dfs', 3), ('easy-understand', 3), ('easy-understanding', 3), ('easy-undestand', 3), ('golang', 3), ('memoization', 3), ('rust', 3), ('sorting', 3), ('video-explanation', 3), ('dp-techqique', 2), ('patience sorting', 2), ('ruby', 2), ('simple', 2), ('array', 1), ('awesome samriddhi', 1), ('best-solution', 1), ('binary-tree', 1), ('binarysearch', 1), ('box stacking', 1), ('bs', 1), ('c# dp', 1), ('c++ code', 1), ('c++ dynamic programming', 1), ('c++ solution', 1), ('clean code', 1), ('comments', 1), ('comments-added', 1), ('compare-function', 1), ('csharp', 1), ('dp bottom up', 1), ('dp lis', 1), ('dp-iterative', 1), ('easy', 1), ('easy-to-understand', 1), ('explaination', 1), ('explanation with logic', 1), ('fast', 1), ('give stars and subscribe', 1), ('graph', 1), ('greedy', 1), ('interview', 1), ('iteration', 1), ('iterative', 1), ('java ac solution', 1), ('java binarysearch linear', 1), ('java8', 1), ('linear memory', 1), ('linearithmic', 1), ('linq', 1), ('memorization', 1), ('n2', 1), ('optimisation', 1), ('optimizations', 1), ('patience-sort', 1), ('performance', 1), ('python3', 1), ('ritik', 1), ('russiandollenvelopes', 1), ('self explanatory', 1), ('short', 1), ('simple clear c++ solution', 1), ('solution', 1), ('solution-share', 1), ('sorted array', 1), ('tle', 1), ('tle at 2000 nodes', 1), ('tle cases', 1), ('top-down dp', 1)]"
352,Data Stream as Disjoint Intervals,https://leetcode.com/problems/data-stream-as-disjoint-intervals,"Given a data stream input of non-negative integers a1, a2, ..., an, summarize the numbers seen so far as a list of disjoint intervals.

Implement the SummaryRanges class:


	SummaryRanges() Initializes the object with an empty stream.
	void addNum(int val) Adds the integer val to the stream.
	int[][] getIntervals() Returns a summary of the integers in the stream currently as a list of disjoint intervals [starti, endi].","['binary-search', 'ordered-map']",Hard,478,119,87380,42697,"[""Summary Ranges"", ""Find Right Interval"", ""Range Module""]","[('java', 19), ('binary-search', 10), ('cpp', 8), ('python', 7), ('solution', 5), ('easy-undestand', 4), ('map', 4), ('binary-search-tree', 3), ('bst', 3), ('c++', 3), ('easy-understand', 3), ('java-solution', 3), ('memory-limit-exceeded', 3), ('output-limit-exceeded', 3), ('time-limit-exceeded', 3), ('easy-understanding', 2), ('easytounderstand', 2), ('segment-tree', 2), ('simple', 2), ('treemap', 2), ('union-find', 2), ('100 bst', 1), ('binary search tree', 1), ('c#', 1), ('clarification', 1), ('comparator', 1), ('dfs', 1), ('hashset', 1), ('limit-exceeded', 1), ('map-stl', 1), ('memory', 1), ('memory-efficient', 1), ('merge', 1), ('ordered sets', 1), ('priority queue', 1), ('python 3', 1), ('question', 1), ('rust', 1), ('set', 1), ('sets', 1), ('short', 1), ('std', 1), ('swift', 1), ('tle', 1), ('treeset', 1), ('unionfind', 1), ('vector-operation', 1), ('wrong-function-statement', 1), ('xjq', 1)]"
350,Intersection of Two Arrays II,https://leetcode.com/problems/intersection-of-two-arrays-ii,"Given two integer arrays nums1 and nums2, return an array of their intersection. Each element in the result must appear as many times as it shows in both arrays and you may return the result in any order.","['hash-table', 'two-pointers', 'binary-search', 'sort']",Easy,2193,520,949097,495792,"[""Intersection of Two Arrays"", ""Find Common Characters""]","[('python', 61), ('java', 52), ('javascript', 45), ('c++', 44), ('cpp', 42), ('hashmap', 32), ('python 3', 32), ('python3', 31), ('easy-understanding', 23), ('two-pointers', 15), ('binary-search', 11), ('java-solution', 11), ('easy', 10), ('easy-understand', 9), ('golang', 9), ('dictionary', 8), ('follow-up', 8), ('simple', 8), ('sort', 8), ('array', 7), ('hash table', 7), ('map', 7), ('unordered map', 7), ('counter', 6), ('cpp solution', 6), ('solution', 6), ('swift', 6), ('arrays', 5), ('c#', 5), ('list', 5), ('sorting', 5), ('two pointers', 5), ('binary search', 4), ('dictonary', 4), ('easy-undestand', 4), ('hash map', 4), ('intersection arrays', 4), ('python2', 4), ('short', 4), ('simple solution', 4), ('csharp', 3), ('dict', 3), ('easy to understand', 3), ('hashtable', 3), ('intersection', 3), ('intersection-of-arrays', 3), ('set', 3), ('100 faster cpp', 2), ('c', 2), ('clean', 2), ('collections', 2), ('comments', 2), ('cpp easy', 2), ('easy-to-understand', 2), ('easytounderstand', 2), ('explanation', 2), ('fast and simple', 2), ('fast-solution', 2), ('filter', 2), ('golang-solution', 2), ('iterative', 2), ('javascript solution', 2), ('js', 2), ('kotlin', 2), ('linear time', 2), ('linear-time', 2), ('nlogn', 2), ('php', 2), ('ruby', 2), ('scala', 2), ('simple clear c++ solution', 2), ('sorted array', 2), ('stl', 2), ('two-pointer', 2), ('unorderedmap', 2), ('unorderedmultiset', 2), ('#cpp', 1), ('#easy-understand', 1), ('#sort', 1), ('100 memory', 1), ('100 speed', 1), ('2 pointer', 1), ('2pointers', 1), ('7 lines', 1), ('91 space', 1), ('99', 1), ('accepted', 1), ('algorithms', 1), ('append', 1), ('array functions', 1), ('beginner friendly', 1), ('binarysearch', 1), ('c#-solution', 1), ('c++ binary-search', 1), ('c++ solution', 1), ('c++11', 1), ('clear', 1), ('commented', 1), ('commetend', 1), ('complexity', 1), ('counters', 1), ('detailed explanation', 1), ('dfs', 1), ('dictionaries', 1), ('dictionary c#', 1), ('doubts', 1), ('dynamic programming', 1), ('easy understanding', 1), ('easy-understsand', 1), ('easysolution', 1), ('efficient', 1), ('es6', 1), ('explained', 1), ('explanation of logic', 1), ('fast', 1), ('faster then 95', 1), ('fold', 1), ('follow-ups', 1), ('for loop', 1), ('frequency count', 1), ('frequency table', 1), ('generator-expression', 1), ('go lang', 1), ('go-solution', 1), ('good question', 1), ('google', 1), ('hash', 1), ('hashing algorithm', 1), ('hashmap java', 1), ('hashset', 1), ('help', 1), ('illustration', 1), ('images', 1), ('immutable', 1), ('intersectionoftwoarraysii', 1), ('ios', 1), ('iterator', 1), ('kotlin-solution', 1), ('kotlinvim', 1), ('leetcode-problems', 1), ('linear', 1), ('linear memory', 1), ('linear-space', 1), ('map-stl', 1), ('memory optimized', 1), ('merge', 1), ('modifying input', 1), ('mrmagician', 1), ('multiset', 1), ('naive approach', 1), ('needhelp', 1), ('o 0f n', 1), ('one-liner', 1), ('oneliner', 1), ('optimal', 1), ('php solution', 1), ('pointer', 1), ('pointers', 1), ('pyhton3', 1), ('question350', 1), ('reduce', 1), ('remove', 1), ('resize', 1), ('set intersection', 1), ('simpe', 1), ('simple approach', 1), ('simple-solution', 1), ('single pass', 1), ('slow', 1), ('solution-javascript', 1), ('solution-share', 1), ('solution-sharing-cpp', 1), ('sort-function', 1), ('sorted', 1), ('soultion-sharing', 1), ('stars move the article up', 1), ('stdsetintersection', 1), ('straight-forward', 1), ('testcase', 1), ('two pointer', 1), ('two pointer approach', 1), ('two pointer technique', 1), ('two-lines', 1), ('typescript', 1), ('understandable', 1), ('vector', 1)]"
349,Intersection of Two Arrays,https://leetcode.com/problems/intersection-of-two-arrays,"Given two integer arrays nums1 and nums2, return an array of their intersection. Each element in the result must be unique and you may return the result in any order.","['hash-table', 'two-pointers', 'binary-search', 'sort']",Easy,1375,1531,726152,475658,"[""Intersection of Two Arrays II"", ""Intersection of Three Sorted Arrays""]","[('java', 67), ('python', 55), ('c++', 50), ('javascript', 50), ('cpp', 48), ('python 3', 39), ('set', 32), ('easy-understanding', 27), ('hashset', 22), ('sets', 20), ('binary-search', 15), ('python3', 15), ('hashmap', 13), ('java-solution', 13), ('cpp solution', 12), ('c#', 11), ('easy', 10), ('swift', 9), ('golang', 7), ('one-liner', 7), ('short', 7), ('array', 6), ('intersection', 6), ('ruby', 6), ('sort', 6), ('two-pointers', 6), ('binary search', 5), ('hash table', 5), ('js', 5), ('map', 5), ('python2', 5), ('easy-understand', 4), ('easytounderstand', 4), ('hashing', 4), ('hashtable', 4), ('one line', 4), ('simple', 4), ('solution', 4), ('sorted array', 4), ('sorting', 4), ('binarysearch', 3), ('c', 3), ('easy-undestand', 3), ('ios', 3), ('iterative', 3), ('javascript solution', 3), ('kotlin', 3), ('nlogn', 3), ('set intersection', 3), ('stl', 3), ('1 liner', 2), ('accepted', 2), ('brute force', 2), ('c#-solution', 2), ('c++ code', 2), ('cpp easy', 2), ('dictionary', 2), ('easy-to-understand', 2), ('facebook', 2), ('fast and simple', 2), ('filter', 2), ('go', 2), ('hash', 2), ('hash set', 2), ('java ac solution', 2), ('java8', 2), ('javascript brute force', 2), ('linear', 2), ('linear time', 2), ('linq', 2), ('list', 2), ('mergesort', 2), ('quicksort', 2), ('rust', 2), ('solution-sharing-cpp', 2), ('solution-sharing-python', 2), ('straight-forward', 2), ('streams', 2), ('two pointers', 2), ('typescript', 2), ('vector', 2), ('vectors', 2), ('video-explanation', 2), ('#codegirl', 1), ('#javascript', 1), ('#python', 1), ('1-liner', 1), ('100 memory', 1), ('2 pointers', 1), ('2 solutions', 1), ('2liner', 1), ('algorithms', 1), ('analysis', 1), ('arrayintersect', 1), ('arrays', 1), ('arrayunique', 1), ('awesome samriddhi', 1), ('begineer', 1), ('beginners', 1), ('best space complexity', 1), ('best-submission', 1), ('bit manipulation', 1), ('c++ solution', 1), ('chinese', 1), ('codingtuting', 1), ('commented', 1), ('comments', 1), ('constant-space', 1), ('counter', 1), ('duplicates', 1), ('easiest', 1), ('easy to understand', 1), ('easy to undertsand', 1), ('easytoundersatand', 1), ('efficient solution', 1), ('erase', 1), ('es6', 1), ('expalanation', 1), ('explaination', 1), ('explained solution', 1), ('explanations', 1), ('fast', 1), ('fast-solution', 1), ('faster', 1), ('faster than 99.66', 1), ('faster then 95', 1), ('fastest', 1), ('fidato', 1), ('find', 1), ('for-loop', 1), ('functional-programming', 1), ('go lang', 1), ('google', 1), ('hash map', 1), ('images', 1), ('intersection set', 1), ('intersection-of-arrays', 1), ('interview-friendly', 1), ('iterator', 1), ('java-simple-clean-solution', 1), ('javacript', 1), ('javascipt', 1), ('jigneshpanchal', 1), ('js javascript', 1), ('kotlinvim', 1), ('lambda', 1), ('lambdas', 1), ('linear seach', 1), ('linear search', 1), ('linear-space', 1), ('linear-time', 1), ('lists', 1), ('lyft', 1), ('map-stl', 1), ('mapreduce', 1), ('mrmagician', 1), ('naive', 1), ('nested', 1), ('net', 1), ('one liner', 1), ('php', 1), ('php solution', 1), ('python3.8', 1), ('recursive solution', 1), ('reduce', 1), ('ritik', 1), ('run-time-error', 1), ('self-explanatory', 1), ('simple solution', 1), ('simple-solution', 1), ('simpler', 1), ('single line', 1), ('slow', 1), ('solution-share', 1), ('sorted', 1), ('soultion-sharing', 1), ('space-complexity', 1), ('stacks', 1), ('swift5', 1), ('time-complexity-o', 1), ('two', 1), ('two sets', 1), ('two-pointer', 1), ('two-sets', 1), ('union', 1), ('unordered map', 1), ('unordered set', 1), ('upvote', 1), ('well-commented', 1), ('with-explanation', 1)]"
347,Top K Frequent Elements,https://leetcode.com/problems/top-k-frequent-elements,"Given an integer array nums and an integer k, return the k most frequent elements. You may return the answer in any order.","['hash-table', 'heap']",Medium,4864,266,927712,581488,"[""Word Frequency"", ""Kth Largest Element in an Array"", ""Sort Characters By Frequency"", ""Split Array into Consecutive Subsequences"", ""Top K Frequent Words"", ""K Closest Points to Origin"", ""Sort Features by Popularity""]","[('java', 99), ('python', 96), ('c++', 77), ('hashmap', 74), ('cpp', 66), ('python 3', 65), ('priority queue', 53), ('heap', 50), ('javascript', 37), ('python3', 30), ('counter', 18), ('map', 18), ('heapq', 17), ('easy-understanding', 14), ('priorityqueue', 14), ('c#', 13), ('java-solution', 13), ('easy-understand', 12), ('easy', 11), ('dictionary', 10), ('golang', 10), ('unordered map', 10), ('bucket sort', 9), ('cpp solution', 9), ('hash table', 9), ('maxheap', 9), ('priority-queue', 9), ('simple solution', 9), ('easy-to-understand', 8), ('min heap', 8), ('min-heap', 8), ('simple', 8), ('dictonary', 7), ('easy-undestand', 7), ('javascript solution', 7), ('linear time', 7), ('minheap', 7), ('sorted', 7), ('sorting', 7), ('bucket-sort', 6), ('c++ code', 6), ('one-liner', 6), ('quick select', 6), ('quickselect', 6), ('ruby', 6), ('set', 6), ('array', 5), ('heaps algorithm', 5), ('linq', 5), ('pair', 5), ('python2', 5), ('cpp easy', 4), ('easytounderstand', 4), ('go-solution', 4), ('golang-solution', 4), ('hash-table', 4), ('hashtable', 4), ('heaps', 4), ('oneline', 4), ('solution', 4), ('sort', 4), ('stl', 4), ('accepted', 3), ('buckets', 3), ('collections', 3), ('counting-sort', 3), ('dict', 3), ('dictionaries', 3), ('easy to understand', 3), ('easy understand', 3), ('explained', 3), ('fast', 3), ('fast and simple', 3), ('heapsort', 3), ('java ac solution', 3), ('java solution', 3), ('java8', 3), ('linear', 3), ('max heap', 3), ('streams', 3), ('swift', 3), ('test-case', 3), ('unorderedmap', 3), ('brute force', 2), ('bucket', 2), ('c', 2), ('clear', 2), ('easysolution', 2), ('explanation with code', 2), ('fast-solution', 2), ('faster than 99.41', 2), ('frequencycounting', 2), ('go', 2), ('hash', 2), ('iterative', 2), ('kotlin', 2), ('lambda', 2), ('list', 2), ('map-stl', 2), ('max-heap', 2), ('nthelement', 2), ('quick-select', 2), ('quick-selection', 2), ('scala', 2), ('solution-javascript', 2), ('sorted array', 2), ('straight-forward', 2), ('stream', 2), ('time-complexity-o', 2), ('treemap', 2), ('typescript', 2), ('vector', 2), ('#comparables', 1), ('#easy #java', 1), ('#java', 1), ('#python 3', 1), ('1liner', 1), ('2 solutions', 1), ('347', 1), ('algorithm', 1), ('algorithm-proof', 1), ('analysis', 1), ('annotation', 1), ('arraylist', 1), ('beat 98', 1), ('beginner friendly', 1), ('best-submission', 1), ('bfprt', 1), ('binary-search', 1), ('binarysearch', 1), ('boolean', 1), ('bug report', 1), ('c# minheap', 1), ('c# solutions', 1), ('c++ hash', 1), ('c++ solution', 1), ('c++ union find', 1), ('clarification', 1), ('clarity', 1), ('clean code', 1), ('clean code with comments', 1), ('cleanest', 1), ('commented code', 1), ('comments', 1), ('comparator', 1), ('complexity-analysis', 1), ('concise', 1), ('cpp clear', 1), ('csharp', 1), ('dictionary c#', 1), ('dictionary features', 1), ('doubts', 1), ('easy sloution', 1), ('easy understanding', 1), ('easy-peasy', 1), ('easy-solution', 1), ('efficient', 1), ('es6', 1), ('explanation', 1), ('explanation of logic', 1), ('faster', 1), ('fold', 1), ('frequency', 1), ('frequency count', 1), ('frequency table', 1), ('greedy', 1), ('hashing', 1), ('hashmap and sorting', 1), ('hashmaps', 1), ('heap sort', 1), ('help needed', 1), ('histogram', 1), ('immutable', 1), ('implementation', 1), ('inbuilt function', 1), ('interviews', 1), ('javascrip', 1), ('js', 1), ('k frequency elements', 1), ('kotlinvim', 1), ('lambda expression', 1), ('lembdafunction', 1), ('linear-space', 1), ('linear-time', 1), ('linearithmic', 1), ('logarithmic time', 1), ('makepair', 1), ('map in c++', 1), ('maps', 1), ('meiyaowen', 1), ('mrmagician', 1), ('msec', 1), ('multimap', 1), ('multiple solutions', 1), ('nlogk', 1), ('no loop', 1), ('one line solution', 1), ('one liner', 1), ('online-judge', 1), ('online-judge-question', 1), ('optimal', 1), ('performance', 1), ('problem-discussion', 1), ('problem-statement', 1), ('pythonpython3', 1), ('pythonsolution', 1), ('question', 1), ('quick', 1), ('quicksort-partition', 1), ('recursive', 1), ('run-time-error', 1), ('rust', 1), ('sandeepkumar', 1), ('self-explanatory', 1), ('short', 1), ('simple clear c++ solution', 1), ('simple python accepted', 1), ('simpler', 1), ('simplesolution', 1), ('solition-sharing', 1), ('solution-explaining', 1), ('solution-python', 1), ('solution-sharing-cpp', 1), ('solution-sharing-java', 1), ('sort-function', 1), ('sortbyvalues', 1), ('sorteddictionary', 1), ('space-complexity', 1), ('speed', 1), ('swift5', 1), ('techbacker', 1), ('test-case-too-weak', 1), ('testcase error', 1), ('testcase-wrong', 1), ('three-different-solutions', 1), ('time complexity', 1), ('time-complexity', 1), ('topk', 1), ('topkelements', 1), ('topological-sort', 1), ('two approaches', 1), ('upvote', 1), ('vector-of-pair', 1), ('vector-operation', 1), ('well-commented', 1), ('well-explained', 1), ('werfree', 1), ('works-on-my-machine', 1), ('wrong output', 1), ('wrong-description', 1)]"
345,Reverse Vowels of a String,https://leetcode.com/problems/reverse-vowels-of-a-string,"Given a string s, reverse only all the vowels in the string and return it.

The vowels are 'a', 'e', 'i', 'o', and 'u', and they can appear in both cases.","['two-pointers', 'string']",Easy,1014,1475,609256,276105,"[""Reverse String"", ""Remove Vowels from a String""]","[('java', 60), ('cpp', 54), ('two-pointers', 54), ('python', 47), ('c++', 43), ('javascript', 28), ('simple', 24), ('python 3', 20), ('easy-understand', 16), ('java-solution', 15), ('two pointers', 12), ('c#', 11), ('python3', 11), ('solution', 11), ('stack', 11), ('easy-understanding', 10), ('two-pointer', 10), ('c', 8), ('easy-undestand', 8), ('c++ code', 7), ('easy', 7), ('cpp solution', 6), ('reverse-vowels-of-a-string', 6), ('swift', 6), ('easytounderstand', 5), ('2 pointers', 4), ('clean code', 4), ('golang', 4), ('kotlin', 4), ('ruby', 4), ('set', 4), ('string', 4), ('easy-to-understand', 3), ('simple solution', 3), ('solution-sharing-cpp', 3), ('stacks', 3), ('two pointer', 3), ('twopointer', 3), ('wrong-answer', 3), ('#two-pointers', 2), ('arrays', 2), ('c code', 2), ('c++ easy to understand', 2), ('deque', 2), ('easy to understand', 2), ('fast', 2), ('fast and simple', 2), ('fast-solution', 2), ('golang-solution', 2), ('hashtable', 2), ('intuitive', 2), ('ios', 2), ('java solution', 2), ('javascript solution', 2), ('javascriptes6', 2), ('linear', 2), ('linear-time', 2), ('pointers', 2), ('readable', 2), ('reverse', 2), ('rust', 2), ('short', 2), ('stringbuilder', 2), ('stringbuilder in java', 2), ('swapping', 2), ('swift5', 2), ('time-limit-exceeded', 2), ('two pointer technique', 2), ('#easy', 1), ('#javascript', 1), ('#python 3', 1), ('#twopointerapproach', 1), ('100 memory', 1), ('100 speed', 1), ('11 lines', 1), ('2pointer', 1), ('accepted', 1), ('accepted solution', 1), ('algorithms', 1), ('answer', 1), ('bad', 1), ('beginner friendly', 1), ('bug', 1), ('c++ iterative sol', 1), ('c++ solution', 1), ('c++14', 1), ('case', 1), ('character', 1), ('clean', 1), ('clean solution', 1), ('constant memory', 1), ('cplusplus', 1), ('cpp easy', 1), ('cpp short solution', 1), ('cpp-solution', 1), ('csharp', 1), ('dictionary', 1), ('double-pointers', 1), ('easiest solution', 1), ('easy to understood', 1), ('easy understanding', 1), ('easy undestanding', 1), ('easy-solition', 1), ('efficiency', 1), ('efficient solution', 1), ('elegent', 1), ('explanation', 1), ('explanatory comments', 1), ('faster than 75', 1), ('faster than 98', 1), ('fastest', 1), ('filter', 1), ('for loops', 1), ('generator', 1), ('go-solution', 1), ('good variable names', 1), ('hash set', 1), ('hashset', 1), ('in-place', 1), ('inplace', 1), ('iterative', 1), ('iteratively', 1), ('java solution sharing', 1), ('js javascript', 1), ('kotlin-solution', 1), ('kotlinvim', 1), ('lambda', 1), ('less space than 100.00', 1), ('linear space', 1), ('linear time', 1), ('linear-time-space', 1), ('map', 1), ('memory', 1), ('mobile', 1), ('modern cpp', 1), ('most-intuitive', 1), ('mutablelist', 1), ('null', 1), ('on', 1), ('one pass', 1), ('one-loop', 1), ('pointer', 1), ('pointer2pointer', 1), ('question', 1), ('queues', 1), ('regular-expression-matching', 1), ('reverse-string', 1), ('reversevowelsofstring', 1), ('runtime', 1), ('sets', 1), ('simple java solution', 1), ('simple python accepted', 1), ('sliding window', 1), ('solution-java', 1), ('solution-sharing-java', 1), ('solution-sharingjava', 1), ('stl', 1), ('strings in python', 1), ('swap', 1), ('switch', 1), ('test', 1), ('testcase-wrong', 1), ('tuple', 1), ('two pointer approach', 1), ('two-different-solutions', 1), ('two-pointer method', 1), ('twopointers', 1), ('unit-test', 1), ('vowels', 1), ('while-loop', 1), ('wrong', 1)]"
344,Reverse String,https://leetcode.com/problems/reverse-string,Write a function that reverses a string. The input string is given as an array of characters s.,"['two-pointers', 'string']",Easy,2313,766,1446526,1024344,"[""Reverse Vowels of a String"", ""Reverse String II""]","[('java', 92), ('python', 77), ('c++', 60), ('cpp', 57), ('javascript', 56), ('python 3', 48), ('java-solution', 38), ('two-pointers', 32), ('recursion', 28), ('string', 21), ('easy-understanding', 19), ('swap', 17), ('python3', 16), ('swift', 16), ('easy', 15), ('easy-understand', 15), ('golang', 15), ('reverse-string', 14), ('c#', 13), ('cpp solution', 13), ('easy-undestand', 13), ('solution', 13), ('c', 12), ('reverse string', 11), ('simple solution', 10), ('simple', 9), ('two pointers', 8), ('one-liner', 7), ('easy-to-understand', 6), ('es6', 6), ('golang-solution', 6), ('iterative', 6), ('javascript solution', 6), ('two-pointer', 6), ('array', 5), ('fast-solution', 5), ('in-place', 5), ('js', 5), ('recursive', 5), ('reverse', 5), ('ruby', 5), ('rust', 5), ('string-operation', 5), ('built-in-function', 4), ('easytounderstand', 4), ('linear time', 4), ('python2', 4), ('reverse list', 4), ('string reverse', 4), ('time-limit-exceeded', 4), ('twopointer', 4), ('commented', 3), ('easiest', 3), ('easy to understand', 3), ('fast', 3), ('go', 3), ('javascrip', 3), ('kotlin', 3), ('one line', 3), ('reversestring', 3), ('scala', 3), ('stl', 3), ('swap-in-place', 3), ('#two-pointers', 2), ('2 lines', 2), ('c++ code', 2), ('c++ solution', 2), ('clean code', 2), ('clean-code', 2), ('constant-space', 2), ('csharp', 2), ('explanation of logic', 2), ('explanations', 2), ('fast and simple', 2), ('fastest', 2), ('for-loop', 2), ('go-solution', 2), ('inplace', 2), ('iterator', 2), ('list', 2), ('loop', 2), ('pointer', 2), ('run-time-error', 2), ('simple clear c++ solution', 2), ('stacks', 2), ('stl vector', 2), ('stringbuilder', 2), ('two pointer technique', 2), ('two-pointer method', 2), ('vector', 2), ('xor', 2), ('#java', 1), ('#java #easy-understand', 1), ('#javascript', 1), ('1 line', 1), ('1 ms', 1), ('100 beat', 1), ('100 memory', 1), ('100 space', 1), ('100 speed', 1), ('1ms', 1), ('1ms runtime', 1), ('2 pointer approach', 1), ('2 pointers', 1), ('2-line', 1), ('2-pointer', 1), ('2lines', 1), ('95.11faster', 1), ('99.88', 1), ('algorithms', 1), ('android', 1), ('approach', 1), ('beating-100-submission', 1), ('beats 98', 1), ('begineer', 1), ('best explaination', 1), ('bitwise', 1), ('bitwise operation', 1), ('brute-force', 1), ('bug', 1), ('bug report', 1), ('bugs', 1), ('c code', 1), ('c# solutions', 1), ('c++ easy to understand', 1), ('clear-understanding', 1), ('code', 1), ('code-golf', 1), ('comments-added', 1), ('constant memory', 1), ('constant space', 1), ('cpp easy', 1), ('decomposition', 1), ('destructuring assignment', 1), ('double-pointers', 1), ('easy sloution', 1), ('easy to read', 1), ('easy-explanation', 1), ('easy-solition', 1), ('easy-solution', 1), ('easysolution', 1), ('elegant', 1), ('excel', 1), ('excel sheet', 1), ('explaination', 1), ('explained solution', 1), ('explanation', 1), ('explanation with code', 1), ('extended-slice', 1), ('faster than 92.39', 1), ('fizz', 1), ('for loop', 1), ('for loops', 1), ('friendly', 1), ('fun', 1), ('go lang', 1), ('go solution', 1), ('go-lang', 1), ('google sheets', 1), ('help', 1), ('help needed', 1), ('improve', 1), ('ios', 1), ('iteration', 1), ('iteration vs recursion', 1), ('iterative solution', 1), ('iterative vs recursive', 1), ('iterators', 1), ('itereative', 1), ('izaac', 1), ('java simple', 1), ('javascipt', 1), ('javascript recursive', 1), ('javascriptes6', 1), ('js javascript', 1), ('kotlin-solution', 1), ('linear-time', 1), ('multithreading', 1), ('new', 1), ('no extra space', 1), ('no-temp-char', 1), ('one pointer', 1), ('one-line', 1), ('oneliner', 1), ('optimal', 1), ('optimized', 1), ('performance', 1), ('php', 1), ('php solution', 1), ('pointer approach', 1), ('pre-defined', 1), ('ptyhon', 1), ('python3.8', 1), ('pythonpython3', 1), ('recoursion', 1), ('recrusion', 1), ('recursion vs iteration', 1), ('recursive reverse string', 1), ('recursive vs iterative', 1), ('recusion', 1), ('regex', 1), ('regex expression', 1), ('regular-expression', 1), ('reverse array', 1), ('reverse-array', 1), ('reverse-list', 1), ('reversed', 1), ('runtime-error', 1), ('self explanatory', 1), ('short', 1), ('simplest', 1), ('single-line', 1), ('slidingwindow', 1), ('solution-cpp', 1), ('solution-python', 1), ('solution-sharing-c', 1), ('solution-sharing-python', 1), ('solved', 1), ('soultion-sharing', 1), ('split', 1), ('stack', 1), ('step by step', 1), ('stl algorithms', 1), ('string manipulation', 1), ('string-reverse-words', 1), ('sultion', 1), ('swapping', 1), ('swift5', 1), ('two', 1), ('two pointer', 1), ('two pointer approach', 1), ('twopointers', 1), ('typescript', 1), ('ultra simple', 1), ('unit-test', 1), ('unsafe', 1), ('updated', 1), ('upvote', 1), ('video', 1), ('video solution', 1), ('video-explanation', 1), ('visualization', 1), ('while loop', 1), ('with comments', 1), ('works-on-my-machine', 1), ('wrong answer', 1), ('wrong-answer', 1), ('youtube', 1)]"
343,Integer Break,https://leetcode.com/problems/integer-break,"Given an integer n, break it into the sum of k positive integers, where k >= 2, and maximize the product of those integers.

Return the maximum product you can get.","['math', 'dynamic-programming']",Medium,1588,263,255055,131204,"[""Maximize Number of Nice Divisors""]","[('java', 50), ('dynamic programming', 44), ('cpp', 40), ('dynamic-programming', 33), ('python', 29), ('dp', 25), ('c++', 19), ('math', 19), ('memoization', 18), ('python 3', 15), ('recursion', 11), ('cpp solution', 8), ('easy-understand', 6), ('javascript', 6), ('python3', 6), ('simple', 6), ('solution', 6), ('java-solution', 5), ('maths', 5), ('wrong-answer', 5), ('easy', 4), ('easy-understanding', 4), ('easy-undestand', 4), ('0ms', 3), ('bottom-up-algorithm', 3), ('golang', 3), ('logical thinking', 3), ('one-liner', 3), ('recursive', 3), ('short', 3), ('simple solution', 3), ('100 faster', 2), ('accepted', 2), ('best-submission', 2), ('c++ code', 2), ('cpp easy', 2), ('explanation', 2), ('greedy', 2), ('intuitive', 2), ('java ac solution', 2), ('knapsack', 2), ('recurision', 2), ('solution-sharing-python', 2), ('swift', 2), ('test-case', 2), ('100 beat', 1), ('100 faster runtime', 1), ('100 speed', 1), ('backtracking', 1), ('bottomup', 1), ('brute force', 1), ('bug', 1), ('c', 1), ('c code', 1), ('c#', 1), ('c++ template', 1), ('c++11', 1), ('common sense', 1), ('constant space', 1), ('constant-space', 1), ('cplusplus', 1), ('detailed', 1), ('dp java', 1), ('dyanmic programming', 1), ('dynamic progr', 1), ('dynamic programmin', 1), ('easiest', 1), ('easy solution', 1), ('easy undestanding', 1), ('easy-to-understand', 1), ('easytounderstand', 1), ('examplain', 1), ('explained', 1), ('fast and simple', 1), ('faster than 100.00', 1), ('fasterthan100', 1), ('funny', 1), ('greedy approach', 1), ('heap', 1), ('help needed', 1), ('hint', 1), ('inequality', 1), ('innovative', 1), ('integer break', 1), ('iterative', 1), ('math trick', 1), ('math-proof', 1), ('math-solution', 1), ('memorization', 1), ('memorized-dfs', 1), ('naive', 1), ('no dp', 1), ('non-recursive', 1), ('none-recursion', 1), ('on', 1), ('oneline', 1), ('pattern', 1), ('pyhton', 1), ('rajat', 1), ('recrusion', 1), ('recurrsion', 1), ('recursion-power-logn', 1), ('recursive dp', 1), ('regularity', 1), ('ruby', 1), ('shorter', 1), ('simple clear c++ solution', 1), ('simple-solution', 1), ('solution-sharing-cpp', 1), ('symmetric', 1), ('testcase-wrong', 1), ('time-complexity', 1), ('top down dp', 1), ('top-down', 1), ('unbounded knapsack', 1), ('unbounded-knapsack', 1), ('video explanation', 1), ('well-commented', 1), ('wrong', 1), ('xjq', 1)]"
342,Power of Four,https://leetcode.com/problems/power-of-four,"Given an integer n, return true if it is a power of four. Otherwise, return false.

An integer n is a power of four, if there exists an integer x such that n == 4x.",['bit-manipulation'],Easy,863,252,545422,228629,"[""Power of Two"", ""Power of Three""]","[('java', 54), ('python', 45), ('c++', 43), ('cpp', 41), ('bit manipulation', 27), ('bit-manipulation', 24), ('javascript', 20), ('python 3', 18), ('java-solution', 13), ('python3', 12), ('easy', 11), ('easy-understanding', 11), ('cpp solution', 10), ('log', 10), ('math', 9), ('solution', 9), ('bitwise', 7), ('bitwise operation', 7), ('easy-understand', 7), ('power-of-four', 7), ('c#', 6), ('golang', 6), ('one-liner', 6), ('cpp easy', 5), ('regex', 5), ('simple solution', 5), ('c++ code', 4), ('easy-to-understand', 4), ('easytounderstand', 4), ('explained', 4), ('python2', 4), ('recursion', 4), ('scala', 4), ('simple', 4), ('1-line', 3), ('100 faster', 3), ('beginner friendly', 3), ('bitmanipulation', 3), ('c', 3), ('easy-undestand', 3), ('fast and simple', 3), ('go', 3), ('golang-solution', 3), ('logarithm', 3), ('oneline', 3), ('short', 3), ('#math', 2), ('#python', 2), ('1 line', 2), ('100 speed', 2), ('binary', 2), ('c++ easy to understand', 2), ('c++ solution', 2), ('constant-space', 2), ('explanation', 2), ('go-solution', 2), ('java simple', 2), ('js', 2), ('log-algo', 2), ('loops', 2), ('o1', 2), ('one line', 2), ('one liner', 2), ('optimal', 2), ('popcount', 2), ('python 2', 2), ('ruby', 2), ('swift', 2), ('typescript', 2), ('0ms', 1), ('1-line solution', 1), ('100', 1), ('100 beat', 1), ('100 faster cpp', 1), ('100 space', 1), ('100 time', 1), ('1ms', 1), ('4 lines', 1), ('algorithms', 1), ('august-challenge', 1), ('awesome samriddhi', 1), ('best-submission', 1), ('binary string', 1), ('bit mask', 1), ('bit operation', 1), ('bit-mask', 1), ('bit-shift', 1), ('bitmask', 1), ('bitmasking', 1), ('bitwise-operators', 1), ('biwise', 1), ('brute force', 1), ('brute force to optimal', 1), ('bug', 1), ('built-in-function', 1), ('builtin', 1), ('c++ bitoperations', 1), ('c++11', 1), ('clean code', 1), ('clean-code', 1), ('code-golf', 1), ('codegolf', 1), ('constant time', 1), ('constant-time', 1), ('discussion', 1), ('easiest', 1), ('easiest solution', 1), ('easy to understand', 1), ('easy to understandd', 1), ('easy understand', 1), ('easy-implementation', 1), ('explained solution', 1), ('explanatory comments', 1), ('facebook-interview', 1), ('fast', 1), ('fastest', 1), ('five-different-solutions', 1), ('fuck noobs', 1), ('gcc', 1), ('good variable names', 1), ('hash', 1), ('help', 1), ('idea', 1), ('interview help', 1), ('iterative', 1), ('iterator', 1), ('java solution', 1), ('joke', 1), ('kotlin', 1), ('log10', 1), ('logarithmic time', 1), ('logarithms', 1), ('logartihm', 1), ('lol', 1), ('loop', 1), ('loop method', 1), ('math.log', 1), ('maths', 1), ('no loop', 1), ('noloop', 1), ('non-iterative', 1), ('non-recursive', 1), ('norecursion', 1), ('notes', 1), ('one line solution', 1), ('oneliner', 1), ('php', 1), ('php solution', 1), ('position-based', 1), ('power-of-two', 1), ('poweroffour', 1), ('precacluation', 1), ('pythonpython3', 1), ('recursive easy', 1), ('recursively', 1), ('representation', 1), ('ritik', 1), ('secret trick', 1), ('shift operators', 1), ('short c++ code', 1), ('short code', 1), ('shortest', 1), ('simple-solution', 1), ('simplesolution', 1), ('single statement', 1), ('solution-csharp', 1), ('solution-sharing-java', 1), ('solution-sharing-python', 1), ('stl', 1), ('streams', 1), ('string-operation', 1), ('string-to-integer', 1), ('substring', 1), ('time-complexity', 1), ('tricks', 1), ('video', 1), ('video solution', 1), ('video-explanation', 1), ('well-commented', 1), ('while-loop', 1), ('with-explanation', 1)]"
341,Flatten Nested List Iterator,https://leetcode.com/problems/flatten-nested-list-iterator,"You are given a nested list of integers nestedList. Each element is either an integer or a list whose elements may also be integers or other lists. Implement an iterator to flatten it.

Implement the NestedIterator class:


	NestedIterator(List<NestedInteger> nestedList) Initializes the iterator with the nested list nestedList.
	int next() Returns the next integer in the nested list.
	boolean hasNext() Returns true if there are still some integers in the nested list and false otherwise.","['stack', 'design']",Medium,2305,840,403559,225898,"[""Flatten 2D Vector"", ""Zigzag Iterator"", ""Mini Parser"", ""Array Nesting""]","[('java', 57), ('cpp', 34), ('c++', 31), ('stack', 27), ('python', 26), ('recursion', 16), ('javascript', 13), ('queue', 13), ('dfs', 12), ('c#', 11), ('easy-understanding', 10), ('iterator', 10), ('simple', 10), ('recursive', 9), ('java-solution', 7), ('python 3', 7), ('deque', 6), ('golang', 6), ('python3', 6), ('stacks', 6), ('swift', 6), ('c++ code', 5), ('easy', 5), ('easy-understand', 5), ('generator', 5), ('cpp solution', 4), ('100 space', 3), ('dfs simple solution', 3), ('easytounderstand', 3), ('nestedinteger', 3), ('recusion', 3), ('rust', 3), ('short', 3), ('simple solution', 3), ('solution', 3), ('vector', 3), ('100', 2), ('100 speed', 2), ('arraylist', 2), ('bfs', 2), ('comments-added', 2), ('easy to understand', 2), ('easy-to-understand', 2), ('explained', 2), ('fast and simple', 2), ('iterators', 2), ('java ac solution', 2), ('lazy', 2), ('linq', 2), ('pointer', 2), ('ruby', 2), ('simple clear c++ solution', 2), ('#iterator', 1), ('1 time write n times read', 1), ('97 percent faster', 1), ('accepted', 1), ('approach', 1), ('array', 1), ('awesome samriddhi', 1), ('backtracking', 1), ('c', 1), ('class', 1), ('classes', 1), ('clean code', 1), ('clear', 1), ('commented', 1), ('concise', 1), ('constant', 1), ('cpp easy', 1), ('cpp-solution', 1), ('csharp', 1), ('depth first search', 1), ('eager', 1), ('easiest', 1), ('easy to read', 1), ('easy-undestand', 1), ('efficient', 1), ('elegant solution', 1), ('enumerable', 1), ('enumerator', 1), ('fast-solution', 1), ('faster than 95', 1), ('flattennestedlistiterator', 1), ('go', 1), ('go-solution', 1), ('golang-solution', 1), ('ienumerable', 1), ('input', 1), ('interview', 1), ('iterative', 1), ('java solution', 1), ('javascript solution', 1), ('js', 1), ('kotlin', 1), ('kotlinvim', 1), ('linkedlist', 1), ('list', 1), ('makeunique', 1), ('memory', 1), ('no extra memory', 1), ('no extra space', 1), ('no memory', 1), ('pointers', 1), ('pre-process', 1), ('python3.8', 1), ('readable', 1), ('rec', 1), ('reccursion', 1), ('recursive solution', 1), ('recursive-dfs', 1), ('recursively', 1), ('recusive', 1), ('ritik', 1), ('run-time-error', 1), ('scala', 1), ('simple java solution', 1), ('solution-sharing-python', 1), ('space o1', 1), ('stack-based', 1), ('suggestion', 1), ('swift5', 1), ('swiftsolution', 1), ('test-case-validation', 1), ('testcase-wrong', 1), ('thinking process', 1), ('true iterator', 1), ('variadictemplates', 1), ('well explained', 1), ('without containers', 1), ('without preprocessing', 1), ('wrong-answer', 1), ('wrong-test-cases', 1), ('yield return', 1)]"
338,Counting Bits,https://leetcode.com/problems/counting-bits,"Given an integer num, return an array of the number of 1's in the binary representation of every number in the range [0, num].","['dynamic-programming', 'bit-manipulation']",Medium,3835,208,498259,352091,"[""Number of 1 Bits""]","[('dynamic programming', 120), ('java', 87), ('python', 76), ('c++', 71), ('cpp', 70), ('dp', 56), ('dynamic-programming', 51), ('python 3', 47), ('bit manipulation', 38), ('javascript', 28), ('java-solution', 25), ('python3', 21), ('easy-understanding', 19), ('bit-manipulation', 17), ('cpp solution', 16), ('easy-understand', 15), ('c++ code', 11), ('easy-undestand', 10), ('simple', 10), ('golang', 9), ('simple solution', 9), ('linear time', 8), ('solution', 8), ('bitwise operation', 7), ('cpp easy', 7), ('c#', 6), ('easy', 6), ('easy to understand', 6), ('one-liner', 6), ('bits', 5), ('easy-to-understand', 5), ('fast', 5), ('accepted', 4), ('bitmanipulation', 4), ('linear', 4), ('short', 4), ('swift', 4), ('binary', 3), ('bit masking', 3), ('bitmasking', 3), ('bitwise', 3), ('c', 3), ('easysolution', 3), ('explained', 3), ('explanations', 3), ('js', 3), ('oneliner', 3), ('pattern', 3), ('python2', 3), ('ruby', 3), ('rust', 3), ('time-limit-exceeded', 3), ('#dp', 2), ('#easy-understanding', 2), ('0ms', 2), ('100 speed', 2), ('bitset', 2), ('brute force', 2), ('c++11', 2), ('c++17', 2), ('clear explanation', 2), ('counting-bits', 2), ('dictionary', 2), ('different', 2), ('dp-programming', 2), ('dp-techqique', 2), ('fast and simple', 2), ('fast-solution', 2), ('go', 2), ('intuitive', 2), ('javascript solution', 2), ('kotlin', 2), ('linear memory', 2), ('lsb', 2), ('memoization', 2), ('no bit masking', 2), ('oddeven', 2), ('on', 2), ('one line', 2), ('one-pass', 2), ('optimal', 2), ('pattern-based', 2), ('recurision', 2), ('recursion', 2), ('short solution', 2), ('single pass', 2), ('solution-sharing-cpp', 2), ('solution-sharing-python', 2), ('#bit-manipulation', 1), ('#bottom-up', 1), ('#c++', 1), ('#dynamic programming', 1), ('#dynamic-programming', 1), ('#easy', 1), ('#easysolution', 1), ('#java', 1), ('#like-a-boss', 1), ('#python', 1), ('100 faster', 1), ('1ms runtime', 1), ('2s power', 1), ('99.94', 1), ('alternative solution', 1), ('array', 1), ('arrays', 1), ('awesome samriddhi', 1), ('beats 99', 1), ('bfs', 1), ('binarynumber', 1), ('bit', 1), ('bit-operation', 1), ('bitcount', 1), ('bottom up', 1), ('bottom-up', 1), ('bottom-up-algorithm', 1), ('c++ dynamic programming', 1), ('c++14', 1), ('clean', 1), ('clean code', 1), ('clean-efficient-code', 1), ('clear', 1), ('comments-added', 1), ('constant space', 1), ('count', 1), ('count set bits', 1), ('cpp short solution', 1), ('cpp-solution', 1), ('cppsolution', 1), ('csharp', 1), ('detailed', 1), ('doodoo', 1), ('double', 1), ('dp java', 1), ('dynamic typing', 1), ('dynammic programming', 1), ('easiest', 1), ('easy undestanding', 1), ('easy-solition', 1), ('easytounderstand', 1), ('even odd', 1), ('example', 1), ('explaination', 1), ('explained solution', 1), ('explanation with logic', 1), ('faster', 1), ('faster than 98', 1), ('fastest c++ solution', 1), ('gcc', 1), ('go-solution', 1), ('golang-solution', 1), ('gray-code', 1), ('hash table', 1), ('hashmap', 1), ('implementation', 1), ('improve', 1), ('in-place', 1), ('integer', 1), ('interview', 1), ('iterate', 1), ('iteration', 1), ('iteratively', 1), ('java bit-manipulation', 1), ('java dynamic programming', 1), ('javascrip', 1), ('js javascript', 1), ('linear seach', 1), ('linear space', 1), ('linear time complexity', 1), ('linear-time', 1), ('list comprehension', 1), ('logic explained clearly', 1), ('loops', 1), ('math', 1), ('math-solution', 1), ('memoize', 1), ('memory-limit-exceeded', 1), ('minimalism', 1), ('naive solution', 1), ('nodejs', 1), ('number-theory', 1), ('odd even', 1), ('one', 1), ('one pass solution', 1), ('oneline', 1), ('optimized', 1), ('pass', 1), ('pointer', 1), ('power', 1), ('proof', 1), ('pythonic', 1), ('recursive', 1), ('recusion', 1), ('reuse', 1), ('right-shift', 1), ('ritik', 1), ('run-time-error', 1), ('short code', 1), ('simple clear c++ solution', 1), ('simple-solution', 1), ('simplest', 1), ('solution c++', 1), ('solution-cpp', 1), ('solution-python', 1), ('space n', 1), ('static', 1), ('stl', 1), ('straight forward', 1), ('stupid', 1), ('table', 1), ('tabulation', 1), ('thinking process', 1), ('time-complexity', 1), ('tle', 1), ('tricky', 1), ('two-pointers', 1), ('typescript', 1), ('vector-operation', 1), ('video solution', 1), ('well-commented', 1), ('wrong-answer', 1), ('xjq', 1), ('xor', 1)]"
337,House Robber III,https://leetcode.com/problems/house-robber-iii,"The thief has found himself a new place for his thievery again. There is only one entrance to this area, called root.

Besides the root, each house has one and only one parent house. After a tour, the smart thief realized that all houses in this place form a binary tree. It will automatically contact the police if two directly-linked houses were broken into on the same night.

Given the root of the binary tree, return the maximum amount of money the thief can rob without alerting the police.","['dynamic-programming', 'tree', 'depth-first-search']",Medium,3986,67,402462,209483,"[""House Robber"", ""House Robber II""]","[('java', 39), ('python', 37), ('cpp', 33), ('c++', 31), ('dfs', 29), ('dynamic programming', 28), ('recursion', 27), ('dynamic-programming', 21), ('memoization', 20), ('python 3', 14), ('recursive', 14), ('dp', 11), ('easy-understand', 9), ('java-solution', 9), ('javascript', 9), ('easy-understanding', 7), ('c#', 6), ('solution', 6), ('tree', 6), ('bottom-up-algorithm', 5), ('trees', 5), ('python3', 4), ('simple', 4), ('100 speed', 3), ('c++ code', 3), ('cpp solution', 3), ('depth first search', 3), ('dfs simple solution', 3), ('easytounderstand', 3), ('golang', 3), ('house-robber-iii', 3), ('post-order-traversal', 3), ('postorder-traversal', 3), ('recusive', 3), ('ruby', 3), ('rust', 3), ('top-down', 3), ('0ms', 2), ('binary-tree', 2), ('c++ dynamic programming', 2), ('cpp easy', 2), ('depth-first-search', 2), ('fast and simple', 2), ('iteration', 2), ('iterative', 2), ('javascript solution', 2), ('kotlin', 2), ('map', 2), ('postorder traversal', 2), ('preorder', 2), ('recurision', 2), ('recursion formula', 2), ('swift', 2), ('time-limit-exceeded', 2), ('unordered map', 2), ('well-commented', 2), ('#javascript', 1), ('#recursion', 1), ('100 faster', 1), ('algorithms', 1), ('backtracking', 1), ('beginner friendly', 1), ('bottom-up approach', 1), ('c++ ac', 1), ('c++ solution', 1), ('c++11', 1), ('case', 1), ('clear-understanding', 1), ('comment', 1), ('crispygang', 1), ('csharp', 1), ('deep-first-search', 1), ('depth first traversal', 1), ('depth-first search', 1), ('dfs recursive', 1), ('dfs traversal', 1), ('dfs with dp', 1), ('dfs with memo', 1), ('dfs-in-order', 1), ('dfs-topdown', 1), ('divide and conquer', 1), ('dp bottom up', 1), ('dp on trees', 1), ('dp top down', 1), ('dp-programming', 1), ('dp-techqique', 1), ('easy to understand', 1), ('easy to understandd', 1), ('easy-to-understand', 1), ('easy-undestand', 1), ('es6', 1), ('explained', 1), ('explained solution', 1), ('explanation', 1), ('explanations', 1), ('fastest', 1), ('fastest java solution', 1), ('fastest solution', 1), ('go-solution', 1), ('golang-solution', 1), ('hashing', 1), ('hashmap', 1), ('houserobberiii', 1), ('image', 1), ('inclusion-exclusion', 1), ('intutive', 1), ('java ac solution', 1), ('linear time', 1), ('memoisation', 1), ('memoized', 1), ('memoziation', 1), ('modifying input', 1), ('noob coding', 1), ('optimal solution', 1), ('optimal substructure', 1), ('php', 1), ('post order traversal', 1), ('post-order-dfs', 1), ('postorder', 1), ('pyhton3', 1), ('readable', 1), ('recursion memoization', 1), ('recursive solution', 1), ('recursive-postorder', 1), ('recursively', 1), ('recusion', 1), ('scala', 1), ('short', 1), ('short code', 1), ('simple solution', 1), ('simple to understand', 1), ('test', 1), ('top-down dp', 1), ('top-down tree traversal', 1), ('tree-traversal', 1), ('unorderedmap', 1), ('video explaination', 1), ('video solution', 1), ('video-explanation', 1), ('well-explained', 1), ('wrong', 1), ('wrong output', 1), ('xjq', 1), ('zea7ot', 1)]"
336,Palindrome Pairs,https://leetcode.com/problems/palindrome-pairs,"Given a list of unique words, return all the pairs of the distinct indices (i, j) in the given list, so that the concatenation of the two words words[i] + words[j] is a palindrome.","['hash-table', 'string', 'trie']",Hard,1768,174,331611,115979,"[""Longest Palindromic Substring"", ""Shortest Palindrome""]","[('java', 14), ('python', 13), ('cpp', 11), ('c++', 10), ('trie', 8), ('javascript', 5), ('wrong-answer', 4), ('brute-force', 3), ('kmp', 3), ('palindrome', 3), ('python 3', 3), ('best-submission', 2), ('easy-understand', 2), ('golang', 2), ('hash table', 2), ('hashmap', 2), ('manachers-algorithm', 2), ('python3', 2), ('question-not-clear', 2), ('rabin-karp', 2), ('rotate hash', 2), ('simple', 2), ('solution', 2), ('understandable', 2), ('#swift', 1), ('accepted', 1), ('algorithms', 1), ('arraylist', 1), ('bipartite-partition', 1), ('bucket-sort', 1), ('c#', 1), ('commented', 1), ('confuse-description', 1), ('cpp solution', 1), ('cpp-solution', 1), ('dfs', 1), ('different-oj-runcode', 1), ('easy', 1), ('easy-to-understand', 1), ('explanation', 1), ('explanation of logic', 1), ('fast-solution', 1), ('java-solution', 1), ('javascript solution', 1), ('kmp algorithm', 1), ('list', 1), ('list of', 1), ('manacher-algorithm', 1), ('map', 1), ('memory-limit-exceeded', 1), ('mix-and-sort', 1), ('optimized', 1), ('performance', 1), ('scala', 1), ('shortest', 1), ('solution-sharing-cpp', 1), ('super-easy', 1), ('test-case', 1), ('test-case-validation', 1), ('testcase-wrong', 1), ('time limi', 1), ('time-complexity', 1), ('time-limit-exceeded', 1), ('trie-dfs', 1), ('trie-tree', 1), ('tries', 1), ('well-commented', 1), ('wrong answer', 1), ('wrong output', 1), ('wrong-solution', 1)]"
335,Self Crossing,https://leetcode.com/problems/self-crossing,"You are given an array of integers distance.

You start at point (0,0) on an X-Y plane and you move distance[0] meters to the north, then distance[1] meters to the west, distance[2] meters to the south, distance[3] meters to the east, and so on. In other words, after each move, your direction changes counter-clockwise.

Return true if your path crosses itself, and false if it does not.",['math'],Hard,181,400,87725,25264,[],"[('java', 10), ('simple', 6), ('python', 4), ('easy-understanding', 3), ('python 3', 2), ('python3', 2), ('short', 2), ('solution', 2), ('0ms', 1), ('array', 1), ('ascii-art', 1), ('best-submission', 1), ('c++', 1), ('code', 1), ('complex number', 1), ('concise-solution', 1), ('constant-space', 1), ('cpp', 1), ('crossing', 1), ('easiest', 1), ('easy-understand', 1), ('fast-solution', 1), ('illustration', 1), ('improve', 1), ('javascript', 1), ('javascript solution', 1), ('math', 1), ('one-pass', 1), ('self', 1), ('solution-sharing-cpp', 1), ('solution-sharing-python', 1), ('three-patterns', 1)]"
334,Increasing Triplet Subsequence,https://leetcode.com/problems/increasing-triplet-subsequence,"Given an integer array nums, return true if there exists a triple of indices (i, j, k) such that i < j < k and nums[i] < nums[j] < nums[k]. If no such indices exists, return false.",[],Medium,2420,164,491224,200981,"[""Longest Increasing Subsequence""]","[('java', 32), ('cpp', 31), ('c++', 26), ('python', 19), ('javascript', 15), ('python 3', 14), ('constant space', 8), ('constant-space', 7), ('dynamic-programming', 7), ('linear time', 6), ('simple', 6), ('binary-search', 5), ('easy-understand', 5), ('golang', 5), ('java-solution', 5), ('two-pointers', 5), ('constant memory', 4), ('cpp solution', 4), ('dynamic programming', 4), ('easy', 4), ('easy-to-understand', 4), ('easy-understanding', 4), ('accepted', 3), ('dp', 3), ('explained', 3), ('go-solution', 3), ('lis', 3), ('short', 3), ('simple clear c++ solution', 3), ('solution', 3), ('100 speed', 2), ('c#', 2), ('c++ solution', 2), ('cpp easy', 2), ('easy-undestand', 2), ('explained solution', 2), ('explanation of logic', 2), ('golang-solution', 2), ('greedy', 2), ('java ac solution', 2), ('linear', 2), ('linear memory', 2), ('linear-time', 2), ('o-n', 2), ('one-pass', 2), ('python3', 2), ('ruby', 2), ('short c++ code', 2), ('simple solution', 2), ('wrong-answer', 2), ('#example', 1), ('#explained', 1), ('#javascript', 1), ('auxillary space', 1), ('beats 100', 1), ('brute force', 1), ('bst', 1), ('bugs', 1), ('c', 1), ('c++11', 1), ('clean solution', 1), ('cpp-solution', 1), ('dynamicprogramming', 1), ('easiest', 1), ('explaination', 1), ('explanation', 1), ('fast', 1), ('fastest c++ solution', 1), ('follow up', 1), ('forward-backward-pass', 1), ('generic-solution', 1), ('go', 1), ('google', 1), ('graph', 1), ('if-else', 1), ('increasingtriplet', 1), ('interview', 1), ('leetcode', 1), ('linear timecomplexity', 1), ('linear-time-space', 1), ('min-max', 1), ('missing-test-case', 1), ('numericlimits', 1), ('optimal', 1), ('patience sorting', 1), ('patience-sort', 1), ('pointer', 1), ('scala', 1), ('sequence', 1), ('series', 1), ('simple-solution', 1), ('simplest', 1), ('single pass', 1), ('slow', 1), ('solution-sharing-cpp', 1), ('space-complexity', 1), ('stack', 1), ('straight-forward', 1), ('subsequences', 1), ('swift', 1), ('test-case', 1), ('time-complexity', 1), ('top down dp', 1), ('two variables', 1), ('two-different-solutions', 1), ('typescript', 1), ('video explaination', 1), ('video-explanation', 1), ('well-explained', 1), ('wrong-execution-result', 1)]"
332,Reconstruct Itinerary,https://leetcode.com/problems/reconstruct-itinerary,"You are given a list of airline tickets where tickets[i] = [fromi, toi] represent the departure and the arrival airports of one flight. Reconstruct the itinerary in order and return it.

All of the tickets belong to a man who departs from ""JFK"", thus, the itinerary must begin with ""JFK"". If there are multiple valid itineraries, you should return the itinerary that has the smallest lexical order when read as a single string.


	For example, the itinerary [""JFK"", ""LGA""] has a smaller lexical order than [""JFK"", ""LGB""].


You may assume all tickets form at least one valid itinerary. You must use all the tickets once and only once.","['depth-first-search', 'graph']",Medium,2676,1261,549277,210265,[],"[('dfs', 54), ('java', 32), ('python', 22), ('javascript', 19), ('backtracking', 18), ('cpp', 16), ('c++', 14), ('python 3', 14), ('graph', 13), ('priority queue', 7), ('topological-sort', 7), ('eulerian-path', 6), ('recursive', 6), ('stack', 6), ('c#', 5), ('easy-understanding', 5), ('eulerian path', 5), ('python3', 5), ('recursion', 5), ('short', 5), ('simple', 5), ('heapq', 4), ('iterative', 4), ('map', 4), ('bfs', 3), ('depth first search', 3), ('dfs recursive', 3), ('dfs simple solution', 3), ('dfs solution', 3), ('easy', 3), ('easy-undestand', 3), ('golang', 3), ('greedy', 3), ('js', 3), ('priority-queue', 3), ('stacks', 3), ('test-case', 3), ('video', 3), ('dfs-iterative', 2), ('hashmap', 2), ('itinerary', 2), ('java-solution', 2), ('min heap', 2), ('priorityqueue', 2), ('simple solution', 2), ('solution-sharing-cpp', 2), ('swift', 2), ('wrong-answer', 2), ('youtube', 2), ('160ms', 1), ('3ways', 1), ('adjacency list', 1), ('adjacency matrix', 1), ('algorithms', 1), ('amazon', 1), ('back tracking', 1), ('backtracing', 1), ('beginner friendly', 1), ('best', 1), ('best explaination', 1), ('bug', 1), ('c# solutions', 1), ('c++ easy to understand', 1), ('c++ solution', 1), ('c++ solution simple', 1), ('comments-added', 1), ('cpp doubt', 1), ('cpp solution', 1), ('depth-first search', 1), ('depth-first-search', 1), ('description-disambiguation', 1), ('detailed explanation', 1), ('dfs-recursive', 1), ('dfs-topdown', 1), ('easy to read', 1), ('easy to understand', 1), ('easy-to-understand', 1), ('easy-understand', 1), ('elegant', 1), ('es6', 1), ('euler-walk', 1), ('eulierian', 1), ('explained', 1), ('exponential searches', 1), ('faceebook', 1), ('fast', 1), ('fastest', 1), ('golang-solution', 1), ('hash table', 1), ('heap', 1), ('heirholzer algo', 1), ('icomparer', 1), ('interview question', 1), ('invalid testcase', 1), ('javascrip', 1), ('javascript solution', 1), ('kotlinvim', 1), ('linked-list', 1), ('linkedlist', 1), ('multimap', 1), ('multiset', 1), ('php', 1), ('post-order-traversal', 1), ('python deque', 1), ('query', 1), ('question-not-clear', 1), ('reconstruct', 1), ('recurision', 1), ('ru', 1), ('ruby', 1), ('rust', 1), ('sde - 2020', 1), ('shared-answer', 1), ('simple clear c++ solution', 1), ('simple-solution', 1), ('solution', 1), ('sorting', 1), ('space', 1), ('stack-based', 1), ('stars move the article up', 1), ('swif', 1), ('testcase-wrong', 1), ('time', 1), ('topological soert', 1), ('topolotical-sort', 1), ('visualization', 1), ('well-commented', 1), ('werfree', 1), ('wrong-test-cases', 1)]"
331,Verify Preorder Serialization of a Binary Tree,https://leetcode.com/problems/verify-preorder-serialization-of-a-binary-tree,"One way to serialize a binary tree is to use preorder traversal. When we encounter a non-null node, we record the node's value. If it is a null node, we record using a sentinel value such as '#'.

For example, the above binary tree can be serialized to the string ""9,3,4,#,#,1,#,#,2,#,6,#,#"", where '#' represents a null node.

Given a string of comma-separated values preorder, return true if it is a correct preorder traversal serialization of a binary tree.

It is guaranteed that each comma-separated value in the string must be either an integer or a character '#' representing null pointer.

You may assume that the input format is always valid.


	For example, it could never contain two consecutive commas, such as ""1,,3"".",['stack'],Medium,951,57,194503,80107,[],"[('java', 22), ('cpp', 20), ('python', 13), ('stack', 9), ('c++', 6), ('easy-understand', 6), ('binary-tree', 5), ('javascript', 4), ('python 3', 4), ('recursive', 4), ('short', 4), ('accepted', 3), ('c#', 3), ('easy-understanding', 3), ('recursion', 3), ('regex', 3), ('serialization', 3), ('solution', 3), ('stacks', 3), ('best-submission', 2), ('dfs', 2), ('golang', 2), ('preorder-traversal', 2), ('queue', 2), ('split', 2), ('swift', 2), ('testcase-wrong', 2), ('well-explained', 2), ('0ms', 1), ('100 faster runtime', 1), ('algorithms', 1), ('binarytree', 1), ('bug', 1), ('bug-test-case', 1), ('clean code', 1), ('coding-style', 1), ('combinators', 1), ('degree', 1), ('dfs recursive', 1), ('easiest', 1), ('easiest solution', 1), ('easytounderstand', 1), ('fast', 1), ('improve', 1), ('iterative', 1), ('iterative solution', 1), ('java-solution', 1), ('linear time', 1), ('non-recursive', 1), ('parser', 1), ('pre-order', 1), ('proof', 1), ('pyhton', 1), ('python3', 1), ('question', 1), ('rajat', 1), ('share-code', 1), ('share-solution', 1), ('simple', 1), ('slow', 1), ('solution-sharing-cpp', 1), ('solution-sharing-python', 1), ('stringbuilder', 1), ('stringstream', 1), ('tag', 1), ('test-case', 1), ('well-commented', 1)]"
330,Patching Array,https://leetcode.com/problems/patching-array,"Given a sorted integer array nums and an integer n, add/patch elements to the array such that any number in the range [1, n] inclusive can be formed by the sum of some elements in the array.

Return the minimum number of patches required.",['greedy'],Hard,635,84,112720,39606,"[""Maximum Number of Consecutive Values You Can Make""]","[('python', 10), ('cpp', 4), ('java', 4), ('short', 3), ('javascript', 2), ('array', 1), ('best-submission', 1), ('c#', 1), ('c++', 1), ('cpp solution', 1), ('different-oj-local', 1), ('easy sloution', 1), ('failed', 1), ('greedy', 1), ('interview', 1), ('iterative', 1), ('java-solution', 1), ('prefix sum', 1), ('simple', 1), ('solution-sharing-cpp', 1), ('solution-sharing-python', 1), ('well-explained', 1)]"
329,Longest Increasing Path in a Matrix,https://leetcode.com/problems/longest-increasing-path-in-a-matrix,"Given an m x n integers matrix, return the length of the longest increasing path in matrix.

From each cell, you can either move in four directions: left, right, up, or down. You may not move diagonally or move outside the boundary (i.e., wrap-around is not allowed).","['depth-first-search', 'topological-sort', 'memoization']",Hard,3235,57,481210,223641,[],"[('dfs', 87), ('memoization', 63), ('java', 47), ('dynamic programming', 39), ('c++', 38), ('python', 35), ('dp', 33), ('cpp', 31), ('dynamic-programming', 30), ('javascript', 17), ('recursion', 13), ('python 3', 10), ('bfs', 8), ('c#', 8), ('dfs simple solution', 8), ('easy', 8), ('java-solution', 6), ('python3', 6), ('depth first search', 5), ('depth-first-search', 5), ('golang', 5), ('comments-added', 4), ('cpp solution', 4), ('easy-to-understand', 4), ('easy-understanding', 4), ('graph', 4), ('matrix', 4), ('recursive', 4), ('short', 4), ('simple', 4), ('c++ code', 3), ('dfs-topdown', 3), ('easy-understand', 3), ('golang-solution', 3), ('solution', 3), ('swift', 3), ('topological-sort', 3), ('backtracking', 2), ('clean code', 2), ('dfs with memo', 2), ('dp-techqique', 2), ('easy-undestand', 2), ('explained', 2), ('explanation of logic', 2), ('fast', 2), ('fast and simple', 2), ('go-solution', 2), ('improve', 2), ('kotlin', 2), ('longest-increasing-path-in-a-m', 2), ('memorization', 2), ('memoziation', 2), ('rust', 2), ('solution-sharing-cpp', 2), ('time-limit-exceeded', 2), ('#dynamic programming', 1), ('#memoization', 1), ('accepted', 1), ('awesome samriddhi', 1), ('backtrack', 1), ('beating-100-submissions', 1), ('beginner friendly', 1), ('best-submission', 1), ('bfs-java', 1), ('bottom up approach', 1), ('c', 1), ('c++ recursive solution', 1), ('cache', 1), ('commented', 1), ('commetend', 1), ('complex number', 1), ('concise-solution', 1), ('confused', 1), ('construction', 1), ('cpp easy', 1), ('cpp with explanation', 1), ('csharp', 1), ('dfs solution', 1), ('dfs with dp', 1), ('dfs-memo', 1), ('dfs-non-recursive', 1), ('dfs-recursive', 1), ('different-oj-local', 1), ('easiest', 1), ('easytounderstand', 1), ('extended-question', 1), ('fastboi', 1), ('fastest', 1), ('follow-up', 1), ('full detailed explanation', 1), ('greedy', 1), ('help', 1), ('help me', 1), ('increasing-order-search', 1), ('increasingpathmatrix', 1), ('intuitive', 1), ('iterative', 1), ('java ac solution', 1), ('javasccript', 1), ('kahns algorithm', 1), ('kotlinvim', 1), ('longest-increasing-sequence-2d', 1), ('map', 1), ('math', 1), ('memo', 1), ('memoized', 1), ('memory-search', 1), ('memos', 1), ('path', 1), ('paths', 1), ('question', 1), ('questions', 1), ('recrusive', 1), ('recurision', 1), ('recursive solution', 1), ('ritik', 1), ('ruby', 1), ('scala', 1), ('short code', 1), ('simple clear c++ solution', 1), ('simple-solution', 1), ('simplest', 1), ('single pass', 1), ('sol go brr', 1), ('sort', 1), ('sorting', 1), ('space', 1), ('speed', 1), ('time', 1), ('time limit exceeded', 1), ('top down', 1), ('top down dp', 1), ('topological', 1), ('treeset', 1), ('updowndota', 1), ('video-explanation', 1), ('well explained', 1), ('well-explained', 1), ('without dfs', 1), ('zea7ot', 1)]"
328,Odd Even Linked List,https://leetcode.com/problems/odd-even-linked-list,"Given the head of a singly linked list, group all the nodes with odd indices together followed by the nodes with even indices, and return the reordered list.

The first node is considered odd, and the second node is even, and so on.

Note that the relative order inside both the even and odd groups should remain as it was in the input.",['linked-list'],Medium,3054,341,646708,370876,"[""Split Linked List in Parts""]","[('java', 73), ('python', 45), ('cpp', 38), ('linked-list', 33), ('c++', 30), ('javascript', 24), ('python 3', 24), ('java-solution', 19), ('python3', 16), ('easy-understand', 13), ('solution', 13), ('linkedlists', 11), ('swift', 10), ('cpp solution', 9), ('easy-undestand', 8), ('simple', 8), ('linked list', 7), ('cpp easy', 6), ('easy-understanding', 6), ('in-place', 6), ('iterative', 6), ('golang', 5), ('javascript solution', 5), ('c', 4), ('c#', 4), ('easy', 4), ('even', 4), ('golang-solution', 4), ('linkedlist', 4), ('memory-limit-exceeded', 4), ('odd', 4), ('short', 4), ('c++ code', 3), ('c++ iterative sol', 3), ('constant-space', 3), ('easy-to-understand', 3), ('pointer', 3), ('solution-sharing-cpp', 3), ('two pointers', 3), ('two-pointers', 3), ('#merge', 2), ('#oddevenlist', 2), ('#twolists', 2), ('1ms', 2), ('accepted', 2), ('c++14', 2), ('comments', 2), ('csharp', 2), ('easy code', 2), ('in-place operation', 2), ('js', 2), ('kotlin', 2), ('linear time', 2), ('linked lists', 2), ('linked-lists', 2), ('list', 2), ('one pass', 2), ('scala', 2), ('swift5', 2), ('time-limit-exceeded', 2), ('two-pointer', 2), ('#javascript', 1), ('0ms', 1), ('100', 1), ('2 pointer', 1), ('328', 1), ('algorithms', 1), ('answer', 1), ('beats 98 pc', 1), ('best-submission', 1), ('bitwise', 1), ('c++ easy', 1), ('c++ easy to understand', 1), ('c++ solution', 1), ('c++11', 1), ('clear', 1), ('constant space', 1), ('correct', 1), ('count', 1), ('cpp c++', 1), ('cpp doubt', 1), ('detailed explanation', 1), ('different approach', 1), ('double-pointers', 1), ('dummy-node', 1), ('easy understand', 1), ('easy understanding', 1), ('easy-solition', 1), ('easytounderstand', 1), ('esay-understand', 1), ('even odd', 1), ('explaination', 1), ('explained', 1), ('explanation', 1), ('extended-question', 1), ('fast', 1), ('fast and simple', 1), ('fast-solution', 1), ('faster than 91', 1), ('fasterthan100', 1), ('fastest', 1), ('fun', 1), ('go lang', 1), ('go-solution', 1), ('hare and turtle', 1), ('hare-and-turtle', 1), ('illustrated', 1), ('illustration', 1), ('image', 1), ('improve', 1), ('incorrect-test-case', 1), ('intuitive', 1), ('intution', 1), ('iteration', 1), ('iteratively', 1), ('java ac solution', 1), ('java solution', 1), ('kotlinvim', 1), ('linear', 1), ('linear memory', 1), ('linear space', 1), ('linear-time', 1), ('linked', 1), ('memory-limited-exceeded', 1), ('no extra space', 1), ('odd even', 1), ('odd-even', 1), ('one pass solution', 1), ('one-pass', 1), ('optimal', 1), ('pattern', 1), ('pointer-to-pointer', 1), ('pointers', 1), ('python bivector', 1), ('pythonpython3', 1), ('recurision', 1), ('recursion', 1), ('recursive', 1), ('recursively', 1), ('run-time-error', 1), ('rune-time-error', 1), ('runtime-error', 1), ('rust', 1), ('sentinel', 1), ('sentinel node', 1), ('simple clear c++ solution', 1), ('simple solution', 1), ('simple-solution', 1), ('simplesolution', 1), ('simplesweet', 1), ('single pass', 1), ('solution-share', 1), ('solution-sharing-java', 1), ('space', 1), ('space-complexity', 1), ('stack-based', 1), ('tail-pointer', 1), ('tail-recursion', 1), ('tailrec', 1), ('testcase-wrong', 1), ('three pointer', 1), ('time', 1), ('time-complexity', 1), ('tortoise and hare', 1), ('tortoise and the hare', 1), ('tortoise-and-hare-algo', 1), ('tortoise-hare', 1), ('traversing', 1), ('two pointer approach', 1), ('twopointers', 1), ('video explaination', 1), ('viewtounderstand', 1), ('wrong', 1), ('zero space', 1)]"
327,Count of Range Sum,https://leetcode.com/problems/count-of-range-sum,"Given an integer array nums and two integers lower and upper, return the number of range sums that lie in [lower, upper] inclusive.

Range sum S(i, j) is defined as the sum of the elements in nums between indices i and j inclusive, where i <= j.","['binary-search', 'divide-and-conquer', 'sort', 'binary-indexed-tree', 'segment-tree']",Hard,1040,120,138209,50245,"[""Count of Smaller Numbers After Self"", ""Reverse Pairs""]","[('python', 10), ('cpp', 9), ('java', 9), ('binary-indexed-tree', 5), ('bst', 5), ('segment-tree', 4), ('divideconquer', 3), ('fenwick-tree', 3), ('merge-sort', 3), ('python 3', 3), ('accepted', 2), ('binary-search', 2), ('c++', 2), ('time-limit-exceeded', 2), ('array', 1), ('binary index tree', 1), ('binary-search-tree', 1), ('bit tree', 1), ('c#', 1), ('clean code', 1), ('code', 1), ('concise-solution', 1), ('data-structure', 1), ('fast', 1), ('fast and simple', 1), ('golang', 1), ('hashmap', 1), ('java-solution', 1), ('less memory', 1), ('merge sort', 1), ('nlogn', 1), ('nlogn time', 1), ('prefix sum', 1), ('prefix-array', 1), ('python3', 1), ('red-black-tree', 1), ('short', 1), ('simpleentry', 1), ('simpler', 1), ('size', 1), ('solution', 1), ('solution-sharing-cpp', 1), ('sort', 1), ('treemap', 1)]"
326,Power of Three,https://leetcode.com/problems/power-of-three,"Given an integer n, return true if it is a power of three. Otherwise, return false.

An integer n is a power of three, if there exists an integer x such that n == 3x.",['math'],Easy,162,25,818260,347345,"[""Power of Two"", ""Power of Four"", ""Check if Number is a Sum of Powers of Three""]","[('java', 33), ('c++', 31), ('python', 27), ('cpp', 22), ('javascript', 20), ('solution', 16), ('math', 15), ('python3', 12), ('python 3', 11), ('short', 9), ('recursion', 8), ('java-solution', 7), ('cpp solution', 6), ('c#', 5), ('easy-understanding', 5), ('golang', 5), ('ruby', 5), ('clean code', 4), ('easy', 4), ('simple', 4), ('c', 3), ('easy-undestand', 3), ('golang-solution', 3), ('iteration', 3), ('iterative', 3), ('js', 3), ('power of three', 3), ('recursive', 3), ('constant space', 2), ('constant time', 2), ('constant-time', 2), ('dror mor', 2), ('easy-to-understand', 2), ('explanation', 2), ('go', 2), ('log', 2), ('mathematical', 2), ('one-liner', 2), ('python2', 2), ('scala', 2), ('swift', 2), ('#python', 1), ('#recursion', 1), ('0ms', 1), ('1 line', 1), ('an7one', 1), ('awesome samriddhi', 1), ('bit-manipulation', 1), ('c++ solution', 1), ('c++11', 1), ('clean', 1), ('clean-code', 1), ('constant-space', 1), ('cpp easy', 1), ('dictonary', 1), ('doubt', 1), ('easiest', 1), ('easy understanding', 1), ('explained', 1), ('explanation with logic', 1), ('fast', 1), ('fast-solution', 1), ('fun', 1), ('general', 1), ('general solution', 1), ('go-solution', 1), ('hashset', 1), ('iteration vs recursion', 1), ('iterative vs recursive', 1), ('javascrip', 1), ('javascript solution', 1), ('logarithm', 1), ('logarithmic time', 1), ('logarithmic-time', 1), ('logarithms', 1), ('logic explained', 1), ('logn', 1), ('logrithm', 1), ('loops', 1), ('math solution', 1), ('math-solution', 1), ('math.log', 1), ('maths', 1), ('non-recursive', 1), ('one line', 1), ('oneline', 1), ('optimisation', 1), ('performance', 1), ('php', 1), ('project-euler', 1), ('recursion vs iteration', 1), ('recursive vs iterative', 1), ('ritik', 1), ('rust', 1), ('seven-different-solutions', 1), ('solution-sharing-c', 1), ('solution-sharing-cpp', 1), ('stl', 1), ('swift5', 1), ('testcase-wrong', 1), ('time-limit-exceeded', 1), ('typescript', 1), ('vague', 1), ('well-commented', 1), ('while loop', 1), ('works-on-my-machine', 1)]"
324,Wiggle Sort II,https://leetcode.com/problems/wiggle-sort-ii,"Given an integer array nums, reorder it such that nums[0] < nums[1] > nums[2] < nums[3]....

You may assume the input array always has a valid answer.",['sort'],Medium,1390,669,319582,98737,"[""Sort Colors"", ""Kth Largest Element in an Array"", ""Wiggle Sort""]","[('java', 14), ('cpp', 13), ('python', 8), ('c++', 6), ('easy-understand', 4), ('javascript', 4), ('test-case', 4), ('easy-understanding', 3), ('explanation', 3), ('missing-test-case', 3), ('short', 3), ('swift', 3), ('c#', 2), ('golang', 2), ('quickselect', 2), ('sort', 2), ('sorting', 2), ('technique', 2), ('testcase', 2), ('wrong-answer', 2), ('3-partition', 1), ('3-way', 1), ('binary-search', 1), ('c++11', 1), ('compile-error', 1), ('count sort', 1), ('custom-testcase', 1), ('easy', 1), ('easy-to-understand', 1), ('easy-undestand', 1), ('explanations', 1), ('fast', 1), ('fast and simple', 1), ('fidato', 1), ('go', 1), ('go-solution', 1), ('golang-solution', 1), ('help needed', 1), ('iterator', 1), ('java-solution', 1), ('partition', 1), ('proof', 1), ('python 3', 1), ('python3', 1), ('question', 1), ('quick-select', 1), ('quicksort', 1), ('random', 1), ('run-time-error', 1), ('runtime-error', 1), ('simple', 1), ('simplest', 1), ('solution', 1), ('solution-sharing-python', 1), ('sorted', 1), ('submit-fail', 1), ('swiftsolution', 1), ('test-case-validation', 1), ('test-cases', 1), ('testcase error', 1), ('testcase-wrong', 1), ('tricky', 1), ('well-commented', 1), ('well-explained', 1), ('wigglesortii', 1), ('works-on-my-machine', 1), ('wrong answer', 1), ('wrong output', 1), ('xjq', 1)]"
322,Coin Change,https://leetcode.com/problems/coin-change,"You are given an integer array coins representing coins of different denominations and an integer amount representing a total amount of money.

Return the fewest number of coins that you need to make up that amount. If that amount of money cannot be made up by any combination of the coins, return -1.

You may assume that you have an infinite number of each kind of coin.",['dynamic-programming'],Medium,6766,193,1672857,632827,"[""Minimum Cost For Tickets""]","[('dynamic programming', 142), ('python', 76), ('java', 65), ('c++', 62), ('dp', 58), ('dynamic-programming', 55), ('cpp', 50), ('python 3', 38), ('javascript', 25), ('memoization', 22), ('bfs', 19), ('java-solution', 15), ('recursion', 15), ('golang', 13), ('top down dp', 13), ('coin-change', 12), ('python3', 12), ('easy-understanding', 10), ('dfs', 9), ('bottom up', 8), ('easy-to-understand', 8), ('c#', 7), ('go', 7), ('easy-understand', 6), ('knapsack', 6), ('rust', 6), ('top-down dp', 6), ('bottoms-up', 5), ('recusion', 5), ('simple', 5), ('swift', 5), ('bottom-up-algorithm', 4), ('breadth first search', 4), ('clean', 4), ('coin change', 4), ('cpp solution', 4), ('dp-programming', 4), ('easy-undestand', 4), ('explained', 4), ('go-solution', 4), ('golang-solution', 4), ('greedy', 4), ('recursive', 4), ('ruby', 4), ('short', 4), ('tabulation', 4), ('top-down', 4), ('unbounded knapsack', 4), ('bug', 3), ('coinchange', 3), ('commented', 3), ('csharp', 3), ('dp-techqique', 3), ('explanation', 3), ('iterative', 3), ('java solution', 3), ('pruning', 3), ('python2', 3), ('solution', 3), ('#dynamic-programming', 2), ('backtracking', 2), ('beginner friendly', 2), ('best-solution', 2), ('bottom up dp', 2), ('bottom-up', 2), ('c', 2), ('c++ code', 2), ('clean code with comments', 2), ('coin-change 2', 2), ('comments-added', 2), ('dp bottom up', 2), ('dyanmic programming', 2), ('fast', 2), ('faster', 2), ('fastest', 2), ('iteration', 2), ('memoziation', 2), ('recursion memoization', 2), ('recursive dp', 2), ('recursively', 2), ('self explanatory', 2), ('simple clear c++ solution', 2), ('test-case', 2), ('typescript', 2), ('understandable', 2), ('upvote', 2), ('wrong-answer', 2), ('#322', 1), ('#backtracking', 1), ('#bottomup', 1), ('#bruteforce', 1), ('#java #countnsay', 1), ('#javascript', 1), ('#topdown', 1), ('1-d', 1), ('100', 1), ('100 faster', 1), ('100 speed', 1), ('10liner', 1), ('1d-dp', 1), ('2d dynamic programming', 1), ('90+faster', 1), ('accepted', 1), ('amazon', 1), ('amazon interview', 1), ('awesome samriddhi', 1), ('backpack', 1), ('backtrack', 1), ('bfs python', 1), ('bidirectional', 1), ('bidirectional bfs', 1), ('bottom-up dp', 1), ('bottomup', 1), ('branch-and-bound', 1), ('breadth-first-search', 1), ('bug in leetcode', 1), ('bug report', 1), ('bug-test-case', 1), ('c++ solution', 1), ('c++11', 1), ('c++17', 1), ('clean code', 1), ('coin change problem', 1), ('commentary', 1), ('complexity-analysis', 1), ('cp', 1), ('cpp clear', 1), ('depth first search', 1), ('dfs with early stopping', 1), ('dfs-topdown', 1), ('different-oj-runcode', 1), ('discussion', 1), ('dp c++', 1), ('dp python', 1), ('dp top down', 1), ('dynamic programmin', 1), ('dynaminc programming', 1), ('easiest', 1), ('easy to understand', 1), ('easy understanding', 1), ('explanation of logic', 1), ('fast and simple', 1), ('fast-solution', 1), ('faster than 98', 1), ('give stars and subscribe', 1), ('greedy algorithm', 1), ('greedy approach', 1), ('hashmap', 1), ('hidden assumption', 1), ('improve', 1), ('intutive', 1), ('iterative dp', 1), ('java ac solution', 1), ('javascript recursive', 1), ('javascript solution', 1), ('js', 1), ('kotlin', 1), ('kotlinvim', 1), ('level-order-traversal', 1), ('linear memory', 1), ('linear time', 1), ('logic', 1), ('minimum coin change', 1), ('missing-test-case', 1), ('mrmagician', 1), ('mystery', 1), ('need-help', 1), ('optimal', 1), ('optimized', 1), ('optimized solution', 1), ('picture explanation', 1), ('pure-c', 1), ('pyhton', 1), ('python3.8', 1), ('pyton', 1), ('raviinroorkee', 1), ('recursive solution', 1), ('recursive-descent', 1), ('recusive', 1), ('reusable', 1), ('ritik', 1), ('run-time-error', 1), ('runtime-error', 1), ('scala', 1), ('share-solution', 1), ('simple python accepted', 1), ('simple solution', 1), ('sort', 1), ('sorted array', 1), ('space-complexity', 1), ('space-compressed', 1), ('suggestion', 1), ('swift5', 1), ('tabular', 1), ('testcase-wrong', 1), ('time complexity', 1), ('time-complexity-o', 1), ('time-limit-exceeded', 1), ('time-limit-exceeded-python', 1), ('timelimit', 1), ('timeout', 1), ('ting', 1), ('topdown', 1), ('ultra simple', 1), ('vector', 1), ('video-explanation', 1), ('with without dp', 1), ('xjq', 1)]"
321,Create Maximum Number,https://leetcode.com/problems/create-maximum-number,"You are given two integer arrays nums1 and nums2 of lengths m and n respectively. nums1 and nums2 represent the digits of two numbers. You are also given an integer k.

Create the maximum number of length k <= m + n from digits of the two numbers. The relative order of the digits from the same array must be preserved.

Return an array of the k digits representing the answer.","['dynamic-programming', 'greedy']",Hard,947,271,158753,43871,"[""Remove K Digits"", ""Maximum Swap""]","[('cpp', 10), ('greedy', 9), ('java', 7), ('python', 6), ('dynamic-programming', 5), ('c#', 3), ('solution', 3), ('accepted', 2), ('dynamic programming', 2), ('easy-understand', 2), ('fast', 2), ('java-solution', 2), ('stacks', 2), ('tle', 2), ('very-intuitive', 2), ('well-commented', 2), ('best-submission', 1), ('c++', 1), ('c++ binary-search', 1), ('clarification', 1), ('createmaximumnumber', 1), ('def maxnumberself', 1), ('dp', 1), ('easy-to-understand', 1), ('fastest', 1), ('greedy algorithm', 1), ('intuitive', 1), ('lexicographic-merge', 1), ('lexicographical order', 1), ('merge sort', 1), ('pointers', 1), ('python 3', 1), ('requirements', 1), ('ruby', 1), ('short', 1), ('simplest', 1), ('solution-sharing-cpp', 1), ('suffix-array', 1), ('testcase-wrong', 1), ('vague', 1), ('works-on-my-machine', 1), ('wrong', 1), ('xjq', 1)]"
319,Bulb Switcher,https://leetcode.com/problems/bulb-switcher,"There are n bulbs that are initially off. You first turn on all the bulbs, then you turn off every second bulb.

On the third round, you toggle every third bulb (turning on if it's off or turning off if it's on). For the ith round, you toggle every i bulb. For the nth round, you only toggle the last bulb.

Return the number of bulbs that are on after n rounds.","['math', 'brainteaser']",Medium,622,1232,202661,92159,"[""Bulb Switcher II"", ""Minimum Number of K Consecutive Bit Flips"", ""Bulb Switcher III""]","[('math', 17), ('cpp', 10), ('java', 10), ('python', 7), ('easy-to-understand', 6), ('python3', 6), ('c++', 5), ('java-solution', 5), ('solution', 4), ('c++ code', 3), ('easy-understanding', 3), ('javascript', 3), ('short', 3), ('easy', 2), ('explained', 2), ('explanation of logic', 2), ('java ac solution', 2), ('python 3', 2), ('swift', 2), ('0ms', 1), ('100 speed', 1), ('best-submission', 1), ('binary-search', 1), ('bulb', 1), ('c', 1), ('constant memory', 1), ('constant-space', 1), ('cpp easy', 1), ('cpp solution', 1), ('dummy-friendly', 1), ('east to understand', 1), ('easy solution', 1), ('easy-undestand', 1), ('functional-programming', 1), ('java11', 1), ('javscript', 1), ('language-independent', 1), ('math solution', 1), ('math-solution', 1), ('mathematical', 1), ('maths', 1), ('newtons-method', 1), ('one-liner', 1), ('optimized', 1), ('perfect squares', 1), ('run-time-error', 1), ('simple', 1), ('simple solution', 1), ('simplest', 1), ('solution-sharing-cpp', 1), ('step by step', 1), ('swift5', 1), ('switcher', 1), ('test-case', 1), ('time-complexity', 1), ('time-limit-exceeded', 1), ('visualization', 1), ('well-explained', 1)]"
318,Maximum Product of Word Lengths,https://leetcode.com/problems/maximum-product-of-word-lengths,"Given a string array words, return the maximum value of length(word[i]) * length(word[j]) where the two words do not share common letters. If no such two words exist, return 0.",['bit-manipulation'],Medium,1025,81,206557,108571,[],"[('cpp', 17), ('java', 14), ('bit-manipulation', 13), ('python', 13), ('bit manipulation', 9), ('c++', 8), ('javascript', 7), ('bitmask', 4), ('brute force', 3), ('easy-understand', 3), ('hashmap', 3), ('short', 3), ('solution', 3), ('swift', 3), ('time-limit-exceeded', 3), ('100 speed', 2), ('binary-search', 2), ('c#', 2), ('dictionary', 2), ('easiest', 2), ('easy-to-understand', 2), ('golang', 2), ('intuitive', 2), ('js', 2), ('performance', 2), ('python 3', 2), ('python3', 2), ('ruby', 2), ('tle', 2), ('100 memory', 1), ('array', 1), ('best-submission', 1), ('bit-operation', 1), ('bitmap', 1), ('bitset', 1), ('bitwise', 1), ('bitwise operation', 1), ('bug-test-case', 1), ('c++ code', 1), ('clean code', 1), ('concise-solution', 1), ('dynamic-programming', 1), ('easy', 1), ('easy understanding', 1), ('easy-undestand', 1), ('fast', 1), ('fast-solution', 1), ('fuck noobs', 1), ('go-solution', 1), ('golang-solution', 1), ('help', 1), ('iterative', 1), ('java ac solution', 1), ('java-solution', 1), ('js javascript', 1), ('map', 1), ('mask', 1), ('max-product', 1), ('python2', 1), ('run-time-error', 1), ('runtime', 1), ('sets', 1), ('simple solution', 1), ('simple-solution', 1), ('solution-explaining', 1), ('solution-share', 1), ('solution-sharing-cpp', 1), ('sort', 1), ('speed', 1), ('two-lines', 1), ('well-explained', 1), ('xinerd', 1)]"
316,Remove Duplicate Letters,https://leetcode.com/problems/remove-duplicate-letters,"Given a string s, remove duplicate letters so that every letter appears once and only once. You must make sure your result is the smallest in lexicographical order among all possible results.

Note: This question is the same as 1081: https://leetcode.com/problems/smallest-subsequence-of-distinct-characters/","['string', 'stack', 'greedy']",Medium,2483,184,303871,119958,[],"[('java', 27), ('stack', 26), ('greedy', 15), ('cpp', 14), ('python 3', 14), ('python', 13), ('c++', 10), ('javascript', 9), ('greedy approach', 8), ('explained', 6), ('easy-understanding', 5), ('stacks', 5), ('easy-understand', 4), ('golang', 4), ('monotonic stack', 4), ('accepted', 3), ('easytounderstand', 3), ('explained solution', 3), ('fastest java slution', 3), ('python3', 3), ('short', 3), ('string', 3), ('0ms', 2), ('100 speed', 2), ('beats 100', 2), ('best-submission', 2), ('cpp solution', 2), ('deque', 2), ('easy-to-understand', 2), ('easy-understsand', 2), ('explaination', 2), ('explanation with code', 2), ('fast', 2), ('hash table', 2), ('java-solution', 2), ('javascript solution', 2), ('lexicographical order', 2), ('linear time', 2), ('linear-time', 2), ('monotone stack', 2), ('recurision', 2), ('ruby', 2), ('stack-based', 2), ('stringbuilder', 2), ('wrong-answer', 2), ('#100percentfaster', 1), ('100 space', 1), ('4ms', 1), ('alphabetical order', 1), ('beginner friendly', 1), ('best-solution', 1), ('c', 1), ('c programming', 1), ('c++ solution', 1), ('char compare', 1), ('constant space', 1), ('dictionary', 1), ('duplicates', 1), ('easy', 1), ('easy understand', 1), ('es6', 1), ('fastest', 1), ('functional programming', 1), ('go-solution', 1), ('golang-solution', 1), ('greedy algorithm', 1), ('hashmap', 1), ('intuitive', 1), ('iteration', 1), ('iterative', 1), ('js', 1), ('kotlin', 1), ('loop-invariant', 1), ('map', 1), ('monotonic-stack', 1), ('need-help', 1), ('optimized', 1), ('php', 1), ('pointers', 1), ('python2', 1), ('question need help', 1), ('queue', 1), ('remove-duplicate-letters', 1), ('rust', 1), ('scala', 1), ('set', 1), ('simple', 1), ('simplest', 1), ('solutioin', 1), ('solution', 1), ('stack javascript', 1), ('string-operation', 1), ('swift', 1), ('testcase-wrong', 1), ('treeset', 1), ('two', 1), ('two-solutions', 1), ('unorthodox-style', 1), ('video solution', 1), ('video-explanation', 1), ('well-commented', 1), ('without stack', 1), ('wrong-test-cases', 1), ('zea7ot', 1)]"
315,Count of Smaller Numbers After Self,https://leetcode.com/problems/count-of-smaller-numbers-after-self,You are given an integer array nums and you have to return a new counts array. The counts array has the property where counts[i] is the number of smaller elements to the right of nums[i].,"['binary-search', 'divide-and-conquer', 'sort', 'binary-indexed-tree', 'segment-tree']",Hard,3432,108,399141,169055,"[""Count of Range Sum"", ""Queue Reconstruction by Height"", ""Reverse Pairs"", ""How Many Numbers Are Smaller Than the Current Number""]","[('java', 43), ('python', 28), ('c++', 26), ('cpp', 25), ('bst', 23), ('binary-search', 22), ('python 3', 20), ('merge-sort', 16), ('segment-tree', 13), ('binary-indexed-tree', 12), ('binary search tree', 11), ('mergesort', 11), ('binary-search-tree', 10), ('fenwick-tree', 10), ('javascript', 10), ('merge sort', 10), ('python3', 8), ('binary search', 6), ('binary-index-tree', 6), ('segment tree', 6), ('binary index tree', 5), ('bisect', 5), ('c#', 5), ('simple', 5), ('solution', 5), ('binarysearch', 4), ('avl tree', 3), ('binary indexed tree', 3), ('coordinate compression', 3), ('cpp solution', 3), ('easy-understanding', 3), ('golang', 3), ('java-solution', 3), ('best-submission', 2), ('binary-tree', 2), ('bisection search', 2), ('bit', 2), ('c++ code', 2), ('clean', 2), ('cpp easy', 2), ('divideconquer', 2), ('easy', 2), ('easy-to-understand', 2), ('easy-understand', 2), ('easy-undestand', 2), ('explanation', 2), ('iterative', 2), ('java ac solution', 2), ('nlogn', 2), ('pbds', 2), ('recursion', 2), ('set', 2), ('simple solution', 2), ('solution-sharing-cpp', 2), ('sort', 2), ('sorting', 2), ('stl', 2), ('swift', 2), ('well-commented', 2), ('20ms', 1), ('24ms', 1), ('6line', 1), ('7 lines', 1), ('ac solution', 1), ('accepted', 1), ('array-sort', 1), ('balanced-bst', 1), ('beauty', 1), ('binary tree', 1), ('binarysearh', 1), ('bisect-python', 1), ('black-red', 1), ('c++ easy to understand', 1), ('c++11', 1), ('c++17', 1), ('cartesian-tree', 1), ('chinese', 1), ('clean code', 1), ('collections', 1), ('commented', 1), ('complexity analysis', 1), ('concise-solution', 1), ('count', 1), ('cpp doubt', 1), ('data-structure', 1), ('divid and conquer', 1), ('divide and conquer', 1), ('divide-and-conquer', 1), ('dividedconquer', 1), ('easy template', 1), ('easy-understsand', 1), ('easytounderstand', 1), ('explained', 1), ('fast and clear', 1), ('functional programming', 1), ('go', 1), ('go-solution', 1), ('golang-solution', 1), ('heap', 1), ('heapq', 1), ('help needed', 1), ('idea', 1), ('inplacemerge', 1), ('insertion sort', 1), ('inversion count', 1), ('js', 1), ('kotlin', 1), ('list', 1), ('lowerbound', 1), ('merge-k-sorted-lists', 1), ('merge-sort tree', 1), ('merge-sort-tree', 1), ('missing-test-case', 1), ('modular', 1), ('multiset', 1), ('not working', 1), ('object-oriented', 1), ('ordered sets', 1), ('policy', 1), ('policy-based structures', 1), ('python2', 1), ('pythonpython3', 1), ('quick sort', 1), ('rbtree', 1), ('red-black-tree', 1), ('reverse traversal', 1), ('scala', 1), ('search-insert-position', 1), ('self-balancing bst', 1), ('sets', 1), ('short', 1), ('shorter', 1), ('shortest', 1), ('simpe', 1), ('simple approach', 1), ('simple python solution', 1), ('simplest', 1), ('skiplist', 1), ('slow', 1), ('solution-share', 1), ('sorted', 1), ('sortedcontainers', 1), ('sorting-algorithms', 1), ('stack', 1), ('swiftsolution', 1), ('tree', 1), ('treeset', 1), ('trie', 1), ('tutorial', 1), ('two-different-solutions', 1), ('vector', 1), ('video', 1), ('xjq', 1), ('youtube', 1)]"
313,Super Ugly Number,https://leetcode.com/problems/super-ugly-number,"A super ugly number is a positive integer whose prime factors are in the array primes.

Given an integer n and an array of integers primes, return the nth super ugly number.

The nth super ugly number is guaranteed to fit in a 32-bit signed integer.","['math', 'heap']",Medium,847,167,187974,87285,"[""Ugly Number II""]","[('java', 21), ('cpp', 17), ('python', 12), ('heap', 9), ('dynamic-programming', 8), ('dynamic programming', 7), ('python 3', 6), ('c++', 5), ('time-limit-exceeded', 4), ('easy', 3), ('easy-understand', 3), ('heapq', 3), ('priority queue', 3), ('ruby', 3), ('solution', 3), ('cpp solution', 2), ('dp', 2), ('easy-to-understand', 2), ('fast and simple', 2), ('java-solution', 2), ('javascript', 2), ('min heap', 2), ('min-heap', 2), ('priority-queue', 2), ('python3', 2), ('set', 2), ('short', 2), ('ugly-number', 2), ('wrong-answer', 2), ('21ms', 1), ('accepted', 1), ('akku', 1), ('bisect', 1), ('c#', 1), ('commented', 1), ('comments-added', 1), ('cpp easy', 1), ('dp java', 1), ('easy-understanding', 1), ('explanation', 1), ('functional programming', 1), ('heaps algorithm', 1), ('help', 1), ('intuitive', 1), ('min priorityqueue', 1), ('performance', 1), ('priorityqueue', 1), ('sandeepkumar', 1), ('scala', 1), ('simple', 1), ('solution-share', 1), ('solution-sharing-cpp', 1), ('solution-sharing-python', 1), ('super ugly number', 1), ('testcase-wrong', 1), ('time-complexity', 1), ('tle', 1), ('well-explained', 1)]"
312,Burst Balloons,https://leetcode.com/problems/burst-balloons,"You are given n balloons, indexed from 0 to n - 1. Each balloon is painted with a number on it represented by an array nums. You are asked to burst all the balloons.

If you burst the ith balloon, you will get nums[i - 1] * nums[i] * nums[i + 1] coins. If i - 1 or i + 1 goes out of bounds of the array, then treat it as if there is a balloon with a 1 painted on it.

Return the maximum coins you can collect by bursting the balloons wisely.","['divide-and-conquer', 'dynamic-programming']",Hard,3548,108,248011,133873,"[""Minimum Cost to Merge Stones""]","[('dynamic programming', 39), ('dynamic-programming', 21), ('c++', 18), ('dp', 18), ('memoization', 18), ('cpp', 17), ('java', 17), ('java-solution', 8), ('python', 8), ('python 3', 6), ('javascript', 5), ('recursion', 5), ('bottom-up-algorithm', 4), ('c#', 4), ('dp python', 4), ('easy-understanding', 4), ('mcm', 4), ('python3', 4), ('dfs', 3), ('divide and conquer', 3), ('dp-techqique', 3), ('golang', 3), ('recursive', 3), ('backtracking', 2), ('cpp solution', 2), ('divide-and-conquer', 2), ('divideconquer', 2), ('easy', 2), ('explained', 2), ('javascript solution', 2), ('recursive solution', 2), ('recusion', 2), ('simple clear c++ solution', 2), ('topdown', 2), ('312', 1), ('awesome samriddhi', 1), ('burst balloons', 1), ('burstballoons', 1), ('c', 1), ('c++ dynamic programming', 1), ('c++ easy to understand', 1), ('clean code', 1), ('commented', 1), ('comments added', 1), ('commetend', 1), ('concise', 1), ('concise-solution', 1), ('correct', 1), ('cut-based dp', 1), ('diagram', 1), ('different-oj-runcode', 1), ('dive-and-conquer', 1), ('dp-table', 1), ('dyanmic programming', 1), ('dynammic programming', 1), ('easy to understand', 1), ('easy-to-understand', 1), ('easy-understand', 1), ('easy-undestand', 1), ('explanation', 1), ('explanation simple', 1), ('gap-method', 1), ('go-solution', 1), ('golang-solution', 1), ('help', 1), ('help me', 1), ('hsnu', 1), ('intuitive', 1), ('java ac solution', 1), ('java solution', 1), ('logical thinking', 1), ('mask', 1), ('matrix chain', 1), ('matrix chain mul.', 1), ('matrix-chain-dp', 1), ('matrix-multiplication', 1), ('matrixmultiplication', 1), ('mcm pattern', 1), ('memoisation', 1), ('memorized-dfs', 1), ('memoziation', 1), ('modern', 1), ('mountain0789', 1), ('on3', 1), ('optimization', 1), ('pythonic', 1), ('ritik', 1), ('ruby', 1), ('runtime-error', 1), ('scala', 1), ('short', 1), ('simple', 1), ('simpler', 1), ('simplest', 1), ('space complexity', 1), ('tabulation', 1), ('time complexity', 1), ('time-limit-exceeded', 1), ('tle', 1), ('top down', 1), ('top down dp', 1), ('top-down', 1), ('top-down dp', 1), ('typescript javascript', 1), ('video explanation', 1), ('video-explanation', 1), ('well-explained', 1), ('xjq', 1), ('youtube', 1)]"
310,Minimum Height Trees,https://leetcode.com/problems/minimum-height-trees,"A tree is an undirected graph in which any two vertices are connected by exactly one path. In other words, any connected graph without simple cycles is a tree.

Given a tree of n nodes labelled from 0 to n - 1, and an array of n - 1 edges where edges[i] = [ai, bi] indicates that there is an undirected edge between the two nodes ai and bi in the tree, you can choose any node of the tree as the root. When you select a node x as the root, the result tree has height h. Among all possible rooted trees, those with minimum height (i.e. min(h))  are called minimum height trees (MHTs).

Return a list of all MHTs' root labels. You can return the answer in any order.

The height of a rooted tree is the number of edges on the longest downward path between the root and a leaf.","['breadth-first-search', 'graph']",Medium,3072,135,384986,134492,"[""Course Schedule"", ""Course Schedule II""]","[('bfs', 30), ('java', 20), ('cpp', 16), ('python', 16), ('c++', 15), ('python 3', 14), ('dfs', 8), ('topological-sort', 7), ('graph', 6), ('javascript', 6), ('golang', 5), ('python3', 5), ('c#', 4), ('java-solution', 4), ('tree', 4), ('dynamic-programming', 3), ('explained', 3), ('cpp solution', 2), ('diameter', 2), ('dp', 2), ('dynamic programming', 2), ('easiest', 2), ('easytounderstand', 2), ('explanation', 2), ('graph theory', 2), ('java solution', 2), ('queue', 2), ('solution-sharing-cpp', 2), ('time-limit-exceeded', 2), ('video explanation', 2), ('#easytounderstand', 1), ('#map', 1), ('#simplecode', 1), ('#trees', 1), ('accepted', 1), ('beating-100-submission', 1), ('beating-100-submissions', 1), ('beginner friendly', 1), ('bfs simple solution', 1), ('breadth first search', 1), ('breath first search', 1), ('brute force', 1), ('center of tree', 1), ('commetend', 1), ('compile-error', 1), ('cpp-solution', 1), ('csharp', 1), ('deque', 1), ('detailed', 1), ('detailed explanation', 1), ('dfs traversal', 1), ('different approach', 1), ('easy', 1), ('easy undestanding', 1), ('easy-to-understand', 1), ('easy-understand', 1), ('easy-understanding', 1), ('edge-case', 1), ('explained solution', 1), ('explanation with code', 1), ('fast and simple', 1), ('go', 1), ('go-solution', 1), ('golang-solution', 1), ('graph center', 1), ('hash', 1), ('incorrect-test-case', 1), ('init a set', 1), ('intutive', 1), ('java solution using bfs', 1), ('kotlinvim', 1), ('leave-node-removal', 1), ('longest-path', 1), ('map', 1), ('meet-in-the-middle', 1), ('onion-peeling', 1), ('peeling', 1), ('performance', 1), ('pointer', 1), ('pythonpython3', 1), ('recursion', 1), ('removing leaf', 1), ('ruby', 1), ('scala', 1), ('set', 1), ('simple', 1), ('simple clear c++ solution', 1), ('solutionsharing', 1), ('solved', 1), ('stack-over-flow', 1), ('swift', 1), ('test-case', 1), ('testcase-wrong', 1), ('thought-process', 1), ('ting', 1), ('topological', 1), ('topological sort', 1), ('topological-sorting', 1), ('trees', 1), ('trim', 1), ('undirected acyclic graph', 1), ('updowndota', 1), ('video-explanation', 1), ('visualization', 1), ('well-commented', 1), ('well-explained', 1), ('wrong-test-cases', 1)]"
309,Best Time to Buy and Sell Stock with Cooldown,https://leetcode.com/problems/best-time-to-buy-and-sell-stock-with-cooldown,"You are given an array prices where prices[i] is the price of a given stock on the ith day.

Find the maximum profit you can achieve. You may complete as many transactions as you like (i.e., buy one and sell one share of the stock multiple times) with the following restrictions:


	After you sell your stock, you cannot buy stock on the next day (i.e., cooldown one day).


Note: You may not engage in multiple transactions simultaneously (i.e., you must sell the stock before you buy again).",['dynamic-programming'],Medium,3610,115,396379,192231,"[""Best Time to Buy and Sell Stock"", ""Best Time to Buy and Sell Stock II""]","[('dynamic programming', 57), ('java', 33), ('dynamic-programming', 30), ('dp', 28), ('cpp', 26), ('c++', 24), ('python', 24), ('easy-understanding', 19), ('python 3', 17), ('javascript', 10), ('memoization', 9), ('java-solution', 7), ('recursion', 6), ('state machine', 6), ('easy-understand', 4), ('python3', 4), ('simple', 4), ('100 speed', 3), ('c#', 3), ('easytounderstand', 3), ('recursive solution', 3), ('simple solution', 3), ('solution', 3), ('state-machine', 3), ('100 faster cpp', 2), ('beats 100', 2), ('dp-techqique', 2), ('easiest', 2), ('explained', 2), ('golang', 2), ('intuitive', 2), ('linear time', 2), ('optimization process', 2), ('thought process', 2), ('top down dp', 2), ('video-explanation', 2), ('#309', 1), ('#c++', 1), ('#dynamic programming', 1), ('#easy-understanding', 1), ('#intuition', 1), ('#intuitive', 1), ('#readable', 1), ('0ms', 1), ('100 faster', 1), ('accepted solution', 1), ('algorithms', 1), ('awesome samriddhi', 1), ('backtrack', 1), ('beating-100-submission', 1), ('beginner', 1), ('beginner friendly', 1), ('best-time-to-buy-and-sell-stoc', 1), ('brute force', 1), ('buy and sell stock', 1), ('buy sell stock', 1), ('c# dp', 1), ('c++ ac', 1), ('c++ code', 1), ('c++ solution', 1), ('c++11', 1), ('clean-code', 1), ('clear explanation', 1), ('clear-understanding', 1), ('closure', 1), ('code', 1), ('constant-space', 1), ('constant-time', 1), ('cooldown', 1), ('cooldown stock', 1), ('cpp solution', 1), ('cpp-solution', 1), ('detailed explanation', 1), ('diagram', 1), ('do upvote', 1), ('dp pattern', 1), ('dyanmic programming', 1), ('easy', 1), ('easy-to-understand', 1), ('easysolution', 1), ('elegant', 1), ('explaination', 1), ('extra-space', 1), ('fast and simple', 1), ('fast-solution', 1), ('faster', 1), ('finite-state-machine', 1), ('for loop', 1), ('functional-programming', 1), ('general', 1), ('graph', 1), ('hashmap', 1), ('iteration', 1), ('iterative', 1), ('iteratively', 1), ('java ac solution', 1), ('javascrip', 1), ('js', 1), ('linear', 1), ('linear-space', 1), ('linear-time', 1), ('memoziation', 1), ('mrmagician', 1), ('naive', 1), ('picture explanation', 1), ('pictures', 1), ('pyhton 3', 1), ('readable', 1), ('recover', 1), ('recurision', 1), ('recursion memoization', 1), ('recursive easy', 1), ('ritik', 1), ('rotate-array', 1), ('ruby', 1), ('rust', 1), ('scala', 1), ('short', 1), ('simple clear c++ solution', 1), ('solution-explaining', 1), ('solution-sharing-cpp', 1), ('space n2', 1), ('space o1', 1), ('straightforward', 1), ('tabular', 1), ('tabulation', 1), ('thinking process', 1), ('top down', 1), ('top down approach', 1), ('top-down dp', 1), ('upvote', 1), ('video', 1), ('video explaination', 1), ('video solution', 1), ('visualization', 1)]"
307,Range Sum Query - Mutable,https://leetcode.com/problems/range-sum-query-mutable,"Given an integer array nums, handle multiple queries of the following types:


	Update the value of an element in nums.
	Calculate the sum of the elements of nums between indices left and right inclusive where left <= right.


Implement the NumArray class:


	NumArray(int[] nums) Initializes the object with the integer array nums.
	void update(int index, int val) Updates the value of nums[index] to be val.
	int sumRange(int left, int right) Returns the sum of the elements of nums between indices left and right inclusive (i.e. nums[left] + nums[left + 1] + ... + nums[right]).","['binary-indexed-tree', 'segment-tree']",Medium,1788,106,366033,135829,"[""Range Sum Query - Immutable"", ""Range Sum Query 2D - Mutable""]","[('java', 39), ('segment tree', 38), ('cpp', 24), ('segment-tree', 24), ('binary-indexed-tree', 21), ('c++', 19), ('python', 16), ('binary-index-tree', 10), ('binary index tree', 9), ('fenwick-tree', 9), ('binary indexed tree', 8), ('cpp solution', 6), ('java-solution', 5), ('javascript', 5), ('python 3', 5), ('run-time-error', 5), ('c#', 4), ('python3', 4), ('solution', 4), ('sqrt decomposition', 4), ('array', 3), ('fenwick', 3), ('prefix sum', 3), ('short', 3), ('easy-understand', 2), ('easy-understanding', 2), ('easy-undestand', 2), ('iterative', 2), ('mutable', 2), ('prefix array', 2), ('pythonpython3', 2), ('range sum query', 2), ('recursion', 2), ('simple solution', 2), ('solution-sharing-cpp', 2), ('100', 1), ('2n', 1), ('arrays', 1), ('best-submission', 1), ('bit', 1), ('bottom up', 1), ('brute-force', 1), ('buffer-method', 1), ('c++ solution', 1), ('c++code', 1), ('clean clode', 1), ('clean code', 1), ('commented', 1), ('comments', 1), ('compile-error', 1), ('csharp', 1), ('data-structure', 1), ('decomposition', 1), ('dynamic programming', 1), ('easy', 1), ('easy-solition', 1), ('easytounderstand', 1), ('explaination', 1), ('explanation', 1), ('fuck noobs', 1), ('hashmap', 1), ('help', 1), ('kotlin', 1), ('lazy propagation', 1), ('logarithmic-space', 1), ('logarithmic-time', 1), ('memory optimized', 1), ('non-recursion', 1), ('not working', 1), ('object-oriented', 1), ('package', 1), ('performance', 1), ('php', 1), ('range-sum', 1), ('range-sum-query-mutable', 1), ('readable', 1), ('recursive', 1), ('recursive solution', 1), ('recursively', 1), ('ruby', 1), ('rust', 1), ('simple', 1), ('speed', 1), ('square root decomposition', 1), ('srt', 1), ('stl', 1), ('super-easy', 1), ('systems design', 1), ('test-case', 1), ('time-complexity', 1), ('time-limit-exceeded', 1), ('tricky', 1), ('twister', 1), ('typed array', 1), ('well-commented', 1), ('works-on-my-machine', 1)]"
306,Additive Number,https://leetcode.com/problems/additive-number,"Additive number is a string whose digits can form additive sequence.

A valid additive sequence should contain at least three numbers. Except for the first two numbers, each subsequent number in the sequence must be the sum of the preceding two.

Given a string containing only digits '0'-'9', write a function to determine if it's an additive number.

Note: Numbers in the additive sequence cannot have leading zeros, so sequence 1, 2, 03 or 1, 02, 3 is invalid.",['backtracking'],Medium,531,518,200885,59841,"[""Split Array into Fibonacci Sequence""]","[('java', 19), ('cpp', 16), ('backtracking', 15), ('python', 12), ('dfs', 6), ('recursion', 6), ('c#', 4), ('python 3', 4), ('recursive', 4), ('additive-number', 3), ('iterative', 3), ('java-solution', 3), ('javascript', 3), ('python3', 3), ('swift', 3), ('0ms', 2), ('c++', 2), ('easy-understand', 2), ('easy-understanding', 2), ('short', 2), ('solution', 2), ('string', 2), ('#cpp', 1), ('#easy-understand', 1), ('additivenumber', 1), ('best-submission', 1), ('bfs', 1), ('brought-force', 1), ('clarification', 1), ('cpp easy', 1), ('dfs simple solution', 1), ('explain', 1), ('fast-solution', 1), ('javascript solution', 1), ('missing-test-case', 1), ('nonrecursive', 1), ('problem-statement', 1), ('pruning', 1), ('python2', 1), ('recurision', 1), ('recursive solution', 1), ('recurssion', 1), ('rust', 1), ('simple', 1), ('solution-sharing-cpp', 1), ('space', 1), ('space-efficient', 1), ('straight-forward', 1), ('test-case', 1), ('time', 1), ('well-explained', 1), ('xjq', 1), ('zero', 1)]"
304,Range Sum Query 2D - Immutable,https://leetcode.com/problems/range-sum-query-2d-immutable,"Given a 2D matrix matrix, handle multiple queries of the following type:


	Calculate the sum of the elements of matrix inside the rectangle defined by its upper left corner (row1, col1) and lower right corner (row2, col2).


Implement the NumMatrix class:


	NumMatrix(int[][] matrix) Initializes the object with the integer matrix matrix.
	int sumRegion(int row1, int col1, int row2, int col2) Returns the sum of the elements of matrix inside the rectangle defined by its upper left corner (row1, col1) and lower right corner (row2, col2).",['dynamic-programming'],Medium,1512,209,365941,151607,"[""Range Sum Query - Immutable"", ""Range Sum Query 2D - Mutable""]","[('cpp', 24), ('java', 23), ('python', 18), ('dynamic programming', 16), ('dynamic-programming', 16), ('c++', 12), ('javascript', 10), ('solution', 8), ('dp', 7), ('python3', 7), ('easy-understand', 6), ('python 3', 6), ('prefix sum', 5), ('easy', 3), ('binary-index-tree', 2), ('binary-indexed-tree', 2), ('c#', 2), ('easy understanding', 2), ('simple', 2), ('swift', 2), ('99 fast', 1), ('akku', 1), ('array-creation', 1), ('beating-100-submission', 1), ('beating-100-submissions', 1), ('best-submission', 1), ('bottom-up', 1), ('brute force', 1), ('c++ code', 1), ('clean code', 1), ('cpp easy', 1), ('cpp solution', 1), ('dp-techqique', 1), ('dummy', 1), ('easiest', 1), ('easy sloution', 1), ('easy-to-understand', 1), ('easy-understanding', 1), ('error', 1), ('explanation', 1), ('faster than 100', 1), ('fastest', 1), ('golang', 1), ('golang-solution', 1), ('integral-image', 1), ('intutive', 1), ('java-solution', 1), ('js', 1), ('kotlin', 1), ('kotlinvim', 1), ('matrix', 1), ('missing-test-case', 1), ('no extra space', 1), ('numpy', 1), ('o1 space onm', 1), ('optimized', 1), ('precomputation', 1), ('prefix', 1), ('prefix array', 1), ('prefixsum', 1), ('range-sum-query-2d-immutable', 1), ('range-sum-query-immutable', 1), ('rangesumquery2dimmutable', 1), ('rust', 1), ('short', 1), ('solution-sharing-c', 1), ('solution-sharing-cpp', 1), ('subset sum', 1), ('summaryranges', 1), ('super-easy', 1), ('test-cases', 1), ('time-complexity', 1), ('vector', 1), ('very-intuitive', 1), ('well-commented', 1), ('xjq', 1)]"
303,Range Sum Query - Immutable,https://leetcode.com/problems/range-sum-query-immutable,"Given an integer array nums, handle multiple queries of the following type:


	Calculate the sum of the elements of nums between indices left and right inclusive where left <= right.


Implement the NumArray class:


	NumArray(int[] nums) Initializes the object with the integer array nums.
	int sumRange(int left, int right) Returns the sum of the elements of nums between indices left and right inclusive (i.e. nums[left] + nums[left + 1] + ... + nums[right]).",['dynamic-programming'],Easy,1265,1349,522153,253312,"[""Range Sum Query 2D - Immutable"", ""Range Sum Query - Mutable"", ""Maximum Size Subarray Sum Equals k""]","[('cpp', 29), ('java', 28), ('c++', 22), ('python', 22), ('dynamic-programming', 20), ('dynamic programming', 14), ('prefix sum', 14), ('python 3', 10), ('dp', 8), ('javascript', 8), ('python3', 8), ('solution', 7), ('segment tree', 6), ('segment-tree', 6), ('swift', 6), ('cpp solution', 4), ('easy', 4), ('easy-undestand', 4), ('c#', 3), ('easy-understanding', 3), ('java-solution', 3), ('ruby', 3), ('simple', 3), ('2-line', 2), ('array', 2), ('c', 2), ('easy to understand', 2), ('easy-understand', 2), ('fast', 2), ('golang', 2), ('kotlin', 2), ('rangesumquery', 2), ('time-limit-exceeded', 2), ('upvote', 2), ('#javascript', 1), ('100', 1), ('303', 1), ('32ms', 1), ('accepted', 1), ('avnish', 1), ('beat 99.8', 1), ('beating-100-submissions', 1), ('binary indexed tree', 1), ('binary-index-tree', 1), ('binary-indexed-tree', 1), ('bottom-up-algorithm', 1), ('c++ code', 1), ('clarification', 1), ('clean code', 1), ('compile-error', 1), ('constant-time', 1), ('cpp doubt', 1), ('cpp easy', 1), ('cpp-solution', 1), ('csharp', 1), ('cumulative sum', 1), ('dyanamic programming', 1), ('dynamic programmin', 1), ('easy undestanding', 1), ('easy-solition', 1), ('easy-to-understand', 1), ('easytounderstand', 1), ('es6', 1), ('explanation', 1), ('faster', 1), ('go', 1), ('golang-solution', 1), ('good variable names', 1), ('highly readable', 1), ('in-place', 1), ('intutive', 1), ('ios', 1), ('iterative', 1), ('itertools', 1), ('java solution', 1), ('javascript solution', 1), ('js', 1), ('js javascript', 1), ('kotlinvim', 1), ('lambda', 1), ('linear-time', 1), ('map', 1), ('memoization', 1), ('mrmagician', 1), ('o1 time', 1), ('order of n', 1), ('php', 1), ('pre-process', 1), ('prefix array', 1), ('prefix-array', 1), ('range-sum', 1), ('range-sum-immutable', 1), ('range-sum-query-immutable', 1), ('recursion', 1), ('run-time-error', 1), ('rust', 1), ('self explanatory', 1), ('short', 1), ('simple clear c++ solution', 1), ('simple solution', 1), ('simplesolution', 1), ('simplest', 1), ('solution-sharing-cpp', 1), ('space', 1), ('sparse table', 1), ('super-easy', 1), ('swift5', 1), ('time-limit-exceeded-java', 1), ('typescript', 1), ('ultra simple', 1), ('updowndota', 1), ('vector', 1), ('xjq', 1)]"
301,Remove Invalid Parentheses,https://leetcode.com/problems/remove-invalid-parentheses,"Given a string s that contains parentheses and letters, remove the minimum number of invalid parentheses to make the input string valid.

Return all the possible results. You may return the answer in any order.","['depth-first-search', 'breadth-first-search']",Hard,3335,156,588814,264962,"[""Valid Parentheses""]","[('python', 28), ('bfs', 27), ('java', 25), ('dfs', 22), ('cpp', 13), ('python 3', 13), ('c++', 11), ('javascript', 9), ('backtracking', 7), ('easy-understand', 7), ('easy-understanding', 5), ('solution', 5), ('swift', 4), ('c#', 3), ('easy-undestand', 3), ('0ms', 2), ('best-submission', 2), ('dynamic-programming', 2), ('easy', 2), ('easy-to-understand', 2), ('explained', 2), ('explanation', 2), ('fast', 2), ('java-solution', 2), ('queue', 2), ('recursion', 2), ('recursive', 2), ('short', 2), ('simple solution', 2), ('solution-sharing-cpp', 2), ('backtrack', 1), ('bfs-cpp', 1), ('bit-manipulation', 1), ('breadth first search', 1), ('clean-code', 1), ('combination', 1), ('commented', 1), ('comments', 1), ('cpp solution', 1), ('depth first search', 1), ('easiest', 1), ('easy to understand', 1), ('easy-implementation', 1), ('easytounderstand', 1), ('expected-output', 1), ('explanation with logic', 1), ('explanations', 1), ('facebook', 1), ('fast-solution', 1), ('go', 1), ('golang', 1), ('hashmap', 1), ('invalid', 1), ('iterative', 1), ('iterative way', 1), ('js', 1), ('kotlin', 1), ('less memory', 1), ('lru-cache', 1), ('no recursion', 1), ('no-global-variable', 1), ('parentheses', 1), ('python3', 1), ('python3.8', 1), ('readable', 1), ('recursion memoization', 1), ('recursive-dfs', 1), ('recurssion', 1), ('remove-invalid-parentheses', 1), ('rescursion', 1), ('short code', 1), ('simple', 1), ('slow', 1), ('space', 1), ('stack', 1), ('straight forward', 1), ('string', 1), ('test-cases', 1), ('thinking process', 1), ('time', 1), ('video', 1), ('well-commented', 1), ('well-explained', 1), ('wrong-answer', 1), ('youtube', 1)]"
300,Longest Increasing Subsequence,https://leetcode.com/problems/longest-increasing-subsequence,"Given an integer array nums, return the length of the longest strictly increasing subsequence.

A subsequence is a sequence that can be derived from an array by deleting some or no elements without changing the order of the remaining elements. For example, [3,6,2,7] is a subsequence of the array [0,3,1,6,2,2,7].","['binary-search', 'dynamic-programming']",Medium,7026,158,1198965,535927,"[""Increasing Triplet Subsequence"", ""Russian Doll Envelopes"", ""Maximum Length of Pair Chain"", ""Number of Longest Increasing Subsequence"", ""Minimum ASCII Delete Sum for Two Strings"", ""Minimum Number of Removals to Make Mountain Array""]","[('dynamic programming', 79), ('java', 56), ('binary-search', 54), ('cpp', 52), ('python', 48), ('dynamic-programming', 41), ('c++', 40), ('dp', 34), ('javascript', 24), ('binarysearch', 17), ('binary search', 16), ('nlogn', 14), ('python 3', 14), ('recursion', 12), ('python3', 11), ('memoization', 10), ('easy-understand', 9), ('easy-understanding', 9), ('java-solution', 9), ('lis', 9), ('cpp solution', 8), ('golang', 8), ('c#', 7), ('easy-undestand', 5), ('simple', 5), ('clean code', 4), ('explanations', 4), ('kotlin', 4), ('rajat', 4), ('solution', 4), ('backtracking', 3), ('bisect', 3), ('bottomup', 3), ('comments-added', 3), ('dp-techqique', 3), ('easy', 3), ('explanation', 3), ('golang-solution', 3), ('greedy', 3), ('missing-test-case', 3), ('short', 3), ('top down dp', 3), ('best-submission', 2), ('binary-indexed-tree', 2), ('bit', 2), ('c++ code', 2), ('cpp-solution', 2), ('dfs', 2), ('dp-iterative', 2), ('dynamic programmin', 2), ('easytounderstand', 2), ('explained', 2), ('fenwick-tree', 2), ('go', 2), ('go-solution', 2), ('iterative', 2), ('javascript solution', 2), ('lowerbound', 2), ('onlogn', 2), ('patience sorting', 2), ('recurrance', 2), ('recursion memoization', 2), ('ruby', 2), ('rust', 2), ('simple clear c++ solution', 2), ('simple solution', 2), ('subsequence', 2), ('video explanation', 2), ('well-commented', 2), ('zea7ot', 2), ('2d-dp', 1), ('4ms', 1), ('accepted', 1), ('algorithms', 1), ('all solutions', 1), ('amazon interview', 1), ('awesome samriddhi', 1), ('back tracking', 1), ('binary-tree', 1), ('bottom-up-algorithm', 1), ('brute force', 1), ('brute-force', 1), ('bug report', 1), ('c++ ac', 1), ('c++14', 1), ('chinese', 1), ('clarification', 1), ('clean', 1), ('comments', 1), ('constant-space', 1), ('depth first search', 1), ('description', 1), ('dfs-memo', 1), ('dfs-recursive', 1), ('dfs-topdown', 1), ('dp-2d', 1), ('dpa', 1), ('dyanmic programming', 1), ('dynamic', 1), ('dynamicprogramming', 1), ('easy sloution', 1), ('easy understanding', 1), ('easy-to-understand', 1), ('es6', 1), ('esay-understand', 1), ('explaination', 1), ('explained solution', 1), ('fastest', 1), ('give stars and subscribe', 1), ('gkt', 1), ('greedy approach', 1), ('increasing subsequence', 1), ('intuitive', 1), ('java ac solution', 1), ('java solution', 1), ('javasript', 1), ('js', 1), ('js javascript', 1), ('linear time complexity', 1), ('linear-space', 1), ('linearithmic', 1), ('lower bound', 1), ('lower-bound', 1), ('memory-limit-exceeded', 1), ('memoziation', 1), ('monotonic stack', 1), ('narmsimha karumanchi', 1), ('nlogn time', 1), ('patience-game', 1), ('patience-sort', 1), ('print lis', 1), ('pyhton 3', 1), ('python deque', 1), ('python2', 1), ('python3.8', 1), ('pythonpython3', 1), ('question', 1), ('queue', 1), ('recurision', 1), ('recursive', 1), ('recursive solution', 1), ('recusive', 1), ('ritik', 1), ('scala', 1), ('segment tree', 1), ('shortest', 1), ('sliding-window', 1), ('solution-sharing-cpp', 1), ('sorting', 1), ('space complexity', 1), ('step by step', 1), ('stl', 1), ('substring', 1), ('swift', 1), ('swift5', 1), ('tabulation', 1), ('test-case', 1), ('three-different-solutions', 1), ('time complexity', 1), ('top down', 1), ('treeset', 1), ('typescript', 1), ('updowndota', 1), ('very-intuitive', 1), ('video-explanation', 1), ('with explanation', 1), ('wrong-answer', 1)]"
299,Bulls and Cows,https://leetcode.com/problems/bulls-and-cows,"You are playing the Bulls and Cows game with your friend.

You write down a secret number and ask your friend to guess what the number is. When your friend makes a guess, you provide a hint with the following info:


	The number of ""bulls"", which are digits in the guess that are in the correct position.
	The number of ""cows"", which are digits in the guess that are in your secret number but are located in the wrong position. Specifically, the non-bull digits in the guess that could be rearranged such that they become bulls.


Given the secret number secret and your friend's guess guess, return the hint for your friend's guess.

The hint should be formatted as ""xAyB"", where x is the number of bulls and y is the number of cows. Note that both secret and guess may contain duplicate digits.",['hash-table'],Medium,954,1058,473360,212222,[],"[('python', 47), ('java', 37), ('python 3', 31), ('cpp', 29), ('c++', 23), ('hashmap', 17), ('javascript', 15), ('one-pass', 11), ('python3', 10), ('solution', 10), ('explained', 8), ('easy-understand', 7), ('easy-understanding', 7), ('bulls-and-cows', 6), ('dictionary', 6), ('c#', 5), ('counter', 5), ('swift', 5), ('wrong-answer', 5), ('accepted', 4), ('array', 4), ('easy', 4), ('easy-undestand', 4), ('java-solution', 4), ('simple', 4), ('string', 4), ('arrays', 3), ('constant space', 3), ('cpp solution', 3), ('hash table', 3), ('js', 3), ('python2', 3), ('0ms', 2), ('bulls', 2), ('bullsandcows', 2), ('c++ code', 2), ('comments', 2), ('cows', 2), ('dictionaries', 2), ('easy-to-understand', 2), ('easytounderstand', 2), ('further-optimization', 2), ('golang', 2), ('hashtable', 2), ('kotlin', 2), ('linear time', 2), ('map', 2), ('one pass solution', 2), ('runtime-error', 2), ('rust', 2), ('short', 2), ('simple solution', 2), ('single pass', 2), ('video-explanation', 2), ('#python', 1), ('100 faster cpp', 1), ('4ms', 1), ('algorithms', 1), ('amazon', 1), ('anagram', 1), ('answer', 1), ('ascii', 1), ('bad solution', 1), ('best-submission', 1), ('bowscows', 1), ('bucket', 1), ('buckets', 1), ('bullscowsproblem', 1), ('c', 1), ('c code', 1), ('c++ solution', 1), ('codedecks', 1), ('concise', 1), ('constant memory', 1), ('cpp easy', 1), ('cpp-solution', 1), ('csharp', 1), ('datastructure', 1), ('defaultdict', 1), ('dict', 1), ('easy understanding', 1), ('easy-solution', 1), ('effective', 1), ('explanation', 1), ('explanations', 1), ('facebook', 1), ('fast and simple', 1), ('fastest', 1), ('frequency', 1), ('frequency array', 1), ('frequency count', 1), ('full detailed explanation', 1), ('go', 1), ('golang-solution', 1), ('google interview', 1), ('hashing', 1), ('help', 1), ('improve', 1), ('interview-experience', 1), ('iteration', 1), ('java ac solution', 1), ('java solution', 1), ('javascrip', 1), ('js javascript', 1), ('kotlinvim', 1), ('linear-time', 1), ('list', 1), ('list comprehension', 1), ('loop', 1), ('malj', 1), ('o n', 1), ('one-loop', 1), ('onepass', 1), ('only', 1), ('phone screening', 1), ('php', 1), ('php solution', 1), ('python-dictionary', 1), ('question-example', 1), ('question-not-clear', 1), ('scala', 1), ('sets', 1), ('simple clear c++ solution', 1), ('solution c++', 1), ('solution-cpp', 1), ('solution-sharing-cpp', 1), ('stl', 1), ('straight-forward', 1), ('string manipulation', 1), ('string parsing', 1), ('test-case', 1), ('testcase', 1), ('two-loop', 1), ('typescript', 1), ('unordered map', 1), ('video', 1), ('video solution', 1), ('well-commented', 1), ('wrong', 1), ('wrong-execution-result', 1)]"
297,Serialize and Deserialize Binary Tree,https://leetcode.com/problems/serialize-and-deserialize-binary-tree,"Serialization is the process of converting a data structure or object into a sequence of bits so that it can be stored in a file or memory buffer, or transmitted across a network connection link to be reconstructed later in the same or another computer environment.

Design an algorithm to serialize and deserialize a binary tree. There is no restriction on how your serialization/deserialization algorithm should work. You just need to ensure that a binary tree can be serialized to a string and this string can be deserialized to the original tree structure.

Clarification: The input/output format is the same as how LeetCode serializes a binary tree. You do not necessarily need to follow this format, so please be creative and come up with different approaches yourself.","['tree', 'design']",Hard,4224,193,872286,439845,"[""Encode and Decode Strings"", ""Serialize and Deserialize BST"", ""Find Duplicate Subtrees"", ""Serialize and Deserialize N-ary Tree""]","[('java', 56), ('python', 47), ('bfs', 40), ('dfs', 29), ('c++', 26), ('javascript', 23), ('python 3', 21), ('binary-tree', 18), ('queue', 17), ('cpp', 16), ('level-order-traversal', 15), ('preorder traversal', 14), ('c#', 11), ('python3', 11), ('easy-understanding', 10), ('java-solution', 10), ('recursion', 9), ('serialization', 8), ('deserialize', 7), ('pre-order', 7), ('preorder', 7), ('recursive', 7), ('swift', 7), ('tree', 7), ('iterative', 6), ('level order traversal', 5), ('pre-order traversal', 5), ('serialize', 5), ('clean code', 4), ('dfs simple solution', 4), ('go', 4), ('preorder-traversal', 4), ('breadth-first-search', 3), ('c++ code', 3), ('cpp solution', 3), ('csharp', 3), ('easy-to-understand', 3), ('golang', 3), ('js', 3), ('postorder-traversal', 3), ('tree traversal', 3), ('trees', 3), ('binary tree', 2), ('clear explanation', 2), ('comments-added', 2), ('dfs-tree', 2), ('easy to understand', 2), ('easy-understand', 2), ('easy-undestand', 2), ('explanation', 2), ('iterative-preorder', 2), ('iteratively', 2), ('java solution', 2), ('javascript solution', 2), ('json', 2), ('memory-limit-exceeded', 2), ('postorder', 2), ('python2', 2), ('queue-approach', 2), ('recursively', 2), ('short', 2), ('simple', 2), ('solution', 2), ('time-complexity', 2), ('tree-traversal', 2), ('video', 2), ('#helpneeded', 1), ('24-32ms', 1), ('297', 1), ('accepted', 1), ('amazon', 1), ('amazon sde 1', 1), ('arraylist', 1), ('beauty', 1), ('bfs-dfs', 1), ('binary', 1), ('binary-serialization', 1), ('binarytodecimal', 1), ('bitmanipulation', 1), ('breadth first search', 1), ('c++ solution', 1), ('clarification', 1), ('clean-code', 1), ('clear-understanding', 1), ('codingtuting', 1), ('comments', 1), ('complex', 1), ('concise-solution', 1), ('constant-space', 1), ('cpp code', 1), ('decimaltobinary', 1), ('depth first search', 1), ('depth-first-search', 1), ('deque', 1), ('dfs-iterative', 1), ('dfs-postorder', 1), ('dfs-recursive', 1), ('different-oj-local', 1), ('drewbie', 1), ('easy', 1), ('easy-understsand', 1), ('easytounderstand', 1), ('efficient solution', 1), ('encoding', 1), ('explained', 1), ('explanation of logic', 1), ('faceebook', 1), ('fast and simple', 1), ('fast-solution', 1), ('faster', 1), ('go-solution', 1), ('golang-solution', 1), ('google', 1), ('help', 1), ('help me', 1), ('improve', 1), ('in-order-traversal', 1), ('inorder', 1), ('iteration', 1), ('java ac solution', 1), ('javascript recursive', 1), ('jigneshpanchal', 1), ('joke', 1), ('keep it simple', 1), ('kotlin', 1), ('kotlinvim', 1), ('leetcode', 1), ('level order', 1), ('level-order', 1), ('linear time', 1), ('linear-space', 1), ('linear-time', 1), ('lisp', 1), ('mle', 1), ('morris-traversal', 1), ('need-help', 1), ('needhelp', 1), ('non recursive', 1), ('nutanix', 1), ('palindrome', 1), ('php', 1), ('pickle', 1), ('readable', 1), ('recurision', 1), ('recursive-descent', 1), ('resursive', 1), ('ruby', 1), ('serialisation', 1), ('serialise', 1), ('share-solution', 1), ('shared-answer', 1), ('simple solution', 1), ('smallest', 1), ('solution-sharing-python', 1), ('space-complexity', 1), ('stars move the article up', 1), ('state', 1), ('stateless', 1), ('string parsing', 1), ('stringbuilder', 1), ('stringstream', 1), ('suboptimal', 1), ('test-case', 1), ('traversal path', 1), ('ts', 1), ('very-intuitive', 1), ('video explanation', 1), ('well-commented', 1), ('well-explained', 1), ('works-on-my-machine', 1), ('xjq', 1), ('youtube', 1)]"
295,Find Median from Data Stream,https://leetcode.com/problems/find-median-from-data-stream,"The median is the middle value in an ordered integer list. If the size of the list is even, there is no middle value and the median is the mean of the two middle values.


	For example, for arr = [2,3,4], the median is 3.
	For example, for arr = [2,3], the median is (2 + 3) / 2 = 2.5.


Implement the MedianFinder class:


	MedianFinder() initializes the MedianFinder object.
	void addNum(int num) adds the integer num from the data stream to the data structure.
	double findMedian() returns the median of all elements so far. Answers within 10-5 of the actual answer will be accepted.","['heap', 'design']",Hard,4089,78,620203,295418,"[""Sliding Window Median"", ""Finding MK Average""]","[('heap', 47), ('java', 38), ('python', 29), ('cpp', 27), ('priority queue', 25), ('c++', 22), ('python 3', 17), ('heapq', 15), ('javascript', 14), ('binary-search', 13), ('priority-queue', 10), ('c#', 8), ('maxheap', 8), ('min heap', 7), ('min-heap', 7), ('heaps', 6), ('python3', 6), ('easy-understanding', 5), ('max heap', 5), ('simple', 5), ('binary search', 4), ('binarysearch', 4), ('golang', 4), ('java-solution', 4), ('max-heap', 4), ('wrong-answer', 4), ('easy-understand', 3), ('explained', 3), ('follow-up', 3), ('minheap', 3), ('python2', 3), ('solution', 3), ('sortedlist', 3), ('bst', 2), ('c# sortedset', 2), ('c++11', 2), ('clean code', 2), ('double-linked-list', 2), ('easy-to-understand', 2), ('easy-undestand', 2), ('easytounderstand', 2), ('golang-solution', 2), ('heaps algorithm', 2), ('insertion sort', 2), ('kotlin', 2), ('median', 2), ('median in a stream', 2), ('pbds', 2), ('readable', 2), ('ruby', 2), ('short', 2), ('solution-sharing-cpp', 2), ('stl', 2), ('swift', 2), ('treeset', 2), ('two heaps', 2), ('#cpp', 1), ('#priority-queue', 1), ('100 faster', 1), ('100 faster runtime', 1), ('100 memory', 1), ('100 space', 1), ('100 speed', 1), ('2 heaps', 1), ('22ms', 1), ('accepted', 1), ('algorithms', 1), ('alotofcode', 1), ('amazon', 1), ('animation', 1), ('answer', 1), ('arraylist', 1), ('awesome samriddhi', 1), ('binary search tree', 1), ('binary-search-tree', 1), ('binary-tree', 1), ('binarysearh', 1), ('bisect', 1), ('bisection search', 1), ('brute-force', 1), ('bst-iterator', 1), ('c++ code', 1), ('c++ solution', 1), ('chinese', 1), ('commented code', 1), ('constant-space', 1), ('constant-time', 1), ('cpp clear', 1), ('cpp easy', 1), ('dfs', 1), ('dividedconquer', 1), ('easy understand', 1), ('efficient solution', 1), ('error', 1), ('error message', 1), ('es6', 1), ('explanation', 1), ('explanations', 1), ('facebook interview', 1), ('fast', 1), ('find-median-from-data-stream', 1), ('go', 1), ('go-solution', 1), ('golang solution', 1), ('google', 1), ('head', 1), ('heapify', 1), ('heapsort', 1), ('help needed', 1), ('incorrect-test-case', 1), ('iterator', 1), ('java solution', 1), ('java8', 1), ('js', 1), ('map', 1), ('microsoft', 1), ('multiple solutions', 1), ('multiset', 1), ('nlogn time', 1), ('noob to pro', 1), ('nthelement', 1), ('o log n', 1), ('onjudge', 1), ('order statistics', 1), ('php', 1), ('priorityqueue', 1), ('quick select', 1), ('quick-selection', 1), ('recursion', 1), ('red-black-tree', 1), ('ritik', 1), ('scala', 1), ('scales well', 1), ('short code', 1), ('simple clear c++ solution', 1), ('simple solution', 1), ('sort', 1), ('sorted-list', 1), ('sortedcontainers', 1), ('sortedset', 1), ('sorting', 1), ('testcase-wrong', 1), ('tree-traversal', 1), ('two-heaps', 1), ('using two heaps', 1), ('video explanation', 1), ('works-on-my-machine', 1), ('youtube', 1)]"
292,Nim Game,https://leetcode.com/problems/nim-game,"You are playing the following Nim Game with your friend:


	Initially, there is a heap of stones on the table.
	You and your friend will alternate taking turns, and you go first.
	On each turn, the person whose turn it is will remove 1 to 3 stones from the heap.
	The one who removes the last stone is the winner.


Given n, the number of stones in the heap, return true if you can win the game assuming both you and your friend play optimally, otherwise return false.","['brainteaser', 'minimax']",Easy,774,1880,443542,244498,"[""Flip Game II""]","[('java', 23), ('python', 22), ('cpp', 11), ('c++', 9), ('python 3', 8), ('solution', 8), ('python3', 6), ('dynamic-programming', 5), ('dynamic programming', 4), ('explanation', 4), ('go', 4), ('golang', 4), ('javascript', 4), ('math', 4), ('one-liner', 4), ('short', 4), ('simple', 4), ('cpp solution', 3), ('golang-solution', 3), ('nim-game', 3), ('bitwise', 2), ('dp', 2), ('easy-to-understand', 2), ('game-theory', 2), ('java-solution', 2), ('js', 2), ('minimax', 2), ('nim', 2), ('nimgame', 2), ('oneline', 2), ('proof', 2), ('recursion', 2), ('recursively', 2), ('time-limit-exceeded', 2), ('0ms', 1), ('1 line', 1), ('100 memory', 1), ('100 space', 1), ('accepted', 1), ('all approaches', 1), ('backtracking', 1), ('bit-manipulation', 1), ('bottom up', 1), ('bottom-up-algorithm', 1), ('c#', 1), ('c++11', 1), ('commnted', 1), ('constant time', 1), ('constant-time', 1), ('dps', 1), ('easy', 1), ('easy to understand', 1), ('easy-understanding', 1), ('explain', 1), ('explaination', 1), ('fast and simple', 1), ('fast-solution', 1), ('fastest', 1), ('game', 1), ('gaming-theory', 1), ('go-solution', 1), ('golang solution', 1), ('hit and trial', 1), ('images', 1), ('javascrip', 1), ('javascript solution', 1), ('js javascript', 1), ('mathematic', 1), ('memoization', 1), ('mod', 1), ('modulus', 1), ('one line', 1), ('optimal', 1), ('python2', 1), ('ruby', 1), ('rust', 1), ('scala', 1), ('simple solution', 1), ('simple-solution', 1), ('slow', 1), ('solution-sharing-java', 1), ('tle', 1), ('why', 1), ('xinerd', 1)]"
290,Word Pattern,https://leetcode.com/problems/word-pattern,"Given a pattern and a string s, find if s follows the same pattern.

Here follow means a full match, such that there is a bijection between a letter in pattern and a non-empty word in s.",['hash-table'],Easy,1840,219,660028,254045,"[""Isomorphic Strings"", ""Word Pattern II""]","[('java', 70), ('hashmap', 63), ('cpp', 55), ('c++', 53), ('python', 47), ('python 3', 42), ('javascript', 26), ('easy-understanding', 25), ('map', 25), ('python3', 16), ('java-solution', 14), ('solution', 14), ('word-pattern', 12), ('cpp solution', 11), ('explained', 11), ('hash table', 11), ('dictionary', 10), ('stringstream', 8), ('0ms', 7), ('easy-understand', 7), ('swift', 7), ('c#', 6), ('dictonary', 6), ('easy-to-understand', 6), ('simple', 6), ('golang', 5), ('python2', 5), ('hashset', 4), ('kotlin', 4), ('ruby', 4), ('set', 4), ('unorderedmap', 4), ('cpp easy', 3), ('easy', 3), ('easytounderstand', 3), ('fast-solution', 3), ('go', 3), ('hashtable', 3), ('run-time-error', 3), ('sets', 3), ('short', 3), ('simple solution', 3), ('string', 3), ('word pattern', 3), ('100 faster', 2), ('100 speed', 2), ('accepted', 2), ('beginner friendly', 2), ('c++ code', 2), ('clean code', 2), ('easy understanding', 2), ('faster', 2), ('hash-table', 2), ('hashing', 2), ('hashmaps', 2), ('iteratively', 2), ('java ac solution', 2), ('linear-time', 2), ('map-stl', 2), ('readable', 2), ('solution-cpp', 2), ('two hashmaps', 2), ('two-pointers', 2), ('unordered map', 2), ('vector', 2), ('works-on-my-machine', 2), ('#hashmap', 1), ('#hashset', 1), ('#java', 1), ('0ms runtime', 1), ('0ms-4ms', 1), ('100 runtime', 1), ('1hashmap', 1), ('1ms', 1), ('99.41', 1), ('answer', 1), ('array', 1), ('arrays', 1), ('best-submission', 1), ('bloomberg', 1), ('c', 1), ('c++ hash', 1), ('c++ map', 1), ('c++ solution', 1), ('c++11', 1), ('cache', 1), ('clean', 1), ('clean-efficient-code', 1), ('commented', 1), ('concise-solution', 1), ('cpp question', 1), ('data structures', 1), ('defaultdict', 1), ('descriptive names', 1), ('dictionaries', 1), ('different approach', 1), ('different-oj-local', 1), ('dshah14', 1), ('easiest solution', 1), ('easy solution', 1), ('easy to underatnd', 1), ('easy to understand', 1), ('easy understand', 1), ('easy-undestand', 1), ('error', 1), ('explained solution', 1), ('explanatory comments', 1), ('external-library', 1), ('fast', 1), ('fast and simple', 1), ('faster than 99.41', 1), ('fastest', 1), ('fastest solution', 1), ('fastest swift solution', 1), ('go-solution', 1), ('golang-solution', 1), ('good variable names', 1), ('hash', 1), ('hashing algorithm', 1), ('hasing', 1), ('int', 1), ('integer', 1), ('isomorphic', 1), ('istringstream', 1), ('iterative', 1), ('java solution', 1), ('javascrip', 1), ('javascript solution', 1), ('js', 1), ('lambdas', 1), ('linkedhashmap', 1), ('meiyaowen', 1), ('o ms', 1), ('one pass', 1), ('optimal', 1), ('php', 1), ('pyhton', 1), ('python 2', 1), ('readability', 1), ('scala', 1), ('self-explanatory', 1), ('short c++ code', 1), ('simple clear c++ solution', 1), ('simple java solution', 1), ('simple-solution', 1), ('simplesolution', 1), ('solution-python', 1), ('solution-share', 1), ('solution-sharing-cpp', 1), ('split', 1), ('straight-forward', 1), ('string parsing', 1), ('string-operation', 1), ('strings', 1), ('strings manipulation', 1), ('strtok', 1), ('structured code', 1), ('substring', 1), ('test-case', 1), ('tokenization', 1), ('twohashmaps', 1), ('video', 1), ('video explanation', 1), ('video solution', 1), ('well-commented', 1), ('without hashmap', 1), ('wrong', 1), ('wrong-answer', 1), ('wrong-execution-result', 1), ('zip', 1)]"
289,Game of Life,https://leetcode.com/problems/game-of-life,"According to Wikipedia's article: ""The Game of Life, also known simply as Life, is a cellular automaton devised by the British mathematician John Horton Conway in 1970.""

The board is made up of an m x n grid of cells, where each cell has an initial state: live (represented by a 1) or dead (represented by a 0). Each cell interacts with its eight neighbors (horizontal, vertical, diagonal) using the following four rules (taken from the above Wikipedia article):


	Any live cell with fewer than two live neighbors dies as if caused by under-population.
	Any live cell with two or three live neighbors lives on to the next generation.
	Any live cell with more than three live neighbors dies, as if by over-population.
	Any dead cell with exactly three live neighbors becomes a live cell, as if by reproduction.


The next state is created by applying the above rules simultaneously to every cell in the current state, where births and deaths occur simultaneously. Given the current state of the m x n grid board, return the next state.",['array'],Medium,2632,341,401164,236787,"[""Set Matrix Zeroes""]","[('java', 48), ('python', 33), ('cpp', 27), ('javascript', 26), ('python 3', 26), ('c++', 25), ('in-place', 22), ('java-solution', 19), ('easy-understanding', 13), ('easy-undestand', 10), ('inplace', 10), ('ruby', 8), ('bit-manipulation', 6), ('cpp solution', 6), ('easytounderstand', 6), ('solution', 6), ('explained', 5), ('golang', 5), ('java ac solution', 5), ('python3', 5), ('0ms', 4), ('bit manipulation', 4), ('c++ code', 4), ('cpp easy', 4), ('easy-understand', 4), ('golang-solution', 4), ('javascript solution', 4), ('beats 100', 3), ('c#', 3), ('easy to read', 3), ('easy-to-understand', 3), ('follow-up', 3), ('go-solution', 3), ('kotlin', 3), ('simple', 3), ('simple solution', 3), ('swift', 3), ('#easy-understand', 2), ('100 speed', 2), ('array', 2), ('bitwise operation', 2), ('brute force', 2), ('c', 2), ('clean code', 2), ('constant space', 2), ('constant-space', 2), ('easy to understand', 2), ('encoding', 2), ('fastest', 2), ('matrix', 2), ('python2', 2), ('readable', 2), ('short', 2), ('state-transition', 2), ('typescript', 2), ('#easy', 1), ('#easysolution', 1), ('#numpy', 1), ('#python', 1), ('0ms-solution', 1), ('100 faster', 1), ('100 faster runtime', 1), ('100 memory', 1), ('2d array', 1), ('algorithms', 1), ('amazon sde 1', 1), ('automata', 1), ('beats 100 percent', 1), ('beginner', 1), ('best-submission', 1), ('bfs', 1), ('bit', 1), ('bit-operation', 1), ('brute-force', 1), ('c++ iterative sol', 1), ('c++ solution', 1), ('c++11', 1), ('clear', 1), ('clear solution', 1), ('comments', 1), ('const space', 1), ('constant memory', 1), ('cpp clear', 1), ('cpp soltuion', 1), ('cpp-solution', 1), ('day30', 1), ('december day30', 1), ('decoding', 1), ('drewbie', 1), ('dynamic-programming', 1), ('easiest', 1), ('easy', 1), ('easy undestanding', 1), ('efficient solution', 1), ('es6', 1), ('explaination', 1), ('explained solution', 1), ('explanation', 1), ('explanation with code', 1), ('fast and simple', 1), ('fast-solution', 1), ('feedback', 1), ('finite state machine', 1), ('finite-state-machine', 1), ('functional-programming', 1), ('game of life', 1), ('go', 1), ('goldmansachs', 1), ('google interview', 1), ('hashmap', 1), ('if-else', 1), ('implace', 1), ('in place', 1), ('infinite board', 1), ('interview', 1), ('intuitive', 1), ('kotlin-solution', 1), ('least-memory', 1), ('linear time', 1), ('long', 1), ('matrices', 1), ('matrix traverse', 1), ('memory usage', 1), ('method', 1), ('modern', 1), ('negative numbers', 1), ('nerdy', 1), ('no extra space', 1), ('optimal', 1), ('purpose-of-question', 1), ('python3.8', 1), ('pythonic', 1), ('pythonpython3', 1), ('quality-of-life', 1), ('queue', 1), ('recursive solution', 1), ('scala', 1), ('self-explanatory', 1), ('share-solution', 1), ('simple clear c++ solution', 1), ('simple-solution', 1), ('simulation', 1), ('single pass', 1), ('solution-java', 1), ('solution-share', 1), ('space-complexity', 1), ('state', 1), ('state machine', 1), ('state-machine', 1), ('straight-forward', 1), ('straightforward', 1), ('test case', 1), ('test cases', 1), ('testcases', 1), ('tetris', 1), ('ting', 1), ('two pass', 1), ('two-pass', 1), ('understandable', 1), ('unique', 1), ('vector', 1), ('video-explanation', 1), ('well-commented', 1), ('works-on-my-machine', 1)]"
287,Find the Duplicate Number,https://leetcode.com/problems/find-the-duplicate-number,"Given an array of integers nums containing n + 1 integers where each integer is in the range [1, n] inclusive.

There is only one repeated number in nums, return this repeated number.","['array', 'two-pointers', 'binary-search']",Medium,7327,776,875486,508389,"[""First Missing Positive"", ""Single Number"", ""Linked List Cycle II"", ""Missing Number"", ""Set Mismatch""]","[('java', 71), ('python', 62), ('c++', 60), ('cpp', 49), ('python 3', 37), ('javascript', 31), ('binary-search', 24), ('java-solution', 22), ('easy', 21), ('linear time', 20), ('python3', 18), ('easy-understanding', 17), ('cpp solution', 15), ('nlogn', 13), ('solution', 13), ('array', 10), ('binary search', 9), ('constant space', 9), ('floyd cycle detection', 9), ('c++ code', 8), ('constant memory', 8), ('linear-time', 8), ('c#', 7), ('cpp easy', 7), ('hashmap', 7), ('sort', 7), ('easy-to-understand', 6), ('javascript solution', 6), ('bit-manipulation', 5), ('constant-space', 5), ('cycle detection', 5), ('fast', 5), ('simple solution', 5), ('two-pointers', 5), ('best', 4), ('better', 4), ('c', 4), ('easy-understand', 4), ('easytounderstand', 4), ('explained', 4), ('hashset', 4), ('map', 4), ('naive', 4), ('ruby', 4), ('set', 4), ('sets', 4), ('short', 4), ('slow and fast pointer', 4), ('swift', 4), ('tortoise and hare', 4), ('tortoise-and-hare-algo', 4), ('arrays', 3), ('binarysearch', 3), ('bit manipulation', 3), ('counter', 3), ('cycle-detection', 3), ('cyclic-sort', 3), ('dictionary', 3), ('duplicate', 3), ('floyd', 3), ('graph', 3), ('java ac solution', 3), ('scala', 3), ('simple', 3), ('simple clear c++ solution', 3), ('slowfast pointers', 3), ('sorting', 3), ('#simple', 2), ('algorithms', 2), ('best-submission', 2), ('bucket-sort', 2), ('commented', 2), ('cycle', 2), ('cyclic sort', 2), ('dictonary', 2), ('easy to understand', 2), ('explanation of logic', 2), ('fast and simple', 2), ('fastest', 2), ('golang', 2), ('hare and turtle', 2), ('js', 2), ('linear memory', 2), ('list', 2), ('o1', 2), ('one-liner', 2), ('solution-sharing-python', 2), ('space-complexity', 2), ('swap', 2), ('tortoise-hare', 2), ('tricky', 2), ('two-pointer', 2), ('vector', 2), ('well-commented', 2), ('#easiest', 1), ('#java', 1), ('#javascript', 1), ('#python 3', 1), ('#python3', 1), ('#sets', 1), ('0ms', 1), ('1-liner', 1), ('100 faster runtime', 1), ('100 speed', 1), ('1ms runtime', 1), ('4-solutions', 1), ('4ms', 1), ('accepted', 1), ('all solutions', 1), ('amazon interview', 1), ('array easy', 1), ('array-creation', 1), ('arrayashashtable', 1), ('asm', 1), ('beginnerfriendly', 1), ('best explaination', 1), ('bit', 1), ('bit operation', 1), ('bitmap', 1), ('bitwise', 1), ('bitwise operation', 1), ('bloom-filter', 1), ('brutal force', 1), ('brute force', 1), ('c programming', 1), ('c++ hash', 1), ('c++ solution', 1), ('c++11', 1), ('can be improved', 1), ('cheating', 1), ('clarification', 1), ('clean code', 1), ('clean-code', 1), ('code comments', 1), ('comment', 1), ('concept first then code', 1), ('count', 1), ('cpp doubt', 1), ('cpp soltuion', 1), ('cycle sort', 1), ('deep-dive', 1), ('duplicates', 1), ('duplicates in array', 1), ('easiest', 1), ('easy sloution', 1), ('easy solutions', 1), ('easy to code', 1), ('easy to read', 1), ('easy understand', 1), ('easy understanding', 1), ('easy-undestand', 1), ('easysolution', 1), ('efficient algorithm', 1), ('explaination', 1), ('explained solution', 1), ('explanation', 1), ('explanation with code', 1), ('explanation with logic', 1), ('explanations', 1), ('extended-question', 1), ('facebook', 1), ('faq', 1), ('fast and slow ptrs', 1), ('fast slow pointer', 1), ('fast-solution', 1), ('fastest java slution', 1), ('filter', 1), ('find-the-duplicate', 1), ('findduplicatenumber', 1), ('floyd cycle', 1), ('floyd-algorithm', 1), ('fun', 1), ('functional', 1), ('functional-programming', 1), ('go', 1), ('golang-solution', 1), ('great', 1), ('hack', 1), ('hash', 1), ('hash set', 1), ('hash table', 1), ('hashes', 1), ('helper function', 1), ('in place bucket sort', 1), ('index', 1), ('indexing-sort', 1), ('inplace-hashmap', 1), ('interviews', 1), ('intuit', 1), ('intuitive', 1), ('iterative', 1), ('java solution', 1), ('javasccript', 1), ('jupyternotebook', 1), ('kotlin', 1), ('lambda', 1), ('leetcode 287', 1), ('linear', 1), ('linear solution', 1), ('linear space', 1), ('linked list', 1), ('linked-list', 1), ('linked-list-cycle', 1), ('logarithmic time', 1), ('logic', 1), ('logn', 1), ('loop', 1), ('manipulation', 1), ('math', 1), ('memset', 1), ('not-two-pointer', 1), ('o1 space', 1), ('objects', 1), ('ologn', 1), ('on', 1), ('one pass', 1), ('one pass solution', 1), ('partition', 1), ('prime', 1), ('problem', 1), ('python2', 1), ('pythonpython3', 1), ('quicksort', 1), ('read-only-array', 1), ('rust', 1), ('saravana', 1), ('search', 1), ('share-solution', 1), ('short c++ code', 1), ('short solution', 1), ('simple approach', 1), ('simplesolution', 1), ('single pass', 1), ('single-number', 1), ('slow fast pointer', 1), ('solution-share', 1), ('solution-sharing', 1), ('solution-sharing-cpp', 1), ('solution-sharing-java', 1), ('sort method', 1), ('sorted array', 1), ('space optimization', 1), ('space-complexity-1', 1), ('splitarray', 1), ('super-easy', 1), ('swap sort', 1), ('swap-in-place', 1), ('swapping', 1), ('tail-recursion', 1), ('tailrec', 1), ('thoughts', 1), ('three-different-solutions', 1), ('time complexity', 1), ('troubleshooting', 1), ('try', 1), ('two pointer', 1), ('two pointer approach', 1), ('two pointers', 1), ('two-different-solutions', 1), ('typescript', 1), ('unclear', 1), ('unordered map', 1), ('using-string', 1), ('vectors', 1), ('video-explanation', 1), ('well-explained', 1), ('without extra space', 1), ('works-on-my-machine', 1), ('wrong-answer', 1), ('xor', 1)]"
284,Peeking Iterator,https://leetcode.com/problems/peeking-iterator,"Design an iterator that supports the peek operation on a list in addition to the hasNext and the next operations.

Implement the PeekingIterator class:


	PeekingIterator(int[] nums) Initializes the object with the given integer array nums.
	int next() Returns the next element in the array and moves the pointer to the next element.
	bool hasNext() Returns true if there are still elements in the array.
	int peek() Returns the next element in the array without moving the pointer.",['design'],Medium,780,549,264653,135040,"[""Binary Search Tree Iterator"", ""Flatten 2D Vector"", ""Zigzag Iterator""]","[('java', 25), ('python', 17), ('cpp', 15), ('c++', 10), ('iterator', 8), ('python3', 8), ('javascript', 7), ('python 3', 4), ('solution', 4), ('c#', 3), ('design', 3), ('easy-understanding', 3), ('explained', 3), ('java-solution', 3), ('ruby', 3), ('c', 2), ('class design', 2), ('constant-space', 2), ('cpp solution', 2), ('golang', 2), ('js', 2), ('peeking-iterator', 2), ('short', 2), ('test-case', 2), ('video-explanation', 2), ('100 memory', 1), ('90 faster', 1), ('90+', 1), ('c++ code', 1), ('c++ solution', 1), ('c++11', 1), ('caching', 1), ('class', 1), ('class inheritance', 1), ('constant space', 1), ('cplusplus', 1), ('cpp doubt', 1), ('difficulty', 1), ('easy', 1), ('easy to understand', 1), ('easy-understand', 1), ('explanation', 1), ('explanations', 1), ('fast and simple', 1), ('flag', 1), ('fun', 1), ('golang-solution', 1), ('greedy', 1), ('how-not-to', 1), ('improve', 1), ('inheritance', 1), ('interview help', 1), ('iterator.v', 1), ('javascript solution', 1), ('koltin', 1), ('kotlin', 1), ('kotlin-solution', 1), ('lazy', 1), ('leetcode-issue-only', 1), ('memoization', 1), ('o1 space', 1), ('object oriented', 1), ('one line', 1), ('one-liner', 1), ('oop', 1), ('optimal', 1), ('peekingiterator', 1), ('purpose-of-question', 1), ('python3.8', 1), ('scala', 1), ('simple', 1), ('simple solution', 1), ('solutions', 1), ('space-efficient', 1), ('stack', 1), ('swif', 1), ('swift', 1), ('testcase-wrong', 1), ('thinking process', 1)]"
283,Move Zeroes,https://leetcode.com/problems/move-zeroes,"Given an integer array nums, move all 0's to the end of it while maintaining the relative order of the non-zero elements.

Note that you must do this in-place without making a copy of the array.","['array', 'two-pointers']",Easy,5425,170,1892674,1111469,"[""Remove Element""]","[('java', 179), ('python', 124), ('javascript', 82), ('python 3', 76), ('c++', 75), ('cpp', 74), ('two-pointers', 52), ('java-solution', 41), ('python3', 40), ('solution', 37), ('simple', 29), ('easy-understanding', 22), ('golang', 20), ('javascript solution', 20), ('0ms', 18), ('cpp solution', 18), ('short', 18), ('simple solution', 18), ('two-pointer', 18), ('in-place', 17), ('two pointers', 17), ('c', 15), ('easy-undestand', 14), ('swift', 14), ('array', 12), ('c#', 12), ('move-zeroes', 12), ('accepted', 11), ('easy', 11), ('easy-to-understand', 11), ('easy-understand', 11), ('optimal', 11), ('easytounderstand', 10), ('linear time', 10), ('cpp easy', 8), ('c++ code', 6), ('constant space', 6), ('inplace', 6), ('kotlin', 6), ('ruby', 6), ('solution-python', 6), ('1ms', 5), ('fast-solution', 5), ('golang-solution', 5), ('movezeroes', 5), ('swap', 5), ('100 speed', 4), ('accepted solution', 4), ('append', 4), ('arrays', 4), ('c++11', 4), ('explained', 4), ('fast', 4), ('go', 4), ('help needed', 4), ('javascrip', 4), ('js', 4), ('list', 4), ('move zeros', 4), ('pop', 4), ('python2', 4), ('queue', 4), ('twopointer', 4), ('wrong-answer', 4), ('#javascript', 3), ('0ms runtime', 3), ('100 faster', 3), ('100 faster runtime', 3), ('2 pointer', 3), ('bubble-sort', 3), ('bubblesort', 3), ('c code', 3), ('c++ solution', 3), ('clean code', 3), ('constant-space', 3), ('facebook', 3), ('fastest', 3), ('help', 3), ('java ac solution', 3), ('linear-time', 3), ('loop', 3), ('one-liner', 3), ('oneline', 3), ('optimized', 3), ('php', 3), ('rust', 3), ('stl', 3), ('stl algorithms', 3), ('swap-in-place', 3), ('two pointer', 3), ('vector', 3), ('1-line', 2), ('2 pointers', 2), ('approach', 2), ('basic', 2), ('beats 100', 2), ('clean', 2), ('commented', 2), ('comments', 2), ('concise', 2), ('constant memory', 2), ('easy to understand', 2), ('easy understanding', 2), ('erase method', 2), ('fast-runtime', 2), ('for-loop', 2), ('go-solution', 2), ('iterative', 2), ('memory optimized', 2), ('move zeroes', 2), ('one-loop', 2), ('one-pass', 2), ('partition', 2), ('php solution', 2), ('problem', 2), ('question', 2), ('readable', 2), ('remove', 2), ('simple approach', 2), ('simple-solution', 2), ('single-loop', 2), ('solution-sharing-python', 2), ('sort', 2), ('space-efficient', 2), ('splice', 2), ('two pointer technique', 2), ('twopointers', 2), ('#cpp', 1), ('#easy-understand', 1), ('#easy-understanding', 1), ('#easysolution', 1), ('#slidingwindow', 1), ('#two-pointers', 1), ('1 scan', 1), ('100', 1), ('100 faster cpp', 1), ('100 space', 1), ('1ms runtime', 1), ('2-pointers', 1), ('2pointer', 1), ('2pointers', 1), ('4ms', 1), ('5 lines', 1), ('8 lines', 1), ('99.88', 1), ('algorithm', 1), ('algorithm-explained', 1), ('algorithms', 1), ('array functions', 1), ('array nesting', 1), ('asahiocean', 1), ('basics', 1), ('big o of n', 1), ('bubble sort', 1), ('c++ easy to understand', 1), ('c++ soln', 1), ('clarification', 1), ('clear solution', 1), ('commentary', 1), ('commented code', 1), ('comments added', 1), ('comments-added', 1), ('complexity-analysis', 1), ('cool', 1), ('count', 1), ('counting algorithm', 1), ('cpp doubt', 1), ('cpp-functional', 1), ('cpp-solution', 1), ('csharp', 1), ('deque', 1), ('destructuring assignment', 1), ('divide and conquer', 1), ('do not know my codes', 1), ('doubt', 1), ('doubts', 1), ('dynamic-programming', 1), ('easiest', 1), ('easily understood', 1), ('easy solution', 1), ('easy to read', 1), ('easy-solition', 1), ('easy-understsand', 1), ('efficiency', 1), ('efficient solution', 1), ('elegant', 1), ('enumeration', 1), ('explaination', 1), ('explanation with code', 1), ('extend', 1), ('facebook 2 pointers', 1), ('facebook intern', 1), ('facebook interview', 1), ('facebook-india', 1), ('faceebook', 1), ('fast and simple', 1), ('faster than 99.41', 1), ('fastest java slution', 1), ('filter', 1), ('fun', 1), ('generalised-solution', 1), ('go lang', 1), ('hints', 1), ('illustrated', 1), ('in place', 1), ('in-place operation', 1), ('index', 1), ('insert', 1), ('insertion sort', 1), ('internal', 1), ('interview-friendly', 1), ('intuitive', 1), ('inverse', 1), ('ios', 1), ('iteration', 1), ('iterative way', 1), ('iterator', 1), ('java solution', 1), ('java-8', 1), ('javasacript', 1), ('javscript', 1), ('kotlin-solution', 1), ('kotlinvim', 1), ('lambda', 1), ('lambda expression', 1), ('linear', 1), ('linear memory', 1), ('linear seach', 1), ('linear traversal', 1), ('list-slicing', 1), ('logic explained', 1), ('minimum-operation', 1), ('n time', 1), ('neat', 1), ('nlogn', 1), ('no swap', 1), ('o of n solution', 1), ('off', 1), ('one liner', 1), ('one pass', 1), ('one pass solution', 1), ('oneliner', 1), ('pointer', 1), ('ptyhon3', 1), ('pushback', 1), ('pyhton', 1), ('pyrhon', 1), ('python3.8', 1), ('pythonic', 1), ('pythonpython3', 1), ('question need help', 1), ('quick', 1), ('scala', 1), ('short code', 1), ('simpe', 1), ('simple and elegant', 1), ('simple clear c++ solution', 1), ('simple java solution', 1), ('simple python solution', 1), ('simpler', 1), ('simplest', 1), ('simplest python', 1), ('single loop', 1), ('single pass', 1), ('sliding-window', 1), ('solition-sharing', 1), ('solution-cpp', 1), ('solution-sharing-cpp', 1), ('solutioncode', 1), ('sorting', 1), ('space-complexity-1', 1), ('straightforward', 1), ('swapping', 1), ('thinking process', 1), ('time complexity', 1), ('time-complexity-n', 1), ('timsort', 1), ('two pointer approach', 1), ('typescript', 1), ('typescript javascript', 1), ('unique', 1), ('vectors', 1), ('very easy', 1), ('very easy to understand', 1), ('video explanation', 1), ('visual', 1), ('visualization', 1), ('well-commented', 1), ('while-loop', 1), ('window', 1), ('window-sliding', 1), ('wrong-sample', 1), ('zeros', 1)]"
282,Expression Add Operators,https://leetcode.com/problems/expression-add-operators,"Given a string num that contains only digits and an integer target, return all possibilities to add the binary operators '+', '-', or '*' between the digits of num so that the resultant expression evaluates to the target value.",['divide-and-conquer'],Hard,1644,274,353787,130905,"[""Evaluate Reverse Polish Notation"", ""Basic Calculator"", ""Basic Calculator II"", ""Different Ways to Add Parentheses"", ""Target Sum""]","[('python', 17), ('cpp', 11), ('backtracking', 9), ('dfs', 8), ('c++', 6), ('java', 5), ('javascript', 5), ('python3', 5), ('python 3', 3), ('time-limit-exceeded', 3), ('c#', 2), ('depth first search', 2), ('dfs simple solution', 2), ('golang', 2), ('help me', 2), ('help needed', 2), ('iterative', 2), ('parser', 2), ('recursion', 2), ('backrtracking', 1), ('beating-100-submissions', 1), ('bfs', 1), ('cpp easy', 1), ('cpp solution', 1), ('dfs recursive', 1), ('dfs-topdown', 1), ('doubt', 1), ('doubts', 1), ('easiest', 1), ('easy-understand', 1), ('easytounderstand', 1), ('explaination', 1), ('explanation with code', 1), ('expression-add-operators', 1), ('facebook', 1), ('faster than 95.46', 1), ('go', 1), ('iterative-bfs', 1), ('iterator', 1), ('java-solution', 1), ('kotlinvim', 1), ('meet-in-the-middle', 1), ('memoization', 1), ('question', 1), ('ruby', 1), ('scala', 1), ('search', 1), ('short', 1), ('simple', 1), ('solution', 1), ('solution-sharing-cpp', 1), ('tensor', 1), ('test-case', 1), ('well-explained', 1), ('wrong-answer', 1)]"
279,Perfect Squares,https://leetcode.com/problems/perfect-squares,"Given an integer n, return the least number of perfect square numbers that sum to n.

A perfect square is an integer that is the square of an integer; in other words, it is the product of some integer with itself. For example, 1, 4, 9, and 16 are perfect squares while 3 and 11 are not.","['math', 'dynamic-programming', 'breadth-first-search']",Medium,4303,234,798536,393896,"[""Count Primes"", ""Ugly Number II""]","[('dynamic programming', 74), ('java', 64), ('python', 53), ('dp', 43), ('dynamic-programming', 40), ('cpp', 35), ('c++', 30), ('bfs', 29), ('python 3', 26), ('memoization', 19), ('javascript', 16), ('recursion', 13), ('java-solution', 11), ('cpp solution', 10), ('python3', 10), ('dfs', 9), ('recursive', 9), ('coin-change', 8), ('easy-undestand', 8), ('time-limit-exceeded', 8), ('c++ code', 7), ('easy-understand', 7), ('simple solution', 6), ('c#', 5), ('dp-programming', 5), ('easy', 5), ('golang', 5), ('short', 5), ('solution', 5), ('cpp easy', 4), ('easy-to-understand', 4), ('fast', 4), ('lagrange', 4), ('math', 4), ('math-solution', 4), ('accepted', 3), ('easy-understanding', 3), ('go', 3), ('maths', 3), ('optimized', 3), ('ruby', 3), ('simple', 3), ('swift', 3), ('test-case', 3), ('time-complexity', 3), ('#dp', 2), ('best-solution', 2), ('best-submission', 2), ('bottom-up-algorithm', 2), ('breadth-first-search', 2), ('commented', 2), ('cpp without dp', 2), ('dp-techqique', 2), ('easy to understand', 2), ('golang-solution', 2), ('js', 2), ('knapsack', 2), ('lagranges theorem', 2), ('mathematics', 2), ('memoized', 2), ('recurision', 2), ('recursive easy', 2), ('recusion', 2), ('simple clear c++ solution', 2), ('static-dp', 2), ('tabulation', 2), ('#279', 1), ('#backtracking', 1), ('#dfs', 1), ('#recursive', 1), ('2sum', 1), ('3sum', 1), ('aijax', 1), ('algorithms', 1), ('all solutions', 1), ('and', 1), ('awesome samriddhi', 1), ('beginner', 1), ('beginner friendly', 1), ('bfs python', 1), ('bfs simple solution', 1), ('bidirectional-bfs', 1), ('bottom up', 1), ('bottom up dp', 1), ('bottom-up', 1), ('breadth first', 1), ('breadth first search', 1), ('breath first search', 1), ('brute force', 1), ('c++ dynamic programming', 1), ('c++ easy to understand', 1), ('c++17', 1), ('clean code', 1), ('combinatories', 1), ('complexity analysis', 1), ('constant-space', 1), ('cpp-solution', 1), ('csharp', 1), ('dfs recursive', 1), ('dfs with memo', 1), ('dfs-bfs', 1), ('diagram', 1), ('different approach', 1), ('dp-iterative', 1), ('dry-run', 1), ('dynamic', 1), ('dynamic typing', 1), ('easy to read', 1), ('easy-implementation', 1), ('easy-solition', 1), ('easytounderstand', 1), ('explained', 1), ('explanations', 1), ('fast-solution', 1), ('faster than 99.66', 1), ('fastest', 1), ('four-square-theorem', 1), ('global', 1), ('go-solution', 1), ('help needed', 1), ('improve', 1), ('incorrect-test-case', 1), ('intersection', 1), ('intutive', 1), ('iterative', 1), ('iterative way', 1), ('java dynamic programming', 1), ('java solution', 1), ('javascrip', 1), ('javascript solution', 1), ('javascriptes6', 1), ('js javascript', 1), ('kotlin', 1), ('kotllin', 1), ('linear time', 1), ('loop', 1), ('loops', 1), ('mathematic', 1), ('memorization', 1), ('memory-limit-exceeded', 1), ('number theory', 1), ('numbertheory', 1), ('optimization process', 1), ('perfect square', 1), ('perfect squares', 1), ('prime factorization', 1), ('programming', 1), ('pyhton 3', 1), ('python deque', 1), ('pythonpython3', 1), ('queue', 1), ('readable', 1), ('recursive solution', 1), ('recursively', 1), ('resursive', 1), ('ritik', 1), ('run-time-error', 1), ('scala', 1), ('self explanatory', 1), ('set', 1), ('sets', 1), ('simpleunderstanding', 1), ('solution-sharing-cpp', 1), ('square-time', 1), ('target-sum', 1), ('time limit exceeded', 1), ('tle', 1), ('top down', 1), ('top down approach', 1), ('top down dp', 1), ('top-down', 1), ('ultra simple', 1), ('unbounded-knapsack', 1), ('upvote', 1), ('vector', 1), ('video-explanation', 1), ('well-commented', 1), ('well-explained', 1), ('whiteboard', 1), ('why', 1), ('wrong-answer', 1), ('xjq', 1)]"
278,First Bad Version,https://leetcode.com/problems/first-bad-version,"You are a product manager and currently leading a team to develop a new product. Unfortunately, the latest version of your product fails the quality check. Since each version is developed based on the previous version, all the versions after a bad version are also bad.

Suppose you have n versions [1, 2, ..., n] and you want to find out the first bad one, which causes all the following ones to be bad.

You are given an API bool isBadVersion(version) which returns whether version is bad. Implement a function to find the first bad version. You should minimize the number of calls to the API.",['binary-search'],Easy,2162,839,1480190,561775,"[""Find First and Last Position of Element in Sorted Array"", ""Search Insert Position"", ""Guess Number Higher or Lower""]","[('binary-search', 106), ('python', 46), ('java', 45), ('c++', 38), ('cpp', 33), ('binary search', 27), ('binarysearch', 27), ('python 3', 24), ('javascript', 18), ('solution', 16), ('c#', 14), ('java-solution', 13), ('python3', 10), ('cpp solution', 8), ('recursion', 8), ('easy-understand', 7), ('easy-undestand', 6), ('golang', 6), ('short', 6), ('time-limit-exceeded', 5), ('c++ code', 4), ('easy', 4), ('easy-understanding', 4), ('first-bad-version', 4), ('ruby', 4), ('simple', 4), ('simple solution', 4), ('#javascript', 3), ('binarysearh', 3), ('go', 3), ('100 faster runtime', 2), ('clean', 2), ('constant-space', 2), ('detailed explanation', 2), ('easiest', 2), ('golang-solution', 2), ('improve', 2), ('kotlinvim', 2), ('logn', 2), ('overflow', 2), ('rust', 2), ('simple clear c++ solution', 2), ('swift', 2), ('understandable', 2), ('#binary-search', 1), ('#recursive', 1), ('0ms', 1), ('100 faster', 1), ('100 memory', 1), ('100 speed', 1), ('api', 1), ('array', 1), ('boundary', 1), ('brute-force', 1), ('c', 1), ('c code', 1), ('c++ easy to understand', 1), ('c++ solution', 1), ('clean code', 1), ('commented', 1), ('comments', 1), ('common question', 1), ('complexity-analysis', 1), ('concise', 1), ('cplusplus', 1), ('cpp 100', 1), ('cpp-solution', 1), ('csharp', 1), ('divide and conquer', 1), ('easy-to-understand', 1), ('easytounderstand', 1), ('efficient', 1), ('explaination', 1), ('explained solution', 1), ('explanation with logic', 1), ('explanatory comments', 1), ('fast and simple', 1), ('fastest', 1), ('first bad version', 1), ('first-appearance', 1), ('firstbadversion', 1), ('good', 1), ('good variable names', 1), ('hashmap', 1), ('iteration', 1), ('iterative', 1), ('iterative solution', 1), ('java ac solution', 1), ('java solution', 1), ('java8', 1), ('javascript solution', 1), ('javascriptes6', 1), ('jest', 1), ('js', 1), ('kotlin', 1), ('kotlin-solution', 1), ('leftmostbinarysearch', 1), ('linear', 1), ('logarithmic-time', 1), ('meiyaowen', 1), ('not integer', 1), ('o1 space', 1), ('olog n', 1), ('one-pass', 1), ('optimal', 1), ('pivot', 1), ('problem', 1), ('python2', 1), ('recursive solution', 1), ('recursively', 1), ('recusion', 1), ('runtime-error', 1), ('simp', 1), ('solution-sharing-cpp', 1), ('solution-sharing-python', 1), ('stack-over-flow', 1), ('structured code', 1), ('test', 1), ('test-case', 1), ('time-limit-exceeded-java', 1), ('tle', 1), ('understand', 1), ('whileloop', 1), ('wrong', 1), ('xjq', 1)]"
275,H-Index II,https://leetcode.com/problems/h-index-ii,"Given an array of integers citations where citations[i] is the number of citations a researcher received for their ith paper and citations is sorted in an ascending order, return compute the researcher's h-index.

According to the definition of h-index on Wikipedia: A scientist has an index h if h of their n papers have at least h citations each, and the other n − h papers have no more than h citations each.

If there are several possible values for h, the maximum one is taken as the h-index.",['binary-search'],Medium,545,839,388378,141372,"[""H-Index""]","[('binary-search', 44), ('java', 21), ('python', 20), ('binary search', 19), ('cpp', 13), ('python 3', 12), ('c++', 11), ('python3', 8), ('binarysearch', 5), ('java-solution', 5), ('javascript', 5), ('easy-understand', 4), ('simple solution', 4), ('solution', 4), ('bisect', 2), ('bisectleft', 2), ('c#', 2), ('c++ code', 2), ('cpp solution', 2), ('easy-to-understand', 2), ('explained', 2), ('golang', 2), ('linear search', 2), ('short', 2), ('swift', 2), ('0ms', 1), ('0ms-solution', 1), ('1line', 1), ('275', 1), ('algorithms', 1), ('array', 1), ('best', 1), ('binary solution', 1), ('binarysearh', 1), ('bisect-python', 1), ('compile-error', 1), ('concise', 1), ('constant-space', 1), ('dynamic programming', 1), ('easy undestanding', 1), ('easy-solution', 1), ('easy-understanding', 1), ('easy-undestand', 1), ('easysolution', 1), ('easyunderstanding', 1), ('explanation of logic', 1), ('fast and simple', 1), ('fast-solution', 1), ('faster-than-100', 1), ('help', 1), ('hindex2', 1), ('histogram', 1), ('iteration', 1), ('iterative', 1), ('iterative solution', 1), ('java solution', 1), ('js', 1), ('linear', 1), ('python2', 1), ('ruby', 1), ('rust', 1), ('short code', 1), ('shortest', 1), ('simple java solution', 1), ('sorting', 1), ('space-efficient', 1), ('stack', 1), ('test-case', 1), ('two pointer', 1), ('two-different-solutions', 1), ('updowndota', 1), ('video explanation', 1), ('wrong-answer', 1)]"
274,H-Index,https://leetcode.com/problems/h-index,"Given an array of integers citations where citations[i] is the number of citations a researcher received for their ith paper, return compute the researcher's h-index.

According to the definition of h-index on Wikipedia: A scientist has an index h if h of their n papers have at least h citations each, and the other n − h papers have no more than h citations each.

If there are several possible values for h, the maximum one is taken as the h-index.","['hash-table', 'sort']",Medium,901,1491,553007,201708,"[""H-Index II""]","[('java', 43), ('cpp', 42), ('python', 21), ('binary-search', 18), ('c++', 18), ('python 3', 16), ('sort', 14), ('easy-understand', 11), ('javascript', 10), ('easy-understanding', 9), ('python3', 6), ('solution', 6), ('sorting', 6), ('binarysearch', 5), ('short', 5), ('binary search', 4), ('bucket-sort', 4), ('cpp solution', 4), ('bucket sort', 3), ('c#', 3), ('dynamic-programming', 3), ('easy to understand', 3), ('explained', 3), ('golang', 3), ('hashtable', 3), ('sorted array', 3), ('swift', 3), ('100', 2), ('array-sort', 2), ('constant-space', 2), ('easytounderstand', 2), ('fast', 2), ('hash table', 2), ('heap', 2), ('ruby', 2), ('wrong-answer', 2), ('#python 3', 1), ('0ms', 1), ('100 speed', 1), ('100 time', 1), ('274', 1), ('4 liner', 1), ('90 space', 1), ('algorithms', 1), ('array', 1), ('arrays.sort', 1), ('binarysearh', 1), ('bs', 1), ('buckets', 1), ('c', 1), ('c# solutions', 1), ('c++ code', 1), ('c++ solution', 1), ('c++11', 1), ('clarification', 1), ('clean code', 1), ('commented', 1), ('count-sort', 1), ('counting', 1), ('counting-sort', 1), ('cpp easy', 1), ('cpp-solution', 1), ('cumulative sum', 1), ('description', 1), ('description-error', 1), ('divide', 1), ('divideconquer', 1), ('easiest', 1), ('easiest solution', 1), ('easy-to-understand', 1), ('easy-undestand', 1), ('easyunderstanding', 1), ('efficient solution', 1), ('explained solution', 1), ('explanation with logic', 1), ('extra-space', 1), ('for-loop', 1), ('fully explained', 1), ('functional', 1), ('functional-programming', 1), ('go', 1), ('golang-solution', 1), ('in-space', 1), ('interview', 1), ('iterative', 1), ('iterative solution', 1), ('java ac solution', 1), ('java8', 1), ('javacript', 1), ('js', 1), ('linear time', 1), ('linear-search', 1), ('linear-time', 1), ('math', 1), ('meiyaowen', 1), ('nlogn', 1), ('priorityqueue', 1), ('problem explained', 1), ('quick select', 1), ('quick-selection', 1), ('recursively', 1), ('runtime-error', 1), ('rust', 1), ('scala', 1), ('search', 1), ('searching', 1), ('share-solution', 1), ('short code', 1), ('simple', 1), ('simple solution', 1), ('simplest', 1), ('straight-forward', 1), ('trick', 1), ('typescript', 1), ('understanding', 1), ('unordered map', 1), ('updowndota', 1), ('video', 1), ('video-explanation', 1), ('wrong', 1)]"
273,Integer to English Words,https://leetcode.com/problems/integer-to-english-words,Convert a non-negative integer num to its English words representation.,"['math', 'string']",Hard,1466,3656,825202,234229,"[""Integer to Roman""]","[('java', 37), ('python', 24), ('cpp', 21), ('javascript', 17), ('c++', 12), ('c#', 11), ('python 3', 11), ('recursion', 9), ('solution', 7), ('easy-understand', 6), ('python3', 5), ('recursive', 5), ('easy-undestand', 4), ('short', 4), ('swift', 4), ('easy', 3), ('easy-to-understand', 3), ('easy-understanding', 3), ('facebook', 3), ('integer-to-english-words', 3), ('iterative', 3), ('java-solution', 3), ('js', 3), ('ruby', 3), ('simple', 3), ('string', 3), ('cpp solution', 2), ('divide and conquer', 2), ('fast', 2), ('golang', 2), ('kotlin', 2), ('math', 2), ('recurision', 2), ('simple solution', 2), ('simplest', 2), ('strings', 2), ('0ms', 1), ('273', 1), ('3msc++vesion', 1), ('array', 1), ('beats 98 pc', 1), ('beginner friendly', 1), ('best-submission', 1), ('binary-search', 1), ('c', 1), ('c code', 1), ('c++ code', 1), ('clean', 1), ('clean-efficient-code', 1), ('closure', 1), ('comments', 1), ('concise-solution', 1), ('constant-space', 1), ('constant-time', 1), ('dict', 1), ('dictionaries', 1), ('dictionary c#', 1), ('dummy-friendly', 1), ('easy to understand', 1), ('edge-case', 1), ('explained', 1), ('explanation', 1), ('facebook-interview', 1), ('faster than 90', 1), ('fastest', 1), ('go', 1), ('hashmap', 1), ('improve', 1), ('intuitive', 1), ('javascript object', 1), ('javascript solution', 1), ('lookup', 1), ('python2', 1), ('readable', 1), ('scalable', 1), ('scalable-solution', 1), ('short solution', 1), ('simplesweet', 1), ('simulation', 1), ('stack', 1), ('straightforward', 1), ('stringbuilder', 1), ('test-case', 1), ('testcase error', 1), ('treemap', 1), ('unordered map', 1), ('updowndota', 1), ('verbose', 1), ('video', 1), ('well-commented', 1), ('wrong-answer', 1), ('youtube', 1)]"
268,Missing Number,https://leetcode.com/problems/missing-number,"Given an array nums containing n distinct numbers in the range [0, n], return the only number in the range that is missing from the array.

Follow up: Could you implement a solution using only O(1) extra space complexity and O(n) runtime complexity?","['array', 'math', 'bit-manipulation']",Easy,2967,2531,1196679,663829,"[""First Missing Positive"", ""Single Number"", ""Find the Duplicate Number"", ""Couples Holding Hands""]","[('java', 108), ('c++', 95), ('python', 89), ('cpp', 75), ('javascript', 55), ('python 3', 44), ('math', 35), ('xor', 31), ('java-solution', 28), ('easy-understanding', 22), ('python3', 22), ('solution', 19), ('bit manipulation', 18), ('linear time', 18), ('c#', 17), ('cpp solution', 17), ('bit-manipulation', 15), ('simple', 15), ('constant-space', 13), ('missing number', 13), ('constant space', 12), ('golang', 12), ('one-liner', 12), ('easy-to-understand', 11), ('easy', 10), ('array', 9), ('easy-understand', 9), ('constant memory', 8), ('easy-undestand', 8), ('linear-time', 7), ('simple solution', 7), ('accepted', 6), ('c', 6), ('c++ code', 6), ('easiest', 6), ('kotlin', 6), ('maths', 6), ('rust', 6), ('set', 6), ('swift', 6), ('cpp easy', 5), ('go', 5), ('golang-solution', 5), ('java ac solution', 5), ('sort', 5), ('sum', 5), ('binary-search', 4), ('bitwise', 4), ('cyclic sort', 4), ('easytounderstand', 4), ('explained', 4), ('fast', 4), ('go-solution', 4), ('javascript solution', 4), ('math-solution', 4), ('one line', 4), ('reduce', 4), ('ruby', 4), ('short', 4), ('simple clear c++ solution', 4), ('sum of n natural number', 4), ('brute force', 3), ('cyclic-sort', 3), ('fast-solution', 3), ('fastest', 3), ('gauss', 3), ('gauss formula', 3), ('hash table', 3), ('js', 3), ('mathematics', 3), ('o-n', 3), ('one liner', 3), ('oneline', 3), ('php', 3), ('sets', 3), ('simplest', 3), ('sum of series', 3), ('typescript', 3), ('accepted solution', 2), ('arithmetic progression', 2), ('arithmeticexception', 2), ('best solution', 2), ('best solution in c++', 2), ('best-submission', 2), ('bit operation', 2), ('bitwise operation', 2), ('c code', 2), ('c++ easy to understand', 2), ('cycle sort', 2), ('easily explained', 2), ('easy undestanding', 2), ('fast and simple', 2), ('formula', 2), ('gauss-formula', 2), ('greater than 99', 2), ('hashmap', 2), ('hashset', 2), ('iteration', 2), ('java8', 2), ('javascrip', 2), ('linear', 2), ('missingnumber', 2), ('most optimal', 2), ('oneliner', 2), ('overflow', 2), ('php solution', 2), ('pyhton', 2), ('rank 1', 2), ('readable', 2), ('scala', 2), ('simple-solution', 2), ('solution-sharing-cpp', 2), ('sum formula', 2), ('swap', 2), ('test-case', 2), ('testcase-wrong', 2), ('video', 2), ('video-explaination', 2), ('well-commented', 2), ('#csharp', 1), ('#explained', 1), ('#javascript', 1), ('0 ms', 1), ('1 line', 1), ('1-line', 1), ('1-liner', 1), ('100 faster', 1), ('100 memory', 1), ('100 space', 1), ('100 speed', 1), ('2 line', 1), ('2 liner', 1), ('2 lines', 1), ('2-line', 1), ('2-liner', 1), ('2-lines', 1), ('268', 1), ('3 lines', 1), ('ac solution', 1), ('accumulate', 1), ('algorithm', 1), ('algorithm-proof', 1), ('algorithms', 1), ('amazon', 1), ('amazon interview', 1), ('answer', 1), ('arithmetic-operations', 1), ('arrays', 1), ('basicmath', 1), ('beginner friendly', 1), ('best', 1), ('best explaination', 1), ('best java solution', 1), ('best-solution', 1), ('bitwise operators', 1), ('bitwise xor', 1), ('brute force solution', 1), ('c++ cpp', 1), ('c++ solution', 1), ('c++14', 1), ('clean', 1), ('clean code', 1), ('codedecks', 1), ('combination', 1), ('commentary', 1), ('commented', 1), ('comparison', 1), ('concepts', 1), ('constantspace', 1), ('constexpr', 1), ('cplusplus', 1), ('cpp doubt', 1), ('cpp short solution', 1), ('cpp-functional', 1), ('csharp', 1), ('detailed', 1), ('detailed explanation', 1), ('diagram', 1), ('difficulty', 1), ('easy to understand', 1), ('easy-explanation', 1), ('easy-solution', 1), ('efficient', 1), ('efficient approach', 1), ('enumerate', 1), ('explaination', 1), ('explanation of logic', 1), ('explanation with logic', 1), ('facebook', 1), ('fasterthan100', 1), ('fold', 1), ('for loops', 1), ('for-loop', 1), ('go lang', 1), ('google', 1), ('hash', 1), ('intuitive', 1), ('iterative', 1), ('iterator', 1), ('java simple', 1), ('java-8', 1), ('java-script', 1), ('javascipt', 1), ('js javascript', 1), ('js solution', 1), ('kotlin-solution', 1), ('kotlinvim', 1), ('linear memory', 1), ('linear space', 1), ('linear space time', 1), ('loop', 1), ('mathematic', 1), ('mathematical solution', 1), ('memoization', 1), ('memory-search', 1), ('minimalism', 1), ('natural number', 1), ('neat-explanation', 1), ('no math', 1), ('non-sum', 1), ('num as index', 1), ('on', 1), ('one pass', 1), ('onepass', 1), ('optimal', 1), ('original', 1), ('original solution', 1), ('point-wise-explained', 1), ('python2', 1), ('python3.3', 1), ('python3.8', 1), ('rajawatbanna', 1), ('ranges', 1), ('reduction', 1), ('runtime', 1), ('sequence', 1), ('series', 1), ('short code', 1), ('sign-flip', 1), ('simple python accepted', 1), ('single line', 1), ('single-liner', 1), ('slow', 1), ('slowest c++', 1), ('soliton', 1), ('solution-python', 1), ('solution-sharing', 1), ('sort-function', 1), ('sorted', 1), ('sorted array', 1), ('sorting', 1), ('space o1', 1), ('space-complexity', 1), ('space-complexity-1', 1), ('step by step', 1), ('stl', 1), ('stl algorithms', 1), ('straight', 1), ('streams', 1), ('swap-in-place', 1), ('swift5', 1), ('test case', 1), ('test cases', 1), ('test-cases', 1), ('testcase', 1), ('thought-process', 1), ('three-different-solutions', 1), ('time optimize', 1), ('time-complexity', 1), ('tips', 1), ('top5', 1), ('tree', 1), ('triangular number', 1), ('tricks', 1), ('tricky', 1), ('two-pass', 1), ('unorderedset', 1), ('updowndota', 1), ('veryfast', 1), ('video explanation', 1), ('video-explanation', 1), ('xjq', 1), ('xor operation', 1), ('zip', 1)]"
264,Ugly Number II,https://leetcode.com/problems/ugly-number-ii,"An ugly number is a positive integer whose prime factors are limited to 2, 3, and 5.

Given an integer n, return the nth ugly number.","['math', 'dynamic-programming', 'heap']",Medium,2565,158,477335,205540,"[""Merge k Sorted Lists"", ""Count Primes"", ""Ugly Number"", ""Perfect Squares"", ""Super Ugly Number"", ""Ugly Number III""]","[('java', 39), ('dynamic programming', 29), ('python', 29), ('c++', 17), ('cpp', 17), ('dynamic-programming', 17), ('dp', 14), ('python3', 10), ('javascript', 9), ('python 3', 9), ('java-solution', 7), ('easy-understand', 6), ('heap', 6), ('c++ code', 5), ('cpp solution', 5), ('short', 5), ('binary-search', 4), ('easy-understanding', 4), ('priority queue', 4), ('priority-queue', 4), ('easy', 3), ('easy-undestand', 3), ('explained', 3), ('golang', 3), ('heapq', 3), ('set', 3), ('simple solution', 3), ('swift', 3), ('treeset', 3), ('3 pointer', 2), ('algorithms', 2), ('bfs', 2), ('c', 2), ('c#', 2), ('go-solution', 2), ('js', 2), ('min heap', 2), ('min-heap', 2), ('ruby', 2), ('scala', 2), ('sets', 2), ('solution', 2), ('time-limit-exceeded', 2), ('#heap', 1), ('#simplecode', 1), ('100', 1), ('100 faster runtime', 1), ('accepted', 1), ('beginner friendly', 1), ('beginnerfriendly', 1), ('best-solution-ever', 1), ('best-submission', 1), ('binary search', 1), ('bisect', 1), ('bottoms-up', 1), ('brute-force', 1), ('c++ solution', 1), ('cache', 1), ('clean code', 1), ('clear explanation', 1), ('clear solution', 1), ('commented', 1), ('comments-added', 1), ('cpp code', 1), ('cpp easy', 1), ('dfs', 1), ('dfs with dp', 1), ('dp java', 1), ('dp python', 1), ('easy to understand', 1), ('easy-to-understand', 1), ('es6', 1), ('explaination', 1), ('explanation with logic', 1), ('explanations', 1), ('fast', 1), ('fast and simple', 1), ('fastest', 1), ('functional programming', 1), ('go', 1), ('goldmansachs', 1), ('greedy', 1), ('hack', 1), ('hashmap', 1), ('help', 1), ('help-wanted', 1), ('iterative', 1), ('javascript solution', 1), ('javascriptes6', 1), ('js javascript', 1), ('kotlin', 1), ('kotlinvim', 1), ('large-input', 1), ('lazy', 1), ('linear space', 1), ('linear time', 1), ('linear-space', 1), ('linear-time', 1), ('linked-list', 1), ('logic explained', 1), ('look-up-table', 1), ('map', 1), ('math', 1), ('math.min', 1), ('max-heap', 1), ('minheap', 1), ('missing-test-case', 1), ('nlogn', 1), ('number', 1), ('one pass solution', 1), ('optimization', 1), ('optimized', 1), ('prime', 1), ('priority', 1), ('python2', 1), ('queue', 1), ('runtime12ms', 1), ('rust', 1), ('sandeepkumar', 1), ('self-explanatory', 1), ('set c++', 1), ('short code', 1), ('simple', 1), ('simple clear c++ solution', 1), ('slow-performance', 1), ('solution-javascript', 1), ('solution-share', 1), ('solution-sharing-cpp', 1), ('solution-sharingjava', 1), ('sort', 1), ('stl', 1), ('tabulation', 1), ('template', 1), ('testcase-wrong', 1), ('three pointers', 1), ('twopointer', 1), ('type', 1), ('ugly', 1), ('ugly-number', 1), ('video', 1), ('visualization', 1), ('well-commented', 1), ('wrong', 1), ('wrong-answer', 1)]"
263,Ugly Number,https://leetcode.com/problems/ugly-number,"An ugly number is a positive integer whose prime factors are limited to 2, 3, and 5.

Given an integer n, return true if n is an ugly number.",['math'],Easy,756,789,572962,238798,"[""Happy Number"", ""Count Primes"", ""Ugly Number II""]","[('java', 41), ('cpp', 21), ('python', 19), ('c++', 18), ('solution', 12), ('javascript', 10), ('python 3', 9), ('python3', 8), ('short', 8), ('cpp solution', 7), ('recursion', 6), ('easy-understanding', 5), ('math', 5), ('recursive', 5), ('100 speed', 4), ('easy', 4), ('golang', 4), ('java-solution', 4), ('ruby', 4), ('simple', 4), ('simple solution', 4), ('ugly-number', 4), ('accepted', 3), ('c++17', 3), ('easy-understand', 3), ('iterative', 3), ('c', 2), ('c#', 2), ('go', 2), ('kotlin', 2), ('one-liner', 2), ('php', 2), ('0 ms', 1), ('100 space', 1), ('1ms', 1), ('1ms runtime', 1), ('2ms', 1), ('3line', 1), ('algorithms', 1), ('beats 100', 1), ('beginnerfriendly', 1), ('best-submission', 1), ('bit-manipulation', 1), ('c++ code', 1), ('c++ solution', 1), ('clean code', 1), ('commnted', 1), ('constant space', 1), ('constant-space', 1), ('constant-time', 1), ('cpp easy', 1), ('dobby', 1), ('dynamic-programming', 1), ('easy to read', 1), ('easy understanding', 1), ('easytounderstand', 1), ('explained', 1), ('explanation', 1), ('explanations', 1), ('fast-solution', 1), ('fasterthan100', 1), ('fmod', 1), ('for-loop', 1), ('golang-solution', 1), ('integer division', 1), ('iteration', 1), ('iteratve', 1), ('java simple', 1), ('java solution', 1), ('javascript recursive', 1), ('javascript solution', 1), ('js', 1), ('keep it simple', 1), ('linear time', 1), ('logarithmic time', 1), ('loop method', 1), ('memory optimized', 1), ('non-recursive', 1), ('number theory', 1), ('php solution', 1), ('prime', 1), ('prime factorization', 1), ('prime-number', 1), ('primes', 1), ('python2', 1), ('readable', 1), ('recursively', 1), ('reduce', 1), ('regex', 1), ('simplest', 1), ('simpleunderstanding', 1), ('solution-share', 1), ('space o1', 1), ('speed', 1), ('structured code', 1), ('swift', 1), ('three-different-solutions', 1), ('understandable', 1), ('well-commented', 1), ('while', 1)]"
262,Trips and Users,https://leetcode.com/problems/trips-and-users,"Table: Trips


+-------------+----------+
| Column Name | Type     |
+-------------+----------+
| Id          | int      |
| Client_Id   | int      |
| Driver_Id   | int      |
| City_Id     | int      |
| Status      | enum     |
| Request_at  | date     |     
+-------------+----------+
Id is the primary key for this table.
The table holds all taxi trips. Each trip has a unique Id, while Client_Id and Driver_Id are foreign keys to the Users_Id at the Users table.
Status is an ENUM type of (‘completed’, ‘cancelled_by_driver’, ‘cancelled_by_client’).


 

Table: Users


+-------------+----------+
| Column Name | Type     |
+-------------+----------+
| Users_Id    | int      |
| Banned      | enum     |
| Role        | enum     |
+-------------+----------+
Users_Id is the primary key for this table.
The table holds all users. Each user has a unique Users_Id, and Role is an ENUM type of (‘client’, ‘driver’, ‘partner’).
Status is an ENUM type of (‘Yes’, ‘No’).


 

Write a SQL query to find the cancellation rate of requests with unbanned users (both client and driver must not be banned) each day between ""2013-10-01"" and ""2013-10-03"".

The cancellation rate is computed by dividing the number of canceled (by client or driver) requests with unbanned users by the total number of requests with unbanned users on that day.

Return the result table in any order. Round Cancellation Rate to two decimal points.

The query result format is in the following example:

 


Trips table:
+----+-----------+-----------+---------+---------------------+------------+
| Id | Client_Id | Driver_Id | City_Id | Status              | Request_at |
+----+-----------+-----------+---------+---------------------+------------+
| 1  | 1         | 10        | 1       | completed           | 2013-10-01 |
| 2  | 2         | 11        | 1       | cancelled_by_driver | 2013-10-01 |
| 3  | 3         | 12        | 6       | completed           | 2013-10-01 |
| 4  | 4         | 13        | 6       | cancelled_by_client | 2013-10-01 |
| 5  | 1         | 10        | 1       | completed           | 2013-10-02 |
| 6  | 2         | 11        | 6       | completed           | 2013-10-02 |
| 7  | 3         | 12        | 6       | completed           | 2013-10-02 |
| 8  | 2         | 12        | 12      | completed           | 2013-10-03 |
| 9  | 3         | 10        | 12      | completed           | 2013-10-03 |
| 10 | 4         | 13        | 12      | cancelled_by_driver | 2013-10-03 |
+----+-----------+-----------+---------+---------------------+------------+

Users table:
+----------+--------+--------+
| Users_Id | Banned | Role   |
+----------+--------+--------+
| 1        | No     | client |
| 2        | Yes    | client |
| 3        | No     | client |
| 4        | No     | client |
| 10       | No     | driver |
| 11       | No     | driver |
| 12       | No     | driver |
| 13       | No     | driver |
+----------+--------+--------+

Result table:
+------------+-------------------+
| Day        | Cancellation Rate |
+------------+-------------------+
| 2013-10-01 | 0.33              |
| 2013-10-02 | 0.00              |
| 2013-10-03 | 0.50              |
+------------+-------------------+

On 2013-10-01:
  - There were 4 requests in total, 2 of which were canceled.
  - However, the request with Id=2 was made by a banned client (User_Id=2), so it is ignored in the calculation.
  - Hence there are 3 unbanned requests in total, 1 of which was canceled.
  - The Cancellation Rate is (1 / 3) = 0.33
On 2013-10-02:
  - There were 3 requests in total, 0 of which were canceled.
  - The request with Id=6 was made by a banned client, so it is ignored.
  - Hence there are 2 unbanned requests in total, 0 of which were canceled.
  - The Cancellation Rate is (0 / 2) = 0.00
On 2013-10-03:
  - There were 3 requests in total, 1 of which was canceled.
  - The request with Id=8 was made by a banned client, so it is ignored.
  - Hence there are 2 unbanned request in total, 1 of which were canceled.
  - The Cancellation Rate is (1 / 2) = 0.50",[],Hard,495,360,224845,80365,"[""Hopper Company Queries I"", ""Hopper Company Queries II"", ""Hopper Company Queries III""]","[('mysql', 27), ('sql', 11), ('oracle sql', 5), ('sql server', 5), ('trips-and-users', 5), ('wrong-answer', 5), ('oracle', 4), ('cast', 3), ('cte', 3), ('join', 3), ('solution', 3), ('trips and users', 3), ('case-when', 2), ('ms sql server', 2), ('mssql', 2), ('simple solution', 2), ('test-case', 2), ('wrong-test-cases', 2), ('accepted wrong answer', 1), ('beginner friendly', 1), ('between', 1), ('clean code', 1), ('count', 1), ('database', 1), ('database-internalerror-trips', 1), ('easy to read', 1), ('easy to understand', 1), ('easy-peasy', 1), ('easy-understanding', 1), ('elegant solution', 1), ('fun-loving', 1), ('group by', 1), ('hoadm', 1), ('ifnull', 1), ('inner', 1), ('inner query', 1), ('inner-join', 1), ('light-hearted', 1), ('ms-sql', 1), ('msql', 1), ('no fuss', 1), ('solution-sharing-sql', 1), ('sqlite', 1), ('ssms', 1), ('t-sql', 1), ('trips-and-drivers', 1), ('tutorial', 1), ('union all', 1), ('video solution', 1), ('video-explanation', 1), ('wrong answer', 1)]"
260,Single Number III,https://leetcode.com/problems/single-number-iii,"Given an integer array nums, in which exactly two elements appear only once and all the other elements appear exactly twice. Find the two elements that appear only once. You can return the answer in any order.

Follow up: Your algorithm should run in linear runtime complexity. Could you implement it using only constant space complexity?",['bit-manipulation'],Medium,2259,134,290227,190054,"[""Single Number"", ""Single Number II""]","[('cpp', 30), ('c++', 29), ('python', 25), ('bit-manipulation', 20), ('java', 18), ('javascript', 16), ('bit manipulation', 14), ('python3', 13), ('python 3', 11), ('xor', 11), ('c#', 8), ('explained', 7), ('constant space', 6), ('counter', 6), ('java-solution', 6), ('bitmanipulation', 5), ('constant-space', 5), ('linear time', 5), ('bitwise', 4), ('easy-understanding', 4), ('easytounderstand', 4), ('ruby', 4), ('solution', 4), ('bitwise operation', 3), ('constant memory', 3), ('cpp solution', 3), ('dictionary', 3), ('hashmap', 3), ('hashset', 3), ('js', 3), ('set', 3), ('short', 3), ('simple', 3), ('single number iii', 3), ('swift', 3), ('bit masking', 2), ('bitmasking', 2), ('collections', 2), ('easy', 2), ('hashtable', 2), ('javascript solution', 2), ('linq', 2), ('one-liner', 2), ('python2', 2), ('rust', 2), ('scala', 2), ('solution-sharing-cpp', 2), ('stl', 2), ('0ms-4ms', 1), ('10 liner', 1), ('100 space', 1), ('100 speed', 1), ('accumulate', 1), ('algorithm', 1), ('algorithms', 1), ('allocates', 1), ('and', 1), ('arrays.sort', 1), ('beats 100', 1), ('best solution', 1), ('binary', 1), ('bit', 1), ('bit mask', 1), ('bit operation', 1), ('bitwise-operators', 1), ('brute force', 1), ('bucket-sort', 1), ('c++ code', 1), ('c++ easy to understand', 1), ('c++ solution', 1), ('c++17', 1), ('cleancode', 1), ('cpp easy', 1), ('cpp with explanation', 1), ('detailed explanation', 1), ('difficulty', 1), ('discussion', 1), ('easy solution', 1), ('easy-understand', 1), ('easy-undestand', 1), ('example', 1), ('explanation', 1), ('explanation of logic', 1), ('fasterthan100', 1), ('fp', 1), ('functional programming', 1), ('golang', 1), ('iteration', 1), ('iterators', 1), ('kotlin', 1), ('lambda', 1), ('linear', 1), ('linear time complexity', 1), ('list', 1), ('list comprehension', 1), ('loop', 1), ('map', 1), ('map in c++', 1), ('map-stl', 1), ('math-solution', 1), ('naive', 1), ('o n', 1), ('one', 1), ('one line', 1), ('one-pass', 1), ('php', 1), ('php solution', 1), ('question', 1), ('reduction', 1), ('sets', 1), ('shift bit', 1), ('short solution', 1), ('simplesweet', 1), ('slow', 1), ('sort', 1), ('two solutions', 1), ('typescript', 1), ('unorderedmap', 1), ('unordermap', 1), ('vector', 1), ('video', 1), ('xinerd', 1), ('youtube', 1)]"
258,Add Digits,https://leetcode.com/problems/add-digits,"Given an integer num, repeatedly add all its digits until the result has only one digit, and return it.",['math'],Easy,1164,1293,599063,352170,"[""Happy Number"", ""Sum of Digits in the Minimum Number""]","[('java', 57), ('python', 42), ('c++', 37), ('cpp', 27), ('python 3', 26), ('javascript', 23), ('recursion', 19), ('python3', 18), ('solution', 17), ('java-solution', 11), ('add-digits', 10), ('easy-understanding', 9), ('cpp solution', 8), ('easy', 7), ('swift', 6), ('golang', 5), ('javascript solution', 5), ('kotlin', 5), ('math', 5), ('one-liner', 5), ('short', 5), ('c', 4), ('constant time', 4), ('easy-to-understand', 4), ('easy-understand', 4), ('o1 time', 4), ('c++ code', 3), ('constant space', 3), ('explaination', 3), ('loop', 3), ('one line', 3), ('php', 3), ('php solution', 3), ('recursively', 3), ('0ms', 2), ('1ms', 2), ('c++ solution', 2), ('commented', 2), ('congruence-formula', 2), ('constant-time', 2), ('cpp easy', 2), ('cpp-solution', 2), ('easy-solition', 2), ('easy-undestand', 2), ('easytounderstand', 2), ('explained', 2), ('fast and simple', 2), ('fast-solution', 2), ('go', 2), ('golang-solution', 2), ('iteration', 2), ('iterative', 2), ('iteratively', 2), ('js', 2), ('kotlin-solution', 2), ('modulo', 2), ('python2', 2), ('recusion', 2), ('ruby', 2), ('scala', 2), ('simple', 2), ('simple solution', 2), ('swift5', 2), ('testcase-wrong', 2), ('time-complexity', 2), ('#adddigits', 1), ('#c++', 1), ('#python', 1), ('1-line solution', 1), ('2ms', 1), ('accepted', 1), ('adddigits', 1), ('adhoc', 1), ('algorithms', 1), ('array', 1), ('array-creation', 1), ('brute force', 1), ('brute-force', 1), ('c#', 1), ('c++14', 1), ('c++code', 1), ('constant', 1), ('constant-space', 1), ('cpp doubt', 1), ('digital root', 1), ('digital-root', 1), ('easy solution', 1), ('easy to understand', 1), ('es6', 1), ('explained solution', 1), ('explanatino', 1), ('explanation of logic', 1), ('faster than 100.00', 1), ('for loop', 1), ('for loops', 1), ('formula', 1), ('go-solution', 1), ('help', 1), ('if-else', 1), ('iteration vs recursion', 1), ('iterative solution', 1), ('iterative vs recursive', 1), ('iterative-recursive', 1), ('iterator', 1), ('java ac solution', 1), ('java solution', 1), ('javascrip', 1), ('javascriptes6', 1), ('js javascript', 1), ('lambda', 1), ('language-independent', 1), ('logic-solution', 1), ('map', 1), ('math-solution', 1), ('no loop', 1), ('no recursion', 1), ('o1', 1), ('on', 1), ('oneline', 1), ('operator', 1), ('programing', 1), ('pyhton3', 1), ('python 2', 1), ('python3.9', 1), ('recurision', 1), ('recursion vs iteration', 1), ('recursive', 1), ('recursive vs iterative', 1), ('recursive-solution', 1), ('rust', 1), ('short circuit', 1), ('simple python accepted', 1), ('simple-solution', 1), ('simplest', 1), ('solution-javascript', 1), ('solved', 1), ('stl', 1), ('string-operation', 1), ('test-case', 1), ('time', 1), ('time-limit-exceeded', 1), ('timeout', 1), ('two solutions', 1), ('typeerror', 1), ('user0951b', 1), ('while', 1)]"
257,Binary Tree Paths,https://leetcode.com/problems/binary-tree-paths,"Given the root of a binary tree, return all root-to-leaf paths in any order.

A leaf is a node with no children.","['tree', 'depth-first-search']",Easy,2535,132,724728,393535,"[""Path Sum II"", ""Smallest String Starting From Leaf""]","[('dfs', 74), ('java', 71), ('cpp', 51), ('recursion', 45), ('python', 43), ('c++', 35), ('recursive', 32), ('javascript', 24), ('python 3', 22), ('binary-tree', 18), ('solution', 15), ('backtracking', 12), ('iterative', 12), ('python3', 11), ('bfs', 9), ('easy-understanding', 9), ('golang', 9), ('java-solution', 9), ('cpp solution', 7), ('easy', 6), ('easy-understand', 5), ('preorder traversal', 5), ('stack', 5), ('stringbuilder', 5), ('swift', 5), ('c#', 4), ('c++ code', 4), ('dfs simple solution', 4), ('dfs-tree', 4), ('go', 4), ('preorder', 4), ('recusion', 4), ('0ms', 3), ('accepted', 3), ('depth first search', 3), ('golang-solution', 3), ('non-recursive', 3), ('recurision', 3), ('recursive easy', 3), ('ruby', 3), ('short', 3), ('simple', 3), ('tree-traversal', 3), ('trees', 3), ('100 speed', 2), ('2ms', 2), ('backtracking dfs', 2), ('bfs python', 2), ('binary tree', 2), ('binary tree paths', 2), ('binary-search', 2), ('c++14', 2), ('clean', 2), ('depth-first search', 2), ('depth-first-search', 2), ('dfs recursive', 2), ('dfs solution', 2), ('easy to understand', 2), ('easy-to-understand', 2), ('fast', 2), ('fast and simple', 2), ('pair', 2), ('pre-order', 2), ('pythonpython3', 2), ('queue', 2), ('recursively', 2), ('run-time-error', 2), ('runtime-error', 2), ('simple solution', 2), ('string', 2), ('wrong-answer', 2), ('#javascript #recursion', 1), ('10 lines', 1), ('100 memory', 1), ('100 space', 1), ('1ms runtime', 1), ('8ms', 1), ('begineer friendly', 1), ('breadth first search', 1), ('bug', 1), ('c++ recursive solution', 1), ('c++ solution', 1), ('c++11', 1), ('clarification', 1), ('clean code', 1), ('commented', 1), ('comments', 1), ('compile-error', 1), ('concat', 1), ('correct', 1), ('cpp easy', 1), ('dfs traversal', 1), ('dfs-topdown', 1), ('easiest', 1), ('easy-undestand', 1), ('explaination', 1), ('functional', 1), ('generator', 1), ('give stars and subscribe', 1), ('go-solution', 1), ('goldmansachs', 1), ('good-in-local-machine', 1), ('graph theory', 1), ('inorder-traversal', 1), ('intutive', 1), ('iteration', 1), ('iterative python', 1), ('iterative python bfs', 1), ('java ac solution', 1), ('javascript solution', 1), ('js', 1), ('kotlinvim', 1), ('memory-optimized', 1), ('one-pass', 1), ('output-limit-exceeded', 1), ('post-order-traversal', 1), ('postorder-traversal', 1), ('preorder-recursion', 1), ('problem', 1), ('python dfs', 1), ('python2', 1), ('raviinroorkee', 1), ('recusrive', 1), ('self-explanatory', 1), ('share-solution', 1), ('short code', 1), ('solution-python', 1), ('solution-sharing-c', 1), ('solution-sharing-cpp', 1), ('string-operation', 1), ('swift5', 1), ('test-case', 1), ('tree', 1), ('tree traversal', 1), ('ultra easy', 1), ('understandable', 1), ('upvote', 1), ('vector', 1), ('very simple', 1), ('works-on-my-machine', 1), ('xjq', 1)]"
242,Valid Anagram,https://leetcode.com/problems/valid-anagram,"Given two strings s and t, return true if t is an anagram of s, and false otherwise.","['hash-table', 'sort']",Easy,2569,164,1372683,809852,"[""Group Anagrams"", ""Palindrome Permutation"", ""Find All Anagrams in a String""]","[('java', 122), ('python', 117), ('javascript', 68), ('c++', 67), ('python 3', 57), ('cpp', 54), ('hashmap', 52), ('python3', 35), ('solution', 32), ('java-solution', 27), ('anagrams', 23), ('one-liner', 21), ('simple', 20), ('easy-understanding', 19), ('sort', 19), ('dictionary', 16), ('cpp solution', 15), ('easy', 15), ('c#', 14), ('javascript solution', 14), ('short', 14), ('swift', 14), ('array', 12), ('counter', 12), ('hash table', 12), ('sorting', 12), ('golang', 11), ('map', 10), ('simple solution', 10), ('anagram', 8), ('unicode', 8), ('c', 7), ('easy-to-understand', 7), ('easy-understand', 7), ('linear time', 7), ('oneline', 7), ('ruby', 7), ('string', 7), ('dictonary', 6), ('hashtable', 6), ('one line', 6), ('constant-space', 5), ('dict', 5), ('golang-solution', 5), ('hashing', 5), ('rust', 5), ('valid-anagram', 5), ('accepted', 4), ('cpp easy', 4), ('fast and simple', 4), ('kotlin', 4), ('set', 4), ('valid anagram', 4), ('video-explanation', 4), ('#hashmap', 3), ('array-sort', 3), ('arrays', 3), ('c++ code', 3), ('collections', 3), ('dictionaries', 3), ('easy to understand', 3), ('easy-undestand', 3), ('easytounderstand', 3), ('fast', 3), ('fast-solution', 3), ('frequency count', 3), ('frequencycounting', 3), ('go', 3), ('go lang', 3), ('js', 3), ('simplest', 3), ('stl', 3), ('test-case', 3), ('time-limit-exceeded', 3), ('unordered map', 3), ('#javascript', 2), ('100 space', 2), ('ascii', 2), ('c++ solution', 2), ('constant space', 2), ('cool', 2), ('count', 2), ('counting', 2), ('easysolution', 2), ('es6', 2), ('explained', 2), ('fastest', 2), ('follow-up', 2), ('frequencies', 2), ('frequency', 2), ('frequency array', 2), ('frequency table', 2), ('hash map', 2), ('join', 2), ('linq', 2), ('loop', 2), ('map-stl', 2), ('question', 2), ('readable', 2), ('scala', 2), ('solution-python', 2), ('solution-sharing-cpp', 2), ('sort-function', 2), ('sorted', 2), ('space-non', 2), ('split', 2), ('stream', 2), ('time-complexity', 2), ('typescript', 2), ('#c++', 1), ('#collections', 1), ('#cpp', 1), ('#java', 1), ('#python', 1), ('#python 3', 1), ('#short', 1), ('#simple', 1), ('#threeliner', 1), ('1 line', 1), ('1 liner', 1), ('1-line', 1), ('1-liner', 1), ('100 faster', 1), ('100 faster runtime', 1), ('100 memory', 1), ('100 speed', 1), ('36ms', 1), ('3lines', 1), ('4 lines', 1), ('55ms', 1), ('accpected', 1), ('algorithms', 1), ('apple', 1), ('array greedy', 1), ('best-submission', 1), ('bit', 1), ('bug', 1), ('c++ ac', 1), ('challenge-me', 1), ('character array', 1), ('clean', 1), ('clear', 1), ('codedecks', 1), ('coding interview', 1), ('commented', 1), ('commented code', 1), ('commetend', 1), ('concise', 1), ('concise-solution', 1), ('count array', 1), ('count-sort', 1), ('counters', 1), ('counting algorithm', 1), ('counting sort', 1), ('counting-characters', 1), ('counting-sort', 1), ('cpp clear', 1), ('csharp', 1), ('detailed', 1), ('dictionary c#', 1), ('discussion', 1), ('easy to follow', 1), ('easy understanding', 1), ('easy-implementation', 1), ('efficiency', 1), ('efficient', 1), ('elegant', 1), ('elegent', 1), ('explanation', 1), ('explanation with code', 1), ('faster than 75', 1), ('faster than 95.46', 1), ('feeling down', 1), ('frequency-count', 1), ('fun', 1), ('functional-programming', 1), ('github', 1), ('hash', 1), ('hash set', 1), ('hashing algorithm', 1), ('hashmaps', 1), ('helpful', 1), ('improve', 1), ('incomplete-testcases', 1), ('interview', 1), ('intuitive', 1), ('ios', 1), ('iterative', 1), ('java ac solution', 1), ('java-8', 1), ('java8', 1), ('kotlin-solution', 1), ('kotlinvim', 1), ('leetcode 242', 1), ('linear', 1), ('linear memory', 1), ('linear-time', 1), ('list', 1), ('lists', 1), ('maps', 1), ('math-solution', 1), ('memory optimized', 1), ('memory usage', 1), ('multiset', 1), ('no idea why', 1), ('no imports', 1), ('o1space ontime', 1), ('object oriented solution', 1), ('objects', 1), ('one', 1), ('one liners', 1), ('oneliner', 1), ('optimal', 1), ('optimisation', 1), ('ord', 1), ('performance', 1), ('performance question', 1), ('phone-interview', 1), ('php', 1), ('pointer', 1), ('pyhton3', 1), ('python-dictionary', 1), ('python2', 1), ('python3.8', 1), ('pythonic', 1), ('pythonpython3', 1), ('question need help', 1), ('quicksort', 1), ('share java solution', 1), ('short code', 1), ('simple clear c++ solution', 1), ('simple-solution', 1), ('simplest solution', 1), ('solition-sharing', 1), ('solution by python', 1), ('solution-javascript', 1), ('solutionsharing', 1), ('sorted array', 1), ('sorting-algorithms', 1), ('space', 1), ('speed', 1), ('spread operator', 1), ('straight-forward', 1), ('symbol table', 1), ('ternary-operator', 1), ('three-different-solutions', 1), ('time', 1), ('time-limit-exceeded-java', 1), ('two-pointers', 1), ('twopointers', 1), ('typescript javascript', 1), ('understandable', 1), ('unordered-multiset', 1), ('unordermap', 1), ('upvote and subscribe', 1), ('validanagram', 1), ('vector', 1), ('video', 1), ('video explanation', 1), ('word-frequency', 1), ('wrong-tag', 1)]"
241,Different Ways to Add Parentheses,https://leetcode.com/problems/different-ways-to-add-parentheses,"Given a string expression of numbers and operators, return all possible results from computing all the different possible ways to group numbers and operators. You may return the answer in any order.",['divide-and-conquer'],Medium,2174,115,211254,121940,"[""Unique Binary Search Trees II"", ""Basic Calculator"", ""Expression Add Operators""]","[('java', 20), ('dynamic-programming', 19), ('divide and conquer', 14), ('cpp', 13), ('python', 11), ('recursive', 11), ('recursion', 9), ('easy-understand', 8), ('divideconquer', 7), ('python3', 7), ('c++', 6), ('divide-and-conquer', 5), ('javascript', 5), ('dynamic programming', 4), ('golang', 4), ('memoization', 4), ('python 3', 4), ('solution', 4), ('c#', 3), ('easy-understanding', 3), ('accepted', 2), ('cpp solution', 2), ('efficient', 2), ('java-solution', 2), ('memorization', 2), ('rust', 2), ('#dynamic-programming', 1), ('0ms', 1), ('ast', 1), ('backtracking', 1), ('best-submission', 1), ('bottom-up-algorithm', 1), ('catalan', 1), ('clarification', 1), ('clean code', 1), ('comments added', 1), ('compile-error', 1), ('devide-and-conquer', 1), ('divide-conquer', 1), ('easiest', 1), ('easy-undestand', 1), ('efficient solution', 1), ('elegant', 1), ('eval', 1), ('expression-tree', 1), ('go', 1), ('hash map', 1), ('hashmap', 1), ('improve', 1), ('matrix', 1), ('memory', 1), ('memory-limit-exceeded', 1), ('product', 1), ('python combinatorics', 1), ('recurrance', 1), ('recursively', 1), ('recusion', 1), ('ruby', 1), ('scala', 1), ('short', 1), ('simple', 1), ('solution-sharing-cpp', 1), ('time-complexity', 1), ('video explanation', 1), ('well-commented', 1), ('wrong-answer', 1), ('wrong-example', 1), ('xjq', 1)]"
240,Search a 2D Matrix II,https://leetcode.com/problems/search-a-2d-matrix-ii,"Write an efficient algorithm that searches for a target value in an m x n integer matrix. The matrix has the following properties:


	Integers in each row are sorted in ascending from left to right.
	Integers in each column are sorted in ascending from top to bottom.","['binary-search', 'divide-and-conquer']",Medium,4657,87,981494,446427,"[""Search a 2D Matrix""]","[('binary-search', 73), ('java', 63), ('python', 50), ('c++', 44), ('cpp', 43), ('python 3', 22), ('javascript', 17), ('python3', 16), ('binarysearch', 15), ('binary search', 13), ('java-solution', 12), ('easy-understanding', 10), ('time-complexity', 10), ('c#', 8), ('matrix', 8), ('divideconquer', 7), ('easy-understand', 7), ('golang', 7), ('cpp solution', 6), ('divide and conquer', 6), ('simple', 6), ('swift', 6), ('accepted', 5), ('dividedconquer', 5), ('easy-to-understand', 5), ('easytounderstand', 5), ('rust', 5), ('solution', 5), ('easy', 4), ('easy-undestand', 4), ('clean code', 3), ('explained', 3), ('linear time', 3), ('python2', 3), ('recursion', 3), ('ruby', 3), ('search', 3), ('search a 2d matrix', 3), ('simple solution', 3), ('100 speed', 2), ('clean', 2), ('devide-and-conquer', 2), ('dfs', 2), ('divide-and-conquer', 2), ('easy to follow', 2), ('fast', 2), ('fast-solution', 2), ('fastest', 2), ('go-solution', 2), ('golang-solution', 2), ('greedy', 2), ('kotlin', 2), ('linear', 2), ('matrix-search', 2), ('one liner', 2), ('searching', 2), ('short', 2), ('solution-sharing-cpp', 2), ('solution-sharing-python', 2), ('#binarysearch', 1), ('#java', 1), ('1-liner', 1), ('100 space', 1), ('240', 1), ('adaptive', 1), ('array', 1), ('avnish', 1), ('awesome samriddhi', 1), ('beating-100-submissions', 1), ('best explaination', 1), ('best-submission', 1), ('big o of n', 1), ('binary', 1), ('binary sear', 1), ('brute force', 1), ('bst', 1), ('c++ code', 1), ('collections', 1), ('constant-space', 1), ('cplusplus', 1), ('cpp easy', 1), ('csharp', 1), ('dicotomic search', 1), ('divideandconquer', 1), ('easy sloution', 1), ('efficent approach', 1), ('effiecinet', 1), ('error', 1), ('fast and simple', 1), ('go', 1), ('help me', 1), ('illustration', 1), ('improve', 1), ('intutive', 1), ('iterative', 1), ('iterative approch', 1), ('java ac solution', 1), ('javascript recursive', 1), ('javascript solution', 1), ('js', 1), ('js javascript', 1), ('keep it simple', 1), ('kotllin', 1), ('linear-search', 1), ('linear-time', 1), ('logarithmic time', 1), ('m+n', 1), ('missing-test-case', 1), ('multiple solutions', 1), ('nlogn', 1), ('one pass', 1), ('oneliner', 1), ('onepass', 1), ('optimization process', 1), ('optimizations', 1), ('oracle', 1), ('python3.8', 1), ('readable', 1), ('recursive', 1), ('ritik', 1), ('runtime analysis', 1), ('runtime-error', 1), ('search space', 1), ('simple clear c++ solution', 1), ('single loop', 1), ('solution-explaining', 1), ('sorted matrix', 1), ('stl', 1), ('time-limit-exceeded', 1), ('top right search', 1), ('two-pointers', 1), ('typescript', 1), ('utra easy', 1), ('video-explanation', 1), ('walk', 1), ('walking', 1), ('well-commented', 1), ('works-on-my-machine', 1), ('wrong-answer', 1), ('xjq', 1), ('zeta', 1)]"
239,Sliding Window Maximum,https://leetcode.com/problems/sliding-window-maximum,"You are given an array of integers nums, there is a sliding window of size k which is moving from the very left of the array to the very right. You can only see the k numbers in the window. Each time the sliding window moves right by one position.

Return the max sliding window.","['heap', 'sliding-window', 'dequeue']",Hard,5646,234,874008,391817,"[""Minimum Window Substring"", ""Min Stack"", ""Longest Substring with At Most Two Distinct Characters"", ""Paint House II"", ""Jump Game VI""]","[('deque', 82), ('c++', 60), ('java', 59), ('python', 45), ('cpp', 41), ('java-solution', 21), ('javascript', 18), ('python 3', 14), ('sliding-window', 14), ('slidingwindow', 14), ('cpp solution', 13), ('priority queue', 13), ('python3', 12), ('sliding-window-maximum', 10), ('solution', 10), ('c#', 9), ('monotone queue', 9), ('queue', 9), ('heap', 8), ('dequeue', 7), ('easy-understand', 7), ('golang', 7), ('heapq', 7), ('linear time', 7), ('easy-to-understand', 6), ('c++ code', 5), ('easy-understanding', 5), ('easy-undestand', 5), ('explained', 5), ('array', 4), ('easy', 4), ('easytounderstand', 4), ('fast-solution', 4), ('sliding window', 4), ('swift', 4), ('accepted', 3), ('brute-force', 3), ('cpp easy', 3), ('dp', 3), ('dynamic programming', 3), ('explanation', 3), ('go-solution', 3), ('heaps', 3), ('iterative', 3), ('kotlin', 3), ('linkedlist', 3), ('maxheap', 3), ('maxqueue', 3), ('monotonic deque', 3), ('multiset', 3), ('priority-queue', 3), ('segment tree', 3), ('simple', 3), ('treemap', 3), ('c', 2), ('c++11', 2), ('comments-added', 2), ('dynamic-programming', 2), ('explaination', 2), ('go', 2), ('golang-solution', 2), ('help needed', 2), ('java ac solution', 2), ('linear-time', 2), ('linked-list', 2), ('list', 2), ('max-heap', 2), ('maxstack', 2), ('monotone deque', 2), ('python2', 2), ('queue-approach', 2), ('ritik', 2), ('segment-tree', 2), ('short', 2), ('short code', 2), ('simple solution', 2), ('stack', 2), ('time-complexity', 2), ('1-liner', 1), ('2-pointer', 1), ('4ms', 1), ('5 liner', 1), ('90 faster', 1), ('95 per faster', 1), ('algorithms', 1), ('amortized', 1), ('asahiocean', 1), ('awesome', 1), ('awesome samriddhi', 1), ('beginner friendly', 1), ('beginners', 1), ('best-submission', 1), ('binary heap', 1), ('binary-search', 1), ('brute force', 1), ('c# solutions', 1), ('c++ solution', 1), ('comments', 1), ('complexity-analysis', 1), ('constant-space', 1), ('cpp with explanation', 1), ('cpp-solution', 1), ('crispygang', 1), ('csharp', 1), ('dictionary', 1), ('double-linked-list', 1), ('double-pointer', 1), ('doubly linked list', 1), ('doubly-linked list', 1), ('doubly-linked-list', 1), ('easy sloution', 1), ('easysolution', 1), ('easyunderstanding', 1), ('efficient solution', 1), ('elegant solution', 1), ('es6', 1), ('explanation of logic', 1), ('explanations', 1), ('fast', 1), ('fast and simple', 1), ('faster', 1), ('faster than 99.8', 1), ('hard', 1), ('hard problem', 1), ('heapsort', 1), ('interview prep', 1), ('intutive', 1), ('issue', 1), ('iteratively', 1), ('iterators', 1), ('java solution', 1), ('javascript solution', 1), ('kotlinvim', 1), ('linear memory', 1), ('linear space', 1), ('linear-space', 1), ('linkedlists', 1), ('map', 1), ('maps', 1), ('max', 1), ('max queue', 1), ('maximum', 1), ('more-fast', 1), ('multi-sets', 1), ('naive', 1), ('namedtuple', 1), ('needimprovement', 1), ('on hint', 1), ('one pass', 1), ('optimisation', 1), ('performance', 1), ('php', 1), ('php solution', 1), ('priorityqueue', 1), ('rmq', 1), ('ruby', 1), ('run-time-error', 1), ('runtime-error', 1), ('samriddhi', 1), ('sandeepkumar', 1), ('saravana', 1), ('self-explanatory', 1), ('sequence', 1), ('series', 1), ('sets', 1), ('short c++ code', 1), ('simple clear c++ solution', 1), ('simple java', 1), ('simple python accepted', 1), ('simple-solution', 1), ('simplest', 1), ('sliding', 1), ('sliding window algorithm', 1), ('solution-share', 1), ('solution-sharing-cpp', 1), ('sortedset', 1), ('sparse table', 1), ('sparsetable', 1), ('stacks', 1), ('stl', 1), ('time complexity', 1), ('two-pointers', 1), ('vector', 1), ('video', 1), ('visualization', 1), ('well-explained', 1), ('window', 1), ('window-sliding', 1), ('works-on-my-machine', 1), ('wrong-answer', 1)]"
238,Product of Array Except Self,https://leetcode.com/problems/product-of-array-except-self,"Given an integer array nums, return an array answer such that answer[i] is equal to the product of all the elements of nums except nums[i].

The product of any prefix or suffix of nums is guaranteed to fit in a 32-bit integer.",['array'],Medium,7274,551,1238776,760140,"[""Trapping Rain Water"", ""Maximum Product Subarray"", ""Paint House II""]","[('java', 85), ('cpp', 59), ('c++', 55), ('python', 52), ('javascript', 40), ('python 3', 32), ('array', 23), ('java-solution', 23), ('solution', 20), ('constant-space', 18), ('python3', 14), ('easy-understanding', 13), ('easy-undestand', 13), ('constant space', 12), ('linear time', 12), ('cpp solution', 10), ('easy', 10), ('golang', 9), ('c#', 8), ('simple solution', 8), ('c++ code', 7), ('easy-understand', 7), ('easytounderstand', 7), ('explanation', 6), ('accepted', 5), ('javascript solution', 5), ('swift', 5), ('dynamic-programming', 4), ('explained', 4), ('java ac solution', 4), ('linear-time', 4), ('simple', 4), ('arrays', 3), ('clean code', 3), ('constant memory', 3), ('easy-to-understand', 3), ('es6', 3), ('golang-solution', 3), ('linear', 3), ('one-pass', 3), ('recursion', 3), ('ruby', 3), ('rust', 3), ('scala', 3), ('two-pointer', 3), ('two-pointers', 3), ('100 faster', 2), ('best-submission', 2), ('c++ solution', 2), ('commented', 2), ('cpp doubt', 2), ('divide and conquer', 2), ('dynamic programming', 2), ('easy solution', 2), ('easy understand', 2), ('efficient', 2), ('explanation of logic', 2), ('fast', 2), ('fast and simple', 2), ('fast-solution', 2), ('functional-programming', 2), ('goldmansachs', 2), ('greedy', 2), ('greedy approach', 2), ('iteration', 2), ('iterative', 2), ('js', 2), ('kotlin', 2), ('no-extra-space', 2), ('optimized', 2), ('pythonpython3', 2), ('recursive approach', 2), ('short', 2), ('short code', 2), ('simple clear c++ solution', 2), ('space', 2), ('space-efficient', 2), ('suffix array', 2), ('time-limit-exceeded', 2), ('typescript', 2), ('well-commented', 2), ('#easy-understand', 1), ('#java', 1), ('#java-solution', 1), ('#javascript', 1), ('#noextramemory', 1), ('0ms-4ms', 1), ('1 line', 1), ('100', 1), ('100 speed', 1), ('99.98 faster', 1), ('accumulate', 1), ('algorithms', 1), ('amazon', 1), ('amazon interview', 1), ('answer', 1), ('array reduction', 1), ('beats 100', 1), ('beats 50 pc', 1), ('beats 98', 1), ('beginner', 1), ('best', 1), ('binary search tree', 1), ('c', 1), ('c++ ac', 1), ('c++ stl', 1), ('c++11', 1), ('c++17', 1), ('clean-code', 1), ('clean-efficient-code', 1), ('comments-added', 1), ('complexity', 1), ('constantspace', 1), ('cplusplus', 1), ('cpp clear', 1), ('cpp easy', 1), ('cpp soltuion', 1), ('csharp', 1), ('detailed explanation', 1), ('divideandconquer', 1), ('divideconquer', 1), ('easiest', 1), ('easy to understandd', 1), ('easy understanding', 1), ('easysolution', 1), ('efficient solution', 1), ('elegant', 1), ('elegant solution', 1), ('explained max', 1), ('explanation with logic', 1), ('extra-space', 1), ('facebook intern', 1), ('facebook-india', 1), ('facebook-interview', 1), ('faster', 1), ('faster than 100.00', 1), ('faster than 99.80', 1), ('fastest java slution', 1), ('fold', 1), ('forward-backward-pass', 1), ('functional', 1), ('functional programming', 1), ('go', 1), ('go lang', 1), ('goldman sachs', 1), ('google', 1), ('google-india', 1), ('hashmap', 1), ('helper', 1), ('idea', 1), ('immutable', 1), ('intuitive', 1), ('javascriptes6', 1), ('kotlinvim', 1), ('loop', 1), ('loops', 1), ('math', 1), ('medium', 1), ('meiyaowen', 1), ('nvidia', 1), ('on', 1), ('one pass', 1), ('one pass solution', 1), ('one path', 1), ('one-loop', 1), ('optimisation', 1), ('optimized solution', 1), ('other-solution', 1), ('performance', 1), ('peymannp', 1), ('prefix array', 1), ('prefixsum', 1), ('preprocessing', 1), ('product', 1), ('pyhton', 1), ('python 2', 1), ('python2', 1), ('python3.8', 1), ('readable', 1), ('readable code', 1), ('real', 1), ('recursive', 1), ('reduce', 1), ('rolling-product', 1), ('run-time-error', 1), ('share-solution', 1), ('similar-problems', 1), ('simpe', 1), ('sketch', 1), ('solution-javascript', 1), ('solution-python', 1), ('solution-sharing-cpp', 1), ('splice', 1), ('step by step', 1), ('stl', 1), ('stl algorithms', 1), ('swift5', 1), ('swiftsolution', 1), ('three-lines', 1), ('time', 1), ('time complexities', 1), ('time-complexity', 1), ('time-limit-exceeded-python', 1), ('tle', 1), ('tricky', 1), ('two pass', 1), ('two-different-solutions', 1), ('two-pass', 1), ('two-solutions', 1), ('uber', 1), ('updowndota', 1), ('vector', 1), ('very tricky', 1), ('video', 1), ('video-explanation', 1), ('visualization', 1), ('with explanation', 1), ('with-explanation', 1), ('without divison', 1), ('xjq', 1), ('youtube', 1)]"
237,Delete Node in a Linked List,https://leetcode.com/problems/delete-node-in-a-linked-list,"Write a function to delete a node in a singly-linked list. You will not be given access to the head of the list, instead you will be given access to the node to be deleted directly.

It is guaranteed that the node to be deleted is not a tail node in the list.",['linked-list'],Easy,2555,9034,886015,599661,"[""Remove Linked List Elements""]","[('java', 58), ('c++', 42), ('cpp', 38), ('python', 33), ('linked-list', 24), ('python 3', 20), ('java-solution', 16), ('javascript', 16), ('c', 15), ('solution', 14), ('cpp solution', 12), ('easy-understanding', 10), ('python3', 10), ('easiest', 9), ('easy', 8), ('linked list', 7), ('linkedlists', 7), ('simple solution', 7), ('swift', 7), ('0ms', 5), ('c++ code', 5), ('delete-node-in-linkedlist', 5), ('simple', 5), ('cpp easy', 4), ('golang', 4), ('linkedlist', 4), ('python2', 4), ('wrong-answer', 4), ('accepted', 3), ('kotlin', 3), ('one-liner', 3), ('simplest', 3), ('100 faster runtime', 2), ('100 speed', 2), ('algorithm', 2), ('c programming', 2), ('c#', 2), ('constant space', 2), ('constant time', 2), ('easy-understand', 2), ('explained solution', 2), ('explanation', 2), ('fast and simple', 2), ('golang-solution', 2), ('linked lists', 2), ('recursion', 2), ('ruby', 2), ('run-time-error', 2), ('short', 2), ('solution-sharing-c', 2), ('swift5', 2), ('test-case', 2), ('testcase-wrong', 2), ('#javascript', 1), ('#linkedlist', 1), ('0ms runtime', 1), ('100 faster', 1), ('1ms', 1), ('2-line', 1), ('2-lines', 1), ('237', 1), ('4 liner', 1), ('96.2faster', 1), ('99.5 faster', 1), ('algorithms', 1), ('apple', 1), ('basic', 1), ('beats 100', 1), ('beats 98 pc', 1), ('begineer friendly', 1), ('beginner', 1), ('best-submission', 1), ('c code', 1), ('c++ ac', 1), ('c++ iterative sol', 1), ('c++ solution', 1), ('c++11', 1), ('c++17', 1), ('clarification', 1), ('clean', 1), ('code', 1), ('concept', 1), ('constant', 1), ('constant-space', 1), ('constant-time', 1), ('cpp with explanation', 1), ('cpp-solution', 1), ('cppsolution', 1), ('csharp', 1), ('deletenode', 1), ('deletenodeinlinkedlist', 1), ('dereference', 1), ('discussion', 1), ('easiest solution', 1), ('easily understood', 1), ('easy-explanation', 1), ('easy-to-understand', 1), ('easy-undestand', 1), ('es6', 1), ('explaination', 1), ('explained', 1), ('explanations', 1), ('fast', 1), ('github', 1), ('go lang', 1), ('go-solution', 1), ('help', 1), ('improve', 1), ('interviews', 1), ('intuitive', 1), ('ios', 1), ('iterative solution', 1), ('java ac solution', 1), ('java solution', 1), ('kotlin-solution', 1), ('linked list simple', 1), ('linked-lists', 1), ('logical thinking', 1), ('mdzz', 1), ('memory', 1), ('missing-test-case', 1), ('node-operation', 1), ('nvidia', 1), ('o1', 1), ('one line', 1), ('optimal', 1), ('parameter', 1), ('php', 1), ('php solution', 1), ('please help me find the bug', 1), ('pointers', 1), ('question', 1), ('question explanation', 1), ('rajawatbanna', 1), ('recursively', 1), ('removelinkedlistelements', 1), ('runtime-error', 1), ('scala', 1), ('simple and fast', 1), ('simple-solution', 1), ('singly-linked-list', 1), ('smallest', 1), ('solution explained', 1), ('solution-c', 1), ('solution-python', 1), ('solution-sharing-cpp', 1), ('space-complexity-1', 1), ('step by step explanation', 1), ('stl', 1), ('strange', 1), ('swapping nodes', 1), ('temp', 1), ('timeout', 1), ('traverse', 1), ('two pointer approach', 1), ('two-different-solutions', 1), ('two-lines', 1), ('very-easy', 1), ('victim-node', 1), ('visualization', 1), ('well-commented', 1), ('without head', 1), ('wrong-problem', 1)]"
236,Lowest Common Ancestor of a Binary Tree,https://leetcode.com/problems/lowest-common-ancestor-of-a-binary-tree,"Given a binary tree, find the lowest common ancestor (LCA) of two given nodes in the tree.

According to the definition of LCA on Wikipedia: “The lowest common ancestor is defined between two nodes p and q as the lowest node in T that has both p and q as descendants (where we allow a node to be a descendant of itself).”",['tree'],Medium,5651,206,1296711,643547,"[""Lowest Common Ancestor of a Binary Search Tree"", ""Smallest Common Region"", ""Lowest Common Ancestor of a Binary Tree II"", ""Lowest Common Ancestor of a Binary Tree III"", ""Lowest Common Ancestor of a Binary Tree IV""]","[('java', 80), ('recursion', 65), ('c++', 48), ('python', 46), ('cpp', 44), ('dfs', 34), ('recursive', 26), ('binary-tree', 25), ('javascript', 23), ('python 3', 21), ('java-solution', 11), ('solution', 10), ('c#', 9), ('easy-understand', 9), ('easy', 8), ('iterative', 8), ('binary tree', 7), ('easy-understanding', 6), ('golang', 6), ('simple', 6), ('swift', 6), ('tree', 6), ('clean code', 5), ('lca', 5), ('lowest-common-ancestor', 5), ('recusion', 5), ('backtracking', 4), ('bfs', 4), ('dfs-tree', 4), ('lowest common ancestor', 4), ('python3', 4), ('recursive function design', 4), ('ruby', 4), ('wrong-answer', 4), ('c', 3), ('c++ code', 3), ('commented', 3), ('cpp solution', 3), ('depth first search', 3), ('dfs solution', 3), ('easy to understand', 3), ('easy-to-understand', 3), ('easy-undestand', 3), ('explanation', 3), ('hashmap', 3), ('js', 3), ('linear time', 3), ('post-order-traversal', 3), ('short', 3), ('stack', 3), ('testcase-wrong', 3), ('tree traversal', 3), ('typescript', 3), ('video', 3), ('accepted', 2), ('chinese', 2), ('cpp easy', 2), ('depth-first-search', 2), ('dfs recursive', 2), ('dfs simple solution', 2), ('divide and conquer', 2), ('efficient solution', 2), ('explanations', 2), ('fastest', 2), ('golang-solution', 2), ('inorder-traversal', 2), ('java ac solution', 2), ('javascrip', 2), ('javascript solution', 2), ('js javascript', 2), ('optimized', 2), ('php', 2), ('postorder', 2), ('preorder traversal', 2), ('python2', 2), ('recurision', 2), ('recursive solution', 2), ('recursively', 2), ('recurssion', 2), ('run-time-error', 2), ('simple clear c++ solution', 2), ('simple solution', 2), ('space optimization', 2), ('trees', 2), ('youtube', 2), ('100 faster', 1), ('100 speed', 1), ('12ms', 1), ('amazon', 1), ('amazon interview', 1), ('avnish', 1), ('awesome', 1), ('awesome samriddhi', 1), ('back-tracking', 1), ('beats 100 percent', 1), ('beginner', 1), ('best-submission', 1), ('binary search tree', 1), ('binary-search', 1), ('binarytree', 1), ('bottom-up tree traversal', 1), ('bottom-up-algorithm', 1), ('brute force to optimal', 1), ('bst', 1), ('bug', 1), ('bug in python test case', 1), ('bug report', 1), ('c# strong type tuple', 1), ('c# tuple', 1), ('c++14', 1), ('c++17', 1), ('clean', 1), ('clearly explained', 1), ('code review', 1), ('comment', 1), ('comments', 1), ('comments-added', 1), ('common-ancestor', 1), ('commonsense', 1), ('cpp-solution', 1), ('csharp', 1), ('data structures', 1), ('dfs-in-order', 1), ('dfs-iterative', 1), ('divide-and-conquer', 1), ('dynamic-programming', 1), ('easy understand', 1), ('easy-understsand', 1), ('eulerian-path', 1), ('explain', 1), ('explained', 1), ('explained solution', 1), ('facebook', 1), ('fast', 1), ('fast and simple', 1), ('fast-solution', 1), ('go lang', 1), ('go-solution', 1), ('google', 1), ('hashset', 1), ('incorrect-test-case', 1), ('interview-friendly', 1), ('intuitive', 1), ('java binarysearch linear', 1), ('java solution', 1), ('javascript recursive', 1), ('kotlin', 1), ('kotlinvim', 1), ('leetcode', 1), ('leetcode-issue-only', 1), ('leetcode-only', 1), ('linear memory', 1), ('linear space', 1), ('linear-time', 1), ('linked-list', 1), ('list', 1), ('lowestcommonancestor', 1), ('microsoft', 1), ('more-fast', 1), ('naive', 1), ('nlogn', 1), ('no global variable', 1), ('non-recursive', 1), ('output-limit-exceeded', 1), ('pair', 1), ('parents map', 1), ('path', 1), ('path-finding', 1), ('pointer', 1), ('postorder-traversal', 1), ('pre-order', 1), ('pruning', 1), ('pythonpython3', 1), ('queue', 1), ('rajat', 1), ('readable', 1), ('reason', 1), ('reccursion', 1), ('recursive easy', 1), ('recursive-dfs', 1), ('recusive', 1), ('remove ambiguity', 1), ('resursive', 1), ('return two data types', 1), ('ritik', 1), ('runtime', 1), ('showcase', 1), ('simpe', 1), ('simple beginner friendly', 1), ('solution-sharing-cpp', 1), ('srp principle', 1), ('stack-over-flow', 1), ('step-by-step illustration', 1), ('steps', 1), ('strong type', 1), ('strong type data type', 1), ('tarjans algorithm', 1), ('test-case', 1), ('time-complexity', 1), ('time-complexity-o', 1), ('time-limit-exceeded', 1), ('time-limit-exceeded-python', 1), ('tle', 1), ('top-down', 1), ('top-down tree traversal', 1), ('tracing path concept', 1), ('tree traversal warmup', 1), ('tree-traversal', 1), ('trick', 1), ('video explanation', 1), ('well-commented', 1), ('wow', 1)]"
235,Lowest Common Ancestor of a Binary Search Tree,https://leetcode.com/problems/lowest-common-ancestor-of-a-binary-search-tree,"Given a binary search tree (BST), find the lowest common ancestor (LCA) of two given nodes in the BST.

According to the definition of LCA on Wikipedia: “The lowest common ancestor is defined between two nodes p and q as the lowest node in T that has both p and q as descendants (where we allow a node to be a descendant of itself).”",['tree'],Easy,3064,132,956006,499901,"[""Lowest Common Ancestor of a Binary Tree"", ""Smallest Common Region"", ""Lowest Common Ancestor of a Binary Tree II"", ""Lowest Common Ancestor of a Binary Tree III"", ""Lowest Common Ancestor of a Binary Tree IV""]","[('java', 61), ('cpp', 43), ('c++', 41), ('python', 33), ('recursion', 33), ('recursive', 28), ('solution', 23), ('iterative', 21), ('binary-tree', 18), ('javascript', 16), ('binary search tree', 14), ('python 3', 12), ('binary-search-tree', 9), ('easy-understand', 9), ('bst', 8), ('java-solution', 7), ('python3', 7), ('cpp solution', 6), ('simple', 6), ('binary-search', 5), ('c#', 5), ('c++11', 5), ('dfs', 5), ('easy', 4), ('easy-understanding', 3), ('golang', 3), ('golang-solution', 3), ('iteration', 3), ('iterative way', 3), ('lca', 3), ('logn', 3), ('lowest-common-ancestor', 3), ('recurision', 3), ('recursive easy', 3), ('recursively', 3), ('run-time-error', 3), ('short', 3), ('tree', 3), ('bst-iterator', 2), ('c', 2), ('c++ code', 2), ('clean code', 2), ('easy-to-understand', 2), ('iteratively', 2), ('linkedhashset', 2), ('lowest common ancestor', 2), ('python2', 2), ('recusion', 2), ('simple clear c++ solution', 2), ('solution-sharing-cpp', 2), ('swift', 2), ('tree-traversal', 2), ('wrong-answer', 2), ('#javascript', 1), ('#recursion', 1), ('accepted', 1), ('accepted solution', 1), ('avnish', 1), ('awesome samriddhi', 1), ('best-submission', 1), ('binary tree', 1), ('binary-tree-construction', 1), ('binarytree', 1), ('bugs', 1), ('c++ iterative sol', 1), ('clarification', 1), ('clean', 1), ('commented', 1), ('comments', 1), ('common-ancestor', 1), ('complexity-analysis', 1), ('confuse-answer', 1), ('constant-space', 1), ('cpp easy', 1), ('detail', 1), ('duplicate', 1), ('easiest', 1), ('easy solution', 1), ('easy to understand', 1), ('easy understanding', 1), ('easy-undestand', 1), ('efficient', 1), ('error', 1), ('explaination', 1), ('explained solution', 1), ('explanation', 1), ('explanations', 1), ('fast', 1), ('fast-solution', 1), ('few lines', 1), ('fewest-line', 1), ('four-different-solutions', 1), ('implementation', 1), ('interesting', 1), ('intuitive', 1), ('iterate', 1), ('java ac solution', 1), ('java binarysearch linear', 1), ('java solution', 1), ('javascript solution', 1), ('js', 1), ('js javascript', 1), ('kotlin', 1), ('kotlinvim', 1), ('level-order-traversal', 1), ('linear seach', 1), ('linked-list', 1), ('non-recursion', 1), ('non-recursive', 1), ('null', 1), ('path sum 2', 1), ('performance', 1), ('preorder', 1), ('pythonpython3', 1), ('query', 1), ('queue', 1), ('readable', 1), ('reccursion', 1), ('recursion formula', 1), ('recursive solution', 1), ('recusive', 1), ('return-value', 1), ('ritik', 1), ('ruby', 1), ('simplesolution', 1), ('simplest', 1), ('space', 1), ('ternary-operator', 1), ('test-case', 1), ('time', 1), ('time-complexity', 1), ('tree traversal', 1), ('typescript', 1)]"
234,Palindrome Linked List,https://leetcode.com/problems/palindrome-linked-list,"Given the head of a singly linked list, return true if it is a palindrome.","['linked-list', 'two-pointers']",Easy,5201,436,1519894,642381,"[""Palindrome Number"", ""Valid Palindrome"", ""Reverse Linked List""]","[('java', 118), ('cpp', 90), ('python', 82), ('c++', 79), ('javascript', 47), ('python 3', 40), ('constant space', 31), ('solution', 28), ('easy-understanding', 24), ('java-solution', 24), ('constant-space', 23), ('palindrome', 22), ('linked-list', 21), ('linked list', 20), ('python3', 20), ('easy', 19), ('recursion', 18), ('two-pointers', 18), ('easy-understand', 17), ('stack', 17), ('linked-list-palindrome', 15), ('recursive', 15), ('easy-undestand', 14), ('c#', 13), ('cpp solution', 12), ('golang', 12), ('linkedlists', 12), ('linear time', 10), ('c++ code', 9), ('easy-to-understand', 9), ('explained', 9), ('reverse', 9), ('two pointers', 9), ('c', 8), ('iterative', 8), ('reverse list', 8), ('time-limit-exceeded', 8), ('go', 7), ('short', 7), ('simple', 7), ('slowfast pointers', 7), ('commented', 6), ('constant memory', 6), ('cpp easy', 6), ('linkedlist', 6), ('list', 6), ('clean code', 5), ('easy to understand', 5), ('fast and simple', 5), ('golang-solution', 5), ('readable', 5), ('recursion palindrome', 5), ('reverse-list', 5), ('video-explanation', 5), ('easytounderstand', 4), ('fast', 4), ('intuitive', 4), ('kotlin', 4), ('recurision', 4), ('reverse linked list', 4), ('stack-based', 4), ('swift', 4), ('two-pointer', 4), ('xor', 4), ('#javascript', 3), ('2 pointers', 3), ('accepted', 3), ('best-solution', 3), ('fast and slow ptrs', 3), ('fast slow pointer', 3), ('fast-solution', 3), ('in-place', 3), ('javascrip', 3), ('linear-time', 3), ('math', 3), ('palindrome-check', 3), ('recusion', 3), ('ruby', 3), ('simple solution', 3), ('space-complexity', 3), ('stacks', 3), ('vector', 3), ('wrong-answer', 3), ('amazon', 2), ('backtracking', 2), ('beating-90-submissions', 2), ('beats 98', 2), ('best-submission', 2), ('clean-code', 2), ('clear', 2), ('comments', 2), ('comments-added', 2), ('constant-space-iterative', 2), ('cpp doubt', 2), ('csharp', 2), ('debug', 2), ('easiest', 2), ('elegant', 2), ('explaination', 2), ('explanation', 2), ('facebook', 2), ('faster', 2), ('fastest', 2), ('go-solution', 2), ('hashing', 2), ('help', 2), ('inplace', 2), ('javascript solution', 2), ('linear', 2), ('linked', 2), ('linked-list-cycle', 2), ('linked-lists', 2), ('microsoft', 2), ('missing-test-case', 2), ('no-reverse', 2), ('optimal', 2), ('optimized', 2), ('oracle', 2), ('palindromelinkedlist', 2), ('recursively', 2), ('reverse link list', 2), ('rust', 2), ('simplesolution', 2), ('solution-sharing-cpp', 2), ('stl', 2), ('twopointer', 2), ('valid-palindrome', 2), ('works-on-my-machine', 2), ('#c++', 1), ('#cpp', 1), ('#linkedlist', 1), ('#python', 1), ('#reverselist', 1), ('#stack', 1), ('0ms', 1), ('100', 1), ('100 faster', 1), ('100 faster runtime', 1), ('1ms runtime', 1), ('2 solutions', 1), ('ac solution', 1), ('accepted solution', 1), ('address', 1), ('adobe', 1), ('algorithm', 1), ('algorithms', 1), ('arraylist', 1), ('ask', 1), ('best', 1), ('best explaination', 1), ('best solutions', 1), ('best time complexity', 1), ('bloomberg', 1), ('bug', 1), ('c-code', 1), ('c-programming', 1), ('c++ easy to understand', 1), ('c++ solution', 1), ('capital one', 1), ('chinese', 1), ('clean', 1), ('comment', 1), ('comments added', 1), ('cpp error', 1), ('cpp-functional', 1), ('cpp-solution', 1), ('ctci', 1), ('detailed explanation', 1), ('double-pointers', 1), ('doubt', 1), ('easy to undersstand', 1), ('easy understand', 1), ('easy undestanding', 1), ('easy-explanation', 1), ('easy-understsand', 1), ('easytoundersatand', 1), ('elegant solution', 1), ('es6', 1), ('esay-understand', 1), ('explanation with code', 1), ('explanation with logic', 1), ('explanations', 1), ('explanatory comments', 1), ('follow-up', 1), ('further-question', 1), ('github', 1), ('good variable names', 1), ('google', 1), ('hare and turtle', 1), ('hash', 1), ('head', 1), ('heap-memory', 1), ('holly-language', 1), ('improve', 1), ('inorder', 1), ('interviews', 1), ('ios', 1), ('iteration', 1), ('iterative approch', 1), ('iteratve-recursive', 1), ('java ac solution', 1), ('java script', 1), ('java simple', 1), ('java solution', 1), ('java-8', 1), ('kotlinvim', 1), ('linear search', 1), ('linear space', 1), ('link list', 1), ('linked lists', 1), ('memory-efficient', 1), ('mrmagician', 1), ('non-recursive', 1), ('oci', 1), ('on', 1), ('one pass', 1), ('optimisation', 1), ('performance', 1), ('picture', 1), ('picture explanation', 1), ('pith', 1), ('pointer', 1), ('pointer of pointer', 1), ('pointers', 1), ('prime', 1), ('pyhon', 1), ('pyhton3', 1), ('python2', 1), ('queue', 1), ('queue and linkedlist', 1), ('rabin-karp', 1), ('recursive easy', 1), ('recurssion', 1), ('reversal', 1), ('reverse-linked-list', 1), ('reverselinkedlist', 1), ('reverselist', 1), ('rolling-hash', 1), ('runtime-error', 1), ('scala', 1), ('short code', 1), ('short-code', 1), ('simpe', 1), ('simple clear c++ solution', 1), ('simplest', 1), ('singly-linked-list', 1), ('slow', 1), ('solution-sharing-c', 1), ('space', 1), ('speed', 1), ('stack-implementation', 1), ('stdin-error', 1), ('step by step explanation', 1), ('string', 1), ('string-searching', 1), ('stringbuilder in java', 1), ('strings', 1), ('structured code', 1), ('success', 1), ('swap', 1), ('tailrec', 1), ('test-case', 1), ('testcase-wrong', 1), ('time-complexity', 1), ('tle', 1), ('tortoise and hare', 1), ('tortoise-and-hare-algo', 1), ('two pointer technique', 1), ('two solutions', 1), ('twopointers', 1), ('type-cast', 1), ('uber interview', 1), ('understandable', 1), ('unique', 1), ('upvote', 1), ('weird', 1), ('well-commented', 1), ('wot', 1), ('xor-linked-list', 1)]"
233,Number of Digit One,https://leetcode.com/problems/number-of-digit-one,"Given an integer n, count the total number of digit 1 appearing in all non-negative integers less than or equal to n.",['math'],Hard,393,739,166510,53145,"[""Factorial Trailing Zeroes"", ""Digit Count in Range""]","[('cpp', 20), ('python', 13), ('java', 11), ('solution', 9), ('recursive', 8), ('easy-understand', 5), ('c++', 4), ('digit dp', 4), ('dynamic programming', 4), ('math', 4), ('python 3', 3), ('python3', 3), ('recursion', 3), ('short', 3), ('simple', 3), ('best-submission', 2), ('c#', 2), ('explanation', 2), ('test-case', 2), ('0ms', 1), ('accepted', 1), ('algorithms', 1), ('c++ code', 1), ('c++ solution', 1), ('clean', 1), ('cpp-solution', 1), ('easy', 1), ('easy undestanding', 1), ('easy-understsand', 1), ('easytounderstand', 1), ('efficient', 1), ('explained', 1), ('fast', 1), ('golang', 1), ('golf', 1), ('javascript', 1), ('number-of-digit-one', 1), ('overflow', 1), ('readable', 1), ('recurrance', 1), ('solution-sharing-cpp', 1), ('solution-sharing-python', 1), ('time-limit-exceeded', 1), ('well-explained', 1), ('wrong-answer', 1), ('xjq', 1)]"
232,Implement Queue using Stacks,https://leetcode.com/problems/implement-queue-using-stacks,"Implement a first in first out (FIFO) queue using only two stacks. The implemented queue should support all the functions of a normal queue (push, peek, pop, and empty).

Implement the MyQueue class:


	void push(int x) Pushes element x to the back of the queue.
	int pop() Removes the element from the front of the queue and returns it.
	int peek() Returns the element at the front of the queue.
	boolean empty() Returns true if the queue is empty, false otherwise.


Notes:


	You must use only standard operations of a stack, which means only push to top, peek/pop from top, size, and is empty operations are valid.
	Depending on your language, the stack may not be supported natively. You may simulate a stack using a list or deque (double-ended queue) as long as you use only a stack's standard operations.


Follow-up: Can you implement the queue such that each operation is amortized O(1) time complexity? In other words, performing n operations will take overall O(n) time even if one of those operations may take longer.","['stack', 'design']",Easy,1714,167,521713,275919,"[""Implement Stack using Queues""]","[('java', 45), ('cpp', 41), ('c++', 32), ('python', 30), ('stacks', 30), ('queue', 23), ('stack', 22), ('javascript', 20), ('python 3', 20), ('java-solution', 11), ('easy-understanding', 9), ('solution', 9), ('easy-understand', 8), ('python3', 7), ('0ms', 5), ('cpp easy', 5), ('cpp solution', 5), ('golang', 5), ('c#', 4), ('javascript solution', 4), ('simple', 4), ('swift', 4), ('easy', 3), ('easy-undestand', 3), ('fast', 3), ('queue and stack', 3), ('ruby', 3), ('two-stack', 3), ('vector', 3), ('100 faster', 2), ('accepted', 2), ('algorithms', 2), ('amortized', 2), ('constant time', 2), ('easiest', 2), ('easy-to-understand', 2), ('js', 2), ('linkedlists', 2), ('list', 2), ('one stack', 2), ('queues', 2), ('rust', 2), ('short', 2), ('simple clear c++ solution', 2), ('stl', 2), ('two stack', 2), ('0ms-solution', 1), ('100 speed', 1), ('2-stacks', 1), ('2stacks', 1), ('append', 1), ('beats all answers', 1), ('beginner', 1), ('beginner friendly', 1), ('beginners', 1), ('beginners level', 1), ('best-submission', 1), ('c', 1), ('c++ code', 1), ('c++ easy to understand', 1), ('c++ solution', 1), ('clean', 1), ('clean-code', 1), ('clear', 1), ('commentary', 1), ('constant-space', 1), ('constant-time', 1), ('cycle', 1), ('datastructure', 1), ('dequeue', 1), ('easy java solution', 1), ('easy to understand', 1), ('easy-explanation', 1), ('easy-understsand', 1), ('eazy', 1), ('error', 1), ('fast and simple', 1), ('give stars and subscribe', 1), ('go', 1), ('go-solution', 1), ('golang-solution', 1), ('implementation', 1), ('java ac solution', 1), ('java solution', 1), ('kotlin', 1), ('linear-time', 1), ('linkedlist', 1), ('logic explained clearly', 1), ('meiyaowen', 1), ('o1', 1), ('one-stack', 1), ('onlyonestack', 1), ('optimized', 1), ('pop', 1), ('python3.8', 1), ('queue-approach', 1), ('recurision', 1), ('recursive', 1), ('runtime', 1), ('rust vec', 1), ('self explanatory', 1), ('shared-answer', 1), ('short code', 1), ('short solution', 1), ('simple solution', 1), ('simple-solution', 1), ('simplest', 1), ('solution-share', 1), ('solution-sharing-cpp', 1), ('stack-implementation', 1), ('stackusingqueues', 1), ('two stacks', 1), ('ultra easy', 1), ('upvote', 1), ('well-commented', 1), ('with explanation', 1), ('wrong-answer', 1)]"
231,Power of Two,https://leetcode.com/problems/power-of-two,"Given an integer n, return true if it is a power of two. Otherwise, return false.

An integer n is a power of two, if there exists an integer x such that n == 2x.","['math', 'bit-manipulation']",Easy,1337,218,942972,413227,"[""Number of 1 Bits"", ""Power of Three"", ""Power of Four""]","[('java', 75), ('c++', 72), ('bit manipulation', 57), ('python', 54), ('cpp', 52), ('python 3', 34), ('bit-manipulation', 27), ('javascript', 23), ('solution', 23), ('java-solution', 20), ('python3', 20), ('cpp solution', 14), ('easy-understanding', 11), ('bitwise', 10), ('bitwise operation', 10), ('c', 10), ('recursion', 8), ('c++ code', 7), ('easy', 7), ('easy-understand', 7), ('golang', 7), ('js', 7), ('log', 7), ('math', 7), ('one-liner', 7), ('python2', 7), ('c#', 6), ('cpp easy', 6), ('easy-to-understand', 6), ('easy-undestand', 6), ('fast and simple', 6), ('logarithm', 6), ('power of two', 6), ('simple solution', 6), ('binary', 5), ('power-of-two', 5), ('recursive', 5), ('short', 5), ('bitmanipulation', 4), ('c++11', 4), ('go', 4), ('golang-solution', 4), ('math-solution', 4), ('poweroftwo', 4), ('0ms', 3), ('accepted', 3), ('constant time', 3), ('easysolution', 3), ('easytounderstand', 3), ('explanation', 3), ('fast', 3), ('javascript solution', 3), ('oneline', 3), ('1 line', 2), ('100 faster', 2), ('100 memory', 2), ('accepted solution', 2), ('amazon', 2), ('beginnerfriendly', 2), ('binary search', 2), ('c++ easy to understand', 2), ('c++ solution', 2), ('easiest', 2), ('java ac solution', 2), ('linear time', 2), ('pyhton3', 2), ('regex', 2), ('ruby', 2), ('rust', 2), ('simple', 2), ('simple clear c++ solution', 2), ('solution-sharing-cpp', 2), ('swift', 2), ('while-loop', 2), ('wrong answer', 2), ('#javascript', 1), ('#math', 1), ('#python3', 1), ('1-line solution', 1), ('100', 1), ('100 beat', 1), ('100 faster cpp', 1), ('100 percentage fastest', 1), ('100faster', 1), ('1ms', 1), ('4 liner', 1), ('90+', 1), ('95 per faster', 1), ('algorithm', 1), ('algorithms', 1), ('arithmetic-operations', 1), ('awesome samriddhi', 1), ('best-submission', 1), ('binar', 1), ('binary-conversion', 1), ('binary-search', 1), ('bit magic', 1), ('bit operator', 1), ('bit twiddling', 1), ('bit-shift', 1), ('bits', 1), ('bitset', 1), ('bitset library', 1), ('bitwise-operators', 1), ('boost', 1), ('c++ bitwise', 1), ('c++ iterative sol', 1), ('c++17', 1), ('cisco', 1), ('compile-error', 1), ('constant memory', 1), ('constant-space', 1), ('constant-time', 1), ('cpp bitwise', 1), ('cpp clear', 1), ('cpp-solution', 1), ('csharp', 1), ('detailed explanation', 1), ('easiest solution', 1), ('easy-explanation', 1), ('easy-solition', 1), ('efficiency', 1), ('explain', 1), ('explained', 1), ('explanations', 1), ('fast-solution', 1), ('five-different-solutions', 1), ('for loop', 1), ('fuck noobs', 1), ('fundamentals', 1), ('go solution', 1), ('hacks', 1), ('hamming-weight', 1), ('inbuilt method', 1), ('issue', 1), ('iterative', 1), ('iteratively', 1), ('javascipt', 1), ('js javascript', 1), ('kotlin', 1), ('kotlin-solution', 1), ('large-input', 1), ('log2', 1), ('logic explained clearly', 1), ('loop', 1), ('math.pow', 1), ('no-bit-manipulation', 1), ('number-of-1-bits', 1), ('numerical methods', 1), ('one line', 1), ('one-line', 1), ('onelinecode', 1), ('oneliner', 1), ('php', 1), ('php solution', 1), ('popcount', 1), ('power', 1), ('pyhon', 1), ('pyhton', 1), ('pythonpython3', 1), ('recursive easy', 1), ('recursive solution', 1), ('recusion', 1), ('regular expression', 1), ('ritik', 1), ('scala', 1), ('shift operators', 1), ('simple java solution', 1), ('simple python accepted', 1), ('solution by python', 1), ('solution-python', 1), ('speed', 1), ('stl', 1), ('string', 1), ('very easy', 1), ('well-commented', 1), ('with explanation', 1), ('wrong-answer', 1)]"
230,Kth Smallest Element in a BST,https://leetcode.com/problems/kth-smallest-element-in-a-bst,"Given the root of a binary search tree, and an integer k, return the kth (1-indexed) smallest element in the tree.","['binary-search', 'tree']",Medium,3802,86,840695,530798,"[""Binary Tree Inorder Traversal"", ""Second Minimum Node In a Binary Tree""]","[('java', 94), ('python', 61), ('inorder traversal', 50), ('c++', 49), ('cpp', 49), ('dfs', 37), ('python 3', 36), ('recursive', 36), ('inorder-traversal', 34), ('inorder', 32), ('recursion', 31), ('iterative', 28), ('javascript', 27), ('java-solution', 23), ('in-order-traversal', 20), ('bst', 14), ('cpp solution', 13), ('solution', 12), ('golang', 11), ('stack', 11), ('easy', 10), ('morris-traversal', 10), ('c#', 9), ('easy-understanding', 9), ('priority queue', 9), ('python3', 9), ('binary-tree', 7), ('bfs', 6), ('binary-search-tree', 6), ('constant space', 6), ('dfs-in-order', 6), ('recusion', 6), ('recursive easy', 5), ('short', 5), ('simple', 5), ('stack-based', 5), ('binary-search', 4), ('c++ code', 4), ('cpp easy', 4), ('dfs simple solution', 4), ('golang-solution', 4), ('in-order', 4), ('inordertraversal', 4), ('recursively', 4), ('ruby', 4), ('rust', 4), ('simple solution', 4), ('swift', 4), ('traversal', 4), ('tree', 4), ('amazon', 3), ('binary search', 3), ('constant-space', 3), ('csharp', 3), ('easy-solition', 3), ('easy-to-understand', 3), ('fast', 3), ('generator', 3), ('in order', 3), ('iteration', 3), ('iterative-dfs', 3), ('iteratively', 3), ('kth-smallest-element-in-a-bst', 3), ('recursive solution', 3), ('simple clear c++ solution', 3), ('stacks', 3), ('time-complexity', 3), ('tree-traversal', 3), ('trees', 3), ('100 speed', 2), ('accepted', 2), ('arraylist', 2), ('binary search tree', 2), ('binarysearch', 2), ('bug-test-case', 2), ('dfs-iterative', 2), ('easiest', 2), ('easy to understand', 2), ('easy undestanding', 2), ('easysolution', 2), ('efficient', 2), ('error', 2), ('fast-solution', 2), ('follow-up', 2), ('go-solution', 2), ('heap', 2), ('incorrect-test-case', 2), ('javascrip', 2), ('javascript solution', 2), ('level-order-traversal', 2), ('preorder traversal', 2), ('python2', 2), ('recurision', 2), ('scala', 2), ('sort', 2), ('space', 2), ('time', 2), ('typescript', 2), ('#dfs', 1), ('#inorder traversal', 1), ('#inorder-traversal', 1), ('#python', 1), ('#python 3', 1), ('#python3', 1), ('#stack', 1), ('0ms', 1), ('98faster', 1), ('algorithms', 1), ('amazon interview', 1), ('augment', 1), ('avl tree', 1), ('backtracking', 1), ('beats 100', 1), ('beginner friendly', 1), ('block', 1), ('bst-iterator', 1), ('bst-morris', 1), ('bug', 1), ('c', 1), ('c code', 1), ('c++ iterative sol', 1), ('c++14', 1), ('clear', 1), ('comments', 1), ('comments-added', 1), ('compile', 1), ('complexity analysis', 1), ('complexity-analysis', 1), ('constant memory', 1), ('count', 1), ('cpp doubt', 1), ('cpp-solution', 1), ('deep-first-search', 1), ('delete-node-in-a-bst', 1), ('depth first search', 1), ('depth-first-search', 1), ('deque', 1), ('dfs-non-recursive', 1), ('divide and conquer', 1), ('divideconquer', 1), ('early termination', 1), ('easy solution', 1), ('easy solutions', 1), ('easy understanding', 1), ('easy-implementation', 1), ('easy-understand', 1), ('easy-undestand', 1), ('easytounderstand', 1), ('efficiency', 1), ('explained', 1), ('explanation', 1), ('explanation with code', 1), ('fast and simple', 1), ('faster', 1), ('fastest', 1), ('go', 1), ('heapq', 1), ('heaps algorithm', 1), ('help needed', 1), ('inorder iterative', 1), ('iterative traversal', 1), ('iterative way', 1), ('iterative-inorder', 1), ('iteratve-recursive', 1), ('java solution', 1), ('kth smallest', 1), ('kth smallest binary tree.', 1), ('kthsmallestinbst', 1), ('linear time', 1), ('list', 1), ('logn', 1), ('maxheap', 1), ('morris', 1), ('morris-inorder-traversal', 1), ('morristraversal', 1), ('mrmagician', 1), ('no extra space', 1), ('no stack', 1), ('non-copy-paste', 1), ('o1 space complexity', 1), ('object-oriented', 1), ('optimal', 1), ('php', 1), ('postorder-traversal', 1), ('preorder-traversal', 1), ('priority-queue', 1), ('priorityqueue', 1), ('pyhton', 1), ('python3.8', 1), ('reccursive', 1), ('recursiveley', 1), ('recurson', 1), ('recusive', 1), ('runtimeerror', 1), ('sasuke214', 1), ('sets', 1), ('simplest', 1), ('solution-python', 1), ('space o1', 1), ('straightforward', 1), ('tail-recursion', 1), ('tail-recursive', 1), ('traverse', 1), ('traversing', 1), ('tree problem', 1), ('two-methods', 1), ('upvote', 1), ('vector', 1), ('visualization', 1), ('worst', 1), ('wrong-answer', 1), ('yield', 1)]"
229,Majority Element II,https://leetcode.com/problems/majority-element-ii,"Given an integer array of size n, find all elements that appear more than ⌊ n/3 ⌋ times.

Follow-up: Could you solve the problem in linear time and in O(1) space?",['array'],Medium,2657,222,516666,202318,"[""Majority Element"", ""Check If a Number Is Majority Element in a Sorted Array""]","[('java', 38), ('c++', 33), ('cpp', 32), ('python', 30), ('python 3', 25), ('boyer-moore', 22), ('javascript', 16), ('linear time', 15), ('solution', 10), ('java-solution', 8), ('python3', 7), ('constant-space', 6), ('cpp solution', 6), ('easy-understand', 6), ('easy-understanding', 6), ('array', 5), ('constant space', 5), ('cpp easy', 5), ('map', 5), ('boyer moore voting', 4), ('easy-undestand', 4), ('hashmap', 4), ('javascript solution', 4), ('moorevoting', 4), ('simple', 4), ('unordered map', 4), ('accepted', 3), ('c#', 3), ('c++ code', 3), ('c++14', 3), ('easy', 3), ('easytounderstand', 3), ('explained', 3), ('golang', 3), ('hashing', 3), ('missing-test-case', 3), ('moore algorithm', 3), ('one-liner', 3), ('short', 3), ('solution-sharing-cpp', 3), ('time-complexity', 3), ('video-explanation', 3), ('boyer algorithm', 2), ('c++11', 2), ('dictionary', 2), ('dictonary', 2), ('go', 2), ('hash table', 2), ('interview question', 2), ('linear-time', 2), ('list comprehension', 2), ('majority-element', 2), ('moore voting algorithm', 2), ('pythonpython3', 2), ('ruby', 2), ('sort', 2), ('video', 2), ('#hashmap', 1), ('#moore-voting', 1), ('#python 3', 1), ('1-liner', 1), ('100 faster runtime', 1), ('100 memory', 1), ('100 speed', 1), ('4 liner', 1), ('99.98 faster', 1), ('accepted solution', 1), ('algorithms', 1), ('beats 100 percent', 1), ('beginner friendly', 1), ('binary-search', 1), ('boyer moore voting algo', 1), ('c', 1), ('c++ solution', 1), ('clean solution', 1), ('commented', 1), ('constant memory', 1), ('csharp', 1), ('dict', 1), ('different-oj-local', 1), ('dynamic-programming', 1), ('easiest', 1), ('easy-to-understand', 1), ('easyunderstading', 1), ('efficient solution', 1), ('elegant', 1), ('example based solution', 1), ('explaination', 1), ('explanation', 1), ('fast', 1), ('fast-solution', 1), ('faster than 100.00', 1), ('fastest', 1), ('fp', 1), ('functional-programming', 1), ('general', 1), ('general solution', 1), ('golang-solution', 1), ('google', 1), ('grasp', 1), ('hashset', 1), ('heuristic', 1), ('implementation', 1), ('improve', 1), ('in-place', 1), ('incorrect-test-case', 1), ('intuition based solution', 1), ('intuitive', 1), ('java simple', 1), ('javascript brute force', 1), ('javascriptes6', 1), ('kotlin', 1), ('linear', 1), ('linertime', 1), ('majority element', 1), ('map in c++', 1), ('maps', 1), ('memo', 1), ('memory efficient', 1), ('modified', 1), ('moores algorithm', 1), ('moores voting', 1), ('no space', 1), ('onepass', 1), ('partition', 1), ('php', 1), ('pointer', 1), ('proof', 1), ('python2', 1), ('pyton3', 1), ('quickselect', 1), ('rust', 1), ('scala', 1), ('set', 1), ('simple clear c++ solution', 1), ('simple solution', 1), ('solution-cpp', 1), ('solution-share', 1), ('sorting', 1), ('space-optimized', 1), ('stl', 1), ('story based explanation', 1), ('streaming-algorithms', 1), ('swift', 1), ('testcase-wrong', 1), ('two-pointers', 1), ('two-solutions', 1), ('typescript', 1), ('understandable', 1), ('unordermap', 1), ('video explaination', 1), ('video explanation', 1), ('video solution', 1), ('video-explaination', 1), ('vote-algorithm', 1), ('voting', 1), ('voting algorithm', 1), ('wrong-answer', 1), ('xjq', 1)]"
228,Summary Ranges,https://leetcode.com/problems/summary-ranges,"You are given a sorted unique integer array nums.

Return the smallest sorted list of ranges that cover all the numbers in the array exactly. That is, each element of nums is covered by exactly one of the ranges, and there is no integer x such that x is in one of the ranges but not in nums.

Each range [a,b] in the list should be output as:


	""a->b"" if a != b
	""a"" if a == b",['array'],Easy,996,715,497120,213037,"[""Missing Ranges"", ""Data Stream as Disjoint Intervals""]","[('java', 65), ('cpp', 40), ('python', 40), ('c++', 35), ('solution', 25), ('javascript', 24), ('python 3', 21), ('easy-understand', 14), ('two-pointers', 13), ('python3', 12), ('easy-understanding', 10), ('java-solution', 10), ('golang', 9), ('simple', 9), ('easy', 8), ('easy-to-understand', 7), ('summary-ranges', 5), ('accepted', 4), ('array', 4), ('c#', 4), ('cpp solution', 4), ('easy-undestand', 4), ('ruby', 4), ('short', 4), ('0ms', 3), ('binary-search', 3), ('easytounderstand', 3), ('go-solution', 3), ('golang-solution', 3), ('javascript solution', 3), ('python2', 3), ('solution-sharing-cpp', 3), ('stacks', 3), ('summaryranges', 3), ('two pointers', 3), ('100 speed', 2), ('c++11', 2), ('clean code', 2), ('commented', 2), ('constant-space', 2), ('cpp with explanation', 2), ('easiest', 2), ('easy to understand', 2), ('easy understand', 2), ('explained', 2), ('fastest', 2), ('go', 2), ('intuitive', 2), ('java solution', 2), ('linear time', 2), ('one pass solution', 2), ('rust', 2), ('sliding-window', 2), ('swift', 2), ('video explanation', 2), ('0 ms solution', 1), ('0ms-solution', 1), ('1-liner', 1), ('100 space', 1), ('2 pointer approach', 1), ('2-pointers', 1), ('2pointers', 1), ('add one number', 1), ('algorithms', 1), ('array nesting', 1), ('arrays', 1), ('beginner friendly', 1), ('best-submission', 1), ('brute force to optimal', 1), ('c', 1), ('c programming', 1), ('c--', 1), ('c++ solution simple', 1), ('c++17', 1), ('capital one', 1), ('clean', 1), ('concise', 1), ('concise-solution', 1), ('cpp easy', 1), ('csharp', 1), ('double-pointers', 1), ('dynaminc programming', 1), ('easy-understsand', 1), ('edgecases', 1), ('explaination', 1), ('explained solution', 1), ('explanation', 1), ('explanation of logic', 1), ('fast and simple', 1), ('faster than 100.00', 1), ('fasterthan100', 1), ('feedback', 1), ('give stars and subscribe', 1), ('go lang', 1), ('google interview', 1), ('google onsite', 1), ('google phone screen', 1), ('heapq', 1), ('idea', 1), ('idiomatic', 1), ('if-else', 1), ('image', 1), ('implementation', 1), ('improve', 1), ('indexoutofbound', 1), ('interval', 1), ('iteration', 1), ('javascriptes6', 1), ('kotlin', 1), ('kotlinvim', 1), ('linear', 1), ('linear-time', 1), ('linked-list', 1), ('linkedlists', 1), ('logn', 1), ('math', 1), ('memory-limit-exceeded', 1), ('one-liner', 1), ('one-pass', 1), ('php', 1), ('php solution', 1), ('pointers', 1), ('question-not-clear', 1), ('range', 1), ('ranges', 1), ('readable', 1), ('recursion', 1), ('recusion', 1), ('sequence', 1), ('simplesolution', 1), ('sliding', 1), ('slidingwindow', 1), ('slow', 1), ('solution-sharing-python', 1), ('stack', 1), ('string', 1), ('subsequence', 1), ('swift5', 1), ('time-complexity', 1), ('two-poinnters', 1), ('vector', 1), ('video explaination', 1), ('video solution', 1), ('video-explanation', 1), ('well commented', 1), ('well-commented', 1), ('whileloop', 1), ('window', 1), ('wrong-answer', 1)]"
227,Basic Calculator II,https://leetcode.com/problems/basic-calculator-ii,"Given a string s which represents an expression, evaluate this expression and return its value. 

The integer division should truncate toward zero.","['string', 'stack']",Medium,2333,360,686162,266830,"[""Basic Calculator"", ""Expression Add Operators"", ""Basic Calculator III""]","[('java', 39), ('python', 34), ('stack', 25), ('cpp', 19), ('c++', 14), ('python 3', 14), ('stacks', 12), ('javascript', 11), ('c#', 6), ('java-solution', 6), ('solution', 6), ('stack-based', 6), ('easy-understand', 5), ('easy-understanding', 5), ('calculator', 4), ('golang', 4), ('parser', 4), ('python3', 4), ('simple', 4), ('constant-space', 3), ('cpp solution', 3), ('expression-tree', 3), ('infix-to-postfix', 3), ('javascript solution', 3), ('recursion', 3), ('rust', 3), ('short', 3), ('string', 3), ('swift', 3), ('test-cases', 3), ('constant space', 2), ('easy-to-understand', 2), ('explanations', 2), ('go', 2), ('golang-solution', 2), ('incorrect-test-case', 2), ('linear time', 2), ('parsing', 2), ('queue', 2), ('ruby', 2), ('string parsing', 2), ('strings', 2), ('test-case', 2), ('testcase-wrong', 2), ('accepted', 1), ('answer', 1), ('basic-calculator', 1), ('basic-calculator-2', 1), ('basiccalculatorii', 1), ('beating-90-submissions', 1), ('beginner friendly', 1), ('best-submission', 1), ('c++ easy to understand', 1), ('c++ solution', 1), ('clean code', 1), ('compile', 1), ('deque', 1), ('dequeu', 1), ('detailed', 1), ('easiest', 1), ('easy', 1), ('easy understanding', 1), ('easy-undestand', 1), ('error in solution', 1), ('expected-output', 1), ('explained', 1), ('explained solution', 1), ('expression', 1), ('expression eveluation', 1), ('facebook', 1), ('functional programming', 1), ('go-solution', 1), ('google', 1), ('intuitive', 1), ('intutive', 1), ('invalid testcase', 1), ('js', 1), ('js javascript', 1), ('kotlin', 1), ('kotlinvim', 1), ('linear', 1), ('linear seach', 1), ('linear-time', 1), ('linked-list', 1), ('linkedlist', 1), ('math', 1), ('math-solution', 1), ('mathematics', 1), ('memoization', 1), ('missing test case', 1), ('no extra space', 1), ('no-stack', 1), ('one pass', 1), ('optimal', 1), ('packrat', 1), ('php', 1), ('php solution', 1), ('postfix expression', 1), ('pythonpython3', 1), ('readable', 1), ('readable code', 1), ('recursive', 1), ('recursive descent', 1), ('regular expression', 1), ('regular-expression', 1), ('reverse polish notation', 1), ('rpn', 1), ('scala', 1), ('short c++ code', 1), ('single pass', 1), ('snapchat', 1), ('solution-cpp', 1), ('solution-sharing-cpp', 1), ('space analysis', 1), ('stack python', 1), ('string-operation', 1), ('switch-case', 1), ('time analysis', 1), ('time-limit-exceeded-py', 1), ('trade-off', 1), ('two-pointers', 1), ('video solution', 1), ('video-explanation', 1), ('well-explained', 1), ('wrong-answer', 1), ('wrong-test-cases', 1), ('xjq', 1)]"
226,Invert Binary Tree,https://leetcode.com/problems/invert-binary-tree,"Given the root of a binary tree, invert the tree, and return its root.",['tree'],Easy,5110,77,1021402,689720,[],"[('recursion', 108), ('java', 97), ('c++', 85), ('cpp', 77), ('recursive', 54), ('python', 51), ('binary-tree', 44), ('javascript', 39), ('dfs', 31), ('python 3', 25), ('solution', 24), ('bfs', 23), ('java-solution', 20), ('simple', 19), ('easy', 18), ('easy-understanding', 17), ('iterative', 17), ('invert binary tree', 16), ('cpp solution', 13), ('golang', 13), ('python3', 13), ('c#', 12), ('easy-understand', 12), ('recusion', 12), ('trees', 11), ('easy-undestand', 10), ('swift', 10), ('queue', 9), ('0ms', 8), ('c', 8), ('c++ code', 8), ('recursive easy', 8), ('simple solution', 8), ('tree', 7), ('cpp easy', 6), ('golang-solution', 6), ('recursive solution', 6), ('short', 6), ('breadth first search', 5), ('easytounderstand', 5), ('javascript solution', 5), ('recursively', 5), ('rust', 5), ('accepted', 4), ('binary tree', 4), ('depth-first-search', 4), ('dfs-tree', 4), ('kotlin', 4), ('post-order-traversal', 4), ('postorder-traversal', 4), ('ruby', 4), ('stack', 4), ('0ms runtime', 3), ('c++ recursion', 3), ('c++ recursive solution', 3), ('dfs simple solution', 3), ('easiest', 3), ('easy to understand', 3), ('easy-to-understand', 3), ('fast and simple', 3), ('iteration', 3), ('iteratively', 3), ('simple clear c++ solution', 3), ('testcase-wrong', 3), ('tree problem', 3), ('tree-inversion', 3), ('wrong-answer', 3), ('100', 2), ('100 space', 2), ('algorithm-explained', 2), ('clean code', 2), ('cpp short solution', 2), ('cpp-solution', 2), ('csharp', 2), ('dfs-iterative', 2), ('fast', 2), ('faster than 100.00', 2), ('go', 2), ('go-solution', 2), ('google', 2), ('invert', 2), ('invert tree', 2), ('iterative solution', 2), ('javascrip', 2), ('js', 2), ('level-order-traversal', 2), ('linear time', 2), ('morris-traversal', 2), ('one-liner', 2), ('postorder traversal', 2), ('recurision', 2), ('recursive-dfs', 2), ('recusive', 2), ('resursive', 2), ('run-time-error', 2), ('simple-solution', 2), ('solution-sharing-cpp', 2), ('swap', 2), ('tree traversal', 2), ('tree-traversal', 2), ('upvote', 2), ('very-easy', 2), ('#codegirl', 1), ('#java #easy-understand', 1), ('#python', 1), ('#recursion', 1), ('0 ms', 1), ('1 line', 1), ('100 faster', 1), ('100 faster cpp', 1), ('100 faster runtime', 1), ('100 memory', 1), ('100 speed', 1), ('100faster', 1), ('algorithms', 1), ('algosexplained', 1), ('amazon interview', 1), ('avl tree', 1), ('beats 100 percent', 1), ('beginnerfriendly', 1), ('best explaination', 1), ('best-solution', 1), ('binary-tree-input', 1), ('binarytree', 1), ('bottom up', 1), ('bottom-up-algorithm', 1), ('breadth first traversal', 1), ('bugs', 1), ('c code', 1), ('c programming', 1), ('clean', 1), ('clean-code', 1), ('commented', 1), ('comments-added', 1), ('compile-error', 1), ('complexity analysis', 1), ('complexity-analysis', 1), ('constant-space', 1), ('cpp doubt', 1), ('cpp with explanation', 1), ('depth first search', 1), ('deserialize', 1), ('dfs solution', 1), ('dfs-bottomup', 1), ('dfs-topdown', 1), ('divide and conquer', 1), ('dividedconquer', 1), ('easy sloution', 1), ('easy to understandd', 1), ('easy understanding', 1), ('easy undestanding', 1), ('easy-explanation', 1), ('easy-solition', 1), ('efficient', 1), ('explanation with code', 1), ('fast-solution', 1), ('faster', 1), ('faster than 100', 1), ('faster then 95', 1), ('fasterthan100', 1), ('fewest-line', 1), ('flipoc', 1), ('further-optimization', 1), ('go lang', 1), ('google interview', 1), ('icandoit', 1), ('improve', 1), ('in-order', 1), ('inorder traversal', 1), ('inplace', 1), ('intuitional', 1), ('intuitive', 1), ('intutive', 1), ('ios', 1), ('java c++', 1), ('java recursion', 1), ('javacript', 1), ('kotllin', 1), ('leetcodeislit', 1), ('level order traversal', 1), ('levelorder', 1), ('linear space', 1), ('linear-time', 1), ('list', 1), ('logarithmic-space', 1), ('max howell', 1), ('mirror', 1), ('mirror-image', 1), ('missing-test-case', 1), ('mrmagician', 1), ('of', 1), ('php', 1), ('php solution', 1), ('pointers', 1), ('postorder', 1), ('pre-order traversal', 1), ('preorder', 1), ('preorder traversal', 1), ('python2', 1), ('question', 1), ('recurrsion', 1), ('recursion vs iteration', 1), ('recursive approach', 1), ('recursive lines clean', 1), ('recursive-descent', 1), ('recursive-solution', 1), ('runtime', 1), ('scala', 1), ('self-explanatory', 1), ('serialization', 1), ('several-solutions', 1), ('short code', 1), ('short solution', 1), ('solition-sharing', 1), ('solt', 1), ('solution c++', 1), ('solution-cpp', 1), ('solution-javascript', 1), ('solution-python', 1), ('solution-sharing-java', 1), ('solution-sharing-python', 1), ('space-complexity', 1), ('stacks', 1), ('stdlib', 1), ('stl', 1), ('swapping nodes', 1), ('test-case', 1), ('test-cases', 1), ('traversal', 1), ('tuple', 1), ('two-pointer', 1), ('typescript', 1), ('ugly', 1), ('ultra easy', 1), ('video explanation', 1), ('video-explanation', 1), ('visualization', 1), ('whiteboard', 1), ('youtube', 1)]"
225,Implement Stack using Queues,https://leetcode.com/problems/implement-stack-using-queues,"Implement a last in first out (LIFO) stack using only two queues. The implemented stack should support all the functions of a normal queue (push, top, pop, and empty).

Implement the MyStack class:


	void push(int x) Pushes element x to the top of the stack.
	int pop() Removes the element on the top of the stack and returns it.
	int top() Returns the element on the top of the stack.
	boolean empty() Returns true if the stack is empty, false otherwise.


Notes:


	You must use only standard operations of a queue, which means only push to back, peek/pop from front, size, and is empty operations are valid.
	Depending on your language, the queue may not be supported natively. You may simulate a queue using a list or deque (double-ended queue), as long as you use only a queue's standard operations.","['stack', 'design']",Easy,1042,682,456102,219270,"[""Implement Queue using Stacks""]","[('java', 48), ('queue', 35), ('c++', 32), ('cpp', 31), ('stacks', 28), ('python', 18), ('stack', 16), ('python 3', 14), ('javascript', 13), ('solution', 13), ('deque', 11), ('python3', 8), ('accepted', 6), ('c#', 6), ('easy-understand', 6), ('easy-understanding', 5), ('java-solution', 5), ('0ms', 4), ('cpp solution', 4), ('easy-to-understand', 4), ('golang', 4), ('100 faster runtime', 3), ('queues', 3), ('time-complexity', 3), ('two-queues', 3), ('2queue-implementaion', 2), ('beginner', 2), ('c++ solution', 2), ('compile-error', 2), ('constant-time', 2), ('cpp easy', 2), ('cpp-solution', 2), ('easy', 2), ('easy-undestand', 2), ('faster than 100', 2), ('java ac solution', 2), ('javascript solution', 2), ('loops', 2), ('queue and linkedlist', 2), ('queue-approach', 2), ('simple solution', 2), ('stack-based', 2), ('#codegirl', 1), ('#javascript', 1), ('0ms runtime', 1), ('100 space', 1), ('100 speed', 1), ('1ms runtime', 1), ('2 queue', 1), ('20 lines only', 1), ('algorithm', 1), ('and', 1), ('beat', 1), ('beginner friendly', 1), ('best-submission', 1), ('c++11', 1), ('clean-efficient-code', 1), ('commented', 1), ('comments-added', 1), ('confusion', 1), ('cpp doubt', 1), ('datastructure', 1), ('different-oj-local', 1), ('easiest', 1), ('easy understanding', 1), ('easytounderstand', 1), ('fast', 1), ('fast and simple', 1), ('general', 1), ('go', 1), ('go-solution', 1), ('golang-solution', 1), ('help', 1), ('improve', 1), ('improved', 1), ('intutive', 1), ('linkedlist', 1), ('list', 1), ('meiyaowen', 1), ('no-queues', 1), ('node-operation', 1), ('not', 1), ('one queue', 1), ('one-queue', 1), ('python3.8', 1), ('queue and stack', 1), ('recursive', 1), ('runtime-error', 1), ('self explanatory', 1), ('short', 1), ('simple', 1), ('simple clear c++ solution', 1), ('single queue', 1), ('solution-javascript', 1), ('solution-sharing-cpp', 1), ('solution-sharing-python', 1), ('solved', 1), ('stack using queue', 1), ('stackusingqueues', 1), ('stl', 1), ('swap', 1), ('swift', 1), ('system bug', 1), ('test-case', 1), ('thoughts', 1), ('ultra easy', 1), ('upvote', 1), ('vector', 1), ('well-commented', 1), ('why', 1), ('wrong-answer', 1)]"
224,Basic Calculator,https://leetcode.com/problems/basic-calculator,"Given a string s representing an expression, implement a basic calculator to evaluate it.","['math', 'stack']",Hard,2189,182,543027,208140,"[""Evaluate Reverse Polish Notation"", ""Basic Calculator II"", ""Different Ways to Add Parentheses"", ""Expression Add Operators"", ""Basic Calculator III""]","[('python', 27), ('stack', 27), ('java', 24), ('cpp', 18), ('c++', 13), ('recursion', 13), ('python 3', 11), ('solution', 10), ('c#', 7), ('stacks', 6), ('basic-calculator', 5), ('infix-to-postfix', 5), ('easy-understand', 4), ('easy-understanding', 4), ('explained', 4), ('golang', 4), ('python3', 4), ('c', 3), ('iterative', 3), ('javascript', 3), ('recursive', 3), ('accepted', 2), ('clean code', 2), ('constant-space', 2), ('improve', 2), ('java-solution', 2), ('kotlin', 2), ('memory-limit-exceeded', 2), ('short', 2), ('solution-cpp', 2), ('time-limit-exceeded', 2), ('#java', 1), ('alternative solution', 1), ('backus-naur form', 1), ('basiccalculator', 1), ('beats 80 pc', 1), ('beauty', 1), ('best-submission', 1), ('bnf', 1), ('c++11', 1), ('calculator', 1), ('clean', 1), ('commented', 1), ('concise', 1), ('cpp easy', 1), ('cpp solution', 1), ('easiest', 1), ('easy to understand', 1), ('easy undestanding', 1), ('easy-to-understand', 1), ('eval', 1), ('explaination', 1), ('explanations', 1), ('go', 1), ('help', 1), ('infix expression', 1), ('java ac solution', 1), ('javascrip', 1), ('javascript solution', 1), ('linear', 1), ('math', 1), ('optimal', 1), ('output-limit-exceeded', 1), ('parser', 1), ('parsing', 1), ('php', 1), ('postfix expression', 1), ('pseudocode', 1), ('python3.8', 1), ('queue', 1), ('recursive descent', 1), ('recursively', 1), ('short code', 1), ('simple', 1), ('simple solution', 1), ('solution-share', 1), ('solution-sharing-cpp', 1), ('solution-sharing-python', 1), ('stack-based', 1), ('string', 1), ('swift', 1), ('testcase error', 1), ('tle', 1), ('tutorial', 1), ('typescript', 1), ('well-explained', 1), ('works-on-my-machine', 1)]"
223,Rectangle Area,https://leetcode.com/problems/rectangle-area,"Given the coordinates of two rectilinear rectangles in a 2D plane, return the total area covered by the two rectangles.

The first rectangle is defined by its bottom-left corner (A, B) and its top-right corner (C, D).

The second rectangle is defined by its bottom-left corner (E, F) and its top-right corner (G, H).",['math'],Medium,543,878,309888,119108,"[""Rectangle Overlap""]","[('java', 22), ('cpp', 20), ('python', 19), ('solution', 19), ('easy-understand', 12), ('c++', 9), ('math', 7), ('python 3', 7), ('javascript', 6), ('simple', 6), ('c#', 4), ('easy-understanding', 4), ('golang', 4), ('short', 4), ('test-case', 4), ('accepted', 3), ('cpp solution', 3), ('rectangle', 3), ('100 speed', 2), ('easy-undestand', 2), ('geometry', 2), ('go-solution', 2), ('golang-solution', 2), ('java-solution', 2), ('object-oriented', 2), ('python3', 2), ('rectangle-area', 2), ('wrong-answer', 2), ('answer', 1), ('area', 1), ('beats 97', 1), ('c++ code', 1), ('case', 1), ('comments', 1), ('constant-space', 1), ('constant-time', 1), ('diagrams', 1), ('easy', 1), ('easy to understandd', 1), ('easy-to-understad', 1), ('examples', 1), ('explaination', 1), ('explained solution', 1), ('fast', 1), ('faster than 99', 1), ('follow-up', 1), ('go', 1), ('golang solution', 1), ('images', 1), ('improve', 1), ('incomplete-testcases', 1), ('incorrect-test-case', 1), ('intuitive', 1), ('java ac solution', 1), ('js', 1), ('math-solution', 1), ('one line', 1), ('one-liner', 1), ('oneliner', 1), ('overlap', 1), ('quick', 1), ('ruby', 1), ('rust', 1), ('shortes', 1), ('simple solution', 1), ('solution-javascript', 1), ('solution-sharing-c', 1), ('solution-sharing-cpp', 1), ('solution-sharing-python', 1), ('straight-forward', 1), ('swift', 1), ('test', 1), ('testcase-wrong', 1), ('two-methods', 1), ('wexler', 1), ('wrong', 1), ('xjq', 1)]"
222,Count Complete Tree Nodes,https://leetcode.com/problems/count-complete-tree-nodes,"Given the root of a complete binary tree, return the number of the nodes in the tree.

According to Wikipedia, every level, except possibly the last, is completely filled in a complete binary tree, and all nodes in the last level are as far left as possible. It can have between 1 and 2h nodes inclusive at the last level h.","['binary-search', 'tree']",Medium,2882,258,586114,292754,"[""Closest Binary Search Tree Value""]","[('java', 79), ('binary-search', 39), ('c++', 37), ('recursion', 36), ('cpp', 34), ('python 3', 29), ('binary-tree', 27), ('recursive', 27), ('python', 25), ('javascript', 19), ('dfs', 14), ('solution', 12), ('java-solution', 11), ('python3', 10), ('bfs', 9), ('binary search', 9), ('tree', 8), ('cpp solution', 7), ('easy-understanding', 7), ('recurision', 7), ('short', 7), ('one-liner', 6), ('easy', 5), ('iterative', 5), ('binary tree', 4), ('complete binary tree', 4), ('explained', 4), ('java ac solution', 4), ('stack', 4), ('accepted', 3), ('beats 100', 3), ('c#', 3), ('c++ code', 3), ('cpp easy', 3), ('divide and conquer', 3), ('divideconquer', 3), ('easy-undestand', 3), ('rust', 3), ('time-limit-exceeded', 3), ('tree traversal', 3), ('1 liner', 2), ('100', 2), ('100 faster', 2), ('best-submission', 2), ('binary search tree', 2), ('binarysearch', 2), ('bit manipulation', 2), ('cpp doubt', 2), ('easy-understand', 2), ('easytounderstand', 2), ('fast', 2), ('golang', 2), ('google', 2), ('inorder traversal', 2), ('js', 2), ('linear time', 2), ('logarithmic time', 2), ('optimized', 2), ('recursive solution', 2), ('recusion', 2), ('ruby', 2), ('simple solution', 2), ('solution-sharing-cpp', 2), ('tree-traversal', 2), ('trees', 2), ('well-commented', 2), ('#bfs', 1), ('#binarysearch', 1), ('#iterative', 1), ('#python', 1), ('0ms', 1), ('0ms-solution', 1), ('100 memory', 1), ('100 space', 1), ('100 speed', 1), ('1line', 1), ('2 line', 1), ('3-solutions', 1), ('72ms', 1), ('algorithms', 1), ('answer', 1), ('beating-100-submission', 1), ('beginner friendly', 1), ('binary sear', 1), ('binarysearh', 1), ('bit mask', 1), ('bit-shift', 1), ('bitset', 1), ('breadth first search', 1), ('breath first search', 1), ('bst', 1), ('c++ easy to understand', 1), ('c++ recursion', 1), ('c++ solution', 1), ('clean code', 1), ('commented', 1), ('complete tree', 1), ('complete-tree', 1), ('concise', 1), ('concise-solution', 1), ('counttreenodes', 1), ('cpp clear', 1), ('csharp', 1), ('depth', 1), ('detailed', 1), ('dfs simple solution', 1), ('dfs-in-order', 1), ('diagram', 1), ('dsa', 1), ('dynamic programming', 1), ('easy to follow', 1), ('easy-to-understand', 1), ('efficient solution', 1), ('es6', 1), ('explanation', 1), ('explanation of logic', 1), ('fast and simple', 1), ('fast-solution', 1), ('faster', 1), ('faster than 100', 1), ('fastest', 1), ('fully-explained', 1), ('global', 1), ('go-solution', 1), ('golang-solution', 1), ('heap', 1), ('height of tree', 1), ('inorder', 1), ('inorder iterative', 1), ('intuitive', 1), ('iteration', 1), ('iterative-dfs', 1), ('javascrip', 1), ('js javascript', 1), ('kotlin', 1), ('level', 1), ('linear space', 1), ('log', 1), ('logic explained clearly', 1), ('morris', 1), ('non-recursive', 1), ('one line', 1), ('onelinecode', 1), ('oneliner', 1), ('postorder-traversal', 1), ('power-of-two', 1), ('preorder', 1), ('preorder traversal', 1), ('readable', 1), ('recursive-dfs', 1), ('recursively', 1), ('resursive', 1), ('short solution', 1), ('simple', 1), ('simple clear c++ solution', 1), ('solution-sharing-python', 1), ('space o1', 1), ('swift', 1), ('testcase-wrong', 1), ('tle', 1), ('traversal tree', 1), ('video', 1), ('visualization', 1), ('works-on-my-machine', 1), ('wrong-answer', 1), ('youtube', 1)]"
221,Maximal Square,https://leetcode.com/problems/maximal-square,"Given an m x n binary matrix filled with 0's and 1's, find the largest square containing only 1's and return its area.",['dynamic-programming'],Medium,4523,106,892989,354965,"[""Maximal Rectangle"", ""Largest Plus Sign""]","[('dynamic programming', 68), ('python', 44), ('dynamic-programming', 43), ('java', 36), ('dp', 32), ('c++', 26), ('cpp', 26), ('python 3', 19), ('javascript', 17), ('python3', 16), ('java-solution', 8), ('easy-understand', 7), ('memoization', 6), ('bottom up', 5), ('brute force', 5), ('explained', 5), ('easy-understanding', 4), ('easy-undestand', 4), ('c#', 3), ('easy', 3), ('kotlin', 3), ('matrix', 3), ('rust', 3), ('swift', 3), ('tabulation', 3), ('#dynamic-programming', 2), ('bottoms-up', 2), ('cpp easy', 2), ('cpp solution', 2), ('easytounderstand', 2), ('fast', 2), ('maximal square', 2), ('memoziation', 2), ('python2', 2), ('recursive solution', 2), ('simple', 2), ('simple solution', 2), ('simpler', 2), ('solution', 2), ('solution-sharing-cpp', 2), ('test-case', 2), ('timelimit', 2), ('why', 2), ('wrong-answer', 2), ('#221', 1), ('#dp', 1), ('#easysolution', 1), ('#javascript', 1), ('#python', 1), ('100 faster cpp', 1), ('100 memory', 1), ('100 space', 1), ('100 speed', 1), ('8ms', 1), ('accepted solution', 1), ('algorithms', 1), ('all solutions', 1), ('approach', 1), ('array', 1), ('arrays', 1), ('awesome samriddhi', 1), ('best space complexity', 1), ('best-submission', 1), ('bottom-up-algorithm', 1), ('brutal force optmized', 1), ('c', 1), ('c code', 1), ('c++ code', 1), ('clean code', 1), ('clean-code', 1), ('comments-added', 1), ('commetend', 1), ('compile-error', 1), ('concise-solution', 1), ('constant-space', 1), ('cplusplus', 1), ('csharp', 1), ('description', 1), ('detailed explanation', 1), ('dfs', 1), ('dfs-bfs', 1), ('diagrams', 1), ('dp-programming', 1), ('dp-techqique', 1), ('easy-to-understand', 1), ('editorial', 1), ('error', 1), ('explanation', 1), ('extra-space', 1), ('fast-solution', 1), ('faster than 99.80', 1), ('golang', 1), ('greedy', 1), ('iteration', 1), ('iterative', 1), ('iteratve', 1), ('java solution', 1), ('js', 1), ('linear time', 1), ('lru-cache', 1), ('maximum', 1), ('maximum-subarry', 1), ('monotonic stack', 1), ('onjudge', 1), ('optimal substructure', 1), ('optimized', 1), ('prefix-sum', 1), ('pyhton 3', 1), ('recursive', 1), ('recusion', 1), ('ritik', 1), ('ruby', 1), ('run-time-error', 1), ('shared-answer', 1), ('short', 1), ('short concise', 1), ('simple clear c++ solution', 1), ('sksama', 1), ('space-complexity', 1), ('stack', 1), ('stack-based', 1), ('techbacker', 1), ('test-case-too-weak', 1), ('testcase-wrong', 1), ('thinking process', 1), ('thought-process', 1), ('time-complexity', 1), ('top down', 1), ('top down approach', 1), ('top down dp', 1), ('video', 1), ('video explaination', 1), ('video explanation', 1), ('youtube', 1)]"
220,Contains Duplicate III,https://leetcode.com/problems/contains-duplicate-iii,"Given an integer array nums and two integers k and t, return true if there are two distinct indices i and j in the array such that abs(nums[i] - nums[j]) <= t and abs(i - j) <= k.","['sort', 'ordered-map']",Medium,1600,1665,796636,170431,"[""Contains Duplicate"", ""Contains Duplicate II""]","[('java', 34), ('python', 16), ('c++', 14), ('cpp', 14), ('solution', 10), ('javascript', 9), ('python 3', 9), ('bucket', 8), ('bst', 7), ('c#', 6), ('set', 6), ('accepted', 5), ('binary-search', 5), ('buckets', 5), ('python3', 5), ('treeset', 5), ('golang', 4), ('java-solution', 4), ('pair', 4), ('sliding-window', 4), ('binary search tree', 3), ('cpp solution', 3), ('explained', 3), ('sort', 3), ('swift', 3), ('test-case', 3), ('bucket sort', 2), ('bucket-sort', 2), ('compile-error', 2), ('dictionary', 2), ('easy-understand', 2), ('easy-understanding', 2), ('explanations', 2), ('hashmap', 2), ('kotlin', 2), ('optimal', 2), ('quicksort', 2), ('rust', 2), ('short', 2), ('simple', 2), ('slide window', 2), ('time-complexity', 2), ('tree set', 2), ('wrong-answer', 2), ('100 efficient', 1), ('100 speed', 1), ('2 pointers', 1), ('4 lines', 1), ('8ms', 1), ('accepted solution', 1), ('algorithms', 1), ('asahiocean', 1), ('beating-100-submissions', 1), ('binary search', 1), ('binary-search-tree', 1), ('bound', 1), ('brute-force', 1), ('c++ solution', 1), ('comparator', 1), ('csharp', 1), ('defaultdict', 1), ('description-disambiguation', 1), ('dictonary', 1), ('dynamic-programming', 1), ('easy', 1), ('easy-to-understand', 1), ('exceeded', 1), ('fast', 1), ('go', 1), ('hash set', 1), ('hash table', 1), ('hashtable', 1), ('heap', 1), ('heapq', 1), ('improve', 1), ('input', 1), ('iterative', 1), ('java solution', 1), ('javascript solution', 1), ('keep it simple', 1), ('language', 1), ('loop', 1), ('map', 1), ('multi-sets', 1), ('multiset', 1), ('not-treeset', 1), ('nottreeset', 1), ('official', 1), ('on', 1), ('ordered map', 1), ('php', 1), ('pointer', 1), ('priority queue', 1), ('python deque', 1), ('red black tree', 1), ('ruby', 1), ('scala', 1), ('simple java solution', 1), ('simple solution', 1), ('simpler', 1), ('sliding window', 1), ('slidingwindow', 1), ('solution-sharing-cpp', 1), ('sorted', 1), ('sorted array', 1), ('sorted-map', 1), ('sortedcontainers', 1), ('sortedlist', 1), ('sortedset', 1), ('sorting', 1), ('stl', 1), ('test-case-too-weak', 1), ('testcase-wrong', 1), ('time limit exceeded', 1), ('time-limit', 1), ('tle', 1), ('using', 1), ('using-bst', 1), ('vector', 1), ('works-on-my-machine', 1)]"
219,Contains Duplicate II,https://leetcode.com/problems/contains-duplicate-ii,"Given an integer array nums and an integer k, return true if there are two distinct indices i and j in the array such that nums[i] == nums[j] and abs(i - j) <= k.","['array', 'hash-table']",Easy,1328,1399,854448,332872,"[""Contains Duplicate"", ""Contains Duplicate III""]","[('java', 59), ('cpp', 45), ('python', 44), ('hashmap', 39), ('c++', 35), ('javascript', 29), ('python 3', 22), ('solution', 19), ('dictionary', 15), ('hashset', 13), ('java-solution', 11), ('python3', 11), ('map', 8), ('c#', 7), ('easy-understanding', 7), ('contains-duplicate-ii', 6), ('cpp solution', 6), ('golang', 6), ('short', 6), ('accepted', 5), ('easiest', 5), ('easy', 5), ('easy-understand', 5), ('hash table', 5), ('set', 5), ('swift', 5), ('c++ code', 4), ('easy-undestand', 4), ('hashtable', 4), ('simple', 4), ('unordered map', 4), ('c', 3), ('dictonary', 3), ('easy-to-understand', 3), ('easytounderstand', 3), ('fast', 3), ('improve', 3), ('kotlin', 3), ('map-stl', 3), ('missing-test-case', 3), ('optimal', 3), ('sliding-window', 3), ('test-case', 3), ('time-complexity', 3), ('unorderedmap', 3), ('wrong-answer', 3), ('#python', 2), ('accepted solution', 2), ('contains-duplicate', 2), ('dictionaries', 2), ('fast-solution', 2), ('hashing', 2), ('javascript solution', 2), ('linear time', 2), ('linear-time', 2), ('ruby', 2), ('rust', 2), ('scala', 2), ('sets', 2), ('solution-python', 2), ('solution-sharing-cpp', 2), ('#dictionary', 1), ('#easy', 1), ('#fast', 1), ('#javascript', 1), ('#maps', 1), ('#python3', 1), ('3ms', 1), ('advice', 1), ('best-submission', 1), ('binarysearch', 1), ('bug', 1), ('c code', 1), ('complex', 1), ('concise', 1), ('concise-solution', 1), ('containsduplicateii', 1), ('cpp easy', 1), ('defaultdict', 1), ('dict', 1), ('dictionary array', 1), ('divide and conquer', 1), ('explanation', 1), ('fast and simple', 1), ('faster than 98', 1), ('faster then 95', 1), ('go', 1), ('go lang', 1), ('go-solution', 1), ('golang-solution', 1), ('hash', 1), ('hybrid', 1), ('immutable', 1), ('intuitive', 1), ('ios', 1), ('iteration', 1), ('java ac solution', 1), ('kotlinvim', 1), ('linear', 1), ('linear memory', 1), ('linear seach', 1), ('linear search', 1), ('linkedhashmap', 1), ('list', 1), ('list comprehension', 1), ('list of', 1), ('loop method', 1), ('map entry', 1), ('map in c++', 1), ('memory optimized', 1), ('mergesort', 1), ('missing test case', 1), ('needimprovement', 1), ('ordered-dict', 1), ('pythonic', 1), ('pythonsolution', 1), ('question', 1), ('runtime', 1), ('simple java solution', 1), ('simple solution', 1), ('single-line', 1), ('sliding window', 1), ('slidingwindow', 1), ('sluti', 1), ('solution by python', 1), ('solution c++', 1), ('solution videos', 1), ('sort', 1), ('swift5', 1), ('testcase-wrong', 1), ('time', 1), ('time-limit-exceeded', 1), ('trick', 1), ('two-different-solutions', 1), ('typescript', 1), ('typescript javascript', 1), ('unorderedset', 1), ('window-sliding', 1), ('xjq', 1)]"
218,The Skyline Problem,https://leetcode.com/problems/the-skyline-problem,"A city's skyline is the outer contour of the silhouette formed by all the buildings in that city when viewed from a distance. Given the locations and heights of all the buildings, return the skyline formed by these buildings collectively.

The geometric information of each building is given in the array buildings where buildings[i] = [lefti, righti, heighti]:


	lefti is the x coordinate of the left edge of the ith building.
	righti is the x coordinate of the right edge of the ith building.
	heighti is the height of the ith building.


You may assume all buildings are perfect rectangles grounded on an absolutely flat surface at height 0.

The skyline should be represented as a list of ""key points"" sorted by their x-coordinate in the form [[x1,y1],[x2,y2],...]. Each key point is the left endpoint of some horizontal segment in the skyline except the last point in the list, which always has a y-coordinate 0 and is used to mark the skyline's termination where the rightmost building ends. Any ground between the leftmost and rightmost buildings should be part of the skyline's contour.

Note: There must be no consecutive horizontal lines of equal height in the output skyline. For instance, [...,[2 3],[4 5],[7 5],[11 5],[12 7],...] is not acceptable; the three lines of height 5 should be merged into one in the final output as such: [...,[2 3],[4 5],[12 7],...]","['divide-and-conquer', 'heap', 'binary-indexed-tree', 'segment-tree', 'line-sweep']",Hard,2842,159,462041,169873,"[""Falling Squares""]","[('java', 28), ('cpp', 19), ('python', 18), ('c++', 17), ('priority-queue', 12), ('priority queue', 10), ('heap', 9), ('segment-tree', 9), ('multiset', 8), ('golang', 6), ('heapq', 6), ('treemap', 6), ('divideconquer', 5), ('javascript', 5), ('python 3', 5), ('solution', 5), ('sweepline', 5), ('c#', 4), ('divide and conquer', 4), ('easy-understand', 4), ('java-solution', 4), ('fast', 3), ('kotlin', 3), ('map', 3), ('priorityqueue', 3), ('python3', 3), ('short', 3), ('sort', 3), ('binary-search', 2), ('cpp solution', 2), ('easy-to-understand', 2), ('easy-understanding', 2), ('explained', 2), ('go-solution', 2), ('golang-solution', 2), ('heaps', 2), ('js', 2), ('max heap', 2), ('merge-sort', 2), ('segment tree', 2), ('skylineproblem', 2), ('solution-sharing-cpp', 2), ('sorting', 2), ('sweep line', 2), ('sweep-line', 2), ('video', 2), ('ac solution', 1), ('array', 1), ('array easy', 1), ('binary search', 1), ('binary search tree', 1), ('binary-index-tree', 1), ('binary-indexed-tree', 1), ('binary-tree', 1), ('bisect', 1), ('bst', 1), ('c++14', 1), ('c++multiset map', 1), ('chinese', 1), ('clean', 1), ('commented', 1), ('comments', 1), ('comments-added', 1), ('complicated', 1), ('computational-geometry', 1), ('confused', 1), ('description-disambiguation', 1), ('easily explained', 1), ('explanation', 1), ('explanation of logic', 1), ('fastest', 1), ('fenwick-tree', 1), ('fold', 1), ('go', 1), ('greedy', 1), ('greedy approach', 1), ('hashmap', 1), ('improve', 1), ('line-swept', 1), ('linked-list', 1), ('list', 1), ('max-heap', 1), ('multi-sets', 1), ('nlogn', 1), ('nlogn time', 1), ('nodeheapmap', 1), ('olog n', 1), ('overflow', 1), ('php', 1), ('pointer', 1), ('pyhton', 1), ('python3.8', 1), ('recursive', 1), ('ruby', 1), ('rust', 1), ('scala', 1), ('scan-line', 1), ('share-solution', 1), ('short code', 1), ('sliding-window-maximum', 1), ('solition-sharing', 1), ('sort-function', 1), ('sorted dictionary', 1), ('sorted set', 1), ('sortedcontainers', 1), ('square-root-decomposition', 1), ('stack', 1), ('stl', 1), ('swift', 1), ('test-case', 1), ('the-skyline-problem', 1), ('theskylineprob', 1), ('treeset', 1), ('window', 1), ('zea7ot', 1)]"
217,Contains Duplicate,https://leetcode.com/problems/contains-duplicate,"Given an integer array nums, return true if any value appears at least twice in the array, and return false if every element is distinct.","['array', 'hash-table']",Easy,1656,845,1394771,795922,"[""Contains Duplicate II"", ""Contains Duplicate III""]","[('java', 69), ('python', 63), ('javascript', 52), ('python 3', 51), ('cpp', 49), ('c++', 40), ('hashmap', 25), ('hashset', 24), ('python3', 24), ('sets', 23), ('set', 22), ('contains-duplicate', 19), ('easy-understanding', 18), ('solution', 18), ('one-liner', 17), ('java-solution', 13), ('cpp solution', 12), ('javascript solution', 11), ('dictionary', 10), ('hash table', 9), ('easy', 8), ('golang', 8), ('swift', 8), ('time-limit-exceeded', 8), ('c#', 7), ('simple', 7), ('sort', 7), ('array', 6), ('c', 6), ('duplicate', 6), ('duplicates', 6), ('fast', 6), ('fast and simple', 6), ('map', 6), ('sorting', 6), ('ruby', 5), ('c++ code', 4), ('contains duplicate', 4), ('cpp easy', 4), ('easy-to-understand', 4), ('easytounderstand', 4), ('hashtable', 4), ('kotlin', 4), ('one line', 4), ('short', 4), ('simple solution', 4), ('stl', 4), ('wrong-answer', 4), ('array-sort', 3), ('dictonary', 3), ('easy-undestand', 3), ('es6', 3), ('golang-solution', 3), ('list', 3), ('scala', 3), ('time-complexity', 3), ('1 line', 2), ('accepted', 2), ('array functions', 2), ('arrays', 2), ('brute force', 2), ('c code', 2), ('c++ solution', 2), ('clean-code', 2), ('collections', 2), ('contains', 2), ('easysolution', 2), ('go-solution', 2), ('hashmaps', 2), ('intuitive', 2), ('javascrip', 2), ('javascriptes6', 2), ('js', 2), ('linq', 2), ('oneline', 2), ('php', 2), ('python2', 2), ('qsort', 2), ('rust', 2), ('simple-solution', 2), ('solution by python', 2), ('solution-python', 2), ('sorted array', 2), ('unorderedmap', 2), ('using set', 2), ('vector', 2), ('#javascript', 1), ('#python 3', 1), ('#set', 1), ('10ms', 1), ('2000 faster', 1), ('99', 1), ('algorithms', 1), ('answer', 1), ('arrays.sort', 1), ('best', 1), ('best-solution-ever', 1), ('bit-manipulation', 1), ('boolean', 1), ('c#-solution', 1), ('c++ set', 1), ('c++11', 1), ('commented', 1), ('complexity-analysis', 1), ('contains-duplicate-ii', 1), ('counter', 1), ('counters', 1), ('cpp clear', 1), ('cpp-solution', 1), ('dictionaries', 1), ('dictionary array', 1), ('divide and conquer', 1), ('duplicate values', 1), ('easy-solition', 1), ('easy-understand', 1), ('explanation with logic', 1), ('extra-space', 1), ('fast-solution', 1), ('faster than 97.42', 1), ('find duplicate', 1), ('frequency table', 1), ('go', 1), ('go lang', 1), ('hash', 1), ('hashing', 1), ('immutable', 1), ('improve', 1), ('int-array', 1), ('iterative', 1), ('iterative approch', 1), ('java-8', 1), ('javasacript', 1), ('javascript object', 1), ('length', 1), ('linear seach', 1), ('linear time', 1), ('linear-space', 1), ('linear-time', 1), ('map-stl', 1), ('mapreduce', 1), ('meiyaowen', 1), ('mergesort', 1), ('nlogn', 1), ('number', 1), ('o1', 1), ('objects', 1), ('oci', 1), ('one liner', 1), ('one pass solution', 1), ('oneliner', 1), ('oracle', 1), ('php solution', 1), ('pyhton', 1), ('python3.8', 1), ('pythonic', 1), ('pythonpython3', 1), ('quick sort', 1), ('quicksort', 1), ('recursion', 1), ('runtime-error', 1), ('shared-answer', 1), ('simple approach', 1), ('simple clear c++ solution', 1), ('simplest', 1), ('slow', 1), ('solutionsharing', 1), ('sort-function', 1), ('sortingplus2pointer', 1), ('sou', 1), ('space o1', 1), ('space-compexity', 1), ('stack-over-flow', 1), ('std', 1), ('stl algorithms', 1), ('straight-forward', 1), ('streams', 1), ('tailrec', 1), ('testcase-wrong', 1), ('time complexity', 1), ('time-limit-exceeded-java', 1), ('top', 1), ('two pointer approach', 1), ('typescript', 1), ('unique', 1), ('unique value', 1), ('uniqueness', 1), ('unordered map', 1), ('uthash', 1), ('window-sliding', 1)]"
216,Combination Sum III,https://leetcode.com/problems/combination-sum-iii,"Find all valid combinations of k numbers that sum up to n such that the following conditions are true:


	Only numbers 1 through 9 are used.
	Each number is used at most once.


Return a list of all possible valid combinations. The list must not contain the same combination twice, and the combinations may be returned in any order.","['array', 'backtracking']",Medium,1794,66,372071,226266,"[""Combination Sum""]","[('backtracking', 131), ('java', 84), ('c++', 54), ('python', 45), ('cpp', 37), ('dfs', 32), ('python 3', 31), ('recursion', 27), ('javascript', 20), ('solution', 16), ('easy-understand', 12), ('recursive', 12), ('easy-to-understand', 10), ('easy-understanding', 10), ('java-solution', 10), ('python3', 10), ('back tracking', 8), ('c#', 8), ('cpp solution', 7), ('combination', 6), ('dynamic-programming', 6), ('easy', 6), ('0ms', 5), ('easytounderstand', 5), ('golang', 5), ('wrong-answer', 5), ('100 speed', 4), ('backtrack', 4), ('easy-undestand', 4), ('simple solution', 4), ('backtracing', 3), ('dfs simple solution', 3), ('improve', 3), ('pruning', 3), ('short', 3), ('#backtracking', 2), ('back-tracking', 2), ('bit manipulation', 2), ('combination sum', 2), ('combinations', 2), ('cpp-solution', 2), ('depth first search', 2), ('dfs solution', 2), ('explained', 2), ('explanation', 2), ('fast and simple', 2), ('fast-solution', 2), ('further-optimization', 2), ('go', 2), ('iterative', 2), ('javascript solution', 2), ('kotlin', 2), ('recurision', 2), ('rust', 2), ('simple', 2), ('simple clear c++ solution', 2), ('time-complexity', 2), ('typescript', 2), ('video explanation', 2), ('#backtracking-template', 1), ('#dfs', 1), ('#java8', 1), ('#videoexplanation', 1), ('0ms runtime', 1), ('0ms-solution', 1), ('100 faster cpp', 1), ('100-faster', 1), ('90+', 1), ('ac solution', 1), ('backrtracking', 1), ('backtacking', 1), ('backtracking dfs', 1), ('backtracking template', 1), ('backward recursion', 1), ('beating-90-submissions', 1), ('beats 99', 1), ('best-submission', 1), ('bfs', 1), ('bit masking', 1), ('bitmanipulation', 1), ('c++ code', 1), ('c++ easy to understand', 1), ('c++ solution', 1), ('cache', 1), ('caching', 1), ('clean code', 1), ('clean-code', 1), ('combination sum i', 1), ('combination sum ii', 1), ('combination sum iii', 1), ('combinatorics', 1), ('combinatories', 1), ('commented', 1), ('commented code', 1), ('comments', 1), ('concise', 1), ('cpp code', 1), ('cpp soltuion', 1), ('csharp', 1), ('depth-first-search', 1), ('dfs-bfs', 1), ('different approach', 1), ('dis', 1), ('divide and conquer', 1), ('dp', 1), ('dp c++', 1), ('dumb solution', 1), ('dynamic programming', 1), ('easiest', 1), ('easy understand', 1), ('easy understanding', 1), ('efficient', 1), ('error', 1), ('explained solution', 1), ('explanation with code', 1), ('explanations', 1), ('false solution', 1), ('functional-programming', 1), ('go-solution', 1), ('golang-solution', 1), ('help', 1), ('inplace', 1), ('interview', 1), ('intution', 1), ('java solution', 1), ('javascript recursive', 1), ('linkedlists', 1), ('math solution', 1), ('meiyaowen', 1), ('official', 1), ('optimal', 1), ('optimization', 1), ('powerset', 1), ('pyhton3', 1), ('python2', 1), ('readable', 1), ('recurrance', 1), ('recursively', 1), ('recurssion', 1), ('result', 1), ('ruby', 1), ('run-time-error', 1), ('sandeepkumar', 1), ('scala', 1), ('self explanatory', 1), ('sets', 1), ('short c++ code', 1), ('solution-sharing-cpp', 1), ('solution-sharing-python', 1), ('soultion-sharing', 1), ('story-mode', 1), ('summation', 1), ('swift', 1), ('template', 1), ('testcase-wrong', 1), ('unknown-reason', 1), ('video', 1), ('video explaination', 1), ('video solution', 1), ('well-commented', 1), ('well-explained', 1), ('why', 1), ('works-on-my-machine', 1), ('xjq', 1), ('zea7ot', 1)]"
215,Kth Largest Element in an Array,https://leetcode.com/problems/kth-largest-element-in-an-array,"Given an integer array nums and an integer k, return the kth largest element in the array.

Note that it is the kth largest element in the sorted order, not the kth distinct element.","['divide-and-conquer', 'heap']",Medium,5551,355,1500583,887126,"[""Wiggle Sort II"", ""Top K Frequent Elements"", ""Third Maximum Number"", ""Kth Largest Element in a Stream"", ""K Closest Points to Origin""]","[('java', 94), ('python', 75), ('c++', 74), ('cpp', 71), ('heap', 53), ('python 3', 42), ('javascript', 38), ('priority queue', 35), ('java-solution', 28), ('quick select', 26), ('heapq', 23), ('easy-understanding', 22), ('python3', 21), ('quickselect', 21), ('solution', 21), ('c#', 19), ('easy', 19), ('quick-select', 19), ('min-heap', 16), ('partition', 14), ('cpp solution', 13), ('quick sort', 13), ('easy-understand', 12), ('sort', 12), ('golang', 11), ('one-liner', 11), ('maxheap', 10), ('minheap', 10), ('quick-selection', 10), ('simple', 10), ('priority-queue', 9), ('quicksort-partition', 9), ('heaps', 8), ('min heap', 8), ('ruby', 8), ('cpp easy', 7), ('sorted array', 7), ('binary-search', 6), ('c', 6), ('quicksort', 6), ('short', 6), ('sorting', 6), ('time-complexity', 6), ('c++ code', 5), ('divide and conquer', 5), ('easy-undestand', 5), ('easytounderstand', 5), ('iterative', 5), ('kth largest element', 5), ('linear time', 5), ('max heap', 5), ('stl', 5), ('explained', 4), ('golang-solution', 4), ('heapsort', 4), ('java solution', 4), ('quick-sort', 4), ('swift', 4), ('#python3', 3), ('clean', 3), ('easy-to-understand', 3), ('fast and simple', 3), ('fast-solution', 3), ('go', 3), ('heapify', 3), ('improve', 3), ('java ac solution', 3), ('linq', 3), ('max-heap', 3), ('oneliner', 3), ('priorityqueue', 3), ('rust', 3), ('simplest', 3), ('#easy-understanding', 2), ('#java', 2), ('#python', 2), ('#python 3', 2), ('100 memory', 2), ('accepted', 2), ('best-submission', 2), ('binary search', 2), ('bubble-sort', 2), ('c++14', 2), ('clean code', 2), ('constant space', 2), ('cpp doubt', 2), ('divideconquer', 2), ('efficent approach', 2), ('fast', 2), ('hoare', 2), ('mergesort', 2), ('nlogn', 2), ('one liner', 2), ('python2', 2), ('python3.8', 2), ('pythonpython3', 2), ('radix-sort', 2), ('recursion', 2), ('recursive', 2), ('scala', 2), ('simple clear c++ solution', 2), ('simple solution', 2), ('space-efficient', 2), ('vector', 2), ('vector-operation', 2), ('#3linesolution', 1), ('#easy-understand', 1), ('#easyway', 1), ('#helpneeded', 1), ('#java-solution', 1), ('#leetcode', 1), ('#quickselect', 1), ('#quicksort', 1), ('#shortestsolution', 1), ('#simple', 1), ('#solution', 1), ('#tle', 1), ('100 faster', 1), ('100 faster runtime', 1), ('100 speed', 1), ('1liner', 1), ('1ms', 1), ('2-methords', 1), ('accepted solution', 1), ('algorithm', 1), ('amazon', 1), ('array', 1), ('array-sort', 1), ('awesome samriddhi', 1), ('binary heap', 1), ('bubble sort', 1), ('bucket', 1), ('c code', 1), ('c sharp', 1), ('c# easy', 1), ('c# priority queue', 1), ('c# sorteddictionary', 1), ('c++ easy to understand', 1), ('c++ monotonic stack', 1), ('c++ solution', 1), ('c++11', 1), ('codingninja', 1), ('concise', 1), ('constant memory', 1), ('counting-sort', 1), ('csharp', 1), ('dc', 1), ('detailed', 1), ('easiest', 1), ('easy to code', 1), ('easy to understand', 1), ('easy to understandd', 1), ('element', 1), ('es6', 1), ('explained solution', 1), ('fastest', 1), ('find kth largest element', 1), ('flipkart', 1), ('fold', 1), ('go-solution', 1), ('hashmap', 1), ('heap sort', 1), ('heaps algorithm', 1), ('immutable', 1), ('implementation', 1), ('in-place', 1), ('index', 1), ('interview', 1), ('introselect', 1), ('intuition', 1), ('intuitive', 1), ('iterative solution', 1), ('iteratively', 1), ('iterator', 1), ('iterators', 1), ('java easy to understand', 1), ('java-8', 1), ('javascript solution', 1), ('javscript', 1), ('js', 1), ('js javascript', 1), ('kotlin', 1), ('kth-element', 1), ('kth-largest-element-in-an-arra', 1), ('kthlargestinarray', 1), ('largest', 1), ('largestnumber', 1), ('less-memory', 1), ('lomuto partition', 1), ('map-stl', 1), ('meiyaowen', 1), ('memory', 1), ('memory optimized', 1), ('minimum heap', 1), ('naive', 1), ('needimprovement', 1), ('no extra space', 1), ('no-recursion', 1), ('nth-element', 1), ('nthelement', 1), ('one line', 1), ('optimized', 1), ('output', 1), ('partition based', 1), ('perfect score', 1), ('pyhton', 1), ('pythonic', 1), ('questions', 1), ('queue-approach', 1), ('random pick', 1), ('randomisation', 1), ('reverse', 1), ('reverse list', 1), ('ritik', 1), ('searching', 1), ('select algorithm', 1), ('selection', 1), ('short code', 1), ('short solution', 1), ('solition-sharing', 1), ('solution-cpp', 1), ('solution-java', 1), ('solution-sharing-cpp', 1), ('solutionsharing', 1), ('sort color', 1), ('sort-function', 1), ('sorted-list', 1), ('sorting algorithms', 1), ('sorting-algorithms', 1), ('space-complexity-1', 1), ('std', 1), ('swift5', 1), ('three-lines', 1), ('time-complexity-o', 1), ('topkelements', 1), ('trees', 1), ('trivial', 1), ('two-liner', 1), ('two-lines', 1), ('typescript', 1), ('video explanation', 1), ('well explained', 1), ('well-explained', 1), ('werfree', 1)]"
214,Shortest Palindrome,https://leetcode.com/problems/shortest-palindrome,"You are given a string s. You can convert s to a palindrome by adding characters in front of it.

Return the shortest palindrome you can find by performing this transformation.",['string'],Hard,1613,154,373338,115094,"[""Longest Palindromic Substring"", ""Implement strStr()"", ""Palindrome Pairs""]","[('java', 27), ('cpp', 16), ('kmp', 14), ('c++', 12), ('python', 11), ('easy-understand', 7), ('palindrome', 7), ('solution', 7), ('time-limit-exceeded', 7), ('javascript', 6), ('string', 6), ('python 3', 5), ('rolling-hash', 5), ('kmp algorithm', 4), ('manachers-algorithm', 4), ('run-time-error', 4), ('short', 4), ('testcase-wrong', 4), ('c#', 3), ('easy-undestand', 3), ('linear time', 3), ('missing-test-case', 3), ('python3', 3), ('rabin-karp', 3), ('wrong-answer', 3), ('brute force', 2), ('brute-force', 2), ('cpp solution', 2), ('hashmap', 2), ('incorrect-test-case', 2), ('javascript solution', 2), ('kotlin', 2), ('manacher-algorithm', 2), ('solution-sharing-cpp', 2), ('test-case', 2), ('#help', 1), ('#linkedlist', 1), ('#palindromenumber', 1), ('accepted', 1), ('algorithms', 1), ('average', 1), ('best-solution-ever', 1), ('boyer-moore', 1), ('bugs', 1), ('c++ solution', 1), ('constant space', 1), ('constant-space', 1), ('cpp easy', 1), ('cpp easy-understanding', 1), ('detail', 1), ('double-hash', 1), ('dp', 1), ('dynamic-programming', 1), ('easiest solution', 1), ('es6', 1), ('fast-solution', 1), ('fastest', 1), ('give stars and subscribe', 1), ('global', 1), ('go', 1), ('golang', 1), ('hash', 1), ('hashing', 1), ('improve', 1), ('iterator', 1), ('java-solution', 1), ('javascript-solution', 1), ('knuth morris pratt', 1), ('linear-time', 1), ('longest-palindromic-substring', 1), ('lps', 1), ('manacher', 1), ('memory', 1), ('memory optimized', 1), ('pending', 1), ('rabin karp algorithm', 1), ('recursive', 1), ('reverse-order-matching', 1), ('ruby', 1), ('runtime-error', 1), ('short solution', 1), ('simple', 1), ('simple clear c++ solution', 1), ('status', 1), ('string hashing', 1), ('swift', 1), ('time exceed error', 1), ('time-complexity', 1), ('tle', 1), ('two pointers', 1), ('two-pointer', 1), ('unique solution', 1), ('works-on-my-machine', 1), ('wrong', 1)]"
213,House Robber II,https://leetcode.com/problems/house-robber-ii,"You are a professional robber planning to rob houses along a street. Each house has a certain amount of money stashed. All houses at this place are arranged in a circle. That means the first house is the neighbor of the last one. Meanwhile, adjacent houses have a security system connected, and it will automatically contact the police if two adjacent houses were broken into on the same night.

Given an integer array nums representing the amount of money of each house, return the maximum amount of money you can rob tonight without alerting the police.",['dynamic-programming'],Medium,2813,65,636315,240121,"[""House Robber"", ""Paint House"", ""Paint Fence"", ""House Robber III"", ""Non-negative Integers without Consecutive Ones"", ""Coin Path""]","[('dynamic programming', 97), ('java', 52), ('dp', 47), ('dynamic-programming', 47), ('python', 46), ('cpp', 37), ('c++', 36), ('python 3', 29), ('python3', 15), ('solution', 14), ('javascript', 11), ('java-solution', 8), ('memoization', 8), ('golang', 7), ('short', 7), ('cpp solution', 6), ('easy-undestand', 6), ('recursion', 6), ('c#', 5), ('constant-space', 5), ('easy-understand', 5), ('easy-understanding', 5), ('explained', 5), ('explanation', 5), ('house-robber-ii', 5), ('recursive', 5), ('simple', 5), ('c++ code', 4), ('dp-techqique', 4), ('swift', 4), ('best-submission', 3), ('cpp easy', 3), ('easy', 3), ('easy to understand', 3), ('house-robber', 3), ('ruby', 3), ('test-case', 3), ('#python', 2), ('0ms', 2), ('100 faster', 2), ('array', 2), ('bottom-up', 2), ('bottom-up-algorithm', 2), ('c++11', 2), ('constant memory', 2), ('constant space', 2), ('dp-programming', 2), ('explain', 2), ('explaination', 2), ('fast', 2), ('faster than 100.00', 2), ('functional-programming', 2), ('go-solution', 2), ('golang-solution', 2), ('linear-time', 2), ('python2', 2), ('simple clear c++ solution', 2), ('three-different-solutions', 2), ('top-down dp', 2), ('well-commented', 2), ('#python 3', 1), ('0ms runtime', 1), ('100 memory', 1), ('100 speed', 1), ('accepted', 1), ('accepted solution', 1), ('algorithms', 1), ('base', 1), ('c++ easy to understand', 1), ('c++ solution', 1), ('case', 1), ('clean code', 1), ('clean-code', 1), ('clear-understanding', 1), ('comments', 1), ('comments-added', 1), ('concise', 1), ('concise-solution', 1), ('csharp', 1), ('dp approach', 1), ('dp bottom up', 1), ('dp pattern', 1), ('dyanmic programming', 1), ('easy understand', 1), ('easy-coding', 1), ('easy-to-understand', 1), ('easytounderstand', 1), ('edge-case', 1), ('editorial', 1), ('example', 1), ('explained solution', 1), ('explanations', 1), ('fast and simple', 1), ('fast-solution', 1), ('faster solution', 1), ('follow-up', 1), ('give stars and subscribe', 1), ('go', 1), ('house robber 1', 1), ('house robber1', 1), ('houserobberii', 1), ('improve', 1), ('incorrect-test-case', 1), ('interview-friendly', 1), ('intuitive', 1), ('iterative', 1), ('java ac solution', 1), ('javascript solution', 1), ('js', 1), ('keep it simple', 1), ('lambda function', 1), ('linear time', 1), ('memoziation', 1), ('one pass', 1), ('one pass solution', 1), ('one-pass', 1), ('optimal substructure', 1), ('optimized', 1), ('pyhton', 1), ('python3.8', 1), ('pythonpython3', 1), ('rust', 1), ('scala', 1), ('shorter', 1), ('simplesweet', 1), ('single pass', 1), ('solution-cpp', 1), ('solution-python', 1), ('solution-sharing-cpp', 1), ('solution-sharing-python', 1), ('somal', 1), ('space-optimized', 1), ('state-transition', 1), ('swift5', 1), ('tabulation', 1), ('testcase-wrong', 1), ('typescript', 1), ('veryfast', 1), ('video solution', 1), ('video-explanation', 1), ('whiteboard', 1), ('with documentation', 1), ('with explanation', 1), ('without dp', 1), ('wrong-answer', 1)]"
212,Word Search II,https://leetcode.com/problems/word-search-ii,"Given an m x n board of characters and a list of strings words, return all words on the board.

Each word must be constructed from letters of sequentially adjacent cells, where adjacent cells are horizontally or vertically neighboring. The same letter cell may not be used more than once in a word.","['backtracking', 'trie']",Hard,3669,147,794528,298752,"[""Word Search"", ""Unique Paths III""]","[('trie', 108), ('dfs', 90), ('backtracking', 71), ('python', 46), ('java', 43), ('c++', 39), ('cpp', 27), ('python 3', 24), ('tries', 22), ('javascript', 20), ('python3', 10), ('c#', 8), ('cpp solution', 8), ('trie-dfs', 8), ('trie-tree', 8), ('dfs solution', 7), ('easy-to-understand', 6), ('recursion', 6), ('backtrack', 5), ('clean code', 4), ('depth first search', 4), ('easy-understanding', 4), ('explained', 4), ('golang', 4), ('recursive', 4), ('simple', 4), ('solution', 4), ('swift', 4), ('tle', 4), ('dfs recursive', 3), ('dfs simple solution', 3), ('easy', 3), ('easy-undestand', 3), ('easytounderstand', 3), ('graph', 3), ('hashmap', 3), ('java-solution', 3), ('javascript solution', 3), ('pruning', 3), ('rust', 3), ('solution-sharing-cpp', 3), ('trie data structure', 3), ('word-search-ii', 3), ('back tracking', 2), ('clear', 2), ('comments-added', 2), ('cpp soltuion', 2), ('dfs traversal', 2), ('easiest', 2), ('fast and simple', 2), ('fast-solution', 2), ('go', 2), ('go-solution', 2), ('ordereddict', 2), ('run-time-error', 2), ('short', 2), ('simple solution', 2), ('test-case', 2), ('time-limit-exceeded', 2), ('tle cases', 2), ('well-explained', 2), ('#backtracking', 1), ('#dfs', 1), ('#java', 1), ('#trie', 1), ('28ms', 1), ('3-way-trie', 1), ('accepted', 1), ('amortized', 1), ('array', 1), ('back-tracking', 1), ('backtrace', 1), ('backtracing', 1), ('bactracking', 1), ('beginner friendly', 1), ('best-submission', 1), ('c', 1), ('c++ code', 1), ('c++ dfs', 1), ('c++ set', 1), ('c++ solution', 1), ('clean code with comments', 1), ('clear-understanding', 1), ('cpp easy', 1), ('cppsolution', 1), ('csharp', 1), ('depth-first-search', 1), ('dfs-iterative', 1), ('dfs-tree', 1), ('dfsbfs simple version', 1), ('dictonary', 1), ('doubts', 1), ('early stopping', 1), ('easy sloution', 1), ('easy to understand', 1), ('easy-to-read', 1), ('easy-understand', 1), ('explained solution', 1), ('fast', 1), ('golang-solution', 1), ('hashset', 1), ('improve', 1), ('intuitive', 1), ('iterative', 1), ('iteratively', 1), ('java ac solution', 1), ('java solution using dfs', 1), ('javascrip', 1), ('js', 1), ('kotlin', 1), ('leetcode-wrong', 1), ('matrix', 1), ('memory optimized', 1), ('minimalism', 1), ('modular', 1), ('no trie or hashmap', 1), ('no-trie', 1), ('notrie', 1), ('optimized solution', 1), ('output-limit-exceeded', 1), ('prefix tree', 1), ('prune', 1), ('pythno3', 1), ('pythonpython3', 1), ('question', 1), ('readable', 1), ('recurision', 1), ('recursive-dfs', 1), ('self explanatory', 1), ('sequential search', 1), ('set', 1), ('simple clear c++ solution', 1), ('simplest', 1), ('slow', 1), ('solution-explaining', 1), ('solution-python', 1), ('solution-sharing-java', 1), ('space-efficient', 1), ('speed', 1), ('string', 1), ('strings', 1), ('template', 1), ('test case issue', 1), ('test-case-too-weak', 1), ('time complexity', 1), ('tire', 1), ('trie explained', 1), ('typescript', 1), ('unordered map', 1), ('unorderedset', 1), ('using backtracking', 1), ('without trie', 1), ('word search', 1), ('word-search', 1), ('works-on-my-machine', 1), ('wrong', 1), ('xjq', 1)]"
211,Design Add and Search Words Data Structure,https://leetcode.com/problems/design-add-and-search-words-data-structure,"Design a data structure that supports adding new words and finding if a string matches any previously added string.

Implement the WordDictionary class:


	WordDictionary() Initializes the object.
	void addWord(word) Adds word to the data structure, it can be matched later.
	bool search(word) Returns true if there is any string in the data structure that matches word or false otherwise. word may contain dots '.' where dots can be matched with any letter.","['backtracking', 'depth-first-search', 'design', 'trie']",Medium,2929,125,692403,282259,"[""Implement Trie (Prefix Tree)"", ""Prefix and Suffix Search""]","[('trie', 109), ('java', 56), ('python', 38), ('dfs', 30), ('python 3', 26), ('backtracking', 24), ('c++', 24), ('javascript', 23), ('cpp', 21), ('tries', 17), ('hashmap', 15), ('bfs', 14), ('solution', 12), ('recursion', 11), ('easy-understand', 9), ('c#', 7), ('java-solution', 7), ('easy-understanding', 6), ('simple', 6), ('iterative', 5), ('trie-tree', 5), ('easytounderstand', 4), ('golang', 4), ('python3', 4), ('cpp solution', 3), ('dictionary', 3), ('easy-to-understand', 3), ('es6', 3), ('simple solution', 3), ('swift', 3), ('trie-dfs', 3), ('unordered map', 3), ('best-submission', 2), ('branches', 2), ('c', 2), ('commented', 2), ('dictonary', 2), ('easy', 2), ('explained', 2), ('fast', 2), ('iterator', 2), ('js', 2), ('map', 2), ('recursive', 2), ('rust', 2), ('time-limit-exceeded', 2), ('tle', 2), ('trees', 2), ('typescript', 2), ('video', 2), ('well-explained', 2), ('accepted', 1), ('automata', 1), ('back-tracking', 1), ('backtracing', 1), ('beats 100 percent', 1), ('beginner friendly', 1), ('c++ code', 1), ('c++ solution', 1), ('c++11', 1), ('challenge', 1), ('challenge-me', 1), ('clean code', 1), ('clean-code', 1), ('compare', 1), ('compile', 1), ('complexity analysis', 1), ('dare', 1), ('data-structure', 1), ('deep-first-search', 1), ('depth first search', 1), ('depth-first search', 1), ('depth-first-search', 1), ('design', 1), ('designaddsearchword', 1), ('detailed explanation', 1), ('dfs recursive', 1), ('dfs simple solution', 1), ('dfs-bfs', 1), ('dfs-iterative', 1), ('dfs-topdown', 1), ('dfs-tree', 1), ('dictionary array', 1), ('different-oj-local', 1), ('easy to read', 1), ('easy to understand', 1), ('easy understand', 1), ('easy-solition', 1), ('easy-understsand', 1), ('easy-undestand', 1), ('error', 1), ('fastest', 1), ('finite state machine', 1), ('fully explained', 1), ('generators', 1), ('go', 1), ('good-in-local-machine', 1), ('hard coded', 1), ('hard to understand', 1), ('hash map', 1), ('hash table', 1), ('hashtable', 1), ('help me', 1), ('improve', 1), ('incorrect-test-case', 1), ('index', 1), ('interview-friendly', 1), ('iterative solution', 1), ('iterative-dfs', 1), ('java ac solution', 1), ('java solution', 1), ('java-8', 1), ('javascipt', 1), ('javascript solution', 1), ('js javascript', 1), ('keep it simple', 1), ('kotlin', 1), ('kotlinvim', 1), ('linq', 1), ('list', 1), ('medium', 1), ('memorization', 1), ('memory-efficient', 1), ('mrmagician', 1), ('no trie', 1), ('no tries', 1), ('non-recursion', 1), ('non-recursive', 1), ('pdfs', 1), ('pruning', 1), ('recursion palindrome', 1), ('recursive solution', 1), ('regex', 1), ('regular-expression', 1), ('resources', 1), ('run-time-error', 1), ('search', 1), ('set', 1), ('sets', 1), ('share-solution', 1), ('short', 1), ('solution-sharing-cpp', 1), ('solution-sharingjava', 1), ('stack', 1), ('stacks', 1), ('streams', 1), ('test-case-validation', 1), ('thinking process', 1), ('this keyword', 1), ('time limit exceeded', 1), ('time-complexity', 1), ('time-limit-exceeded-python', 1), ('tree', 1), ('trie data structure', 1), ('trie explained', 1), ('trie-in-c++', 1), ('video-explanation', 1), ('wildcard', 1), ('works-on-my-machine', 1), ('wrong-answer', 1), ('xjq', 1)]"
210,Course Schedule II,https://leetcode.com/problems/course-schedule-ii,"There are a total of n courses you have to take labelled from 0 to n - 1.

Some courses may have prerequisites, for example, if prerequisites[i] = [ai, bi] this means you must take the course bi before the course ai.

Given the total number of courses numCourses and a list of the prerequisite pairs, return the ordering of courses you should take to finish all courses.

If there are many valid answers, return any of them. If it is impossible to finish all courses, return an empty array.","['depth-first-search', 'breadth-first-search', 'graph', 'topological-sort']",Medium,3644,166,910623,392797,"[""Course Schedule"", ""Alien Dictionary"", ""Minimum Height Trees"", ""Sequence Reconstruction"", ""Course Schedule III"", ""Parallel Courses""]","[('topological-sort', 103), ('java', 89), ('dfs', 85), ('python', 54), ('bfs', 53), ('cpp', 40), ('c++', 39), ('topological-sorting', 31), ('javascript', 21), ('python 3', 20), ('graph', 16), ('python3', 15), ('java-solution', 14), ('solution', 13), ('topological sort', 12), ('cycle detection', 9), ('easy', 9), ('kahns algorithm', 9), ('dfs simple solution', 8), ('simple', 8), ('c#', 7), ('easy-understanding', 7), ('golang', 7), ('topilogical sort', 7), ('dfs solution', 6), ('explained', 5), ('queue', 5), ('wrong-answer', 5), ('depth first search', 4), ('detect cycle', 4), ('dfs recursive', 4), ('easy-understand', 4), ('javascript solution', 4), ('kahns', 4), ('recursion', 4), ('swift', 4), ('c++ code', 3), ('comments', 3), ('cpp solution', 3), ('depth-first-search', 3), ('golang-solution', 3), ('meiyaowen', 3), ('ruby', 3), ('run-time-error', 3), ('simple clear c++ solution', 3), ('test-case', 3), ('testcase-wrong', 3), ('topological', 3), ('accepted', 2), ('backtracking', 2), ('breadth first search', 2), ('clean code', 2), ('color', 2), ('course schedule 2', 2), ('csharp', 2), ('cycle-detection', 2), ('detailed explanation', 2), ('easy to understand', 2), ('easy-to-understand', 2), ('easytounderstand', 2), ('explanation of logic', 2), ('fast and simple', 2), ('go', 2), ('go-solution', 2), ('hashmap', 2), ('hashset', 2), ('incorrect-test-case', 2), ('indegree', 2), ('intuitive', 2), ('iterative', 2), ('java ac solution', 2), ('question', 2), ('runtime-error', 2), ('short', 2), ('simple solution', 2), ('time-limit-exceeded', 2), ('toposort', 2), ('#python', 1), ('accepted solution', 1), ('adjacency list', 1), ('algorithm-proof', 1), ('analysis', 1), ('awesome samriddhi', 1), ('beginner friendly', 1), ('best-solution', 1), ('best-submission', 1), ('bfs python', 1), ('bsf', 1), ('c++ solution', 1), ('chinese', 1), ('clean solution', 1), ('coloring', 1), ('commented', 1), ('commented code', 1), ('commetend', 1), ('course schedule', 1), ('coursescheduleii', 1), ('cplus', 1), ('cpp clear', 1), ('cpp easy', 1), ('cpp with explanation', 1), ('cycle', 1), ('cycle detect', 1), ('deadlock-detection', 1), ('deep-first-search', 1), ('deque', 1), ('description-disambiguation', 1), ('dfs-in-order', 1), ('dfs-iterative', 1), ('dfs-recursive', 1), ('dfs-tree', 1), ('digraph', 1), ('easiest solution', 1), ('easy code', 1), ('easy-solution', 1), ('easy-undestand', 1), ('efficient', 1), ('enum', 1), ('enum class', 1), ('examples', 1), ('explaination', 1), ('explained solution', 1), ('explanation with logic', 1), ('facebook', 1), ('fast solution', 1), ('follow-up', 1), ('give stars and subscribe', 1), ('goalng solution', 1), ('graph coloring', 1), ('graphs', 1), ('hehe', 1), ('immutable', 1), ('incorrect-test-case-python-bug', 1), ('iterative traversal', 1), ('iterative-dfs', 1), ('js', 1), ('judgement', 1), ('kahnsalgo', 1), ('kotlin-solution', 1), ('level-order-traversal', 1), ('linear memory', 1), ('linear time', 1), ('linear-space', 1), ('linear-time', 1), ('linked-list-cycle', 1), ('map', 1), ('memoization', 1), ('needimprovement', 1), ('no queue', 1), ('object', 1), ('object-oriented', 1), ('oop', 1), ('picture explanation', 1), ('postorder-traversal', 1), ('priority queue', 1), ('pure-c', 1), ('python3.8', 1), ('queue-approach', 1), ('readable', 1), ('recurision', 1), ('recusion', 1), ('ritik', 1), ('rust', 1), ('scala', 1), ('share-solution', 1), ('simple-solution', 1), ('slow', 1), ('solution-sharing-python', 1), ('special', 1), ('special-judge', 1), ('stack', 1), ('stack-based', 1), ('stars move the article up', 1), ('straight-forward', 1), ('stream', 1), ('time-complexity', 1), ('tle', 1), ('topological sorting', 1), ('topolotical-sort', 1), ('topsort', 1), ('vertex-coloring', 1), ('why tle at 2000nodes', 1), ('wrong-test-cases', 1)]"
209,Minimum Size Subarray Sum,https://leetcode.com/problems/minimum-size-subarray-sum,"Given an array of positive integers nums and a positive integer target, return the minimal length of a contiguous subarray [numsl, numsl+1, ..., numsr-1, numsr] of which the sum is greater than or equal to target. If there is no such subarray, return 0 instead.","['array', 'two-pointers', 'binary-search']",Medium,3668,141,886139,354031,"[""Minimum Window Substring"", ""Maximum Size Subarray Sum Equals k"", ""Maximum Length of Repeated Subarray"", ""Minimum Operations to Reduce X to Zero""]","[('java', 66), ('two-pointers', 48), ('python', 39), ('cpp', 29), ('slidingwindow', 29), ('java-solution', 24), ('c++', 21), ('sliding-window', 19), ('python 3', 18), ('solution', 16), ('javascript', 15), ('sliding window', 12), ('binary-search', 11), ('python3', 11), ('two-pointer', 8), ('easy-understand', 7), ('easy-understanding', 7), ('c#', 6), ('test-case', 6), ('time-complexity', 6), ('binary search', 5), ('two pointers', 5), ('wrong-answer', 5), ('easy-to-understand', 4), ('easy-undestand', 4), ('explained', 4), ('golang', 4), ('short', 4), ('2 pointer', 3), ('cpp solution', 3), ('dynamic-programming', 3), ('help needed', 3), ('java ac solution', 3), ('simple solution', 3), ('sliding window algorithm', 3), ('solution-sharing-cpp', 3), ('subarray', 3), ('swift', 3), ('twopointer', 3), ('100 faster runtime', 2), ('binarysearch', 2), ('brute-force', 2), ('clean code', 2), ('constant-space', 2), ('detailed-explanation', 2), ('easytounderstand', 2), ('fastest', 2), ('golang-solution', 2), ('javascript solution', 2), ('linear time', 2), ('linear-time', 2), ('min sub array', 2), ('minimum-subarray-sum', 2), ('minsubarray', 2), ('pointer', 2), ('prefix sum', 2), ('question-not-clear', 2), ('runtime', 2), ('slide window', 2), ('sliding', 2), ('testcase-wrong', 2), ('treemap', 2), ('two', 2), ('window', 2), ('0ms', 1), ('100 memory', 1), ('100 space', 1), ('100 speed', 1), ('accepted', 1), ('algorithms', 1), ('array', 1), ('best-submission', 1), ('bug', 1), ('c# easy', 1), ('c# solution', 1), ('c++ code', 1), ('c++ solution', 1), ('c++ summary of related problem', 1), ('clear explanation', 1), ('clear solution', 1), ('commented', 1), ('constant space', 1), ('cpp easy', 1), ('cpp error', 1), ('deque', 1), ('divideandconquer', 1), ('divideconquer', 1), ('doubt', 1), ('easy', 1), ('easy-solition', 1), ('easysolution', 1), ('efficient solution', 1), ('explanation with code', 1), ('fast', 1), ('goldmansachs', 1), ('help', 1), ('illustrated', 1), ('incorrect-test-case', 1), ('incorrect-test-case-python-bug', 1), ('issue', 1), ('iteration', 1), ('iterative', 1), ('java simple', 1), ('java solution', 1), ('javasccript', 1), ('js', 1), ('kotlin', 1), ('kotlinvim', 1), ('linear complexity', 1), ('loop', 1), ('minsizesubarraysum', 1), ('missing-test-case', 1), ('multiple solutions', 1), ('o of n', 1), ('one-loop', 1), ('optimal', 1), ('php', 1), ('possible-bug', 1), ('pyhton3', 1), ('readable', 1), ('recursive', 1), ('ruby', 1), ('run-time-error', 1), ('rust', 1), ('sandeepkumar', 1), ('share-solution', 1), ('siding window', 1), ('simple', 1), ('simple clear c++ solution', 1), ('support', 1), ('test case issue', 1), ('test-cases', 1), ('testcase error', 1), ('two pointer technique', 1), ('understandable', 1), ('video', 1), ('well-commented', 1), ('while-loop', 1), ('wrong-test-cases', 1), ('xjq', 1)]"
208,Implement Trie (Prefix Tree),https://leetcode.com/problems/implement-trie-prefix-tree,"A trie (pronounced as ""try"") or prefix tree is a tree data structure used to efficiently store and retrieve keys in a dataset of strings. There are various applications of this data structure, such as autocomplete and spellchecker.

Implement the Trie class:


	Trie() Initializes the trie object.
	void insert(String word) Inserts the string word into the trie.
	boolean search(String word) Returns true if the string word is in the trie (i.e., was inserted before), and false otherwise.
	boolean startsWith(String prefix) Returns true if there is a previously inserted string word that has the prefix prefix, and false otherwise.","['design', 'trie']",Medium,4480,70,779590,411822,"[""Design Add and Search Words Data Structure"", ""Design Search Autocomplete System"", ""Replace Words"", ""Implement Magic Dictionary"", ""Implement Trie II (Prefix Tree)""]","[('java', 76), ('trie', 75), ('python', 41), ('cpp', 40), ('c++', 29), ('javascript', 26), ('hashmap', 25), ('solution', 23), ('python 3', 22), ('tries', 16), ('array', 11), ('golang', 11), ('c#', 10), ('easy-understanding', 10), ('java-solution', 10), ('accepted', 9), ('dictionary', 7), ('easy-undestand', 7), ('clean code', 6), ('easy-understand', 6), ('swift', 6), ('cpp solution', 5), ('python3', 5), ('c', 4), ('clean', 4), ('easy', 4), ('hashset', 4), ('simple', 4), ('trie-tree', 4), ('dictonary', 3), ('easiest', 3), ('golang-solution', 3), ('js', 3), ('map', 3), ('readable', 3), ('recursion', 3), ('recursive', 3), ('c++11', 2), ('concise-solution', 2), ('cpp easy', 2), ('csharp', 2), ('dictionary c#', 2), ('easy-to-understand', 2), ('explained', 2), ('fast', 2), ('go', 2), ('go-solution', 2), ('google interview question', 2), ('hashtable', 2), ('implementation', 2), ('iterative', 2), ('java ac solution', 2), ('kotlin', 2), ('less space', 2), ('memory', 2), ('memory-limit-exceeded', 2), ('ruby', 2), ('rust', 2), ('set', 2), ('simple solution', 2), ('simplest', 2), ('smart pointer', 2), ('solution-sharing-cpp', 2), ('trie-in-c++', 2), ('tries in c++', 2), ('unordered map', 2), ('video', 2), ('youtube', 2), ('#javascript', 1), ('100', 1), ('100 memory', 1), ('3-way-trie', 1), ('99', 1), ('algorithms', 1), ('array to tree', 1), ('array-of-pointers', 1), ('autosearch', 1), ('benchmark', 1), ('c# solutions', 1), ('c++ code', 1), ('c++ solution', 1), ('c++14', 1), ('c++17', 1), ('class', 1), ('commentary', 1), ('comments', 1), ('comments-added', 1), ('consice', 1), ('constant', 1), ('cpp doubt', 1), ('data structures', 1), ('dfs', 1), ('dict', 1), ('dictionarytree', 1), ('doubt', 1), ('easy to understand', 1), ('easy undestanding', 1), ('elegant', 1), ('elegant solution', 1), ('error', 1), ('explained solution', 1), ('fast and clear', 1), ('fast and simple', 1), ('fast-solution', 1), ('faster than 75', 1), ('feedback', 1), ('further-optimization', 1), ('generic-solution', 1), ('go lang', 1), ('go-lang', 1), ('graph theory', 1), ('graph traversal', 1), ('graph-theory', 1), ('hashing', 1), ('help', 1), ('help needed', 1), ('helper', 1), ('idiomatic', 1), ('iteration', 1), ('java solution', 1), ('java-8', 1), ('java8', 1), ('javascrip', 1), ('javascript solution', 1), ('javascriptes6', 1), ('js javascript', 1), ('kotlinvim', 1), ('lambda expression', 1), ('leak', 1), ('linkedlists', 1), ('memory efficient', 1), ('memory-limited-exceeded', 1), ('mrmagician', 1), ('nodes', 1), ('oop', 1), ('optimal', 1), ('pointer', 1), ('prefix', 1), ('python2', 1), ('question need help', 1), ('radix tree', 1), ('recursive dictionary', 1), ('refactoring', 1), ('run-time-error', 1), ('scala', 1), ('short', 1), ('simpe', 1), ('simpleunderstanding', 1), ('slow', 1), ('solution-c#', 1), ('string', 1), ('structured', 1), ('swift5', 1), ('ternary-search', 1), ('testcase error', 1), ('testcase-wrong', 1), ('time-complexity', 1), ('time-limit-exceeded', 1), ('tree', 1), ('tree traversal', 1), ('treeset', 1), ('trie explained', 1), ('trie-dfs', 1), ('trienode', 1), ('two solutions', 1), ('typescript', 1), ('unorderedmap', 1), ('utf8', 1), ('vector', 1), ('well-commented', 1), ('well-explained', 1), ('wrong answer', 1), ('wrong-answer', 1)]"
207,Course Schedule,https://leetcode.com/problems/course-schedule,"There are a total of numCourses courses you have to take, labeled from 0 to numCourses - 1. You are given an array prerequisites where prerequisites[i] = [ai, bi] indicates that you must take course bi first if you want to take course ai.


	For example, the pair [0, 1], indicates that to take course 0 you have to first take course 1.


Return true if you can finish all courses. Otherwise, return false.","['depth-first-search', 'breadth-first-search', 'graph', 'topological-sort']",Medium,5700,237,1304815,578693,"[""Course Schedule II"", ""Graph Valid Tree"", ""Minimum Height Trees"", ""Course Schedule III""]","[('java', 127), ('dfs', 117), ('topological-sort', 97), ('bfs', 74), ('python', 64), ('c++', 53), ('graph', 48), ('javascript', 40), ('cpp', 35), ('python 3', 34), ('topological-sorting', 33), ('dfs simple solution', 18), ('cycle detection', 16), ('easy-understanding', 16), ('topological sort', 13), ('java-solution', 12), ('solution', 11), ('c#', 8), ('python3', 8), ('c++ code', 7), ('recursion', 7), ('simple', 7), ('clean code', 6), ('cycle-detection', 6), ('golang', 6), ('recursive', 6), ('ruby', 6), ('cpp solution', 5), ('cycle', 5), ('depth first search', 5), ('detect cycle', 5), ('easy-understand', 5), ('kahns', 5), ('swift', 5), ('wrong-answer', 5), ('backtracking', 4), ('comments', 4), ('csharp', 4), ('depth-first-search', 4), ('dfs solution', 4), ('easy-to-understand', 4), ('fast', 4), ('iterative', 4), ('testcase-wrong', 4), ('topilogical sort', 4), ('topological', 4), ('toposort', 4), ('best-submission', 3), ('breadth-first-search', 3), ('commented', 3), ('course schedule', 3), ('cyclic graph', 3), ('dfs-bfs', 3), ('dfs-recursive', 3), ('go', 3), ('graph-coloring', 3), ('indegree', 3), ('java ac solution', 3), ('javascript solution', 3), ('js', 3), ('kahns algo', 3), ('khans algorithm', 3), ('loop-detection', 3), ('queue', 3), ('scala', 3), ('simple solution', 3), ('test-case', 3), ('time-limit-exceeded', 3), ('accepted', 2), ('adjacency list', 2), ('clarification', 2), ('class', 2), ('commentary', 2), ('cycle detect', 2), ('easy', 2), ('explained', 2), ('fast and simple', 2), ('golang-solution', 2), ('graph cycle', 2), ('graphs', 2), ('hash table', 2), ('hashmap', 2), ('kahns algorithm', 2), ('khans', 2), ('kotlin', 2), ('linear-time', 2), ('map', 2), ('rust', 2), ('schedule', 2), ('stack', 2), ('tle', 2), ('video-explanation', 2), ('well-explained', 2), ('207. course schedule', 1), ('99 faster', 1), ('adjacency matrix', 1), ('awesome samriddhi', 1), ('back tracking', 1), ('beating-100-submission', 1), ('breadth first search', 1), ('c++ ac', 1), ('c++ solution', 1), ('c++ topological sort', 1), ('cache', 1), ('check for back-edge', 1), ('circle-detection', 1), ('clarify', 1), ('color', 1), ('coloring', 1), ('commetend', 1), ('course', 1), ('cpp-solution', 1), ('data-structure', 1), ('deep-first-search', 1), ('degree', 1), ('depth first traversal', 1), ('depth first-search', 1), ('depth-first search', 1), ('detailed', 1), ('detailed explanation', 1), ('dfs recursive', 1), ('dfs simple', 1), ('dfs traversal', 1), ('dfs with early stopping', 1), ('dfs with memo', 1), ('dfs-in-order', 1), ('dfs-iterative', 1), ('dfs-tree', 1), ('directed graph', 1), ('dp', 1), ('drewbie', 1), ('dynamic programming', 1), ('east to understand', 1), ('easy to understand', 1), ('easy undestanding', 1), ('easy-to-read', 1), ('easy-undestand', 1), ('easytounderstand', 1), ('efficiency', 1), ('explaination', 1), ('explanation of logic', 1), ('explanation with logic', 1), ('explanations', 1), ('fast-solution', 1), ('give stars and subscribe', 1), ('go-solution', 1), ('graph coloring', 1), ('graph traversal', 1), ('hash map', 1), ('help', 1), ('implementation', 1), ('improve', 1), ('intuitive', 1), ('js javascript', 1), ('khan', 1), ('kosaraju', 1), ('kosarajus algorithm', 1), ('level-order-traversal', 1), ('likeapro', 1), ('linear-space', 1), ('linear-time-space', 1), ('matrix', 1), ('meiyaowen', 1), ('missing-test-case', 1), ('mistake', 1), ('modified dfs', 1), ('need', 1), ('non-copy-paste', 1), ('object-oriented', 1), ('pdfs', 1), ('php', 1), ('pseudocode', 1), ('pyhton 3', 1), ('pyhton3', 1), ('python deque', 1), ('python2', 1), ('queue and linkedlist', 1), ('readable', 1), ('recurision', 1), ('recursion stack', 1), ('ritik', 1), ('ru', 1), ('scc', 1), ('scheduling-problem', 1), ('self-defined-comp', 1), ('set', 1), ('share-solution', 1), ('short', 1), ('short solution', 1), ('simple clear c++ solution', 1), ('solution-sharing-cpp', 1), ('sort', 1), ('straight-forward', 1), ('tarjan', 1), ('template', 1), ('thinking process', 1), ('time-complexity', 1), ('topological sorting', 1), ('topologicalsort', 1), ('tree', 1), ('typescript', 1), ('understanding', 1), ('union find', 1), ('video explaination', 1), ('video interview', 1), ('visualization', 1), ('well-commented', 1), ('wrong', 1), ('yes', 1)]"
206,Reverse Linked List,https://leetcode.com/problems/reverse-linked-list,"Given the head of a singly linked list, reverse the list, and return the reversed list.",['linked-list'],Easy,6855,129,2096518,1382201,"[""Reverse Linked List II"", ""Binary Tree Upside Down"", ""Palindrome Linked List""]","[('java', 107), ('iterative', 89), ('c++', 71), ('python', 69), ('cpp', 66), ('recursive', 60), ('linked-list', 55), ('recursion', 38), ('javascript', 36), ('python 3', 35), ('solution', 31), ('java-solution', 28), ('python3', 22), ('cpp solution', 14), ('golang', 14), ('simple', 14), ('easy-understanding', 13), ('easy', 12), ('linked list', 12), ('reverse linked list', 12), ('reverse list', 12), ('swift', 12), ('c', 11), ('linkedlists', 11), ('iteratively', 10), ('javascript solution', 10), ('linkedlist', 10), ('ruby', 9), ('0ms', 7), ('c++ code', 7), ('iteration', 7), ('stack', 7), ('wrong-answer', 7), ('c#', 6), ('constant-space', 6), ('easy-undestand', 6), ('easytounderstand', 6), ('pointer', 6), ('recursively', 6), ('recusion', 6), ('#iterative', 5), ('easy-to-understand', 5), ('fast-solution', 5), ('go', 5), ('golang-solution', 5), ('cpp easy', 4), ('easy to understand', 4), ('inplace', 4), ('reverse', 4), ('reverse-list', 4), ('short', 4), ('time-limit-exceeded', 4), ('#recursive', 3), ('3 pointers', 3), ('c code', 3), ('easy-understand', 3), ('explanation', 3), ('fastest', 3), ('go-solution', 3), ('in-place', 3), ('pythonpython3', 3), ('readable', 3), ('recursive easy', 3), ('recursive solution', 3), ('scala', 3), ('#easy-understand', 2), ('#java', 2), ('100 faster', 2), ('100 faster runtime', 2), ('100 memory', 2), ('4ms', 2), ('array', 2), ('beginner friendly', 2), ('best-solution', 2), ('c++11', 2), ('comments-added', 2), ('constant-space-iterative', 2), ('cpp-solution', 2), ('csharp', 2), ('easiest', 2), ('explained', 2), ('explanations', 2), ('faster than 100.00', 2), ('go lang', 2), ('iterative approach', 2), ('iterative way', 2), ('js', 2), ('linked-lists', 2), ('memory-limit-exceeded', 2), ('pointers', 2), ('python2', 2), ('reverselist', 2), ('run-time-error', 2), ('runtime-error', 2), ('rust', 2), ('simple clear c++ solution', 2), ('solution-sharing-cpp', 2), ('solved', 2), ('swift5', 2), ('time-complexity', 2), ('video explanation', 2), ('video-explanation', 2), ('works-on-my-machine', 2), ('#c', 1), ('#c++', 1), ('#cpp', 1), ('#easy', 1), ('#explained', 1), ('#javascript', 1), ('#linkedlist', 1), ('#pointerrecursive', 1), ('#reverselist', 1), ('#swift', 1), ('0 ms', 1), ('100', 1), ('100 space', 1), ('100 speed', 1), ('2 pointer', 1), ('206', 1), ('4 liner', 1), ('4 ways', 1), ('accepted', 1), ('accepted solution', 1), ('algosexplained', 1), ('beats all', 1), ('beginner', 1), ('best-submission', 1), ('big o of n', 1), ('bloomberg', 1), ('c recursive', 1), ('c solution', 1), ('c-code', 1), ('c-programming', 1), ('c+', 1), ('c++ easy solution', 1), ('c++ easy to understand', 1), ('c++ iterative sol', 1), ('c++ solution', 1), ('c++easy-understanding', 1), ('clean', 1), ('code comments', 1), ('coding challenge', 1), ('commented', 1), ('comments', 1), ('comments added', 1), ('concept first', 1), ('constant space', 1), ('cpp-functional', 1), ('data structures', 1), ('debug', 1), ('description', 1), ('divide and conquer', 1), ('documentation', 1), ('dry', 1), ('easytoread', 1), ('easytoundersatand', 1), ('editorial', 1), ('efficient', 1), ('efficient solution', 1), ('explain', 1), ('fast and simple', 1), ('faster than 100', 1), ('faster than 98.5', 1), ('first-post', 1), ('for beginners', 1), ('friendly', 1), ('github', 1), ('give stars and subscribe', 1), ('google interview', 1), ('guard', 1), ('guard let', 1), ('hash table', 1), ('help needed', 1), ('ierative', 1), ('improve', 1), ('insertion sort', 1), ('interesting', 1), ('intuitive', 1), ('iterate', 1), ('iterative approch', 1), ('iterative solution', 1), ('iterator', 1), ('iteratve-recursive', 1), ('itereative', 1), ('java ac solution', 1), ('kotlin', 1), ('kotlinvim', 1), ('linear', 1), ('linear time', 1), ('linear-time', 1), ('linked lists', 1), ('linklist', 1), ('listnode', 1), ('ll', 1), ('minimal', 1), ('no recursion', 1), ('nodes', 1), ('non-recursive', 1), ('one pass solution', 1), ('one-liner', 1), ('ownership', 1), ('pattern-matching', 1), ('php', 1), ('php solution', 1), ('picture explanation', 1), ('pseudocode', 1), ('pythonic', 1), ('rajawatbanna', 1), ('recurision', 1), ('recursive approach', 1), ('recusrive', 1), ('resursive', 1), ('reversal', 1), ('reverse link list', 1), ('reverse-linked-list', 1), ('reversing a linked list', 1), ('solution-cpp', 1), ('solution-explaining', 1), ('solution-java', 1), ('solution-javascript', 1), ('solution-sharing-c', 1), ('sorting', 1), ('space', 1), ('space analysis', 1), ('space optimization', 1), ('stackoverflow', 1), ('stacks', 1), ('step by step', 1), ('step by step explanation', 1), ('stl', 1), ('swift5.3', 1), ('testcase-wrong', 1), ('three pointer', 1), ('three pointers', 1), ('time', 1), ('time analysis', 1), ('tracing', 1), ('traversal', 1), ('two pointer technique', 1), ('two pointers', 1), ('two-methods', 1), ('typescript', 1), ('video', 1), ('video interview', 1), ('while-loop', 1), ('whileloop', 1), ('works-on-run-code', 1), ('youtube', 1)]"
205,Isomorphic Strings,https://leetcode.com/problems/isomorphic-strings,"Given two strings s and t, determine if they are isomorphic.

Two strings s and t are isomorphic if the characters in s can be replaced to get t.

All occurrences of a character must be replaced with another character while preserving the order of characters. No two characters may map to the same character, but a character may map to itself.",['hash-table'],Easy,2015,472,882187,358823,"[""Word Pattern""]","[('java', 61), ('python', 55), ('hashmap', 38), ('cpp', 32), ('solution', 32), ('c++', 27), ('python 3', 23), ('python3', 21), ('javascript', 20), ('dictionary', 14), ('easy-understand', 12), ('simple', 9), ('easy-understanding', 7), ('map', 7), ('simple solution', 7), ('string', 7), ('swift', 7), ('accepted', 6), ('dictonary', 6), ('golang', 6), ('java-solution', 6), ('short', 6), ('easy-undestand', 5), ('hash table', 5), ('c#', 4), ('easy', 4), ('array', 3), ('concise-solution', 3), ('cpp solution', 3), ('dictionaries', 3), ('easy-to-understand', 3), ('golang-solution', 3), ('hashset', 3), ('hashtable', 3), ('improve', 3), ('set', 3), ('time-limit-exceeded', 3), ('c++ code', 2), ('constant-space', 2), ('fastest', 2), ('hashing', 2), ('isomorphic', 2), ('javascript solution', 2), ('python2', 2), ('ruby', 2), ('scala', 2), ('solution-sharing-cpp', 2), ('test-case', 2), ('time-complexity', 2), ('wrong-answer', 2), ('#python', 1), ('#python #easy', 1), ('#python3', 1), ('#sets', 1), ('0ms', 1), ('9 lines', 1), ('amazon sde3', 1), ('asahiocean', 1), ('ascii', 1), ('beats 99', 1), ('best-submission', 1), ('bug', 1), ('c', 1), ('c++ solution', 1), ('char compare', 1), ('clean code', 1), ('complete code', 1), ('confuse-answer', 1), ('cpp easy', 1), ('debug', 1), ('descriptive names', 1), ('dict', 1), ('dictionary c#', 1), ('dictionary comprehension', 1), ('easiest', 1), ('easy code', 1), ('easy java solution', 1), ('easy understanding', 1), ('easytounderstand', 1), ('elegant', 1), ('encoding', 1), ('explaination', 1), ('explained', 1), ('explanation', 1), ('explanatory comments', 1), ('facebook-india', 1), ('faceebook', 1), ('functional', 1), ('go-solution', 1), ('good variable names', 1), ('hash', 1), ('help', 1), ('implementation', 1), ('incorrect-test-case', 1), ('interview-friendly', 1), ('isomorphism', 1), ('java ac solution', 1), ('java solution', 1), ('java solution sharing', 1), ('javascrip', 1), ('js', 1), ('kotlinvim', 1), ('linear space', 1), ('linear time', 1), ('linear-time', 1), ('list', 1), ('o1', 1), ('one line', 1), ('one-liner', 1), ('pattern', 1), ('pattern matching', 1), ('pattern-matching', 1), ('php', 1), ('php solution', 1), ('runtime-error', 1), ('simple-solution', 1), ('slow', 1), ('solution-python', 1), ('solution-sharing-c', 1), ('string-operation', 1), ('strings', 1), ('structured code', 1), ('testcase-wrong', 1), ('three-different-solutions', 1), ('tle', 1), ('two-pointers', 1), ('unicode', 1), ('unordered map', 1), ('unorderedmap', 1), ('vector', 1), ('vectors', 1), ('video', 1), ('video explanation', 1), ('video solution', 1), ('why', 1), ('works-on-my-machine', 1), ('wrong', 1), ('wrong-description', 1), ('zip', 1)]"
204,Count Primes,https://leetcode.com/problems/count-primes,"Count the number of prime numbers less than a non-negative number, n.","['hash-table', 'math']",Easy,2959,767,1431386,463133,"[""Ugly Number"", ""Ugly Number II"", ""Perfect Squares""]","[('java', 47), ('sieve of eratosthenes', 44), ('python', 35), ('c++', 34), ('cpp', 31), ('sieve-of-eratosthenes', 26), ('solution', 26), ('javascript', 23), ('python 3', 14), ('accepted', 11), ('cpp solution', 9), ('golang', 9), ('python3', 9), ('swift', 9), ('time-limit-exceeded', 8), ('c#', 6), ('ruby', 6), ('c', 5), ('easy-understand', 5), ('easy-understanding', 5), ('primes', 5), ('sieve of erastostheness', 5), ('c++ code', 4), ('count primes', 4), ('easy', 4), ('erastostheness', 4), ('memory-limit-exceeded', 4), ('prime', 4), ('prime numbers', 4), ('prime-number', 4), ('sieve', 4), ('time-complexity', 4), ('brute force', 3), ('count-primes', 3), ('countprime', 3), ('easy code', 3), ('easytounderstand', 3), ('go', 3), ('java-solution', 3), ('optimized', 3), ('run-time-error', 3), ('simple solution', 3), ('video', 3), ('wrong-answer', 3), ('dynamic-programming', 2), ('easy-undestand', 2), ('fast-solution', 2), ('golang-solution', 2), ('incorrect-test-case', 2), ('math', 2), ('optimal', 2), ('pythonpython3', 2), ('runtime-error', 2), ('rust', 2), ('seive', 2), ('simple', 2), ('stl', 2), ('swift5', 2), ('works-on-my-machine', 2), ('#c++', 1), ('#javascript', 1), ('#sieve', 1), ('100 faster', 1), ('100 memory', 1), ('204', 1), ('8ms', 1), ('accepted solution', 1), ('algorithms', 1), ('ancient', 1), ('apple', 1), ('awesome samriddhi', 1), ('beat 99.7', 1), ('beginners', 1), ('benchmark', 1), ('binary search', 1), ('bit', 1), ('bit-manipulation', 1), ('bitmap', 1), ('bitset', 1), ('boolean', 1), ('bruteforce', 1), ('bug', 1), ('c# dp', 1), ('c# easy', 1), ('c# solutions', 1), ('c++ solution', 1), ('c++17', 1), ('chinese', 1), ('clarity', 1), ('complexity', 1), ('count prime', 1), ('cpp doubt', 1), ('csharp', 1), ('dp', 1), ('dynamic programming', 1), ('easy to understand', 1), ('efficent approach', 1), ('efficiency', 1), ('es6', 1), ('fast', 1), ('fast and simple', 1), ('fun', 1), ('further-optimization', 1), ('google', 1), ('google interview', 1), ('heap-memory', 1), ('iteratively', 1), ('javascript solution', 1), ('javascriptes6', 1), ('js', 1), ('kotllin', 1), ('less optimized', 1), ('less space', 1), ('linear-space', 1), ('mark and sweep', 1), ('memoization', 1), ('memory-limited-exceeded', 1), ('microsoft interview', 1), ('mle', 1), ('more space', 1), ('most optimized', 1), ('number theory', 1), ('ojerror', 1), ('optimisation', 1), ('optimised code', 1), ('optimizations', 1), ('php', 1), ('php solution', 1), ('preprocessing', 1), ('problem-discussion', 1), ('python2', 1), ('python3.8', 1), ('ritik', 1), ('runtimeerror', 1), ('scala', 1), ('sets', 1), ('short', 1), ('short solution', 1), ('shortest', 1), ('simpe', 1), ('simple clear c++ solution', 1), ('simple-solution', 1), ('solition-sharing', 1), ('solutions', 1), ('solved', 1), ('static', 1), ('test-case', 1), ('testcase-wrong', 1), ('time', 1), ('time limit exceeded', 1), ('time limit exceeded solve', 1), ('timeout', 1), ('tle', 1), ('ugly-number', 1), ('valarray', 1)]"
203,Remove Linked List Elements,https://leetcode.com/problems/remove-linked-list-elements,"Given the head of a linked list and an integer val, remove all the nodes of the linked list that has Node.val == val, and return the new head.",['linked-list'],Easy,2647,123,1166454,462189,"[""Remove Element"", ""Delete Node in a Linked List""]","[('java', 95), ('cpp', 61), ('c++', 56), ('python', 46), ('iterative', 35), ('solution', 34), ('javascript', 31), ('linked-list', 27), ('python 3', 24), ('python3', 21), ('java-solution', 19), ('cpp solution', 13), ('easy-understand', 13), ('linkedlists', 13), ('c#', 12), ('easy', 12), ('easy-understanding', 12), ('recursion', 11), ('recursive', 10), ('accepted', 9), ('c', 9), ('simple', 8), ('javascript solution', 7), ('easy-undestand', 6), ('golang', 6), ('iteratively', 6), ('linked list', 6), ('simple solution', 6), ('c++ code', 5), ('dummy-node', 5), ('explained', 5), ('pointer', 5), ('dummy-head', 4), ('fast', 4), ('linear time', 4), ('linkedlist', 4), ('removelinkedlistelements', 4), ('swift', 4), ('wrong-answer', 4), ('1ms', 3), ('c code', 3), ('constant memory', 3), ('easy-to-understand', 3), ('easytounderstand', 3), ('golang-solution', 3), ('in-place', 3), ('kotlin', 3), ('recursively', 3), ('sentinel node', 3), ('short', 3), ('single pass', 3), ('#linkedlist', 2), ('#python', 2), ('#python3', 2), ('c++code', 2), ('constant space', 2), ('constant-space', 2), ('csharp', 2), ('easiest', 2), ('efficient solution', 2), ('explanation', 2), ('fast-solution', 2), ('go', 2), ('go-solution', 2), ('improve', 2), ('iterate', 2), ('java ac solution', 2), ('linear-time', 2), ('linklist', 2), ('python2', 2), ('readable', 2), ('recurision', 2), ('recusion', 2), ('remove', 2), ('ruby', 2), ('tail-recursion', 2), ('two-pointers', 2), ('#easy-understanding', 1), ('#easysolution', 1), ('#functional', 1), ('#java', 1), ('#javascript', 1), ('#python 3', 1), ('#recursion', 1), ('0ms', 1), ('0ms-solution', 1), ('100 faster runtime', 1), ('100 speed', 1), ('2 pointers', 1), ('20ms', 1), ('24ms', 1), ('3ms', 1), ('4line', 1), ('6 lines', 1), ('algorithms', 1), ('beating-100-submission', 1), ('beginners', 1), ('best-solution', 1), ('best-submission', 1), ('blazing fast', 1), ('bug', 1), ('c programming', 1), ('c#-solution', 1), ('c++ solution', 1), ('c++17', 1), ('cache', 1), ('chinese', 1), ('clean code', 1), ('clear-understanding', 1), ('clearly', 1), ('compile-error', 1), ('cpp easy', 1), ('dummynode', 1), ('easy to understand', 1), ('easy to understandd', 1), ('easysolution', 1), ('eckotan', 1), ('elegant', 1), ('error', 1), ('es6', 1), ('explained solution', 1), ('explanation of logic', 1), ('fast and simple', 1), ('faster', 1), ('fastest java slution', 1), ('github', 1), ('help needed', 1), ('incorrect-test-case', 1), ('intutive', 1), ('iteration', 1), ('iterative solution', 1), ('iteratve', 1), ('iteratve-recursive', 1), ('java solution', 1), ('javaaid', 1), ('js', 1), ('kotlinvim', 1), ('linear search', 1), ('linked', 1), ('linked-list-cycle', 1), ('list', 1), ('listnode', 1), ('logn', 1), ('memory-leak', 1), ('mistake', 1), ('mrmagician', 1), ('non-recursive', 1), ('one pass', 1), ('pointer-to-pointer', 1), ('pointer2pointer', 1), ('prefetch', 1), ('prev-pointer', 1), ('py', 1), ('recursive approach', 1), ('recursive easy', 1), ('recursive solution', 1), ('recursive vs iterative', 1), ('remove-element', 1), ('run-time-error', 1), ('runtime', 1), ('scala', 1), ('second-level', 1), ('sentinel-node', 1), ('simple java solution', 1), ('single pointer', 1), ('single-linked-list', 1), ('single-pointer', 1), ('solution by python', 1), ('solution-sharing', 1), ('solution-sharing-c', 1), ('space-efficient', 1), ('stl', 1), ('swapnodes', 1), ('tail-recursive', 1), ('tailrec', 1), ('test-case', 1), ('three pointers', 1), ('time-complexity', 1), ('time-limit-exceeded', 1), ('two pointers', 1), ('twopointer', 1), ('upvote', 1), ('while-loop', 1), ('xjq', 1)]"
202,Happy Number,https://leetcode.com/problems/happy-number,"Write an algorithm to determine if a number n is happy.

A happy number is a number defined by the following process:


	Starting with any positive integer, replace the number by the sum of the squares of its digits.
	Repeat the process until the number equals 1 (where it will stay), or it loops endlessly in a cycle which does not include 1.
	Those numbers for which this process ends in 1 are happy.


Return true if n is a happy number, and false if not.","['hash-table', 'math']",Easy,3122,513,1210543,622834,"[""Linked List Cycle"", ""Add Digits"", ""Ugly Number""]","[('java', 76), ('python', 76), ('javascript', 59), ('c++', 57), ('python 3', 54), ('cpp', 53), ('python3', 30), ('solution', 26), ('happynumber', 21), ('recursion', 20), ('easy-understanding', 17), ('cpp solution', 15), ('easy-undestand', 15), ('set', 15), ('easy-understand', 14), ('recursive', 14), ('swift', 12), ('golang', 11), ('java-solution', 11), ('easy', 10), ('happy number', 10), ('simple', 10), ('cpp easy', 9), ('hashset', 9), ('hash table', 8), ('sets', 8), ('c++ code', 7), ('hashtable', 7), ('javascript solution', 7), ('simple solution', 7), ('accepted', 6), ('c#', 6), ('easy-to-understand', 6), ('easytounderstand', 6), ('floyd cycle detection', 6), ('math', 6), ('ruby', 6), ('hashmap', 5), ('iterative', 5), ('two-pointers', 5), ('0ms', 4), ('c', 4), ('cycle-detection', 4), ('kotlin', 4), ('scala', 4), ('short', 4), ('100 faster runtime', 3), ('cycle detection', 3), ('efficient', 3), ('fast-solution', 3), ('go', 3), ('iteratively', 3), ('js', 3), ('python2', 3), ('rust', 3), ('#math', 2), ('100 faster', 2), ('100 memory', 2), ('accepted solution', 2), ('algorithms', 2), ('clean', 2), ('constant space', 2), ('constant-space', 2), ('cpp clear', 2), ('cpp doubt', 2), ('dictionary', 2), ('easysolution', 2), ('explanation of logic', 2), ('fast', 2), ('fast and simple', 2), ('fast and slow pointers', 2), ('fast-slow-pointers', 2), ('happy', 2), ('math-solution', 2), ('mathematics', 2), ('memoziation', 2), ('number', 2), ('oneline', 2), ('pattern-based', 2), ('php', 2), ('pruning', 2), ('python3.8', 2), ('recurision', 2), ('recursive easy', 2), ('recursive solution', 2), ('recusion', 2), ('reduce', 2), ('simple approach', 2), ('simple python solution', 2), ('simple-solution', 2), ('string to integer', 2), ('testcase-wrong', 2), ('tortoise-and-hare-algo', 2), ('understandable', 2), ('well-commented', 2), ('wrong-answer', 2), ('#c++', 1), ('#cpp', 1), ('#google', 1), ('#hash table', 1), ('#hashmap', 1), ('#java', 1), ('#jpmorgam', 1), ('#kotlin', 1), ('#python', 1), ('#python 3', 1), ('#python3', 1), ('#twopointerapproach', 1), ('1-line', 1), ('100 faster cpp', 1), ('100 space', 1), ('100 speed', 1), ('1ms', 1), ('30-day leetcode challenge', 1), ('arraylist', 1), ('beats 100', 1), ('best-submission', 1), ('bfs', 1), ('big o of n', 1), ('brute force', 1), ('bug in leetcode', 1), ('bug report', 1), ('bug-timeout', 1), ('bugs', 1), ('c code', 1), ('c++ easy solution', 1), ('c++ easy to understand', 1), ('c++ set', 1), ('c++ solution', 1), ('c++11', 1), ('c++14', 1), ('clean code', 1), ('clear explanation', 1), ('commetend', 1), ('compile-error', 1), ('concise', 1), ('confusing', 1), ('constant memory', 1), ('constant time', 1), ('constant-time', 1), ('cool', 1), ('cplusplus', 1), ('csharp', 1), ('cycle', 1), ('dfs', 1), ('dictionaries', 1), ('dictonary', 1), ('dp', 1), ('dynamic programming', 1), ('dynamic-programming', 1), ('easiest', 1), ('easy to understand', 1), ('easy-solition', 1), ('easy-solution', 1), ('explaination', 1), ('explanation', 1), ('fast slow pointer', 1), ('faster than 75', 1), ('fasterthan100', 1), ('fastest', 1), ('four-different-solutions', 1), ('functional', 1), ('github', 1), ('go lang', 1), ('go-solution', 1), ('golang-solution', 1), ('great', 1), ('help', 1), ('help needed', 1), ('hire-me', 1), ('if n ever falls below 5', 1), ('improve', 1), ('intuitive', 1), ('ios', 1), ('iteration', 1), ('iteration vs recursion', 1), ('iteratve', 1), ('java solution', 1), ('javasacript', 1), ('javascrip', 1), ('jp morgan', 1), ('jpmorgan', 1), ('leetcode bug', 1), ('linear time', 1), ('linked-list', 1), ('list comprehension', 1), ('logarithmic time', 1), ('logical thinking', 1), ('loop-detection', 1), ('loops', 1), ('malj', 1), ('map', 1), ('maths', 1), ('memoization', 1), ('no hashmap', 1), ('no pointers', 1), ('number theory', 1), ('numbers', 1), ('o1', 1), ('on', 1), ('one line', 1), ('optimal', 1), ('php solution', 1), ('pointer', 1), ('pythonic', 1), ('queue', 1), ('recursion vs iteration', 1), ('runtime-error', 1), ('self-explanatory', 1), ('series', 1), ('set-matrix-zeroes', 1), ('short solution', 1), ('simple clear c++ solution', 1), ('simplest', 1), ('slow fast pointer', 1), ('slow-fast-algorithm', 1), ('slowfast pointers', 1), ('solution-java', 1), ('solution-sharing-c', 1), ('solution-sharing-cpp', 1), ('space-complexity', 1), ('spread operator', 1), ('stack-based', 1), ('swiftsolution', 1), ('tail-recursion', 1), ('tail-recursive', 1), ('tailrec', 1), ('test-case', 1), ('test-cases', 1), ('theory', 1), ('time-limit-exceeded', 1), ('tortoise and hare', 1), ('tortoise and the hare', 1), ('tortoise-hare', 1), ('typescript', 1), ('unordered set', 1), ('vector', 1), ('video explanation', 1), ('video solution', 1), ('video-explanation', 1), ('visualization', 1), ('walrus operator', 1), ('well-explained', 1), ('while-loop', 1), ('with explanation', 1), ('works-on-my-machine', 1), ('wrong-description', 1), ('wronganswer', 1)]"
201,Bitwise AND of Numbers Range,https://leetcode.com/problems/bitwise-and-of-numbers-range,"Given two integers left and right that represent the range [left, right], return the bitwise AND of all numbers in this range, inclusive.",['bit-manipulation'],Medium,1362,145,429777,170718,[],"[('java', 37), ('python', 23), ('cpp', 22), ('bit-manipulation', 12), ('bitwise operation', 12), ('easy-understand', 12), ('c++', 11), ('simple', 11), ('bitwise', 10), ('easy-understanding', 10), ('solution', 10), ('bit manipulation', 9), ('java-solution', 9), ('python 3', 7), ('easy-undestand', 6), ('c#', 5), ('accepted', 4), ('easiest', 4), ('python3', 4), ('cpp solution', 3), ('easy', 3), ('explained', 3), ('golang', 3), ('javascript', 3), ('shift bit', 3), ('simple solution', 3), ('iteration', 2), ('log', 2), ('math', 2), ('recursion', 2), ('recursive', 2), ('rust', 2), ('short', 2), ('simplest', 2), ('swift', 2), ('video explanation', 2), ('#bitmasking', 1), ('#java', 1), ('100 faster', 1), ('acceptd', 1), ('and', 1), ('assembly', 1), ('beginnerfriendly', 1), ('best-submission', 1), ('binary string', 1), ('bit shifting', 1), ('bitmanipulation', 1), ('bitmask', 1), ('c++ code', 1), ('clean', 1), ('constant', 1), ('constant-space', 1), ('constant-time', 1), ('cpp-functional', 1), ('csharp', 1), ('debug', 1), ('debugging', 1), ('different approach', 1), ('dynamic-programming', 1), ('east to understand', 1), ('easy-solition', 1), ('easy-understsand', 1), ('easytounderstand', 1), ('esay-understand', 1), ('explanation', 1), ('ez solution', 1), ('faster than 97.3', 1), ('geeksforgeeks', 1), ('golang-solution', 1), ('inbuilt function', 1), ('intrinsic', 1), ('iterative', 1), ('java ac solution', 1), ('java bit-manipulation', 1), ('javascript solution', 1), ('kotlin', 1), ('logic explained clearly', 1), ('math.log', 1), ('memory-limit-exceeded', 1), ('no loop', 1), ('no-loops', 1), ('overflow', 1), ('overflow fix', 1), ('python-solution', 1), ('recursive easy', 1), ('ruby', 1), ('short code', 1), ('short solution', 1), ('simpe', 1), ('solution-explaining', 1), ('solution-share', 1), ('solution-sharing-c', 1), ('solution-sharing-python', 1), ('time-complexity', 1), ('time-limit-exceeded', 1), ('trick', 1), ('video-explanation', 1), ('well-commented', 1), ('well-explained', 1), ('while-loop', 1), ('x86', 1), ('xor', 1)]"
200,Number of Islands,https://leetcode.com/problems/number-of-islands,"Given an m x n 2D binary grid grid which represents a map of '1's (land) and '0's (water), return the number of islands.

An island is surrounded by water and is formed by connecting adjacent lands horizontally or vertically. You may assume all four edges of the grid are all surrounded by water.","['depth-first-search', 'breadth-first-search', 'union-find']",Medium,8303,241,2077622,1034093,"[""Surrounded Regions"", ""Walls and Gates"", ""Number of Islands II"", ""Number of Connected Components in an Undirected Graph"", ""Number of Distinct Islands"", ""Max Area of Island""]","[('dfs', 181), ('java', 124), ('python', 103), ('bfs', 91), ('c++', 66), ('cpp', 63), ('javascript', 52), ('python 3', 50), ('recursion', 40), ('union-find', 39), ('dfs simple solution', 35), ('java-solution', 25), ('graph', 23), ('python3', 23), ('solution', 23), ('union find', 18), ('c#', 17), ('golang', 17), ('easy-understanding', 15), ('recursive', 15), ('simple', 13), ('depth first search', 12), ('dfs solution', 10), ('swift', 10), ('unionfind', 10), ('golang-solution', 9), ('ruby', 9), ('cpp solution', 8), ('dfs-bfs', 8), ('easy', 8), ('easy-to-understand', 8), ('easy-undestand', 8), ('iterative', 8), ('c++ code', 6), ('easy-understand', 6), ('time-limit-exceeded', 6), ('breadth first search', 5), ('dfs recursive', 5), ('go-solution', 5), ('islands', 5), ('javascript solution', 5), ('js', 5), ('queue', 5), ('stack', 5), ('wrong-answer', 5), ('breath first search', 4), ('clean code', 4), ('dfs-recursive', 4), ('disjoint-set', 4), ('easytounderstand', 4), ('number of islands', 4), ('recusion', 4), ('rust', 4), ('simple solution', 4), ('video explanation', 4), ('accepted', 3), ('backtracking', 3), ('best-submission', 3), ('breadth-first-search', 3), ('comments', 3), ('constant-space', 3), ('csharp', 3), ('dp', 3), ('explained', 3), ('fast', 3), ('fast and simple', 3), ('java ac solution', 3), ('linear time', 3), ('matrix', 3), ('python2', 3), ('simple clear c++ solution', 3), ('#dfs', 2), ('0ms', 2), ('2d-array', 2), ('2d-dsu', 2), ('beats 100', 2), ('bfs python', 2), ('bfs simple solution', 2), ('bug', 2), ('c-dfs', 2), ('c++11', 2), ('commented', 2), ('concepts', 2), ('connected components', 2), ('constant space', 2), ('cpp easy', 2), ('depth-first search', 2), ('dfs-iterative', 2), ('dfs-non-recursive', 2), ('dfs-topdown', 2), ('dictionary', 2), ('discrete set union', 2), ('disjoint sets', 2), ('doubts', 2), ('dsu', 2), ('dynamic-programming', 2), ('easy to understand', 2), ('explanation', 2), ('explanation of logic', 2), ('explanations', 2), ('fastest', 2), ('flood fill', 2), ('go', 2), ('graph traversal', 2), ('improve', 2), ('in-place', 2), ('javascrip', 2), ('memory-limit-exceeded', 2), ('one pass solution', 2), ('reccursion', 2), ('recursive-dfs', 2), ('runtime-error', 2), ('short', 2), ('solution-sharing-cpp', 2), ('stacks', 2), ('swift5', 2), ('test-case', 2), ('time complexity', 2), ('tle', 2), ('traversal', 2), ('undirected', 2), ('well-explained', 2), ('#c++', 1), ('#easy-understanding', 1), ('#javascript', 1), ('#recursion', 1), ('100 memory', 1), ('100 speed', 1), ('1ms', 1), ('1ms runtime', 1), ('amazon', 1), ('beating-100-submission', 1), ('beginer', 1), ('beginner', 1), ('beginnerfriendly', 1), ('best', 1), ('bfs tle', 1), ('bloomberg', 1), ('bsf', 1), ('c', 1), ('c++ easy to understand', 1), ('c++ recursion', 1), ('c++ solution', 1), ('class design', 1), ('clean', 1), ('clean-code', 1), ('clustering', 1), ('code comments', 1), ('comments-added', 1), ('constant memory', 1), ('deep-first-search', 1), ('depth first', 1), ('depth first traversal', 1), ('depth-first-search', 1), ('detail', 1), ('dfs-with-prunning', 1), ('dis', 1), ('disjoint set', 1), ('disjoint-sets', 1), ('dps', 1), ('dshah14', 1), ('dynamic programming', 1), ('easiest', 1), ('easy-solition', 1), ('easy-solution', 1), ('efficient', 1), ('es6', 1), ('facebook', 1), ('faster than 100', 1), ('follow-up', 1), ('for-loop', 1), ('full-explanation', 1), ('funny', 1), ('gayorgy', 1), ('glitch', 1), ('go lang', 1), ('go-lang', 1), ('google', 1), ('google interview question', 1), ('graph theory', 1), ('grid', 1), ('hashset', 1), ('help me', 1), ('help needed', 1), ('issue', 1), ('iterative bfs python', 1), ('iterative-dfs', 1), ('iteratively', 1), ('java recursion', 1), ('java simple', 1), ('java solution', 1), ('javasccript', 1), ('javascript recursive', 1), ('js javascript', 1), ('kotlin', 1), ('kotlinvim', 1), ('label propagation', 1), ('leetchadcode', 1), ('linear-complexity', 1), ('lyft', 1), ('matrices', 1), ('matrix-search', 1), ('meiyaowen', 1), ('merge-find', 1), ('mn', 1), ('no recursion', 1), ('nonrecursive', 1), ('not union find', 1), ('noted', 1), ('novel approach', 1), ('number-of-islands', 1), ('numberofisland', 1), ('o-n', 1), ('omn', 1), ('optimal', 1), ('optimization', 1), ('optimized', 1), ('output-limit-exceeded', 1), ('path compression', 1), ('php', 1), ('php solution', 1), ('pseudocode', 1), ('pyhton 3', 1), ('pytho3', 1), ('python 2', 1), ('python dfs', 1), ('python iterative bfs', 1), ('pythonpython3', 1), ('queues', 1), ('recursion palindrome', 1), ('recursive easy', 1), ('recursive solution', 1), ('recursively', 1), ('region-growing', 1), ('row-by-row-scanning', 1), ('run-time-error', 1), ('set-union', 1), ('sets', 1), ('share-solution', 1), ('simplesolution', 1), ('sink', 1), ('slow-performance', 1), ('solution c++', 1), ('solution-share', 1), ('solved', 1), ('space complexity', 1), ('stack-over-flow', 1), ('stackoverflow', 1), ('surrounded-regions', 1), ('testcase-wrong', 1), ('theory', 1), ('time-complexity', 1), ('tle cases', 1), ('traverse-a-graph', 1), ('tuple', 1), ('typescript', 1), ('union', 1), ('union by rank', 1), ('visualization', 1), ('with documentation', 1), ('with explanation', 1)]"
199,Binary Tree Right Side View,https://leetcode.com/problems/binary-tree-right-side-view,"Given the root of a binary tree, imagine yourself standing on the right side of it, return the values of the nodes you can see ordered from top to bottom.","['tree', 'depth-first-search', 'breadth-first-search', 'recursion', 'queue']",Medium,3825,204,778345,441212,"[""Populating Next Right Pointers in Each Node"", ""Boundary of Binary Tree""]","[('bfs', 199), ('java', 116), ('python', 91), ('cpp', 86), ('c++', 81), ('level-order-traversal', 75), ('dfs', 69), ('queue', 58), ('python 3', 54), ('recursion', 42), ('javascript', 31), ('easy-understanding', 26), ('binary-tree', 23), ('python3', 22), ('java-solution', 21), ('iterative', 15), ('breadth first search', 14), ('accepted', 13), ('recursive', 13), ('solution', 13), ('c++ code', 11), ('easy-to-understand', 11), ('swift', 11), ('tree', 11), ('c#', 10), ('golang', 10), ('simple', 10), ('cpp solution', 9), ('easy-understand', 9), ('easy', 8), ('level order traversal', 8), ('dfs simple solution', 7), ('ruby', 7), ('tree-traversal', 7), ('binary tree', 6), ('breadth first traversal', 6), ('breadth-first-search', 6), ('easiest', 6), ('easy to understand', 6), ('preorder traversal', 6), ('preorder-traversal', 6), ('simple solution', 6), ('cpp easy', 5), ('deque', 5), ('easy-undestand', 5), ('explained', 5), ('video-explanation', 5), ('0ms', 4), ('bfs simple solution', 4), ('dfs-tree', 4), ('fast and simple', 4), ('go-solution', 4), ('golang-solution', 4), ('hashmap', 4), ('javascript solution', 4), ('level order', 4), ('recurision', 4), ('recursively', 4), ('wrong-answer', 4), ('100 speed', 3), ('bfs python', 3), ('breath first search', 3), ('c', 3), ('clean code', 3), ('dfs recursive', 3), ('easytounderstand', 3), ('facebook', 3), ('fast', 3), ('go', 3), ('iteratve-recursive', 3), ('level-order', 3), ('pre-order', 3), ('queue-approach', 3), ('right-view', 3), ('rightview', 3), ('runtime-error', 3), ('rust', 3), ('short', 3), ('simple clear c++ solution', 3), ('stack', 3), ('#recursion', 2), ('100', 2), ('100 faster', 2), ('bfs java', 2), ('binary tree traversal', 2), ('breath-first', 2), ('clean', 2), ('comments added', 2), ('concise', 2), ('consice', 2), ('defaultdict', 2), ('depth-first-search', 2), ('dfs solution', 2), ('dfs traversal', 2), ('dfs-recursive', 2), ('divideconquer', 2), ('faster than 100.00', 2), ('fastest', 2), ('inordertraversal', 2), ('interview', 2), ('iteration', 2), ('java ac solution', 2), ('javascript recursive', 2), ('linear time', 2), ('python bfs', 2), ('python2', 2), ('recusion', 2), ('right view of binary tree', 2), ('scala', 2), ('short code', 2), ('simplest', 2), ('solution-python', 2), ('trees', 2), ('understanding', 2), ('works-on-my-machine', 2), ('#candobetter', 1), ('#dfs', 1), ('#inorder', 1), ('#java', 1), ('#javascript', 1), ('0', 1), ('100 beat', 1), ('100 faster runtime', 1), ('100 runtime', 1), ('99 faster', 1), ('adrenaline09', 1), ('algorithms', 1), ('amazon interview', 1), ('awesome samriddhi', 1), ('beats 100 percent', 1), ('beginner', 1), ('beginner friendly', 1), ('beginnerfriendly', 1), ('best-submission', 1), ('bfs-java', 1), ('binary-search', 1), ('breadth first', 1), ('breadth-first', 1), ('bsf', 1), ('bst', 1), ('bst-right', 1), ('c code', 1), ('c-dfs', 1), ('c#-solution', 1), ('c++ iterative sol', 1), ('c++ recursion', 1), ('c++ solution', 1), ('c++11', 1), ('c++17', 1), ('clear', 1), ('closure', 1), ('code', 1), ('comment', 1), ('commented', 1), ('comments', 1), ('constant-space', 1), ('cplusplus', 1), ('cpp doubt', 1), ('csharp', 1), ('depth first search', 1), ('depth first traversal', 1), ('depth first-search', 1), ('description', 1), ('detailed thinking step', 1), ('dfs simple', 1), ('dictionary c#', 1), ('dynamic programming', 1), ('dynamic-programming', 1), ('easily understood', 1), ('easysolution', 1), ('efficient', 1), ('efficient solution', 1), ('explaination', 1), ('explanation', 1), ('explanation of logic', 1), ('facebook phone interview', 1), ('fast 100', 1), ('fast-solution', 1), ('faster', 1), ('fastest solution', 1), ('functional programming', 1), ('global', 1), ('go lang', 1), ('go-solutiong', 1), ('hash table', 1), ('hashset', 1), ('help needed', 1), ('improve', 1), ('in-order-traversal', 1), ('inorder traversal', 1), ('input', 1), ('interview question', 1), ('intration', 1), ('intuitive', 1), ('intutive', 1), ('iterative-bfs', 1), ('iteratively', 1), ('itereative', 1), ('javascrip', 1), ('javscript', 1), ('js', 1), ('kotlin', 1), ('kotlinvim', 1), ('last-one-of-each-level', 1), ('less memory', 1), ('level', 1), ('list', 1), ('lol', 1), ('memory-limit-exceeded', 1), ('memory-limited-exceeded', 1), ('mrmagician', 1), ('non-recursion', 1), ('nullpointerexception', 1), ('php', 1), ('php solution', 1), ('precise', 1), ('preoder', 1), ('preorder', 1), ('python3.8', 1), ('pythonpython3', 1), ('queues', 1), ('recursive solution', 1), ('recusive', 1), ('ritik', 1), ('run-time-error', 1), ('runtime 0', 1), ('simpe', 1), ('simplest solution', 1), ('solution by python', 1), ('stacks', 1), ('straight-forward', 1), ('techbacker', 1), ('tesla', 1), ('testcase-wrong', 1), ('time-complexity', 1), ('topdown', 1), ('traversal', 1), ('traversal tree', 1), ('traverse', 1), ('tree traversal', 1), ('treemap', 1), ('visited array', 1)]"
198,House Robber,https://leetcode.com/problems/house-robber,"You are a professional robber planning to rob houses along a street. Each house has a certain amount of money stashed, the only constraint stopping you from robbing each of them is that adjacent houses have security systems connected and it will automatically contact the police if two adjacent houses were broken into on the same night.

Given an integer array nums representing the amount of money of each house, return the maximum amount of money you can rob tonight without alerting the police.",['dynamic-programming'],Medium,6933,195,1642641,710008,"[""Maximum Product Subarray"", ""House Robber II"", ""Paint House"", ""Paint Fence"", ""House Robber III"", ""Non-negative Integers without Consecutive Ones"", ""Coin Path"", ""Delete and Earn""]","[('dynamic programming', 244), ('dynamic-programming', 107), ('dp', 91), ('java', 85), ('cpp', 78), ('python', 77), ('c++', 74), ('javascript', 46), ('python 3', 42), ('solution', 32), ('memoization', 29), ('java-solution', 25), ('recursion', 20), ('easy-understanding', 18), ('constant-space', 16), ('python3', 15), ('golang', 14), ('easy-undestand', 12), ('cpp solution', 11), ('easy', 10), ('easy-understand', 9), ('explained', 9), ('linear time', 9), ('c++ code', 8), ('simple', 8), ('constant space', 7), ('iterative', 7), ('linear-time', 7), ('recursive', 7), ('dp-techqique', 6), ('easytounderstand', 6), ('golang-solution', 6), ('swift', 6), ('0ms', 5), ('c#', 5), ('go-solution', 5), ('ruby', 5), ('bottom up', 4), ('constant memory', 4), ('memoziation', 4), ('tabulation', 4), ('time-complexity', 4), ('#python', 3), ('accepted', 3), ('array', 3), ('beginnerfriendly', 3), ('bottom-up', 3), ('bottom-up-algorithm', 3), ('c', 3), ('comments', 3), ('cpp easy', 3), ('dp-programming', 3), ('easy to understand', 3), ('explained solution', 3), ('explanation', 3), ('explanations', 3), ('fast-solution', 3), ('house-robber', 3), ('javascript solution', 3), ('js', 3), ('kotlin', 3), ('linear', 3), ('recusion', 3), ('short', 3), ('simple clear c++ solution', 3), ('simple solution', 3), ('solution-python', 3), ('top down dp', 3), ('top-down', 3), ('100 speed', 2), ('4 lines', 2), ('c++ solution', 2), ('commented', 2), ('cp', 2), ('dp python', 2), ('dyanmic programming', 2), ('dynamicprogramming', 2), ('dynaminc programming', 2), ('explaination', 2), ('fast', 2), ('fast and simple', 2), ('go lang', 2), ('house robber', 2), ('java 8', 2), ('java ac solution', 2), ('kadane-algorithm', 2), ('kadanes algo', 2), ('kadanes algorithm', 2), ('linear time complexity', 2), ('one-liner', 2), ('optimal', 2), ('optimized', 2), ('recursion memoization', 2), ('recursive solution', 2), ('recursively', 2), ('rust', 2), ('simplest', 2), ('time complexity', 2), ('top-down dp', 2), ('topdown', 2), ('typescript', 2), ('video', 2), ('video-explanation', 2), ('wrong-answer', 2), ('#dp', 1), ('#dynamic-programming', 1), ('#easy-understand', 1), ('#easy-understanding', 1), ('#python3', 1), ('0ms-solution', 1), ('1 liner', 1), ('100', 1), ('100 faster', 1), ('100 space', 1), ('100-faster', 1), ('4ms', 1), ('6line', 1), ('amazon interview', 1), ('arrays', 1), ('avnish', 1), ('backtracking', 1), ('backward recursion', 1), ('beautiful', 1), ('beginners', 1), ('best', 1), ('best-solution', 1), ('bottom up dp', 1), ('bottoms-up', 1), ('bottomup', 1), ('branch and bound', 1), ('brute force', 1), ('bruteforce', 1), ('c++ dynamic programming', 1), ('c++ easy to understand', 1), ('c++ iterative sol', 1), ('c++11', 1), ('clean solution', 1), ('clear explanation', 1), ('closure', 1), ('commented code', 1), ('comments-added', 1), ('cpp soltuion', 1), ('csharp', 1), ('detailed explanation', 1), ('dfs', 1), ('divideconquer', 1), ('dp java', 1), ('dp made easy', 1), ('dp top down', 1), ('dshah14', 1), ('easy explanation', 1), ('easy undestanding', 1), ('easy-coding', 1), ('easy-to-understand', 1), ('easysolution', 1), ('easytoundersatand', 1), ('efficient solution', 1), ('error', 1), ('es6', 1), ('explanation of logic', 1), ('explanations4problem', 1), ('faster than 100.00', 1), ('fastest', 1), ('fastest solution', 1), ('fibonacci', 1), ('fibonacci-pattern', 1), ('for', 1), ('give stars and subscribe', 1), ('go', 1), ('goalng solution', 1), ('golf', 1), ('greedy', 1), ('help needed', 1), ('improve', 1), ('in-place', 1), ('inplace', 1), ('intutive', 1), ('iterative way', 1), ('itereative', 1), ('java solution', 1), ('javaaid', 1), ('javacript', 1), ('javasccript', 1), ('javascrip', 1), ('js javascript', 1), ('knapsack', 1), ('linear-complexity', 1), ('loops', 1), ('meiyaowen', 1), ('memo', 1), ('memoisation', 1), ('memorization', 1), ('memory optimized', 1), ('missing-test-case', 1), ('need-help', 1), ('no-recursive', 1), ('odd-even', 1), ('optimization', 1), ('peymannp', 1), ('photo', 1), ('pyhton', 1), ('python2', 1), ('question', 1), ('rajat', 1), ('readable', 1), ('recurision', 1), ('recursion formula', 1), ('recursive easy', 1), ('run-time-error', 1), ('runtimeerror', 1), ('scala', 1), ('self explanatory', 1), ('self-explanatory', 1), ('share-solution', 1), ('short code', 1), ('short solution', 1), ('simpe', 1), ('simple java solution', 1), ('simplesweet', 1), ('solution-cpp', 1), ('solution-sharing-c', 1), ('solution-sharing-cpp', 1), ('solution-sharing-python', 1), ('solved', 1), ('space', 1), ('space o1', 1), ('space-compexity', 1), ('state machine', 1), ('swap', 1), ('swapping', 1), ('sweet', 1), ('test-case', 1), ('three-lines', 1), ('time', 1), ('time-complexity n', 1), ('time-complexity-o', 1), ('time-limit-exceeded', 1), ('time-limit-exceeded-java', 1), ('tle', 1), ('top down', 1), ('top down approach', 1), ('tree pruning', 1), ('ultra easy', 1), ('unorderedmap', 1), ('updowndota', 1), ('upvote', 1), ('very fast', 1), ('video explaination', 1), ('visualization', 1), ('wrong output', 1), ('wrong-judge', 1), ('youtube', 1)]"
197,Rising Temperature,https://leetcode.com/problems/rising-temperature,"Table: Weather


+---------------+---------+
| Column Name   | Type    |
+---------------+---------+
| id            | int     |
| recordDate    | date    |
| temperature   | int     |
+---------------+---------+
id is the primary key for this table.
This table contains information about the temperature in a certain day.


 

Write an SQL query to find all dates' id with higher temperature compared to its previous dates (yesterday).

Return the result table in any order.

The query result format is in the following example:


Weather
+----+------------+-------------+
| id | recordDate | Temperature |
+----+------------+-------------+
| 1  | 2015-01-01 | 10          |
| 2  | 2015-01-02 | 25          |
| 3  | 2015-01-03 | 20          |
| 4  | 2015-01-04 | 30          |
+----+------------+-------------+

Result table:
+----+
| id |
+----+
| 2  |
| 4  |
+----+
In 2015-01-02, temperature was higher than the previous day (10 -> 25).
In 2015-01-04, temperature was higher than the previous day (20 -> 30).",[],Easy,522,262,380660,153425,[],"[('mysql', 25), ('sql', 11), ('datediff', 5), ('accepted', 4), ('lag', 4), ('self-join', 4), ('solution', 4), ('window function', 4), ('oracle', 3), ('dateadd', 2), ('incorrect-test-case', 2), ('ms sql server', 2), ('mssql', 2), ('simple', 2), ('subdate', 2), ('testcase-wrong', 2), ('90+', 1), ('chinese', 1), ('databases', 1), ('datepart', 1), ('easy-understand', 1), ('easy-undestand', 1), ('error', 1), ('extract', 1), ('improve', 1), ('mandarin', 1), ('ms-sql', 1), ('oracle sql', 1), ('postgresql', 1), ('runtime', 1), ('runtime-error', 1), ('selfjoin', 1), ('simple solution', 1), ('sql server', 1), ('test-case', 1), ('todays', 1), ('two-methods', 1), ('wrong-answer', 1)]"
196,Delete Duplicate Emails,https://leetcode.com/problems/delete-duplicate-emails,"Write a SQL query to delete all duplicate email entries in a table named Person, keeping only unique emails based on its smallest Id.


+----+------------------+
| Id | Email            |
+----+------------------+
| 1  | john@example.com |
| 2  | bob@example.com  |
| 3  | john@example.com |
+----+------------------+
Id is the primary key column for this table.


For example, after running your query, the above Person table should have the following rows:


+----+------------------+
| Id | Email            |
+----+------------------+
| 1  | john@example.com |
| 2  | bob@example.com  |
+----+------------------+


Note:

Your output is the whole Person table after executing your sql. Use delete statement.",[],Easy,563,835,326086,150926,[],"[('mysql', 23), ('wrong-answer', 5), ('sql', 4), ('solution', 3), ('database', 2), ('delete', 2), ('easy', 2), ('window function', 2), ('accepted', 1), ('chinese', 1), ('commented', 1), ('cool', 1), ('databasee', 1), ('deleteduplicates', 1), ('duple-email', 1), ('easiest', 1), ('easy-understanding', 1), ('easytounderstand', 1), ('error', 1), ('fast', 1), ('fast-solution', 1), ('great', 1), ('internal', 1), ('mandarin', 1), ('ms sql', 1), ('mssql', 1), ('oracle', 1), ('postgresql', 1), ('query', 1), ('question-not-clear', 1), ('satya', 1), ('schema', 1), ('self-join', 1), ('sharing', 1), ('t-sql', 1), ('tsql', 1), ('understandable', 1), ('video solution', 1), ('video-explanation', 1), ('youtube', 1)]"
195,Tenth Line,https://leetcode.com/problems/tenth-line,"Given a text file file.txt, print just the 10th line of the file.",[],Easy,193,261,189598,62132,[],"[('bash', 9), ('awk', 5), ('shell', 5), ('solution', 5), ('easiest', 2), ('sed', 2), ('simple', 2), ('bash-cut', 1), ('clear', 1), ('conditional-expression', 1), ('count', 1), ('grep', 1), ('head', 1), ('linux', 1), ('one line', 1), ('regexp', 1), ('self-explanatory', 1), ('simple solution', 1), ('simplest', 1)]"
194,Transpose File,https://leetcode.com/problems/transpose-file,"Given a text file file.txt, transpose its content.

You may assume that each row has the same number of columns, and each field is separated by the ' ' character.",[],Medium,80,211,64631,15782,[],"[('bash', 9), ('awk', 7), ('solution', 4), ('shell', 3), ('python', 2), ('works-on-my-machine', 2), ('confuse-answer', 1), ('idea', 1), ('memory-limit-exceeded', 1), ('perl', 1), ('run-time-error', 1), ('simple and elegant', 1), ('space-complexity', 1), ('wrong-answer', 1)]"
193,Valid Phone Numbers,https://leetcode.com/problems/valid-phone-numbers,"Given a text file file.txt that contains a list of phone numbers (one per line), write a one-liner bash script to print all valid phone numbers.

You may assume that a valid phone number must appear in one of the following two formats: (xxx) xxx-xxxx or xxx-xxx-xxxx. (x means a digit)

You may also assume each line in the text file must not contain leading or trailing white spaces.",[],Easy,193,528,177001,44952,[],"[('bash', 5), ('accepted', 3), ('egrep', 3), ('awk', 2), ('regexp', 2), ('shell', 2), ('solution', 2), ('cat', 1), ('easiest', 1), ('easy-understand', 1), ('easy-understanding', 1), ('expression', 1), ('grep', 1), ('numbers', 1), ('pattern', 1), ('phone', 1), ('regex', 1), ('regular', 1), ('regular-expression-matching', 1), ('valid', 1), ('wrong', 1)]"
192,Word Frequency,https://leetcode.com/problems/word-frequency,"Write a bash script to calculate the frequency of each word in a text file words.txt.

For simplicity sake, you may assume:


	words.txt contains only lowercase characters and space ' ' characters.
	Each word must consist of lowercase characters only.
	Words are separated by one or more whitespace characters.",[],Medium,263,182,123077,31402,"[""Top K Frequent Elements""]","[('awk', 13), ('sort', 6), ('pipes', 5), ('bash', 4), ('shell', 4), ('solution', 3), ('array', 2), ('uniq', 2), ('cat', 1), ('count', 1), ('documentation', 1), ('explained', 1), ('fast', 1), ('map', 1), ('sed', 1), ('shell-sort', 1), ('simple', 1), ('simple solution', 1), ('test-case', 1), ('tr', 1), ('word', 1), ('word-frequency', 1)]"
191,Number of 1 Bits,https://leetcode.com/problems/number-of-1-bits,"Write a function that takes an unsigned integer and returns the number of '1' bits it has (also known as the Hamming weight).

Note:


	Note that in some languages, such as Java, there is no unsigned integer type. In this case, the input will be given as a signed integer type. It should not affect your implementation, as the integer's internal binary representation is the same, whether it is signed or unsigned.
	In Java, the compiler represents the signed integers using 2's complement notation. Therefore, in",['bit-manipulation'],Easy,1460,636,899003,489802,"[""Reverse Bits"", ""Power of Two"", ""Counting Bits"", ""Binary Watch"", ""Hamming Distance"", ""Binary Number with Alternating Bits"", ""Prime Number of Set Bits in Binary Representation""]","[('java', 71), ('c++', 61), ('cpp', 47), ('bit manipulation', 45), ('python', 43), ('bit-manipulation', 29), ('solution', 24), ('javascript', 23), ('cpp solution', 15), ('python 3', 12), ('python3', 10), ('java-solution', 9), ('bit', 7), ('c', 7), ('c#', 7), ('easy-understanding', 7), ('explained', 7), ('wrong-answer', 7), ('accepted', 6), ('bitwise operation', 6), ('easy-to-understand', 5), ('easy-understand', 5), ('golang', 5), ('one-liner', 5), ('rust', 5), ('simple', 5), ('swift', 5), ('time-limit-exceeded', 5), ('bit masking', 4), ('bit-shift', 4), ('c++ solution', 4), ('1 line', 3), ('and operator', 3), ('bits', 3), ('c code', 3), ('easiest', 3), ('easy-undestand', 3), ('go', 3), ('number-of-1-bits', 3), ('recursion', 3), ('recursive', 3), ('testcase-wrong', 3), ('upvote', 3), ('video-explanation', 3), ('and', 2), ('bin', 2), ('bitwise operator', 2), ('c# solutions', 2), ('c++ code', 2), ('clear', 2), ('constant-space', 2), ('easy', 2), ('easy to understand', 2), ('easytounderstand', 2), ('fast and simple', 2), ('fast-solution', 2), ('gcc', 2), ('golang-solution', 2), ('hammingweight', 2), ('hashmap', 2), ('i want to get a star', 2), ('iterative', 2), ('javascript solution', 2), ('lookup', 2), ('oneline', 2), ('question', 2), ('rajawatbanna', 2), ('right-shift', 2), ('short', 2), ('simple solution', 2), ('solution-sharing-cpp', 2), ('table', 2), ('time-complexity', 2), ('trick', 2), ('typescript', 2), ('#solution', 1), ('0ms', 1), ('1 liner', 1), ('1-line', 1), ('100', 1), ('100 fast', 1), ('100 faster cpp', 1), ('100 faster runtime', 1), ('100 space', 1), ('100 speed', 1), ('191', 1), ('2 solutions', 1), ('3 methods', 1), ('adobe', 1), ('answer', 1), ('bit hacks', 1), ('bit operation', 1), ('bit shifting', 1), ('bitcount', 1), ('bitmanipulation', 1), ('bitmasking', 1), ('bitset', 1), ('bitwise', 1), ('bitwise operators', 1), ('built-in-function', 1), ('builtin', 1), ('c++14', 1), ('caching', 1), ('cheat', 1), ('cheating', 1), ('clarity', 1), ('clean', 1), ('clean code', 1), ('constant-time', 1), ('count', 1), ('counter', 1), ('cpp easy', 1), ('cpp with explanation', 1), ('csharp', 1), ('detailed', 1), ('detailed explanation', 1), ('easy code', 1), ('easy to understandd', 1), ('efficiency', 1), ('expalanation', 1), ('explain', 1), ('fast', 1), ('faster than 100.00', 1), ('fastest c++ solution', 1), ('follow-up', 1), ('for', 1), ('go lang', 1), ('go-solution', 1), ('hamming', 1), ('help needed', 1), ('improve', 1), ('int', 1), ('intutive', 1), ('iteratively', 1), ('java-8', 1), ('kernighans algorithm', 1), ('kotlinvim', 1), ('list-comprehension', 1), ('logarithm', 1), ('look-up-table', 1), ('lookuptable', 1), ('loop', 1), ('lsb', 1), ('minimalism', 1), ('mrmagician', 1), ('neat', 1), ('non-iterative', 1), ('numberof1bits', 1), ('oci', 1), ('one line', 1), ('optimal', 1), ('optimized', 1), ('oracle', 1), ('parallel', 1), ('parser', 1), ('php', 1), ('popcount', 1), ('precomputation', 1), ('pytyhon', 1), ('recusion', 1), ('reference', 1), ('ruby', 1), ('run-time-error', 1), ('runtime-error', 1), ('scalar', 1), ('self explanatory', 1), ('share-solution', 1), ('shift bit', 1), ('simple clear c++ solution', 1), ('simple-solution', 1), ('solution-cpp', 1), ('solution-share', 1), ('speed', 1), ('string', 1), ('swift5', 1), ('tail-call', 1), ('tail-recursion', 1), ('tail-recursive', 1), ('three-different-solutions', 1), ('timothy h chang', 1), ('ultra easy', 1), ('ultra simple', 1), ('weight', 1), ('while', 1), ('without-recursion', 1), ('works-on-my-machine', 1), ('wrong', 1), ('wrong answer', 1), ('wrong-test-cases', 1), ('x86', 1), ('yahoo', 1)]"
190,Reverse Bits,https://leetcode.com/problems/reverse-bits,"Reverse bits of a given 32 bits unsigned integer.

Note:


	Note that in some languages such as Java, there is no unsigned integer type. In this case, both input and output will be given as a signed integer type. They should not affect your implementation, as the integer's internal binary representation is the same, whether it is signed or unsigned.
	In Java, the compiler represents the signed integers using 2's complement notation. Therefore, in",['bit-manipulation'],Easy,1710,550,791701,339321,"[""Reverse Integer"", ""Number of 1 Bits""]","[('java', 57), ('cpp', 42), ('python', 40), ('c++', 33), ('solution', 32), ('bit manipulation', 25), ('bit-manipulation', 24), ('javascript', 20), ('python 3', 20), ('easy-understand', 15), ('reverse-bits', 10), ('simple', 10), ('c', 8), ('one-liner', 7), ('accepted', 6), ('bitwise', 6), ('easy', 6), ('bitwise operation', 5), ('golang', 5), ('python3', 5), ('wrong-answer', 5), ('easy-understanding', 4), ('easy-undestand', 4), ('java-solution', 4), ('bitmask', 3), ('bitwise-operators', 3), ('c code', 3), ('c#', 3), ('constant-space', 3), ('cpp solution', 3), ('cpp-solution', 3), ('easiest', 3), ('explained', 3), ('follow-up', 3), ('golang-solution', 3), ('ruby', 3), ('short', 3), ('simple solution', 3), ('xor', 3), ('1 liner', 2), ('100 speed', 2), ('1ms runtime', 2), ('bitset', 2), ('c++ code', 2), ('clean code', 2), ('easytounderstand', 2), ('fast', 2), ('go', 2), ('go lang', 2), ('improve', 2), ('one line', 2), ('performance', 2), ('shift operators', 2), ('solution-sharing-c', 2), ('swift', 2), ('#oneline', 1), ('#rust', 1), ('1 line', 1), ('1-line', 1), ('100 faster', 1), ('100 memory', 1), ('190', 1), ('2 line python solution', 1), ('4 approch', 1), ('amazon', 1), ('answer', 1), ('array', 1), ('best explaination', 1), ('bit', 1), ('bit manipulation.', 1), ('bit masking', 1), ('bit-shift', 1), ('bits', 1), ('bitshift', 1), ('c++ solution', 1), ('c++17', 1), ('cheating', 1), ('clean', 1), ('clear', 1), ('commented', 1), ('comments', 1), ('confused', 1), ('constant space', 1), ('constant-time', 1), ('cpp easy', 1), ('csharp', 1), ('divide and conquer', 1), ('easy peasy', 1), ('easy to understand', 1), ('easy understandcpp', 1), ('easy-implementation', 1), ('easysolution', 1), ('efficient', 1), ('efficient solution', 1), ('explanation', 1), ('explanatory comments', 1), ('f-strings', 1), ('fast and simple', 1), ('fuck noobs', 1), ('go-solution', 1), ('good variable names', 1), ('hardcode', 1), ('in-built function', 1), ('intuition', 1), ('intuitive', 1), ('intutive', 1), ('iterative', 1), ('iteratively', 1), ('java ac solution', 1), ('java bit-manipulation', 1), ('java solution', 1), ('javascrip', 1), ('javascript solution', 1), ('js', 1), ('key concept', 1), ('kotlin', 1), ('lists', 1), ('lookup', 1), ('mask', 1), ('math', 1), ('non-iterative', 1), ('not-working', 1), ('nvidia', 1), ('o1 time complexity', 1), ('one-line', 1), ('oneline', 1), ('overflow', 1), ('python2', 1), ('rajawatbanna', 1), ('reverse bits', 1), ('run-time-error', 1), ('rust', 1), ('scala', 1), ('self explanatory', 1), ('share-solution', 1), ('short code', 1), ('shortest', 1), ('simplest', 1), ('solution-explaining', 1), ('solution-python', 1), ('solution-share', 1), ('solution-sharing-cpp', 1), ('solution-sharing-python', 1), ('stl', 1), ('template', 1), ('test-case', 1), ('time-complexity', 1), ('time-limit-exceeded-java', 1), ('two-pointers', 1), ('typescript', 1), ('ultra simple', 1), ('upvote', 1), ('veryfast', 1), ('wrong-test-cases', 1), ('xjq', 1)]"
189,Rotate Array,https://leetcode.com/problems/rotate-array,"Given an array, rotate the array to the right by k steps, where k is non-negative.",['array'],Medium,4489,928,1844353,679163,"[""Rotate List"", ""Reverse Words in a String II""]","[('java', 103), ('python', 84), ('python 3', 53), ('javascript', 52), ('c++', 44), ('cpp', 40), ('solution', 29), ('python3', 21), ('wrong-answer', 21), ('constant-space', 18), ('simple', 16), ('easy-understanding', 13), ('golang', 12), ('java-solution', 12), ('works-on-my-machine', 12), ('constant space', 11), ('array', 9), ('c#', 9), ('easy', 9), ('rotate-array', 9), ('ruby', 9), ('swift', 9), ('reverse', 8), ('time-complexity', 8), ('in-place', 7), ('queue', 7), ('accepted', 6), ('c', 6), ('easy-understand', 6), ('javascript solution', 6), ('one-liner', 6), ('recursive', 6), ('rotate', 6), ('easy-undestand', 5), ('explained', 5), ('linear time', 5), ('reverse list', 5), ('run-time-error', 5), ('test-case', 5), ('cpp solution', 4), ('easy-to-understand', 4), ('go-solution', 4), ('golang-solution', 4), ('java ac solution', 4), ('linear-time', 4), ('list-slicing', 4), ('python2', 4), ('short', 4), ('stl', 4), ('swift5', 4), ('constant memory', 3), ('cpp easy', 3), ('csharp', 3), ('easy to understand', 3), ('easytounderstand', 3), ('explaination', 3), ('fast and simple', 3), ('iterative', 3), ('one-pass', 3), ('rotate array', 3), ('simple solution', 3), ('slicing', 3), ('solution-python', 3), ('swap', 3), ('time-limit-exceeded', 3), ('4-lines', 2), ('array functions', 2), ('c programming', 2), ('c++ code', 2), ('c++11', 2), ('c++14', 2), ('c++17', 2), ('clean code', 2), ('comments added', 2), ('cool', 2), ('cyclic replacements', 2), ('easiest', 2), ('easysolution', 2), ('explanation', 2), ('explanations', 2), ('fast-solution', 2), ('faster', 2), ('faster than 100.00', 2), ('go', 2), ('help needed', 2), ('inplace', 2), ('iteration', 2), ('list comprehension', 2), ('math', 2), ('php', 2), ('python3.8', 2), ('pythonic', 2), ('question', 2), ('reverse array', 2), ('reverselist', 2), ('scala', 2), ('solved', 2), ('temp', 2), ('testcase-wrong', 2), ('two-pointers', 2), ('video-explanation', 2), ('0ms', 1), ('100 faster', 1), ('100 memory', 1), ('100 space', 1), ('2-line', 1), ('2ms', 1), ('3 solutions', 1), ('4line', 1), ('5 solutions', 1), ('answer', 1), ('approach', 1), ('array nesting', 1), ('array-sort', 1), ('arrays', 1), ('beginnerfriendly', 1), ('beginners level', 1), ('best-submission', 1), ('bfs', 1), ('bit-manipulation', 1), ('bit-shift', 1), ('brute force', 1), ('brute-force', 1), ('bug', 1), ('bugs', 1), ('c code', 1), ('c++ easy to understand', 1), ('clean solution', 1), ('code', 1), ('collections', 1), ('commented', 1), ('compile-error', 1), ('complexity analysis', 1), ('concise', 1), ('consice', 1), ('constant-time', 1), ('cplusplus', 1), ('cpp doubt', 1), ('cpp-solution', 1), ('cycle', 1), ('deque', 1), ('different-oj-local', 1), ('doubt', 1), ('doubts', 1), ('easier to understand', 1), ('easy code', 1), ('easy solution', 1), ('easy to understant', 1), ('easy undestanding', 1), ('easyundersttanding', 1), ('efficient solution', 1), ('es6', 1), ('explained solution', 1), ('explanatory comments', 1), ('extra space', 1), ('extra-space', 1), ('fast', 1), ('faster than 99.66', 1), ('fastest', 1), ('follow-up', 1), ('gcd', 1), ('geeksforgeeks', 1), ('generator', 1), ('good variable names', 1), ('great', 1), ('help me', 1), ('images', 1), ('in place', 1), ('inplacemerge', 1), ('interesting', 1), ('intuitive', 1), ('issue', 1), ('iterative way', 1), ('iterator', 1), ('java solution', 1), ('javascrip', 1), ('js', 1), ('js javascript', 1), ('less memory', 1), ('linear seach', 1), ('list', 1), ('list-reverse', 1), ('list-slice', 1), ('loop method', 1), ('memory-efficient', 1), ('mrmagician', 1), ('no extra space', 1), ('one line', 1), ('one line solution', 1), ('one-loop', 1), ('oneliner', 1), ('optimal', 1), ('pointer', 1), ('pop', 1), ('problem understanding', 1), ('proofs', 1), ('pyhton', 1), ('python deque', 1), ('pythonpython3', 1), ('question-not-clear', 1), ('quite-slow', 1), ('rbegin', 1), ('readable', 1), ('rend', 1), ('reversal algorithm', 1), ('reversed', 1), ('reverseinteger', 1), ('right-shift', 1), ('rotate function', 1), ('rotation', 1), ('runtime-error', 1), ('rust', 1), ('shorter', 1), ('simpe', 1), ('simpler', 1), ('simplest', 1), ('slice operator', 1), ('solution by python', 1), ('solution-javascript', 1), ('solution-sharing-c', 1), ('solution-sharing-cpp', 1), ('solution-sharing-python', 1), ('space-complexity-1', 1), ('space-non', 1), ('split', 1), ('stacks', 1), ('stl algorithms', 1), ('structured code', 1), ('swapping', 1), ('test case generator', 1), ('test-case-validation', 1), ('test-cases', 1), ('time-limit-exceeded-java', 1), ('trick', 1), ('two', 1), ('two line', 1), ('two-lines', 1), ('understandable', 1), ('unshift', 1), ('upvote', 1), ('vector-operation', 1), ('vectors', 1), ('very-easy', 1), ('very-intuitive', 1), ('video', 1), ('video solution', 1), ('with comments', 1), ('wrong', 1), ('wrong answer', 1), ('wrong-execution-result', 1), ('youtube', 1)]"
188,Best Time to Buy and Sell Stock IV,https://leetcode.com/problems/best-time-to-buy-and-sell-stock-iv,"You are given an integer array prices where prices[i] is the price of a given stock on the ith day, and an integer k.

Find the maximum profit you can achieve. You may complete at most k transactions.

Note: You may not engage in multiple transactions simultaneously (i.e., you must sell the stock before you buy again).",['dynamic-programming'],Hard,2403,135,598149,180594,"[""Best Time to Buy and Sell Stock"", ""Best Time to Buy and Sell Stock II"", ""Best Time to Buy and Sell Stock III""]","[('dynamic programming', 33), ('dynamic-programming', 29), ('python', 25), ('cpp', 19), ('java', 18), ('dp', 17), ('python 3', 17), ('c++', 13), ('easy-understanding', 7), ('solution', 7), ('memoization', 6), ('python3', 6), ('dp-techqique', 4), ('easy-understand', 4), ('cpp solution', 3), ('golang', 3), ('greedy', 3), ('java-solution', 3), ('javascript', 3), ('ruby', 3), ('state-machine', 3), ('test-case', 3), ('0ms', 2), ('bug', 2), ('dyanmic programming', 2), ('easiest', 2), ('easy', 2), ('explained', 2), ('fast and simple', 2), ('pyhton', 2), ('recursion memoization', 2), ('recursive', 2), ('time-complexity', 2), ('time-limit-exceeded', 2), ('video-solution', 2), ('100 faster cpp', 1), ('1ms', 1), ('2d-dp', 1), ('accepted', 1), ('accepted solution', 1), ('awesome samriddhi', 1), ('best-submission', 1), ('bug in leetcode', 1), ('bug-test-case', 1), ('c', 1), ('c#', 1), ('c++ solution', 1), ('c++11', 1), ('clean', 1), ('clear', 1), ('concise', 1), ('consice', 1), ('constant-space', 1), ('cpp easy', 1), ('documented', 1), ('dp bottom up', 1), ('dp made easy', 1), ('dp pattern', 1), ('dp-table', 1), ('easy understanding', 1), ('easy-to-understand', 1), ('easy-understsand', 1), ('easytounderstand', 1), ('explaines', 1), ('explanations', 1), ('fast', 1), ('give stars and subscribe', 1), ('go', 1), ('heap', 1), ('help me', 1), ('high performance', 1), ('idiomatic', 1), ('improve', 1), ('iterative', 1), ('kadane-algorithm', 1), ('knapsack', 1), ('kotlin', 1), ('linkedlist', 1), ('lrucache', 1), ('max-heap', 1), ('memoisation', 1), ('memoized', 1), ('memoziation', 1), ('merge', 1), ('priority queue', 1), ('quick', 1), ('readable', 1), ('recurision', 1), ('recurrence', 1), ('recursion', 1), ('recursive approach', 1), ('recursive dp', 1), ('recursive solution', 1), ('ritik', 1), ('rolling array', 1), ('rust', 1), ('selection', 1), ('short code', 1), ('simple clear c++ solution', 1), ('solution-share', 1), ('solution-sharing-cpp', 1), ('sort', 1), ('space optimized', 1), ('space-complexity', 1), ('space-optimized', 1), ('stack', 1), ('stock', 1), ('swift', 1), ('tabulation', 1), ('top down dp', 1), ('typescript', 1), ('video-explanation', 1), ('well commented', 1), ('wrong output', 1), ('wrong-answer', 1), ('wrong-answer-java', 1), ('zea7ot', 1)]"
187,Repeated DNA Sequences,https://leetcode.com/problems/repeated-dna-sequences,"The DNA sequence is composed of a series of nucleotides abbreviated as 'A', 'C', 'G', and 'T'.


	For example, ""ACGAATTCCG"" is a DNA sequence.


When studying DNA, it is useful to identify repeated sequences within the DNA.

Given a string s that represents a DNA sequence, return all the 10-letter-long sequences (substrings) that occur more than once in a DNA molecule. You may return the answer in any order.","['hash-table', 'bit-manipulation']",Medium,1191,334,498093,208043,[],"[('python', 34), ('java', 30), ('cpp', 27), ('solution', 24), ('c++', 21), ('hashmap', 13), ('memory-limit-exceeded', 12), ('simple', 12), ('bit-manipulation', 10), ('easy-understand', 9), ('accepted', 8), ('javascript', 8), ('python 3', 7), ('short', 5), ('cpp solution', 4), ('set', 4), ('swift', 4), ('wrong-answer', 4), ('bit manipulation', 3), ('c#', 3), ('easy-understanding', 3), ('hash', 3), ('hash table', 3), ('hashing', 3), ('improve', 3), ('java-solution', 3), ('python3', 3), ('simplest', 3), ('substring', 3), ('test-case', 3), ('time-limit-exceeded', 3), ('bitmap', 2), ('dictionary', 2), ('dictonary', 2), ('dna', 2), ('easy-undestand', 2), ('hashset', 2), ('hashtable', 2), ('map', 2), ('rolling hash', 2), ('rolling-hash', 2), ('ruby', 2), ('sliding-window', 2), ('slidingwindow', 2), ('testcase-wrong', 2), ('time-complexity', 2), ('works-on-my-machine', 2), ('youtube', 2), ('#hashmap', 1), ('#javascript', 1), ('0ms', 1), ('100 memory', 1), ('100 speed', 1), ('ac solution', 1), ('algorithms', 1), ('algosexplained', 1), ('beating-100-submission', 1), ('bitset', 1), ('bitwise', 1), ('bitwise operation', 1), ('bitwise operator', 1), ('bitwise operators', 1), ('brute force to optimal', 1), ('c', 1), ('c programming', 1), ('c++ code', 1), ('c++ hash', 1), ('c++ solution', 1), ('clarification', 1), ('clear', 1), ('comment', 1), ('compile-error', 1), ('concise', 1), ('concise-solution', 1), ('counting', 1), ('cpp easy', 1), ('easy to code', 1), ('easy-to-understand', 1), ('easysolution', 1), ('error', 1), ('es6', 1), ('explained solution', 1), ('fast and simple', 1), ('golang', 1), ('golang-solution', 1), ('hash-function', 1), ('incorrect-test-case', 1), ('input', 1), ('iteration', 1), ('iterative', 1), ('js', 1), ('linear-complexity', 1), ('linklist', 1), ('linq', 1), ('map entry', 1), ('missing-test-case', 1), ('msd', 1), ('one-pass', 1), ('oneline', 1), ('optimization', 1), ('overlap', 1), ('php', 1), ('pointer', 1), ('python2', 1), ('python3.8', 1), ('pythonic', 1), ('pythonpython3', 1), ('question', 1), ('quick sort', 1), ('rabin karp algorithm', 1), ('readable', 1), ('repeated', 1), ('rollinghash', 1), ('run-time-error', 1), ('scala', 1), ('sequence', 1), ('sets', 1), ('simple clear c++ solution', 1), ('sliding window', 1), ('solution-cpp', 1), ('solution-explaining', 1), ('solution-javascript', 1), ('solution-python', 1), ('solution-sharing-c', 1), ('string', 1), ('string comparison', 1), ('string compression', 1), ('string-searching', 1), ('strings manipulation', 1), ('stringview', 1), ('suffix-array', 1), ('swift5', 1), ('trie', 1), ('trie-tree', 1), ('tries in c++', 1), ('unorderedmap', 1), ('video', 1), ('video explaination', 1), ('video explanation', 1), ('video solution', 1), ('video-explanation', 1), ('well-explained', 1), ('window-sliding', 1)]"
185,Department Top Three Salaries,https://leetcode.com/problems/department-top-three-salaries,"The Employee table holds all employees. Every employee has an Id, and there is also a column for the department Id.


+----+-------+--------+--------------+
| Id | Name  | Salary | DepartmentId |
+----+-------+--------+--------------+
| 1  | Joe   | 85000  | 1            |
| 2  | Henry | 80000  | 2            |
| 3  | Sam   | 60000  | 2            |
| 4  | Max   | 90000  | 1            |
| 5  | Janet | 69000  | 1            |
| 6  | Randy | 85000  | 1            |
| 7  | Will  | 70000  | 1            |
+----+-------+--------+--------------+


The Department table holds all departments of the company.


+----+----------+
| Id | Name     |
+----+----------+
| 1  | IT       |
| 2  | Sales    |
+----+----------+


Write a SQL query to find employees who earn the top three salaries in each of the department. For the above tables, your SQL query should return the following rows (order of rows does not matter).


+------------+----------+--------+
| Department | Employee | Salary |
+------------+----------+--------+
| IT         | Max      | 90000  |
| IT         | Randy    | 85000  |
| IT         | Joe      | 85000  |
| IT         | Will     | 70000  |
| Sales      | Henry    | 80000  |
| Sales      | Sam      | 60000  |
+------------+----------+--------+


Explanation:

In IT department, Max earns the highest salary, both Randy and Joe earn the second highest salary, and Will earns the third highest salary. There are only two employees in the Sales department, Henry earns the highest salary while Sam earns the second highest salary.",[],Hard,739,156,278053,111719,[],"[('mysql', 31), ('sql', 14), ('dense rank', 8), ('solution', 6), ('window function', 6), ('wrong-answer', 6), ('cte', 3), ('denserank', 3), ('java', 3), ('join', 3), ('testcase-wrong', 3), ('oracle sql', 2), ('run-time-error', 2), ('works-on-my-machine', 2), ('accepted', 1), ('accepted solution', 1), ('analytic function', 1), ('department-top-three-salaries', 1), ('dept-top-3-salaries', 1), ('elegant solution', 1), ('hard', 1), ('hoadm', 1), ('joins', 1), ('ms-sql', 1), ('mssql', 1), ('mssqlserver', 1), ('oracle', 1), ('rank', 1), ('simplest', 1), ('sql server', 1), ('sqlite', 1), ('subquery', 1), ('t-sql', 1), ('tutorial', 1), ('video solution', 1), ('video-explanation', 1)]"
184,Department Highest Salary,https://leetcode.com/problems/department-highest-salary,"The Employee table holds all employees. Every employee has an Id, a salary, and there is also a column for the department Id.


+----+-------+--------+--------------+
| Id | Name  | Salary | DepartmentId |
+----+-------+--------+--------------+
| 1  | Joe   | 70000  | 1            |
| 2  | Jim   | 90000  | 1            |
| 3  | Henry | 80000  | 2            |
| 4  | Sam   | 60000  | 2            |
| 5  | Max   | 90000  | 1            |
+----+-------+--------+--------------+


The Department table holds all departments of the company.


+----+----------+
| Id | Name     |
+----+----------+
| 1  | IT       |
| 2  | Sales    |
+----+----------+


Write a SQL query to find employees who have the highest salary in each of the departments. For the above tables, your SQL query should return the following rows (order of rows does not matter).


+------------+----------+--------+
| Department | Employee | Salary |
+------------+----------+--------+
| IT         | Max      | 90000  |
| IT         | Jim      | 90000  |
| Sales      | Henry    | 80000  |
+------------+----------+--------+


Explanation:

Max and Jim both have the highest salary in the IT department and Henry has the highest salary in the Sales department.",[],Medium,644,135,363098,149442,"[""Highest Grade For Each Student""]","[('mysql', 18), ('sql', 9), ('solution', 6), ('accepted', 4), ('mssql', 4), ('wrong-answer', 4), ('oracle', 3), ('join', 2), ('oracle sql', 2), ('#cte', 1), ('#mysql', 1), ('bug report', 1), ('dense rank', 1), ('easiest', 1), ('easy-understand', 1), ('easy-understanding', 1), ('group by', 1), ('partition', 1), ('ranking', 1), ('satya', 1), ('solution-sharing-sql', 1), ('subquery', 1), ('testcase-wrong', 1), ('time-limit-exceeded', 1), ('video solution', 1), ('video-explanation', 1), ('window function', 1), ('works-on-my-machine', 1), ('youtube', 1)]"
183,Customers Who Never Order,https://leetcode.com/problems/customers-who-never-order,"Suppose that a website contains two tables, the Customers table and the Orders table. Write a SQL query to find all customers who never order anything.

Table: Customers.


+----+-------+
| Id | Name  |
+----+-------+
| 1  | Joe   |
| 2  | Henry |
| 3  | Sam   |
| 4  | Max   |
+----+-------+


Table: Orders.


+----+------------+
| Id | CustomerId |
+----+------------+
| 1  | 3          |
| 2  | 1          |
+----+------------+


Using the above tables as example, return the following:


+-----------+
| Customers |
+-----------+
| Henry     |
| Max       |
+-----------+",[],Easy,533,56,396709,229141,[],"[('mysql', 30), ('sql', 11), ('solution', 4), ('accepted', 3), ('leftjoin', 3), ('easy', 2), ('mssql', 2), ('oracle', 2), ('accepted solution', 1), ('chinese', 1), ('clean code', 1), ('cool', 1), ('database', 1), ('easiest', 1), ('easy sloution', 1), ('easy-understand', 1), ('easytounderstand', 1), ('fast', 1), ('great', 1), ('java', 1), ('join', 1), ('left-join', 1), ('ms sql server', 1), ('ms-sql', 1), ('msql', 1), ('my sql', 1), ('no join', 1), ('not exists', 1), ('not in', 1), ('not-in', 1), ('notin', 1), ('null', 1), ('one-liner', 1), ('oracle sql', 1), ('problem-discussion', 1), ('satya', 1), ('simple solution', 1), ('sql server', 1), ('subquery', 1), ('tutorial', 1), ('video explanation', 1), ('video solution', 1), ('video-explanation', 1), ('youtube', 1)]"
182,Duplicate Emails,https://leetcode.com/problems/duplicate-emails,"Write a SQL query to find all duplicate emails in a table named Person.


+----+---------+
| Id | Email   |
+----+---------+
| 1  | a@b.com |
| 2  | c@d.com |
| 3  | a@b.com |
+----+---------+


For example, your query should return the following for the above table:


+---------+
| Email   |
+---------+
| a@b.com |
+---------+


Note: All emails are in lowercase.",[],Easy,644,35,365537,238513,[],"[('mysql', 20), ('sql', 13), ('having', 7), ('solution', 6), ('groupby', 5), ('count', 4), ('mssql', 4), ('easy', 3), ('group by', 3), ('database', 2), ('easiest', 2), ('msql', 2), ('not working', 2), ('self-join', 2), ('simple', 2), ('subquery', 2), ('wrong-answer', 2), ('chinese', 1), ('cool', 1), ('discussion', 1), ('distinct', 1), ('doubt', 1), ('doubts', 1), ('duplicate', 1), ('duplicate emails', 1), ('duplicates', 1), ('easy to understand', 1), ('easy-peasy', 1), ('easytounderstand', 1), ('email', 1), ('explain', 1), ('fast', 1), ('faster', 1), ('great', 1), ('help', 1), ('help needed', 1), ('improve', 1), ('join', 1), ('left join', 1), ('less than', 1), ('max', 1), ('min', 1), ('minus', 1), ('ms sql server', 1), ('ms-sql', 1), ('oracle', 1), ('oracle sql', 1), ('runtime-error', 1), ('satya', 1), ('t-sql', 1), ('thanksgiving', 1), ('understandable', 1)]"
181,Employees Earning More Than Their Managers,https://leetcode.com/problems/employees-earning-more-than-their-managers,"The Employee table holds all employees including their managers. Every employee has an Id, and there is also a column for the manager Id.


+----+-------+--------+-----------+
| Id | Name  | Salary | ManagerId |
+----+-------+--------+-----------+
| 1  | Joe   | 70000  | 3         |
| 2  | Henry | 80000  | 4         |
| 3  | Sam   | 60000  | NULL      |
| 4  | Max   | 90000  | NULL      |
+----+-------+--------+-----------+


Given the Employee table, write a SQL query that finds out employees who earn more than their managers. For the above table, Joe is the only employee who earns more than his manager.


+----------+
| Employee |
+----------+
| Joe      |
+----------+",[],Easy,812,99,389289,238765,[],"[('mysql', 23), ('sql', 11), ('simple', 5), ('sql server', 4), ('database', 3), ('easy-understand', 3), ('oracle', 3), ('self-join', 3), ('easy to understand', 2), ('inner-join', 2), ('joins', 2), ('simple solution', 2), ('solution', 2), ('chinese', 1), ('clear', 1), ('comments-added', 1), ('earn', 1), ('easy', 1), ('easy-understanding', 1), ('employee', 1), ('fast', 1), ('faster', 1), ('greater', 1), ('greaterthan', 1), ('inner join', 1), ('join', 1), ('joining', 1), ('left joint', 1), ('manager', 1), ('more', 1), ('mrmagician', 1), ('ms-sql', 1), ('msql', 1), ('mssql', 1), ('ojerror', 1), ('oracle sql', 1), ('postgresql', 1), ('runtime-error', 1), ('salary', 1), ('satya', 1), ('selfjoin', 1), ('short', 1), ('t-sql', 1), ('upvote', 1), ('video explanation', 1), ('video-explanation', 1), ('where + and', 1), ('wrong-answer', 1)]"
180,Consecutive Numbers,https://leetcode.com/problems/consecutive-numbers,"Table: Logs


+-------------+---------+
| Column Name | Type    |
+-------------+---------+
| id          | int     |
| num         | varchar |
+-------------+---------+
id is the primary key for this table.


 

Write an SQL query to find all numbers that appear at least three times consecutively.

Return the result table in any order.

The query result format is in the following example:

 


Logs table:
+----+-----+
| Id | Num |
+----+-----+
| 1  | 1   |
| 2  | 1   |
| 3  | 1   |
| 4  | 2   |
| 5  | 1   |
| 6  | 2   |
| 7  | 2   |
+----+-----+

Result table:
+-----------------+
| ConsecutiveNums |
+-----------------+
| 1               |
+-----------------+
1 is the only number that appears consecutively for at least three times.",[],Medium,595,137,297593,127331,[],"[('mysql', 19), ('sql', 11), ('oracle', 6), ('self-join', 5), ('sql server', 5), ('join', 4), ('consecutive-numbers', 3), ('lag', 3), ('solution', 3), ('#mysql', 2), ('#windowfunction', 2), ('lead', 2), ('ms-sql', 2), ('oracle sql', 2), ('window function', 2), ('bigquestion', 1), ('database', 1), ('easy', 1), ('explanation', 1), ('explanations', 1), ('faster than 99.41', 1), ('fastest', 1), ('gaps-and-islands', 1), ('improve', 1), ('left', 1), ('medium', 1), ('ms sql server', 1), ('msql', 1), ('mssql', 1), ('run-time-error', 1), ('satya', 1), ('selfjoin', 1), ('simple', 1), ('t-sql', 1), ('time-limit-exceeded', 1), ('tsql', 1), ('user defined variables', 1), ('works-on-my-machine', 1)]"
179,Largest Number,https://leetcode.com/problems/largest-number,"Given a list of non-negative integers nums, arrange them such that they form the largest number.

Note: The result may be very large, so you need to return a string instead of an integer.",['sort'],Medium,2996,315,798518,247014,[],"[('java', 44), ('cpp', 34), ('c++', 27), ('solution', 24), ('sort', 24), ('python', 23), ('comparator', 17), ('python 3', 17), ('javascript', 16), ('sorting', 9), ('accepted', 8), ('c#', 8), ('golang', 8), ('easy-understanding', 7), ('java-solution', 7), ('easy-understand', 6), ('proof', 6), ('run-time-error', 6), ('cpp solution', 5), ('easy', 5), ('swift', 5), ('wrong-answer', 5), ('explained', 4), ('python3', 4), ('quicksort', 4), ('short', 4), ('string', 4), ('self-defined-comp', 3), ('simplest', 3), ('bubble sort', 2), ('c++ code', 2), ('custom sorting', 2), ('easytounderstand', 2), ('go-solution', 2), ('golang-solution', 2), ('help', 2), ('improve', 2), ('kotlin', 2), ('merge sort', 2), ('merge-sort', 2), ('radix-sort', 2), ('recursion', 2), ('ruby', 2), ('self-explanatory', 2), ('simple', 2), ('simple solution', 2), ('stringbuilder', 2), ('test-case', 2), ('testcase-wrong', 2), ('typescript', 2), ('valid', 2), ('well-commented', 2), ('works-on-my-machine', 2), ('0ms-4ms', 1), ('100 speed', 1), ('4ms', 1), ('5 liner', 1), ('arrays', 1), ('beats 100', 1), ('beginner friendly', 1), ('best', 1), ('buckets', 1), ('c', 1), ('c++ solution', 1), ('c++11', 1), ('c++14', 1), ('chinese', 1), ('clean', 1), ('clean code', 1), ('compare', 1), ('compare-function', 1), ('constant space', 1), ('cpp-solution', 1), ('csharp', 1), ('custom comparator', 1), ('custom-sorting', 1), ('customcomparetor', 1), ('defaultdict', 1), ('different solutions', 1), ('different-oj-local', 1), ('discussion', 1), ('divide and conquer', 1), ('dont', 1), ('easy code', 1), ('easy to understand', 1), ('easy-to-understand', 1), ('easy-undestand', 1), ('edge-case', 1), ('edgecases', 1), ('error', 1), ('esay-understand', 1), ('example', 1), ('expained', 1), ('explained solution', 1), ('explanation', 1), ('explanation with code', 1), ('fast', 1), ('fast-solution', 1), ('faster', 1), ('fastest', 1), ('functional programming', 1), ('functools', 1), ('generalised-solution', 1), ('hard problems', 1), ('hints', 1), ('in-place', 1), ('incorrect-test-case', 1), ('interview', 1), ('interviews', 1), ('iterative', 1), ('java easy to understand', 1), ('javascript solution', 1), ('js', 1), ('lambda', 1), ('lambda function', 1), ('largest-number', 1), ('largestnumber', 1), ('lexicographical order', 1), ('linear time complexity', 1), ('linq', 1), ('math', 1), ('mathematic', 1), ('memory efficient', 1), ('memory-limit-exceeded', 1), ('mergesort', 1), ('microsoft', 1), ('multiset', 1), ('nlogn', 1), ('one-liner', 1), ('optimization process', 1), ('output-limit-exceeded', 1), ('php', 1), ('priority queue', 1), ('question-not-clear', 1), ('quick-sort', 1), ('rajat', 1), ('readable', 1), ('regex', 1), ('runtime', 1), ('runtime-error', 1), ('rust', 1), ('scala', 1), ('share-solution', 1), ('short and simple', 1), ('slicing', 1), ('solution c++', 1), ('solution-explaining', 1), ('solution-sharing-c', 1), ('solution-sharing-cpp', 1), ('solutionsharing', 1), ('somal', 1), ('sort method', 1), ('sort-function', 1), ('sorted', 1), ('sorted array', 1), ('space complexity', 1), ('speed', 1), ('stream', 1), ('string comparison', 1), ('string-comparison', 1), ('string-operation', 1), ('strings', 1), ('strings manipulation', 1), ('stringstream', 1), ('swap-in-place', 1), ('time complexity', 1), ('total order', 1), ('trie', 1), ('two-different-solutions', 1), ('understand', 1), ('understandable', 1), ('vector', 1), ('video solution', 1), ('video-explanation', 1), ('xjq', 1)]"
178,Rank Scores,https://leetcode.com/problems/rank-scores,"Write a SQL query to rank scores. If there is a tie between two scores, both should have the same ranking. Note that after a tie, the next ranking number should be the next consecutive integer value. In other words, there should be no ""holes"" between ranks.


+----+-------+
| Id | Score |
+----+-------+
| 1  | 3.50  |
| 2  | 3.65  |
| 3  | 4.00  |
| 4  | 3.85  |
| 5  | 4.00  |
| 6  | 3.65  |
+----+-------+


For example, given the above Scores table, your query should generate the following report (order by highest score):


+-------+---------+
| score | Rank    |
+-------+---------+
| 4.00  | 1       |
| 4.00  | 1       |
| 3.85  | 2       |
| 3.65  | 3       |
| 3.65  | 3       |
| 3.50  | 4       |
+-------+---------+


Important Note: For MySQL solutions, to escape reserved words used as column names, you can use an apostrophe before and after the keyword. For example `Rank`.",[],Medium,921,170,298112,153178,[],"[('mysql', 23), ('sql', 14), ('solution', 6), ('denserank', 4), ('mssql', 4), ('oracle', 4), ('oracle sql', 4), ('window function', 3), ('#mysql', 2), ('dense rank', 2), ('easy-understanding', 2), ('ms sql server', 2), ('rank', 2), ('simple', 2), ('bug', 1), ('database', 1), ('dbms', 1), ('easy-understand', 1), ('easysolution', 1), ('medium', 1), ('ms-sql', 1), ('msql', 1), ('oneline', 1), ('order', 1), ('query', 1), ('ranking', 1), ('sql server', 1), ('trythis', 1), ('video interview', 1), ('video solution', 1), ('video-explanation', 1), ('youtube', 1)]"
177,Nth Highest Salary,https://leetcode.com/problems/nth-highest-salary,"Write a SQL query to get the nth highest salary from the Employee table.


+----+--------+
| Id | Salary |
+----+--------+
| 1  | 100    |
| 2  | 200    |
| 3  | 300    |
+----+--------+


For example, given the above Employee table, the nth highest salary where n = 2 is 200. If there is no nth highest salary, then the query should return null.


+------------------------+
| getNthHighestSalary(2) |
+------------------------+
| 200                    |
+------------------------+",[],Medium,621,468,478812,161378,[],"[('mysql', 26), ('sql', 12), ('ms sql server', 9), ('solution', 8), ('accepted', 6), ('mssql', 6), ('salary', 4), ('sql server', 4), ('window function', 4), ('dense rank', 3), ('highest', 3), ('ms-sql', 3), ('nth', 3), ('oracle', 3), ('oracle sql', 3), ('ms sql', 2), ('mssqlserver', 2), ('nth highest salary', 2), ('run-time-error', 2), ('tsql', 2), ('177. nth highest salary', 1), ('accepted solution', 1), ('analytic function', 1), ('database', 1), ('denserank', 1), ('easy to understand', 1), ('easy-implementation', 1), ('easy-to-understand', 1), ('easy-undestand', 1), ('explanation with logic', 1), ('functions', 1), ('improve', 1), ('inconsistent performance', 1), ('inner query', 1), ('limit', 1), ('postgres', 1), ('rank', 1), ('scoring errors', 1), ('solutionsharing', 1), ('t-sql', 1), ('test-case', 1), ('video solution', 1), ('wrong-answer', 1), ('youtube', 1)]"
176,Second Highest Salary,https://leetcode.com/problems/second-highest-salary,"Write a SQL query to get the second highest salary from the Employee table.


+----+--------+
| Id | Salary |
+----+--------+
| 1  | 100    |
| 2  | 200    |
| 3  | 300    |
+----+--------+


For example, given the above Employee table, the query should return 200 as the second highest salary. If there is no second highest salary, then the query should return null.


+---------------------+
| SecondHighestSalary |
+---------------------+
| 200                 |
+---------------------+",[],Easy,1126,556,964453,324354,[],"[('mysql', 30), ('sql', 10), ('accepted', 8), ('simple solution', 6), ('oracle', 5), ('second-highest-salary', 5), ('sql server', 4), ('database', 3), ('fast-solution', 3), ('mssql', 3), ('salary', 3), ('easy-understanding', 2), ('ms-sql', 2), ('myssql', 2), ('solution', 2), ('subquery', 2), ('t-sql', 2), ('wrong-answer', 2), ('accepted solution', 1), ('analytic function', 1), ('bootsrap', 1), ('chinese', 1), ('codedecks', 1), ('cool', 1), ('count', 1), ('debugging', 1), ('easy', 1), ('easy-understand', 1), ('easy-undestand', 1), ('error', 1), ('fast', 1), ('fast and simple', 1), ('great', 1), ('highest', 1), ('html', 1), ('identify error', 1), ('ifnull', 1), ('java', 1), ('max', 1), ('mistake', 1), ('ms sql server', 1), ('msql', 1), ('nth highest salary', 1), ('null', 1), ('rank', 1), ('responsivebreakpoints', 1), ('second', 1), ('secondmaxsalary', 1), ('server', 1), ('simple', 1), ('simplest', 1), ('solution-cpp', 1), ('step by step', 1), ('table', 1), ('visualization', 1), ('where', 1)]"
175,Combine Two Tables,https://leetcode.com/problems/combine-two-tables,"Table: Person


+-------------+---------+
| Column Name | Type    |
+-------------+---------+
| PersonId    | int     |
| FirstName   | varchar |
| LastName    | varchar |
+-------------+---------+
PersonId is the primary key column for this table.


Table: Address


+-------------+---------+
| Column Name | Type    |
+-------------+---------+
| AddressId   | int     |
| PersonId    | int     |
| City        | varchar |
| State       | varchar |
+-------------+---------+
AddressId is the primary key column for this table.


 

Write a SQL query for a report that provides the following information for each person in the Person table, regardless if there is an address for each of those people:


FirstName, LastName, City, State",[],Easy,1193,159,558190,362920,"[""Employee Bonus""]","[('mysql', 19), ('sql', 13), ('leftjoin', 11), ('join', 4), ('easy', 2), ('joins', 2), ('left-join', 2), ('oracle', 2), ('chinese', 1), ('clear', 1), ('combinetables', 1), ('commentary', 1), ('database', 1), ('easy to understand', 1), ('easy-understanding', 1), ('explanation', 1), ('fast-solution', 1), ('inner-join', 1), ('left join', 1), ('left joint', 1), ('left outer join', 1), ('ms-sql', 1), ('mssql', 1), ('my sql', 1), ('question-not-clear', 1), ('rightjoin', 1), ('select', 1), ('simple solution', 1), ('solution', 1), ('solutionsharing', 1), ('sql server', 1), ('t-sql', 1), ('template', 1), ('uppercase', 1), ('using', 1), ('video explanation', 1), ('video-explanation', 1), ('visualization', 1), ('youtube', 1)]"
174,Dungeon Game,https://leetcode.com/problems/dungeon-game,"The demons had captured the princess and imprisoned her in the bottom-right corner of a dungeon. The dungeon consists of m x n rooms laid out in a 2D grid. Our valiant knight was initially positioned in the top-left room and must fight his way through dungeon to rescue the princess.

The knight has an initial health point represented by a positive integer. If at any point his health point drops to 0 or below, he dies immediately.

Some of the rooms are guarded by demons (represented by negative integers), so the knight loses health upon entering these rooms; other rooms are either empty (represented as 0) or contain magic orbs that increase the knight's health (represented by positive integers).

To reach the princess as quickly as possible, the knight decides to move only rightward or downward in each step.

Return the knight's minimum initial health so that he can rescue the princess.

Note that any room can contain threats or power-ups, even the first room the knight enters and the bottom-right room where the princess is imprisoned.","['binary-search', 'dynamic-programming']",Hard,2294,48,374431,125432,"[""Unique Paths"", ""Minimum Path Sum"", ""Cherry Pickup""]","[('dynamic programming', 54), ('dynamic-programming', 34), ('java', 30), ('cpp', 23), ('python', 22), ('dp', 20), ('memoization', 14), ('solution', 13), ('c++', 12), ('python 3', 11), ('wrong-answer', 10), ('binary-search', 6), ('javascript', 6), ('accepted', 5), ('dfs', 5), ('bottom up', 4), ('dungeon', 4), ('easy-understand', 4), ('javascript solution', 4), ('test-case', 4), ('c#', 3), ('constant-space', 3), ('cpp solution', 3), ('easy-undestand', 3), ('recursion', 3), ('testcase-wrong', 3), ('backtracking', 2), ('bottom-up-algorithm', 2), ('c++ code', 2), ('diagram', 2), ('easy-understanding', 2), ('explained', 2), ('improve', 2), ('java ac solution', 2), ('javascrip', 2), ('priority queue', 2), ('recursive', 2), ('ruby', 2), ('simple', 2), ('swift', 2), ('time-limit-exceeded', 2), ('top-down dp', 2), ('video', 2), ('works-on-my-machine', 2), ('#174', 1), ('100 speed', 1), ('accepted solution', 1), ('algorithms', 1), ('beginnerfriendly', 1), ('bellman-ford', 1), ('best-submission', 1), ('bfs', 1), ('binary search', 1), ('bottom-up', 1), ('c++ dynamic programming', 1), ('comments-added', 1), ('constant space', 1), ('dfs with memo', 1), ('dijkstra', 1), ('dijkstras algorithm', 1), ('divideconquer', 1), ('dp bottom up', 1), ('dp-techqique', 1), ('dungeon game', 1), ('easiest', 1), ('easy', 1), ('easy to understand', 1), ('easy-solition', 1), ('easy-solution', 1), ('easy-to-understand', 1), ('easysolution', 1), ('easytounderstand', 1), ('error', 1), ('explanation', 1), ('explanation of logic', 1), ('explanation with code', 1), ('fast', 1), ('faster than 100.00', 1), ('go lang', 1), ('hint', 1), ('in-place', 1), ('intuition', 1), ('java easy to understand', 1), ('java solution', 1), ('java-solution', 1), ('js', 1), ('maze', 1), ('memory optimized', 1), ('missing-test-case', 1), ('naivesolution', 1), ('o1', 1), ('performance', 1), ('python2', 1), ('python3', 1), ('quadratic time', 1), ('short', 1), ('shortest', 1), ('simple clear c++ solution', 1), ('solution-sharing-cpp', 1), ('space-efficient', 1), ('submission', 1), ('swift5', 1), ('tabulation', 1), ('three-different-solutions', 1), ('time limit exceeded', 1), ('time-complexity', 1), ('top down', 1), ('top down dp', 1), ('top-down', 1), ('video explanation', 1), ('video-explanation', 1), ('well explained', 1), ('well-explained', 1), ('why', 1)]"
173,Binary Search Tree Iterator,https://leetcode.com/problems/binary-search-tree-iterator,"Implement the BSTIterator class that represents an iterator over the in-order traversal of a binary search tree (BST):


	BSTIterator(TreeNode root) Initializes an object of the BSTIterator class. The root of the BST is given as part of the constructor. The pointer should be initialized to a non-existent number smaller than any element in the BST.
	boolean hasNext() Returns true if there exists a number in the traversal to the right of the pointer, otherwise returns false.
	int next() Moves the pointer to the right, then returns the number at the pointer.


Notice that by initializing the pointer to a non-existent smallest number, the first call to next() will return the smallest element in the BST.

You may assume that next() calls will always be valid. That is, there will be at least a next number in the in-order traversal when next() is called.","['stack', 'tree', 'design']",Medium,3635,319,664652,404585,"[""Binary Tree Inorder Traversal"", ""Flatten 2D Vector"", ""Zigzag Iterator"", ""Peeking Iterator"", ""Inorder Successor in BST"", ""Binary Search Tree Iterator II""]","[('java', 64), ('javascript', 33), ('stack', 33), ('python', 31), ('inorder traversal', 29), ('cpp', 27), ('python 3', 24), ('c++', 21), ('inorder-traversal', 16), ('java-solution', 11), ('queue', 11), ('solution', 11), ('binary-tree', 10), ('morris-traversal', 9), ('stacks', 9), ('golang', 8), ('inorder', 8), ('python3', 8), ('c#', 7), ('constant-space', 7), ('cpp solution', 7), ('dfs', 7), ('binary search tree', 6), ('binary-search-tree', 6), ('recursion', 6), ('easy-understanding', 5), ('generator', 5), ('stack-based', 5), ('time-complexity', 5), ('bst', 4), ('deque', 4), ('golang-solution', 4), ('iterative', 4), ('iterator', 4), ('simple solution', 4), ('easy-understand', 3), ('go', 3), ('javascript solution', 3), ('simple', 3), ('test-case', 3), ('vector', 3), ('wrong-answer', 3), ('accepted', 2), ('bst-iterator', 2), ('c++11', 2), ('constant time', 2), ('easy', 2), ('easy-to-understand', 2), ('easy-undestand', 2), ('es6', 2), ('fast-solution', 2), ('go-solution', 2), ('input', 2), ('java ac solution', 2), ('js', 2), ('kotlin', 2), ('memory-limit-exceeded', 2), ('morris traversal', 2), ('recurision', 2), ('recursively', 2), ('ruby', 2), ('rust', 2), ('scala', 2), ('short', 2), ('swift', 2), ('tree-traversal', 2), ('while-loop', 2), ('#cpp', 1), ('#javascript', 1), ('#queue', 1), ('#stack', 1), ('0ms', 1), ('173', 1), ('algorithms', 1), ('amazon', 1), ('answer', 1), ('arraylist', 1), ('awesome samriddhi', 1), ('beats 100', 1), ('best', 1), ('binary-search', 1), ('bstmutation', 1), ('c', 1), ('c++ code', 1), ('c++ recursive solution', 1), ('c++ solution', 1), ('cache', 1), ('clean', 1), ('clean code', 1), ('clean solution', 1), ('commented', 1), ('comments', 1), ('constant', 1), ('constant-time', 1), ('cpp easy', 1), ('cpp short solution', 1), ('crispygang', 1), ('csharp', 1), ('cursor', 1), ('dfs solution', 1), ('dfs-in-order', 1), ('dfs-iterative', 1), ('doubly linked list', 1), ('easiest', 1), ('easiest solution', 1), ('easy-implementation', 1), ('easysolution', 1), ('explained', 1), ('explanation', 1), ('explicit stack', 1), ('facebook', 1), ('fast and simple', 1), ('faster', 1), ('functional', 1), ('functional programming', 1), ('generator-expression', 1), ('generators', 1), ('go lang', 1), ('golf', 1), ('help', 1), ('improve', 1), ('in order', 1), ('in-order', 1), ('in-order-traversal', 1), ('in-place', 1), ('inorder iterative', 1), ('inordertraversal', 1), ('inordertraverse', 1), ('inorderusingstack', 1), ('inplace', 1), ('intuitive', 1), ('iteratively', 1), ('iterators', 1), ('itereative', 1), ('keep it simple', 1), ('kotlinvim', 1), ('linkedlist', 1), ('list', 1), ('morris-inorder-traversal', 1), ('nested', 1), ('non-recursive', 1), ('o1 space', 1), ('o1 time', 1), ('oop', 1), ('partial inorder', 1), ('performance', 1), ('php', 1), ('preorder-traversal', 1), ('python deque', 1), ('recursive', 1), ('recursive easy', 1), ('recusion', 1), ('ritik', 1), ('runtime-error', 1), ('simpe', 1), ('simplest', 1), ('solution-sharing-python', 1), ('space o1', 1), ('space-complexity', 1), ('stack using bst', 1), ('swift5', 1), ('tailrec', 1), ('testcase-wrong', 1), ('this', 1), ('traversal', 1), ('tree', 1), ('typescript', 1), ('typescript javascript', 1), ('updowndota', 1), ('video', 1), ('video explanation', 1), ('virtual machine', 1), ('weird', 1), ('yield', 1), ('yield return', 1), ('youtube', 1)]"
172,Factorial Trailing Zeroes,https://leetcode.com/problems/factorial-trailing-zeroes,"Given an integer n, return the number of trailing zeroes in n!.

Follow up: Could you write a solution that works in logarithmic time complexity?",['math'],Easy,1281,1395,660264,256637,"[""Number of Digit One"", ""Preimage Size of Factorial Zeroes Function""]","[('c++', 41), ('python', 33), ('java', 32), ('cpp', 26), ('math', 18), ('python 3', 18), ('javascript', 13), ('solution', 13), ('python3', 11), ('recursion', 8), ('cpp solution', 7), ('0ms', 6), ('easy', 6), ('easy-understanding', 6), ('explanation', 5), ('java-solution', 5), ('recursive', 5), ('simple solution', 5), ('factorial trailing zeroes', 4), ('golang', 4), ('maths', 4), ('simple', 4), ('0ms runtime', 3), ('accepted', 3), ('constant-space', 3), ('cpp easy', 3), ('easiest', 3), ('factorial', 3), ('fast and simple', 3), ('faster than 100.00', 3), ('logarithmic time', 3), ('one line', 3), ('one-liner', 3), ('test-case', 3), ('100 speed', 2), ('c++11', 2), ('easy-understand', 2), ('easy-undestand', 2), ('explanation of logic', 2), ('fast', 2), ('golang-solution', 2), ('iterative', 2), ('js', 2), ('logn', 2), ('math-solution', 2), ('oneline', 2), ('ruby', 2), ('solution-sharing-cpp', 2), ('time-complexity', 2), ('time-limit-exceeded', 2), ('trailingzeros', 2), ('#factorial', 1), ('#java #easy-understand', 1), ('#javascript', 1), ('#python', 1), ('#python3', 1), ('#trailing zeros', 1), ('100', 1), ('172', 1), ('8ms', 1), ('accepted solution', 1), ('algorithms', 1), ('beginners', 1), ('best-submission', 1), ('binary search', 1), ('bottom-up', 1), ('by-zero-error', 1), ('c#', 1), ('c++ code', 1), ('c++14', 1), ('clean code', 1), ('combination', 1), ('complexity', 1), ('different-oj-local', 1), ('easy undestanding', 1), ('easytounderstand', 1), ('efficient', 1), ('explained', 1), ('explained solution', 1), ('fast-solution', 1), ('faster than 95.46', 1), ('fasterthan100', 1), ('fastest', 1), ('fastest solution', 1), ('floor', 1), ('geometric sequence', 1), ('go-solution', 1), ('improve', 1), ('incorrect', 1), ('incorrect-test-case', 1), ('intuitive', 1), ('intution', 1), ('iterative approch', 1), ('iterative way', 1), ('javascrip', 1), ('javascript solution', 1), ('less space than 100.00', 1), ('linear', 1), ('linear time', 1), ('log', 1), ('long', 1), ('mathematical', 1), ('mathematics', 1), ('multiple-ways', 1), ('multiples', 1), ('new approach', 1), ('no extra memory', 1), ('oneliner', 1), ('optimal', 1), ('optimized', 1), ('overflow fix', 1), ('prime factorization', 1), ('python2', 1), ('recursion vs iteration', 1), ('recusion', 1), ('research', 1), ('reverse', 1), ('rust', 1), ('short', 1), ('short c++ code', 1), ('simple clear c++ solution', 1), ('solutions', 1), ('stl', 1), ('swift', 1), ('testcase-wrong', 1), ('thought-process', 1), ('top-down', 1), ('trailing zeros', 1), ('two-lines', 1), ('understanding', 1), ('video-explanation', 1), ('well-explained', 1)]"
171,Excel Sheet Column Number,https://leetcode.com/problems/excel-sheet-column-number,"Given a string columnTitle that represents the column title as appear in an Excel sheet, return its corresponding column number.

For example:


A -> 1
B -> 2
C -> 3
...
Z -> 26
AA -> 27
AB -> 28 
...",['math'],Easy,1658,199,655161,374994,"[""Excel Sheet Column Title""]","[('java', 83), ('python', 69), ('cpp', 56), ('python 3', 49), ('c++', 48), ('javascript', 31), ('easy-understanding', 20), ('solution', 20), ('java-solution', 18), ('easy-understand', 15), ('python3', 13), ('math', 12), ('one-liner', 11), ('easy-undestand', 10), ('golang', 10), ('simple', 10), ('c#', 7), ('cpp solution', 7), ('simple solution', 7), ('100 speed', 6), ('easy-to-understand', 6), ('explained', 6), ('explanation', 6), ('recursive', 6), ('ruby', 6), ('swift', 6), ('base-conversion', 5), ('c++ code', 5), ('golang-solution', 5), ('short', 5), ('ascii', 4), ('dictionary', 4), ('easy', 4), ('easytounderstand', 4), ('go', 4), ('js', 4), ('kotlin', 4), ('recursion', 4), ('string', 4), ('0ms', 3), ('algorithms', 3), ('c', 3), ('commented', 3), ('cpp easy', 3), ('easysolution', 3), ('excel sheet', 3), ('excelsheetcolumn', 3), ('fastest', 3), ('one line', 3), ('scala', 3), ('stl', 3), ('0ms runtime', 2), ('amazon', 2), ('clean', 2), ('clean code', 2), ('code-golf', 2), ('cpp-solution', 2), ('dynamic programming', 2), ('easy understand', 2), ('excel sheet column number', 2), ('explanation with code', 2), ('fast and simple', 2), ('fold', 2), ('formula based', 2), ('go-solution', 2), ('hashmap', 2), ('iterative', 2), ('math-solution', 2), ('rust', 2), ('speed', 2), ('stl algorithms', 2), ('typescript', 2), ('unicode', 2), ('1 line', 1), ('100 faster', 1), ('100 memory', 1), ('100 space', 1), ('36ms', 1), ('4 lines', 1), ('accepted solution', 1), ('array', 1), ('base', 1), ('base 26', 1), ('base26 counting', 1), ('basicmath', 1), ('beats 100', 1), ('beginner friendly', 1), ('best-submission', 1), ('bitmanipulation', 1), ('bitwise operation', 1), ('brute force', 1), ('c code', 1), ('c++ easy to understand', 1), ('c++ solution', 1), ('c++14', 1), ('c++17', 1), ('character', 1), ('clear', 1), ('comments', 1), ('common question', 1), ('compile', 1), ('compile-error', 1), ('constant-time', 1), ('counting', 1), ('counting system', 1), ('cpp doubt', 1), ('csharp', 1), ('decimal system', 1), ('easiest', 1), ('easy-peasy', 1), ('easy-solition', 1), ('easy-to-read', 1), ('efficient', 1), ('efficient solution', 1), ('enjoy', 1), ('error', 1), ('es6', 1), ('explained solution', 1), ('explanation with logic', 1), ('fast', 1), ('fast power', 1), ('fast-solution', 1), ('faster than 95.46', 1), ('fasterthan100', 1), ('fully explained', 1), ('functional programming', 1), ('go lang', 1), ('hash table', 1), ('indent', 1), ('interview', 1), ('intuitive', 1), ('iteration', 1), ('iteration vs recursion', 1), ('java ac solution', 1), ('java solution', 1), ('javascrip', 1), ('javascript solution', 1), ('keep it simple', 1), ('lexicographical order', 1), ('linear search', 1), ('linear time', 1), ('linear-space', 1), ('list comprehension', 1), ('logic', 1), ('logic explained', 1), ('logic explained clearly', 1), ('long long', 1), ('low-memory', 1), ('math solution', 1), ('math.pow', 1), ('mathematic', 1), ('mathematical solution', 1), ('meiyaowen', 1), ('microsoft', 1), ('modulo-arithmatic', 1), ('number system', 1), ('number-theory', 1), ('one-line', 1), ('only', 1), ('optimal', 1), ('ord', 1), ('overflow', 1), ('pow', 1), ('power', 1), ('pyhon', 1), ('python2', 1), ('python3.8', 1), ('pythonpython3', 1), ('recursion vs iteration', 1), ('recursive lines clean', 1), ('recusion', 1), ('reduce', 1), ('runtime-error', 1), ('self-explanatory', 1), ('series', 1), ('short c++ code', 1), ('short solution', 1), ('simple c', 1), ('simple logic', 1), ('simple-solution', 1), ('simplest', 1), ('solution-javascript', 1), ('solved', 1), ('space', 1), ('straight-forward', 1), ('summation', 1), ('swift5', 1), ('testcase-wrong', 1), ('three-lines', 1), ('two approaches', 1), ('understandable', 1), ('unexpected', 1), ('video solution', 1), ('video-explanation', 1), ('wrong-answer', 1)]"
169,Majority Element,https://leetcode.com/problems/majority-element,"Given an array nums of size n, return the majority element.

The majority element is the element that appears more than ⌊n / 2⌋ times. You may assume that the majority element always exists in the array.","['array', 'divide-and-conquer', 'bit-manipulation']",Easy,4980,260,1380571,832975,"[""Majority Element II"", ""Check If a Number Is Majority Element in a Sorted Array""]","[('java', 102), ('python', 77), ('cpp', 72), ('c++', 66), ('python 3', 61), ('javascript', 52), ('hashmap', 46), ('solution', 30), ('python3', 27), ('java-solution', 25), ('easy', 19), ('bit-manipulation', 13), ('cpp solution', 13), ('dictionary', 13), ('majority-element', 13), ('easy-understanding', 12), ('c#', 10), ('boyer-moore', 9), ('golang', 9), ('map', 9), ('constant space', 8), ('cpp easy', 8), ('easy-understand', 8), ('moorevoting', 8), ('short', 8), ('swift', 8), ('moore voting algorithm', 7), ('constant-space', 6), ('divideconquer', 6), ('easytounderstand', 6), ('javascript solution', 6), ('linear time', 6), ('ruby', 6), ('sort', 6), ('sorting', 6), ('array', 5), ('bit manipulation', 5), ('divide and conquer', 5), ('easy-to-understand', 5), ('easy-undestand', 5), ('fast', 5), ('fast and simple', 5), ('linear-time', 5), ('moore algorithm', 5), ('one-liner', 5), ('simple', 5), ('simple solution', 5), ('time-limit-exceeded', 5), ('counter', 4), ('dictionaries', 4), ('dictonary', 4), ('hash table', 4), ('iterative', 4), ('kotlin', 4), ('stl', 4), ('1ms', 3), ('brute force', 3), ('c++ code', 3), ('clean', 3), ('easiest', 3), ('explained', 3), ('hash', 3), ('moores voting', 3), ('optimal', 3), ('pyhton', 3), ('python3.8', 3), ('recursion', 3), ('rust', 3), ('solution-python', 3), ('voting algorithm', 3), ('#python', 2), ('brute-force', 2), ('c', 2), ('commented', 2), ('commentedcppcode', 2), ('constant memory', 2), ('count', 2), ('cpp-solution', 2), ('divide-and-conquer', 2), ('easy to understand', 2), ('easy-to-read', 2), ('enjoy', 2), ('faster', 2), ('fastest', 2), ('golang-solution', 2), ('linear', 2), ('linq', 2), ('list', 2), ('majority element', 2), ('missing-test-case', 2), ('o1', 2), ('python2', 2), ('quickselect', 2), ('sort-function', 2), ('test-case', 2), ('typescript', 2), ('understandable', 2), ('video', 2), ('video explanation', 2), ('video solution', 2), ('wrong-answer', 2), ('#c++', 1), ('#codegirl', 1), ('#collections', 1), ('#counter', 1), ('#cpp', 1), ('#dictionary', 1), ('#efficient', 1), ('#fastest', 1), ('#hashmaps', 1), ('#java', 1), ('#javascript', 1), ('#logic', 1), ('#moore-voting', 1), ('#python 3', 1), ('#python3', 1), ('100 faster', 1), ('100 speed', 1), ('algorithm', 1), ('algorithms', 1), ('api', 1), ('arrays', 1), ('begineer', 1), ('beginner friendly', 1), ('beginnerfriendly', 1), ('best-solution-ever', 1), ('binary-tree', 1), ('bit', 1), ('bitwise operation', 1), ('boyer moore voting algo', 1), ('bug', 1), ('c code', 1), ('c sharp', 1), ('c-sharp', 1), ('c++11', 1), ('c++14', 1), ('clean code', 1), ('clear', 1), ('collection', 1), ('collections', 1), ('comment', 1), ('comments', 1), ('compile', 1), ('compile-error', 1), ('concise-solution', 1), ('cpp stl', 1), ('csharp', 1), ('data structures', 1), ('defaultdict', 1), ('description-disambiguation', 1), ('dict', 1), ('different', 1), ('divide conquer', 1), ('divide-conquer', 1), ('drewbie', 1), ('dynamic programming', 1), ('dynamic-programming', 1), ('easy c++ function solution', 1), ('easy sloution', 1), ('easy understand', 1), ('easytoundersatand', 1), ('efficient', 1), ('elegant', 1), ('explanation', 1), ('explanations', 1), ('fast-solution', 1), ('faster than', 1), ('faster than 99.93', 1), ('fasterthan100', 1), ('feedback', 1), ('filter', 1), ('for loop', 1), ('fuck noobs', 1), ('go', 1), ('go-solution', 1), ('google', 1), ('hashing', 1), ('hashma', 1), ('hashmap java', 1), ('hashtable', 1), ('hasmap', 1), ('hustle', 1), ('immutable', 1), ('incorrect-test-case-python-bug', 1), ('interview-question', 1), ('ios', 1), ('iteration', 1), ('iterator', 1), ('java ac solution', 1), ('java solution', 1), ('javascrip', 1), ('js', 1), ('kotlinvim', 1), ('linear time complexity', 1), ('list-comprehension', 1), ('map in c++', 1), ('map-stl', 1), ('maps', 1), ('memo', 1), ('mergesort', 1), ('microsoft', 1), ('moores algorithm', 1), ('moores voting algorithm', 1), ('mostcommon', 1), ('mrmagician', 1), ('non-space', 1), ('nthelement', 1), ('o1 complexity', 1), ('objects', 1), ('one line', 1), ('one liner', 1), ('one pass', 1), ('one-line', 1), ('one-pass', 1), ('oneline', 1), ('optimal solution', 1), ('php', 1), ('php solution', 1), ('priority-queue', 1), ('python-index-dictionary', 1), ('pythonic', 1), ('pythonpython3', 1), ('question', 1), ('quick', 1), ('quick select', 1), ('quick-select', 1), ('rajawatbanna', 1), ('recursive', 1), ('run-time-error', 1), ('runtime', 1), ('scala', 1), ('sets', 1), ('shortcut', 1), ('shorter', 1), ('shortest', 1), ('simple python solution', 1), ('simplesolution', 1), ('solution-cpp', 1), ('solution-share', 1), ('solution-sharing-cpp', 1), ('solved two ways', 1), ('sorted', 1), ('sorted array', 1), ('space-efficient', 1), ('stack', 1), ('stl algorithms', 1), ('stream', 1), ('string', 1), ('time complexity', 1), ('treemap', 1), ('two-lines', 1), ('unique', 1), ('unordered map', 1), ('unordermap', 1), ('upvote', 1), ('vector-operation', 1), ('video explaination', 1), ('video-explanation', 1), ('voting', 1), ('weird-testcase', 1), ('without-recursion', 1), ('withoutassumption', 1), ('works-on-my-machine', 1), ('youtube', 1)]"
168,Excel Sheet Column Title,https://leetcode.com/problems/excel-sheet-column-title,"Given an integer columnNumber, return its corresponding column title as it appears in an Excel sheet.

For example:


A -> 1
B -> 2
C -> 3
...
Z -> 26
AA -> 27
AB -> 28 
...",['math'],Easy,1671,302,792351,253470,"[""Excel Sheet Column Number""]","[('java', 52), ('python', 42), ('cpp', 38), ('c++', 25), ('solution', 25), ('python 3', 18), ('javascript', 14), ('easy-understand', 11), ('easy-understanding', 10), ('python3', 9), ('cpp solution', 8), ('golang', 8), ('java-solution', 8), ('recursion', 7), ('ruby', 6), ('easy', 5), ('easy-undestand', 5), ('go', 4), ('iterative', 4), ('math', 4), ('recursive', 4), ('short', 4), ('simple', 4), ('string', 4), ('wrong-answer', 4), ('100 speed', 3), ('ascii', 3), ('c#', 3), ('clean code', 3), ('easy-to-understand', 3), ('excelsheetcolumn', 3), ('fast', 3), ('improve', 3), ('js', 3), ('mod', 3), ('100 faster cpp', 2), ('alphabet', 2), ('excel sheet', 2), ('explanation', 2), ('iteration', 2), ('javascript solution', 2), ('logarithmic time', 2), ('memory-limit-exceeded', 2), ('modulo', 2), ('oneline', 2), ('php', 2), ('runtime-error', 2), ('scala', 2), ('simple solution', 2), ('swift', 2), ('#java', 1), ('0ms', 1), ('100', 1), ('100 faster', 1), ('1ms', 1), ('6 lines', 1), ('algorithms', 1), ('algosexplained', 1), ('amazon', 1), ('base', 1), ('base-conversion', 1), ('best explaination', 1), ('best solution', 1), ('c', 1), ('c++ ac', 1), ('c++ code', 1), ('c++ solution', 1), ('c++11', 1), ('c++solution', 1), ('case', 1), ('code', 1), ('commented', 1), ('compile', 1), ('compile-error', 1), ('confuse-answer', 1), ('constant memory', 1), ('constant-space', 1), ('cpp doubt', 1), ('cpp easy', 1), ('cpp-solution', 1), ('csharp', 1), ('decimaltobinary', 1), ('detailed explanation', 1), ('dictionary', 1), ('divide', 1), ('divmod', 1), ('easy understand', 1), ('easytounderstand', 1), ('excel', 1), ('explaination', 1), ('explained', 1), ('explanation of logic', 1), ('fast-solution', 1), ('fastest solution', 1), ('go lang', 1), ('golang-solution', 1), ('hashmap', 1), ('iteration vs recursion', 1), ('js javascript', 1), ('lexicographical order', 1), ('linear time', 1), ('linear-time', 1), ('long devision', 1), ('mapping', 1), ('math solution', 1), ('modulo-arithmatic', 1), ('number', 1), ('numeral system', 1), ('offset', 1), ('one-line', 1), ('one-liner', 1), ('pattern', 1), ('php solution', 1), ('python2', 1), ('readable', 1), ('recursion vs iteration', 1), ('recursively', 1), ('simple python solution', 1), ('solution-javascript', 1), ('solution-sharing-python', 1), ('stack', 1), ('stl', 1), ('string builder', 1), ('string slicing', 1), ('string-operation', 1), ('tail-recursion', 1), ('typescript', 1), ('while-loop', 1), ('works-on-my-machine', 1), ('youtube', 1)]"
167,Two Sum II - Input array is sorted,https://leetcode.com/problems/two-sum-ii-input-array-is-sorted,"Given an array of integers numbers that is already sorted in ascending order, find two numbers such that they add up to a specific target number.

Return the indices of the two numbers (1-indexed) as an integer array answer of size 2, where 1 <= answer[0] < answer[1] <= numbers.length.

You may assume that each input would have exactly one solution and you may not use the same element twice.","['array', 'two-pointers', 'binary-search']",Easy,2605,725,1004396,560921,"[""Two Sum"", ""Two Sum IV - Input is a BST"", ""Two Sum Less Than K""]","[('two-pointers', 69), ('java', 52), ('c++', 45), ('python', 41), ('python 3', 36), ('binary-search', 33), ('cpp', 31), ('javascript', 28), ('python3', 19), ('golang', 18), ('two-pointer', 18), ('hashmap', 13), ('binary search', 12), ('java-solution', 11), ('two pointers', 11), ('go', 9), ('solution', 8), ('c', 7), ('cpp solution', 7), ('easy-understanding', 7), ('easytounderstand', 6), ('golang-solution', 6), ('swift', 6), ('c#', 5), ('dictonary', 5), ('go-solution', 5), ('kotlin', 5), ('simple', 5), ('100 speed', 4), ('binarysearch', 4), ('c++ code', 4), ('dictionary', 4), ('easy', 4), ('easy-undestand', 4), ('hashing', 4), ('ruby', 4), ('twopointer', 4), ('2 pointers', 3), ('hash table', 3), ('simple solution', 3), ('sorted array', 3), ('two sum ii', 3), ('0ms', 2), ('100 space', 2), ('array', 2), ('brute force', 2), ('c++11', 2), ('clean code', 2), ('commented', 2), ('constant memory', 2), ('cool', 2), ('detailed explanation', 2), ('easy understanding', 2), ('explained', 2), ('explanation of logic', 2), ('fast', 2), ('fast-solution', 2), ('js', 2), ('linear time', 2), ('map', 2), ('php', 2), ('python2', 2), ('python3.8', 2), ('pythonpython3', 2), ('rust', 2), ('scala', 2), ('solution-python', 2), ('solution-sharing-cpp', 2), ('two pointer', 2), ('two pointer approach', 2), ('two-sum', 2), ('vector', 2), ('#c++', 1), ('#codegirl', 1), ('#cpp', 1), ('#easysolution', 1), ('#efficient', 1), ('#fasterthan100percent', 1), ('#javascript', 1), ('#python', 1), ('#sort', 1), ('#two-sum', 1), ('#twopointerapproach', 1), ('100', 1), ('100 beat', 1), ('100 bst', 1), ('100 faster', 1), ('1ms', 1), ('2 pointer', 1), ('2pointers', 1), ('42.6mb memory', 1), ('99', 1), ('arrays', 1), ('best-solution', 1), ('bruteforce', 1), ('bug report', 1), ('c++ solution', 1), ('c++17', 1), ('clean', 1), ('clean code with comments', 1), ('clear-understanding', 1), ('commented code', 1), ('comments', 1), ('comments-added', 1), ('complexity', 1), ('concise-solution', 1), ('constant space', 1), ('constant-space', 1), ('cpp doubt', 1), ('cpp easy', 1), ('cpp-solution', 1), ('csharp', 1), ('dictionaries', 1), ('easiest', 1), ('easy undestanding', 1), ('easy-to-understand', 1), ('easy-understand', 1), ('easytoundersatand', 1), ('efficent approach', 1), ('efficient solution', 1), ('explanations', 1), ('fast and simple', 1), ('great', 1), ('hashtable', 1), ('java simple', 1), ('js javascript', 1), ('linear seach', 1), ('linear time complexity', 1), ('linear-search', 1), ('linear-time', 1), ('list manipulation', 1), ('nlogn', 1), ('oms', 1), ('one pass solution', 1), ('one-liner', 1), ('one-loop', 1), ('optimal', 1), ('perl', 1), ('pointer', 1), ('pointers', 1), ('pythonic', 1), ('question-not-clear', 1), ('recursive', 1), ('search', 1), ('sets', 1), ('simpe', 1), ('simple clear c++ solution', 1), ('solution-sharing-java', 1), ('stl', 1), ('stl algorithms', 1), ('traverse', 1), ('two pointer fast', 1), ('two pointer technique', 1), ('two sum', 1), ('two-pointer method', 1), ('twopointers', 1), ('twosumsortedarray', 1), ('understandable', 1), ('unordered map', 1), ('unorderedmap', 1), ('using hash map', 1), ('very-easy', 1)]"
166,Fraction to Recurring Decimal,https://leetcode.com/problems/fraction-to-recurring-decimal,"Given two integers representing the numerator and denominator of a fraction, return the fraction in string format.

If the fractional part is repeating, enclose the repeating part in parentheses.

If multiple answers are possible, return any of them.

It is guaranteed that the length of the answer string is less than 104 for all the given inputs.","['hash-table', 'math']",Medium,1124,2281,669440,150442,[],"[('python', 24), ('cpp', 15), ('java', 13), ('solution', 13), ('hashmap', 9), ('c++', 7), ('python 3', 6), ('test-case', 6), ('wrong-answer', 6), ('math', 5), ('dictionary', 4), ('python3', 4), ('swift', 4), ('accepted', 3), ('javascript', 3), ('map', 3), ('memory-limit-exceeded', 3), ('0ms', 2), ('amazon', 2), ('easy-understand', 2), ('easy-understanding', 2), ('explained', 2), ('fast-solution', 2), ('hash table', 2), ('improve', 2), ('python2', 2), ('run-time-error', 2), ('testcase-wrong', 2), ('unordered map', 2), ('0ms runtime', 1), ('100 faster', 1), ('166', 1), ('1ms', 1), ('accpected', 1), ('all-cases-passed', 1), ('asahiocean', 1), ('beating-100-submissions', 1), ('best-submission', 1), ('c#', 1), ('clarification', 1), ('clear explanation', 1), ('commented', 1), ('comments-added', 1), ('cpp easy', 1), ('cpp solution', 1), ('cpp-solution', 1), ('decimal', 1), ('easy', 1), ('efficient solution', 1), ('explanation of logic', 1), ('facebook phone interview', 1), ('faceebook', 1), ('fastest', 1), ('fraction', 1), ('fraction-to-recurring-decimal', 1), ('functional programming', 1), ('generalised-solution', 1), ('go-solution', 1), ('golang', 1), ('golang-solution', 1), ('google', 1), ('hash set', 1), ('hash-table', 1), ('hashtable', 1), ('java-solution', 1), ('javascrip', 1), ('map-stl', 1), ('microsoft', 1), ('microsoft-india', 1), ('overflow', 1), ('readable', 1), ('realloc-unable-to-be-used', 1), ('recurring', 1), ('recursion', 1), ('ruby', 1), ('runtime', 1), ('runtime-error', 1), ('scala', 1), ('solution-sharing-cpp', 1), ('stringbuilder', 1), ('stringstream', 1), ('test-case-bug', 1), ('uglycode', 1), ('unorderedmap', 1), ('unorderedset', 1), ('well-commented', 1), ('well-explained', 1)]"
165,Compare Version Numbers,https://leetcode.com/problems/compare-version-numbers,"Given two version numbers, version1 and version2, compare them.




Version numbers consist of one or more revisions joined by a dot '.'. Each revision consists of digits and may contain leading zeros. Every revision contains at least one character. Revisions are 0-indexed from left to right, with the leftmost revision being revision 0, the next revision being revision 1, and so on. For example 2.5.33 and 0.1 are valid version numbers.

To compare version numbers, compare their revisions in left-to-right order. Revisions are compared using their integer value ignoring any leading zeros. This means that revisions 1 and 001 are considered equal. If a version number does not specify a revision at an index, then treat the revision as 0. For example, version 1.0 is less than version 1.1 because their revision 0s are the same, but their revision 1s are 0 and 1 respectively, and 0 < 1.

Return the following:


	If version1 < version2, return -1.
	If version1 > version2, return 1.
	Otherwise, return 0.",['string'],Medium,814,1697,785522,241664,[],"[('java', 68), ('c++', 42), ('cpp', 39), ('python', 35), ('solution', 30), ('python 3', 21), ('easy-understanding', 17), ('javascript', 16), ('simple', 16), ('string', 15), ('cpp solution', 10), ('accepted', 9), ('split', 9), ('easy-understand', 8), ('java-solution', 8), ('c#', 7), ('recursive', 7), ('stringstream', 7), ('swift', 7), ('explained', 6), ('short', 6), ('easy', 5), ('easy-to-understand', 5), ('golang', 5), ('python3', 5), ('test-case', 5), ('clean code', 4), ('easytounderstand', 4), ('linear time', 4), ('scala', 4), ('simple solution', 4), ('0ms', 3), ('clean', 3), ('compare-version-numbers', 3), ('cpp easy', 3), ('fast', 3), ('iteration', 3), ('pointers', 3), ('queue', 3), ('two-pointers', 3), ('wrong-answer', 3), ('100 faster', 2), ('100 speed', 2), ('2 pointer', 2), ('c++ code', 2), ('c++ solution', 2), ('c++easy-understanding', 2), ('comments', 2), ('compare', 2), ('constant space', 2), ('easiest', 2), ('easy to understand', 2), ('error', 2), ('improve', 2), ('intuitive', 2), ('kotlin', 2), ('php', 2), ('pointer', 2), ('solution-sharing-cpp', 2), ('string parsing', 2), ('strings', 2), ('versions', 2), ('video-explanation', 2), ('zip longest', 2), ('0ms runtime', 1), ('0ms-solution', 1), ('100', 1), ('100 faster runtime', 1), ('2 pointers', 1), ('accepted solution', 1), ('amazon', 1), ('beats 100 percent', 1), ('best-submission', 1), ('big o of n', 1), ('brute force', 1), ('bug', 1), ('c', 1), ('c++ easy to understand', 1), ('c++ iterative sol', 1), ('c++17', 1), ('chars', 1), ('clean solution', 1), ('clean-efficient-code', 1), ('clear', 1), ('compare version numbers', 1), ('concise-solution', 1), ('confuse-answer', 1), ('cpp 100', 1), ('cpp soltuion', 1), ('cpp with explanation', 1), ('csharp', 1), ('dart', 1), ('dynamic-programming', 1), ('easiest solution', 1), ('easy solution', 1), ('easy to follow', 1), ('easy understanding', 1), ('easy-undestand', 1), ('explaination', 1), ('explained solution', 1), ('explanation', 1), ('failed', 1), ('fast-solution', 1), ('fastest', 1), ('from', 1), ('fromchars', 1), ('functional', 1), ('functional programming', 1), ('go', 1), ('golang-solution', 1), ('handle', 1), ('integer', 1), ('interview', 1), ('istringstream', 1), ('iterative', 1), ('java ac solution', 1), ('javascript solution', 1), ('kotlinvim', 1), ('leetcode problem set', 1), ('linked-list', 1), ('list', 1), ('meiyaowen', 1), ('number', 1), ('one pass', 1), ('one-pass', 1), ('oop', 1), ('padding', 1), ('python2', 1), ('recursive easy', 1), ('recursively', 1), ('recusion', 1), ('regex', 1), ('ruby', 1), ('run-time-error', 1), ('runtime-error', 1), ('rust', 1), ('simple clear c++ solution', 1), ('simplest solution', 1), ('single pass', 1), ('solution by python', 1), ('solution c++', 1), ('split-clean-compare', 1), ('split-string', 1), ('stl', 1), ('stl algorithms', 1), ('stoi', 1), ('straight-forward', 1), ('straightforward', 1), ('string to integer', 1), ('string-operation', 1), ('string-to-integer', 1), ('testcase-wrong', 1), ('tips', 1), ('two', 1), ('two pointers', 1), ('two-pointer', 1), ('typescript', 1), ('uglycode', 1), ('video', 1), ('video explaination', 1), ('video explanation', 1), ('video solution', 1), ('wrong-test-cases', 1), ('xjq', 1)]"
164,Maximum Gap,https://leetcode.com/problems/maximum-gap,"Given an integer array nums, return the maximum difference between two successive elements in its sorted form. If the array contains less than two elements, return 0.",['sort'],Hard,1153,215,273951,101982,[],"[('java', 19), ('solution', 16), ('python', 15), ('cpp', 14), ('radix-sort', 12), ('c++', 9), ('bucket-sort', 6), ('python 3', 6), ('python3', 6), ('sort', 5), ('golang', 4), ('javascript', 4), ('bucket', 3), ('bucket sort', 3), ('pigeonhole principle', 3), ('test-case', 3), ('time-complexity', 3), ('cpp solution', 2), ('easy-understanding', 2), ('easy-undestand', 2), ('java ac solution', 2), ('priority queue', 2), ('simple solution', 2), ('sort-function', 2), ('8ms', 1), ('accepted', 1), ('algorithms', 1), ('array', 1), ('best-submission', 1), ('binarysearch', 1), ('bitmap', 1), ('c', 1), ('c#', 1), ('clarification', 1), ('comments', 1), ('compile-error', 1), ('cpp easy', 1), ('cpp-solution', 1), ('divide and conquer', 1), ('divide-conquer', 1), ('easy', 1), ('easy solution', 1), ('easy-understand', 1), ('fast-solution', 1), ('go', 1), ('go-solution', 1), ('golang-solution', 1), ('heapq', 1), ('input', 1), ('java-solution', 1), ('javascript brute force', 1), ('javascript solution', 1), ('javasript', 1), ('linear-time', 1), ('linq', 1), ('loop', 1), ('lsd', 1), ('maximum-gap', 1), ('neat', 1), ('perl', 1), ('pre-defined', 1), ('priority-queue', 1), ('python2', 1), ('quick sort', 1), ('quick-sort', 1), ('quicksort', 1), ('radixsort', 1), ('run-time-error', 1), ('simple', 1), ('sorting', 1), ('space-complexity', 1), ('stdalgorithms', 1), ('the pigeonhole principle', 1), ('traverse', 1), ('treemap', 1), ('trie', 1), ('two-pointers', 1), ('very simple', 1), ('well-explained', 1), ('wrong-answer', 1), ('xjq', 1)]"
162,Find Peak Element,https://leetcode.com/problems/find-peak-element,"A peak element is an element that is strictly greater than its neighbors.

Given an integer array nums, find a peak element, and return its index. If the array contains multiple peaks, return the index to any of the peaks.

You may imagine that nums[-1] = nums[n] = -∞.","['array', 'binary-search']",Medium,2781,2648,1101158,486184,"[""Peak Index in a Mountain Array""]","[('binary-search', 92), ('java', 68), ('python', 38), ('cpp', 33), ('c++', 32), ('binary search', 27), ('python 3', 23), ('javascript', 15), ('java-solution', 14), ('binarysearch', 13), ('easy-understand', 13), ('solution', 10), ('cpp solution', 7), ('c', 6), ('golang', 6), ('python3', 6), ('c#', 5), ('easy', 5), ('recursion', 5), ('recursive', 5), ('time-complexity', 5), ('0ms', 4), ('accepted', 4), ('simple', 4), ('test-case', 4), ('wrong-answer', 4), ('easy-understanding', 3), ('easy-undestand', 3), ('easytounderstand', 3), ('intuitive', 3), ('javascript solution', 3), ('logn', 3), ('peak finding', 3), ('python2', 3), ('swift', 3), ('testcase-wrong', 3), ('binary search algorithm', 2), ('binarysearh', 2), ('c++ code', 2), ('divideconquer', 2), ('easy-to-understand', 2), ('find-peak-element', 2), ('go', 2), ('improve', 2), ('iterative', 2), ('java ac solution', 2), ('java solution', 2), ('linear seach', 2), ('medium', 2), ('one line', 2), ('optimal', 2), ('peak element', 2), ('recusion', 2), ('rust', 2), ('sequential', 2), ('shortest', 2), ('simple solution', 2), ('works-on-my-machine', 2), ('#java', 1), ('0ms runtime', 1), ('100 speed', 1), ('6line', 1), ('algorithm', 1), ('algorithms', 1), ('amazon', 1), ('answer', 1), ('array', 1), ('beats 99', 1), ('best', 1), ('binary-search-explanation', 1), ('c code', 1), ('c++ easy to understand', 1), ('c++14', 1), ('clarification', 1), ('comments-added', 1), ('complexity-analysis', 1), ('confusion', 1), ('constant memory', 1), ('constant time', 1), ('cpp easy', 1), ('cpp-solution', 1), ('detailed-explanation', 1), ('divide and conquer', 1), ('easiest', 1), ('easy understanding', 1), ('esay-understand', 1), ('explaination', 1), ('explained', 1), ('explained solution', 1), ('fast', 1), ('fast and simple', 1), ('fast-solution', 1), ('faster than 100.00', 1), ('fastest', 1), ('go-solution', 1), ('golang-solution', 1), ('hashmap', 1), ('help needed', 1), ('if-else', 1), ('incorrect-test-case', 1), ('indexof method', 1), ('input', 1), ('invariant', 1), ('ios', 1), ('iteration', 1), ('iterative solution', 1), ('iterator', 1), ('iteratve-recursive', 1), ('kotlin', 1), ('kotlinvim', 1), ('linear', 1), ('linear search', 1), ('linear time', 1), ('linear-search', 1), ('linear-time', 1), ('list', 1), ('logarithmic time', 1), ('mit ocw', 1), ('non-recursive', 1), ('one-liner', 1), ('oneline', 1), ('onelinecode', 1), ('rating', 1), ('recurision', 1), ('recursive approach', 1), ('ruby', 1), ('runtime-error', 1), ('short', 1), ('simple clear c++ solution', 1), ('simple python accepted', 1), ('simpler', 1), ('simplest', 1), ('solution-java', 1), ('solution-python', 1), ('solution-sharing-cpp', 1), ('solution-sharingjava', 1), ('solutionsharing', 1), ('stl', 1), ('stl vector', 1), ('ternary-operator', 1), ('the', 1), ('thought-process', 1), ('three-different-solutions', 1), ('time-limit-exceeded', 1), ('two pointer', 1), ('typescript', 1), ('understandable', 1), ('valid-input', 1), ('wrong', 1)]"
160,Intersection of Two Linked Lists,https://leetcode.com/problems/intersection-of-two-linked-lists,"Given the heads of two singly linked-lists headA and headB, return the node at which the two lists intersect. If the two linked lists have no intersection at all, return null.

For example, the following two linked lists begin to intersect at node c1:

It is guaranteed that there are no cycles anywhere in the entire linked structure.

Note that the linked lists must retain their original structure after the function returns.",['linked-list'],Easy,5507,619,1473237,659838,"[""Minimum Index Sum of Two Lists""]","[('java', 92), ('c++', 79), ('python', 77), ('cpp', 76), ('javascript', 39), ('linked lists', 39), ('easy-understanding', 34), ('linked-list', 33), ('python 3', 32), ('solution', 31), ('java-solution', 28), ('python3', 23), ('cpp solution', 22), ('linear time', 19), ('easy', 16), ('two-pointers', 16), ('c', 14), ('constant-space', 14), ('linked list', 14), ('constant space', 13), ('linkedlists', 13), ('easy-to-understand', 11), ('c#', 9), ('explained', 9), ('hashmap', 9), ('intersection', 9), ('linkedlist', 9), ('easy-understand', 8), ('stack', 8), ('accepted', 7), ('constant memory', 7), ('easy-undestand', 7), ('javascript solution', 7), ('cool', 6), ('hashset', 6), ('memory-limit-exceeded', 6), ('simple', 6), ('space-complexity-1', 6), ('golang', 5), ('java ac solution', 5), ('linked-list-cycle', 5), ('linked-lists', 5), ('time-complexity', 5), ('c code', 4), ('clean code', 4), ('cpp easy', 4), ('easytounderstand', 4), ('explanation of logic', 4), ('improve', 4), ('intersecting linked lists', 4), ('simple solution', 4), ('two pointers', 4), ('two-pointer', 4), ('video-explanation', 4), ('brute force', 3), ('c++ code', 3), ('easy to understand', 3), ('floyd cycle detection', 3), ('iterative', 3), ('kotlin', 3), ('length', 3), ('run-time-error', 3), ('stacks', 3), ('time-limit-exceeded', 3), ('two pointer technique', 3), ('1ms', 2), ('accepted solution', 2), ('answer', 2), ('beating-100-submission', 2), ('beats 100', 2), ('c++ easy to understand', 2), ('c++ solution', 2), ('comments-added', 2), ('concise-solution', 2), ('cplusplus', 2), ('cycle detection', 2), ('description-disambiguation', 2), ('dictionary', 2), ('dictonary', 2), ('easiest', 2), ('explanatory comments', 2), ('fast-solution', 2), ('google', 2), ('hash table', 2), ('help needed', 2), ('intersectionof2list', 2), ('intuitive', 2), ('iteration', 2), ('javascrip', 2), ('linear', 2), ('linear-time', 2), ('magic', 2), ('map', 2), ('microsoft', 2), ('pointer arithmetic', 2), ('question', 2), ('reference', 2), ('ruby', 2), ('scala', 2), ('set', 2), ('sets', 2), ('short c++ code', 2), ('solution-sharing-cpp', 2), ('stack-based', 2), ('swift', 2), ('testcase-wrong', 2), ('typescript', 2), ('understandable', 2), ('upvote', 2), ('wrong-answer', 2), ('xor', 2), ('#c', 1), ('#clean', 1), ('#java #easy-understand', 1), ('#javascript', 1), ('#linkedlist', 1), ('100 beat', 1), ('100 memory', 1), ('100 space', 1), ('100 speed', 1), ('160', 1), ('1ms runtime', 1), ('2 pointer', 1), ('3 solutions', 1), ('32ms', 1), ('8lines', 1), ('99.2 faster', 1), ('address', 1), ('amazon', 1), ('awesome samriddhi', 1), ('best-submission', 1), ('bug report', 1), ('c solution', 1), ('c# stack', 1), ('c++ easy', 1), ('c++ set', 1), ('c++17', 1), ('clean-code', 1), ('codedecks', 1), ('collections', 1), ('commented', 1), ('confuse-description', 1), ('confusion', 1), ('counter', 1), ('cpp clear', 1), ('cpp doubt', 1), ('creative', 1), ('description wrong', 1), ('develop', 1), ('difference', 1), ('difference in length', 1), ('different approach', 1), ('dirty', 1), ('dummy-head', 1), ('easy java solution', 1), ('easy solutions', 1), ('easy understanding', 1), ('easy-solition', 1), ('efficient', 1), ('elegant solution', 1), ('explaination', 1), ('explained solution', 1), ('explanation', 1), ('fast', 1), ('fast and simple', 1), ('faster', 1), ('flag', 1), ('good variable names', 1), ('graph traversal', 1), ('hare and turtle', 1), ('hash set', 1), ('help', 1), ('hop', 1), ('hopping', 1), ('illustration', 1), ('improvement-needed', 1), ('incorrect-test-case', 1), ('index', 1), ('intersect', 1), ('intersection of two linked lis', 1), ('intuition', 1), ('intutive', 1), ('iteratively', 1), ('java solution', 1), ('js', 1), ('kotlin-solution', 1), ('length method', 1), ('length-alignment', 1), ('linear space', 1), ('link list', 1), ('linked list simple', 1), ('linklist', 1), ('list', 1), ('list traversal', 1), ('listnode', 1), ('lists', 1), ('loop', 1), ('memory', 1), ('memory-alignment', 1), ('mle', 1), ('mrmagician', 1), ('need-help', 1), ('negative numbers', 1), ('netapp', 1), ('new', 1), ('no extra space', 1), ('nodelist', 1), ('o1 space', 1), ('optimal', 1), ('optimisation', 1), ('optimized', 1), ('other-solution', 1), ('performance', 1), ('pointer', 1), ('promiscuous', 1), ('python2', 1), ('python3.8', 1), ('question need help', 1), ('recursion', 1), ('recursively', 1), ('reverse list', 1), ('reverse-list', 1), ('ritik', 1), ('russia', 1), ('self explanatory', 1), ('short', 1), ('short code', 1), ('simple java solution', 1), ('simplest', 1), ('sleazy', 1), ('slow fast pointer', 1), ('solution-share', 1), ('solution-sharing-python', 1), ('solution-sharingjava', 1), ('space-complexity', 1), ('stl', 1), ('store', 1), ('structured code', 1), ('test-cases', 1), ('testcase error', 1), ('testcasewrong', 1), ('thinkoutofthebox', 1), ('thought-process', 1), ('time', 1), ('time-limit-exceeded-java', 1), ('time-limit-exceeded-py', 1), ('tle', 1), ('tortoise and hare', 1), ('tortoise-and-hare-algo', 1), ('try-excel', 1), ('two pointer', 1), ('ultra easy', 1), ('unit-test', 1), ('use', 1), ('video solution', 1), ('visited', 1), ('while', 1), ('why', 1), ('wrong-on-my-machine', 1), ('xjq', 1)]"
155,Min Stack,https://leetcode.com/problems/min-stack,"Design a stack that supports push, pop, top, and retrieving the minimum element in constant time.

Implement the MinStack class:


	MinStack() initializes the stack object.
	void push(val) pushes the element val onto the stack.
	void pop() removes the element on the top of the stack.
	int top() gets the top element of the stack.
	int getMin() retrieves the minimum element in the stack.","['stack', 'design']",Easy,4946,468,1523299,714942,"[""Sliding Window Maximum"", ""Max Stack""]","[('java', 103), ('python', 66), ('cpp', 59), ('stack', 59), ('c++', 49), ('javascript', 44), ('python 3', 39), ('stacks', 36), ('solution', 24), ('minstack', 19), ('java-solution', 18), ('wrong-answer', 17), ('linked-list', 15), ('c#', 14), ('memory-limit-exceeded', 13), ('cpp solution', 11), ('works-on-my-machine', 11), ('easy-understanding', 10), ('golang', 10), ('python3', 10), ('two-stack', 10), ('constant time', 9), ('golang-solution', 9), ('one-stack', 9), ('run-time-error', 9), ('simple solution', 9), ('vector', 9), ('list', 8), ('c++ code', 7), ('easy-undestand', 7), ('kotlin', 7), ('min stack', 7), ('swift', 7), ('accepted', 6), ('array', 6), ('easy', 6), ('easy-understand', 6), ('simple', 6), ('c', 5), ('deque', 5), ('ruby', 5), ('arraylist', 4), ('clean code', 4), ('easy to understand', 4), ('efficient', 4), ('fast', 4), ('javascript solution', 4), ('js', 4), ('linkedlist', 4), ('runtime-error', 4), ('stack-based', 4), ('two stacks', 4), ('c++11', 3), ('csharp', 3), ('explaination', 3), ('go-solution', 3), ('linkedlists', 3), ('min-stack', 3), ('o1 time', 3), ('short', 3), ('single stack', 3), ('#fast', 2), ('1 line', 2), ('begineer', 2), ('commented', 2), ('constant-time', 2), ('easy-to-understand', 2), ('easytounderstand', 2), ('efficient solution', 2), ('error', 2), ('es6', 2), ('explanation', 2), ('fast and simple', 2), ('go', 2), ('go lang', 2), ('heaps', 2), ('linear memory', 2), ('memory', 2), ('memory-limited-exceeded', 2), ('multiset', 2), ('namedtuple', 2), ('one stack', 2), ('optimal', 2), ('pointer', 2), ('readable', 2), ('runtime', 2), ('rust', 2), ('simple clear c++ solution', 2), ('slow', 2), ('solution-sharing-cpp', 2), ('test-case', 2), ('testcase-wrong', 2), ('treemap', 2), ('tuples', 2), ('.net', 1), ('#best', 1), ('#cpp', 1), ('#easy-understand', 1), ('#minstack', 1), ('#python', 1), ('#python3', 1), ('#ruby', 1), ('#simple', 1), ('#single stack', 1), ('#stack', 1), ('100 beat', 1), ('100 faster', 1), ('2 stacks', 1), ('2stack', 1), ('2stacks', 1), ('8ms', 1), ('algorithm', 1), ('amazon', 1), ('amortized', 1), ('answer', 1), ('augment', 1), ('begginer', 1), ('best explaination', 1), ('best-solution-ever', 1), ('best-submission', 1), ('bug', 1), ('c#-solution', 1), ('c++ easy to understand', 1), ('c++ solution', 1), ('c++14', 1), ('cache', 1), ('class', 1), ('clean', 1), ('comments added', 1), ('commetend', 1), ('concise', 1), ('constant space', 1), ('contest', 1), ('cpp clear', 1), ('cpp easy', 1), ('cpp soltuion', 1), ('cpp-solution', 1), ('cur', 1), ('custom class', 1), ('data structure', 1), ('data structures', 1), ('data-structure', 1), ('data-structures', 1), ('dataclass', 1), ('debug', 1), ('design', 1), ('detailed explanation', 1), ('different-oj-local', 1), ('dp', 1), ('dynamic array', 1), ('dynamic-allocation', 1), ('easiest', 1), ('easy-to-read', 1), ('efficiency', 1), ('explained', 1), ('explanation with logic', 1), ('extended-question', 1), ('faster', 1), ('fortnite', 1), ('full explanation', 1), ('good variable names', 1), ('hashmap', 1), ('heap', 1), ('help', 1), ('helpful comments', 1), ('improve', 1), ('incorrect-test-case', 1), ('init', 1), ('insert', 1), ('integer', 1), ('interface', 1), ('java ac solution', 1), ('java solution', 1), ('java-8', 1), ('javascrip', 1), ('javascrpt', 1), ('less memory', 1), ('linear space', 1), ('linear time', 1), ('linear-space', 1), ('linked list', 1), ('map', 1), ('math', 1), ('math.min', 1), ('memory allocation', 1), ('memory-efficient', 1), ('minimum-operation', 1), ('mle', 1), ('monotone stack', 1), ('monotonic stack', 1), ('newbie', 1), ('no extra space', 1), ('o1 time complexity', 1), ('one liners', 1), ('ood', 1), ('oops', 1), ('output', 1), ('output-limit-exceeded', 1), ('pair', 1), ('pairs', 1), ('php', 1), ('priorityqueue', 1), ('pyhton3', 1), ('queue', 1), ('queues', 1), ('reverse list', 1), ('saravana', 1), ('scratch', 1), ('share-solution', 1), ('short solution', 1), ('shorter', 1), ('simple-solution', 1), ('simplest', 1), ('single-linked-list', 1), ('solution c++', 1), ('solution-csharp', 1), ('solution-python', 1), ('stack vs. array', 1), ('stack-implementation', 1), ('state', 1), ('stl', 1), ('swift5', 1), ('testcase error', 1), ('time-limit-exceeded', 1), ('trick', 1), ('tuple', 1), ('two arrays', 1), ('two solutions', 1), ('two-vector', 1), ('typescript', 1), ('updowndota', 1), ('very simple', 1), ('video-explaination', 1), ('well-commented', 1), ('well-explained', 1), ('wrong', 1), ('xjq', 1)]"
154,Find Minimum in Rotated Sorted Array II,https://leetcode.com/problems/find-minimum-in-rotated-sorted-array-ii,"Suppose an array of length n sorted in ascending order is rotated between 1 and n times. For example, the array nums = [0,1,4,4,5,6,7] might become:


	[4,5,6,7,0,1,4] if it was rotated 4 times.
	[0,1,4,4,5,6,7] if it was rotated 7 times.


Notice that rotating an array [a[0], a[1], a[2], ..., a[n-1]] 1 time results in the array [a[n-1], a[0], a[1], a[2], ..., a[n-2]].

Given the sorted rotated array nums that may contain duplicates, return the minimum element of this array.","['array', 'binary-search']",Hard,1541,276,579946,244562,"[""Find Minimum in Rotated Sorted Array""]","[('binary-search', 61), ('java', 43), ('python', 29), ('c++', 23), ('cpp', 22), ('binary search', 19), ('solution', 17), ('python 3', 16), ('binarysearch', 12), ('javascript', 9), ('java-solution', 8), ('python3', 8), ('recursion', 8), ('time-complexity', 8), ('c#', 7), ('easy-understanding', 7), ('easiest', 5), ('easy-understand', 5), ('golang', 5), ('simple', 5), ('divide and conquer', 4), ('easy-undestand', 4), ('improve', 4), ('divide-and-conquer', 3), ('explained', 3), ('js', 3), ('rotate-array', 3), ('simplest', 3), ('test-case', 3), ('accepted', 2), ('constant-space', 2), ('cpp solution', 2), ('easy', 2), ('explained solution', 2), ('explanation of logic', 2), ('fastest', 2), ('iteration', 2), ('linear time', 2), ('min', 2), ('missing-test-case', 2), ('swift', 2), ('two-pointers', 2), ('well-commented', 2), ('#java8', 1), ('100', 1), ('100 speed', 1), ('2000 faster', 1), ('88faster', 1), ('99.7', 1), ('algorithm-proof', 1), ('array', 1), ('array-sort', 1), ('awesome samriddhi', 1), ('begineer friendly', 1), ('beginner friendly', 1), ('best', 1), ('best-submission', 1), ('binary', 1), ('binary-tree', 1), ('binarysearh', 1), ('bisect', 1), ('c', 1), ('c#-solution', 1), ('c++ code', 1), ('clean', 1), ('comments', 1), ('complexity-analysis', 1), ('cpp easy', 1), ('cpp short solution', 1), ('csharp', 1), ('dfs', 1), ('dictionary', 1), ('different-oj-local', 1), ('distance', 1), ('dividedconquer', 1), ('easy code', 1), ('easy to understand', 1), ('efficient solution', 1), ('explanation', 1), ('find-min', 1), ('functions', 1), ('go', 1), ('go-solution', 1), ('golang-solution', 1), ('heap', 1), ('iterative', 1), ('iteratively', 1), ('java ac solution', 1), ('java solution', 1), ('javascript solution', 1), ('kotlin', 1), ('learning-by-blogging', 1), ('linear seach', 1), ('linear search', 1), ('linear-time', 1), ('logn', 1), ('loop', 1), ('microsoft interview', 1), ('minelement', 1), ('no extra space', 1), ('one loop', 1), ('one-liner', 1), ('oneline', 1), ('recursive', 1), ('recursively', 1), ('recusion', 1), ('ritik', 1), ('rotated-sorted-array', 1), ('sandeepkumar', 1), ('scala', 1), ('search', 1), ('sequential', 1), ('short', 1), ('simple clear c++ solution', 1), ('simple solution', 1), ('simple-solution', 1), ('solution-sharing-cpp', 1), ('stl', 1), ('straight-forward', 1), ('sweetandsour', 1), ('swift5', 1), ('test-case-bug', 1), ('testcase-wrong', 1), ('three-different-solutions', 1), ('two-pointer', 1), ('very easy to understand', 1), ('visual', 1), ('works-on-my-machine', 1), ('wrong-execution-result', 1), ('xjq', 1)]"
153,Find Minimum in Rotated Sorted Array,https://leetcode.com/problems/find-minimum-in-rotated-sorted-array,"Suppose an array of length n sorted in ascending order is rotated between 1 and n times. For example, the array nums = [0,1,2,4,5,6,7] might become:


	[4,5,6,7,0,1,2] if it was rotated 4 times.
	[0,1,2,4,5,6,7] if it was rotated 7 times.


Notice that rotating an array [a[0], a[1], a[2], ..., a[n-1]] 1 time results in the array [a[n-1], a[0], a[1], a[2], ..., a[n-2]].

Given the sorted rotated array nums of unique elements, return the minimum element of this array.","['array', 'binary-search']",Medium,3400,303,1263068,587133,"[""Search in Rotated Sorted Array"", ""Find Minimum in Rotated Sorted Array II""]","[('binary-search', 134), ('java', 114), ('python', 64), ('cpp', 45), ('c++', 44), ('binary search', 43), ('python 3', 29), ('binarysearch', 27), ('javascript', 27), ('solution', 23), ('easy-understanding', 18), ('java-solution', 18), ('recursive', 13), ('golang', 11), ('python3', 11), ('recursion', 10), ('easy-understand', 8), ('easy-undestand', 8), ('array', 7), ('easy', 7), ('accepted', 6), ('binarysearh', 6), ('cpp solution', 6), ('easytounderstand', 6), ('simple solution', 6), ('c#', 5), ('go', 5), ('go-solution', 5), ('golang-solution', 5), ('simple', 5), ('0ms', 4), ('divide and conquer', 4), ('explained solution', 4), ('logn', 4), ('time-complexity', 4), ('divide-and-conquer', 3), ('js', 3), ('linear search', 3), ('python2', 3), ('rotated-sorted-array', 3), ('ruby', 3), ('short', 3), ('simplest', 3), ('solution-sharing-cpp', 3), ('swift', 3), ('wrong-answer', 3), ('100 speed', 2), ('binary-tree', 2), ('c#-solution', 2), ('c++ code', 2), ('commented', 2), ('comments-added', 2), ('concise', 2), ('cpp easy', 2), ('easy to understand', 2), ('fast', 2), ('fast and simple', 2), ('iterative', 2), ('java solution', 2), ('kotlin', 2), ('pivot', 2), ('reccursion', 2), ('rust', 2), ('sort', 2), ('sorted array', 2), ('test-case', 2), ('#javascript', 1), ('0ms runtime', 1), ('100 faster cpp', 1), ('100 faster runtime', 1), ('100 runtime', 1), ('153', 1), ('2 lines', 1), ('7 lines', 1), ('8ms', 1), ('algorithms', 1), ('amazon', 1), ('answer', 1), ('array-sort', 1), ('arrays', 1), ('avnish', 1), ('awesome samriddhi', 1), ('beginner friendly', 1), ('best', 1), ('best-solution-ever', 1), ('binar', 1), ('binary sear', 1), ('binary search algorithm', 1), ('binary search tree', 1), ('binary-search-explanation', 1), ('binarysearchfirst', 1), ('bit-manipulation', 1), ('bst', 1), ('builtin', 1), ('c++ binary-search', 1), ('c++ solution', 1), ('challenge-me', 1), ('clean code', 1), ('code', 1), ('comment', 1), ('compact', 1), ('consice', 1), ('csharp', 1), ('description-disambiguation', 1), ('distance', 1), ('easy sloution', 1), ('easy understanding', 1), ('easy-to-understand', 1), ('efficient solution', 1), ('error', 1), ('esay-understand', 1), ('explained', 1), ('explanation', 1), ('explanation of logic', 1), ('facebook', 1), ('fast-solution', 1), ('faster', 1), ('faster than 100.00', 1), ('follow up solved', 1), ('follow-up', 1), ('functions', 1), ('go lang', 1), ('google', 1), ('grab', 1), ('intuition', 1), ('intuitive', 1), ('ios', 1), ('iteratively', 1), ('js javascript', 1), ('keep it simple', 1), ('kotlinvim', 1), ('linear', 1), ('log', 1), ('logarithmic time', 1), ('loop', 1), ('memory usage', 1), ('microsoft', 1), ('min', 1), ('minelement', 1), ('missing-test-case', 1), ('mrmagician', 1), ('non-copy-paste', 1), ('o logn', 1), ('ologn', 1), ('one-liner', 1), ('oneliner', 1), ('pivotinrotatedsortedarr', 1), ('question need help', 1), ('question-not-clear', 1), ('readable', 1), ('recusion', 1), ('resursive', 1), ('ritik', 1), ('rotate-array', 1), ('rotated sorted array', 1), ('sandeepkumar', 1), ('search', 1), ('search for position', 1), ('searching', 1), ('sequential', 1), ('short code', 1), ('shortes', 1), ('shortest', 1), ('simple-solution', 1), ('slidingwindow', 1), ('stl', 1), ('straight-forward', 1), ('swift5', 1), ('symmetric', 1), ('template', 1), ('ternary operator', 1), ('thought-process', 1), ('two-pointers', 1), ('understandable', 1), ('upperbound', 1), ('vector', 1), ('video', 1), ('video-explanation', 1), ('visual', 1), ('with comments', 1), ('wrong-execution-result', 1), ('xjq', 1)]"
152,Maximum Product Subarray,https://leetcode.com/problems/maximum-product-subarray,"Given an integer array nums, find a contiguous non-empty subarray within the array that has the largest product, and return the product.

It is guaranteed that the answer will fit in a 32-bit integer.

A subarray is a contiguous subsequence of the array.","['array', 'dynamic-programming']",Medium,6675,222,1435151,472504,"[""Maximum Subarray"", ""House Robber"", ""Product of Array Except Self"", ""Maximum Product of Three Numbers"", ""Subarray Product Less Than K""]","[('java', 56), ('python', 47), ('dynamic programming', 43), ('cpp', 42), ('c++', 39), ('dynamic-programming', 33), ('python 3', 22), ('linear time', 21), ('dp', 19), ('javascript', 17), ('python3', 14), ('java-solution', 12), ('solution', 12), ('easy-understanding', 11), ('easy-undestand', 11), ('explained', 11), ('constant space', 8), ('cpp solution', 8), ('dp-techqique', 8), ('easy-understand', 8), ('golang', 8), ('video', 8), ('c#', 6), ('kadane algorithm', 6), ('linear-time', 6), ('naive', 6), ('kadanes algorithm', 5), ('memoization', 5), ('product', 5), ('easy', 4), ('explaination', 4), ('subarray', 4), ('swift', 4), ('accepted', 3), ('c++ code', 3), ('constant-space', 3), ('easy-to-understand', 3), ('easytounderstand', 3), ('fast', 3), ('java solution', 3), ('kadanes', 3), ('kotlin', 3), ('maximum', 3), ('python2', 3), ('scala', 3), ('short', 3), ('simple', 3), ('time-complexity', 3), ('0ms', 2), ('bottom-up-algorithm', 2), ('c', 2), ('constant memory', 2), ('cpp easy', 2), ('explained solution', 2), ('fast-solution', 2), ('greedy', 2), ('kadane', 2), ('kadanes algo', 2), ('linear', 2), ('maximum product subarray', 2), ('recursion', 2), ('ruby', 2), ('simple solution', 2), ('simplest', 2), ('sliding-window', 2), ('solution-share', 2), ('solution-sharing-python', 2), ('time-limit-exceeded', 2), ('time-limit-exceeded-java', 2), ('wrong-answer', 2), ('zea7ot', 2), ('#dp', 1), ('#dynamic-programming', 1), ('0d-dp', 1), ('100 faster runtime', 1), ('100 speed', 1), ('2-line solution', 1), ('accumulate', 1), ('algorithms', 1), ('amazon', 1), ('array', 1), ('arrays', 1), ('awesome samriddhi', 1), ('beginner friendly', 1), ('best-submission', 1), ('bottom up', 1), ('c sharp', 1), ('c++ dynamic programming', 1), ('c++ solution', 1), ('c++ summary of related problem', 1), ('clean', 1), ('clear', 1), ('concise', 1), ('concise-solution', 1), ('cplusplus', 1), ('detailed explanation', 1), ('dinamic', 1), ('divideconquer', 1), ('dp python', 1), ('dp-programming', 1), ('easy sloution', 1), ('easy solution', 1), ('easy to code', 1), ('easy to read', 1), ('easy to understandd', 1), ('easyunderstanding', 1), ('error', 1), ('even odd', 1), ('expalanation', 1), ('explanation of logic', 1), ('explanation with logic', 1), ('explanations', 1), ('fastest', 1), ('golang-solution', 1), ('immutable', 1), ('incorrect-test-case', 1), ('induction rule', 1), ('interview-friendly', 1), ('intuitive', 1), ('itereative', 1), ('java easy', 1), ('javacript', 1), ('javasccript', 1), ('javascript solution', 1), ('js javascript', 1), ('kadane-algorithm', 1), ('linear memory', 1), ('linear search', 1), ('logical thinking', 1), ('maths', 1), ('maximum-product-subarray', 1), ('maxproductsubarray', 1), ('memory-limited-exceeded', 1), ('microsoft', 1), ('min', 1), ('min-max', 1), ('moderate', 1), ('n', 1), ('no dp', 1), ('no-extra-space', 1), ('o1 space', 1), ('one line', 1), ('one-liner', 1), ('one-pass', 1), ('oneline', 1), ('optimized', 1), ('prefix array', 1), ('prefix sum', 1), ('python dp', 1), ('pythonpython3', 1), ('rajat', 1), ('recursive', 1), ('request-for-explanation', 1), ('ritik', 1), ('rolling-product', 1), ('rust', 1), ('short code', 1), ('simple clear c++ solution', 1), ('simple python solution', 1), ('simpler', 1), ('simplesolution', 1), ('single pass', 1), ('solution-cpp', 1), ('solution-sharing-cpp', 1), ('somal', 1), ('tailrec', 1), ('testcase-wrong', 1), ('testcase-wrong-and-not', 1), ('thought-process', 1), ('three-different-solutions', 1), ('top down dp', 1), ('tuples', 1), ('two-pass', 1), ('typescript', 1), ('understandable', 1), ('video solution', 1), ('video-explanation', 1), ('well-commented', 1), ('without dp', 1), ('youtube', 1)]"
151,Reverse Words in a String,https://leetcode.com/problems/reverse-words-in-a-string,"Given an input string s, reverse the order of the words.

A word is defined as a sequence of non-space characters. The words in s will be separated by at least one space.

Return a string of the words in reverse order concatenated by a single space.

Note that s may contain leading or trailing spaces or multiple spaces between two words. The returned string should only have a single space separating the words. Do not include any extra spaces.",['string'],Medium,1622,3237,2154791,524396,"[""Reverse Words in a String II""]","[('java', 86), ('python', 59), ('cpp', 55), ('c++', 47), ('python 3', 34), ('javascript', 32), ('string', 25), ('solution', 24), ('wrong-answer', 23), ('easy-understanding', 18), ('one-liner', 18), ('python3', 17), ('java-solution', 15), ('simple', 12), ('c#', 11), ('test-case', 10), ('cpp solution', 9), ('golang', 9), ('easy', 8), ('stack', 8), ('easy-to-understand', 7), ('stringbuilder', 7), ('swift', 7), ('testcase-wrong', 7), ('time-limit-exceeded', 7), ('two-pointers', 7), ('easy-understand', 6), ('reverse', 6), ('run-time-error', 6), ('split', 6), ('accepted', 5), ('c', 5), ('clean code', 5), ('compile-error', 5), ('easy-undestand', 5), ('improve', 5), ('javascript solution', 5), ('kotlin', 5), ('two-pointer', 5), ('c++ code', 4), ('commented', 4), ('constant-space', 4), ('csharp', 4), ('easytounderstand', 4), ('explained', 4), ('golang-solution', 4), ('java ac solution', 4), ('linear time', 4), ('output-limit-exceeded', 4), ('reverse-words', 4), ('simple solution', 4), ('stacks', 4), ('string-operation', 4), ('stringstream', 4), ('time-complexity', 4), ('works-on-my-machine', 4), ('1 line', 3), ('go-solution', 3), ('in-place', 3), ('inplace', 3), ('intuitive', 3), ('oneline', 3), ('reverse-string', 3), ('ruby', 3), ('solution-sharing-cpp', 3), ('stack-based', 3), ('two pointer', 3), ('wrong', 3), ('asahiocean', 2), ('constant space', 2), ('cpp easy', 2), ('error', 2), ('exceeded', 2), ('exception handling', 2), ('explained solution', 2), ('fast', 2), ('linear-time', 2), ('memory-limit-exceeded', 2), ('output', 2), ('performance', 2), ('php', 2), ('pointer', 2), ('reverse words', 2), ('short', 2), ('string builder', 2), ('string reverse', 2), ('string-reverse-words', 2), ('words', 2), ('#best', 1), ('#easy', 1), ('#easy-understand', 1), ('#stacks', 1), ('#string', 1), ('#string-manipulation', 1), ('0ms', 1), ('1-line', 1), ('100 faster cpp', 1), ('100 speed', 1), ('2liner', 1), ('2ms', 1), ('76 memory', 1), ('8ms', 1), ('99.2 faster', 1), ('accepted solution', 1), ('algorithms', 1), ('amazon', 1), ('answer', 1), ('array', 1), ('arraylist', 1), ('backtracking', 1), ('beginner friendly', 1), ('beginners', 1), ('best-solution', 1), ('best-submission', 1), ('brute-force', 1), ('bruteforce', 1), ('buffer', 1), ('bug', 1), ('built-in-function', 1), ('builtin', 1), ('c programming', 1), ('c#-solution', 1), ('c++ easy to understand', 1), ('c++ solution', 1), ('c++11', 1), ('comments-added', 1), ('comparison', 1), ('cpp doubt', 1), ('doubts', 1), ('easiest', 1), ('easiest solution', 1), ('easy to understand', 1), ('easy understanding', 1), ('easy-implementation', 1), ('easy-solution', 1), ('excbadaccess', 1), ('executed', 1), ('expalnation', 1), ('explanation', 1), ('fast and simple', 1), ('fast-solution', 1), ('fastest', 1), ('feedback', 1), ('for', 1), ('fun', 1), ('functional', 1), ('go', 1), ('google interview question', 1), ('heapq', 1), ('help', 1), ('in place', 1), ('inbuilt functions', 1), ('incorrect-test-case', 1), ('indexof method', 1), ('iterative', 1), ('java 8', 1), ('java solution sharing', 1), ('java8', 1), ('js', 1), ('json error', 1), ('leetcode', 1), ('limit', 1), ('limit-exceeded', 1), ('linear', 1), ('linear space', 1), ('list comprehension', 1), ('loop', 1), ('medium', 1), ('memory-usage', 1), ('no-library', 1), ('no-strlen', 1), ('non-built', 1), ('o1 space', 1), ('on', 1), ('one line', 1), ('one liner', 1), ('one pass', 1), ('oneliner', 1), ('only', 1), ('optimal', 1), ('pattern', 1), ('python2', 1), ('pythonpython3', 1), ('recursion', 1), ('regex', 1), ('regular-expression', 1), ('reverse words in string', 1), ('reverse-words-in-a-string', 1), ('run-time', 1), ('runtime', 1), ('runtimeerror', 1), ('rust', 1), ('scala', 1), ('share-solution', 1), ('short code', 1), ('simple approach', 1), ('simple clear c++ solution', 1), ('simple-solution', 1), ('simplesolution', 1), ('single', 1), ('sliding-window', 1), ('slidingwindow', 1), ('solutioin', 1), ('solved', 1), ('space-complexity', 1), ('spoiler', 1), ('stl algorithms', 1), ('stoi', 1), ('straight-forward', 1), ('string-builder', 1), ('stringbuffer', 1), ('stringbuilder in java', 1), ('strings manipulation', 1), ('substring', 1), ('test', 1), ('three pointers', 1), ('time complexity', 1), ('time-limit-exceeded-java', 1), ('tokenization', 1), ('two pointers', 1), ('two-pointer method', 1), ('twopointers', 1), ('understandable', 1), ('unordered map', 1), ('unorderedmap', 1), ('vector', 1), ('video explanation', 1), ('well-commented', 1), ('with explanation', 1), ('without stringstream', 1), ('word', 1), ('wrong output', 1)]"
150,Evaluate Reverse Polish Notation,https://leetcode.com/problems/evaluate-reverse-polish-notation,"Evaluate the value of an arithmetic expression in Reverse Polish Notation.

Valid operators are +, -, *, and /. Each operand may be an integer or another expression.

Note that division between two integers should truncate toward zero.

It is guaranteed that the given RPN expression is always valid. That means the expression would always evaluate to a result, and there will not be any division by zero operation.",['stack'],Medium,1582,522,732798,281328,"[""Basic Calculator"", ""Expression Add Operators""]","[('stack', 80), ('java', 54), ('python', 47), ('c++', 29), ('javascript', 25), ('cpp', 23), ('stacks', 22), ('solution', 16), ('wrong-answer', 16), ('python 3', 14), ('python3', 13), ('run-time-error', 11), ('c#', 9), ('works-on-my-machine', 9), ('golang', 8), ('java-solution', 8), ('testcase-wrong', 7), ('stack-based', 6), ('time-complexity', 6), ('time-limit-exceeded', 6), ('lambda', 5), ('accepted', 4), ('compile-error', 4), ('easy-understand', 4), ('easy-understanding', 4), ('go', 4), ('js', 4), ('test-case', 4), ('clean code', 3), ('compile', 3), ('easy-to-understand', 3), ('go-solution', 3), ('golang-solution', 3), ('javascript solution', 3), ('recursion', 3), ('reverse-polish-notation', 3), ('rpn', 3), ('ruby', 3), ('short', 3), ('simple solution', 3), ('swift', 3), ('vector', 3), ('c++ code', 2), ('clean solution', 2), ('easy', 2), ('eval', 2), ('fast-solution', 2), ('functional programming', 2), ('improve', 2), ('kotlin', 2), ('map', 2), ('notation', 2), ('polish', 2), ('pyhton3', 2), ('runtime-error', 2), ('scala', 2), ('simple', 2), ('150', 1), ('2019', 1), ('4ms', 1), ('ac', 1), ('ac solution', 1), ('answer', 1), ('arithmeticexception', 1), ('array', 1), ('ascii', 1), ('atoi', 1), ('beating-100-submission', 1), ('best-solution', 1), ('best-submission', 1), ('bugs', 1), ('c', 1), ('c++17', 1), ('clean', 1), ('clean-efficient-code', 1), ('concise-solution', 1), ('cpp solution', 1), ('csharp', 1), ('dfs', 1), ('dictionary', 1), ('division', 1), ('easiest', 1), ('easy-undestand', 1), ('easytounderstand', 1), ('elegant solution', 1), ('error', 1), ('es6', 1), ('expression eveluation', 1), ('facebook', 1), ('fast', 1), ('fast and simple', 1), ('fold', 1), ('foldleft', 1), ('function-object', 1), ('functional', 1), ('functional-programming', 1), ('github', 1), ('golfing', 1), ('google', 1), ('immutable', 1), ('indent', 1), ('indentationerror', 1), ('integer division', 1), ('intutive', 1), ('iteratively', 1), ('java ac solution', 1), ('java8', 1), ('javascript brute force', 1), ('leetcode-library', 1), ('linear', 1), ('linear-time-space', 1), ('look-up-table', 1), ('macro', 1), ('magic-methods', 1), ('no-stack', 1), ('npr', 1), ('o of n', 1), ('oop', 1), ('operator', 1), ('ord', 1), ('php', 1), ('polish notaion', 1), ('python-compile-erroe', 1), ('python2', 1), ('recursive', 1), ('reverse', 1), ('reverse polish notation', 1), ('reversepolishnotation', 1), ('rune-time-error', 1), ('runtime', 1), ('self explanatory', 1), ('shortest', 1), ('slow', 1), ('space-complexity', 1), ('stack javascript', 1), ('stack python', 1), ('stack-simulation', 1), ('stack-stl', 1), ('stars move the article up', 1), ('std', 1), ('string', 1), ('switch', 1), ('switch-case', 1), ('tailrec', 1), ('template', 1), ('try-catch', 1), ('try-except', 1), ('typescript', 1), ('ultra simple', 1), ('unexpected', 1), ('upvote', 1), ('video', 1), ('well-commented', 1), ('well-explained', 1)]"
149,Max Points on a Line,https://leetcode.com/problems/max-points-on-a-line,"Given an array of points where points[i] = [xi, yi] represents a point on the X-Y plane, return the maximum number of points that lie on the same straight line.","['hash-table', 'math']",Hard,135,36,1009940,179978,"[""Line Reflection""]","[('python', 33), ('java', 26), ('wrong-answer', 23), ('cpp', 16), ('c++', 14), ('time-limit-exceeded', 12), ('solution', 11), ('testcase-wrong', 9), ('easy-understand', 8), ('hashmap', 7), ('javascript', 7), ('math', 7), ('test-case', 7), ('time-complexity', 7), ('python3', 6), ('accepted', 5), ('map', 5), ('simple', 5), ('easy-understanding', 4), ('run-time-error', 4), ('c#', 3), ('gcd', 3), ('hashing', 3), ('hashtable', 3), ('python 3', 3), ('solution-sharing-cpp', 3), ('swift', 3), ('brute-force', 2), ('compile-error', 2), ('cpp solution', 2), ('different-oj-local', 2), ('easy', 2), ('golang', 2), ('golang-solution', 2), ('help', 2), ('improve', 2), ('line', 2), ('maxpointsonaline', 2), ('runtime-error', 2), ('works-on-my-machine', 2), ('wrong-execution-result', 2), ('brute', 1), ('brute force', 1), ('bruteforce', 1), ('bug in leetcode', 1), ('c++ code', 1), ('c++11', 1), ('clean', 1), ('compilation', 1), ('complexity analysis', 1), ('concise', 1), ('cpp easy', 1), ('cpp object oriented', 1), ('cpp-solution', 1), ('double', 1), ('dynamic-programming', 1), ('easy-undestand', 1), ('explanation', 1), ('explanation with logic', 1), ('fast', 1), ('go', 1), ('go-solution', 1), ('implementation', 1), ('incomplete-testcases', 1), ('incorrect-test-case', 1), ('inefficient', 1), ('input', 1), ('iterative', 1), ('java ac solution', 1), ('java-solution', 1), ('javascript solution', 1), ('js', 1), ('latest', 1), ('leetcode-only', 1), ('line equation', 1), ('linear-space', 1), ('map in c++', 1), ('map-stl', 1), ('mathworks', 1), ('max', 1), ('natural', 1), ('object-oriented', 1), ('points', 1), ('precision', 1), ('quadratic', 1), ('rational-numbers', 1), ('run time error', 1), ('runtime', 1), ('sets', 1), ('short', 1), ('slope equation', 1), ('solution-explaining', 1), ('solution-sharing-c', 1), ('solution-sharing-python', 1), ('sort', 1), ('string', 1), ('string-operation', 1), ('test-case-validation', 1), ('time-limit-exceeded-java', 1), ('unordered map', 1), ('unordered-map', 1), ('unordermap', 1), ('uthash', 1), ('vector', 1), ('video', 1), ('wrong answer', 1), ('youtube', 1)]"
148,Sort List,https://leetcode.com/problems/sort-list,"Given the head of a linked list, return the list after sorting it in ascending order.

Follow up: Can you sort the linked list in O(n logn) time and O(1) memory (i.e. constant space)?","['linked-list', 'sort']",Medium,4145,174,751200,352116,"[""Merge Two Sorted Lists"", ""Sort Colors"", ""Insertion Sort List""]","[('mergesort', 73), ('python', 66), ('java', 61), ('cpp', 45), ('c++', 34), ('merge-sort', 32), ('quicksort', 25), ('time-limit-exceeded', 24), ('python 3', 23), ('constant-space', 19), ('merge sort', 18), ('easy-understand', 13), ('javascript', 13), ('linked-list', 13), ('golang', 12), ('run-time-error', 12), ('easy-understanding', 11), ('constant space', 10), ('solution', 10), ('java-solution', 9), ('python3', 9), ('linkedlists', 8), ('cpp solution', 7), ('merge sorted linkedlist', 7), ('sort', 7), ('accepted', 5), ('bottom-up-algorithm', 5), ('c#', 5), ('improve', 5), ('iterative', 5), ('quick sort', 5), ('sortlist', 5), ('bottom-up', 4), ('c', 4), ('linkedlist', 4), ('list', 4), ('non-recursive', 4), ('recursion', 4), ('space-complexity', 4), ('time-complexity', 4), ('easy', 3), ('easy-undestand', 3), ('in-place', 3), ('java ac solution', 3), ('nlogn', 3), ('quick-sort', 3), ('recursive', 3), ('simple solution', 3), ('sorting', 3), ('test-case', 3), ('tle', 3), ('wrong-answer', 3), ('best-submission', 2), ('bottomup', 2), ('bubble sort', 2), ('c programming', 2), ('c++ ac', 2), ('clean code', 2), ('complexity', 2), ('constant-space-iterative', 2), ('cpp easy', 2), ('csharp', 2), ('divide and conquer', 2), ('divideconquer', 2), ('fast', 2), ('go', 2), ('go-solution', 2), ('golang-solution', 2), ('input', 2), ('kotlin', 2), ('linked list', 2), ('merge', 2), ('python2', 2), ('ruby', 2), ('shell-sort', 2), ('simple', 2), ('sort-list', 2), ('vector', 2), ('video-explanation', 2), ('works-on-my-machine', 2), ('#mergesort', 1), ('#python', 1), ('#recursion', 1), ('algorithms', 1), ('beginner friendly', 1), ('beginnerfriendly', 1), ('bottom to up', 1), ('bottom up', 1), ('bubble-sort', 1), ('bubblesort', 1), ('c++ code', 1), ('c++ easy to understand', 1), ('c++ solution', 1), ('c++11', 1), ('c++17', 1), ('challenge-me', 1), ('checked', 1), ('clean-code', 1), ('collections.sort', 1), ('commented', 1), ('comments', 1), ('comments-added', 1), ('comparator', 1), ('constant', 1), ('constant memory', 1), ('counting-sort', 1), ('cpp doubt', 1), ('cpp-solution', 1), ('custom sorting', 1), ('dfs', 1), ('divide-and-conquer', 1), ('dynamic programming', 1), ('easiest', 1), ('easy to understand', 1), ('easy-implementation', 1), ('easy-to-understand', 1), ('error', 1), ('exceeded', 1), ('executed', 1), ('explaination', 1), ('explained', 1), ('explained solution', 1), ('google', 1), ('hare and turtle', 1), ('heap sort', 1), ('heapify', 1), ('heapq', 1), ('help', 1), ('invariant', 1), ('java beginners', 1), ('java simple', 1), ('kotlinvim', 1), ('limit', 1), ('linked-lists', 1), ('linux', 1), ('listnode', 1), ('m', 1), ('memory-leak', 1), ('merge linked list', 1), ('merge sorted', 1), ('merge-sorted', 1), ('mergetwosortedlists', 1), ('microsoft', 1), ('middle of the linked list', 1), ('natural-merge-sort', 1), ('nlogn time', 1), ('no-recursion', 1), ('pivot', 1), ('pointers', 1), ('priority queue', 1), ('priority-queue', 1), ('priorityqueue', 1), ('question-not-clear', 1), ('random pivot', 1), ('recursive solution', 1), ('run', 1), ('runtime-error', 1), ('runtimeerror', 1), ('selection sort', 1), ('self-explanatory', 1), ('shared-answer', 1), ('short', 1), ('solution-share', 1), ('solution-sharing-cpp', 1), ('sorted', 1), ('space', 1), ('space-efficient', 1), ('stablemergesort', 1), ('stack-based', 1), ('swift', 1), ('time', 1), ('time-error', 1), ('time-limit-exceeded-java', 1), ('timelimit', 1), ('timsort', 1), ('top-down', 1), ('up to down', 1), ('video solution', 1), ('well-commented', 1), ('wrong', 1), ('xjq cpp', 1)]"
147,Insertion Sort List,https://leetcode.com/problems/insertion-sort-list,"Given the head of a singly linked list, sort the list using insertion sort, and return the sorted list's head.

The steps of the insertion sort algorithm:


	Insertion sort iterates, consuming one input element each repetition and growing a sorted output list.
	At each iteration, insertion sort removes one element from the input data, finds the location it belongs within the sorted list and inserts it there.
	It repeats until no input elements remain.


The following is a graphical example of the insertion sort algorithm. The partially sorted list (black) initially contains only the first element in the list. One element (red) is removed from the input data and inserted in-place into the sorted list with each iteration.","['linked-list', 'sort']",Medium,1029,684,514140,230182,"[""Sort List"", ""Insert into a Sorted Circular Linked List""]","[('java', 51), ('python', 29), ('cpp', 25), ('insertion-sort-list', 25), ('time-limit-exceeded', 20), ('c++', 16), ('python 3', 14), ('linked-list', 13), ('insertion sort', 12), ('iterative', 9), ('golang', 8), ('python3', 8), ('solution', 8), ('javascript', 5), ('recursive', 5), ('easy-understanding', 4), ('java-solution', 4), ('time-complexity', 4), ('tle', 4), ('c#', 3), ('easy', 3), ('easy-understand', 3), ('explained', 3), ('improve', 3), ('recursion', 3), ('two-pointers', 3), ('well-commented', 3), ('accepted', 2), ('cpp solution', 2), ('csharp', 2), ('eckotan', 2), ('insertions', 2), ('insertionsortlist', 2), ('linked list', 2), ('linkedlist', 2), ('linkedlists', 2), ('mergesort', 2), ('php', 2), ('pointer', 2), ('recurision', 2), ('run-time-error', 2), ('simple solution', 2), ('solution-python', 2), ('space-efficient', 2), ('swift', 2), ('#linkedlist', 1), ('#sort', 1), ('100 faster', 1), ('110ms', 1), ('1ms', 1), ('2ms', 1), ('answer', 1), ('best-solution', 1), ('best-submission', 1), ('c', 1), ('c code', 1), ('c++ code', 1), ('c++ solution', 1), ('clean', 1), ('comments', 1), ('comments-added', 1), ('comparison-of-linear-sorts', 1), ('consice', 1), ('different-oj-local', 1), ('dummy', 1), ('dummyhead', 1), ('easiest', 1), ('easy to read', 1), ('easy-implementation', 1), ('easy-to-understand', 1), ('easy-undestand', 1), ('easysolution', 1), ('es6', 1), ('explained solution', 1), ('explanation', 1), ('fast and simple', 1), ('fast-solution', 1), ('fasterthan100', 1), ('fidato', 1), ('go', 1), ('golang-solution', 1), ('good-in-local-machine', 1), ('google', 1), ('graph theory', 1), ('hack', 1), ('in-place', 1), ('in-place operation', 1), ('inplace', 1), ('iterative way', 1), ('java ac solution', 1), ('kotlin', 1), ('kotlinvim', 1), ('linked-lists', 1), ('list slicing', 1), ('list sort', 1), ('list traversal', 1), ('meiyaowen', 1), ('microsoft', 1), ('mle', 1), ('non-spaghetti', 1), ('not insertion sort', 1), ('php solution', 1), ('pictorial-flow', 1), ('pointers', 1), ('runtime', 1), ('short', 1), ('simple', 1), ('solution-sharing-cpp', 1), ('sort', 1), ('speed', 1), ('stl', 1), ('swap', 1), ('test-case', 1), ('testcase-wrong', 1), ('unique', 1), ('video explaination', 1), ('video-explanation', 1), ('well-explained', 1), ('wrong-answer', 1)]"
146,LRU Cache,https://leetcode.com/problems/lru-cache,"Design a data structure that follows the constraints of a Least Recently Used (LRU) cache.

Implement the LRUCache class:


	LRUCache(int capacity) Initialize the LRU cache with positive size capacity.
	int get(int key) Return the value of the key if the key exists, otherwise return -1.
	void put(int key, int value) Update the value of the key if the key exists. Otherwise, add the key-value pair to the cache. If the number of keys exceeds the capacity from this operation, evict the least recently used key.


Follow up:
Could you do get and put in O(1) time complexity?",['design'],Medium,8345,343,2062980,752543,"[""LFU Cache"", ""Design In-Memory File System"", ""Design Compressed String Iterator"", ""Design Most Recently Used Queue""]","[('java', 108), ('hashmap', 93), ('python', 68), ('double-linked-list', 65), ('c++', 48), ('cpp', 43), ('python 3', 36), ('javascript', 35), ('lru-cache', 35), ('doubly linked list', 26), ('linked-list', 26), ('solution', 25), ('lru', 21), ('linkedhashmap', 20), ('java-solution', 19), ('list', 19), ('time-limit-exceeded', 18), ('c#', 16), ('easy-understanding', 16), ('wrong-answer', 16), ('dictionary', 15), ('golang', 15), ('map', 15), ('python3', 15), ('doubly-linked-list', 14), ('run-time-error', 12), ('hashtable', 11), ('ordereddict', 10), ('deque', 9), ('dictonary', 9), ('easy-undestand', 9), ('linkedlists', 9), ('lru cache', 9), ('clean code', 8), ('hash table', 8), ('cache', 7), ('doubly-linked list', 7), ('queue', 7), ('unorderedmap', 7), ('accepted', 6), ('constant time', 6), ('cpp solution', 6), ('easy', 6), ('easy-understand', 6), ('golang-solution', 6), ('simple', 6), ('simple solution', 6), ('stl', 6), ('swift', 6), ('test-case', 6), ('unordered map', 6), ('works-on-my-machine', 6), ('c++ code', 5), ('compile-error', 5), ('go', 5), ('kotlin', 5), ('linkedlist', 5), ('ruby', 5), ('time-complexity', 5), ('design', 4), ('easy-to-understand', 4), ('improve', 4), ('java ac solution', 4), ('python2', 4), ('runtime-error', 4), ('youtube', 4), ('answer', 3), ('c', 3), ('comments', 3), ('dict', 3), ('dll', 3), ('doubts', 3), ('easiest', 3), ('hash-table', 3), ('help', 3), ('intuitive', 3), ('lrucache', 3), ('o1 time', 3), ('optimal', 3), ('solved', 3), ('testcase-wrong', 3), ('tle', 3), ('100 memory', 2), ('100 speed', 2), ('2 solutions', 2), ('alibaba', 2), ('arraylist', 2), ('c++ hash', 2), ('chinese', 2), ('clean', 2), ('clear explanation', 2), ('constant-space', 2), ('cpp easy', 2), ('cpp-solution', 2), ('detailed explanation', 2), ('double linked list', 2), ('dummy-node', 2), ('easytounderstand', 2), ('es6', 2), ('explanations', 2), ('fast and simple', 2), ('fast-solution', 2), ('fastest', 2), ('go-solution', 2), ('hash', 2), ('hashing', 2), ('help me', 2), ('help needed', 2), ('javascript solution', 2), ('linked list', 2), ('linked lists', 2), ('linkedhashset', 2), ('map in c++', 2), ('maps', 2), ('o1', 2), ('ordered-dict', 2), ('priority-queue', 2), ('python3.8', 2), ('question-not-clear', 2), ('readable', 2), ('rust', 2), ('scala', 2), ('short', 2), ('short code', 2), ('slow-performance', 2), ('straight-forward', 2), ('test-cases', 2), ('time', 2), ('transparent', 2), ('typescript', 2), ('video', 2), ('video explanation', 2), ('wrong', 2), ('#cpp', 1), ('#dictionary', 1), ('#list', 1), ('#python', 1), ('#python 3', 1), ('146', 1), ('68ms', 1), ('90+faster', 1), ('algorithms', 1), ('amazon', 1), ('amortized', 1), ('analysis', 1), ('array', 1), ('atomicinteger', 1), ('basic', 1), ('beating-100-submissions', 1), ('beats 97', 1), ('best', 1), ('best-submission', 1), ('brute-force', 1), ('builtin', 1), ('c code', 1), ('c language', 1), ('c# lru', 1), ('c#-solution', 1), ('c++14', 1), ('cheating', 1), ('clarification', 1), ('classes', 1), ('cleanest', 1), ('clear', 1), ('code', 1), ('commented code', 1), ('comments added', 1), ('comments-added', 1), ('compilation', 1), ('compiler', 1), ('concise', 1), ('concurrenthashmap', 1), ('constant-time', 1), ('cpp question', 1), ('cpp-easy', 1), ('csharp', 1), ('custom class', 1), ('dequeue', 1), ('detailed', 1), ('different-oj-local', 1), ('doubt', 1), ('dynamic programming', 1), ('easier to understand', 1), ('easy to follow code', 1), ('easy to understand', 1), ('easy understanding', 1), ('easy undestanding', 1), ('easy-explaination', 1), ('easy-solition', 1), ('easysolution', 1), ('efficient solution', 1), ('error', 1), ('exceeded', 1), ('expected-output', 1), ('explained', 1), ('explanation', 1), ('explanation of logic', 1), ('fastest c++ solution', 1), ('fun', 1), ('general', 1), ('give stars and subscribe', 1), ('hashmap java', 1), ('idea', 1), ('incorrect-expected-output', 1), ('incorrect-test-case', 1), ('innovative', 1), ('iterator', 1), ('js', 1), ('js javascript', 1), ('json', 1), ('limit-exceeded', 1), ('limited', 1), ('linear time', 1), ('linklist', 1), ('list-slicing', 1), ('logic', 1), ('map-stl', 1), ('mappedlinkedlist', 1), ('microsoft-india', 1), ('mru', 1), ('node', 1), ('object-oriented', 1), ('objects', 1), ('optimization', 1), ('ordered map', 1), ('output', 1), ('php', 1), ('priority queue', 1), ('python-dictionary', 1), ('pythonic', 1), ('ravip18596', 1), ('reentrantlock', 1), ('reference-count', 1), ('references', 1), ('runtime', 1), ('saravana', 1), ('self explanatory', 1), ('self-explanatory', 1), ('sets', 1), ('shared-answer', 1), ('short solution', 1), ('simple clear c++ solution', 1), ('simplest', 1), ('single-linked-list', 1), ('singly-linked-list', 1), ('solution-python', 1), ('solution-sharing-c', 1), ('solution-sharing-cpp', 1), ('space', 1), ('space complexity', 1), ('space-complexity', 1), ('space-efficient', 1), ('splice', 1), ('stack', 1), ('step by step', 1), ('swift debugging', 1), ('testcase error', 1), ('thank', 1), ('thread-safe', 1), ('time complexity', 1), ('tree', 1), ('try-except', 1), ('two pointers', 1), ('two-methods', 1), ('two-pointer', 1), ('two-pointers', 1), ('understandable', 1), ('unique solution', 1), ('uthash', 1), ('vector', 1), ('video interview', 1), ('video-explanation', 1), ('well commented', 1), ('well-commented', 1), ('whiteboard', 1), ('with-comments', 1), ('wrong answer', 1), ('wrong-function-statement', 1), ('you', 1), ('zea7ot', 1)]"
145,Binary Tree Postorder Traversal,https://leetcode.com/problems/binary-tree-postorder-traversal,"Given the root of a binary tree, return the postorder traversal of its nodes' values.","['stack', 'tree']",Medium,2565,118,826190,481390,"[""Binary Tree Inorder Traversal"", ""N-ary Tree Postorder Traversal""]","[('java', 107), ('iterative', 82), ('stack', 67), ('python', 56), ('cpp', 53), ('c++', 50), ('recursive', 39), ('post-order-traversal', 28), ('postorder-traversal', 26), ('solution', 25), ('python 3', 24), ('binary-tree', 22), ('recursion', 22), ('javascript', 17), ('stacks', 17), ('easy-understanding', 16), ('iteratively', 16), ('java-solution', 14), ('postorder', 14), ('cpp solution', 13), ('python3', 13), ('morris-traversal', 12), ('simple', 10), ('tree-traversal', 10), ('tree', 8), ('c#', 7), ('c++ code', 6), ('easy-understand', 6), ('improve', 6), ('accepted', 5), ('dfs', 5), ('golang', 5), ('postorder traversal', 5), ('pre-order', 5), ('easy', 4), ('iterative solution', 4), ('preorder-iterative', 4), ('readable', 4), ('recursive easy', 4), ('recusion', 4), ('run-time-error', 4), ('swift', 4), ('time-complexity', 4), ('binary tree', 3), ('clean code', 3), ('easy-undestand', 3), ('easytounderstand', 3), ('inorder iterative', 3), ('iterative-postorder', 3), ('iterator', 3), ('one-stack', 3), ('php', 3), ('preorder-traversal', 3), ('python2', 3), ('simple solution', 3), ('trees', 3), ('0ms', 2), ('100 space', 2), ('algorithms', 2), ('beginner friendly', 2), ('bfs', 2), ('bst', 2), ('c++11', 2), ('constant-space', 2), ('count', 2), ('deque', 2), ('easiest', 2), ('easy understanding', 2), ('easy-to-understand', 2), ('explained', 2), ('fast', 2), ('fast and simple', 2), ('hash table', 2), ('hashmap', 2), ('inorder', 2), ('inorder-traversal', 2), ('iterative-dfs', 2), ('itereative', 2), ('javascript solution', 2), ('map', 2), ('medium', 2), ('morris traversal', 2), ('non-recursive', 2), ('post-order', 2), ('postoder-iterative', 2), ('preorder', 2), ('rajat', 2), ('recurision', 2), ('recursively', 2), ('ruby', 2), ('rust', 2), ('scala', 2), ('short', 2), ('simple clear c++ solution', 2), ('stack-based', 2), ('time-limit-exceeded', 2), ('two-methods', 2), ('vector', 2), ('wrong-answer', 2), ('#0ms', 1), ('#c++', 1), ('#codeboy', 1), ('#codegirl', 1), ('#cpp', 1), ('#easy-understanding', 1), ('#easysolution', 1), ('#fastest', 1), ('#python', 1), ('#python 3', 1), ('#recursive', 1), ('#simplecode', 1), ('0ms runtime', 1), ('0ms-solution', 1), ('100', 1), ('100 beat', 1), ('100 memory', 1), ('100 speed', 1), ('1ms runtime', 1), ('accumulator', 1), ('amazon', 1), ('awesome samriddhi', 1), ('best', 1), ('best-solution-ever', 1), ('best-submission', 1), ('binary', 1), ('block', 1), ('c', 1), ('c++ solution', 1), ('clarify', 1), ('clean', 1), ('clean-code', 1), ('clean-efficient-code', 1), ('clear-understanding', 1), ('commented', 1), ('comments', 1), ('compile', 1), ('compile-error', 1), ('concise', 1), ('concise-solution', 1), ('counting', 1), ('cpp 100', 1), ('cpp doubt', 1), ('cpp easy', 1), ('csharp', 1), ('deep-first-search', 1), ('design', 1), ('dfs-bfs', 1), ('dfs-iterative', 1), ('dfs-non-recursive', 1), ('difficulty', 1), ('direct-one-stack-iterative', 1), ('dynamic programming', 1), ('easy to understand', 1), ('easy understand', 1), ('easy-solution', 1), ('easysolution', 1), ('efficient', 1), ('error', 1), ('explain', 1), ('explaination', 1), ('explained solution', 1), ('fast-solution', 1), ('faster than 100', 1), ('faster than 99.25', 1), ('fastest c++ solution', 1), ('fold', 1), ('functional', 1), ('further-optimization', 1), ('go-solution', 1), ('golang-solution', 1), ('hard', 1), ('help', 1), ('in-order', 1), ('in-order-traversal', 1), ('interview-friendly', 1), ('intuitive', 1), ('iterate', 1), ('iteration', 1), ('iteration vs recursion', 1), ('iterative postorder', 1), ('iterative traversal', 1), ('iterative vs recursive', 1), ('iterative way', 1), ('iterators', 1), ('java ac solution', 1), ('javascriptes6', 1), ('js javascript', 1), ('kotlin', 1), ('kotlinvim', 1), ('learning', 1), ('line', 1), ('linear-space', 1), ('linear-time', 1), ('logical thinking', 1), ('meiyaowen', 1), ('memory', 1), ('memory-limit-exceeded', 1), ('memory-limited-exceeded', 1), ('microsoft', 1), ('morris', 1), ('nested', 1), ('no-reverse', 1), ('not', 1), ('pass by reference', 1), ('post order traversal', 1), ('postfix expression', 1), ('preorder traversal', 1), ('python 2', 1), ('python3.8', 1), ('question', 1), ('reccursion', 1), ('recursion vs iteration', 1), ('recursive solution', 1), ('recursive vs iterative', 1), ('reusable-template', 1), ('reverse', 1), ('reverse list', 1), ('ritik', 1), ('runtime-error', 1), ('self-explanatory', 1), ('set', 1), ('sets', 1), ('simpe', 1), ('simple-solution', 1), ('simplest', 1), ('solution-share', 1), ('solution-sharing-cpp', 1), ('solution-sharing-java', 1), ('solved', 1), ('space-complexity', 1), ('space-optimized', 1), ('special', 1), ('state', 1), ('state-machine', 1), ('straightforward', 1), ('summary', 1), ('template', 1), ('test-case', 1), ('thinking process', 1), ('traversal', 1), ('traversal tree', 1), ('traverse', 1), ('tree traversal', 1), ('true post-order', 1), ('two-lines', 1), ('two-stack', 1), ('typescript', 1), ('unique solution', 1), ('video', 1), ('weird-testcase', 1), ('without-stack', 1), ('works-on-my-machine', 1), ('wrong', 1), ('yield return', 1), ('youtube', 1)]"
144,Binary Tree Preorder Traversal,https://leetcode.com/problems/binary-tree-preorder-traversal,"Given the root of a binary tree, return the preorder traversal of its nodes' values.","['stack', 'tree']",Medium,2251,89,1084931,629167,"[""Binary Tree Inorder Traversal"", ""Verify Preorder Sequence in Binary Search Tree"", ""N-ary Tree Preorder Traversal""]","[('java', 78), ('iterative', 68), ('cpp', 59), ('python', 52), ('c++', 46), ('recursive', 42), ('stack', 34), ('recursion', 25), ('javascript', 24), ('python 3', 21), ('solution', 19), ('binary-tree', 18), ('preorder traversal', 15), ('java-solution', 14), ('stacks', 14), ('morris-traversal', 13), ('wrong-answer', 11), ('cpp solution', 10), ('iteratively', 10), ('c#', 9), ('easy-understanding', 9), ('tree-traversal', 9), ('pre-order', 8), ('preorder-traversal', 8), ('python3', 8), ('golang', 7), ('preorder', 7), ('dfs', 6), ('easy', 6), ('easy-understand', 6), ('preorder-iterative', 6), ('recurision', 6), ('tree', 6), ('accepted', 5), ('0ms', 4), ('concise', 4), ('csharp', 4), ('easiest', 4), ('easy-undestand', 4), ('golang-solution', 4), ('iteration', 4), ('iteratve-recursive', 4), ('recursively', 4), ('run-time-error', 4), ('runtime-error', 4), ('stack-based', 4), ('swift', 4), ('binary tree', 3), ('constant-space', 3), ('cpp easy', 3), ('easy-to-understand', 3), ('easytounderstand', 3), ('go', 3), ('go-solution', 3), ('iterative solution', 3), ('preorder-recursion', 3), ('readable', 3), ('scala', 3), ('simple solution', 3), ('0ms runtime', 2), ('algorithms', 2), ('beats 100', 2), ('c', 2), ('c++ code', 2), ('c++11', 2), ('dfs-non-recursive', 2), ('error', 2), ('fast', 2), ('fast and simple', 2), ('fasterthan100', 2), ('java ac solution', 2), ('rajat', 2), ('recusion', 2), ('ruby', 2), ('short', 2), ('simple', 2), ('test-case', 2), ('traversal', 2), ('trees', 2), ('works-on-my-machine', 2), ('#codeboy', 1), ('#codegirl', 1), ('#easy-understanding', 1), ('#easysolution', 1), ('#javascript', 1), ('#python', 1), ('#python 3', 1), ('#recursive', 1), ('#stack', 1), ('100 memory', 1), ('100 space', 1), ('1ms runtime', 1), ('4ms', 1), ('amazon', 1), ('amazon interview', 1), ('beauty', 1), ('beginner friendly', 1), ('bfs', 1), ('binary-search', 1), ('bug', 1), ('c++ solution', 1), ('c++14', 1), ('callstack', 1), ('clear', 1), ('code with explanation', 1), ('compile', 1), ('cpp-solution', 1), ('deep-first-search', 1), ('dfs recursive', 1), ('dfs simple solution', 1), ('dfs solution', 1), ('dfs-iterative', 1), ('divide and conquer', 1), ('easy understanding', 1), ('es6', 1), ('explained', 1), ('explanation', 1), ('explanations4problem', 1), ('faster-than-100', 1), ('fastest', 1), ('fastest c++ solution', 1), ('fastest solution', 1), ('fold', 1), ('global', 1), ('go lang', 1), ('hashmap', 1), ('in-order', 1), ('inorder', 1), ('inorder-traversal', 1), ('iterate', 1), ('iterative approch', 1), ('iterative vs recursive', 1), ('iterative way', 1), ('iterative-preorder', 1), ('iterative-solution', 1), ('itereative', 1), ('java solution', 1), ('javascipt', 1), ('javascrip', 1), ('javascriptes6', 1), ('js javascript', 1), ('leetcode', 1), ('less than 99.63', 1), ('level-order-traversal', 1), ('linear-space', 1), ('linear-time', 1), ('medium', 1), ('meiyaowen', 1), ('memory-limit-exceeded', 1), ('microsoft', 1), ('morristraversal', 1), ('mycodeschool', 1), ('no recursion', 1), ('no stack', 1), ('non-recursive', 1), ('non-stack', 1), ('one line', 1), ('oneliner', 1), ('own-solution', 1), ('pairs', 1), ('palantir', 1), ('php', 1), ('post-order', 1), ('postorder', 1), ('postorder-traversal', 1), ('pre-order traversal', 1), ('preoder', 1), ('preorder recursive', 1), ('python2', 1), ('python3.8', 1), ('pythonpython3', 1), ('queue', 1), ('reccursion', 1), ('recrusive', 1), ('recursive solution', 1), ('recursive-descent', 1), ('recursive-dfs', 1), ('recurssion', 1), ('recusive', 1), ('ritik', 1), ('rust', 1), ('samriddhi', 1), ('simpe', 1), ('simple preorder', 1), ('solution-sharing-cpp', 1), ('stack-implementation', 1), ('swift5', 1), ('syntax', 1), ('template', 1), ('tle', 1), ('traversal tree', 1), ('traverse-a-tree', 1), ('tree traversal', 1), ('tree traversal warmup', 1), ('typeerror', 1), ('typescript', 1), ('vector-operation', 1), ('video', 1), ('without-recursion', 1), ('wrong-execution-result', 1), ('xjq', 1), ('yield return', 1), ('youtube', 1)]"
143,Reorder List,https://leetcode.com/problems/reorder-list,"You are given the head of a singly linked-list. The list can be represented as:


L0 → L1 → … → Ln - 1 → Ln


Reorder the list to be on the following form:


L0 → Ln → L1 → Ln - 1 → L2 → Ln - 2 → …


You may not modify the values in the list's nodes. Only nodes themselves may be changed.",['linked-list'],Medium,3092,147,777462,321089,[],"[('java', 77), ('python', 49), ('c++', 43), ('cpp', 35), ('linked-list', 33), ('python 3', 25), ('javascript', 23), ('solution', 20), ('stack', 17), ('python3', 16), ('recursion', 16), ('deque', 12), ('linked list', 12), ('easy-understanding', 9), ('cpp solution', 8), ('linear time', 8), ('time-limit-exceeded', 8), ('c#', 7), ('java-solution', 7), ('two-pointers', 7), ('accepted', 6), ('iterative', 6), ('recursive', 6), ('reverse list', 6), ('time-complexity', 6), ('c', 5), ('easytounderstand', 5), ('golang', 5), ('reverse-list', 5), ('swift', 5), ('wrong-answer', 5), ('c++ code', 4), ('easy', 4), ('improve', 4), ('in-place', 4), ('linkedlist', 4), ('linkedlists', 4), ('list', 4), ('reverse', 4), ('reverse linked list', 4), ('space-complexity', 4), ('stack-based', 4), ('two pointers', 4), ('constant space', 3), ('cpp easy', 3), ('easy-to-understand', 3), ('easy-understand', 3), ('kotlin', 3), ('queue', 3), ('reorder', 3), ('reorder list', 3), ('reorder-list', 3), ('stacks', 3), ('two-pointer', 3), ('2 pointers', 2), ('amazon', 2), ('arraylist', 2), ('best-submission', 2), ('c++ solution', 2), ('clean-code', 2), ('cpp-solution', 2), ('dfs', 2), ('explained', 2), ('explanation', 2), ('go', 2), ('inplace', 2), ('iteratively', 2), ('javascript solution', 2), ('js', 2), ('linked-lists', 2), ('listnode', 2), ('merge', 2), ('readable', 2), ('recusion', 2), ('ruby', 2), ('run-time-error', 2), ('simple', 2), ('space-non', 2), ('typescript', 2), ('vector', 2), ('#python', 1), ('#simplecode', 1), ('#simpleidea', 1), ('2ms', 1), ('accepted solution', 1), ('algorithms', 1), ('array', 1), ('array of nodes', 1), ('beat 99', 1), ('beginner friendly', 1), ('best', 1), ('bidirectional', 1), ('c code', 1), ('c++ easy to understand', 1), ('c++11', 1), ('callback', 1), ('clarification', 1), ('clear solution', 1), ('commented', 1), ('comments added', 1), ('concise', 1), ('concise-solution', 1), ('consice', 1), ('constant-space', 1), ('divide and conquer', 1), ('easy-solution', 1), ('easy-undestand', 1), ('esay', 1), ('expalanation', 1), ('explanations', 1), ('fast', 1), ('fast and slow ptrs', 1), ('fast slow pointer', 1), ('fast-slow-pointers', 1), ('fully commented', 1), ('golang-solution', 1), ('hare', 1), ('hash table', 1), ('in-palce', 1), ('invert', 1), ('iteration', 1), ('iteration vs recursion', 1), ('iterative vs recursive', 1), ('java ac solution', 1), ('java solution', 1), ('javasccript', 1), ('javascript recursive', 1), ('js javascript', 1), ('kotlinvim', 1), ('large-input', 1), ('less memory', 1), ('linear', 1), ('linear-time', 1), ('linked lists', 1), ('map', 1), ('meiyaowen', 1), ('memory-limit-exceeded', 1), ('merge-linklist', 1), ('microsoft', 1), ('microsoft-india', 1), ('middle of the linked list', 1), ('modular', 1), ('n', 1), ('n square complexity', 1), ('nomodifications', 1), ('on', 1), ('one-pass', 1), ('optimised', 1), ('optimization', 1), ('pointers', 1), ('postorder-traversal', 1), ('pre-process', 1), ('pyhon', 1), ('pyhton', 1), ('pyhton3', 1), ('python2', 1), ('python3.8', 1), ('question', 1), ('queue and linkedlist', 1), ('recursion vs iteration', 1), ('recursive solution', 1), ('recursive vs iterative', 1), ('recusive', 1), ('reorder list linkedlist', 1), ('reorderlist', 1), ('resursive', 1), ('rust', 1), ('saravana', 1), ('self explanatory', 1), ('share-solution', 1), ('short solution', 1), ('short-solution', 1), ('simple solution', 1), ('simplest', 1), ('singly-linked-list', 1), ('slow fast pointer', 1), ('slowfast pointers', 1), ('solution-python', 1), ('space', 1), ('space-efficient', 1), ('split-list', 1), ('stack-over-flow', 1), ('stackoverflow', 1), ('swift5', 1), ('swiftsolution', 1), ('test-case', 1), ('time', 1), ('time-limit-exceeded-python', 1), ('tortoise and the hare', 1), ('troubleshooting', 1), ('updowndota', 1), ('video', 1), ('video explaination', 1), ('video solution', 1), ('video-explanation', 1), ('visualization', 1), ('well-commented', 1), ('wrong', 1), ('wrong output', 1), ('wrong-judge', 1)]"
142,Linked List Cycle II,https://leetcode.com/problems/linked-list-cycle-ii,"Given a linked list, return the node where the cycle begins. If there is no cycle, return null.

There is a cycle in a linked list if there is some node in the list that can be reached again by continuously following the next pointer. Internally, pos is used to denote the index of the node that tail's next pointer is connected to. Note that pos is not passed as a parameter.

Notice that you should not modify the linked list.","['linked-list', 'two-pointers']",Medium,4091,307,1105951,444026,"[""Linked List Cycle"", ""Find the Duplicate Number""]","[('java', 68), ('python', 53), ('c++', 39), ('two-pointers', 39), ('cpp', 36), ('python 3', 36), ('javascript', 23), ('floyd cycle detection', 21), ('java-solution', 20), ('linked-list-cycle', 19), ('linked-list', 15), ('solution', 15), ('easy-understanding', 11), ('cpp solution', 9), ('python3', 9), ('two pointers', 9), ('time-complexity', 8), ('time-limit-exceeded', 8), ('c#', 6), ('easy-understand', 6), ('golang', 6), ('hashset', 6), ('swift', 6), ('c', 5), ('constant-space', 5), ('easy-to-understand', 5), ('easy-undestand', 5), ('explained', 5), ('floyd-algorithm', 5), ('linked list', 5), ('linkedlists', 5), ('set', 5), ('constant space', 4), ('cycle', 4), ('easy', 4), ('easytounderstand', 4), ('floyd', 4), ('kotlin', 4), ('linkedlist', 4), ('simple', 4), ('tortoise-and-hare-algo', 4), ('two-pointer', 4), ('2 pointer approach', 3), ('hashmap', 3), ('java ac solution', 3), ('javascript solution', 3), ('linear time', 3), ('linear-time', 3), ('linked list cycle', 3), ('map', 3), ('sets', 3), ('space-complexity', 3), ('swift5', 3), ('tortoise-hare', 3), ('0ms', 2), ('2 pointers', 2), ('clean', 2), ('comments', 2), ('cpp easy', 2), ('cycle-detection', 2), ('dictionary', 2), ('explaination', 2), ('explained solution', 2), ('explanations', 2), ('fast and slow ptrs', 2), ('fastest', 2), ('floyd cycle', 2), ('general', 2), ('hash', 2), ('hash table', 2), ('improve', 2), ('iterative', 2), ('javascrip', 2), ('loop', 2), ('map-stl', 2), ('pointers', 2), ('python2', 2), ('pythonpython3', 2), ('recursive', 2), ('run-time-error', 2), ('runtime-error', 2), ('scala', 2), ('simple clear c++ solution', 2), ('testcase-wrong', 2), ('tiny', 2), ('tle', 2), ('two pointer technique', 2), ('twopointer', 2), ('video-explanation', 2), ('100 faster runtime', 1), ('100 memory', 1), ('142', 1), ('amazon', 1), ('amazon interview', 1), ('amazon online assesment', 1), ('amazon sde2', 1), ('beats 100', 1), ('beginner friendly', 1), ('best-explanation', 1), ('brent', 1), ('brute force', 1), ('c programming', 1), ('c sharp', 1), ('c-sharp', 1), ('c++ code', 1), ('c++ easy to understand', 1), ('c++ solution simple', 1), ('clean-code', 1), ('codedecks', 1), ('comments added', 1), ('comments-added', 1), ('concept first then code', 1), ('constant memory', 1), ('csharp', 1), ('cycle detection', 1), ('data', 1), ('debug', 1), ('deduction', 1), ('demonstration', 1), ('detailed', 1), ('dict', 1), ('dictionaries', 1), ('easy understand', 1), ('easysolution', 1), ('eckotan', 1), ('explanation', 1), ('fast slow pointer', 1), ('fast-solution', 1), ('faster than 95', 1), ('floyd-warshall', 1), ('floyds tortoise and hare', 1), ('go', 1), ('hare and turtle', 1), ('hare-and-turtle', 1), ('hashing', 1), ('hide', 1), ('id', 1), ('in-place', 1), ('intuitive', 1), ('intutive', 1), ('iterate', 1), ('iteration', 1), ('iterative approch', 1), ('java 8', 1), ('java solution using dfs', 1), ('kotlinvim', 1), ('linear', 1), ('linked', 1), ('linkedlistcycleii', 1), ('linklist', 1), ('list', 1), ('logical thinking', 1), ('loop-detection', 1), ('math', 1), ('math-solution', 1), ('microsoft', 1), ('missing-test-case', 1), ('no-extra-space', 1), ('no-flag', 1), ('notes', 1), ('o1 space', 1), ('optimal', 1), ('percent', 1), ('pointer', 1), ('pointercomparison', 1), ('pyhon', 1), ('pyhton 3', 1), ('python perfomance', 1), ('questions', 1), ('recurision', 1), ('recursion', 1), ('requirements', 1), ('ruby', 1), ('runner', 1), ('self explanatory', 1), ('short', 1), ('single pass', 1), ('slow fast pointer', 1), ('slow-fast-pointers', 1), ('slowfast pointers', 1), ('solution-sharing-cpp', 1), ('solution-sharingjava', 1), ('space-complexity-1', 1), ('space-efficient', 1), ('tail-recursion', 1), ('tail-recursive', 1), ('tailrec', 1), ('test-case', 1), ('time-optimized', 1), ('tortoise and hare', 1), ('tortoise and the hare', 1), ('two pointer', 1), ('typescript', 1), ('ugly', 1), ('ultra easy', 1), ('unique', 1), ('upvote', 1), ('video', 1), ('video explanation', 1), ('video solution', 1), ('visualization', 1), ('well explained', 1), ('wrong-answer', 1)]"
141,Linked List Cycle,https://leetcode.com/problems/linked-list-cycle,"Given head, the head of a linked list, determine if the linked list has a cycle in it.

There is a cycle in a linked list if there is some node in the list that can be reached again by continuously following the next pointer. Internally, pos is used to denote the index of the node that tail's next pointer is connected to. Note that pos is not passed as a parameter.

Return true if there is a cycle in the linked list. Otherwise, return false.","['linked-list', 'two-pointers']",Easy,4414,604,2087093,901563,"[""Linked List Cycle II"", ""Happy Number""]","[('java', 86), ('python', 85), ('c++', 83), ('cpp', 58), ('python 3', 49), ('two-pointers', 43), ('java-solution', 31), ('javascript', 25), ('linked-list-cycle', 24), ('linked-list', 20), ('easy-understanding', 18), ('python3', 18), ('easy', 16), ('solution', 16), ('simple', 14), ('cpp solution', 11), ('floyd cycle detection', 11), ('c#', 10), ('easy-to-understand', 10), ('easy-understand', 10), ('linkedlists', 10), ('c', 8), ('constant-space', 8), ('two pointers', 8), ('cycle', 7), ('explained', 7), ('fast and simple', 7), ('golang', 7), ('hashmap', 7), ('swift', 7), ('fast', 6), ('fastest', 6), ('iterative', 6), ('two-pointer', 6), ('constant space', 5), ('cycle detection', 5), ('golang-solution', 5), ('hashset', 5), ('linked list', 5), ('set', 5), ('simple solution', 5), ('2 pointers', 4), ('c code', 4), ('constant memory', 4), ('dictionary', 4), ('go', 4), ('kotlin', 4), ('python2', 4), ('time-limit-exceeded', 4), ('two pointer', 4), ('twopointer', 4), ('video-explanation', 4), ('#javascript', 3), ('2pointer', 3), ('algorithm', 3), ('cpp easy', 3), ('easiest', 3), ('easy-undestand', 3), ('easytounderstand', 3), ('hare and turtle', 3), ('hash table', 3), ('linear time', 3), ('linkedlist', 3), ('python3.8', 3), ('recursion', 3), ('short', 3), ('slowfast pointers', 3), ('space-complexity', 3), ('tortoise-and-hare-algo', 3), ('100 faster runtime', 2), ('100 space', 2), ('100 speed', 2), ('2 pointer', 2), ('algorithms', 2), ('beginner friendly', 2), ('clean-code', 2), ('constant', 2), ('easy understanding', 2), ('exception', 2), ('fast-slow-pointers', 2), ('fast-solution', 2), ('floyd', 2), ('floyd cycle find', 2), ('hashtable', 2), ('intuitive', 2), ('javascript solution', 2), ('linear-time', 2), ('linked list cycle', 2), ('map', 2), ('optimized', 2), ('ruby', 2), ('run-time-error', 2), ('runtime-error', 2), ('scala', 2), ('sets', 2), ('slow fast pointer', 2), ('solution-sharing-cpp', 2), ('solved', 2), ('time-complexity', 2), ('trick', 2), ('two pointer approach', 2), ('two-pointer method', 2), ('twopointers', 2), ('video', 2), ('wrong-answer', 2), ('#easy-understand', 1), ('#floyd', 1), ('#python', 1), ('#python3', 1), ('#set', 1), ('#two-pointers', 1), ('0ms', 1), ('0ms-solution', 1), ('100 faster', 1), ('100 memory', 1), ('2-pointer', 1), ('99 faster', 1), ('accepted', 1), ('advice', 1), ('beating-90-submissions', 1), ('beginner', 1), ('beginnerfriendly', 1), ('beginners', 1), ('best-submission', 1), ('bit-manipulation', 1), ('both', 1), ('c programming', 1), ('c++ easy to understand', 1), ('c++ solution', 1), ('chasing pointers', 1), ('cheating', 1), ('clean code', 1), ('clear-understanding', 1), ('coding challenge', 1), ('comments', 1), ('concise', 1), ('concise-solution', 1), ('cpp with explanation', 1), ('csharp', 1), ('ctci', 1), ('cycle detect', 1), ('data structure', 1), ('data structures', 1), ('debugging', 1), ('destructive', 1), ('dict', 1), ('dictionaries', 1), ('dictonary', 1), ('different approach', 1), ('discussion', 1), ('doubts', 1), ('dynamic programming', 1), ('dynamic typing', 1), ('dynamic-programming', 1), ('easily understood', 1), ('easy to understand', 1), ('easy understand', 1), ('easy-undesrtanding', 1), ('easysolution', 1), ('editorial', 1), ('efficient', 1), ('error', 1), ('explanatory comments', 1), ('fast and slow ptrs', 1), ('fast slow pointer', 1), ('faster', 1), ('fasterthan100', 1), ('fastest java slution', 1), ('floyds hare and tortoise', 1), ('flyod warshall', 1), ('funny', 1), ('go-solution', 1), ('good variable names', 1), ('hack', 1), ('hare-and-turtle', 1), ('hash', 1), ('hashing', 1), ('help', 1), ('if-else', 1), ('improve', 1), ('in-place', 1), ('incorrect-test-case', 1), ('input', 1), ('interview', 1), ('interview questions', 1), ('interviews', 1), ('iteration', 1), ('iteratively', 1), ('java solution', 1), ('java-8', 1), ('javascrip', 1), ('kotlin-solution', 1), ('linear memory', 1), ('linked', 1), ('linked lists', 1), ('linked-list-palindrome', 1), ('linkedlistcycle', 1), ('list', 1), ('logic', 1), ('logic-solution', 1), ('memory manipulation', 1), ('memory-limit-exceeded', 1), ('mind blown', 1), ('mrmagician', 1), ('naive', 1), ('new approach', 1), ('new-idea', 1), ('o1', 1), ('o1 space', 1), ('one-loop', 1), ('one-pass', 1), ('php', 1), ('php solution', 1), ('pointer', 1), ('pointer approach', 1), ('pointers', 1), ('pseudocode', 1), ('question', 1), ('readable', 1), ('recurision', 1), ('recusion', 1), ('reverse-list', 1), ('runner', 1), ('self explanatory', 1), ('similar-problems', 1), ('simple clear c++ solution', 1), ('simple-java-sol', 1), ('single pointer', 1), ('single traversal', 1), ('slow', 1), ('slow-fast-pointers', 1), ('slowfastpointer', 1), ('smallest', 1), ('solutio', 1), ('solution-sharing-python', 1), ('solution-sharingjava', 1), ('space', 1), ('space-efficient', 1), ('stacks', 1), ('stl', 1), ('string', 1), ('structured code', 1), ('swift5', 1), ('tail-recursion', 1), ('tail-recursive', 1), ('tailrec', 1), ('time', 1), ('tortoise and hare', 1), ('tortoise-hare', 1), ('try-except', 1), ('two pointer technique', 1), ('understandable', 1), ('upvote', 1), ('without floyds algorithm', 1), ('without hashtable', 1), ('wrong', 1)]"
140,Word Break II,https://leetcode.com/problems/word-break-ii,"Given a string s and a dictionary of strings wordDict, add spaces in s to construct a sentence where each word is a valid dictionary word. Return all such possible sentences in any order.

Note that the same word in the dictionary may be reused multiple times in the segmentation.","['dynamic-programming', 'backtracking']",Hard,3126,445,900908,321688,"[""Word Break"", ""Concatenated Words""]","[('java', 75), ('python', 54), ('dynamic-programming', 47), ('backtracking', 46), ('memoization', 45), ('cpp', 41), ('c++', 37), ('dynamic programming', 35), ('dfs', 32), ('dp', 23), ('recursion', 22), ('python 3', 21), ('solution', 20), ('trie', 18), ('javascript', 16), ('word-break', 11), ('python3', 9), ('time-limit-exceeded', 9), ('c#', 8), ('easy-understanding', 8), ('tle', 8), ('golang', 7), ('recursive', 7), ('bfs', 6), ('memoziation', 6), ('cache', 5), ('cpp solution', 5), ('dfs simple solution', 5), ('easy', 5), ('easy-understand', 5), ('memory-limit-exceeded', 5), ('simple', 5), ('test-case', 5), ('tries', 5), ('accepted', 4), ('backtrack', 4), ('dfs solution', 4), ('string', 4), ('word break 2', 4), ('wrong-answer', 4), ('100 speed', 3), ('concise', 3), ('depth first search', 3), ('dfs with memo', 3), ('easy-to-understand', 3), ('easytounderstand', 3), ('explanation', 3), ('fast-solution', 3), ('help', 3), ('java ac solution', 3), ('java-solution', 3), ('run-time-error', 3), ('scala', 3), ('swift', 3), ('trie-dfs', 3), ('wordbreak', 3), ('0ms', 2), ('2ms', 2), ('brute-force', 2), ('clean code', 2), ('complexity', 2), ('complexity-analysis', 2), ('csharp', 2), ('easy-undestand', 2), ('explained', 2), ('fast', 2), ('golang-solution', 2), ('hashmap', 2), ('improve', 2), ('javascript solution', 2), ('kmp', 2), ('memorization', 2), ('recurision', 2), ('recusion', 2), ('rust', 2), ('set', 2), ('simple solution', 2), ('testcase-wrong', 2), ('time-complexity', 2), ('#oldschool', 1), ('#verbose', 1), ('100 memory', 1), ('3ms-runtime', 1), ('4ms', 1), ('94.04', 1), ('array', 1), ('backtracking dfs', 1), ('best-solution-ever', 1), ('bottom up dp', 1), ('bottoms-up', 1), ('bug', 1), ('c++ code', 1), ('c++ solution', 1), ('chinese', 1), ('cleanest', 1), ('combinatories', 1), ('commented', 1), ('comments', 1), ('consice', 1), ('cpp easy', 1), ('data structures', 1), ('deque', 1), ('detailed explanation', 1), ('dfs recursive', 1), ('dfs-topdown', 1), ('dfs-tree', 1), ('dfs-with-prunning', 1), ('diagram', 1), ('dictionarytree', 1), ('dp c++', 1), ('dp-programming', 1), ('dsf', 1), ('dynamic programmin', 1), ('dynamicprogramming', 1), ('dynammic programming', 1), ('easiest', 1), ('easiest solution', 1), ('easy understanding', 1), ('efficient', 1), ('error', 1), ('explained solution', 1), ('fasterthan100', 1), ('feedback', 1), ('fronttrackiing', 1), ('fully commented', 1), ('fun', 1), ('functional', 1), ('generators', 1), ('give stars and subscribe', 1), ('go', 1), ('google-onsite', 1), ('hash-function', 1), ('intuitive', 1), ('intutive', 1), ('iterative', 1), ('java solution sharing', 1), ('javacript', 1), ('javascript backtrack', 1), ('js', 1), ('july challenge', 1), ('k1ch', 1), ('kotlin', 1), ('kotlinvim', 1), ('lte', 1), ('made-easy', 1), ('map', 1), ('memo', 1), ('memoir', 1), ('memorisation', 1), ('memorized-dfs', 1), ('missing-test-case', 1), ('n3+m', 1), ('non-recursive', 1), ('optimal', 1), ('optimal solution', 1), ('order-problem', 1), ('output-limit-exceeded', 1), ('php', 1), ('prefix', 1), ('preprocessing', 1), ('python dfs', 1), ('pythonic', 1), ('question-not-clear', 1), ('recursion palindrome', 1), ('recursive easy', 1), ('recursive solution', 1), ('recursive-dfs', 1), ('redable', 1), ('ruby', 1), ('share-solution', 1), ('short', 1), ('solution-sharing-cpp', 1), ('straightforward', 1), ('string parsing', 1), ('strings', 1), ('testcases', 1), ('thought process', 1), ('thought-process', 1), ('time', 1), ('time-complexity-o', 1), ('time-limit-exceeded-java', 1), ('top down', 1), ('top down dp', 1), ('top-down', 1), ('trie explained', 1), ('trie-tree', 1), ('unique', 1), ('visual', 1), ('well-commented', 1), ('without-recursion', 1)]"
139,Word Break,https://leetcode.com/problems/word-break,"Given a string s and a dictionary of strings wordDict, return true if s can be segmented into a space-separated sequence of one or more dictionary words.

Note that the same word in the dictionary may be reused multiple times in the segmentation.",['dynamic-programming'],Medium,6483,310,1787669,751782,"[""Word Break II""]","[('dynamic programming', 123), ('java', 88), ('python', 79), ('dp', 69), ('dynamic-programming', 58), ('c++', 56), ('memoization', 54), ('cpp', 42), ('trie', 39), ('javascript', 36), ('dfs', 30), ('python 3', 28), ('recursion', 21), ('golang', 19), ('python3', 19), ('solution', 18), ('bfs', 17), ('easy-understand', 15), ('java-solution', 15), ('wrong-answer', 13), ('recursive', 10), ('simple', 10), ('time-complexity', 10), ('word-break', 9), ('backtracking', 8), ('c#', 8), ('easy-understanding', 7), ('golang-solution', 7), ('easy', 6), ('easy-undestand', 6), ('iterative', 6), ('test-case', 6), ('top down dp', 6), ('explanation', 5), ('go-solution', 5), ('simple solution', 5), ('swift', 5), ('time-limit-exceeded', 5), ('cpp solution', 4), ('dp-techqique', 4), ('explained', 4), ('javascript solution', 4), ('optimized', 4), ('ruby', 4), ('trie-tree', 4), ('tries', 4), ('unorderedset', 4), ('word break', 4), ('bottom-up-algorithm', 3), ('breadth first search', 3), ('brute force', 3), ('cpp easy', 3), ('dfs simple solution', 3), ('easytounderstand', 3), ('fast', 3), ('go', 3), ('help', 3), ('kotlin', 3), ('pythonpython3', 3), ('recurision', 3), ('recusion', 3), ('recusive', 3), ('rust', 3), ('testcase-wrong', 3), ('top-down', 3), ('#dynamic-programming', 2), ('100 speed', 2), ('accepted', 2), ('beats 100', 2), ('bottom up dp', 2), ('bottom-up', 2), ('c++ code', 2), ('clear', 2), ('code comments', 2), ('commented', 2), ('csharp', 2), ('depth first search', 2), ('detailed explanation', 2), ('dp-programming', 2), ('dynamicprogramming', 2), ('easy to understand', 2), ('fast-solution', 2), ('hash table', 2), ('hashing', 2), ('hashmap', 2), ('kmp', 2), ('memo', 2), ('memoziation', 2), ('php', 2), ('pythonic', 2), ('queue', 2), ('recursion memoization', 2), ('recursively', 2), ('regex', 2), ('scala', 2), ('sets', 2), ('short', 2), ('simple clear c++ solution', 2), ('time complexity', 2), ('tle', 2), ('works-on-my-machine', 2), ('#javascript', 1), ('#memory', 1), ('#python', 1), ('#recursion', 1), ('#word-break', 1), ('100 memory', 1), ('100 space', 1), ('1d-dp', 1), ('2ms', 1), ('amazon phone interview', 1), ('atony', 1), ('awesome samriddhi', 1), ('back-tracking', 1), ('beating-100-submissions', 1), ('beats 98 pc', 1), ('beginner friendly', 1), ('bfs with prev path map', 1), ('boolean', 1), ('bottom up', 1), ('bottomup', 1), ('c', 1), ('c++ solution', 1), ('clarification', 1), ('clean code', 1), ('combination-sum', 1), ('comments', 1), ('comments added', 1), ('comments-added', 1), ('commetend', 1), ('concise', 1), ('constant-space', 1), ('cpp doubt', 1), ('cpp soltuion', 1), ('debug', 1), ('depth-first', 1), ('deque', 1), ('descriptive names', 1), ('detailed', 1), ('dfs recursive', 1), ('dfs solution', 1), ('dfs with memo', 1), ('dp java', 1), ('drw', 1), ('dynamic programing', 1), ('easy to read', 1), ('easy understanding', 1), ('easy-to-read', 1), ('efficient', 1), ('efficient algorithm', 1), ('error', 1), ('expained', 1), ('expalanation', 1), ('explaination', 1), ('explained solution', 1), ('explanation of logic', 1), ('faceebook', 1), ('fast and simple', 1), ('fastest solution', 1), ('fibonacci sequence', 1), ('functional', 1), ('give stars and subscribe', 1), ('graph', 1), ('heavily commented', 1), ('improve', 1), ('iteratively', 1), ('iterator', 1), ('iteratve', 1), ('java solution', 1), ('java8', 1), ('javascrip', 1), ('javascript brute force', 1), ('javascript dp', 1), ('javascript recursive', 1), ('js', 1), ('knapsack', 1), ('kotlinvim', 1), ('leetcode-issue-only', 1), ('linear time', 1), ('lru-cache', 1), ('lrucache', 1), ('map', 1), ('map in c++', 1), ('maps', 1), ('mastertheorem', 1), ('mcm pattern', 1), ('memoisation', 1), ('memorization', 1), ('optimal', 1), ('optimization', 1), ('prefix tree', 1), ('pruning', 1), ('pyhton 3', 1), ('pyhton3', 1), ('python deque', 1), ('python2', 1), ('python3.8', 1), ('question-not-clear', 1), ('quicksort', 1), ('rajat', 1), ('recurrance', 1), ('recurrence', 1), ('recursive dictionary', 1), ('recursive dp', 1), ('recursive-dfs', 1), ('ritik', 1), ('run-time-error', 1), ('seen dictionary', 1), ('set', 1), ('short solution', 1), ('sliding-window', 1), ('slow', 1), ('solition-sharing', 1), ('soliton', 1), ('solution-sharing-cpp', 1), ('solution-sharing-java', 1), ('space analysis', 1), ('space-complexity', 1), ('stack', 1), ('string', 1), ('strings', 1), ('substring', 1), ('suffix based', 1), ('suffix-tree', 1), ('suggestion', 1), ('time-limit-exceeded-c++', 1), ('top down', 1), ('top down approach', 1), ('topdown', 1), ('tree', 1), ('trie-dfs', 1), ('trie-in-c++', 1), ('two pointers', 1), ('typescript', 1), ('unordered map', 1), ('very-intuitive', 1), ('video explanation', 1), ('video solution', 1), ('video-explanation', 1), ('visual', 1), ('visualization', 1), ('well-explained', 1), ('word break js', 1), ('wordbreak', 1), ('worng-answer', 1), ('xjq', 1), ('zea7ot', 1)]"
138,Copy List with Random Pointer,https://leetcode.com/problems/copy-list-with-random-pointer,"A linked list of length n is given such that each node contains an additional random pointer, which could point to any node in the list, or null.

Construct a deep copy of the list. The deep copy should consist of exactly n brand new nodes, where each new node has its value set to the value of its corresponding original node. Both the next and random pointer of the new nodes should point to new nodes in the copied list such that the pointers in the original list and copied list represent the same list state. None of the pointers in the new list should point to nodes in the original list.

For example, if there are two nodes X and Y in the original list, where X.random --> Y, then for the corresponding two nodes x and y in the copied list, x.random --> y.

Return the head of the copied linked list.

The linked list is represented in the input/output as a list of n nodes. Each node is represented as a pair of [val, random_index] where:


	val: an integer representing Node.val
	random_index: the index of the node (range from 0 to n-1) that the random pointer points to, or null if it does not point to any node.


Your code will only be given the head of the original linked list.","['hash-table', 'linked-list']",Medium,5089,816,1346217,562341,"[""Clone Graph"", ""Clone Binary Tree With Random Pointer"", ""Clone N-ary Tree""]","[('java', 100), ('python', 68), ('hashmap', 60), ('c++', 45), ('cpp', 40), ('linked-list', 34), ('python 3', 33), ('javascript', 30), ('python3', 21), ('easy-understanding', 18), ('java-solution', 17), ('c#', 15), ('simple', 13), ('solution', 13), ('constant space', 12), ('wrong-answer', 12), ('map', 11), ('recursion', 11), ('linked list', 10), ('deepcopy', 7), ('easy-understand', 7), ('golang', 7), ('hash table', 7), ('linkedlists', 7), ('run-time-error', 7), ('dictionary', 6), ('easy', 6), ('explained', 6), ('iterative', 6), ('linear time', 6), ('recursive', 6), ('c++ code', 5), ('constant-space', 5), ('easy-undestand', 5), ('hashtable', 5), ('short', 5), ('test-case', 5), ('clean code', 4), ('dfs', 4), ('easy-to-understand', 4), ('go', 4), ('improve', 4), ('linkedlist', 4), ('one-pass', 4), ('simple solution', 4), ('space-complexity', 4), ('unordered map', 4), ('comments-added', 3), ('concise-solution', 3), ('cpp solution', 3), ('dict', 3), ('golang-solution', 3), ('java ac solution', 3), ('linear-time', 3), ('pointer', 3), ('pointers', 3), ('recusion', 3), ('swift', 3), ('testcase-wrong', 3), ('time-complexity', 3), ('time-limit-exceeded', 3), ('video-explanation', 3), ('amazon', 2), ('best-submission', 2), ('c++ hash', 2), ('c++ solution', 2), ('clean', 2), ('cpp easy', 2), ('dfs simple solution', 2), ('dfs with dp', 2), ('fastest', 2), ('interleave', 2), ('iteration', 2), ('iteratve', 2), ('js', 2), ('kotlin', 2), ('linked-lists', 2), ('medium', 2), ('memoization', 2), ('missing-test-case', 2), ('o1 space', 2), ('one-loop', 2), ('question-not-clear', 2), ('readable', 2), ('ruby', 2), ('simpler', 2), ('solution-sharing-cpp', 2), ('solution-sharing-python', 2), ('two-pass', 2), ('100', 1), ('100 faster', 1), ('2pass', 1), ('accepted', 1), ('address', 1), ('algorithm', 1), ('algorithms', 1), ('array', 1), ('arraylist', 1), ('beats 99', 1), ('best', 1), ('best-solution', 1), ('bfs', 1), ('bfs python', 1), ('brute force to optimal', 1), ('bug in leetcode', 1), ('c', 1), ('c programming', 1), ('c++ iterative sol', 1), ('c++11', 1), ('cadence design systems', 1), ('clean solution', 1), ('clone', 1), ('clone-graph', 1), ('coding', 1), ('coding interview', 1), ('commented', 1), ('comments', 1), ('complexity', 1), ('construction', 1), ('copy', 1), ('copylistwithrandompointer', 1), ('correct', 1), ('critical explanation', 1), ('data structures', 1), ('diagram', 1), ('doubly linked list', 1), ('doubt', 1), ('drewbie', 1), ('duplicate', 1), ('easiest', 1), ('easy sloution', 1), ('easy to understand', 1), ('easy to understant', 1), ('easy-solition', 1), ('easysolution', 1), ('es6', 1), ('explanation', 1), ('explanation with code', 1), ('extract', 1), ('fast', 1), ('fast and simple', 1), ('fast-solution', 1), ('faster', 1), ('faster than 90', 1), ('faster than 99.25', 1), ('fastest c++ solution', 1), ('function', 1), ('graph', 1), ('hash', 1), ('hash map', 1), ('hashing', 1), ('hashset', 1), ('hashsmap', 1), ('interveaw', 1), ('interweaving', 1), ('intuitive', 1), ('iterate', 1), ('iterative solution', 1), ('iterative traversal', 1), ('iteratively', 1), ('java-8', 1), ('javascript solution', 1), ('js javascript', 1), ('keep it simple', 1), ('kotlin-solution', 1), ('kotlinvim', 1), ('kotllin', 1), ('kotln', 1), ('leetcode', 1), ('linear seach', 1), ('linear space', 1), ('linear-complexity', 1), ('lineartime', 1), ('link', 1), ('linked', 1), ('linked lists', 1), ('listnode', 1), ('lists', 1), ('merge', 1), ('minimal', 1), ('mirror-node', 1), ('morgan stanley', 1), ('mrmagician', 1), ('new', 1), ('no extra space', 1), ('no mapping', 1), ('no-collection', 1), ('non-recursive', 1), ('o1space', 1), ('on', 1), ('one pass hash map', 1), ('one pass solution', 1), ('one-liner', 1), ('optimal', 1), ('optimisation', 1), ('optimized', 1), ('performance', 1), ('php', 1), ('picture explanation', 1), ('pointer manipulation', 1), ('purpose-of-question', 1), ('pyhton', 1), ('python3.8', 1), ('queue', 1), ('quirky', 1), ('recursive solution', 1), ('redirect21', 1), ('scala', 1), ('sentinel-node', 1), ('short code', 1), ('simple clear c++ solution', 1), ('simplest', 1), ('single pass', 1), ('space o1', 1), ('straightforward', 1), ('three-different-solutions', 1), ('tree', 1), ('twitter', 1), ('two', 1), ('two pass', 1), ('two passes', 1), ('two-pointers', 1), ('unique', 1), ('unorderedmap', 1), ('video', 1), ('visualization', 1), ('walrus', 1), ('well-explained', 1), ('while loop', 1), ('works-on-my-machine', 1), ('wrong', 1), ('wrong answer', 1), ('wrong approach', 1), ('xjq', 1)]"
137,Single Number II,https://leetcode.com/problems/single-number-ii,"Given an integer array nums where every element appears three times except for one, which appears exactly once. Find the single element and return it.",['bit-manipulation'],Medium,2528,404,526329,285394,"[""Single Number"", ""Single Number III""]","[('java', 33), ('python', 32), ('c++', 23), ('bit-manipulation', 22), ('python 3', 20), ('cpp', 19), ('javascript', 19), ('bit manipulation', 18), ('python3', 12), ('bitwise', 10), ('cpp solution', 9), ('solution', 9), ('c#', 6), ('c++ code', 6), ('easy-understand', 6), ('easy-understanding', 6), ('java-solution', 6), ('bitwise operation', 5), ('easy', 5), ('hashmap', 5), ('space-complexity', 5), ('easiest', 4), ('explained', 4), ('linear time', 4), ('map', 4), ('swift', 4), ('accepted', 3), ('constant space', 3), ('cpp easy', 3), ('easy-undestand', 3), ('golang', 3), ('hash table', 3), ('scala', 3), ('xor', 3), ('algorithms', 2), ('array-sort', 2), ('bitmanipulation', 2), ('c++ easy to understand', 2), ('clean code', 2), ('constant memory', 2), ('counter', 2), ('easytounderstand', 2), ('explanation with logic', 2), ('functional programming', 2), ('go-solution', 2), ('golang-solution', 2), ('hashing', 2), ('hashset', 2), ('js', 2), ('oneline', 2), ('ruby', 2), ('set', 2), ('sets', 2), ('single number', 2), ('wrong-answer', 2), ('youtube', 2), ('#dictionary', 1), ('#python 3', 1), ('5 liner', 1), ('5 lines', 1), ('a-general-solution', 1), ('accepted solution', 1), ('allocates', 1), ('amazon', 1), ('and', 1), ('array', 1), ('assembly', 1), ('base3', 1), ('bit', 1), ('bit operation', 1), ('bitset', 1), ('bitwise-operators', 1), ('c++ stl', 1), ('clean-code', 1), ('clustering', 1), ('commented', 1), ('concise', 1), ('constant-space', 1), ('count', 1), ('cpp clear', 1), ('detailed explanation', 1), ('developer', 1), ('dictionaries', 1), ('dictionary', 1), ('easy-solution', 1), ('easysolution', 1), ('explain', 1), ('explaination', 1), ('explanation with code', 1), ('explanations4problem', 1), ('faster', 1), ('flag', 1), ('follow-up', 1), ('fuck noobs', 1), ('fully-explained', 1), ('fun', 1), ('functional-programming', 1), ('go', 1), ('google', 1), ('hashing algorithm', 1), ('important problem', 1), ('integer', 1), ('interview-friendly', 1), ('interviews', 1), ('intuition', 1), ('ios', 1), ('iteration', 1), ('java solution', 1), ('javascript solution', 1), ('kotlin', 1), ('library', 1), ('linear', 1), ('linear algebra', 1), ('linq', 1), ('mapping', 1), ('math', 1), ('memoziation', 1), ('nlogn time', 1), ('no extra space', 1), ('oneliner', 1), ('optimized', 1), ('php', 1), ('run-time-error', 1), ('rust', 1), ('scalable', 1), ('set logic', 1), ('share-solution', 1), ('short', 1), ('simple', 1), ('simple solution', 1), ('single-number', 1), ('single-number-ii', 1), ('solution-python', 1), ('solution-sharing-cpp', 1), ('solution-sharing-python', 1), ('sort', 1), ('sorted array', 1), ('sorting', 1), ('submission', 1), ('sum', 1), ('template', 1), ('thought-process', 1), ('two-lines', 1), ('unordered-set', 1), ('unorderedmap', 1), ('using hash map', 1), ('very easy to understand', 1), ('video', 1), ('video-explanation', 1)]"
136,Single Number,https://leetcode.com/problems/single-number,"Given a non-empty array of integers nums, every element appears twice except for one. Find that single one.

Follow up: Could you implement a solution with a linear runtime complexity and without using extra memory?","['hash-table', 'bit-manipulation']",Easy,6153,200,1721985,1150177,"[""Single Number II"", ""Single Number III"", ""Missing Number"", ""Find the Duplicate Number"", ""Find the Difference""]","[('python', 72), ('xor', 69), ('javascript', 68), ('java', 62), ('c++', 52), ('cpp', 45), ('python 3', 28), ('bit manipulation', 27), ('python3', 25), ('bit-manipulation', 22), ('solution', 20), ('java-solution', 19), ('easy', 14), ('c#', 13), ('cpp solution', 12), ('hashmap', 12), ('golang', 9), ('hash table', 9), ('linear time', 8), ('one-liner', 8), ('ruby', 8), ('rust', 8), ('single-number', 8), ('hashset', 7), ('reduce', 7), ('single number', 7), ('c', 6), ('easy-understanding', 6), ('swift', 6), ('bitwise operation', 5), ('cpp easy', 5), ('improve', 5), ('linear', 5), ('math', 5), ('optimal', 5), ('short', 5), ('bitmanipulation', 4), ('clean code', 4), ('constant-space', 4), ('dictionaries', 4), ('dictionary', 4), ('easiest', 4), ('easy-understand', 4), ('python2', 4), ('set', 4), ('simple', 4), ('simple solution', 4), ('time-limit-exceeded', 4), ('0ms', 3), ('bitwise', 3), ('c++ code', 3), ('compile-error', 3), ('counter', 3), ('easy-undestand', 3), ('easytounderstand', 3), ('go', 3), ('go-solution', 3), ('golang-solution', 3), ('hashing', 3), ('hashtable', 3), ('interview', 3), ('javascrip', 3), ('javascript solution', 3), ('map', 3), ('one line', 3), ('oneliner', 3), ('scala', 3), ('sorting', 3), ('stl', 3), ('time-complexity', 3), ('typescript', 3), ('video explanation', 3), ('100 space', 2), ('100 speed', 2), ('accumulate', 2), ('array', 2), ('arrays', 2), ('awesome', 2), ('basic', 2), ('bit magic', 2), ('bitwise-operators', 2), ('collections', 2), ('concise', 2), ('constant memory', 2), ('csharp', 2), ('easy-to-understand', 2), ('explained solution', 2), ('fast', 2), ('fast-solution', 2), ('fastest', 2), ('fold', 2), ('ios', 2), ('iterative', 2), ('java-8', 2), ('js', 2), ('kotlin', 2), ('lambda', 2), ('linear-time', 2), ('linq', 2), ('no extra space', 2), ('quicksort', 2), ('simple-solution', 2), ('simplest', 2), ('sorted array', 2), ('two-pointers', 2), ('vector', 2), ('wrong-answer', 2), ('xor operation', 2), ('#c++', 1), ('#dictionary', 1), ('#javascript', 1), ('#python', 1), ('#python 3', 1), ('#xor', 1), ('0ms-solution', 1), ('1 line', 1), ('1 liner', 1), ('1-line', 1), ('1-line solution', 1), ('1-liner', 1), ('100 faster runtime', 1), ('100 memory', 1), ('2 lines approach', 1), ('2-lines', 1), ('3linessolution', 1), ('accepted', 1), ('algosexplained', 1), ('amazon', 1), ('approach', 1), ('awesome samriddhi', 1), ('beginner friendly', 1), ('best', 1), ('binary search', 1), ('binarynumber', 1), ('bug', 1), ('bug report', 1), ('bug-test-case', 1), ('c code', 1), ('c-solution', 1), ('c++ 0ms', 1), ('c++ hash', 1), ('c++ solution', 1), ('c++11', 1), ('clear', 1), ('code', 1), ('code-golf', 1), ('commentary', 1), ('comments', 1), ('comments-added', 1), ('compare', 1), ('conditions', 1), ('constant space', 1), ('cool', 1), ('counting algorithm', 1), ('cpp clear', 1), ('cpp-solution', 1), ('defaultdict', 1), ('dictonary', 1), ('divide and conquer', 1), ('easy code', 1), ('easyundersttanding', 1), ('elegant', 1), ('enumerable', 1), ('error', 1), ('eval', 1), ('expalanation', 1), ('explained', 1), ('explanation', 1), ('explanation of logic', 1), ('explanation with code', 1), ('fast and simple', 1), ('faster', 1), ('fastest python solution', 1), ('for loop', 1), ('for loops', 1), ('frequency table', 1), ('github', 1), ('go-lang', 1), ('great', 1), ('happy coding', 1), ('hash', 1), ('hash map', 1), ('hash-table', 1), ('immutable', 1), ('implementation', 1), ('important', 1), ('interview-tips', 1), ('invalid approaches', 1), ('iterator', 1), ('java ac solution', 1), ('java bit-manipulation', 1), ('java reverse int', 1), ('java stringtoint', 1), ('java8', 1), ('jlovenpk1', 1), ('kotlinvim', 1), ('lambda expression', 1), ('linear memory', 1), ('linear-sort', 1), ('logical', 1), ('logical operator', 1), ('no-extra-space', 1), ('numbers', 1), ('one-line', 1), ('oneline', 1), ('optimal solution', 1), ('ordered map', 1), ('partition', 1), ('performance', 1), ('ptyhon', 1), ('pyhton', 1), ('python 2', 1), ('python3.8', 1), ('question', 1), ('quick-sort', 1), ('random', 1), ('recursive', 1), ('recusion', 1), ('ritik', 1), ('self explanatory', 1), ('series', 1), ('sets', 1), ('share knowledge', 1), ('short code', 1), ('simple math', 1), ('single line code', 1), ('single pass', 1), ('slow-performance', 1), ('solution-cpp', 1), ('solution-csharp', 1), ('solution-javascript', 1), ('solution-sharing-python', 1), ('sort', 1), ('sorting algorithms', 1), ('space-non', 1), ('straight-forward', 1), ('stream', 1), ('streamapi', 1), ('streams', 1), ('swift5', 1), ('time complexity', 1), ('time limit exceeded', 1), ('unique value', 1), ('unordered map', 1), ('unorderedmap', 1), ('unordermap', 1), ('upvote', 1), ('video', 1), ('video solution', 1), ('video-explanation', 1), ('without xor', 1), ('works-on-my-machine', 1), ('wrong answer', 1), ('youtube', 1)]"
135,Candy,https://leetcode.com/problems/candy,"There are n children standing in a line. Each child is assigned a rating value given in the integer array ratings.

You are giving candies to these children subjected to the following requirements:


	Each child must have at least one candy.
	Children with a higher rating get more candies than their neighbors.


Return the minimum number of candies you need to have to distribute the candies to the children.",['greedy'],Hard,1447,197,465697,155650,[],"[('java', 28), ('python', 17), ('cpp', 13), ('constant-space', 12), ('greedy', 12), ('c++', 10), ('solution', 10), ('candy', 8), ('easy-understand', 8), ('python 3', 6), ('one-pass', 5), ('test-case', 5), ('c#', 4), ('easy-understanding', 4), ('improve', 4), ('javascript', 4), ('python3', 4), ('time-complexity', 4), ('wrong-answer', 4), ('easy-undestand', 3), ('time-limit-exceeded', 3), ('dynamic-programming', 2), ('easytounderstand', 2), ('golang', 2), ('greedy approach', 2), ('iterative', 2), ('linear time', 2), ('recursion', 2), ('requirements', 2), ('simple solution', 2), ('space-complexity', 2), ('vague', 2), ('accepted', 1), ('accomulate', 1), ('algorithms', 1), ('array', 1), ('back tracking', 1), ('best-submission', 1), ('breadth first search', 1), ('commented', 1), ('comments-added', 1), ('constant space', 1), ('cpp solution', 1), ('csharp', 1), ('depth first search', 1), ('divideconquer', 1), ('easy', 1), ('easy-to-understand', 1), ('efficient', 1), ('fast and simple', 1), ('flipkart', 1), ('give stars and subscribe', 1), ('go-solution', 1), ('golang-solution', 1), ('google', 1), ('graph', 1), ('heap', 1), ('heaps', 1), ('iterators', 1), ('java simple', 1), ('java-solution', 1), ('javascript solution', 1), ('js', 1), ('linear-complexity', 1), ('linear-time', 1), ('microsoft', 1), ('min-heap', 1), ('one pass solution', 1), ('optimal', 1), ('proof', 1), ('question', 1), ('question-not-clear', 1), ('readable', 1), ('recursive approach', 1), ('run-time-error', 1), ('rust', 1), ('shared-answer', 1), ('simple', 1), ('simplest', 1), ('solution-sharing-cpp', 1), ('sorting', 1), ('stack', 1), ('stl', 1), ('time-limit-exceeded-java', 1), ('time-optimized', 1), ('two pointer technique', 1), ('two-pass', 1), ('two-scan', 1), ('uncle', 1), ('video-explanation', 1), ('well-explained', 1), ('works-on-my-machine', 1)]"
134,Gas Station,https://leetcode.com/problems/gas-station,"There are n gas stations along a circular route, where the amount of gas at the ith station is gas[i].

You have a car with an unlimited gas tank and it costs cost[i] of gas to travel from the ith station to its next (i + 1)th station. You begin the journey with an empty tank at one of the gas stations.

Given two integer arrays gas and cost, return the starting gas station's index if you can travel around the circuit once in the clockwise direction, otherwise return -1. If there exists a solution, it is guaranteed to be unique",['greedy'],Medium,2967,433,679712,283480,[],"[('java', 49), ('greedy', 33), ('python', 32), ('c++', 26), ('cpp', 25), ('python 3', 19), ('easy-understand', 14), ('linear time', 13), ('solution', 13), ('easy-understanding', 10), ('golang', 10), ('javascript', 10), ('cpp solution', 8), ('explained', 8), ('python3', 8), ('java-solution', 7), ('greedy approach', 6), ('linear-time', 6), ('c#', 5), ('golang-solution', 5), ('java ac solution', 5), ('accepted', 4), ('constant-space', 4), ('easy-undestand', 4), ('easytounderstand', 4), ('gas-station', 4), ('go', 4), ('one pass', 4), ('ruby', 4), ('simple', 4), ('time-limit-exceeded', 4), ('0ms', 3), ('brute force', 3), ('easy', 3), ('explained solution', 3), ('fastest', 3), ('gas', 3), ('linear', 3), ('one pass solution', 3), ('one-pass', 3), ('test-case', 3), ('time-complexity', 3), ('100 speed', 2), ('c', 2), ('cpp easy', 2), ('description-disambiguation', 2), ('dynamic programming', 2), ('easy-to-understand', 2), ('efficient solution', 2), ('explanations', 2), ('go-solution', 2), ('greedy algorithm', 2), ('help', 2), ('improve', 2), ('iterative', 2), ('kadane-algorithm', 2), ('kotlin', 2), ('on2', 2), ('optimal', 2), ('php', 2), ('proof', 2), ('python2', 2), ('recursion', 2), ('simple solution', 2), ('subarray', 2), ('swift', 2), ('testcase-wrong', 2), ('two-pointers', 2), ('video-explanation', 2), ('#kadane', 1), ('100', 1), ('100 faster', 1), ('100 memory', 1), ('algorithm-proof', 1), ('amazon', 1), ('array', 1), ('beating-100-submission', 1), ('beats 100', 1), ('beats100', 1), ('beginner', 1), ('beginner friendly', 1), ('best-solution-ever', 1), ('best-submission', 1), ('bloomberg', 1), ('brute-force', 1), ('c++ solution', 1), ('check', 1), ('clarification', 1), ('clean', 1), ('clear', 1), ('commented', 1), ('commetend', 1), ('compile-error', 1), ('concise', 1), ('constant memory', 1), ('constant place', 1), ('constant space', 1), ('cpp-solution', 1), ('csharp', 1), ('cumulative sum', 1), ('direction', 1), ('easy understanding', 1), ('easy-solition', 1), ('easysolution', 1), ('efficient', 1), ('expalanation', 1), ('explain', 1), ('explanation', 1), ('explanation of logic', 1), ('explanations4problem', 1), ('explantion', 1), ('fast', 1), ('fast-solution', 1), ('fasterthan100', 1), ('give stars and subscribe', 1), ('google', 1), ('greedy algorithms', 1), ('idiomatic', 1), ('illustration', 1), ('interview', 1), ('iteration', 1), ('javascript solution', 1), ('js', 1), ('kadane algorithm', 1), ('kotlinvim', 1), ('leetcode', 1), ('linear-time-space', 1), ('logic', 1), ('logic explained', 1), ('logical thinking', 1), ('maximum sub array sum', 1), ('minimum-subarray-sum', 1), ('optimization', 1), ('pointer2pointer', 1), ('prefix sum', 1), ('priority queue', 1), ('python-greedy-solution-sharing', 1), ('pythonic', 1), ('question-not-clear', 1), ('queue', 1), ('recurrance', 1), ('rust', 1), ('sequence', 1), ('series', 1), ('shared-answer', 1), ('short', 1), ('simpe', 1), ('simple clear c++ solution', 1), ('simplest', 1), ('simulation', 1), ('single pass', 1), ('sliding window', 1), ('slow', 1), ('solution-rust', 1), ('solution-share', 1), ('solution-sharing-c', 1), ('solution-sharing-cpp', 1), ('space o1', 1), ('space-non', 1), ('space-optimized', 1), ('station', 1), ('strategy', 1), ('subsequence', 1), ('the', 1), ('tle', 1), ('try', 1), ('two pointers', 1), ('typescript', 1), ('understandable', 1), ('video', 1), ('video explaination', 1), ('video solution', 1), ('visual', 1), ('well-explained', 1), ('working-solution', 1), ('works-on-my-machine', 1), ('wrong-answer', 1)]"
133,Clone Graph,https://leetcode.com/problems/clone-graph,"Given a reference of a node in a connected undirected graph.

Return a deep copy (clone) of the graph.

Each node in the graph contains a val (int) and a list (List[Node]) of its neighbors.


class Node {
    public int val;
    public List<Node> neighbors;
}


 

Test case format:

For simplicity sake, each node's value is the same as the node's index (1-indexed). For example, the first node with val = 1, the second node with val = 2, and so on. The graph is represented in the test case using an adjacency list.

Adjacency list is a collection of unordered lists used to represent a finite graph. Each list describes the set of neighbors of a node in the graph.

The given node will always be the first node with val = 1. You must return the copy of the given node as a reference to the cloned graph.","['depth-first-search', 'breadth-first-search', 'graph']",Medium,2982,1694,1159127,465126,"[""Copy List with Random Pointer"", ""Clone Binary Tree With Random Pointer"", ""Clone N-ary Tree""]","[('dfs', 74), ('bfs', 69), ('java', 65), ('python', 50), ('cpp', 39), ('c++', 36), ('javascript', 33), ('graph', 28), ('hashmap', 28), ('python 3', 24), ('clone-graph', 21), ('recursion', 17), ('solution', 15), ('python3', 12), ('queue', 11), ('c#', 9), ('java-solution', 9), ('recursive', 9), ('depth first search', 8), ('dfs simple solution', 8), ('simple', 8), ('wrong-answer', 8), ('easy-understanding', 7), ('explained', 7), ('accepted', 6), ('easiest', 6), ('easy', 6), ('map', 6), ('time-limit-exceeded', 6), ('dfs solution', 5), ('dfs-recursive', 5), ('golang', 5), ('iterative', 5), ('ruby', 5), ('testcase-wrong', 5), ('breadth first search', 4), ('cpp solution', 4), ('dfs traversal', 4), ('help needed', 4), ('short', 4), ('test-case', 4), ('#dfs', 3), ('#recursive', 3), ('bfs simple solution', 3), ('breadth-first', 3), ('c', 3), ('clone', 3), ('commented', 3), ('depth-first-search', 3), ('dictionary', 3), ('easy-understand', 3), ('fast', 3), ('graphclone', 3), ('graphs', 3), ('iterative-dfs', 3), ('iteratively', 3), ('java solution', 3), ('recursively', 3), ('runtime-error', 3), ('swift', 3), ('time-complexity', 3), ('unorderedmap', 3), ('breadth first traversal', 2), ('breadth-first-search', 2), ('bug', 2), ('c++ solution', 2), ('clarification', 2), ('clean', 2), ('clean code', 2), ('clone graph', 2), ('csharp', 2), ('dfs-bfs', 2), ('dfs-non-recursive', 2), ('dict', 2), ('easy to understand', 2), ('easy-to-understand', 2), ('easytounderstand', 2), ('error', 2), ('hash', 2), ('hash table', 2), ('hashset', 2), ('hashtable', 2), ('kotlin', 2), ('non-recursive', 2), ('run-time-error', 2), ('simple clear c++ solution', 2), ('simple solution', 2), ('solution-sharing-cpp', 2), ('solution-sharing-python', 2), ('space-complexity', 2), ('stack', 2), ('typescript', 2), ('# help', 1), ('#fastest', 1), ('#iterative', 1), ('#map', 1), ('#simplecode', 1), ('#swift', 1), ('100 faster', 1), ('arraylist', 1), ('awesome samriddhi', 1), ('beats 100', 1), ('bfs python', 1), ('block', 1), ('bug in leetcode', 1), ('bug report', 1), ('bugs', 1), ('c programming', 1), ('c recursive', 1), ('c++11', 1), ('clonegraph', 1), ('comments-added', 1), ('commetend', 1), ('concise', 1), ('cpp error', 1), ('cpp-solution', 1), ('cycle', 1), ('deep-first-search', 1), ('deepcopy', 1), ('detailed explanation', 1), ('dfs pre-order traversal', 1), ('dfs recursive', 1), ('dfs-tree', 1), ('dictionary c#', 1), ('dp', 1), ('easy understanding', 1), ('easy-undestand', 1), ('elegant solution', 1), ('error in solution', 1), ('es6', 1), ('eulierian', 1), ('explanation', 1), ('fastest', 1), ('go', 1), ('go lang', 1), ('go-solution', 1), ('golang-solution', 1), ('graph traversal', 1), ('hashamp', 1), ('help', 1), ('help me', 1), ('help-wanted', 1), ('idiomatic', 1), ('improve', 1), ('intuitive', 1), ('issue', 1), ('iterative solution', 1), ('java ac solution', 1), ('java solution using dfs', 1), ('javascript solution', 1), ('judge-problem', 1), ('judgement', 1), ('kotlinvim', 1), ('leetcode-issue-only', 1), ('limit', 1), ('limit-exceeded', 1), ('logic explained', 1), ('map-stl', 1), ('mapping', 1), ('memoization', 1), ('memory', 1), ('no-hashmap', 1), ('one-liner', 1), ('output-limit-exceeded', 1), ('python2', 1), ('recurision', 1), ('recursion palindrome', 1), ('recusion', 1), ('reference', 1), ('ritik', 1), ('scala', 1), ('self-explanatory', 1), ('sets', 1), ('short c++ code', 1), ('short solution', 1), ('simple-solution', 1), ('simplesolution', 1), ('solution-sharing-java', 1), ('solved', 1), ('speed', 1), ('stackoverflow', 1), ('test-cases', 1), ('tree traversal', 1), ('trick', 1), ('two-methods', 1), ('undirected', 1), ('unordered map', 1), ('uthash', 1), ('video', 1), ('video-explanation', 1), ('wrong answer', 1)]"
132,Palindrome Partitioning II,https://leetcode.com/problems/palindrome-partitioning-ii,"Given a string s, partition s such that every substring of the partition is a palindrome.

Return the minimum cuts needed for a palindrome partitioning of s.",['dynamic-programming'],Hard,1805,54,491730,154601,"[""Palindrome Partitioning"", ""Palindrome Partitioning IV""]","[('dynamic programming', 28), ('java', 25), ('cpp', 18), ('python', 18), ('dynamic-programming', 17), ('c++', 15), ('memoization', 14), ('dp', 11), ('time-limit-exceeded', 11), ('python 3', 10), ('dfs', 5), ('java-solution', 5), ('time-complexity', 5), ('wrong-answer', 5), ('recursion', 4), ('backtracking', 3), ('easy', 3), ('palindrome', 3), ('accepted', 2), ('bfs', 2), ('c#', 2), ('easy-understanding', 2), ('error', 2), ('gap-method', 2), ('improve', 2), ('kotlin', 2), ('mcm pattern', 2), ('python3', 2), ('recursion palindrome', 2), ('works-on-my-machine', 2), ('2d dynamic programming', 1), ('algorithms', 1), ('answer', 1), ('awesome samriddhi', 1), ('bad', 1), ('best-submission', 1), ('bottoms-up', 1), ('bottomup', 1), ('bug', 1), ('bug-test-case', 1), ('bug-timeout', 1), ('c++ code', 1), ('c++ dynamic programming', 1), ('caching', 1), ('clean code', 1), ('compile-error', 1), ('concise', 1), ('cpp solution', 1), ('depth-first-search', 1), ('dfs simple solution', 1), ('dfs-iterative', 1), ('dp c', 1), ('easiest', 1), ('easy to understand', 1), ('easy-to-understand', 1), ('explanations', 1), ('give stars if you like', 1), ('help', 1), ('help needed', 1), ('java ac solution', 1), ('javascript', 1), ('linear memory', 1), ('linear-space', 1), ('manachers-algorithm', 1), ('mcm', 1), ('memoisation', 1), ('microsoft-india', 1), ('optimizations', 1), ('palindrome-check', 1), ('recursion memoization', 1), ('request-for-explanation', 1), ('ritik', 1), ('scala', 1), ('short', 1), ('solution-share', 1), ('solution-sharing-c', 1), ('square-time', 1), ('tabulation', 1), ('test-case', 1), ('testcase-wrong', 1), ('time limit exceeded solve', 1), ('time-limit-exceeded-java', 1), ('tle', 1), ('tle solved', 1), ('top down', 1), ('top down approach', 1), ('top-down', 1), ('well-commented', 1)]"
131,Palindrome Partitioning,https://leetcode.com/problems/palindrome-partitioning,"Given a string s, partition s such that every substring of the partition is a palindrome. Return all possible palindrome partitioning of s.

A palindrome string is a string that reads the same backward as forward.","['dynamic-programming', 'backtracking', 'depth-first-search']",Medium,3343,107,587629,310723,"[""Palindrome Partitioning II"", ""Palindrome Partitioning IV""]","[('backtracking', 90), ('java', 57), ('python', 46), ('c++', 37), ('cpp', 30), ('dfs', 28), ('dynamic programming', 24), ('solution', 23), ('dp', 15), ('python 3', 14), ('recursion', 13), ('dynamic-programming', 12), ('golang', 10), ('javascript', 10), ('c#', 8), ('java-solution', 8), ('memoization', 8), ('easy-understand', 7), ('python3', 6), ('back tracking', 5), ('time-complexity', 5), ('dfs simple solution', 4), ('easy-to-understand', 4), ('improve', 4), ('backtracing', 3), ('backtrack', 3), ('c', 3), ('cpp solution', 3), ('depth first search', 3), ('easy-understanding', 3), ('palindrome', 3), ('python2', 3), ('question-not-clear', 3), ('recurision', 3), ('recursive', 3), ('backrtracking', 2), ('bfs', 2), ('c-dfs', 2), ('easy-undestand', 2), ('explained', 2), ('explanation', 2), ('fast', 2), ('go', 2), ('golang-solution', 2), ('java ac solution', 2), ('mcm', 2), ('output-limit-exceeded', 2), ('palindromepartitioning', 2), ('runtime', 2), ('scala', 2), ('simple', 2), ('swift', 2), ('time-limit-exceeded', 2), ('wrong-answer', 2), ('131', 1), ('back-tracking', 1), ('backpack dp', 1), ('bottomup', 1), ('brute force', 1), ('c++ code', 1), ('c++ solution', 1), ('checksum', 1), ('clean solution', 1), ('commented', 1), ('comments-added', 1), ('constant-space', 1), ('cpp easy', 1), ('depth-first-search', 1), ('detailed explanation', 1), ('dfs solution', 1), ('dfs-recursive', 1), ('double-dp', 1), ('dp-programming', 1), ('dp-table', 1), ('dp-techqique', 1), ('easiest', 1), ('easy', 1), ('easy-to-understad', 1), ('easytounderstand', 1), ('explanation of logic', 1), ('explanatory video', 1), ('fast-solution', 1), ('go-solution', 1), ('greedy', 1), ('heavily commented', 1), ('intuition', 1), ('iterative', 1), ('iterator', 1), ('java short and crisp', 1), ('java solution', 1), ('javascript solution', 1), ('js', 1), ('kotlinvim', 1), ('lru-cache', 1), ('memorization', 1), ('non-recursive', 1), ('one line', 1), ('one-liner', 1), ('palindrome-partitioning', 1), ('pallindrome', 1), ('powerset', 1), ('preprocessing', 1), ('question', 1), ('question need help', 1), ('recrusion', 1), ('recursion palindrome', 1), ('recursive easy', 1), ('recusion', 1), ('ruby', 1), ('run-time-error', 1), ('runtime-error', 1), ('rust', 1), ('shared-answer', 1), ('short', 1), ('short code', 1), ('simple clear c++ solution', 1), ('simple solution', 1), ('solution-sharing-cpp', 1), ('solution-sharing-java', 1), ('solved', 1), ('space-complexity', 1), ('stacks', 1), ('stl', 1), ('straight forward', 1), ('string-operation', 1), ('thought-process', 1), ('time-optimized', 1), ('top down', 1), ('tuples', 1), ('typescript', 1), ('very easy to understand', 1), ('video-explanation', 1), ('well-explained', 1)]"
130,Surrounded Regions,https://leetcode.com/problems/surrounded-regions,"Given an m x n matrix board containing 'X' and 'O', capture all regions surrounded by 'X'.

A region is captured by flipping all 'O's into 'X's in that surrounded region.","['depth-first-search', 'breadth-first-search', 'union-find']",Medium,2727,777,992425,297102,"[""Number of Islands"", ""Walls and Gates""]","[('dfs', 125), ('java', 70), ('python', 66), ('bfs', 63), ('cpp', 45), ('c++', 44), ('python 3', 35), ('javascript', 25), ('dfs simple solution', 24), ('run-time-error', 22), ('solution', 12), ('wrong-answer', 12), ('java-solution', 11), ('easy-understanding', 10), ('easy-undestand', 10), ('c#', 9), ('depth first search', 9), ('union-find', 9), ('c++ code', 8), ('runtime-error', 8), ('works-on-my-machine', 8), ('fast', 7), ('python3', 7), ('simple solution', 7), ('depth-first-search', 6), ('easy', 6), ('golang', 6), ('graph', 6), ('time-limit-exceeded', 6), ('breadth-first-search', 5), ('cpp solution', 5), ('dfs-iterative', 5), ('flood fill', 5), ('flood-fill', 5), ('queue', 5), ('recursion', 5), ('simple', 5), ('stack', 5), ('test-case', 5), ('union find', 5), ('breadth first search', 4), ('recursive', 4), ('runtime', 4), ('short', 4), ('testcase-wrong', 4), ('dfs recursive', 3), ('dfs solution', 3), ('easy to understand', 3), ('easy-to-understand', 3), ('improve', 3), ('javascript solution', 3), ('kotlin', 3), ('recursive-dfs', 3), ('regions', 3), ('surrounded', 3), ('surrounded-regions', 3), ('time-complexity', 3), ('1ms', 2), ('1ms runtime', 2), ('backtracking', 2), ('beginnerfriendly', 2), ('c++ dfs', 2), ('clean', 2), ('commented', 2), ('comments', 2), ('cpp easy', 2), ('deque', 2), ('easy understanding', 2), ('easy-solition', 2), ('easy-understand', 2), ('error', 2), ('explanation of logic', 2), ('explanations', 2), ('fast and simple', 2), ('fast-solution', 2), ('go-solution', 2), ('golang-solution', 2), ('intuitive', 2), ('java ac solution', 2), ('js', 2), ('keep it simple', 2), ('python2', 2), ('recursive solution', 2), ('stack-over-flow', 2), ('tle', 2), ('unionfind', 2), ('#dfs', 1), ('#help', 1), ('#javascript', 1), ('0ms runtime', 1), ('100 memory', 1), ('2d-array', 1), ('9ms', 1), ('accepted', 1), ('array', 1), ('array of set', 1), ('bfs java', 1), ('binary-tree', 1), ('board-scan', 1), ('boundary', 1), ('breadth-first', 1), ('c', 1), ('c# solutions', 1), ('cases', 1), ('chess', 1), ('clarification', 1), ('clean code', 1), ('clear-understanding', 1), ('code ninjas', 1), ('comments added', 1), ('comments-added', 1), ('connected graph', 1), ('constant-space', 1), ('cpp eas', 1), ('cpp-solution', 1), ('cppsolution', 1), ('csharp', 1), ('debug', 1), ('description-disambiguation', 1), ('descriptive', 1), ('detailed explanation', 1), ('dfs simple', 1), ('dfs-bfs', 1), ('dfs-non-recursive', 1), ('dfs-recursive', 1), ('dfs-topdown', 1), ('diagram', 1), ('disjoint sets', 1), ('documented', 1), ('dos', 1), ('dp', 1), ('dsu', 1), ('dynamic-programming', 1), ('easy code', 1), ('easy sloution', 1), ('easy solution', 1), ('easy-peasy', 1), ('easy-to-read', 1), ('easysolution', 1), ('easytoundersatand', 1), ('easytounderstand', 1), ('elegant', 1), ('expalanation', 1), ('explained', 1), ('facebook', 1), ('fastest', 1), ('fun', 1), ('generator', 1), ('go', 1), ('graph-search', 1), ('graphs', 1), ('help', 1), ('inconsistent performance', 1), ('interview', 1), ('issue', 1), ('iterative', 1), ('java solution', 1), ('java solution using dfs', 1), ('javascript recursive', 1), ('kotlinvim', 1), ('leetcode 130', 1), ('leetcode problem set', 1), ('linear-time', 1), ('matrix', 1), ('max-call-stack', 1), ('memory', 1), ('memory-limited-exceeded', 1), ('multiple solution', 1), ('non-recursive', 1), ('number of islands', 1), ('on2', 1), ('optimizations', 1), ('optimized', 1), ('output-limit-exceeded', 1), ('overflow', 1), ('php', 1), ('python deque', 1), ('questions', 1), ('quite-slow', 1), ('recursive lines clean', 1), ('set', 1), ('share-solution', 1), ('simplest', 1), ('solution-sharing-c', 1), ('solution-sharing-cpp', 1), ('solution-sharing-python', 1), ('space-complexity', 1), ('string', 1), ('swift', 1), ('test', 1), ('trie', 1), ('two-pass', 1), ('unknown-reason', 1), ('unknown-runtime-error', 1), ('video', 1), ('video explanation', 1), ('wrong-execution-result', 1), ('youtube', 1)]"
129,Sum Root to Leaf Numbers,https://leetcode.com/problems/sum-root-to-leaf-numbers,"You are given the root of a binary tree containing digits from 0 to 9 only.

Each root-to-leaf path in the tree represents a number.


	For example, the root-to-leaf path 1 -> 2 -> 3 represents the number 123.


Return the total sum of all root-to-leaf numbers.

A leaf node is a node with no children.","['tree', 'depth-first-search']",Medium,2253,61,637338,328061,"[""Path Sum"", ""Binary Tree Maximum Path Sum"", ""Smallest String Starting From Leaf""]","[('java', 78), ('dfs', 76), ('cpp', 66), ('recursion', 64), ('c++', 63), ('python', 38), ('recursive', 34), ('python 3', 27), ('javascript', 18), ('solution', 18), ('java-solution', 17), ('bfs', 15), ('python3', 12), ('c#', 9), ('cpp solution', 9), ('iterative', 9), ('stack', 9), ('tree traversal', 9), ('depth first search', 8), ('dfs simple solution', 8), ('binary-tree', 7), ('easy-undestand', 7), ('0ms', 6), ('accepted', 6), ('easy-understanding', 6), ('golang', 6), ('javascript solution', 6), ('recusion', 6), ('tree-traversal', 6), ('c++ code', 5), ('depth-first-search', 5), ('easy', 5), ('easy-to-understand', 5), ('easy-understand', 5), ('preorder', 5), ('recurision', 5), ('recursive-dfs', 5), ('simple', 5), ('trees', 5), ('backtracking', 4), ('dfs solution', 4), ('go', 4), ('pre-order', 4), ('recursive easy', 4), ('works-on-my-machine', 4), ('wrong-answer', 4), ('100 speed', 3), ('bfs python', 3), ('c', 3), ('depth-first search', 3), ('explained', 3), ('fast and simple', 3), ('golang-solution', 3), ('preorder traversal', 3), ('preorder-traversal', 3), ('ruby', 3), ('rust', 3), ('short', 3), ('tree', 3), ('algorithms', 2), ('best-submission', 2), ('c++11', 2), ('cpp easy', 2), ('dfs recursive', 2), ('dfs traversal', 2), ('dfs-iterative', 2), ('dfs-recursive', 2), ('dfs-tree', 2), ('easytounderstand', 2), ('fast', 2), ('go-solution', 2), ('intuitive', 2), ('iteratively', 2), ('java ac solution', 2), ('javascript recursive', 2), ('non-recursive', 2), ('post-order-traversal', 2), ('queue', 2), ('recursive solution', 2), ('recusrive', 2), ('simple solution', 2), ('string', 2), ('string-to-integer', 2), ('sum of path', 2), ('test-case', 2), ('testcase-wrong', 2), ('typescript', 2), ('#backtracking', 1), ('#c++', 1), ('#cpp', 1), ('#dfs', 1), ('#java', 1), ('#recursion', 1), ('#recursive', 1), ('0ms-solution', 1), ('1-line', 1), ('100', 1), ('3ms', 1), ('adrenaline09', 1), ('an7one', 1), ('array', 1), ('bfs simple solution', 1), ('big o of n', 1), ('bigint', 1), ('binary search tree', 1), ('binary tree', 1), ('binarytree', 1), ('bit manipulation', 1), ('breadth first search', 1), ('c++ solution', 1), ('clean', 1), ('clean code', 1), ('clean-efficient-code', 1), ('commentary', 1), ('comments-added', 1), ('concise', 1), ('constant memory', 1), ('constant-space', 1), ('cplusplus', 1), ('cpp soltuion', 1), ('csharp', 1), ('depth first', 1), ('deque', 1), ('dfs-topdown', 1), ('different-oj-local', 1), ('easiest', 1), ('easy solution', 1), ('easy to understand', 1), ('easy to understandd', 1), ('easy understanding', 1), ('easysolution', 1), ('efficiency', 1), ('explanation with code', 1), ('explanations4problem', 1), ('fast solution', 1), ('fast-solution', 1), ('faster than 100.00', 1), ('fasterthan100', 1), ('fastest', 1), ('fastest java slution', 1), ('go lang', 1), ('improvement-needed', 1), ('inorder', 1), ('inorder traversal', 1), ('inorder-traversal', 1), ('iteration', 1), ('iteration vs recursion', 1), ('iterative traversal', 1), ('iterative-bfs', 1), ('iterative-bfs python', 1), ('iterative-recursive', 1), ('iterative-solution', 1), ('java solution using dfs', 1), ('keep it simple', 1), ('kotlin', 1), ('kotlinvim', 1), ('lesslines', 1), ('line', 1), ('list', 1), ('list comprehension', 1), ('maths', 1), ('morris-traversal', 1), ('naive-solution', 1), ('optimal', 1), ('overflow', 1), ('parseint', 1), ('path', 1), ('path traverse', 1), ('path-finding', 1), ('path-sum', 1), ('postorder', 1), ('postorder traversal', 1), ('postorder-traversal', 1), ('python2', 1), ('queues', 1), ('rajat', 1), ('readable', 1), ('recursion formula', 1), ('recursive-solution', 1), ('recursiveley', 1), ('recursively', 1), ('recusive', 1), ('scala', 1), ('short code', 1), ('simple clear c++ solution', 1), ('simple dfs', 1), ('simplest', 1), ('solution-sharing-cpp', 1), ('solved', 1), ('stack-based', 1), ('stacks', 1), ('stoi', 1), ('string-operation', 1), ('stringbuilder', 1), ('sum-root-to-leaf', 1), ('sumroottoleaf', 1), ('swift', 1), ('swift5', 1), ('time-complexity', 1), ('ultra easy', 1), ('upvote', 1), ('using string', 1), ('well-commented', 1), ('wrong', 1)]"
128,Longest Consecutive Sequence,https://leetcode.com/problems/longest-consecutive-sequence,"Given an unsorted array of integers nums, return the length of the longest consecutive elements sequence.","['array', 'union-find']",Hard,5001,246,851676,396908,"[""Binary Tree Longest Consecutive Sequence""]","[('java', 68), ('cpp', 56), ('python', 53), ('c++', 43), ('hashmap', 40), ('python3', 26), ('python 3', 25), ('javascript', 24), ('union find', 20), ('hashset', 19), ('java-solution', 18), ('solution', 16), ('set', 14), ('simple', 14), ('video', 14), ('time-complexity', 11), ('linear time', 10), ('c#', 9), ('sets', 9), ('sort', 9), ('easy-understand', 8), ('linear-time', 8), ('union-find', 8), ('dfs', 7), ('easy-understanding', 7), ('golang', 7), ('radix-sort', 6), ('short', 6), ('unorderedmap', 6), ('dynamic programming', 5), ('easy', 5), ('simple clear c++ solution', 5), ('simple solution', 5), ('sorting', 5), ('cpp solution', 4), ('easiest', 4), ('easytounderstand', 4), ('hash table', 4), ('hashing', 4), ('on', 4), ('priority queue', 4), ('space-complexity', 4), ('swift', 4), ('unionfind', 4), ('array', 3), ('c++ code', 3), ('disjoint-set', 3), ('easy code', 3), ('easy-undestand', 3), ('fast and simple', 3), ('go-solution', 3), ('golang-solution', 3), ('hashtable', 3), ('improve', 3), ('linear memory', 3), ('linked-list', 3), ('map', 3), ('mapreduce', 3), ('python2', 3), ('sequence', 3), ('treeset', 3), ('two-pointers', 3), ('unorderedset', 3), ('accepted', 2), ('amazon', 2), ('best approach', 2), ('best-submission', 2), ('better', 2), ('c++11', 2), ('dictionary', 2), ('dynamic-programming', 2), ('explanation of logic', 2), ('fast-solution', 2), ('graph', 2), ('intuition', 2), ('iterator', 2), ('kotlin', 2), ('medium', 2), ('naive', 2), ('readable', 2), ('recursion', 2), ('test-case', 2), ('time', 2), ('treemap', 2), ('unordered set', 2), ('works-on-my-machine', 2), ('#dictionary', 1), ('#heap', 1), ('#javascript', 1), ('1 pass', 1), ('100 faster cpp', 1), ('100 faster runtime', 1), ('12ms runtime', 1), ('2ms', 1), ('4ms', 1), ('99.2 faster', 1), ('algorithms', 1), ('array-sort', 1), ('bad', 1), ('beginner friendly', 1), ('best solution', 1), ('bfs', 1), ('bit-manipulation', 1), ('brute', 1), ('c# sortedset', 1), ('c++ hash', 1), ('clean-code', 1), ('clean-efficient-code', 1), ('code comments', 1), ('commented', 1), ('comments', 1), ('comments added', 1), ('complexity-analysis', 1), ('consecutive', 1), ('constant-space', 1), ('count-sort', 1), ('cpp easy', 1), ('cpp-solution', 1), ('csharp', 1), ('depth-first-search', 1), ('detailed explanation', 1), ('dfs simple solution', 1), ('dfs-recursive', 1), ('dictionary array', 1), ('disjoint-sets', 1), ('divide-and-conquer', 1), ('divideconquer', 1), ('dp', 1), ('dp-techqique', 1), ('easy-to-understand', 1), ('error', 1), ('explained', 1), ('explained solution', 1), ('explanations4problem', 1), ('extended-question', 1), ('give stars and subscribe', 1), ('go', 1), ('google', 1), ('hard problem', 1), ('hash', 1), ('hash set', 1), ('hasmap', 1), ('interview-friendly', 1), ('intuitive', 1), ('iterative', 1), ('js', 1), ('kadanes algo', 1), ('kotlin-solution', 1), ('leetchadcode', 1), ('linear', 1), ('linear space', 1), ('linear-memory', 1), ('linear-time-space', 1), ('linertime', 1), ('list', 1), ('logic-solution', 1), ('logn', 1), ('longest', 1), ('loop', 1), ('memoization', 1), ('memory optimized', 1), ('min-heap', 1), ('one-pass', 1), ('optimal', 1), ('optimal solution', 1), ('optimized', 1), ('other-solutions', 1), ('php', 1), ('php solution', 1), ('pointer', 1), ('pyhton3', 1), ('pythonpython3', 1), ('question', 1), ('question-not-clear', 1), ('quicksort', 1), ('ranges', 1), ('run-time-error', 1), ('short code', 1), ('short solution', 1), ('sliding-window', 1), ('slidingwindow', 1), ('solution-sharing', 1), ('solution-sharing-cpp', 1), ('sorted', 1), ('sorted array', 1), ('sortedset', 1), ('space', 1), ('stack', 1), ('streak', 1), ('swift5', 1), ('taken', 1), ('thought-process', 1), ('time-limit-exceeded', 1), ('tle', 1), ('trade-off', 1), ('trie', 1), ('unique', 1), ('unoptimized-structure', 1), ('unordered map', 1), ('vectors', 1), ('video explanation', 1), ('video-explanation', 1), ('walk', 1), ('well-commented', 1), ('wrong-answer', 1), ('xjq', 1), ('youtube', 1)]"
127,Word Ladder,https://leetcode.com/problems/word-ladder,"A transformation sequence from word beginWord to word endWord using a dictionary wordList is a sequence of words beginWord -> s1 -> s2 -> ... -> sk such that:


	Every adjacent pair of words differs by a single letter.
	Every si for 1 <= i <= k is in wordList. Note that beginWord does not need to be in wordList.
	sk == endWord


Given two words, beginWord and endWord, and a dictionary wordList, return the number of words in the shortest transformation sequence from beginWord to endWord, or 0 if no such sequence exists.",['breadth-first-search'],Hard,4945,1415,1774625,573197,"[""Word Ladder II"", ""Minimum Genetic Mutation""]","[('bfs', 147), ('java', 53), ('python', 43), ('javascript', 34), ('cpp', 21), ('python 3', 20), ('time-limit-exceeded', 20), ('c++', 17), ('testcase-wrong', 16), ('queue', 11), ('word-ladder', 11), ('test-case', 9), ('golang', 8), ('tle', 8), ('wrong-answer', 8), ('bidirectional', 7), ('breadth first search', 7), ('dfs', 7), ('easy-understand', 7), ('solution', 7), ('c#', 6), ('java-solution', 6), ('python3', 6), ('time-complexity', 6), ('#bfs', 4), ('easy-understanding', 4), ('graph', 4), ('run-time-error', 4), ('swift', 4), ('works-on-my-machine', 4), ('backtracking', 3), ('breadth-first-search', 3), ('c++ code', 3), ('cpp solution', 3), ('easy-to-understand', 3), ('help', 3), ('improve', 3), ('java ac solution', 3), ('javascript solution', 3), ('ruby', 3), ('time', 3), ('accepted', 2), ('best-submission', 2), ('bfs java', 2), ('bfs python', 2), ('bfs simple solution', 2), ('bi-direction', 2), ('bidirectional bfs', 2), ('compile-error', 2), ('dbfs', 2), ('dijkstras', 2), ('easy', 2), ('easy-undestand', 2), ('easytounderstand', 2), ('explained', 2), ('go', 2), ('go-solution', 2), ('hashmap', 2), ('help needed', 2), ('incorrect-test-case', 2), ('js', 2), ('runtime-error', 2), ('runtimeerror', 2), ('sets', 2), ('simple solution', 2), ('simple-solution', 2), ('solution-sharing-cpp', 2), ('string', 2), ('trie', 2), ('word ladder', 2), ('wrong', 2), ('#easy-understand', 1), ('#javascript', 1), ('#python 3', 1), ('#queue', 1), ('100', 1), ('127', 1), ('a-star', 1), ('ac', 1), ('adjacency list', 1), ('algorithm', 1), ('amazon', 1), ('answer', 1), ('astar', 1), ('bfs with prev path map', 1), ('bfs-java', 1), ('bfsc++', 1), ('bi-dfs', 1), ('bidirectional-bfs', 1), ('breadth first traversal', 1), ('breadth-first', 1), ('breadthfirstsearch', 1), ('breath first search', 1), ('breath-first', 1), ('bsf', 1), ('bug', 1), ('c', 1), ('c+', 1), ('clear explanation', 1), ('commented', 1), ('comments-added', 1), ('complexity', 1), ('constant-space', 1), ('cplusplus', 1), ('datastructure', 1), ('dfs-topdown', 1), ('different-oj-local', 1), ('djikstra', 1), ('dynamic-programming', 1), ('easiest', 1), ('easysolution', 1), ('eclipse', 1), ('es6', 1), ('exceeded', 1), ('explanation with code', 1), ('fast', 1), ('faster than 95.46', 1), ('generator', 1), ('golang-solution', 1), ('graphs', 1), ('hash set', 1), ('interview', 1), ('intuitive', 1), ('intutive', 1), ('iterative', 1), ('java solution', 1), ('kotlin', 1), ('ladder', 1), ('leetcode-library', 1), ('limit', 1), ('nameerror', 1), ('needimprovement', 1), ('no graph', 1), ('ojerror', 1), ('one-end-bfs', 1), ('one-pass', 1), ('optimal', 1), ('optimized', 1), ('pair', 1), ('pattern', 1), ('performance', 1), ('preprocessing', 1), ('problem', 1), ('python bfs', 1), ('python2', 1), ('queues', 1), ('recursion', 1), ('recursive', 1), ('rust', 1), ('search', 1), ('set', 1), ('shortest-path', 1), ('simple', 1), ('simple clear c++ solution', 1), ('solved', 1), ('space-complexity', 1), ('stack', 1), ('statement', 1), ('straightforward', 1), ('stringbuilder', 1), ('strings', 1), ('submit', 1), ('tc', 1), ('test-case-bug', 1), ('testcase', 1), ('testcase error', 1), ('time limit exceeded', 1), ('time-limit-exceeded-java', 1), ('timeout', 1), ('two-end-bfs', 1), ('two-way bfs', 1), ('typeerror', 1), ('undirected graph', 1), ('unicode', 1), ('unordered map', 1), ('unordered set', 1), ('video', 1), ('video-explanation', 1), ('visited', 1), ('wrong-judgement', 1), ('xjq', 1), ('youtube', 1), ('zea7ot', 1)]"
126,Word Ladder II,https://leetcode.com/problems/word-ladder-ii,"A transformation sequence from word beginWord to word endWord using a dictionary wordList is a sequence of words beginWord -> s1 -> s2 -> ... -> sk such that:


	Every adjacent pair of words differs by a single letter.
	Every si for 1 <= i <= k is in wordList. Note that beginWord does not need to be in wordList.
	sk == endWord


Given two words, beginWord and endWord, and a dictionary wordList, return all the shortest transformation sequences from beginWord to endWord, or an empty list if no such sequence exists. Each sequence should be returned as a list of the words [beginWord, s1, s2, ..., sk].","['array', 'string', 'backtracking', 'breadth-first-search']",Hard,2457,298,945215,225718,"[""Word Ladder""]","[('bfs', 68), ('java', 38), ('dfs', 23), ('python', 21), ('backtracking', 14), ('time-limit-exceeded', 14), ('cpp', 11), ('easy-understand', 10), ('javascript', 10), ('c++', 9), ('solution', 9), ('word-ladder-ii', 8), ('test-case', 6), ('wrong-answer', 6), ('breadth first search', 5), ('c#', 5), ('graph', 5), ('python 3', 5), ('tle', 5), ('time-complexity', 4), ('word-ladder', 4), ('golang', 3), ('improve', 3), ('java-solution', 3), ('memory-limit-exceeded', 3), ('run-time-error', 3), ('accepted', 2), ('breadth-first-search', 2), ('dbfs', 2), ('depth first search', 2), ('dfs-bfs', 2), ('dijkstra', 2), ('easytounderstand', 2), ('golang-solution', 2), ('incorrect-test-case', 2), ('python3', 2), ('string', 2), ('testcase-wrong', 2), ('tree', 2), ('works-on-my-machine', 2), ('a-star search', 1), ('adjacency list', 1), ('advice', 1), ('back tracking', 1), ('backtracking dfs', 1), ('best-submission', 1), ('bfs simple solution', 1), ('bfs tle', 1), ('bfs-dfs', 1), ('bi-direction', 1), ('bidirectional bfs', 1), ('breadth-first search', 1), ('breath-first', 1), ('bug', 1), ('build', 1), ('c', 1), ('chinese', 1), ('clarification', 1), ('clean code', 1), ('compile-error', 1), ('complexity-analysis', 1), ('cplusplus', 1), ('cpp solution', 1), ('cpp-solution', 1), ('csharp', 1), ('dag', 1), ('detailed explanation', 1), ('dfs recursive', 1), ('doubt', 1), ('doubts', 1), ('easiest', 1), ('easy-understanding', 1), ('easy-undestand', 1), ('explained', 1), ('explanation', 1), ('fast', 1), ('hash map', 1), ('hashmap', 1), ('hashset', 1), ('help', 1), ('help me', 1), ('hints', 1), ('i got an curious error', 1), ('iterative', 1), ('iterator', 1), ('java ac solution', 1), ('keep it simple', 1), ('kotlin', 1), ('level-order-traversal', 1), ('map', 1), ('memory-limited-exceeded', 1), ('path', 1), ('php', 1), ('php solution', 1), ('python bfs', 1), ('question need help', 1), ('questionhelp', 1), ('readable', 1), ('remember', 1), ('ruby', 1), ('runcode ok', 1), ('share java solution', 1), ('share my bfs c++', 1), ('short', 1), ('simple and elegant', 1), ('slow', 1), ('solution-sharing-cpp', 1), ('solution-sharing-python', 1), ('straight-forward', 1), ('summit error', 1), ('time-limit-exceeded-c', 1), ('time-limit-exceeded-java', 1), ('trees', 1), ('tries', 1), ('video', 1), ('well commented', 1), ('well-commented', 1), ('word ladder', 1), ('word ladder 2', 1), ('word ladder ii', 1), ('youtube', 1)]"
125,Valid Palindrome,https://leetcode.com/problems/valid-palindrome,"Given a string s, determine if it is a palindrome, considering only alphanumeric characters and ignoring cases.","['two-pointers', 'string']",Easy,1935,3797,2196157,849188,"[""Palindrome Linked List"", ""Valid Palindrome II""]","[('java', 113), ('python', 103), ('python 3', 70), ('c++', 60), ('javascript', 57), ('two-pointers', 57), ('cpp', 54), ('python3', 51), ('palindrome', 42), ('java-solution', 32), ('regex', 28), ('solution', 26), ('easy-understanding', 22), ('two pointers', 21), ('easy', 17), ('string', 16), ('c#', 15), ('golang', 15), ('easy-undestand', 13), ('cpp solution', 12), ('easytounderstand', 12), ('two-pointer', 12), ('palindrome-check', 11), ('valid-palindrome', 11), ('javascript solution', 10), ('swift', 10), ('recursion', 9), ('simple', 9), ('fast', 7), ('fast and simple', 7), ('ruby', 7), ('2 pointers', 6), ('time-limit-exceeded', 6), ('accepted', 5), ('c', 5), ('easiest', 5), ('easy-understand', 5), ('go-solution', 5), ('golang-solution', 5), ('one-liner', 5), ('simple solution', 5), ('string-operation', 5), ('easy-to-understand', 4), ('explained', 4), ('fastest', 4), ('regular expression', 4), ('regular-expression', 4), ('short', 4), ('#python', 3), ('0ms', 3), ('1ms', 3), ('3ms', 3), ('ascii', 3), ('compile-error', 3), ('deque', 3), ('easy to understand', 3), ('easy undestanding', 3), ('go', 3), ('in-place', 3), ('java solution', 3), ('linear time', 3), ('readable', 3), ('run-time-error', 3), ('test-case', 3), ('twopointer', 3), ('typescript', 3), ('video-explanation', 3), ('wrong-answer', 3), ('#easy-understand', 2), ('100 speed', 2), ('5ms solution', 2), ('beauty', 2), ('c++ code', 2), ('c++ solution', 2), ('char compare', 2), ('clear', 2), ('constant space', 2), ('efficient', 2), ('explanation', 2), ('explanation of logic', 2), ('facebook', 2), ('fast-solution', 2), ('functional', 2), ('improve', 2), ('isalnum', 2), ('iteration', 2), ('java ac solution', 2), ('javascrip', 2), ('js', 2), ('kotlin', 2), ('linear-time', 2), ('memory-limit-exceeded', 2), ('optimal', 2), ('php', 2), ('php solution', 2), ('pointer', 2), ('python2', 2), ('regexp', 2), ('reverse', 2), ('rust', 2), ('scala', 2), ('simplest', 2), ('simplicity', 2), ('small', 2), ('solution-share', 2), ('space o1', 2), ('strings', 2), ('tle', 2), ('two pointer technique', 2), ('twopointers', 2), ('valid', 2), ('valid palindrome', 2), ('video explanation', 2), ('video solution', 2), ('#easy-understanding', 1), ('#easysolution', 1), ('#javascript', 1), ('#pallindrome', 1), ('#python 3', 1), ('#python3', 1), ('#regex', 1), ('#solution', 1), ('#two-pointers', 1), ('1 liner', 1), ('100 faster', 1), ('100 faster cpp', 1), ('14ms', 1), ('2 line', 1), ('2 pointer', 1), ('2-line', 1), ('2-lines', 1), ('2liner', 1), ('2pointers', 1), ('52ms', 1), ('5ms', 1), ('680', 1), ('6ms', 1), ('accepted solution', 1), ('acsii', 1), ('algorithms', 1), ('array', 1), ('basics', 1), ('beats 100', 1), ('beginner friendly', 1), ('big o of n', 1), ('bit-mask', 1), ('brutal force optmized', 1), ('bug report', 1), ('built-in', 1), ('c code', 1), ('c++11', 1), ('character', 1), ('clean', 1), ('clean code', 1), ('clean-code', 1), ('clean-efficient-code', 1), ('commented', 1), ('concise', 1), ('consice', 1), ('constant memory', 1), ('constant-space', 1), ('cpp easy', 1), ('csharp', 1), ('delegate', 1), ('doubts', 1), ('easy solution', 1), ('easy to read', 1), ('easy-code', 1), ('easysolution', 1), ('es6', 1), ('explaination', 1), ('explanatory comments', 1), ('faster', 1), ('faster than 99', 1), ('filter', 1), ('for loop', 1), ('fully explained', 1), ('fun', 1), ('functional programming', 1), ('generator', 1), ('generator expression', 1), ('github', 1), ('give stars and subscribe', 1), ('good variable names', 1), ('hard coded', 1), ('hashing', 1), ('hashmap', 1), ('help', 1), ('help me', 1), ('immutability', 1), ('incorrect-test-case', 1), ('intuitive', 1), ('ispalindrome', 1), ('iterative', 1), ('iterator', 1), ('izaac', 1), ('java slowest', 1), ('javacript', 1), ('javascipt', 1), ('javascriptes6', 1), ('join', 1), ('js javascript', 1), ('kotlinvim', 1), ('lambda expression', 1), ('leetcode-library', 1), ('linear', 1), ('linq', 1), ('loop', 1), ('loop-invariant', 1), ('loops', 1), ('map function', 1), ('naive-solution', 1), ('no regex', 1), ('one line', 1), ('one pass solution', 1), ('palindrome c#', 1), ('peasy', 1), ('pointer arithmetic', 1), ('pyhton', 1), ('pyhton 3', 1), ('python 2', 1), ('python3.3', 1), ('python3.9', 1), ('python4', 1), ('pythonpython3', 1), ('recursive', 1), ('recursively', 1), ('regexmatch', 1), ('replace', 1), ('reversed', 1), ('runtime-error', 1), ('simple clear c++ solution', 1), ('simple java', 1), ('simple python solution', 1), ('simplesolution', 1), ('single two pointer', 1), ('slicing', 1), ('sliding window', 1), ('solution c++', 1), ('solution-javascript', 1), ('solution-sharing-c', 1), ('solution-sharing-cpp', 1), ('solved', 1), ('split', 1), ('stack', 1), ('standard-library', 1), ('stl', 1), ('straightforward', 1), ('string functions', 1), ('string manipulation', 1), ('string.index', 1), ('stringbuffer', 1), ('stringbuilder', 1), ('stringview', 1), ('structured code', 1), ('subpalindrome', 1), ('substring', 1), ('test-cases', 1), ('testcase-wrong', 1), ('time-limit-exceeded-java', 1), ('tow-pointers', 1), ('two pointer approach', 1), ('two-lines', 1), ('unit-test', 1), ('validation', 1), ('video', 1), ('video explaination', 1), ('well-commented', 1), ('well-explained', 1), ('why', 1), ('withouttransform', 1)]"
124,Binary Tree Maximum Path Sum,https://leetcode.com/problems/binary-tree-maximum-path-sum,"A path in a binary tree is a sequence of nodes where each pair of adjacent nodes in the sequence has an edge connecting them. A node can only appear in the sequence at most once. Note that the path does not need to pass through the root.

The path sum of a path is the sum of the node's values in the path.

Given the root of a binary tree, return the maximum path sum of any path.","['tree', 'depth-first-search', 'recursion']",Hard,5587,387,1400773,500678,"[""Path Sum"", ""Sum Root to Leaf Numbers"", ""Path Sum IV"", ""Longest Univalue Path"", ""Time Needed to Inform All Employees""]","[('java', 66), ('python', 64), ('dfs', 54), ('recursion', 49), ('c++', 30), ('cpp', 30), ('python 3', 28), ('binary-tree', 21), ('recursive', 20), ('javascript', 19), ('java-solution', 17), ('python3', 11), ('c#', 9), ('easy-understanding', 8), ('dfs simple solution', 7), ('post-order-traversal', 7), ('dynamic programming', 6), ('golang', 6), ('iterative', 6), ('postorder-traversal', 6), ('swift', 6), ('tree', 6), ('wrong-answer', 6), ('easy-to-understand', 5), ('c', 4), ('easy-undestand', 4), ('explained', 4), ('javascript solution', 4), ('postorder', 4), ('solution', 4), ('test-case', 4), ('accepted', 3), ('beats 100', 3), ('binary tree', 3), ('binary-search', 3), ('c++ code', 3), ('cpp solution', 3), ('dfs-tree', 3), ('easy to understand', 3), ('fast and simple', 3), ('improve', 3), ('python2', 3), ('recursive solution', 3), ('recursively', 3), ('recusion', 3), ('scala', 3), ('short', 3), ('simple', 3), ('testcase-wrong', 3), ('tree traversal', 3), ('tree-traversal', 3), ('works-on-my-machine', 3), ('#python 3', 2), ('backtracking', 2), ('csharp', 2), ('depth first search', 2), ('depth-first search', 2), ('depth-first-search', 2), ('dfs traversal', 2), ('dfs-bottomup', 2), ('different-oj-local', 2), ('divideconquer', 2), ('easytounderstand', 2), ('explanation with logic', 2), ('go-solution', 2), ('golang-solution', 2), ('javascript recursive', 2), ('js', 2), ('kotlin', 2), ('optimized', 2), ('path sum', 2), ('pre-order', 2), ('recursive easy', 2), ('recusive', 2), ('ruby', 2), ('run-time-error', 2), ('runtime-error', 2), ('rust', 2), ('simple python solution', 2), ('video explanation', 2), ('wrong answer', 2), ('#javascript', 1), ('#recursion', 1), ('#simple', 1), ('#tree-taversals', 1), ('0ms', 1), ('100 faster', 1), ('100 faster runtime', 1), ('100 speed', 1), ('algorithms', 1), ('amazon', 1), ('awesome samriddhi', 1), ('beats-100', 1), ('best', 1), ('best-solution', 1), ('best-submission', 1), ('bfs', 1), ('binary search', 1), ('binary tree paths', 1), ('bottom-up-algorithm', 1), ('breath first search', 1), ('bst', 1), ('class design', 1), ('clean code', 1), ('commented code', 1), ('comments', 1), ('complexity-analysis', 1), ('cpp easy', 1), ('deep-first-search', 1), ('detailed', 1), ('dfs recursive', 1), ('dfs-postorder', 1), ('dfs-recursive', 1), ('diagrams', 1), ('dp', 1), ('dp-techqique', 1), ('dynamic-programming', 1), ('east', 1), ('easy', 1), ('easy code', 1), ('easy to understandd', 1), ('easy-solition', 1), ('easy-understand', 1), ('easy-understsand', 1), ('efficient solution', 1), ('es6', 1), ('explain', 1), ('explanation', 1), ('explanations', 1), ('facebook intern', 1), ('fast', 1), ('fast-solution', 1), ('fastest', 1), ('fastest solution', 1), ('give stars and subscribe', 1), ('go', 1), ('graph', 1), ('greedy', 1), ('hard', 1), ('help', 1), ('help needed', 1), ('intuitive', 1), ('intutive', 1), ('iterative-dfs', 1), ('itereative', 1), ('java ac solution', 1), ('kadane algorithm', 1), ('kotlinvim', 1), ('lambda', 1), ('lambda expression', 1), ('linear time', 1), ('maximum path sum', 1), ('maximum-path-sum', 1), ('memoization', 1), ('minimax', 1), ('no-global', 1), ('non-recursive', 1), ('path-sum', 1), ('post order traversal', 1), ('postorder traversal', 1), ('problem', 1), ('pseudocode', 1), ('python3.8', 1), ('pythonpython3', 1), ('query', 1), ('readable', 1), ('recurision', 1), ('recursive dp', 1), ('recursive-dfs', 1), ('rescursion', 1), ('ritik', 1), ('satya', 1), ('short c++ code', 1), ('simple clear c++ solution', 1), ('simple solution', 1), ('simplesolution', 1), ('simplest', 1), ('solution-sharingjava', 1), ('swift5', 1), ('testcase error', 1), ('time-complexity', 1), ('time-limit-exceeded', 1), ('tle', 1), ('tranverse', 1), ('traverse', 1), ('tree problem', 1), ('tuple', 1), ('typescript', 1), ('updowndota', 1), ('video', 1), ('wrong output', 1), ('wrong-execution-result', 1), ('wrong-test-cases', 1), ('youtube', 1)]"
123,Best Time to Buy and Sell Stock III,https://leetcode.com/problems/best-time-to-buy-and-sell-stock-iii,"You are given an array prices where prices[i] is the price of a given stock on the ith day.

Find the maximum profit you can achieve. You may complete at most two transactions.

Note: You may not engage in multiple transactions simultaneously (i.e., you must sell the stock before you buy again).","['array', 'dynamic-programming']",Hard,3485,90,714920,287976,"[""Best Time to Buy and Sell Stock"", ""Best Time to Buy and Sell Stock II"", ""Best Time to Buy and Sell Stock IV"", ""Maximum Sum of 3 Non-Overlapping Subarrays""]","[('dynamic programming', 35), ('java', 32), ('cpp', 27), ('c++', 25), ('dynamic-programming', 18), ('python', 18), ('easy-understanding', 12), ('dp', 11), ('javascript', 9), ('python 3', 7), ('solution', 7), ('c#', 6), ('easiest', 6), ('easy-understand', 5), ('explained', 5), ('memoization', 5), ('golang', 4), ('test-case', 4), ('time-complexity', 4), ('wrong-answer', 4), ('accepted', 3), ('constant-space', 3), ('cpp solution', 3), ('divide and conquer', 3), ('java-solution', 3), ('python3', 3), ('recursion', 3), ('testcase-wrong', 3), ('c++ solution', 2), ('dp-programming', 2), ('easy-to-understand', 2), ('easytounderstand', 2), ('explanation', 2), ('explanations', 2), ('greedy', 2), ('improve', 2), ('recursive', 2), ('ruby', 2), ('scala', 2), ('simple clear c++ solution', 2), ('space-complexity', 2), ('state machine', 2), ('state-transition', 2), ('stock', 2), ('swift', 2), ('time-limit-exceeded', 2), ('video-explanation', 2), ('works-on-my-machine', 2), ('#123', 1), ('2ms', 1), ('4ms', 1), ('accepted solution', 1), ('algorithms', 1), ('awesome samriddhi', 1), ('beginner friendly', 1), ('best-submission', 1), ('best-time-to-buy-and-sell-stoc', 1), ('buy sell stock', 1), ('commented', 1), ('comments', 1), ('constant space', 1), ('constant-space-iterative', 1), ('csharp', 1), ('detailed explanation', 1), ('dfs', 1), ('dfs recursive', 1), ('divide and conqour', 1), ('easy', 1), ('easy understand', 1), ('easy understanding', 1), ('easy-undestand', 1), ('error', 1), ('explain', 1), ('explained solution', 1), ('explanations4problem', 1), ('fast-solution', 1), ('faster than 99.8', 1), ('fully-explained', 1), ('generic-solution', 1), ('give stars and subscribe', 1), ('go', 1), ('golang-solution', 1), ('intuitive', 1), ('javascript solution', 1), ('leetcode-issue-only', 1), ('linear time', 1), ('linear-time', 1), ('local maximum', 1), ('local minimum', 1), ('math', 1), ('meiyaowen', 1), ('memo', 1), ('memory-limit-exceeded', 1), ('n', 1), ('prefix array', 1), ('prefix suffix', 1), ('priority queue', 1), ('question-error', 1), ('question-not-clear', 1), ('readable', 1), ('recursively', 1), ('ritik', 1), ('rust', 1), ('sequence', 1), ('series', 1), ('share-solution', 1), ('solution-share', 1), ('solution-sharing-c', 1), ('stocks', 1), ('swift5', 1), ('test-cases', 1), ('timed', 1), ('two passes', 1), ('typescript', 1), ('video-solution', 1), ('visualization', 1), ('well-commented', 1), ('youtube', 1)]"
122,Best Time to Buy and Sell Stock II,https://leetcode.com/problems/best-time-to-buy-and-sell-stock-ii,"You are given an array prices where prices[i] is the price of a given stock on the ith day.

Find the maximum profit you can achieve. You may complete as many transactions as you like (i.e., buy one and sell one share of the stock multiple times).

Note: You may not engage in multiple transactions simultaneously (i.e., you must sell the stock before you buy again).","['array', 'greedy']",Easy,4075,1980,1389448,818979,"[""Best Time to Buy and Sell Stock"", ""Best Time to Buy and Sell Stock III"", ""Best Time to Buy and Sell Stock IV"", ""Best Time to Buy and Sell Stock with Cooldown"", ""Best Time to Buy and Sell Stock with Transaction Fee""]","[('python', 68), ('java', 61), ('cpp', 51), ('c++', 48), ('python 3', 43), ('javascript', 39), ('dynamic programming', 22), ('greedy', 19), ('python3', 18), ('easy-understanding', 17), ('java-solution', 17), ('cpp solution', 15), ('easy-undestand', 13), ('easy', 10), ('solution', 10), ('dp', 9), ('easy-understand', 9), ('dynamic-programming', 8), ('golang', 8), ('linear time', 7), ('one-liner', 7), ('wrong-answer', 7), ('c#', 6), ('cpp easy', 6), ('javascript solution', 6), ('simple solution', 6), ('buy and sell stock ii', 5), ('c', 5), ('constant-space', 5), ('easy to understand', 5), ('iterative', 5), ('kotlin', 5), ('simple', 5), ('easytounderstand', 4), ('fast and simple', 4), ('golang-solution', 4), ('one-loop', 4), ('python2', 4), ('accepted', 3), ('c++ solution', 3), ('constant space', 3), ('easiest', 3), ('easy-to-understand', 3), ('greedy approach', 3), ('linear-time', 3), ('recursion', 3), ('short', 3), ('stock', 3), ('time-complexity', 3), ('algorithms', 2), ('arrays', 2), ('best-submission', 2), ('best-time-to-buy-and-sell-stoc', 2), ('buy and sell stock', 2), ('c code', 2), ('c++ code', 2), ('cat racket', 2), ('catracket', 2), ('commetend', 2), ('csharp', 2), ('easy solution', 2), ('functional', 2), ('go-solution', 2), ('java ac solution', 2), ('java solution', 2), ('js', 2), ('linear', 2), ('math', 2), ('memoization', 2), ('peak valley approach', 2), ('performance', 2), ('pythonpython3', 2), ('ruby', 2), ('run-time-error', 2), ('rust', 2), ('scala', 2), ('single pass', 2), ('sliding window', 2), ('solution-javascript', 2), ('solution-share', 2), ('state-machine', 2), ('stl', 2), ('test-case', 2), ('testcase-wrong', 2), ('top-down dp', 2), ('two-pointers', 2), ('video', 2), ('video explanation', 2), ('visualization', 2), ('youtube', 2), ('#javascript', 1), ('1 line', 1), ('1-liner', 1), ('1ms', 1), ('2 pointers', 1), ('4 lines', 1), ('99 faster', 1), ('addition', 1), ('and', 1), ('array', 1), ('beats 98 pc', 1), ('begineer', 1), ('beginnerfriendly', 1), ('beginners', 1), ('branchless', 1), ('brute', 1), ('buy', 1), ('buysell', 1), ('c plus plus', 1), ('c++11', 1), ('c++17', 1), ('clean', 1), ('clean code', 1), ('clear-understanding', 1), ('comment', 1), ('comments added', 1), ('comments-added', 1), ('concise', 1), ('concise-solution', 1), ('constant memory', 1), ('constant-space-iterative', 1), ('detailed thinking step', 1), ('dfs', 1), ('dp-techqique', 1), ('easy as f', 1), ('easy understanding', 1), ('easy-understsand', 1), ('efficient', 1), ('elegant', 1), ('error', 1), ('explaination', 1), ('explained', 1), ('explanation', 1), ('facebook interview', 1), ('fast', 1), ('fast-solution', 1), ('fastest', 1), ('for loop', 1), ('for-loop', 1), ('functional programming', 1), ('functional-programming', 1), ('generator-expression', 1), ('go', 1), ('go lang', 1), ('hardtounderstand', 1), ('help', 1), ('immutable', 1), ('incremental addition', 1), ('index', 1), ('induction', 1), ('intuitive', 1), ('iteration', 1), ('iteratively', 1), ('java bit-manipulation', 1), ('java solution using dfs', 1), ('java11', 1), ('joke', 1), ('knapsack', 1), ('leetcode 122', 1), ('less memory', 1), ('linq', 1), ('list comprehension', 1), ('local maximum', 1), ('local minimum', 1), ('maths', 1), ('meiyaowen', 1), ('memory-limit-exceeded', 1), ('minimal', 1), ('must watch', 1), ('one line', 1), ('one pass', 1), ('oneline', 1), ('oneliner', 1), ('optimal', 1), ('pointers', 1), ('python3.8', 1), ('question-not-clear', 1), ('recurision', 1), ('recursive', 1), ('recusion', 1), ('reduce', 1), ('sell', 1), ('sequence', 1), ('series', 1), ('short code', 1), ('short-and-sweet', 1), ('shortest', 1), ('simple clear c++ solution', 1), ('simple python solution', 1), ('simple-solution', 1), ('simplest', 1), ('solution-sharing-c', 1), ('solution-sharing-cpp', 1), ('stack', 1), ('stl algorithms', 1), ('stockexchangeproblem', 1), ('stockii', 1), ('stocks', 1), ('swift', 1), ('time-limit-exceeded', 1), ('tuple comprehension', 1), ('two', 1), ('two pointer technique', 1), ('two pointers', 1), ('two-pointer', 1), ('typescript', 1), ('understandable', 1), ('valley-and-peak', 1), ('vector', 1), ('video-explanation', 1), ('video-sol', 1), ('welcome', 1), ('works-on-my-machine', 1), ('wronganswer', 1), ('you-might-like', 1)]"
121,Best Time to Buy and Sell Stock,https://leetcode.com/problems/best-time-to-buy-and-sell-stock,"You are given an array prices where prices[i] is the price of a given stock on the ith day.

You want to maximize your profit by choosing a single day to buy one stock and choosing a different day in the future to sell that stock.

Return the maximum profit you can achieve from this transaction. If you cannot achieve any profit, return 0.","['array', 'dynamic-programming']",Easy,8357,363,2488838,1291632,"[""Maximum Subarray"", ""Best Time to Buy and Sell Stock II"", ""Best Time to Buy and Sell Stock III"", ""Best Time to Buy and Sell Stock IV"", ""Best Time to Buy and Sell Stock with Cooldown""]","[('java', 112), ('python', 98), ('python 3', 68), ('cpp', 67), ('c++', 58), ('dynamic programming', 57), ('dynamic-programming', 46), ('javascript', 42), ('simple', 41), ('python3', 31), ('solution', 28), ('easy-understanding', 26), ('java-solution', 26), ('easy-understand', 19), ('dp', 16), ('linear time', 16), ('cpp solution', 13), ('golang', 13), ('array', 12), ('greedy', 12), ('simple solution', 12), ('easy', 11), ('swift', 11), ('c#', 10), ('constant-space', 10), ('easy-undestand', 9), ('javascript solution', 8), ('accepted', 7), ('brute force', 7), ('c++ code', 7), ('explained', 7), ('golang-solution', 7), ('kadane algorithm', 7), ('constant space', 6), ('easytounderstand', 6), ('two-pointers', 6), ('greedy approach', 5), ('kadane-algorithm', 5), ('kadanes algo', 5), ('short', 5), ('single pass', 5), ('time-complexity', 5), ('wrong-answer', 5), ('c', 4), ('clean code', 4), ('cpp easy', 4), ('divide and conquer', 4), ('go-solution', 4), ('kadanes algorithm', 4), ('optimal', 4), ('recursion', 4), ('run-time-error', 4), ('rust', 4), ('#javascript', 3), ('buy and sell stock', 3), ('commented', 3), ('constant memory', 3), ('easy-to-understand', 3), ('go', 3), ('java ac solution', 3), ('javascrip', 3), ('kotlin', 3), ('one pass', 3), ('onepass', 3), ('php', 3), ('ruby', 3), ('simpe', 3), ('stock', 3), ('stocks', 3), ('#easy', 2), ('#easy-understand', 2), ('100 speed', 2), ('2 pointer', 2), ('beginner', 2), ('brute force to optimal', 2), ('brute-force', 2), ('c++ solution', 2), ('clear', 2), ('divide-and-conquer', 2), ('dp-techqique', 2), ('easiest', 2), ('easiest solution', 2), ('easy to understandd', 2), ('explanation of logic', 2), ('fast', 2), ('fast and simple', 2), ('fastest', 2), ('greedy algorithm', 2), ('improve', 2), ('interview-friendly', 2), ('kadane', 2), ('linear', 2), ('linear-time', 2), ('lists', 2), ('maximum', 2), ('memoization', 2), ('on', 2), ('php solution', 2), ('python2', 2), ('pythonpython3', 2), ('recursive', 2), ('scala', 2), ('simple clear c++ solution', 2), ('stacks', 2), ('state-machine', 2), ('test-case', 2), ('time-optimized', 2), ('two-pointer', 2), ('typescript', 2), ('video explanation', 2), ('video-explanation', 2), ('#cpp', 1), ('#explained', 1), ('#python 3', 1), ('#recursion', 1), ('#recursive', 1), ('1 loop go', 1), ('100', 1), ('100 faster', 1), ('100 memory', 1), ('100 space', 1), ('94.86per faster', 1), ('99.4faster', 1), ('approach and code', 1), ('arrays', 1), ('basic', 1), ('beats 100', 1), ('begginer friendly', 1), ('beginner friendly', 1), ('best explaination', 1), ('best time complexity', 1), ('best-time-to-buy-and-sell-stoc', 1), ('brutal force optmized', 1), ('buysell', 1), ('c code', 1), ('c++ cpp solution', 1), ('c++code', 1), ('clear-understanding', 1), ('code', 1), ('comments added', 1), ('comments-added', 1), ('commetend', 1), ('complexity', 1), ('concise', 1), ('concise-solution', 1), ('constant', 1), ('constant-space-iterative', 1), ('cpp error', 1), ('csharp', 1), ('cute', 1), ('detailed', 1), ('detailed explanation', 1), ('dictonary', 1), ('dive-and-conquer', 1), ('divideconquer', 1), ('dp-programming', 1), ('dshah14', 1), ('easy sloution', 1), ('easy soln', 1), ('easy to understand', 1), ('easy understanding', 1), ('easy undestanding', 1), ('easy-approach', 1), ('easy-solition', 1), ('easy-to-read', 1), ('easy-understsand', 1), ('edge-case', 1), ('efficent approach', 1), ('efficiency', 1), ('efficient', 1), ('exhaustive search', 1), ('explaination', 1), ('explanations', 1), ('faster than 99', 1), ('faster then 95', 1), ('fold', 1), ('for-beginner', 1), ('frnedly', 1), ('functions', 1), ('give stars and subscribe', 1), ('global optima', 1), ('go lang', 1), ('heap', 1), ('intuitive', 1), ('intutive', 1), ('iterate', 1), ('iteration', 1), ('iterative', 1), ('iteratively', 1), ('iteratve', 1), ('izaac', 1), ('java solution', 1), ('kadens algorithm', 1), ('kandane', 1), ('kotlinvim', 1), ('learning', 1), ('less memory', 1), ('linear search', 1), ('linear-complexity', 1), ('local maximum', 1), ('local minimum', 1), ('loops', 1), ('math', 1), ('max', 1), ('max-diff problem', 1), ('maximum subarray', 1), ('maximum-subarry', 1), ('meiyaowen', 1), ('memory-limit-exceeded', 1), ('merge sort', 1), ('minimum', 1), ('minimum-operation', 1), ('misaligned-error', 1), ('multiple solutions', 1), ('multiple-ways', 1), ('nested loop', 1), ('one-pass', 1), ('opinion', 1), ('optimal solution', 1), ('optimizations', 1), ('optimized', 1), ('pointer', 1), ('proof', 1), ('pyhton3', 1), ('python3.8', 1), ('question', 1), ('readable', 1), ('recurision', 1), ('recursive dp', 1), ('recursive easy', 1), ('recursive-solution', 1), ('request-for-explanation', 1), ('run-time error', 1), ('sequence', 1), ('series', 1), ('simple-solution', 1), ('simplest', 1), ('single loop', 1), ('solution c++', 1), ('solution-share', 1), ('solution-sharing-java', 1), ('sorting', 1), ('space-efficient', 1), ('stack', 1), ('stl', 1), ('straight-forward', 1), ('swift5', 1), ('testcase-wrong', 1), ('time', 1), ('time complexity', 1), ('time-limit-exceeded', 1), ('tow-pointers', 1), ('transform', 1), ('two approaches', 1), ('two pointer technique', 1), ('two pointers', 1), ('understandable', 1), ('valley-and-peak', 1), ('video', 1), ('video explaination', 1), ('video solution', 1), ('video-solution', 1), ('visualization', 1), ('walrus operator', 1), ('whiteboard', 1), ('wrong', 1), ('youtube', 1)]"
120,Triangle,https://leetcode.com/problems/triangle,"Given a triangle array, return the minimum path sum from top to bottom.

For each step, you may move to an adjacent number of the row below. More formally, if you are on index i on the current row, you may move to either index i or index i + 1 on the next row.","['array', 'dynamic-programming']",Medium,3094,319,666413,312896,[],"[('dynamic programming', 93), ('python', 69), ('java', 61), ('dynamic-programming', 58), ('dp', 47), ('c++', 40), ('cpp', 35), ('python 3', 21), ('javascript', 19), ('bottom-up-algorithm', 18), ('python3', 15), ('java-solution', 14), ('solution', 13), ('bottom up', 11), ('memoization', 11), ('top-down', 10), ('easy-understanding', 9), ('golang', 7), ('triangle', 7), ('wrong-answer', 7), ('accepted', 6), ('constant-space', 6), ('cpp solution', 6), ('recursion', 6), ('c#', 5), ('easy-undestand', 5), ('improve', 5), ('bottom-up', 4), ('constant space', 4), ('go', 4), ('rust', 4), ('simple', 4), ('space-complexity', 4), ('swift', 4), ('time-complexity', 4), ('backtracking', 3), ('c', 3), ('easy-understand', 3), ('explained', 3), ('explanation', 3), ('short', 3), ('top down dp', 3), ('bottoms-up', 2), ('c++ code', 2), ('clarification', 2), ('clean code', 2), ('csharp', 2), ('easy', 2), ('easy code', 2), ('easy-to-understand', 2), ('easytounderstand', 2), ('es6', 2), ('fast and simple', 2), ('golang-solution', 2), ('in-place', 2), ('java ac solution', 2), ('learning', 2), ('no-extra-space', 2), ('performance', 2), ('pretty print', 2), ('recursive', 2), ('ruby', 2), ('run-time-error', 2), ('short code', 2), ('simple solution', 2), ('space', 2), ('space-non', 2), ('test-case', 2), ('time-limit-exceeded', 2), ('top down', 2), ('top-down dp', 2), ('topdown', 2), ('typescript', 2), ('#120', 1), ('#java', 1), ('0-8ms', 1), ('120', 1), ('120lc', 1), ('2d dp', 1), ('4ms', 1), ('90+faster', 1), ('auxillary space', 1), ('awesome samriddhi', 1), ('best-submission', 1), ('bfs', 1), ('bug in leetcode', 1), ('bug-test-case', 1), ('c code', 1), ('c++ easy to understand', 1), ('c++ solution', 1), ('clean', 1), ('clean-efficient-code', 1), ('commented', 1), ('commented code', 1), ('comments-added', 1), ('compile-error', 1), ('constant memory', 1), ('cpp easy', 1), ('cpp-solution', 1), ('defaultdict', 1), ('depth first search', 1), ('dfs', 1), ('dfs simple solution', 1), ('dictionary', 1), ('dp bottom up', 1), ('dp pattern', 1), ('dp top down', 1), ('dp-iterative', 1), ('dp-programming', 1), ('dp-techqique', 1), ('dyanmic programming', 1), ('dynamic programming.', 1), ('dynaminc programming', 1), ('easy understanding', 1), ('efficiency', 1), ('fast', 1), ('fast-solution', 1), ('functional-programming', 1), ('go-solution', 1), ('graph traversal', 1), ('idiomatic', 1), ('in place', 1), ('incorrect-test-case', 1), ('inplace', 1), ('intutive', 1), ('iteration', 1), ('iteratively', 1), ('java 8', 1), ('javascript solution', 1), ('js', 1), ('kotlin', 1), ('level order', 1), ('linear space', 1), ('linear time', 1), ('linq', 1), ('list comprehension', 1), ('memoized', 1), ('no extra data structure', 1), ('no extra memory', 1), ('no extra space', 1), ('o1space', 1), ('one iteration', 1), ('one-liner', 1), ('other-solutions', 1), ('pyhton', 1), ('python2', 1), ('readable', 1), ('recurision', 1), ('recursive easy', 1), ('ritik', 1), ('scala', 1), ('self explanatory', 1), ('shortest path', 1), ('simple clear c++ solution', 1), ('simplest', 1), ('single array', 1), ('solution c++', 1), ('solution-sharing-c', 1), ('solution-sharing-cpp', 1), ('solutions', 1), ('space complexity', 1), ('space-complexity-1', 1), ('space-optimized', 1), ('stl', 1), ('table', 1), ('testcase error', 1), ('testcase-wrong', 1), ('time complexity', 1), ('top down approach', 1), ('ultra simple', 1), ('upvote', 1), ('why bfs fails', 1), ('why dfs fails', 1), ('works-on-my-machine', 1), ('wrong output', 1), ('wrong-execution-result', 1), ('wrong-test-cases', 1), ('zero space', 1)]"
119,Pascal's Triangle II,https://leetcode.com/problems/pascals-triangle-ii,"Given an integer rowIndex, return the rowIndexth (0-indexed) row of the Pascal's triangle.

In Pascal's triangle, each number is the sum of the two numbers directly above it as shown:",['array'],Easy,1329,222,701326,369522,"[""Pascal's Triangle""]","[('java', 75), ('python', 64), ('c++', 52), ('cpp', 50), ('python 3', 34), ('recursion', 26), ('python3', 23), ('javascript', 19), ('solution', 19), ('simple', 17), ('c#', 13), ('golang', 13), ('pascals triangle', 13), ('java-solution', 12), ('easy-understanding', 11), ('iterative', 9), ('short', 9), ('dynamic programming', 8), ('cpp solution', 7), ('easy-undestand', 7), ('math', 7), ('binomial coefficient', 6), ('dp', 6), ('easy-understand', 6), ('golang-solution', 6), ('swift', 6), ('wrong-answer', 6), ('0ms', 5), ('accepted', 5), ('easytounderstand', 5), ('fast', 5), ('go', 5), ('pascalstriangle', 5), ('recursive', 5), ('c', 4), ('c++ code', 4), ('constant-space', 4), ('cpp easy', 4), ('easy', 4), ('explained', 4), ('linear time', 4), ('memoization', 4), ('space-complexity', 4), ('time-complexity', 4), ('100 faster', 3), ('array', 3), ('combination', 3), ('combinatories', 3), ('dynamic-programming', 3), ('easy-to-understand', 3), ('fast and simple', 3), ('fastest', 3), ('go-solution', 3), ('one-loop', 3), ('optimized', 3), ('pascals', 3), ('python2', 3), ('recusion', 3), ('simple solution', 3), ('accepted solution', 2), ('c++11', 2), ('combinations', 2), ('cpp-solution', 2), ('easy to understand', 2), ('fast-solution', 2), ('formula', 2), ('intuitive', 2), ('iteration', 2), ('java ac solution', 2), ('mathematical', 2), ('recursively', 2), ('ruby', 2), ('run-time-error', 2), ('runtime-error', 2), ('short code', 2), ('straight-forward', 2), ('triangle', 2), ('wrong', 2), ('#python3', 1), ('#solution', 1), ('100 percentage fastest', 1), ('1d synamic programming', 1), ('2d-array', 1), ('3no-extra-space', 1), ('algorithm', 1), ('algorithms', 1), ('amazon interview', 1), ('array nesting', 1), ('arraylist', 1), ('arrays', 1), ('beginner', 1), ('beginner friendly', 1), ('c++ ac', 1), ('c++ solution', 1), ('c++ summary of related problem', 1), ('challenge-me', 1), ('clean code', 1), ('clean solution', 1), ('cleanest', 1), ('clear', 1), ('combinatorics', 1), ('compile-error', 1), ('concise', 1), ('concise-solution', 1), ('constant space', 1), ('csharp', 1), ('derivation', 1), ('easy understand', 1), ('easy-solition', 1), ('easy-solution', 1), ('efficient solution', 1), ('es6', 1), ('expalanation', 1), ('explaination', 1), ('explained solution', 1), ('explanation', 1), ('explanation of logic', 1), ('explanations4problem', 1), ('facebook', 1), ('facebook-india', 1), ('factorial', 1), ('faster than 100.00', 1), ('fasterthan100', 1), ('fastest java slution', 1), ('forward', 1), ('functional', 1), ('golang solution', 1), ('google', 1), ('google-india', 1), ('hash-table', 1), ('help needed', 1), ('improve', 1), ('indexes', 1), ('iterate', 1), ('javascript brute force', 1), ('javascriptes6', 1), ('kotlin', 1), ('linear space', 1), ('linear-space', 1), ('linear-time', 1), ('linq', 1), ('list', 1), ('logic explained', 1), ('math explained', 1), ('math-proof', 1), ('mathematical solution', 1), ('mathematics', 1), ('maths', 1), ('matrix', 1), ('memory', 1), ('memory efficient', 1), ('ncr', 1), ('no extra space', 1), ('no-code', 1), ('non-recursion', 1), ('ok space solution', 1), ('one pass', 1), ('one-pass', 1), ('oneliner', 1), ('pascal', 1), ('pascal triangle', 1), ('pascaltriangle', 1), ('pattern matching', 1), ('permutations', 1), ('php', 1), ('procedural', 1), ('pyhton', 1), ('queue', 1), ('recurision', 1), ('recursive dp', 1), ('reverse', 1), ('rust', 1), ('scala', 1), ('sequence', 1), ('series', 1), ('short and simple', 1), ('simple clear c++ solution', 1), ('solution-sharing-cpp', 1), ('space analysis', 1), ('stack', 1), ('stl', 1), ('testcase-wrong', 1), ('time-limit-exceeded', 1), ('type-cast', 1), ('typescript', 1), ('vector', 1), ('very-easy', 1), ('video', 1), ('video link', 1), ('video solution', 1), ('video-explanation', 1), ('without dp', 1), ('works-on-my-machine', 1), ('xjq', 1)]"
118,Pascal's Triangle,https://leetcode.com/problems/pascals-triangle,"Given an integer numRows, return the first numRows of Pascal's triangle.

In Pascal's triangle, each number is the sum of the two numbers directly above it as shown:",['array'],Easy,2446,130,870679,485535,"[""Pascal's Triangle II""]","[('python', 93), ('java', 77), ('c++', 76), ('cpp', 66), ('python 3', 52), ('javascript', 35), ('solution', 34), ('python3', 26), ('java-solution', 19), ('pascals triangle', 19), ('easy-understanding', 17), ('accepted', 15), ('dynamic programming', 14), ('easy', 14), ('simple solution', 13), ('cpp solution', 10), ('easy-understand', 10), ('golang', 10), ('iterative', 10), ('easy-undestand', 9), ('easytounderstand', 9), ('simple', 9), ('c#', 8), ('easy-to-understand', 8), ('dp', 7), ('javascript solution', 7), ('0ms', 6), ('array', 6), ('c++ code', 6), ('recursion', 6), ('vector', 6), ('100 speed', 5), ('pascals', 5), ('pascalstriangle', 5), ('python2', 5), ('recursive', 5), ('ruby', 5), ('swift', 5), ('wrong-answer', 5), ('c++11', 4), ('golang-solution', 4), ('list', 4), ('short', 4), ('accepted solution', 3), ('c++ easy to understand', 3), ('cpp easy', 3), ('dynamic-programming', 3), ('improve', 3), ('javascrip', 3), ('math', 3), ('recusion', 3), ('runtime-error', 3), ('time-complexity', 3), ('#python 3', 2), ('100 faster', 2), ('100 faster cpp', 2), ('100 space', 2), ('1ms', 2), ('3ms', 2), ('algorithms', 2), ('amazon', 2), ('answer', 2), ('arrays', 2), ('clean', 2), ('combination', 2), ('combinations', 2), ('explanation', 2), ('fast-solution', 2), ('faster than 100.00', 2), ('fastest', 2), ('go-solution', 2), ('google', 2), ('iteration', 2), ('java ac solution', 2), ('java solution', 2), ('memoization', 2), ('run-time-error', 2), ('rust', 2), ('short code', 2), ('test-case', 2), ('triangle', 2), ('typescript', 2), ('#java', 1), ('#javascript', 1), ('#pascal triangle', 1), ('100', 1), ('2d vector', 1), ('2d-array', 1), ('accepted 0ms', 1), ('append', 1), ('array nesting', 1), ('assign', 1), ('basic-math', 1), ('beats 100', 1), ('begineer', 1), ('beginner friendly', 1), ('best explaination', 1), ('best-solution-ever', 1), ('binomial theorem', 1), ('bottom-up', 1), ('c', 1), ('c++ easy', 1), ('clean code', 1), ('clean-efficient-code', 1), ('clear', 1), ('combinatories', 1), ('commented', 1), ('comments', 1), ('comments added', 1), ('concise', 1), ('concise-solution', 1), ('constant-space', 1), ('cpp-solution', 1), ('csharp', 1), ('descriptive names', 1), ('difficulty', 1), ('dp pattern', 1), ('east-to-understand', 1), ('easy java solution', 1), ('easy to understand', 1), ('easy understand', 1), ('easy understanding', 1), ('easy-implementation', 1), ('error', 1), ('explained', 1), ('explanation with code', 1), ('explanation with logic', 1), ('explanations', 1), ('fast', 1), ('fast and simple', 1), ('faster', 1), ('faster than 99.8', 1), ('fasterthan100', 1), ('fastest java slution', 1), ('for-loop', 1), ('formula', 1), ('functional programming', 1), ('github', 1), ('go', 1), ('go lang', 1), ('google interview', 1), ('help me', 1), ('help needed', 1), ('inline explanation', 1), ('intuition based solution', 1), ('intuitive', 1), ('iterative solution', 1), ('iteratve', 1), ('java 8', 1), ('javascript-solution', 1), ('javascriptes6', 1), ('kotlin', 1), ('linear', 1), ('mathematics', 1), ('method', 1), ('mirroring', 1), ('mrmagician', 1), ('no lambda function', 1), ('non-copy-paste', 1), ('one line', 1), ('oneline', 1), ('optimal', 1), ('pairs', 1), ('pascal', 1), ('pascal triangle', 1), ('pascal triangle c', 1), ('pattern', 1), ('patterns', 1), ('paypal', 1), ('php', 1), ('php solution', 1), ('pyhton3', 1), ('python3.8', 1), ('python3.9', 1), ('question-not-clear', 1), ('readable code', 1), ('recursively', 1), ('reduce', 1), ('resize', 1), ('resursive', 1), ('reverse-order', 1), ('runtime', 1), ('scala', 1), ('scipy', 1), ('shared-answer', 1), ('shortcut', 1), ('simpe', 1), ('simple-solution', 1), ('simplesolution', 1), ('simplest', 1), ('smallest', 1), ('smart', 1), ('solution-sharing-cpp', 1), ('space-efficient', 1), ('stacks', 1), ('stl', 1), ('striver', 1), ('testcase-wrong', 1), ('thinking process', 1), ('top-down dp', 1), ('two-pointer', 1), ('upvote', 1), ('vector-operation', 1), ('xjq', 1), ('youtube', 1), ('zip', 1)]"
117,Populating Next Right Pointers in Each Node II,https://leetcode.com/problems/populating-next-right-pointers-in-each-node-ii,"Given a binary tree


struct Node {
  int val;
  Node *left;
  Node *right;
  Node *next;
}


Populate each next pointer to point to its next right node. If there is no next right node, the next pointer should be set to NULL.

Initially, all next pointers are set to NULL.

 

Follow up:


	You may only use constant extra space.
	Recursive approach is fine, you may assume implicit stack space does not count as extra space for this problem.","['tree', 'depth-first-search']",Medium,2398,200,778217,331414,"[""Populating Next Right Pointers in Each Node""]","[('java', 64), ('bfs', 50), ('cpp', 47), ('python', 46), ('c++', 34), ('level-order-traversal', 22), ('constant-space', 20), ('python 3', 18), ('queue', 18), ('solution', 14), ('constant space', 13), ('java-solution', 13), ('dfs', 12), ('easy-understanding', 10), ('iterative', 10), ('python3', 9), ('c#', 8), ('recursion', 8), ('recursive', 8), ('binary-tree', 7), ('easy-to-understand', 6), ('wrong-answer', 6), ('accepted', 5), ('cpp solution', 5), ('easytounderstand', 5), ('javascript', 5), ('swift', 5), ('tree', 5), ('constant memory', 4), ('easy-understand', 4), ('easy-undestand', 4), ('level order traversal', 4), ('simple', 4), ('time-complexity', 4), ('breadth-first-search', 3), ('comments', 3), ('easy', 3), ('golang', 3), ('pointer', 3), ('space-complexity', 3), ('#queue', 2), ('bfs simple solution', 2), ('breadth first search', 2), ('breadth-first', 2), ('breath-first', 2), ('c', 2), ('c++11', 2), ('clean code', 2), ('dfs simple solution', 2), ('dfs solution', 2), ('explained', 2), ('generator', 2), ('go-solution', 2), ('iteration', 2), ('iteratively', 2), ('java ac solution', 2), ('no extra space', 2), ('optimal', 2), ('pointers', 2), ('populatenextpointertreeii', 2), ('readable', 2), ('recurision', 2), ('recursively', 2), ('run-time-error', 2), ('simple solution', 2), ('test-case', 2), ('#c++', 1), ('#cpp', 1), ('#easy-understand', 1), ('#iteration', 1), ('#javascript', 1), ('100 memory', 1), ('100 space', 1), ('100 speed', 1), ('1ms', 1), ('8ms', 1), ('accepted solution using dfs', 1), ('amazon interview', 1), ('best', 1), ('best-submission', 1), ('binary tree', 1), ('bug', 1), ('c++ code', 1), ('c++ solution', 1), ('clean', 1), ('concise', 1), ('concise-solution', 1), ('cpp 100', 1), ('cpp easy', 1), ('cpp soltuion', 1), ('cpp-solution', 1), ('csharp', 1), ('deque', 1), ('dfs-in-order', 1), ('dfs-iterative', 1), ('dictonary', 1), ('dummy-head', 1), ('dummy-node', 1), ('dummyhead', 1), ('dynamic-programming', 1), ('easy to understand', 1), ('easy undestanding', 1), ('elegant', 1), ('esay-understand', 1), ('explain', 1), ('explanation simple', 1), ('explanation with logic', 1), ('fail', 1), ('figure', 1), ('go', 1), ('golang-solution', 1), ('graph theory', 1), ('graph traversal', 1), ('graph-theory', 1), ('hashmap', 1), ('help', 1), ('illustration', 1), ('inorder traversal', 1), ('intutive', 1), ('iterative approch', 1), ('iterative way', 1), ('javascrip', 1), ('javascript solution', 1), ('kotlinvim', 1), ('level-order', 1), ('linear-time', 1), ('linked-list', 1), ('linkedlist', 1), ('memory-limit-exceeded', 1), ('microsoft', 1), ('o1', 1), ('o1 space', 1), ('one-loop', 1), ('order-level-traversal', 1), ('php', 1), ('preorder', 1), ('python deque', 1), ('python solution', 1), ('question', 1), ('queue-approach', 1), ('queues', 1), ('recursive solution', 1), ('recursive-dfs', 1), ('recusive', 1), ('reverse traversal', 1), ('ruby', 1), ('scala', 1), ('search', 1), ('self explanatory', 1), ('simple clear c++ solution', 1), ('simplest', 1), ('solution-sharing-cpp', 1), ('space complexity', 1), ('stack', 1), ('standard algorithms', 1), ('straight-forward', 1), ('submission', 1), ('testcase-wrong-and-not', 1), ('time complexity', 1), ('traversal', 1), ('tree-traversal', 1), ('two', 1), ('ultra easy', 1), ('upvote', 1), ('vector', 1), ('video', 1), ('video-explanation', 1), ('wrong', 1), ('wrong-answer-ruby', 1), ('xjq', 1), ('youtube', 1)]"
116,Populating Next Right Pointers in Each Node,https://leetcode.com/problems/populating-next-right-pointers-in-each-node,"You are given a perfect binary tree where all leaves are on the same level, and every parent has two children. The binary tree has the following definition:


struct Node {
  int val;
  Node *left;
  Node *right;
  Node *next;
}


Populate each next pointer to point to its next right node. If there is no next right node, the next pointer should be set to NULL.

Initially, all next pointers are set to NULL.

 

Follow up:


	You may only use constant extra space.
	Recursive approach is fine, you may assume implicit stack space does not count as extra space for this problem.","['tree', 'depth-first-search', 'breadth-first-search']",Medium,3318,165,972906,485394,"[""Populating Next Right Pointers in Each Node II"", ""Binary Tree Right Side View""]","[('java', 96), ('bfs', 80), ('python', 61), ('c++', 60), ('cpp', 58), ('level-order-traversal', 36), ('recursion', 36), ('recursive', 36), ('python 3', 32), ('queue', 31), ('javascript', 26), ('iterative', 22), ('dfs', 21), ('solution', 21), ('constant-space', 15), ('java-solution', 14), ('easy-understanding', 12), ('c#', 11), ('cpp solution', 11), ('python3', 11), ('constant space', 10), ('binary-tree', 8), ('simple', 7), ('cpp easy', 6), ('easy', 6), ('golang', 6), ('ruby', 6), ('swift', 6), ('accepted', 5), ('bfs simple solution', 5), ('breadth first search', 5), ('breadth-first-search', 5), ('easy-to-understand', 5), ('easy-understand', 5), ('easy-undestand', 5), ('short', 5), ('simple solution', 5), ('0ms', 4), ('binary tree', 4), ('constant memory', 4), ('easytounderstand', 4), ('iteration', 4), ('javascript solution', 4), ('level order traversal', 4), ('recursive-dfs', 4), ('tree-traversal', 4), ('100 faster', 3), ('c', 3), ('deque', 3), ('explained', 3), ('go-solution', 3), ('golang-solution', 3), ('intuitive', 3), ('python2', 3), ('readable', 3), ('recursive easy', 3), ('recusion', 3), ('stack', 3), ('wrong-answer', 3), ('youtube', 3), ('100 speed', 2), ('beginner friendly', 2), ('c++ code', 2), ('clear', 2), ('comments', 2), ('csharp', 2), ('dfs traversal', 2), ('dfs-tree', 2), ('explaination', 2), ('explanation of logic', 2), ('go', 2), ('hashmap', 2), ('java ac solution', 2), ('js', 2), ('linear time', 2), ('no extra space', 2), ('no-extra-space', 2), ('pre-order', 2), ('recursive solution', 2), ('run-time-error', 2), ('runtime-error', 2), ('self-explanatory', 2), ('simpe', 2), ('simple clear c++ solution', 2), ('solution-sharing-cpp', 2), ('space-complexity', 2), ('tree', 2), ('tree traversal', 2), ('video', 2), ('video-explanation', 2), ('#explained', 1), ('#javascript', 1), ('#recursion', 1), ('#simplecode', 1), ('10 liner', 1), ('12ms runtime', 1), ('5 lines', 1), ('6-line-code', 1), ('algorithm-explained', 1), ('awesome samriddhi', 1), ('bfs vs dfs', 1), ('bfs with prev path map', 1), ('binary search tree', 1), ('binary-tree-construction', 1), ('block', 1), ('breadth first', 1), ('breadth first traversal', 1), ('breath first search', 1), ('c++ ac', 1), ('c++ iterative sol', 1), ('c++ recursive solution', 1), ('c++ solution', 1), ('clean', 1), ('clean code', 1), ('concise', 1), ('concise-solution', 1), ('cpp-solution', 1), ('debug trace', 1), ('depth first search', 1), ('depth-first-search', 1), ('dfs pre-order traversal', 1), ('dfs simple solution', 1), ('dfs vs bfs', 1), ('dfs-bfs', 1), ('dfs-postorder', 1), ('diagram', 1), ('dictionary', 1), ('divide-and-conquer', 1), ('easiest', 1), ('easy to read', 1), ('easy to understand', 1), ('easy understand', 1), ('easy-to-follow', 1), ('es6', 1), ('explained solution', 1), ('failed', 1), ('fast-solution', 1), ('faster', 1), ('fastest c++ solution', 1), ('follow-ups', 1), ('go lang', 1), ('go-lang', 1), ('hash', 1), ('help needed', 1), ('hints', 1), ('intutive', 1), ('iteration vs recursion', 1), ('iterative solution', 1), ('iterative vs recursive', 1), ('iterative-bfs', 1), ('iterative-dfs', 1), ('itereative', 1), ('kotlin', 1), ('level', 1), ('linear', 1), ('linked list', 1), ('logic explained', 1), ('low memory', 1), ('map', 1), ('non recursive', 1), ('none-recursion', 1), ('o1 space', 1), ('one-loop', 1), ('order', 1), ('order-level-traversal', 1), ('parent pointer', 1), ('php', 1), ('php solution', 1), ('pointers', 1), ('populatenextrightpinters', 1), ('preorder', 1), ('preorder-traversal', 1), ('pseudocode', 1), ('python3.8', 1), ('pythonpython3', 1), ('queue-approach', 1), ('reccursion', 1), ('recurision', 1), ('recursion vs iteration', 1), ('recursive vs iterative', 1), ('recursively', 1), ('recurson', 1), ('requirements', 1), ('resursive', 1), ('ritik', 1), ('scala', 1), ('self explanatory', 1), ('serialization', 1), ('short c++ code', 1), ('simple-solution', 1), ('simplest', 1), ('solution c++', 1), ('space complexity', 1), ('space-o-n', 1), ('stacks', 1), ('straight-forward', 1), ('swift5', 1), ('techbacker', 1), ('test-case', 1), ('time complexity', 1), ('time-complexity', 1), ('time-limit-exceeded', 1), ('traversal', 1), ('traverse', 1), ('traverse-a-tree', 1), ('typescript', 1), ('unorderedmap', 1), ('upvote', 1), ('vague', 1), ('very easy', 1)]"
115,Distinct Subsequences,https://leetcode.com/problems/distinct-subsequences,"Given two strings s and t, return the number of distinct subsequences of s which equals t.

A string's subsequence is a new string formed from the original string by deleting some (can be none) of the characters without disturbing the remaining characters' relative positions. (i.e., ""ACE"" is a subsequence of ""ABCDE"" while ""AEC"" is not).

It is guaranteed the answer fits on a 32-bit signed integer.","['string', 'dynamic-programming']",Hard,1905,65,406501,163095,[],"[('dynamic programming', 47), ('java', 33), ('dynamic-programming', 32), ('c++', 21), ('dp', 20), ('python', 20), ('cpp', 16), ('memoization', 13), ('python 3', 10), ('java-solution', 9), ('solution', 8), ('recursion', 6), ('top down dp', 6), ('easy-understand', 4), ('cpp solution', 3), ('dfs', 3), ('easy-undestand', 3), ('explanation', 3), ('iterative', 3), ('python3', 3), ('recursive', 3), ('short', 3), ('string', 3), ('#dynamic-programming', 2), ('0ms', 2), ('bottom-up-algorithm', 2), ('bottoms-up', 2), ('c#', 2), ('clarification', 2), ('dictonary', 2), ('easy-understanding', 2), ('javascript', 2), ('lcs', 2), ('memorization', 2), ('question-not-clear', 2), ('space-complexity', 2), ('subsequences', 2), ('tabulation', 2), ('time-complexity', 2), ('#115', 1), ('#c++', 1), ('#cpp', 1), ('#dp', 1), ('#efficient', 1), ('#fastest', 1), ('#interview', 1), ('#java', 1), ('#problem #c solution #bug', 1), ('#problem-solving', 1), ('#python', 1), ('#recursion', 1), ('#recursive', 1), ('2d dp', 1), ('2dp-dp', 1), ('accepted', 1), ('awesome samriddhi', 1), ('backtracking', 1), ('beats 100', 1), ('bfs', 1), ('bottom up approach', 1), ('bottomup', 1), ('c++ code', 1), ('c++ easy to understand', 1), ('clean code', 1), ('clean-efficient-code', 1), ('clear', 1), ('complexity', 1), ('concise-solution', 1), ('cpp easy', 1), ('description-disambiguation', 1), ('dfs with memo', 1), ('dfs-iterative', 1), ('distinct subsequence', 1), ('distinct subsequences', 1), ('dp c', 1), ('dp c++', 1), ('dp java', 1), ('dp top down', 1), ('dp world', 1), ('dp-programming', 1), ('dp-techqique', 1), ('easy', 1), ('easy code', 1), ('easy sloution', 1), ('easy to undersatnd', 1), ('easy-solition', 1), ('easy-to-understand', 1), ('expl', 1), ('explain', 1), ('explaination', 1), ('explained', 1), ('fastest', 1), ('fastest java solution', 1), ('fastest solution', 1), ('follow-up', 1), ('funny', 1), ('hash table', 1), ('hashing', 1), ('hashmap', 1), ('hashtable', 1), ('improve', 1), ('incorrect-test-case', 1), ('intuition', 1), ('iteration', 1), ('java ac solution', 1), ('java solution sharing', 1), ('kotlin', 1), ('memoized', 1), ('memory-limit-exceeded', 1), ('n-space', 1), ('no extra data structure', 1), ('no extra memory', 1), ('optimized', 1), ('pythonic', 1), ('readable', 1), ('recurision', 1), ('recursive easy', 1), ('recusion', 1), ('ritik', 1), ('run-time-error', 1), ('sequence', 1), ('short code', 1), ('simple solution', 1), ('space complexity', 1), ('stl', 1), ('string view', 1), ('subsequence', 1), ('swift', 1), ('time', 1), ('top-down', 1), ('top-down dp', 1), ('understand', 1), ('works-on-my-machine', 1), ('wrong-sample', 1), ('xjq', 1), ('zea7ot', 1)]"
114,Flatten Binary Tree to Linked List,https://leetcode.com/problems/flatten-binary-tree-to-linked-list,"Given the root of a binary tree, flatten the tree into a ""linked list"":


	The ""linked list"" should use the same TreeNode class where the right child pointer points to the next node in the list and the left child pointer is always null.
	The ""linked list"" should be in the same order as a pre-order traversal of the binary tree.","['tree', 'depth-first-search']",Medium,4151,401,827951,435675,"[""Flatten a Multilevel Doubly Linked List"", ""Correct a Binary Tree""]","[('java', 78), ('python', 73), ('recursion', 54), ('cpp', 44), ('c++', 38), ('javascript', 23), ('iterative', 20), ('dfs', 19), ('python 3', 19), ('binary-tree', 18), ('recursive', 18), ('stack', 12), ('easy-understand', 11), ('python3', 11), ('easy-understanding', 10), ('java-solution', 9), ('golang', 8), ('preorder', 8), ('preorder traversal', 8), ('easy-to-understand', 7), ('easy', 6), ('easy-undestand', 6), ('error', 6), ('postorder-traversal', 6), ('simple', 6), ('solution', 6), ('c#', 5), ('constant-space', 5), ('pre-order', 5), ('run-time-error', 5), ('tree', 5), ('tree-traversal', 5), ('wrong-answer', 5), ('java ac solution', 4), ('morris-traversal', 4), ('preorder-traversal', 4), ('queue', 4), ('recurision', 4), ('recursive solution', 4), ('recusion', 4), ('runtime-error', 4), ('short', 4), ('stack-based', 4), ('test-case', 4), ('time-limit-exceeded', 4), ('0ms', 3), ('binary tree', 3), ('comments', 3), ('constant space', 3), ('cpp easy', 3), ('cpp solution', 3), ('dfs simple solution', 3), ('easytounderstand', 3), ('explained', 3), ('explanation', 3), ('fast-solution', 3), ('flatten', 3), ('help', 3), ('javascript solution', 3), ('js', 3), ('linked-list', 3), ('linkedlist', 3), ('simple solution', 3), ('trees', 3), ('accepted', 2), ('best-submission', 2), ('c', 2), ('c++ code', 2), ('c++ recursive solution', 2), ('c++ solution', 2), ('commented', 2), ('comments-added', 2), ('cpp doubt', 2), ('depth first search', 2), ('divide and conquer', 2), ('fast and simple', 2), ('golang-solution', 2), ('improve', 2), ('inorder', 2), ('inplace', 2), ('iteration', 2), ('iteratve', 2), ('iteratve-recursive', 2), ('linkedlists', 2), ('memory', 2), ('non-recursive', 2), ('postorder traversal', 2), ('pre-order traversal', 2), ('recursive easy', 2), ('simplest', 2), ('stacks', 2), ('swift', 2), ('vector', 2), ('well-commented', 2), ('#explanation', 1), ('#intuition', 1), ('#recursive', 1), ('100', 1), ('100 speed', 1), ('1ms', 1), ('1ms runtime', 1), ('8ms', 1), ('accepted solution', 1), ('algorithm-explained', 1), ('algorithms', 1), ('amazon', 1), ('avnish', 1), ('awesome samriddhi', 1), ('bfs', 1), ('binary-search', 1), ('binary-search-tree', 1), ('bottom-up', 1), ('c++ iterative sol', 1), ('c++code', 1), ('clarification', 1), ('cleanest', 1), ('code comments', 1), ('commented code', 1), ('complexity-analysis', 1), ('constant memory', 1), ('cpp soltuion', 1), ('cpp-solution', 1), ('debug', 1), ('depth-first search', 1), ('depth-first-search', 1), ('detailed explanation', 1), ('dfs pre-order traversal', 1), ('dfs recursive', 1), ('dfs-iterative', 1), ('dfs-tree', 1), ('diagrams', 1), ('dos', 1), ('doubts', 1), ('efficient', 1), ('es6', 1), ('fast', 1), ('fastest', 1), ('go', 1), ('graph theory', 1), ('graph traversal', 1), ('implementation', 1), ('in-order', 1), ('in-place', 1), ('in-place operation', 1), ('inorder-traversal', 1), ('iterative approch', 1), ('iterative way', 1), ('iterative-dfs', 1), ('iterative-preorder', 1), ('iteratively', 1), ('itereative', 1), ('javascriptes6', 1), ('js javascript', 1), ('kotlin', 1), ('kotlinvim', 1), ('kotllin', 1), ('leetcode-issue-only', 1), ('level order traversal', 1), ('limit-exceeded', 1), ('linear time', 1), ('linear-time', 1), ('map', 1), ('memory-limit-exceeded', 1), ('microsoft-india', 1), ('morris', 1), ('morristraversal', 1), ('non-recursion', 1), ('output', 1), ('peymannp', 1), ('php', 1), ('php solution', 1), ('pointer of pointer', 1), ('points', 1), ('post-order', 1), ('post-order-dfs', 1), ('post-order-traversal', 1), ('preorder-iterative', 1), ('preorder-recursion', 1), ('preorder-recursive', 1), ('pyhton3', 1), ('python-56ms', 1), ('python2', 1), ('question need help', 1), ('queues', 1), ('recursive lines clean', 1), ('recursive-descent', 1), ('recursive-dfs', 1), ('recursively', 1), ('recusive', 1), ('ritik', 1), ('runtime', 1), ('rust', 1), ('sasuke214', 1), ('scala', 1), ('share-solution', 1), ('simple and elegant', 1), ('simple clear c++ solution', 1), ('solution-sharing-cpp', 1), ('space-complexity', 1), ('space-optimized', 1), ('swift5', 1), ('time-optimized', 1), ('tle', 1), ('traversal tree', 1), ('traverse', 1), ('tree flat', 1), ('tree traversal', 1), ('typescript', 1), ('visualization', 1), ('works-on-my-machin', 1)]"
113,Path Sum II,https://leetcode.com/problems/path-sum-ii,"Given the root of a binary tree and an integer targetSum, return all root-to-leaf paths where each path's sum equals targetSum.

A leaf is a node with no children.","['tree', 'depth-first-search']",Medium,2730,84,827835,411449,"[""Path Sum"", ""Binary Tree Paths"", ""Path Sum III"", ""Path Sum IV""]","[('dfs', 76), ('java', 67), ('python', 46), ('cpp', 43), ('backtracking', 31), ('c++', 31), ('recursion', 30), ('recursive', 26), ('python 3', 25), ('solution', 22), ('javascript', 19), ('binary-tree', 13), ('iterative', 13), ('java-solution', 11), ('bfs', 9), ('depth first search', 9), ('c#', 8), ('easy-understanding', 8), ('golang', 8), ('python3', 8), ('dfs simple solution', 7), ('easy-understand', 7), ('swift', 7), ('path-sum', 6), ('time-limit-exceeded', 6), ('accepted', 5), ('cpp solution', 5), ('stack', 5), ('depth-first-search', 4), ('go', 4), ('preorder traversal', 4), ('recurision', 4), ('ruby', 4), ('dfs recursive', 3), ('easy-undestand', 3), ('improve', 3), ('java ac solution', 3), ('list', 3), ('non-recursive', 3), ('preorder', 3), ('recursive-dfs', 3), ('recusion', 3), ('time-complexity', 3), ('tree', 3), ('tree-traversal', 3), ('#c++', 2), ('array', 2), ('backtrack', 2), ('beginner friendly', 2), ('c++ code', 2), ('deep-first-search', 2), ('dfs solution', 2), ('dfs-iterative', 2), ('dynamic-programming', 2), ('easy', 2), ('easy-to-understand', 2), ('go lang', 2), ('iteratively', 2), ('javascript solution', 2), ('kotlin', 2), ('php', 2), ('queue', 2), ('readable', 2), ('recursive easy', 2), ('recursive solution', 2), ('recursively', 2), ('runtime-error', 2), ('tle', 2), ('wrong-answer', 2), ('xjq', 2), ('#bfs', 1), ('#cpp', 1), ('#depth-first-search', 1), ('#dfs', 1), ('#recursion', 1), ('#recursive', 1), ('100', 1), ('100 faster runtime', 1), ('8ms', 1), ('accepted solution', 1), ('amazo', 1), ('arraylist', 1), ('backtracking dfs', 1), ('best', 1), ('bfs python', 1), ('binary-search', 1), ('breadth first search', 1), ('c', 1), ('c++ recursive solution', 1), ('c++17', 1), ('channels', 1), ('clean code', 1), ('commented', 1), ('comments-added', 1), ('counterintuitive', 1), ('csharp', 1), ('custom class', 1), ('deque', 1), ('dfs pre-order traversal', 1), ('dfs traversal', 1), ('dfs-bottomup', 1), ('dfs-non-recursive', 1), ('dfs-pre-order', 1), ('dfs-tree', 1), ('dshah14', 1), ('easiest', 1), ('easy to read', 1), ('easy to understand', 1), ('easytounderstand', 1), ('error', 1), ('explaination', 1), ('extra-space', 1), ('fast', 1), ('fast and simple', 1), ('faster than 100', 1), ('go-routine', 1), ('golang-solution', 1), ('hashmap', 1), ('help', 1), ('help needed', 1), ('in-order-traversal', 1), ('incorrect-expected-output', 1), ('inorder', 1), ('iterative bfs', 1), ('iterative python', 1), ('iterator', 1), ('iteratve', 1), ('java-8', 1), ('js', 1), ('keep it simple', 1), ('kotlinvim', 1), ('linked-list', 1), ('microsoft-india', 1), ('needimprovement', 1), ('non-recursion', 1), ('output-limit-exceeded', 1), ('pass-by-reference', 1), ('pass-by-value', 1), ('path', 1), ('pathsumii', 1), ('php solution', 1), ('pyhon', 1), ('python dfs', 1), ('python iterative bfs', 1), ('python3.8', 1), ('pythonpython3', 1), ('question', 1), ('quickest', 1), ('resursive', 1), ('run-time-error', 1), ('scala', 1), ('self-explanatory', 1), ('short', 1), ('short c++ code', 1), ('simple', 1), ('simple solution', 1), ('solution-sharing-cpp', 1), ('stack-based', 1), ('stacks', 1), ('straight-forward', 1), ('sum', 1), ('summation', 1), ('swift5', 1), ('test-case', 1), ('threads', 1), ('tree problem', 1), ('trees', 1), ('tuple', 1), ('ultra simple', 1), ('upvote', 1), ('video', 1), ('works-on-my-machine', 1), ('wrong', 1), ('yahoo', 1)]"
112,Path Sum,https://leetcode.com/problems/path-sum,"Given the root of a binary tree and an integer targetSum, return true if the tree has a root-to-leaf path such that adding up all the values along the path equals targetSum.

A leaf is a node with no children.","['tree', 'depth-first-search']",Easy,3073,604,1428551,610975,"[""Path Sum II"", ""Binary Tree Maximum Path Sum"", ""Sum Root to Leaf Numbers"", ""Path Sum III"", ""Path Sum IV""]","[('java', 100), ('recursion', 79), ('python', 65), ('dfs', 64), ('recursive', 47), ('cpp', 44), ('c++', 40), ('javascript', 36), ('python 3', 27), ('solution', 24), ('java-solution', 21), ('iterative', 18), ('binary-tree', 13), ('python3', 13), ('bfs', 11), ('swift', 10), ('easy-understanding', 9), ('tree', 9), ('c', 8), ('c#', 8), ('cpp solution', 8), ('simple', 8), ('stack', 7), ('depth first search', 6), ('simple solution', 6), ('easy', 5), ('easytounderstand', 5), ('golang', 5), ('queue', 5), ('recursive easy', 5), ('recursively', 5), ('accepted', 4), ('dfs simple solution', 4), ('dfs-tree', 4), ('kotlin', 4), ('recurision', 4), ('easy-to-understand', 3), ('easy-undestand', 3), ('improve', 3), ('iteration', 3), ('javascript recursive', 3), ('javascript solution', 3), ('preorder traversal', 3), ('recursive solution', 3), ('short', 3), ('time-complexity', 3), ('tree-traversal', 3), ('wrong-answer', 3), ('amazon', 2), ('backtracking', 2), ('beginner friendly', 2), ('deep-first-search', 2), ('depth-first-search', 2), ('dfs recursive', 2), ('dfs solution', 2), ('dfs-iterative', 2), ('easy to understand', 2), ('easy-understand', 2), ('explanation', 2), ('fast and simple', 2), ('faster then 95', 2), ('golang-solution', 2), ('intuitive', 2), ('iteratively', 2), ('non-recursive', 2), ('oneline', 2), ('path-sum', 2), ('preorder-traversal', 2), ('recursive-dfs', 2), ('recusion', 2), ('ruby', 2), ('rust', 2), ('simplest', 2), ('solution-sharing-cpp', 2), ('swift5', 2), ('test-case', 2), ('testcase-wrong', 2), ('typescript', 2), ('#binarytree', 1), ('#dfs', 1), ('#java #recursion', 1), ('#javascript', 1), ('#recursion', 1), ('0ms', 1), ('100', 1), ('100 beat', 1), ('1line', 1), ('1liner', 1), ('3 lines', 1), ('4-liner', 1), ('4ms', 1), ('6 lines', 1), ('8ms', 1), ('algos explained', 1), ('beat 97', 1), ('beats 100', 1), ('beautifulcode', 1), ('begginer friendly', 1), ('beginner', 1), ('best-solution-ever', 1), ('bf1l', 1), ('binary', 1), ('binary tree', 1), ('binary tree paths', 1), ('brute-force', 1), ('bst', 1), ('c++ code', 1), ('c++ easy to understand', 1), ('c++ recursive solution', 1), ('c++ solution', 1), ('c++11', 1), ('clarification', 1), ('clean code', 1), ('comments-added', 1), ('complexity analysis', 1), ('constant-space', 1), ('cpp-solution', 1), ('csharp', 1), ('cumulative sum', 1), ('depth first', 1), ('depth first traversal', 1), ('depth-first search', 1), ('dfs-bfs', 1), ('dfs-in-order', 1), ('dfs-topdown', 1), ('easiest', 1), ('easy to read', 1), ('easy undestanding', 1), ('easy-implementation', 1), ('easysolution', 1), ('explaination', 1), ('explanatory comments', 1), ('fast', 1), ('fastest', 1), ('go', 1), ('go-solution', 1), ('help', 1), ('in-place', 1), ('iterative-dfs', 1), ('jacvascript', 1), ('java simple', 1), ('java solution', 1), ('js', 1), ('keep it simple', 1), ('kotlinvim', 1), ('lines', 1), ('maxpathsum', 1), ('microsoft', 1), ('microsoft-india', 1), ('no extra space', 1), ('non-recursion', 1), ('norecursion', 1), ('one line solution', 1), ('oneliner', 1), ('path sum', 1), ('pathsum', 1), ('php', 1), ('php solution', 1), ('postorder', 1), ('preorder-recursion', 1), ('python2', 1), ('pythonpython3', 1), ('question', 1), ('recusrive', 1), ('run-time-error', 1), ('runtime-error', 1), ('self explanatory', 1), ('share-solution', 1), ('shortest', 1), ('simple clear', 1), ('simple clear c++ solution', 1), ('solved', 1), ('stacks', 1), ('stl', 1), ('structured code', 1), ('suggestion', 1), ('summation', 1), ('test-cases', 1), ('trees', 1), ('well-commented', 1), ('well-explained', 1), ('yahoo', 1)]"
111,Minimum Depth of Binary Tree,https://leetcode.com/problems/minimum-depth-of-binary-tree,"Given a binary tree, find its minimum depth.

The minimum depth is the number of nodes along the shortest path from the root node down to the nearest leaf node.

Note: A leaf is a node with no children.","['tree', 'depth-first-search', 'breadth-first-search']",Easy,2358,819,1380774,551749,"[""Binary Tree Level Order Traversal"", ""Maximum Depth of Binary Tree""]","[('java', 109), ('bfs', 101), ('dfs', 65), ('cpp', 62), ('recursion', 57), ('c++', 55), ('python', 48), ('python 3', 35), ('javascript', 27), ('solution', 27), ('java-solution', 23), ('recursive', 20), ('binary-tree', 19), ('queue', 19), ('python3', 17), ('breadth first', 13), ('c#', 10), ('easy-understanding', 10), ('dfs simple solution', 9), ('iterative', 9), ('cpp solution', 7), ('easy-understand', 7), ('simple', 7), ('bfs simple solution', 6), ('breadth first search', 6), ('dfs solution', 6), ('level-order-traversal', 6), ('accepted', 5), ('breadth-first-search', 5), ('c', 5), ('depth-first-search', 5), ('easy', 5), ('easy-undestand', 5), ('easytounderstand', 5), ('recusion', 5), ('wrong-answer', 5), ('easy-to-understand', 4), ('explained', 4), ('golang', 4), ('ruby', 4), ('swift', 4), ('tree', 4), ('beginner friendly', 3), ('clean code', 3), ('depth', 3), ('depth first search', 3), ('dfs-bfs', 3), ('easy to understand', 3), ('fast-solution', 3), ('js', 3), ('queue-approach', 3), ('recurision', 3), ('recursively', 3), ('time-limit-exceeded', 3), ('binary tree', 2), ('bst', 2), ('c++ code', 2), ('csharp', 2), ('dfs recursive', 2), ('dfs traversal', 2), ('dfs-topdown', 2), ('fast and simple', 2), ('go-solution', 2), ('improve', 2), ('iteration', 2), ('java solution', 2), ('javascrip', 2), ('level order traversal', 2), ('linkedlist', 2), ('one line', 2), ('one-liner', 2), ('pair', 2), ('php', 2), ('readable', 2), ('recurssion', 2), ('short', 2), ('test-case', 2), ('testcase-wrong', 2), ('tree traversal', 2), ('tree-traversal', 2), ('trees', 2), ('#breadth first', 1), ('#breadth-first-search', 1), ('#javascript', 1), ('#queue', 1), ('#recursion', 1), ('#tree-taversals', 1), ('100 speed', 1), ('4 ways', 1), ('4ms', 1), ('7 lines', 1), ('8ms', 1), ('90+faster', 1), ('algorithms', 1), ('amazon', 1), ('awesome samriddhi', 1), ('back-tracking', 1), ('backtracking', 1), ('best-submission', 1), ('bfs java', 1), ('bfs python', 1), ('bfs vs dfs', 1), ('bfs-dfs', 1), ('binar-search', 1), ('binary search tree', 1), ('binary-search', 1), ('binarysearch', 1), ('bitwise operation', 1), ('breadth first traversal', 1), ('brief', 1), ('c code', 1), ('c++ ac', 1), ('c++ solution', 1), ('c++11', 1), ('c++14', 1), ('clean', 1), ('code with explanation', 1), ('commented', 1), ('comments added', 1), ('comments-added', 1), ('common question', 1), ('constant-space', 1), ('cool', 1), ('cpp doubt', 1), ('cpp easy', 1), ('deque', 1), ('descriptive', 1), ('dfs-iterative', 1), ('dfs-tree', 1), ('different solutions', 1), ('easiest', 1), ('easy to code', 1), ('easy to read', 1), ('efficient', 1), ('elegant', 1), ('error', 1), ('es6', 1), ('explained solution', 1), ('explanation of logic', 1), ('explanatory comments', 1), ('facebook', 1), ('fast', 1), ('fastest solution', 1), ('four-line-code', 1), ('general', 1), ('go lang', 1), ('golang-solution', 1), ('good variable names', 1), ('great', 1), ('inheritance', 1), ('intuitive', 1), ('iteratively', 1), ('iteratve-recursive', 1), ('java ac solution', 1), ('java simple', 1), ('java solution sharing', 1), ('java-simple-clean-solution', 1), ('javacript', 1), ('javascript solution', 1), ('javascrit', 1), ('js javascript', 1), ('leetcode', 1), ('letsgo', 1), ('level-order', 1), ('levelordertraversal', 1), ('linear space', 1), ('linear time', 1), ('linked-list', 1), ('linkedlists', 1), ('logarithmic time', 1), ('lot', 1), ('macro', 1), ('math', 1), ('meiyaowen', 1), ('mindepthofbinarytree', 1), ('non-recursion', 1), ('observations', 1), ('pass-by-reference', 1), ('php solution', 1), ('pointer', 1), ('preorder traversal', 1), ('problem-discussion', 1), ('python deque', 1), ('pythonpython3', 1), ('raviinroorkee', 1), ('recrusion', 1), ('recursive dfs', 1), ('recursive solution', 1), ('recursivesolution', 1), ('ritik', 1), ('runtime-error', 1), ('scala', 1), ('shortest', 1), ('simple clear c++ solution', 1), ('simple python solution', 1), ('simple solution', 1), ('simplest', 1), ('single stack', 1), ('solution-sharing-cpp', 1), ('stack', 1), ('straight-forward', 1), ('structured code', 1), ('swift5', 1), ('test-case-validation', 1), ('test-cases', 1), ('three-lines', 1), ('time-complexity', 1), ('tree-depth', 1), ('ultra easy', 1), ('video', 1), ('video-explanation', 1), ('works-on-my-machine', 1), ('xjq', 1)]"
110,Balanced Binary Tree,https://leetcode.com/problems/balanced-binary-tree,"Given a binary tree, determine if it is height-balanced.

For this problem, a height-balanced binary tree is defined as:


a binary tree in which the left and right subtrees of every node differ in height by no more than 1.","['tree', 'depth-first-search', 'recursion']",Easy,3448,230,1258346,565046,"[""Maximum Depth of Binary Tree""]","[('java', 87), ('cpp', 57), ('c++', 54), ('python', 52), ('recursion', 51), ('dfs', 39), ('recursive', 33), ('binary-tree', 29), ('solution', 26), ('javascript', 21), ('python 3', 20), ('java-solution', 19), ('easy-understanding', 13), ('python3', 13), ('simple', 12), ('cpp solution', 11), ('golang', 11), ('easy-understand', 10), ('wrong-answer', 9), ('easy', 8), ('iterative', 8), ('swift', 8), ('binary tree', 7), ('short', 7), ('c#', 5), ('recusion', 5), ('test-case', 5), ('time-complexity', 5), ('tree', 5), ('balanced binary tree', 4), ('bottom-up-algorithm', 4), ('bst', 4), ('c', 4), ('depth first search', 4), ('depth-first-search', 4), ('easy-undestand', 4), ('easytounderstand', 4), ('fast', 4), ('height of tree', 4), ('post-order-traversal', 4), ('recursively', 4), ('testcase-wrong', 4), ('trees', 4), ('accepted', 3), ('amazon', 3), ('balanced', 3), ('balanced tree', 3), ('binary search tree', 3), ('c++ code', 3), ('cpp easy', 3), ('dfs solution', 3), ('dfs-iterative', 3), ('easy to understand', 3), ('easy-to-understand', 3), ('height', 3), ('improve', 3), ('js', 3), ('php', 3), ('postorder-traversal', 3), ('recursive easy', 3), ('ruby', 3), ('solution-sharing-cpp', 3), ('tree traversal', 3), ('balanced-bst', 2), ('c code', 2), ('c++ solution', 2), ('comments-added', 2), ('constant-space', 2), ('cplusplus', 2), ('csharp', 2), ('dfs simple solution', 2), ('easiest', 2), ('error', 2), ('exception', 2), ('explained', 2), ('fast and simple', 2), ('fast-solution', 2), ('go-solution', 2), ('height of a binary tree', 2), ('intuitive', 2), ('javascript solution', 2), ('linear-time', 2), ('non-recursive', 2), ('recurision', 2), ('recursive-dfs', 2), ('simple solution', 2), ('stack', 2), ('stl', 2), ('video-explanation', 2), ('wrong', 2), ('#easy-understand', 1), ('#javascript', 1), ('#python', 1), ('#python3', 1), ('#simplest', 1), ('0ms', 1), ('100 faster runtime', 1), ('100 memory', 1), ('100 space', 1), ('100 speed', 1), ('8ms', 1), ('awesome samriddhi', 1), ('balance', 1), ('balanced-binary-tree', 1), ('balancedbinarytree', 1), ('binary-search-tree', 1), ('binary-tree-input', 1), ('bottom-up approach', 1), ('bottoms-up', 1), ('c++ recursion', 1), ('clean', 1), ('clean code', 1), ('clean-efficient-code', 1), ('clear', 1), ('code', 1), ('compilation', 1), ('complexity-analysis', 1), ('concise', 1), ('data', 1), ('deep-first-search', 1), ('depth', 1), ('depth first', 1), ('depth first traversal', 1), ('detailed explanation', 1), ('dp', 1), ('dynamic programming', 1), ('efficient', 1), ('efficient solution', 1), ('explain', 1), ('explaination', 1), ('explanation', 1), ('faster than 100.00', 1), ('fastest', 1), ('go', 1), ('go lang', 1), ('golang-solution', 1), ('graph theory', 1), ('graph traversal', 1), ('hashmap', 1), ('help', 1), ('help needed', 1), ('incomplete-testcases', 1), ('incorrect-test-case', 1), ('internal', 1), ('interview', 1), ('iterative solution', 1), ('iterative-postorder', 1), ('iteratively', 1), ('java ac solution', 1), ('java simple', 1), ('java solution', 1), ('kotlin', 1), ('level order', 1), ('map', 1), ('max-depth', 1), ('no-recursive', 1), ('one line', 1), ('oop', 1), ('optimal', 1), ('optimized', 1), ('php solution', 1), ('postorder', 1), ('python2', 1), ('question', 1), ('queue', 1), ('readable', 1), ('recursion palindrome', 1), ('recursive solution', 1), ('recusive', 1), ('rescursion', 1), ('ritik', 1), ('run-time-error', 1), ('rust', 1), ('serialization', 1), ('simple clear c++ solution', 1), ('slow', 1), ('stack-over-flow', 1), ('subclassing', 1), ('swift5', 1), ('symmetric-tree', 1), ('system', 1), ('test', 1), ('time-limit-exceeded', 1), ('top down dp', 1), ('top-down', 1), ('tree problem', 1), ('wrong answer', 1)]"
109,Convert Sorted List to Binary Search Tree,https://leetcode.com/problems/convert-sorted-list-to-binary-search-tree,"Given the head of a singly linked list where elements are sorted in ascending order, convert it to a height balanced BST.

For this problem, a height-balanced binary tree is defined as a binary tree in which the depth of the two subtrees of every node never differ by more than 1.","['linked-list', 'depth-first-search']",Medium,2877,97,572202,290728,"[""Convert Sorted Array to Binary Search Tree""]","[('java', 40), ('c++', 29), ('python', 29), ('cpp', 27), ('recursion', 22), ('recursive', 19), ('javascript', 15), ('python 3', 15), ('solution', 11), ('binary-search', 9), ('binary search tree', 7), ('java-solution', 7), ('linked-list', 7), ('bst', 6), ('dfs', 5), ('easy-understanding', 5), ('linked list', 5), ('cpp easy', 4), ('cpp solution', 4), ('divide and conquer', 4), ('divide-and-conquer', 4), ('python3', 4), ('run-time-error', 4), ('time-complexity', 4), ('tree', 4), ('binary-tree', 3), ('commented', 3), ('easy-to-understand', 3), ('easy-understand', 3), ('easy-undestand', 3), ('memory', 3), ('vector', 3), ('array', 2), ('avl', 2), ('binary-search-tree', 2), ('binarysearch', 2), ('bottom-up-algorithm', 2), ('c#', 2), ('c++ code', 2), ('divideconquer', 2), ('golang', 2), ('hashmap', 2), ('js', 2), ('js javascript', 2), ('linear time', 2), ('linkedlist', 2), ('linkedlists', 2), ('recursive solution', 2), ('recursively', 2), ('runtime-error', 2), ('short', 2), ('simple', 2), ('solution-sharing-cpp', 2), ('swift', 2), ('trees', 2), ('two-pointers', 2), ('#easy-understanding', 1), ('#recursion', 1), ('accepted', 1), ('algorithms', 1), ('approach and code', 1), ('avnish', 1), ('balanced', 1), ('balanced tree', 1), ('balanced-bst', 1), ('binary tree', 1), ('bottomup', 1), ('bst-iterator', 1), ('bugs', 1), ('clean clode', 1), ('comments', 1), ('cpp doubt', 1), ('depth', 1), ('dfs recursive', 1), ('dfs-bfs', 1), ('dfs-in-order', 1), ('dfs-topdown', 1), ('dynamic-programming', 1), ('easy', 1), ('easy to understand', 1), ('efficient', 1), ('fast', 1), ('fast-solution', 1), ('golang-solution', 1), ('google', 1), ('help me', 1), ('improve', 1), ('in-order', 1), ('incorrect-test-case', 1), ('inorder', 1), ('inorder traversal', 1), ('internal-error', 1), ('iterative traversal', 1), ('java ac solution', 1), ('java solution', 1), ('java11', 1), ('javascrip', 1), ('javascript recursive', 1), ('javascript solution', 1), ('kotlin', 1), ('kotlinvim', 1), ('limit-exceeded', 1), ('linear memory', 1), ('linear-time', 1), ('list', 1), ('multiple solutions', 1), ('output-limit-exceeded', 1), ('php', 1), ('php solution', 1), ('preorder traversal', 1), ('python2', 1), ('python3.8', 1), ('recurision', 1), ('recursive approach', 1), ('recursive easy', 1), ('recursive-dfs', 1), ('recusion', 1), ('similar-problems', 1), ('slow fast pointer', 1), ('solution-sharing-python', 1), ('space-complexity', 1), ('space-efficient', 1), ('stack-over-flow', 1), ('straight-forward', 1), ('testcase-wrong', 1), ('thank', 1), ('time-limit-exceeded', 1), ('top-down', 1), ('two-pass', 1), ('works-on-my-machine', 1), ('wrong answer', 1), ('xjq', 1)]"
108,Convert Sorted Array to Binary Search Tree,https://leetcode.com/problems/convert-sorted-array-to-binary-search-tree,"Given an integer array nums where the elements are sorted in ascending order, convert it to a height-balanced binary search tree.

A height-balanced binary tree is a binary tree in which the depth of the two subtrees of every node never differs by more than one.","['tree', 'depth-first-search']",Easy,3790,275,861785,526792,"[""Convert Sorted List to Binary Search Tree""]","[('java', 64), ('recursion', 64), ('cpp', 47), ('recursive', 40), ('c++', 39), ('python', 39), ('divide and conquer', 19), ('binary-search', 16), ('python3', 15), ('javascript', 14), ('solution', 14), ('python 3', 11), ('simple', 11), ('easy-understand', 10), ('java-solution', 10), ('binary search tree', 9), ('easy-understanding', 9), ('binary-tree', 8), ('cpp solution', 8), ('bst', 7), ('golang', 7), ('c#', 6), ('dfs', 6), ('recurision', 6), ('tree', 6), ('binary search', 5), ('binary-search-tree', 5), ('binarysearch', 5), ('iterative', 5), ('recursively', 5), ('recusion', 5), ('run-time-error', 5), ('c++ code', 4), ('easy-to-understand', 4), ('golang-solution', 4), ('short', 4), ('solution-sharing-cpp', 4), ('trees', 4), ('#javascript', 3), ('accepted', 3), ('c', 3), ('easy', 3), ('easy-undestand', 3), ('fastest', 3), ('javascrip', 3), ('python2', 3), ('ruby', 3), ('swift', 3), ('time-limit-exceeded', 3), ('typescript', 3), ('0ms', 2), ('binary tree', 2), ('compile-error', 2), ('constant space', 2), ('cpp easy', 2), ('cpp-solution', 2), ('divide-and-conquer', 2), ('easy to understand', 2), ('fast and simple', 2), ('go lang', 2), ('iterator', 2), ('javascript solution', 2), ('linear time', 2), ('output-limit-exceeded', 2), ('preorder traversal', 2), ('queue', 2), ('solution-python', 2), ('space-complexity', 2), ('stack', 2), ('test-case', 2), ('time-complexity', 2), ('wrong-answer', 2), ('#constructbst', 1), ('#cpp', 1), ('#dac', 1), ('#divideandconquer', 1), ('#recursion', 1), ('#recursive', 1), ('#rust', 1), ('1-liner', 1), ('100 faster', 1), ('100 space', 1), ('20ms', 1), ('4 lines', 1), ('4ms', 1), ('68ms', 1), ('7lines', 1), ('amazon', 1), ('array', 1), ('array to tree', 1), ('array-sort', 1), ('avl', 1), ('avnish', 1), ('balanced-bst', 1), ('best', 1), ('best-submission', 1), ('bfs', 1), ('binarysearh', 1), ('bottom-up-algorithm', 1), ('broken', 1), ('broken-tests', 1), ('bst insertion', 1), ('c code', 1), ('c++ solution', 1), ('c++11', 1), ('clarification', 1), ('clean code', 1), ('clean-code', 1), ('comments-added', 1), ('compilation', 1), ('complexity', 1), ('constant-space', 1), ('csharp', 1), ('devide and conquer', 1), ('dfs recursive', 1), ('dfs simple solution', 1), ('dfs-iterative', 1), ('dfs-recursive', 1), ('divid and conquer', 1), ('easy code', 1), ('easy sloution', 1), ('easy uderstanding', 1), ('easy undestanding', 1), ('easysolution', 1), ('easytounderstand', 1), ('error', 1), ('explaination', 1), ('explained', 1), ('explanation', 1), ('fast', 1), ('faster', 1), ('go', 1), ('go-solution', 1), ('google', 1), ('height balanced tree', 1), ('height of tree', 1), ('help needed', 1), ('improve', 1), ('inorder traversal', 1), ('input', 1), ('ios', 1), ('iterative-bfs', 1), ('javascript recursive', 1), ('js', 1), ('js javascript', 1), ('keep it simple', 1), ('kotlin', 1), ('left-right pointer', 1), ('linear-space', 1), ('linear-time', 1), ('median', 1), ('memory', 1), ('memory-limit-exceeded', 1), ('more-than-one-solution', 1), ('morris-traversal', 1), ('mrmagician', 1), ('must-read', 1), ('optimal', 1), ('php', 1), ('php solution', 1), ('pre-order', 1), ('preorder', 1), ('preorder-recursion', 1), ('question need help', 1), ('question-not-clear', 1), ('recursive easy', 1), ('recursive solution', 1), ('rescursion', 1), ('resursive', 1), ('runtime', 1), ('scala', 1), ('simple-solution', 1), ('solution c++', 1), ('solution-sharingjava', 1), ('sorted array to tree', 1), ('stl', 1), ('template', 1), ('test-case-bug', 1), ('testcase-wrong', 1), ('testcase-wrong-and-not', 1), ('top-down', 1), ('tree-traversal', 1), ('upvote', 1), ('works-on-my-machine', 1), ('wrong-answer-ruby', 1), ('xjq', 1)]"
107,Binary Tree Level Order Traversal II,https://leetcode.com/problems/binary-tree-level-order-traversal-ii,"Given the root of a binary tree, return the bottom-up level order traversal of its nodes' values. (i.e., from left to right, level by level from leaf to root).","['tree', 'breadth-first-search']",Medium,2118,246,752186,418412,"[""Binary Tree Level Order Traversal"", ""Average of Levels in Binary Tree""]","[('bfs', 110), ('java', 68), ('python', 60), ('queue', 55), ('c++', 53), ('cpp', 52), ('python 3', 39), ('level-order-traversal', 28), ('javascript', 24), ('binary-tree', 20), ('solution', 20), ('dfs', 18), ('python3', 15), ('easy-understanding', 13), ('recursive', 12), ('java-solution', 11), ('stack', 11), ('recursion', 9), ('tree-traversal', 9), ('breadth first search', 8), ('deque', 8), ('easy-understand', 8), ('iterative', 8), ('accepted', 7), ('breadth-first-search', 7), ('c#', 6), ('easy-undestand', 6), ('explained', 6), ('c++ code', 5), ('cpp solution', 5), ('easy', 5), ('level order traversal', 5), ('level order traversal ii', 5), ('stacks', 5), ('tree', 5), ('dfs recursive', 4), ('dfs simple solution', 4), ('go lang', 4), ('golang', 4), ('hashmap', 4), ('swift', 4), ('0ms', 3), ('bfs java', 3), ('bfs python', 3), ('binary tree', 3), ('breadth first traversal', 3), ('error', 3), ('go', 3), ('kotlin', 3), ('level', 3), ('level order', 3), ('order', 3), ('short', 3), ('time-limit-exceeded', 3), ('trees', 3), ('vector', 3), ('wrong-answer', 3), ('#queue', 2), ('100 faster', 2), ('100 speed', 2), ('1ms runtime', 2), ('algorithms', 2), ('arraylist', 2), ('beginner friendly', 2), ('beginnerfriendly', 2), ('bfs simple solution', 2), ('binary', 2), ('compile-error', 2), ('cpp easy', 2), ('dfs-iterative', 2), ('dfs-recursive', 2), ('dfs-tree', 2), ('dictionary', 2), ('easy to understand', 2), ('easy-to-understand', 2), ('iteratively', 2), ('java ac solution', 2), ('level-order', 2), ('linkedlist', 2), ('php', 2), ('python bfs', 2), ('pythonpython3', 2), ('queue-approach', 2), ('queues', 2), ('recursive reverse string', 2), ('ruby', 2), ('run-time-error', 2), ('rust', 2), ('simple', 2), ('simple clear c++ solution', 2), ('simple solution', 2), ('stack-based', 2), ('traverse', 2), ('#bfs', 1), ('#easy-understand', 1), ('#javascript', 1), ('#python', 1), ('0ms-solution', 1), ('100 memory', 1), ('100 space', 1), ('15ms', 1), ('4ms', 1), ('5 lines', 1), ('arr', 1), ('asahiocean', 1), ('awesome samriddhi', 1), ('backtracking', 1), ('beats 100', 1), ('binary-trees', 1), ('bsf', 1), ('c', 1), ('c-dfs', 1), ('c#-solution', 1), ('c+', 1), ('c++ ac', 1), ('c++ recursive solution', 1), ('c++ solution', 1), ('c++17', 1), ('clean', 1), ('commented', 1), ('commented code', 1), ('commentedcppcode', 1), ('compile', 1), ('concise-solution', 1), ('confusion', 1), ('cpp doubt', 1), ('csharp', 1), ('depth first search', 1), ('depth-first search', 1), ('depth-first-search', 1), ('depthwise', 1), ('dfs-topdown', 1), ('different-oj-local', 1), ('easy understanding', 1), ('easy undestanding', 1), ('easy-implementation', 1), ('easy-peasy', 1), ('easy-solition', 1), ('easy-solution', 1), ('easytounderstand', 1), ('easyunderstanding', 1), ('efficient', 1), ('explain', 1), ('explanation', 1), ('explanation with code', 1), ('fast', 1), ('fast-solution', 1), ('functional', 1), ('golang-solution', 1), ('height of tree', 1), ('help', 1), ('improve', 1), ('inorder traversal', 1), ('intutive', 1), ('iteration', 1), ('iterative solution', 1), ('iterative traversal', 1), ('java bfs', 1), ('javasacript', 1), ('javascript solution', 1), ('javascriptes6', 1), ('js', 1), ('jvm', 1), ('kotlinvim', 1), ('linear-space', 1), ('linear-time', 1), ('linked list', 1), ('linked-list', 1), ('list', 1), ('map', 1), ('morris', 1), ('need-help', 1), ('non-copy-paste', 1), ('non-recursive', 1), ('performance', 1), ('php solution', 1), ('pointers', 1), ('pre order', 1), ('pre-order', 1), ('preorder traversal', 1), ('preorder-traversal', 1), ('python 2', 1), ('python deque', 1), ('python-sourcery', 1), ('pythonic', 1), ('query', 1), ('question', 1), ('queue and stack', 1), ('reach', 1), ('recursive easy', 1), ('recursive-dfs', 1), ('recursively', 1), ('reverse', 1), ('reverse collections', 1), ('ritik', 1), ('scala', 1), ('short code', 1), ('shortest', 1), ('simple to understand', 1), ('simplest', 1), ('solution-cpp', 1), ('solution-sharing-cpp', 1), ('space-optimized', 1), ('straight-forward', 1), ('swapping', 1), ('tail-recursive', 1), ('test-case', 1), ('time-complexity', 1), ('top-down', 1), ('traversal', 1), ('tree traversal', 1), ('twopointer', 1), ('ultra easy', 1), ('unordered-map', 1), ('vector-operation', 1), ('video', 1), ('well-commented', 1), ('while-loop', 1), ('without reverse', 1), ('without-reverse', 1)]"
106,Construct Binary Tree from Inorder and Postorder Traversal,https://leetcode.com/problems/construct-binary-tree-from-inorder-and-postorder-traversal,"Given two integer arrays inorder and postorder where inorder is the inorder traversal of a binary tree and postorder is the postorder traversal of the same tree, construct and return the binary tree.","['array', 'tree', 'depth-first-search']",Medium,2611,50,584347,294123,"[""Construct Binary Tree from Preorder and Inorder Traversal""]","[('recursion', 49), ('java', 40), ('cpp', 35), ('python', 32), ('c++', 28), ('recursive', 23), ('python 3', 15), ('javascript', 13), ('c#', 8), ('hashmap', 8), ('binary-tree', 7), ('c', 7), ('dfs', 7), ('easy', 6), ('easy-understand', 6), ('golang', 6), ('simple', 6), ('easy-undestand', 5), ('java-solution', 5), ('memory-limit-exceeded', 5), ('tree', 5), ('easy-understanding', 4), ('improve', 4), ('iterative', 4), ('recursive solution', 4), ('recusion', 4), ('solution', 4), ('stacks', 4), ('trees', 4), ('go', 3), ('iteratively', 3), ('recursively', 3), ('recusive', 3), ('run-time-error', 3), ('time-complexity', 3), ('an7one', 2), ('beginner friendly', 2), ('clean', 2), ('cpp solution', 2), ('dfs-recursive', 2), ('explained', 2), ('explained solution', 2), ('explanation', 2), ('fasterthan100', 2), ('inorder', 2), ('iterative way', 2), ('kotlin', 2), ('php', 2), ('post-order-traversal', 2), ('postorder', 2), ('python3', 2), ('recurision', 2), ('recursive approach', 2), ('runtime-error', 2), ('scala', 2), ('swift', 2), ('test-case', 2), ('tree-traversal', 2), ('typescript', 2), ('unordered map', 2), ('#c++', 1), ('#cpp', 1), ('#stack', 1), ('#tree', 1), ('ac solution', 1), ('accepted', 1), ('accpected', 1), ('amazon', 1), ('avnish', 1), ('awesome samriddhi', 1), ('bottom-up-algorithm', 1), ('bug', 1), ('c code', 1), ('c#-solution', 1), ('c++ solution', 1), ('c++11', 1), ('clean-code', 1), ('compile-error', 1), ('complete code', 1), ('complete explaination', 1), ('coulddobetter', 1), ('cpp easy', 1), ('cpp question', 1), ('definition', 1), ('depth first search', 1), ('dictionary c#', 1), ('divideconquer', 1), ('easy code', 1), ('easy coding', 1), ('easy to understand', 1), ('easytounderstand', 1), ('efficiency', 1), ('elega', 1), ('explaination', 1), ('explanations', 1), ('faster', 1), ('fully explained', 1), ('go-solution', 1), ('golang-solution', 1), ('hashtable', 1), ('helper', 1), ('inorder traversal', 1), ('inorder-traversal', 1), ('interviewer', 1), ('iteration', 1), ('java solution', 1), ('js', 1), ('js javascript', 1), ('keep on hustling', 1), ('lambda expression', 1), ('linear', 1), ('linear time', 1), ('linear-time', 1), ('linear-time-space', 1), ('make tree', 1), ('map', 1), ('memory', 1), ('microsoft', 1), ('mle', 1), ('mrmagician', 1), ('need-help', 1), ('no-recursive', 1), ('non-recursion', 1), ('optimised code', 1), ('php solution', 1), ('picture explanation', 1), ('pointer arithmetic', 1), ('postorder traversal', 1), ('preorder', 1), ('preorder traversal', 1), ('recursive dictionary', 1), ('recursive easy', 1), ('recursive-descent', 1), ('recusrive', 1), ('rescursion', 1), ('rescursuve', 1), ('ritik', 1), ('ruby', 1), ('rust', 1), ('short code', 1), ('simple clear c++ solution', 1), ('simple solution', 1), ('simpler', 1), ('simplest', 1), ('solution-sharing-cpp', 1), ('stack', 1), ('stack-implementation', 1), ('time-limit-exceeded', 1), ('top-down', 1), ('traversal', 1), ('treefrominandposorder', 1), ('unorderedmap', 1), ('upvote', 1), ('video-explanation', 1), ('wrong-answer', 1), ('xjq', 1)]"
105,Construct Binary Tree from Preorder and Inorder Traversal,https://leetcode.com/problems/construct-binary-tree-from-preorder-and-inorder-traversal,"Given two integer arrays preorder and inorder where preorder is the preorder traversal of a binary tree and inorder is the inorder traversal of the same tree, construct and return the binary tree.","['array', 'tree', 'depth-first-search']",Medium,5109,129,928225,488683,"[""Construct Binary Tree from Inorder and Postorder Traversal""]","[('recursion', 60), ('java', 45), ('cpp', 43), ('python', 37), ('c++', 36), ('recursive', 34), ('javascript', 26), ('python 3', 18), ('hashmap', 15), ('binary-tree', 13), ('python3', 12), ('dfs', 9), ('easy', 9), ('easy-understanding', 9), ('iterative', 9), ('map', 9), ('java-solution', 8), ('run-time-error', 7), ('solution', 7), ('golang', 6), ('memory-limit-exceeded', 6), ('wrong-answer', 6), ('binary tree', 5), ('c#', 5), ('easy-understand', 5), ('easy-undestand', 5), ('preorder', 5), ('solution-sharing-cpp', 5), ('time-limit-exceeded', 5), ('c++ code', 4), ('cpp solution', 4), ('go-solution', 4), ('golang-solution', 4), ('js', 4), ('recurision', 4), ('recusion', 4), ('simple', 4), ('c', 3), ('easy to understand', 3), ('easy-to-understand', 3), ('explained', 3), ('fast and simple', 3), ('go', 3), ('help', 3), ('improve', 3), ('inorder', 3), ('java ac solution', 3), ('recursive solution', 3), ('stack', 3), ('tree', 3), ('accepted', 2), ('binary-search', 2), ('commented', 2), ('error', 2), ('explanation', 2), ('hash table', 2), ('inorder traversal', 2), ('inorder-traversal', 2), ('iteration', 2), ('morris traversal', 2), ('preorder traversal', 2), ('queue', 2), ('recursively', 2), ('runtime-error', 2), ('short', 2), ('simple clear c++ solution', 2), ('swift', 2), ('test-case', 2), ('testcase-wrong', 2), ('time-complexity', 2), ('tle', 2), ('tree-traversal', 2), ('very easy to understand', 2), ('works-on-my-machine', 2), ('xjq', 2), ('youtube', 2), ('1-liner', 1), ('100 speed', 1), ('16ms', 1), ('1l', 1), ('1ms', 1), ('20ms', 1), ('amazon', 1), ('avnish', 1), ('awesome samriddhi', 1), ('beat 99.7', 1), ('binary-recursion', 1), ('binary-tree-construction', 1), ('c++ hash', 1), ('c++11', 1), ('cdq divide and conquer', 1), ('clean code', 1), ('commented code', 1), ('comments', 1), ('comments-added', 1), ('confused', 1), ('constant-space', 1), ('constant-space-iterative', 1), ('constructbinarytree', 1), ('coulddobetter', 1), ('cplusplus', 1), ('cpp doubt', 1), ('cpp-solution', 1), ('definition', 1), ('detailed explanation', 1), ('dfs solution', 1), ('dfs traversal', 1), ('dictionary', 1), ('divide-and-conquer', 1), ('duplicates', 1), ('easiest', 1), ('easytounderstand', 1), ('error in solution', 1), ('explanatory comments', 1), ('faster', 1), ('go lang', 1), ('hashing', 1), ('hashtable', 1), ('hasmap', 1), ('heap-buffer-overflow', 1), ('intuitive', 1), ('iterator', 1), ('javascript recursive', 1), ('javascript solution', 1), ('js javascript', 1), ('keep it simple', 1), ('kotlinvim', 1), ('memory optimized', 1), ('microsoft', 1), ('most efficient solution', 1), ('mrmagician', 1), ('no extra space', 1), ('one-liner', 1), ('output-limit-exceeded', 1), ('peymannp', 1), ('php', 1), ('php solution', 1), ('postorder-traversal', 1), ('pre-order', 1), ('preorder-traversal', 1), ('pythonpython3', 1), ('recrusive', 1), ('recursion formula', 1), ('recursive easy', 1), ('recurssion', 1), ('recusrion', 1), ('resursive', 1), ('ritik', 1), ('ruby', 1), ('run time error', 1), ('rune-time-error', 1), ('runtime', 1), ('runtimeerror', 1), ('scala', 1), ('simple solution', 1), ('solution-sharing-python', 1), ('space', 1), ('span', 1), ('speed', 1), ('stack-based', 1), ('stacks', 1), ('straight-forward', 1), ('time', 1), ('traversal', 1), ('tree problem', 1), ('trees', 1), ('unordered map', 1), ('upvote', 1), ('uthash', 1), ('video', 1), ('video explaination', 1), ('video explanation', 1), ('video interview', 1), ('video-explanation', 1), ('visual', 1), ('whiteboard explanation', 1), ('wrong answer', 1)]"
104,Maximum Depth of Binary Tree,https://leetcode.com/problems/maximum-depth-of-binary-tree,"Given the root of a binary tree, return its maximum depth.

A binary tree's maximum depth is the number of nodes along the longest path from the root node down to the farthest leaf node.","['tree', 'depth-first-search', 'recursion']",Easy,3875,97,1642611,1125289,"[""Balanced Binary Tree"", ""Minimum Depth of Binary Tree"", ""Maximum Depth of N-ary Tree"", ""Time Needed to Inform All Employees""]","[('java', 126), ('recursion', 108), ('python', 88), ('c++', 62), ('cpp', 62), ('dfs', 61), ('javascript', 48), ('recursive', 46), ('python 3', 42), ('bfs', 35), ('solution', 30), ('binary-tree', 29), ('python3', 27), ('java-solution', 25), ('golang', 20), ('easy', 18), ('iterative', 17), ('easy-understanding', 16), ('recusion', 15), ('cpp solution', 11), ('depth first search', 11), ('golang-solution', 11), ('simple', 11), ('c', 10), ('depth', 10), ('dfs simple solution', 10), ('one-liner', 9), ('queue', 9), ('recurision', 9), ('short', 9), ('simple solution', 9), ('swift', 9), ('tree', 9), ('c#', 8), ('c++ code', 8), ('easy-understand', 8), ('easytounderstand', 8), ('binary tree', 7), ('go-solution', 7), ('one line', 7), ('ruby', 7), ('cpp easy', 6), ('depth-first-search', 6), ('recursive easy', 6), ('recursive solution', 6), ('wrong-answer', 6), ('accepted', 5), ('binary search tree', 5), ('easy-to-understand', 5), ('explained', 5), ('recursively', 5), ('run-time-error', 5), ('stack', 5), ('trees', 5), ('0ms', 4), ('csharp', 4), ('deque', 4), ('dfs solution', 4), ('easy-undestand', 4), ('fast and simple', 4), ('height of tree', 4), ('javascript solution', 4), ('php', 4), ('recursive-dfs', 4), ('tree-traversal', 4), ('bottom-up', 3), ('breadth-first-search', 3), ('bst', 3), ('c code', 3), ('dfs-tree', 3), ('esay', 3), ('iteratively', 3), ('level-order-traversal', 3), ('oneline', 3), ('postorder-traversal', 3), ('python2', 3), ('recursive approach', 3), ('recursive-descent', 3), ('rust', 3), ('scala', 3), ('time-complexity', 3), ('top-down', 3), ('tree traversal', 3), ('100 faster runtime', 2), ('100 speed', 2), ('1liner', 2), ('bfs-dfs', 2), ('breadth first search', 2), ('c++ recursive solution', 2), ('c++ solution', 2), ('constant-space', 2), ('depth-first search', 2), ('dfs traversal', 2), ('dfs-bfs', 2), ('dfs-in-order', 2), ('dfs-iterative', 2), ('easiest', 2), ('easy to read', 2), ('easy-implementation', 2), ('explanation of logic', 2), ('faster', 2), ('fastest', 2), ('go', 2), ('go lang', 2), ('height', 2), ('iterative solution', 2), ('java ac solution', 2), ('java simple', 2), ('javasacript', 2), ('js', 2), ('kotlin', 2), ('level order traversal', 2), ('nameerror', 2), ('php solution', 2), ('readable', 2), ('test-case', 2), ('tree problem', 2), ('tree-depth', 2), ('video', 2), ('works-on-my-machine', 2), ('#c++', 1), ('#codegirl', 1), ('#cpp', 1), ('#depth-first-search', 1), ('#dfs', 1), ('#height', 1), ('#javascript', 1), ('#maximumdepth', 1), ('#python', 1), ('#recursion', 1), ('#trees', 1), ('0ms runtime', 1), ('1-line', 1), ('100', 1), ('100 efficient', 1), ('100 faster', 1), ('2 lines approach', 1), ('2-liner', 1), ('97.33 percent faster', 1), ('awesome samriddhi', 1), ('beating-100-submission', 1), ('beating-100-submissions', 1), ('bfs python', 1), ('bfs simple solution', 1), ('bfs vs dfs', 1), ('binary-search-tree', 1), ('breadth-first search', 1), ('bug', 1), ('c++ iterative sol', 1), ('clean', 1), ('comments added', 1), ('comments-added', 1), ('compile', 1), ('cpp dfs 1-line', 1), ('cpp doubt', 1), ('cpp question', 1), ('cpp-easy', 1), ('cpp-functional', 1), ('descriptive', 1), ('dfs pre-order traversal', 1), ('dfs recursive', 1), ('dfs-postorder', 1), ('dfs-recursive', 1), ('dfs-topdown', 1), ('dp', 1), ('easiest solution', 1), ('easy to understand', 1), ('easy-to-read', 1), ('elegant', 1), ('error', 1), ('explaination', 1), ('explained solution', 1), ('explanation', 1), ('explanation with code', 1), ('facebook', 1), ('fast', 1), ('fast-solution', 1), ('faster than 90', 1), ('faster then 95', 1), ('golag', 1), ('greedy', 1), ('hashset', 1), ('improve', 1), ('incorrect-test-case', 1), ('inorder', 1), ('inorder traversal', 1), ('insert', 1), ('ios', 1), ('iterate', 1), ('iteration', 1), ('iterative-bfs', 1), ('iterative-dfs', 1), ('iterative-recursive', 1), ('iteratve', 1), ('jannali', 1), ('java solution', 1), ('java-simple-clean-solution', 1), ('javascrip', 1), ('javascript recursive', 1), ('jithil', 1), ('jithil p ponnan', 1), ('kotlinvim', 1), ('linear-time', 1), ('lrd', 1), ('math-solution', 1), ('max depth', 1), ('max-depth', 1), ('maximum', 1), ('memory optimized', 1), ('microsoft', 1), ('missing test case', 1), ('mrmagician', 1), ('non-recursive', 1), ('norecursion', 1), ('one pass solution', 1), ('one-line', 1), ('onelinecode', 1), ('parallelism', 1), ('pending', 1), ('post-order', 1), ('post-order-dfs', 1), ('post-order-traversal', 1), ('preorder traversal', 1), ('problem-statement', 1), ('ptyhon', 1), ('pyhton', 1), ('pyhton3', 1), ('python dfs', 1), ('python3.8', 1), ('pythonpython3', 1), ('question', 1), ('question need help', 1), ('recurrsion', 1), ('recursion palindrome', 1), ('recursion tree', 1), ('recursion vs iteration', 1), ('recursive lines clean', 1), ('recursive-solution', 1), ('recusive', 1), ('recusrive', 1), ('ritik', 1), ('runtime', 1), ('runtime-error', 1), ('short code', 1), ('shortcode', 1), ('shortest-solution', 1), ('simple clear c++ solution', 1), ('simple java solution', 1), ('simplest', 1), ('solution-python', 1), ('solution-sharing-cpp', 1), ('solution-sharing-python', 1), ('solution-sharingjava', 1), ('space', 1), ('stack-based', 1), ('stacks', 1), ('startup', 1), ('status', 1), ('stl', 1), ('summary', 1), ('tail-recursive', 1), ('terinary', 1), ('testcase-wrong', 1), ('time', 1), ('time-complexity-o', 1), ('top down approach', 1), ('topdown', 1), ('traverse', 1), ('typescript', 1), ('understanding', 1), ('video explaination', 1), ('video explanation', 1), ('video-explanation', 1), ('visual-cpp', 1), ('well-explained', 1), ('while-loop', 1), ('worng-answer', 1), ('youtube', 1)]"
103,Binary Tree Zigzag Level Order Traversal,https://leetcode.com/problems/binary-tree-zigzag-level-order-traversal,"Given the root of a binary tree, return the zigzag level order traversal of its nodes' values. (i.e., from left to right, then right to left for the next level and alternate between).","['stack', 'tree', 'breadth-first-search']",Medium,3369,127,999018,505357,"[""Binary Tree Level Order Traversal""]","[('bfs', 212), ('java', 112), ('python', 96), ('c++', 92), ('cpp', 92), ('queue', 82), ('python 3', 56), ('level-order-traversal', 53), ('javascript', 45), ('deque', 35), ('dfs', 30), ('stack', 28), ('java-solution', 23), ('solution', 22), ('stacks', 21), ('cpp solution', 20), ('python3', 19), ('iterative', 17), ('easy-understanding', 15), ('c#', 14), ('easy-undestand', 14), ('tree-traversal', 14), ('golang', 13), ('binary-tree', 12), ('breadth first search', 12), ('easy', 11), ('tree', 10), ('c++ code', 9), ('level order traversal', 9), ('simple solution', 9), ('binary tree', 8), ('recursion', 8), ('recursive', 8), ('simple', 8), ('zigzag traversal', 8), ('zigzaglevelorder', 8), ('dfs simple solution', 7), ('easy-understand', 7), ('zigzag', 7), ('easy-to-understand', 6), ('easytounderstand', 6), ('golang-solution', 6), ('recursively', 6), ('swift', 6), ('go', 5), ('java ac solution', 5), ('trees', 5), ('2 stacks', 4), ('bfs python', 4), ('bfs simple solution', 4), ('c++ solution', 4), ('c++11', 4), ('explained', 4), ('fast', 4), ('js', 4), ('level order', 4), ('linked-list', 4), ('php', 4), ('python2', 4), ('ruby', 4), ('tree traversal', 4), ('wrong-answer', 4), ('#bfs', 3), ('amazon', 3), ('breadth-first-search', 3), ('cpp easy', 3), ('easiest', 3), ('easy to understand', 3), ('go-solution', 3), ('iteratively', 3), ('php solution', 3), ('queue-approach', 3), ('reverse', 3), ('simple clear c++ solution', 3), ('simplest', 3), ('straight-forward', 3), ('two stacks', 3), ('typescript', 3), ('using stacks', 3), ('#python', 2), ('#queue', 2), ('1ms', 2), ('4ms', 2), ('best', 2), ('bfs java', 2), ('breadth first traversal', 2), ('breath first search', 2), ('clean code', 2), ('dequeue', 2), ('easy understanding', 2), ('fast-solution', 2), ('faster than 100.00', 2), ('fastest', 2), ('hashmap', 2), ('improve', 2), ('inorder', 2), ('inorder traversal', 2), ('iterative solution', 2), ('javascript solution', 2), ('js javascript', 2), ('linear time', 2), ('linkedlist', 2), ('map', 2), ('microsoft', 2), ('mrmagician', 2), ('non-recursion', 2), ('python bfs', 2), ('questions', 2), ('scala', 2), ('short', 2), ('solution-python', 2), ('tree problem', 2), ('two-stack', 2), ('zig zag', 2), ('#easy-understanding', 1), ('#java', 1), ('#javascript', 1), ('0ms', 1), ('0ms runtime', 1), ('0ms-solution', 1), ('100 faster', 1), ('100 space', 1), ('100 speed', 1), ('accepted', 1), ('algorithms', 1), ('alternate popping', 1), ('amazon interview', 1), ('array', 1), ('arraylist', 1), ('avnish', 1), ('awesome samriddhi', 1), ('beats 98 pc', 1), ('best explaination', 1), ('best-submission', 1), ('binarysearch', 1), ('breadth-first', 1), ('breath-first', 1), ('bsf', 1), ('bst', 1), ('bugs', 1), ('c', 1), ('c++ iterative sol', 1), ('c++ map', 1), ('c++ recursive solution', 1), ('c++ stack', 1), ('clean code with comments', 1), ('clean-efficient-code', 1), ('collections', 1), ('comments', 1), ('comments added', 1), ('comments-added', 1), ('complexity-analysis', 1), ('comprehensive', 1), ('concise', 1), ('counter', 1), ('csharp', 1), ('depth first', 1), ('depth first search', 1), ('depth first traversal', 1), ('dfs-iterative', 1), ('dfs-topdown', 1), ('double', 1), ('easy solution', 1), ('easy undestanding', 1), ('easy-solition', 1), ('easy-solution', 1), ('examples', 1), ('explanation', 1), ('explanations', 1), ('faster', 1), ('faster than 85', 1), ('go-lang', 1), ('google', 1), ('hash table', 1), ('immutable', 1), ('in-order-traversal', 1), ('intuitive', 1), ('iterate', 1), ('iteration', 1), ('iterative-bfs', 1), ('iterative-bfs python', 1), ('iterative-solution', 1), ('iteratve', 1), ('java 8', 1), ('java easy to understand', 1), ('java-zigzag', 1), ('javascrip', 1), ('javascript bfs', 1), ('javascript recursive', 1), ('keep it simple', 1), ('kotlin', 1), ('kotlinvim', 1), ('level-order', 1), ('meiyaowen', 1), ('memory less than 100', 1), ('memory usage', 1), ('memory-limit-exceeded', 1), ('microsoft-india', 1), ('move', 1), ('norecursion', 1), ('pair', 1), ('pairs', 1), ('pandas', 1), ('preorder traversal', 1), ('prettycool', 1), ('priority queue', 1), ('pyhton', 1), ('python deque', 1), ('question need help', 1), ('queue and stack', 1), ('recursive solution', 1), ('recursive-dfs', 1), ('recusion', 1), ('ritik', 1), ('rust', 1), ('rust vec', 1), ('satya', 1), ('short c++ code', 1), ('similar-problems', 1), ('simple-solution', 1), ('simplesweet', 1), ('solution-cpp', 1), ('solution-sharing-cpp', 1), ('space-efficient', 1), ('stack-based', 1), ('std', 1), ('stl', 1), ('swap', 1), ('swift5', 1), ('test-cases', 1), ('testcase-wrong', 1), ('time complexity', 1), ('time-complexity', 1), ('travel', 1), ('traversal', 1), ('traverse', 1), ('trivial', 1), ('ultra easy', 1), ('upvote', 1), ('vector', 1), ('video', 1), ('video explanation', 1), ('youtube', 1)]"
102,Binary Tree Level Order Traversal,https://leetcode.com/problems/binary-tree-level-order-traversal,"Given the root of a binary tree, return the level order traversal of its nodes' values. (i.e., from left to right, level by level).","['tree', 'breadth-first-search']",Medium,4584,106,1445152,825880,"[""Binary Tree Zigzag Level Order Traversal"", ""Binary Tree Level Order Traversal II"", ""Minimum Depth of Binary Tree"", ""Binary Tree Vertical Order Traversal"", ""Average of Levels in Binary Tree"", ""N-ary Tree Level Order Traversal"", ""Cousins in Binary Tree""]","[('bfs', 189), ('java', 121), ('queue', 99), ('python', 89), ('cpp', 82), ('c++', 75), ('python 3', 49), ('javascript', 48), ('dfs', 42), ('level-order-traversal', 34), ('solution', 28), ('iterative', 27), ('recursion', 25), ('python3', 23), ('binary-tree', 20), ('golang', 19), ('easy-understanding', 18), ('java-solution', 15), ('recursive', 15), ('c#', 13), ('cpp solution', 13), ('easy-understand', 13), ('accepted', 11), ('breadth first search', 11), ('tree-traversal', 10), ('c++ code', 9), ('easy-to-understand', 9), ('easy-undestand', 9), ('simple', 9), ('simple solution', 9), ('swift', 9), ('csharp', 7), ('go', 7), ('tree', 7), ('bfs simple solution', 6), ('easy', 6), ('hashmap', 6), ('js', 6), ('level order traversal', 6), ('0ms', 5), ('breadth-first-search', 5), ('cpp easy', 5), ('deque', 5), ('dfs simple solution', 5), ('easytounderstand', 5), ('golang-solution', 5), ('python2', 5), ('queues', 5), ('run-time-error', 5), ('short', 5), ('100 speed', 4), ('binary tree', 4), ('breadth first traversal', 4), ('c', 4), ('easy to understand', 4), ('fast', 4), ('iteration', 4), ('map', 4), ('ruby', 4), ('stack', 4), ('time-limit-exceeded', 4), ('#bfs', 3), ('1ms', 3), ('bfs java', 3), ('depth first search', 3), ('fastest', 3), ('improve', 3), ('javascript solution', 3), ('level order', 3), ('level-order', 3), ('pre-order', 3), ('preorder-traversal', 3), ('recurision', 3), ('recursive solution', 3), ('rust', 3), ('scala', 3), ('traverse', 3), ('typescript', 3), ('vector', 3), ('#javascript', 2), ('0ms runtime', 2), ('100', 2), ('beginnerfriendly', 2), ('bfs python', 2), ('binary-search', 2), ('breath first search', 2), ('clean code', 2), ('commented', 2), ('comments-added', 2), ('dfs traversal', 2), ('dfs-tree', 2), ('fast and simple', 2), ('fast-solution', 2), ('go lang', 2), ('iterative solution', 2), ('iterative traversal', 2), ('iterative-bfs', 2), ('iteratve-recursive', 2), ('javascript recursive', 2), ('level', 2), ('levelorder', 2), ('linear', 2), ('linked-list', 2), ('list', 2), ('memory-limit-exceeded', 2), ('non-recursive', 2), ('php', 2), ('php solution', 2), ('queue-approach', 2), ('recursive easy', 2), ('recursively', 2), ('runtime-error', 2), ('solution-sharing-cpp', 2), ('solution-sharing-python', 2), ('test-case', 2), ('traverse-a-tree', 2), ('tree traversal', 2), ('trees', 2), ('video', 2), ('#c++', 1), ('#cpp', 1), ('#python', 1), ('#python 3', 1), ('#queue', 1), ('100 memory', 1), ('100 space', 1), ('1ms runtime', 1), ('4ms', 1), ('algorithm', 1), ('algorithms', 1), ('arraylist', 1), ('arraylist-power', 1), ('awesome samriddhi', 1), ('backtracking', 1), ('basics', 1), ('beat 100', 1), ('beginner', 1), ('bfs with prev path map', 1), ('bina', 1), ('binary', 1), ('binary search tree', 1), ('binary tree level order', 1), ('binary tree traversal', 1), ('binary-trees', 1), ('breadth-first', 1), ('breath-first', 1), ('bst', 1), ('c++ map', 1), ('c++11', 1), ('clarification', 1), ('clean', 1), ('clear', 1), ('commentary', 1), ('concise-solution', 1), ('cpp doubt', 1), ('cpp-solution', 1), ('defaultdict', 1), ('delimiter', 1), ('depth first traversal', 1), ('depth-first-search', 1), ('detailed explanation', 1), ('dfs-topdown', 1), ('display', 1), ('double-deque', 1), ('dshah14', 1), ('easiest', 1), ('easy understanding', 1), ('easy-to-read', 1), ('ecmascript', 1), ('efficient solution', 1), ('error', 1), ('es6', 1), ('explanation', 1), ('facebook', 1), ('faster', 1), ('faster than 95.46', 1), ('fastest c++ solution', 1), ('fastest solution', 1), ('for help', 1), ('functional programming', 1), ('functional-programming', 1), ('generator', 1), ('go-solution', 1), ('hash table', 1), ('height of a binary tree', 1), ('inorder traversal', 1), ('intuitive', 1), ('iterate', 1), ('iterative approch', 1), ('iteratively', 1), ('iteratve', 1), ('java ac solution', 1), ('java solution sharing', 1), ('java-8', 1), ('java-script', 1), ('javasccript', 1), ('javascipt', 1), ('javascrip', 1), ('javascriptes6', 1), ('kotlin', 1), ('kotlinvim', 1), ('linear time', 1), ('linear-space', 1), ('linear-time', 1), ('list-comprehension', 1), ('meiyaowen', 1), ('memory-limited-exceeded', 1), ('mininal', 1), ('morris traversal', 1), ('mrmagician', 1), ('not optimized', 1), ('null', 1), ('o-1', 1), ('on', 1), ('one pass solution', 1), ('oop', 1), ('optimal', 1), ('optimal solution', 1), ('order-level-traversal', 1), ('output-limit-exceeded', 1), ('peymannp', 1), ('pointer', 1), ('pre-order traversal', 1), ('ptyhon3', 1), ('pyhton', 1), ('python bfs', 1), ('questions', 1), ('recurrance', 1), ('recurssion', 1), ('ritik', 1), ('rust vec', 1), ('self-explanatory', 1), ('simple python solution', 1), ('simple recursive solution and', 1), ('simple-solution', 1), ('simpler', 1), ('simplesolution', 1), ('slow', 1), ('soli', 1), ('solution-cpp', 1), ('solution-python', 1), ('solutions', 1), ('space', 1), ('space-complexity', 1), ('space-optimized', 1), ('spread operator', 1), ('stdmove', 1), ('straight-forward', 1), ('stream', 1), ('style', 1), ('summary', 1), ('tail-call', 1), ('time', 1), ('time limit exceeded', 1), ('time-complexity', 1), ('time-complexity-o', 1), ('time-limit-exceeded-c', 1), ('traversal', 1), ('traversal tree', 1), ('tree-level-order', 1), ('try-except', 1), ('tuple', 1), ('tuples', 1), ('two', 1), ('two-vector', 1), ('upvote', 1), ('video explanation', 1), ('video-explanation', 1), ('with comments', 1), ('with-recursion', 1), ('without-recursion', 1), ('works-on-my-machine', 1), ('wrong-answer', 1), ('yield return', 1), ('youtube', 1)]"
101,Symmetric Tree,https://leetcode.com/problems/symmetric-tree,"Given the root of a binary tree, check whether it is a mirror of itself (i.e., symmetric around its center).","['tree', 'depth-first-search', 'breadth-first-search']",Easy,6036,163,1805780,877688,[],"[('java', 95), ('python', 82), ('c++', 70), ('recursion', 70), ('recursive', 70), ('cpp', 59), ('javascript', 44), ('iterative', 43), ('bfs', 37), ('python 3', 36), ('dfs', 28), ('python3', 26), ('queue', 23), ('symmetric-tree', 21), ('solution', 19), ('java-solution', 18), ('easy-understanding', 16), ('golang', 11), ('recursively', 11), ('simple', 11), ('stack', 11), ('simple solution', 10), ('tree', 10), ('recursive solution', 9), ('binary-tree', 8), ('c#', 8), ('swift', 8), ('iteration', 7), ('tree-traversal', 7), ('trees', 7), ('easy', 6), ('easy-understand', 6), ('level-order-traversal', 6), ('recurision', 6), ('0ms', 5), ('accepted', 5), ('golang-solution', 5), ('iteratively', 5), ('recursive easy', 5), ('recusion', 5), ('ruby', 5), ('short', 5), ('c++ code', 4), ('cpp easy', 4), ('cpp solution', 4), ('deque', 4), ('easy-to-understand', 4), ('easy-undestand', 4), ('go-solution', 4), ('inorder-traversal', 4), ('non-recursive', 4), ('python2', 4), ('symmetric', 4), ('beginner friendly', 3), ('binary tree', 3), ('clean code', 3), ('cpp-solution', 3), ('depth first search', 3), ('dfs simple solution', 3), ('fastest', 3), ('inorder traversal', 3), ('javascript solution', 3), ('js', 3), ('non-recursion', 3), ('preorder traversal', 3), ('scala', 3), ('symmetric tree', 3), ('video-explanation', 3), ('#bfs', 2), ('#javascript', 2), ('100 speed', 2), ('4ms', 2), ('arraylist', 2), ('beats 100', 2), ('breadth-first', 2), ('breath-first', 2), ('c', 2), ('commented', 2), ('comments', 2), ('easiest', 2), ('easy to understand', 2), ('es6', 2), ('explained', 2), ('go', 2), ('improve', 2), ('inorder', 2), ('ios', 2), ('itereative', 2), ('javascript recursive', 2), ('list', 2), ('mirroring', 2), ('palindrome', 2), ('palindrome-check', 2), ('postorder-traversal', 2), ('pre-order', 2), ('recursive-descent', 2), ('resursive', 2), ('rust', 2), ('short c++ code', 2), ('short code', 2), ('short solution', 2), ('solution-sharing-cpp', 2), ('stacks', 2), ('testcase-wrong', 2), ('time-complexity', 2), ('tree traversal', 2), ('typescript', 2), ('works-on-my-machine', 2), ('#iterative', 1), ('#kotlin', 1), ('#python', 1), ('#recursion', 1), ('0ms-solution', 1), ('100', 1), ('100 faster cpp', 1), ('1ms', 1), ('3ms', 1), ('4 liner', 1), ('40ms', 1), ('52ms', 1), ('adrenaline09', 1), ('amazon', 1), ('awesome samriddhi', 1), ('basic', 1), ('beating-100-submissions', 1), ('begginerfriendly', 1), ('best', 1), ('best recursive non-recursive', 1), ('best-submission', 1), ('bfs java', 1), ('bfs simple solution', 1), ('binary-tree-input', 1), ('breadth first search', 1), ('breadth-first search', 1), ('bsf', 1), ('c#-solution', 1), ('c++ easy to understand', 1), ('c++ solution', 1), ('c++11', 1), ('clean', 1), ('clear', 1), ('comparing trees', 1), ('comparison', 1), ('compile-error', 1), ('concise', 1), ('constant-space', 1), ('csharp', 1), ('depth first-search', 1), ('depth-first search', 1), ('depth-first-search', 1), ('description', 1), ('dfs recursive', 1), ('dfs traversal', 1), ('dfs-tree', 1), ('different solutions', 1), ('documented', 1), ('dshah14', 1), ('easy sloution', 1), ('easy-implementation', 1), ('easytounderstand', 1), ('efficient', 1), ('eulerian path', 1), ('explaination', 1), ('explanation of logic', 1), ('explanation simple', 1), ('fail', 1), ('fast', 1), ('fast-solution', 1), ('faster than 100.00', 1), ('faster then 95', 1), ('fastest java slution', 1), ('fatser', 1), ('generator', 1), ('go lang', 1), ('help me', 1), ('helper function', 1), ('improvement-needed', 1), ('interactive', 1), ('iteration vs recursion', 1), ('iterative solution', 1), ('iterative traversal', 1), ('iterative-bfs', 1), ('iteratve', 1), ('iteratve-recursive', 1), ('java 8', 1), ('java ac solution', 1), ('java recursion', 1), ('kotlin', 1), ('kotlinvim', 1), ('left-frst', 1), ('level order', 1), ('level order traversal', 1), ('linear time', 1), ('linear-space', 1), ('linear-time', 1), ('mirror', 1), ('morris-traversal', 1), ('mrmagician', 1), ('one-pass', 1), ('perfect score', 1), ('php', 1), ('post-order', 1), ('postorder', 1), ('preorder', 1), ('preorder-recursion', 1), ('pyhton', 1), ('pyhton3', 1), ('python3.8', 1), ('recrusive', 1), ('recursive lines clean', 1), ('recursiveley', 1), ('recusive', 1), ('recusrive', 1), ('reuse', 1), ('right-first', 1), ('ritik', 1), ('run-time-error', 1), ('simpe', 1), ('simple clear c++ solution', 1), ('smallest', 1), ('solution-sharing-python', 1), ('space-complexity', 1), ('split', 1), ('stack python', 1), ('stack-implementation', 1), ('stars move the article up', 1), ('stl', 1), ('straightforward', 1), ('string', 1), ('swift5', 1), ('test-case', 1), ('time-limit-exceeded', 1), ('traversal', 1), ('traverse', 1), ('tree problem', 1), ('upvote', 1), ('verbose', 1), ('video', 1), ('video explanation', 1), ('video solution', 1), ('whileloop', 1), ('wrong-answer', 1), ('xor', 1), ('youtube', 1)]"
100,Same Tree,https://leetcode.com/problems/same-tree,"Given the roots of two binary trees p and q, write a function to check if they are the same or not.

Two binary trees are considered the same if they are structurally identical, and the nodes have the same value.","['tree', 'depth-first-search']",Easy,3186,86,1317261,715206,[],"[('java', 125), ('recursion', 119), ('c++', 84), ('python', 70), ('cpp', 68), ('recursive', 50), ('dfs', 40), ('python 3', 36), ('javascript', 30), ('solution', 30), ('iterative', 29), ('java-solution', 24), ('binary-tree', 19), ('tree', 17), ('bfs', 16), ('python3', 15), ('simple', 15), ('easy', 14), ('cpp solution', 13), ('golang', 13), ('short', 13), ('easy-understanding', 12), ('c#', 11), ('recusion', 11), ('queue', 9), ('simple solution', 9), ('tree-traversal', 9), ('easy-undestand', 8), ('recursive easy', 8), ('c', 7), ('easytounderstand', 7), ('explained', 7), ('golang-solution', 7), ('non-recursive', 7), ('recursively', 7), ('ruby', 7), ('wrong-answer', 7), ('0ms', 6), ('easy-understand', 6), ('preorder traversal', 6), ('stack', 6), ('100 speed', 5), ('binary tree', 5), ('c++ code', 5), ('cpp easy', 5), ('inorder traversal', 5), ('iteration', 5), ('recurision', 5), ('swift', 5), ('trees', 5), ('depth first search', 4), ('easy to understand', 4), ('iteratively', 4), ('pre-order', 4), ('recursive solution', 4), ('simplest', 4), ('tree problem', 4), ('amazon', 3), ('clean code', 3), ('dfs simple solution', 3), ('faster', 3), ('java ac solution', 3), ('linear time', 3), ('one line', 3), ('oneline', 3), ('stacks', 3), ('test-case', 3), ('traversal', 3), ('tree traversal', 3), ('1 line', 2), ('100', 2), ('accepted', 2), ('awesome samriddhi', 2), ('bfs python', 2), ('binary-search', 2), ('breadth first search', 2), ('c++ solution', 2), ('comments', 2), ('comments-added', 2), ('csharp', 2), ('depth-first-search', 2), ('dfs-bfs', 2), ('dfs-tree', 2), ('explanation', 2), ('fast', 2), ('fast and simple', 2), ('fast-solution', 2), ('go', 2), ('go-solution', 2), ('identical', 2), ('inorder', 2), ('input', 2), ('intuitive', 2), ('issametree', 2), ('one-line', 2), ('oop', 2), ('php', 2), ('preorder', 2), ('ritik', 2), ('run-time-error', 2), ('rust', 2), ('same tree', 2), ('scala', 2), ('short code', 2), ('simple clear c++ solution', 2), ('solution-sharing-cpp', 2), ('#codegirl', 1), ('#depth-first-search', 1), ('#easy-understand', 1), ('#explained', 1), ('#fast', 1), ('#javascript', 1), ('#python', 1), ('#recursion', 1), ('1-line', 1), ('1-liner', 1), ('100 faster runtime', 1), ('100 memory', 1), ('100 space', 1), ('100faster', 1), ('2 tree same time', 1), ('3ms', 1), ('accpected', 1), ('answer', 1), ('approach', 1), ('bad', 1), ('beats 100', 1), ('beginners level', 1), ('binary search tree', 1), ('binary trees', 1), ('breadth traversal', 1), ('bst', 1), ('bug-test-case', 1), ('c++11', 1), ('c++14', 1), ('clean', 1), ('clean-code', 1), ('collections', 1), ('combile', 1), ('commented', 1), ('commented code', 1), ('compile-error', 1), ('complexity-analysis', 1), ('concise-solution', 1), ('constant memory', 1), ('cpp doubt', 1), ('deep-first-search', 1), ('deque', 1), ('dfs pre-order traversal', 1), ('dfs recursive', 1), ('dfs traversal', 1), ('dfs-iterative', 1), ('dfs-non-recursive', 1), ('dfs-recursive', 1), ('dynamic programming', 1), ('easy sloution', 1), ('easy-solition', 1), ('easy-to-understand', 1), ('easysolution', 1), ('effiecinet', 1), ('error', 1), ('explanation with logic', 1), ('explanations4problem', 1), ('faster than 100.00', 1), ('faster than 99.41', 1), ('faster-than-100', 1), ('fastest', 1), ('fastest c++ solution', 1), ('go lang', 1), ('google', 1), ('i want to get a star', 1), ('if condition', 1), ('illustration', 1), ('ios', 1), ('iterative solution', 1), ('iterative way', 1), ('iterator', 1), ('iteratve', 1), ('itereative', 1), ('java easy to understand', 1), ('javascipt', 1), ('javascrip', 1), ('javascript solution', 1), ('js', 1), ('kotlin', 1), ('less memory than 100', 1), ('level order traversal', 1), ('level-order-traversal', 1), ('linear', 1), ('linear memory', 1), ('linear-space', 1), ('linear-time', 1), ('linkedlists', 1), ('logn', 1), ('monkey patch', 1), ('morris', 1), ('mrmagician', 1), ('native', 1), ('non-recursion', 1), ('non-recusion', 1), ('on pass', 1), ('oneliner', 1), ('operator', 1), ('override', 1), ('php solution', 1), ('platform', 1), ('pointer', 1), ('preorder-recursion', 1), ('preorder-traversal', 1), ('pythno3', 1), ('python 3 recursion', 1), ('python3.8', 1), ('readable', 1), ('recrusive', 1), ('recursion stack', 1), ('recursive approach', 1), ('recursive-dfs', 1), ('recusrive', 1), ('same-tree', 1), ('sametree', 1), ('self-explanatory', 1), ('shortcode', 1), ('simple python solution', 1), ('solution-python', 1), ('stack-based', 1), ('stack-simulation', 1), ('stackoverflow', 1), ('stl', 1), ('structurally', 1), ('submit', 1), ('super fast', 1), ('tree traversal warmup', 1), ('two-lines', 1), ('typescript', 1), ('unlock', 1), ('upvote', 1), ('video-explanation', 1), ('while-loop', 1), ('whileloop', 1), ('with comments', 1)]"
99,Recover Binary Search Tree,https://leetcode.com/problems/recover-binary-search-tree,"You are given the root of a binary search tree (BST), where exactly two nodes of the tree were swapped by mistake. Recover the tree without changing its structure.

Follow up: A solution using O(n) space is pretty straight forward. Could you devise a constant space solution?","['tree', 'depth-first-search']",Hard,2403,91,487930,209348,[],"[('cpp', 18), ('python', 18), ('java', 16), ('c++', 13), ('inorder', 12), ('morris-traversal', 12), ('constant-space', 11), ('recursive', 8), ('iterative', 7), ('python 3', 7), ('python3', 6), ('constant space', 5), ('inorder-traversal', 5), ('solution', 5), ('time-complexity', 5), ('binary-tree', 4), ('dfs', 4), ('in-order-traversal', 4), ('inorder traversal', 4), ('java-solution', 4), ('run-time-error', 4), ('space-complexity', 4), ('bst', 3), ('c', 3), ('c#', 3), ('golang', 3), ('inorder iterative', 3), ('java ac solution', 3), ('javascript', 3), ('accepted', 2), ('constant memory', 2), ('depth first search', 2), ('easy-understand', 2), ('easy-understanding', 2), ('easytounderstand', 2), ('explained', 2), ('generator', 2), ('morris traversal', 2), ('morris-inorder-traversal', 2), ('recursion', 2), ('stack', 2), ('swap', 2), ('video explanation', 2), ('works-on-my-machine', 2), ('wrong-answer', 2), ('#easysolution', 1), ('algorithms', 1), ('amazo', 1), ('beating-100-submission', 1), ('beats 100', 1), ('best-submission', 1), ('binary search tree', 1), ('bubble-sort', 1), ('c++ code', 1), ('c++ recursive solution', 1), ('chain', 1), ('commented', 1), ('compile-error', 1), ('complexity', 1), ('concept', 1), ('cpp easy', 1), ('depth-first-search', 1), ('dfs simple solution', 1), ('dfs-in-order', 1), ('doubts', 1), ('duplicate', 1), ('easy-undestand', 1), ('explained solution', 1), ('explanation of logic', 1), ('explanation with logic', 1), ('golang-solution', 1), ('help needed', 1), ('inorder recursive', 1), ('inordertraversal', 1), ('iterative solution', 1), ('iterator', 1), ('itertools', 1), ('javascript solution', 1), ('linear-time', 1), ('memory-limit-exceeded', 1), ('microsoft-india', 1), ('morris', 1), ('o1 space', 1), ('performance', 1), ('pruning', 1), ('pyhton', 1), ('ruby', 1), ('runtime-error', 1), ('simple', 1), ('simple clear c++ solution', 1), ('simple solution', 1), ('solution-sharing-cpp', 1), ('sticky', 1), ('test-case', 1), ('testcase-wrong', 1), ('tier', 1), ('time-limit-exceeded', 1), ('tle', 1), ('traversal', 1), ('tree', 1), ('two pointers', 1), ('updowndota', 1), ('uproach', 1), ('vector', 1), ('video solution', 1), ('video-explanation', 1)]"
98,Validate Binary Search Tree,https://leetcode.com/problems/validate-binary-search-tree,"Given the root of a binary tree, determine if it is a valid binary search tree (BST).

A valid BST is defined as follows:


	The left subtree of a node contains only nodes with keys less than the node's key.
	The right subtree of a node contains only nodes with keys greater than the node's key.
	Both the left and right subtrees must also be binary search trees.","['tree', 'depth-first-search', 'recursion']",Medium,5958,684,3343083,969753,"[""Binary Tree Inorder Traversal"", ""Find Mode in Binary Search Tree""]","[('java', 94), ('python', 86), ('recursion', 73), ('c++', 66), ('recursive', 64), ('cpp', 63), ('python 3', 45), ('dfs', 40), ('javascript', 40), ('inorder traversal', 34), ('binary-tree', 28), ('bst', 26), ('inorder', 20), ('binary search tree', 19), ('iterative', 18), ('python3', 18), ('wrong-answer', 18), ('solution', 17), ('inorder-traversal', 16), ('java-solution', 16), ('binary-search-tree', 14), ('c#', 12), ('cpp solution', 12), ('simple', 11), ('recursively', 10), ('test-case', 10), ('easy-understanding', 9), ('golang', 9), ('dfs simple solution', 8), ('simple solution', 8), ('accepted', 7), ('easy', 7), ('easy-understand', 7), ('easy-undestand', 7), ('java ac solution', 7), ('tree', 7), ('depth first search', 6), ('easytounderstand', 6), ('fast', 6), ('morris-traversal', 6), ('recurision', 6), ('recursive solution', 6), ('recusion', 6), ('c', 5), ('cpp easy', 5), ('explained', 5), ('javascript solution', 5), ('recursive easy', 5), ('short', 5), ('stack', 5), ('tree-traversal', 5), ('works-on-my-machine', 5), ('bfs', 4), ('c++ code', 4), ('concise', 4), ('iteration', 4), ('linear time', 4), ('php', 4), ('python2', 4), ('runtime-error', 4), ('rust', 4), ('stacks', 4), ('swift', 4), ('traversal', 4), ('binary-search', 3), ('binarysearch', 3), ('c++ solution', 3), ('constant-space', 3), ('easy to understand', 3), ('easy-to-understand', 3), ('fast and simple', 3), ('go-solution', 3), ('improve', 3), ('inorder iterative', 3), ('iterative traversal', 3), ('javascript recursive', 3), ('kotlin', 3), ('recrusive', 3), ('ruby', 3), ('run-time-error', 3), ('simplest', 3), ('testcase error', 3), ('testcase-wrong', 3), ('typescript', 3), ('validate', 3), ('#javascript', 2), ('0ms', 2), ('amazon', 2), ('answer', 2), ('beat 99', 2), ('beating-100-submission', 2), ('binary search', 2), ('bug-test-case', 2), ('clean', 2), ('clean code', 2), ('comments', 2), ('deep-first-search', 2), ('depth first traversal', 2), ('dfs-in-order', 2), ('easiest', 2), ('error', 2), ('explained solution', 2), ('generator', 2), ('go', 2), ('golang-solution', 2), ('help', 2), ('in-order-traversal', 2), ('iteratively', 2), ('max min', 2), ('morris-inorder-traversal', 2), ('non-recursive', 2), ('one line', 2), ('one-liner', 2), ('preorder traversal', 2), ('preorder-traversal', 2), ('recursive-descent', 2), ('test-cases', 2), ('video-explanation', 2), ('wrong', 2), ('#bst', 1), ('#dfs', 1), ('#java #recursion', 1), ('#recursion', 1), ('100', 1), ('10liner', 1), ('4 liner', 1), ('accepted solution', 1), ('ackim', 1), ('algorithm', 1), ('amazon sde 1', 1), ('awesome samriddhi', 1), ('backtracking', 1), ('beats 100 percent', 1), ('binary-tree-input', 1), ('bound', 1), ('breadth first search', 1), ('bst defintions', 1), ('bst-iterator', 1), ('bst-morris', 1), ('bug', 1), ('bug report', 1), ('c code', 1), ('c# solution', 1), ('c++ iterative sol', 1), ('c++11', 1), ('case', 1), ('commented', 1), ('commented code', 1), ('common question', 1), ('compare prev', 1), ('concise-solution', 1), ('confuse', 1), ('constant space', 1), ('correct-test', 1), ('cpp clear', 1), ('cpp doubt', 1), ('cpp-solution', 1), ('csharp', 1), ('depth-first-search', 1), ('detailed explanation', 1), ('dfs traversal', 1), ('dfs-bottomup', 1), ('dfs-iterative', 1), ('dfs-non-recursive', 1), ('dfs-topdown', 1), ('dfs-tree', 1), ('easy to read', 1), ('easy understanding', 1), ('easy undestanding', 1), ('epi', 1), ('explain', 1), ('explanation', 1), ('explanation of logic', 1), ('facebook', 1), ('fast-solution', 1), ('faster than 91.18', 1), ('faster than 99.14', 1), ('faster then 95', 1), ('fastest', 1), ('fastest java solution', 1), ('fastest solution', 1), ('global', 1), ('go lang', 1), ('graph theory', 1), ('graph traversal', 1), ('greedy approach', 1), ('in order', 1), ('in-order', 1), ('in-order-dfs', 1), ('inordertraversal', 1), ('input', 1), ('interview help', 1), ('intuitive', 1), ('isbst', 1), ('iterative-dfs', 1), ('iterative-inorder', 1), ('iteratve-recursive', 1), ('js', 1), ('leetcode-issue-only', 1), ('linear-time', 1), ('linear-time-space', 1), ('linkedlist', 1), ('lowerbound', 1), ('merge', 1), ('mock interview', 1), ('morris', 1), ('mrmagician', 1), ('multiple solutions', 1), ('o1', 1), ('pair', 1), ('php solution', 1), ('pre-order', 1), ('queue', 1), ('quick', 1), ('range', 1), ('readable', 1), ('recurion', 1), ('recursive lines clean', 1), ('recursive-bst', 1), ('recursive-dfs', 1), ('recursive-inorder', 1), ('recusive', 1), ('recusrive', 1), ('rescursion', 1), ('rescursive', 1), ('review', 1), ('ritik', 1), ('scala', 1), ('short code', 1), ('simple clear c++ solution', 1), ('solution-ruby', 1), ('solution-sharing-c', 1), ('sort', 1), ('sorted array', 1), ('space-non', 1), ('stack-based', 1), ('stars move the article up', 1), ('stdoptional', 1), ('straight-forward', 1), ('success', 1), ('test case', 1), ('test case issue', 1), ('traversal-constant', 1), ('tree traversal', 1), ('trees', 1), ('upperbound', 1), ('upvote', 1), ('validate-binary-search-tree', 1), ('validbst', 1), ('vector', 1), ('video explanation', 1), ('window', 1), ('with comments', 1), ('with explanation', 1), ('wrong answer', 1), ('wrong-execution-result', 1), ('xjq', 1)]"
97,Interleaving String,https://leetcode.com/problems/interleaving-string,"Given strings s1, s2, and s3, find whether s3 is formed by an interleaving of s1 and s2.

An interleaving of two strings s and t is a configuration where they are divided into non-empty substrings such that:


	s = s1 + s2 + ... + sn
	t = t1 + t2 + ... + tm
	|n - m| <= 1
	The interleaving is s1 + t1 + s2 + t2 + s3 + t3 + ... or t1 + s1 + t2 + s2 + t3 + s3 + ...


Note: a + b is the concatenation of strings a and b.","['string', 'dynamic-programming']",Medium,2029,105,553398,181783,[],"[('dynamic-programming', 37), ('python', 31), ('java', 30), ('memoization', 30), ('cpp', 28), ('dynamic programming', 28), ('c++', 20), ('recursion', 16), ('dp', 13), ('dfs', 12), ('solution', 10), ('python3', 8), ('javascript', 6), ('c#', 4), ('java-solution', 4), ('python 3', 4), ('wrong-answer', 4), ('bfs', 3), ('easy', 3), ('easy-understand', 3), ('recurision', 3), ('short code', 3), ('simple', 3), ('100 speed', 2), ('backtracking', 2), ('bottom-up', 2), ('easiest', 2), ('easy-understanding', 2), ('fast and simple', 2), ('improve', 2), ('recursive', 2), ('space-complexity', 2), ('string', 2), ('time-complexity', 2), ('top down approach', 2), ('top down dp', 2), ('top-down dp', 2), ('#dp', 1), ('#recursion', 1), ('0ms', 1), ('1-line', 1), ('100 faster runtime', 1), ('1l', 1), ('4ms', 1), ('accepted', 1), ('best-submission', 1), ('bf1l', 1), ('bottom up dp', 1), ('breadth first search', 1), ('brute force', 1), ('c++ code', 1), ('caching', 1), ('clearly', 1), ('concise', 1), ('concise-solution', 1), ('confusion', 1), ('cpp easy', 1), ('cpp solution', 1), ('dfs recursive', 1), ('dfs simple solution', 1), ('dfs solution', 1), ('dfs traversal', 1), ('dfs-bfs', 1), ('dfs-topdown', 1), ('divideconquer', 1), ('dp c++', 1), ('dp-programming', 1), ('dp-techqique', 1), ('easy-to-understand', 1), ('errror', 1), ('explained', 1), ('fastest', 1), ('hard', 1), ('hashmap', 1), ('internal', 1), ('isinterleave', 1), ('iterative', 1), ('java ac solution', 1), ('java8', 1), ('level-order-traversal', 1), ('lru', 1), ('memoisation', 1), ('memorization', 1), ('nfa', 1), ('no recursion', 1), ('pyhton3', 1), ('python2', 1), ('pythonic', 1), ('queue', 1), ('readable', 1), ('recursive solution', 1), ('recusion', 1), ('run-time-error', 1), ('rust', 1), ('search', 1), ('share-solution', 1), ('short', 1), ('short solution', 1), ('simple and readable', 1), ('simple solution', 1), ('solution-sharing-c', 1), ('solution-sharing-cpp', 1), ('super-easy', 1), ('swift', 1), ('test case', 1), ('test-case', 1), ('time-limit-exceeded', 1), ('tle', 1), ('top down', 1), ('top-down', 1), ('variation', 1), ('video', 1), ('why', 1)]"
96,Unique Binary Search Trees,https://leetcode.com/problems/unique-binary-search-trees,"Given an integer n, return the number of structurally unique BST's (binary search trees) which has exactly n nodes of unique values from 1 to n.","['dynamic-programming', 'tree']",Medium,4573,168,657514,360315,"[""Unique Binary Search Trees II""]","[('dynamic programming', 87), ('dynamic-programming', 52), ('java', 50), ('dp', 45), ('cpp', 43), ('python', 42), ('c++', 36), ('python 3', 23), ('recursion', 23), ('memoization', 20), ('catalan number', 16), ('javascript', 16), ('math', 15), ('catalan', 14), ('solution', 13), ('easy-understanding', 10), ('java-solution', 10), ('python3', 10), ('catalan numbers', 9), ('cpp solution', 9), ('easy-undestand', 8), ('binary search tree', 6), ('c++ code', 6), ('easy-understand', 6), ('easytounderstand', 6), ('explained', 6), ('golang', 6), ('bst', 5), ('easy', 5), ('recursive', 5), ('swift', 5), ('algorithms', 4), ('iterative', 4), ('rust', 4), ('binary-tree', 3), ('dp-techqique', 3), ('easy-to-understand', 3), ('go', 3), ('keep it simple', 3), ('math-solution', 3), ('time-complexity', 3), ('tree', 3), ('without dp', 3), ('0ms', 2), ('accepted', 2), ('bottom up', 2), ('c#', 2), ('c++11', 2), ('combination', 2), ('cpp easy', 2), ('dp c++', 2), ('dynamic programmin', 2), ('explanation', 2), ('fast and simple', 2), ('faster than 100.00', 2), ('golang-solution', 2), ('intuitive', 2), ('js', 2), ('maths', 2), ('python2', 2), ('recursive lines clean', 2), ('scala', 2), ('simple', 2), ('simple clear c++ solution', 2), ('simple solution', 2), ('simplest', 2), ('tabulation', 2), ('top down dp', 2), ('top-down', 2), ('top-down dp', 2), ('vector', 2), ('#96', 1), ('#dp', 1), ('#dynamic-programming', 1), ('#easy-understand', 1), ('#java', 1), ('#javascript', 1), ('0ms runtime', 1), ('100 faster', 1), ('100 faster runtime', 1), ('100 memory', 1), ('100 speed', 1), ('1line', 1), ('3 liner', 1), ('99.63 faster', 1), ('accepted solution', 1), ('asahiocean', 1), ('awesome samriddhi', 1), ('backtracking', 1), ('basics', 1), ('beats 100 percent', 1), ('best', 1), ('binary-search', 1), ('binary-search-tree', 1), ('binomial coefficient', 1), ('bottom-up', 1), ('bottom-up dp', 1), ('bottoms-up', 1), ('c', 1), ('c++ easy to understand', 1), ('c++ solution', 1), ('c++code', 1), ('combination sum', 1), ('combinatorics', 1), ('combinatories', 1), ('commented', 1), ('cpp-solution', 1), ('defaultdict', 1), ('detailed explanation', 1), ('diagrams', 1), ('dictionaries', 1), ('dictionary', 1), ('divideconquer', 1), ('dp bottom up', 1), ('dp made easy', 1), ('dp python', 1), ('dp-programming', 1), ('dynamic-allocation', 1), ('easy to understand', 1), ('easy-peasy', 1), ('efficient', 1), ('efficient solution', 1), ('explain', 1), ('explaination', 1), ('explanation with code', 1), ('fast', 1), ('fast-solution', 1), ('for loop', 1), ('formula', 1), ('formula based', 1), ('fun', 1), ('gap strategy', 1), ('go-solution', 1), ('improved', 1), ('interative', 1), ('iteration', 1), ('iterative solution', 1), ('iteratve-recursive', 1), ('kotlin', 1), ('lambda', 1), ('leetcode 96', 1), ('linear-time', 1), ('math-proof', 1), ('mcm pattern', 1), ('memo', 1), ('memoisation', 1), ('memoized', 1), ('memorization', 1), ('memory-search', 1), ('memoziation', 1), ('n2', 1), ('no-extra-space', 1), ('non-recursive', 1), ('one loop', 1), ('one-line', 1), ('pattern-based', 1), ('permutation', 1), ('readable', 1), ('recurision', 1), ('recursive dp', 1), ('recursive easy', 1), ('recursively', 1), ('rescursion', 1), ('ritik', 1), ('ruby', 1), ('sasuke214', 1), ('search', 1), ('self-explanatory', 1), ('share-solution', 1), ('solution-sharing-cpp', 1), ('straight', 1), ('straightforward', 1), ('tabulated version', 1), ('test-case', 1), ('time-limit-exceeded', 1), ('top down', 1), ('topdown', 1), ('tree generation', 1), ('trees', 1), ('unique bst', 1), ('unique-binary-search-tree', 1), ('unique-binary-search-trees-ii', 1), ('unordered map', 1), ('video', 1), ('video explaination', 1), ('video explanation', 1), ('visualization', 1), ('well-explained', 1), ('works-on-my-machine', 1), ('wrong-answer', 1)]"
95,Unique Binary Search Trees II,https://leetcode.com/problems/unique-binary-search-trees-ii,"Given an integer n, return all the structurally unique BST's (binary search trees), which has exactly n nodes of unique values from 1 to n. Return the answer in any order.","['dynamic-programming', 'tree']",Medium,3015,208,528220,228231,"[""Unique Binary Search Trees"", ""Different Ways to Add Parentheses""]","[('java', 29), ('recursion', 24), ('python', 23), ('c++', 17), ('cpp', 17), ('dynamic-programming', 15), ('dynamic programming', 10), ('solution', 10), ('javascript', 9), ('memoization', 8), ('recursive', 7), ('java-solution', 6), ('python 3', 6), ('bottom-up-algorithm', 4), ('iterative', 4), ('python3', 4), ('recursively', 4), ('wrong-answer', 4), ('binary search tree', 3), ('bst', 3), ('short', 3), ('accepted', 2), ('binary-search-tree', 2), ('binary-tree', 2), ('clean-code', 2), ('cpp solution', 2), ('divide and conquer', 2), ('dp', 2), ('easy-understand', 2), ('easy-understanding', 2), ('easytounderstand', 2), ('efficient', 2), ('golang', 2), ('memorization', 2), ('recurision', 2), ('tree', 2), ('unique-binary-search-tree', 2), ('wrong-test-cases', 2), ('0', 1), ('16ms', 1), ('backtracking', 1), ('best-submission', 1), ('bottom up', 1), ('bottom-top approach', 1), ('bottoms-up', 1), ('bottomup', 1), ('bug', 1), ('c#', 1), ('c++ recursive solution', 1), ('clean code', 1), ('compile', 1), ('compiler', 1), ('constant-space', 1), ('copy', 1), ('divideconquer', 1), ('easy understanding', 1), ('easy-to-understand', 1), ('easy-undestand', 1), ('edge-case', 1), ('edgecases', 1), ('error', 1), ('explaination', 1), ('explanation', 1), ('explanations', 1), ('fastest', 1), ('fastest java solution', 1), ('fastest solution', 1), ('hash map', 1), ('hashmap', 1), ('iteratively', 1), ('javascript solution', 1), ('js', 1), ('map', 1), ('memory-search', 1), ('n0', 1), ('one-liner', 1), ('python2', 1), ('readable code', 1), ('recursive dp', 1), ('recursive solution', 1), ('recursive-descent', 1), ('recusive', 1), ('resursive', 1), ('ruby', 1), ('run-time-error', 1), ('simple solution', 1), ('solution-sharing-cpp', 1), ('solution-sharingjava', 1), ('space-complexity', 1), ('speed', 1), ('tabulation', 1), ('test-case', 1), ('testcase-wrong', 1), ('time-complexity', 1), ('topdown', 1), ('unorderedmap', 1), ('visualization', 1), ('well-commented', 1)]"
94,Binary Tree Inorder Traversal,https://leetcode.com/problems/binary-tree-inorder-traversal,"Given the root of a binary tree, return the inorder traversal of its nodes' values.","['hash-table', 'stack', 'tree']",Medium,4602,209,1456653,968313,"[""Validate Binary Search Tree"", ""Binary Tree Preorder Traversal"", ""Binary Tree Postorder Traversal"", ""Binary Search Tree Iterator"", ""Kth Smallest Element in a BST"", ""Closest Binary Search Tree Value II"", ""Inorder Successor in BST"", ""Convert Binary Search Tree to Sorted Doubly Linked List"", ""Minimum Distance Between BST Nodes""]","[('java', 85), ('iterative', 69), ('python', 67), ('c++', 61), ('cpp', 60), ('recursive', 59), ('stack', 45), ('recursion', 40), ('python 3', 39), ('javascript', 26), ('python3', 23), ('inorder', 17), ('binary-tree', 15), ('inorder traversal', 14), ('java-solution', 14), ('stacks', 14), ('morris-traversal', 13), ('inorder-traversal', 12), ('solution', 12), ('c#', 11), ('cpp solution', 11), ('dfs', 11), ('inorder iterative', 11), ('tree', 11), ('easy-understanding', 10), ('golang', 10), ('easy', 9), ('simple', 9), ('swift', 9), ('traversal', 9), ('recurision', 8), ('easy-undestand', 7), ('readable', 7), ('go-solution', 6), ('iteration', 6), ('stack-based', 6), ('tree traversal', 6), ('tree-traversal', 6), ('0ms', 5), ('easy-understand', 5), ('iteratively', 5), ('recusion', 5), ('ruby', 5), ('simple solution', 5), ('wrong-answer', 5), ('100 faster', 4), ('accepted', 4), ('clean code', 4), ('constant space', 4), ('easiest', 4), ('easytounderstand', 4), ('iteratve-recursive', 4), ('python2', 4), ('runtime-error', 4), ('scala', 4), ('trees', 4), ('best', 3), ('binary tree', 3), ('bst', 3), ('fast and simple', 3), ('go', 3), ('golang-solution', 3), ('in-order-traversal', 3), ('inordertraversal', 3), ('iterative traversal', 3), ('iterative-inorder', 3), ('java ac solution', 3), ('lnr', 3), ('python3.8', 3), ('recursively', 3), ('time-limit-exceeded', 3), ('typescript', 3), ('video explanation', 3), ('#python', 2), ('#recursive', 2), ('100 space', 2), ('100 speed', 2), ('amazon', 2), ('beats 100', 2), ('bfs', 2), ('binary-search', 2), ('cpp easy', 2), ('cpp-solution', 2), ('csharp', 2), ('dfs-in-order', 2), ('easy solution', 2), ('easy to understand', 2), ('easy understanding', 2), ('easy-to-understand', 2), ('fast', 2), ('linear time', 2), ('morris', 2), ('morris traversal', 2), ('morris-inorder-traversal', 2), ('recursive easy', 2), ('recusive', 2), ('simpe', 2), ('traverse-a-tree', 2), ('vector', 2), ('youtube', 2), ('#bst', 1), ('#c', 1), ('#codeboy', 1), ('#easy-understanding', 1), ('#easysolution', 1), ('#inorder traversal', 1), ('#inorder-traversal', 1), ('#java', 1), ('#python 3', 1), ('#recursion', 1), ('0 ms', 1), ('100', 1), ('100 faster runtime', 1), ('100 memory', 1), ('2 solutions', 1), ('3 liner', 1), ('algorithms', 1), ('algosexplained', 1), ('arraylist', 1), ('awesome', 1), ('beginner', 1), ('beginner friendly', 1), ('binary', 1), ('binary search tree', 1), ('binary tree traversal', 1), ('binary-trees', 1), ('binarysearch', 1), ('bst-morris', 1), ('c', 1), ('c code', 1), ('c++ code', 1), ('c++ solution', 1), ('c++-easy', 1), ('c++11', 1), ('c++14', 1), ('check', 1), ('chinese', 1), ('clean', 1), ('clean-code', 1), ('comments-added', 1), ('confused', 1), ('constant-space', 1), ('cpp clear', 1), ('deep-first-search', 1), ('depth first search', 1), ('dynamic programming', 1), ('easy explanation', 1), ('easy to underatnd', 1), ('easy-solution', 1), ('es6', 1), ('explaination', 1), ('explained', 1), ('explained solution', 1), ('explanations', 1), ('faster', 1), ('faster than 100', 1), ('fastest', 1), ('fastest solution', 1), ('functional programming', 1), ('functional-programming', 1), ('generator', 1), ('go lang', 1), ('go-lang', 1), ('golfing', 1), ('hashmap', 1), ('hashtable', 1), ('immutable', 1), ('improve', 1), ('in-order', 1), ('inordertraverse', 1), ('inroder', 1), ('intuitive', 1), ('iterative-backtracking', 1), ('izaac', 1), ('java solution', 1), ('javascriptes6', 1), ('kotlin', 1), ('kotlinvim', 1), ('lambda', 1), ('levelordertraversal', 1), ('linear memory', 1), ('linear-space', 1), ('linear-time', 1), ('lists', 1), ('meiyaowen', 1), ('method', 1), ('microsoft', 1), ('microsoft-india', 1), ('mle', 1), ('mrmagician', 1), ('no brainer', 1), ('non-recursive', 1), ('non-stack', 1), ('nonrecursive', 1), ('nostack', 1), ('o1 space', 1), ('one-loop', 1), ('php', 1), ('post-order', 1), ('postorder', 1), ('postorder traversal', 1), ('pre-order', 1), ('preorder', 1), ('preorder traversal', 1), ('python 2', 1), ('queue', 1), ('rajat', 1), ('reccursion', 1), ('recrusion', 1), ('recrusive', 1), ('recurrance', 1), ('recursive solution', 1), ('recursive-solution', 1), ('recusrive', 1), ('ritik', 1), ('run-time-error', 1), ('runtimeerror', 1), ('rust', 1), ('same', 1), ('samriddhi', 1), ('short', 1), ('short code', 1), ('simple-solution', 1), ('simplest', 1), ('single indicator', 1), ('single stack', 1), ('solution c++', 1), ('solution-csharp', 1), ('solution-javascript', 1), ('space-complexity', 1), ('stack-implementation', 1), ('static', 1), ('template', 1), ('testcase-wrong', 1), ('three-different-solutions', 1), ('time-limit-exceeded-java', 1), ('two stacks', 1), ('updowndota', 1), ('video', 1), ('video-explanation', 1), ('well-commented', 1), ('with', 1), ('without recursion', 1), ('without stack', 1), ('without-stack', 1), ('yield return', 1)]"
93,Restore IP Addresses,https://leetcode.com/problems/restore-ip-addresses,"Given a string s containing only digits, return all possible valid IP addresses that can be obtained from s. You can return them in any order.

A valid IP address consists of exactly four integers, each integer is between 0 and 255, separated by single dots and cannot have leading zeros. For example, ""0.1.2.201"" and ""192.168.1.1"" are valid IP addresses and ""0.011.255.245"", ""192.168.1.312"" and ""192.168@1.1"" are invalid IP addresses.","['string', 'backtracking']",Medium,1751,561,614180,233607,"[""IP to CIDR""]","[('backtracking', 87), ('java', 50), ('python', 41), ('cpp', 23), ('dfs', 23), ('python 3', 22), ('easy-understand', 20), ('solution', 15), ('c++', 14), ('javascript', 11), ('recursion', 10), ('simple', 8), ('python3', 7), ('c#', 6), ('easy-understanding', 6), ('java-solution', 6), ('backtrack', 5), ('back tracking', 4), ('cpp solution', 4), ('scala', 4), ('accepted', 3), ('dynamic programming', 3), ('dynamic-programming', 3), ('golang', 3), ('recursive', 3), ('string', 3), ('commented', 2), ('easy', 2), ('easy-undestand', 2), ('easytounderstand', 2), ('explanation', 2), ('iterative', 2), ('kotlin', 2), ('pruning', 2), ('recusion', 2), ('simple solution', 2), ('swift', 2), ('test-case', 2), ('#easy-understand', 1), ('0ms', 1), ('0ms runtime', 1), ('2ms', 1), ('algorithms', 1), ('amazon', 1), ('backstrack', 1), ('backtrace', 1), ('backtracing', 1), ('beating-100-submissions', 1), ('beats', 1), ('branch-and-bound', 1), ('brute force', 1), ('c', 1), ('c++ 0ms', 1), ('c++ code', 1), ('clarification', 1), ('clean', 1), ('clean clode', 1), ('clean code', 1), ('clean-code', 1), ('comments', 1), ('comments-added', 1), ('concise-solution', 1), ('constant-space', 1), ('cpp-solution', 1), ('depth first search', 1), ('dfs-backtracking', 1), ('divide and conquer', 1), ('dp', 1), ('easy undestanding', 1), ('easy-to-understand', 1), ('efficient', 1), ('examples', 1), ('explaination', 1), ('fast', 1), ('faster', 1), ('faster than 100', 1), ('functional programming', 1), ('go-solution', 1), ('illustrated', 1), ('iteration', 1), ('java ac solution', 1), ('java simple', 1), ('java solution', 1), ('java-simple-clean-solution', 1), ('javascrip', 1), ('kotlinvim', 1), ('memorization', 1), ('object-oriented', 1), ('php', 1), ('php solution', 1), ('preceding', 1), ('pythonpython3', 1), ('question', 1), ('readable', 1), ('recursively', 1), ('recusive', 1), ('restoreipaddresses', 1), ('run-time-error', 1), ('short c++ code', 1), ('short code', 1), ('simpe', 1), ('simplest', 1), ('solution-python', 1), ('solution-sharing-cpp', 1), ('solution-sharing-java', 1), ('state', 1), ('string-operation', 1), ('stringbuilder', 1), ('time-complexity', 1), ('tle', 1), ('well-explained', 1), ('wrong-answer', 1), ('zeros', 1)]"
92,Reverse Linked List II,https://leetcode.com/problems/reverse-linked-list-ii,"Given the head of a singly linked list and two integers left and right where left <= right, reverse the nodes of the list from position left to position right, and return the reversed list.",['linked-list'],Medium,3582,188,848526,347210,"[""Reverse Linked List""]","[('java', 86), ('cpp', 51), ('linked-list', 49), ('c++', 39), ('python', 36), ('iterative', 28), ('solution', 27), ('java-solution', 19), ('javascript', 18), ('one-pass', 18), ('python 3', 16), ('easy-understanding', 11), ('linked list', 11), ('python3', 11), ('linkedlists', 9), ('c#', 8), ('cpp solution', 8), ('golang', 7), ('reverse linked list', 7), ('time-limit-exceeded', 7), ('constant-space', 6), ('improve', 6), ('in-place', 6), ('recursive', 6), ('reverse list', 6), ('single pass', 6), ('0ms', 5), ('c', 5), ('c++ code', 5), ('iteration', 5), ('recursion', 5), ('accepted', 4), ('easy-understand', 4), ('java ac solution', 4), ('javascript solution', 4), ('linkedlist', 4), ('stack', 4), ('wrong-answer', 4), ('commented', 3), ('constant space', 3), ('csharp', 3), ('easy-to-understand', 3), ('easy-undestand', 3), ('fast and simple', 3), ('golang-solution', 3), ('iteratively', 3), ('linear-time', 3), ('memory-limit-exceeded', 3), ('reverse', 3), ('reverse-linked-list-ii', 3), ('reverse-list', 3), ('simple', 3), ('solution-sharing-cpp', 3), ('0ms runtime', 2), ('dummy-head', 2), ('easy', 2), ('easy to understand', 2), ('explained', 2), ('fast-solution', 2), ('fastest', 2), ('iterate', 2), ('iterative solution', 2), ('js', 2), ('linked list iteration', 2), ('linklist', 2), ('one pass solution', 2), ('pointer', 2), ('pointers', 2), ('recursive easy', 2), ('rust', 2), ('short', 2), ('swift', 2), ('time-complexity', 2), ('#c', 1), ('#data structure', 1), ('#java', 1), ('#linkedlist', 1), ('0ms-solution', 1), ('100 beat', 1), ('100 faster', 1), ('100 faster runtime', 1), ('100 memory', 1), ('100 space', 1), ('100 speed', 1), ('2 pointer approach', 1), ('accepted solution', 1), ('algorithms', 1), ('amazon', 1), ('beats 100', 1), ('best-solution', 1), ('best-submission', 1), ('c code', 1), ('c++ easy to understand', 1), ('c99', 1), ('clean code', 1), ('clean-code', 1), ('comments-added', 1), ('constant auxiliary space', 1), ('copy', 1), ('cpp easy', 1), ('cpp-solution', 1), ('deque', 1), ('detailed explanation', 1), ('doubly-linked-list', 1), ('drawing', 1), ('easiest', 1), ('easytoread', 1), ('easytounderstand', 1), ('eckotan', 1), ('efficient', 1), ('explaination', 1), ('explained solution', 1), ('explanation', 1), ('explanation of logic', 1), ('explanation with code', 1), ('facebook', 1), ('faster than 100.00', 1), ('fasterthan100', 1), ('go', 1), ('go-solution', 1), ('help', 1), ('help needed', 1), ('inplace', 1), ('intuitive', 1), ('iterative way', 1), ('javascrip', 1), ('javascript recursive', 1), ('kotlin', 1), ('kotlinvim', 1), ('linear time', 1), ('linked lists', 1), ('linked-lists', 1), ('memory', 1), ('microsoft', 1), ('modified', 1), ('nodes', 1), ('one pass', 1), ('one-loop', 1), ('partition', 1), ('php', 1), ('php solution', 1), ('pointer-to-pointer', 1), ('python2', 1), ('pythonpython3', 1), ('readable', 1), ('recurision', 1), ('recursively', 1), ('reference', 1), ('reversed', 1), ('reverselist', 1), ('run-time-error', 1), ('runtime-error', 1), ('safe', 1), ('sandeepkumar', 1), ('simpe', 1), ('simple clear c++ solution', 1), ('simple solution', 1), ('solution-explaining', 1), ('solution-share', 1), ('space', 1), ('space-complexity', 1), ('space-efficient', 1), ('speed', 1), ('stack-based', 1), ('stack-over-flow', 1), ('stacks', 1), ('string concatenation', 1), ('stupid', 1), ('swapping', 1), ('test case issue', 1), ('testcase-wrong', 1), ('time-limit-exceeded-java', 1), ('tle', 1), ('tree', 1), ('vector', 1), ('video explaination', 1), ('well-commented', 1), ('while-loop', 1), ('wrong answer', 1)]"
91,Decode Ways,https://leetcode.com/problems/decode-ways,"A message containing letters from A-Z can be encoded into numbers using the following mapping:


'A' -> ""1""
'B' -> ""2""
...
'Z' -> ""26""


To decode an encoded message, all the digits must be grouped then mapped back into letters using the reverse of the mapping above (there may be multiple ways). For example, ""11106"" can be mapped into:


	""AAJF"" with the grouping (1 1 10 6)
	""KJF"" with the grouping (11 10 6)


Note that the grouping (1 11 06) is invalid because ""06"" cannot be mapped into 'F' since ""6"" is different from ""06"".

Given a string s containing only digits, return the number of ways to decode it.

The answer is guaranteed to fit in a 32-bit integer.","['string', 'dynamic-programming']",Medium,4302,3443,2065358,558730,"[""Decode Ways II""]","[('dynamic programming', 129), ('java', 80), ('dynamic-programming', 70), ('dp', 68), ('c++', 59), ('python', 58), ('cpp', 57), ('memoization', 36), ('python 3', 34), ('javascript', 25), ('recursion', 19), ('java-solution', 16), ('solution', 14), ('golang', 10), ('python3', 10), ('easy-understand', 9), ('easy-understanding', 9), ('accepted', 8), ('simple', 7), ('cpp solution', 6), ('dfs', 6), ('easytounderstand', 6), ('recursive', 6), ('ruby', 6), ('c#', 5), ('constant space', 5), ('easy', 5), ('golang-solution', 5), ('linear time', 5), ('recurision', 5), ('tabulation', 5), ('c', 4), ('explained', 4), ('wrong-answer', 4), ('0ms', 3), ('100 faster', 3), ('100 speed', 3), ('backtracking', 3), ('c++ code', 3), ('clean code', 3), ('constant-space', 3), ('dp java', 3), ('dp-techqique', 3), ('easy to understand', 3), ('easy-to-understand', 3), ('easy-undestand', 3), ('facebook', 3), ('fast', 3), ('fast-solution', 3), ('fibonacci sequence', 3), ('go', 3), ('incorrect-test-case', 3), ('java ac solution', 3), ('number-of-ways', 3), ('question-not-clear', 3), ('recursive dp', 3), ('rust', 3), ('simple solution', 3), ('swift', 3), ('top down dp', 3), ('#dynamic-programming', 2), ('bottom up', 2), ('commented', 2), ('constant memory', 2), ('decode ways', 2), ('easiest', 2), ('encoding', 2), ('explanation of logic', 2), ('explanation with code', 2), ('fast and simple', 2), ('fibonacci', 2), ('go-solution', 2), ('improve', 2), ('iterative', 2), ('itereative', 2), ('java solution', 2), ('javascript solution', 2), ('kotlin', 2), ('memoziation', 2), ('permutations', 2), ('php', 2), ('python2', 2), ('readable', 2), ('recursion memoization', 2), ('recursive solution', 2), ('recusion', 2), ('space o1', 2), ('string', 2), ('test-case', 2), ('testcase-wrong', 2), ('time-limit-exceeded', 2), ('top down', 2), ('top-down dp', 2), ('typescript', 2), ('#dp', 1), ('#easy-understand', 1), ('#java', 1), ('#javascript', 1), ('100 beat', 1), ('100 faster runtime', 1), ('1ms', 1), ('4ms', 1), ('acceptd', 1), ('algorithms', 1), ('amazon', 1), ('amazon interview', 1), ('array', 1), ('awesome samriddhi', 1), ('beat 100', 1), ('beats 100', 1), ('beginner', 1), ('bottom up dp', 1), ('bottom-up-algorithm', 1), ('bottoms-up', 1), ('bugs', 1), ('c code', 1), ('c++ solution', 1), ('c++11', 1), ('circular-array', 1), ('clean', 1), ('clear', 1), ('clear explanation', 1), ('combinatorics', 1), ('combinators', 1), ('comments', 1), ('comments-added', 1), ('commetend', 1), ('concise-solution', 1), ('counters', 1), ('cpp easy', 1), ('cpp with explanation', 1), ('cpp-solution', 1), ('csharp', 1), ('decode-ways', 1), ('decodestring', 1), ('decodeways', 1), ('decoding', 1), ('detailed explanation', 1), ('dfs-topdown', 1), ('different solutions', 1), ('different-oj-local', 1), ('discrete math', 1), ('divid and conquer', 1), ('divideconquer', 1), ('dp top down', 1), ('dynamic', 1), ('dynamic programmin', 1), ('dynaminc programming', 1), ('dynammic programming', 1), ('easy understand', 1), ('easy-solition', 1), ('easysolution', 1), ('edge-case', 1), ('edgecases', 1), ('efficient solution', 1), ('error', 1), ('explaination', 1), ('explained solution', 1), ('explanation', 1), ('explanation with logic', 1), ('explanations', 1), ('extended-question', 1), ('facebook interview', 1), ('fastest', 1), ('fastest solution', 1), ('fibbonacci', 1), ('go lang', 1), ('illustrated', 1), ('illustration', 1), ('interview-friendly', 1), ('iterative approch', 1), ('iteratve-recursive', 1), ('javascrip', 1), ('javascript recursive', 1), ('js', 1), ('kotlinvim', 1), ('lambda', 1), ('linear', 1), ('linear memory', 1), ('linear-time', 1), ('math', 1), ('math solution', 1), ('memo', 1), ('memoisation', 1), ('memoized', 1), ('memorisation', 1), ('memorization', 1), ('no-extra-space', 1), ('nodejs', 1), ('not-a-clear-question', 1), ('o1 memory', 1), ('o1space', 1), ('ojerror', 1), ('one-liner', 1), ('optimal', 1), ('perl', 1), ('permutation', 1), ('php solution', 1), ('python3.8', 1), ('pythonpython3', 1), ('rajat', 1), ('recursively', 1), ('regex', 1), ('regular-expression', 1), ('ritik', 1), ('run-time-error', 1), ('scala', 1), ('sequential thought', 1), ('short', 1), ('simpe', 1), ('simple approach', 1), ('solution by python', 1), ('solution-explaining', 1), ('solution-sharing-cpp', 1), ('solution-sharing-java', 1), ('solution-sharing-python', 1), ('space-optimized', 1), ('stl', 1), ('string-operation', 1), ('sweetandsour', 1), ('thinking process', 1), ('time-complexity', 1), ('two pointer approach', 1), ('two pointer fast', 1), ('two pointer technique', 1), ('two-pointers', 1), ('video-explanation', 1), ('visual', 1), ('well-commented', 1), ('well-explained', 1), ('whiteboard', 1), ('works-on-my-machine', 1), ('wrong-execution-result', 1)]"
90,Subsets II,https://leetcode.com/problems/subsets-ii,"Given an integer array nums that may contain duplicates, return all possible subsets (the power set).

The solution set must not contain duplicate subsets. Return the solution in any order.","['array', 'backtracking']",Medium,2458,107,690365,340354,"[""Subsets""]","[('backtracking', 72), ('java', 62), ('python', 50), ('cpp', 34), ('recursion', 24), ('c++', 23), ('dfs', 22), ('python 3', 22), ('javascript', 19), ('solution', 16), ('iterative', 14), ('java-solution', 12), ('easy-understand', 10), ('easy-understanding', 9), ('easy-undestand', 8), ('python3', 8), ('subsets-ii', 8), ('simple', 7), ('cpp solution', 6), ('easy', 6), ('easy-to-understand', 6), ('recursive', 6), ('c#', 5), ('swift', 5), ('backtrack', 4), ('golang', 4), ('subsets', 4), ('bit manipulation', 3), ('c++ solution', 3), ('dfs simple solution', 3), ('fast', 3), ('fast and simple', 3), ('hashmap', 3), ('iterative solution', 3), ('java ac solution', 3), ('scala', 3), ('sets', 3), ('backtracking template', 2), ('bfs', 2), ('bitmanipulation', 2), ('bitmask', 2), ('c++ code', 2), ('combination', 2), ('dynamic-programming', 2), ('fast-solution', 2), ('functional programming', 2), ('hashset', 2), ('improve', 2), ('javascript solution', 2), ('kotlin', 2), ('recusion', 2), ('ruby', 2), ('set', 2), ('short', 2), ('sorted array', 2), ('subset', 2), ('#c++', 1), ('#cpp', 1), ('#easysolution', 1), ('#fasterthan100percent', 1), ('#subset', 1), ('0ms', 1), ('100 space', 1), ('100 speed', 1), ('accepted', 1), ('back tracking', 1), ('back-tracking', 1), ('backtacking', 1), ('backtrace', 1), ('backtracing', 1), ('backtracking dfs', 1), ('beginner', 1), ('best-submission', 1), ('bit', 1), ('bit-manipulation', 1), ('bitmasking', 1), ('bitmasks', 1), ('breadth-first-search', 1), ('c++ recursive solution', 1), ('c++ summary of related problem', 1), ('cascading', 1), ('clean code', 1), ('combinatorics', 1), ('commented', 1), ('comments', 1), ('compilation', 1), ('constant memory', 1), ('dfs recursive', 1), ('dictonary', 1), ('easytounderstand', 1), ('efficient', 1), ('efficient solution', 1), ('explaination', 1), ('explained', 1), ('explanation', 1), ('explanation of logic', 1), ('explanation with code', 1), ('fastest', 1), ('feedback', 1), ('for comprehension', 1), ('for-comprehension', 1), ('for-loop', 1), ('functional', 1), ('generalizable', 1), ('generator-function', 1), ('go-solution', 1), ('golang-solution', 1), ('hash table', 1), ('illustration', 1), ('intuitive', 1), ('issue', 1), ('iteration', 1), ('iterative-solution', 1), ('linear-time', 1), ('linkedlists', 1), ('loops', 1), ('map', 1), ('math-solution', 1), ('non-recursive', 1), ('novel approach', 1), ('one liner', 1), ('one-liner', 1), ('permutations', 1), ('php', 1), ('php solution', 1), ('powerset', 1), ('purpose-of-question', 1), ('pythonic', 1), ('queue', 1), ('readable', 1), ('recurision', 1), ('recursive approach', 1), ('recursive dfs', 1), ('recursive-dfs', 1), ('run-time-error', 1), ('simple clear c++ solution', 1), ('simple explanation', 1), ('simple solution', 1), ('slow-performance', 1), ('solition-sharing', 1), ('solution c++', 1), ('sort-function', 1), ('sorting', 1), ('stack', 1), ('straight-forward', 1), ('sweetandsour', 1), ('swiftsolution', 1), ('test-case-bug', 1), ('test-case-validation', 1), ('time-limit-exceeded', 1), ('tuple', 1), ('unique', 1), ('video explaination', 1), ('video-explanation', 1), ('xjq', 1)]"
89,Gray Code,https://leetcode.com/problems/gray-code,"The gray code is a binary numeral system where two successive values differ in only one bit.

Given an integer n representing the total number of bits in the code, return any sequence of gray code.

A gray code sequence must begin with 0.",['backtracking'],Medium,834,1803,354722,180271,"[""1-bit and 2-bit Characters""]","[('java', 37), ('python', 34), ('cpp', 30), ('backtracking', 19), ('solution', 17), ('c++', 13), ('easy-understand', 9), ('python 3', 8), ('javascript', 7), ('recursion', 7), ('bit manipulation', 6), ('bit-manipulation', 6), ('golang', 5), ('python3', 5), ('accepted', 4), ('cpp solution', 4), ('dfs', 4), ('easy-undestand', 4), ('iterative', 4), ('backtrack', 3), ('c#', 3), ('c++ code', 3), ('easiest', 3), ('java-solution', 3), ('recursive', 3), ('short', 3), ('simple', 3), ('100 speed', 2), ('best-submission', 2), ('bitset', 2), ('easy', 2), ('explanation', 2), ('run-time-error', 2), ('scala', 2), ('simple solution', 2), ('testcase-wrong', 2), ('well-explained', 2), ('1-liner', 1), ('100', 1), ('100 memory', 1), ('1line', 1), ('4ms', 1), ('accepted solution', 1), ('back-tracking', 1), ('binary number', 1), ('binary tree', 1), ('binary-tree', 1), ('bit', 1), ('bitwise operators', 1), ('c', 1), ('clarification', 1), ('comments', 1), ('complexity', 1), ('correct', 1), ('cpp easy', 1), ('csharp', 1), ('dfs-iterative', 1), ('dfs-non-recursive', 1), ('dynamic programming', 1), ('dynamic-programming', 1), ('easy-to-understand', 1), ('easysolution', 1), ('elegant', 1), ('explain', 1), ('explaination', 1), ('explained', 1), ('ez', 1), ('fast', 1), ('fix-test', 1), ('functional', 1), ('functional-programming', 1), ('go', 1), ('go-solution', 1), ('golang-solution', 1), ('gray code', 1), ('gray-code', 1), ('graycode', 1), ('greedy', 1), ('greedy algorithm', 1), ('help', 1), ('in detail', 1), ('intution', 1), ('iteration', 1), ('iteratively', 1), ('iteratve', 1), ('java ac solution', 1), ('javascriptes6', 1), ('js', 1), ('kotllin', 1), ('last bit not zero', 1), ('limit-exceeded', 1), ('linq', 1), ('list-comprehension', 1), ('memory', 1), ('misleading-problem', 1), ('no-backtracking', 1), ('no-bitwise computation', 1), ('one line solution', 1), ('one-loop', 1), ('oneliner', 1), ('php', 1), ('php solution', 1), ('prepending', 1), ('proof', 1), ('purpose-of-question', 1), ('python2', 1), ('question', 1), ('recurision', 1), ('recursive easy', 1), ('recursive graycode', 1), ('recursive lines clean', 1), ('recursive solution', 1), ('rookie', 1), ('rust', 1), ('share-solution', 1), ('slow-performance', 1), ('string manipulation', 1), ('time-complexity', 1), ('time-limit-exceeded', 1), ('visual', 1), ('wrong', 1), ('wrong judgement', 1), ('wrong-answer', 1), ('wrong-test-cases', 1), ('xjq', 1), ('xor', 1)]"
88,Merge Sorted Array,https://leetcode.com/problems/merge-sorted-array,"Given two sorted integer arrays nums1 and nums2, merge nums2 into nums1 as one sorted array.

The number of elements initialized in nums1 and nums2 are m and n respectively. You may assume that nums1 has a size equal to m + n such that it has enough space to hold additional elements from nums2.","['array', 'two-pointers']",Easy,3706,5279,2104267,861839,"[""Merge Two Sorted Lists"", ""Squares of a Sorted Array"", ""Interval List Intersections""]","[('java', 141), ('python', 121), ('c++', 81), ('cpp', 72), ('python 3', 58), ('javascript', 53), ('java-solution', 41), ('python3', 37), ('two-pointers', 27), ('solution', 24), ('golang', 20), ('easy', 18), ('easy-understanding', 17), ('merge sorted array', 16), ('wrong-answer', 16), ('0ms', 14), ('two pointers', 14), ('simple', 13), ('array', 12), ('c#', 12), ('merge', 12), ('simple solution', 11), ('100 speed', 10), ('cpp solution', 10), ('merge-sort', 10), ('short', 10), ('swift', 10), ('c', 9), ('easy-understand', 9), ('easy-undestand', 9), ('golang-solution', 9), ('arrays', 8), ('in-place', 8), ('javascript solution', 7), ('ruby', 7), ('sort', 7), ('c++ code', 6), ('error', 6), ('explained', 6), ('js', 6), ('kotlin', 6), ('mergesort', 6), ('python2', 6), ('constant space', 5), ('cpp easy', 5), ('fast and simple', 5), ('fast-solution', 5), ('go', 5), ('go-solution', 5), ('linear time', 5), ('merge sort', 5), ('merge-sorted-array', 5), ('oneline', 5), ('vector', 5), ('100 faster', 4), ('2 pointers', 4), ('array-sort', 4), ('binarysearch', 4), ('clean code', 4), ('easy-to-understand', 4), ('easytounderstand', 4), ('fastest', 4), ('inplace', 4), ('java ac solution', 4), ('merge-two-sorted-lists', 4), ('optimal', 4), ('sorted array', 4), ('test-case', 4), ('two-pointer', 4), ('100 faster runtime', 3), ('bug', 3), ('c++ solution', 3), ('commented', 3), ('comments', 3), ('constant-space', 3), ('easiest', 3), ('fast', 3), ('heapq', 3), ('merge sorted', 3), ('php', 3), ('pointers', 3), ('pythonpython3', 3), ('self-explanatory', 3), ('sorting', 3), ('stl', 3), ('testcase-wrong', 3), ('100 memory', 2), ('100 space', 2), ('accepted', 2), ('beginner friendly', 2), ('binary-search', 2), ('bubble-sort', 2), ('bug report', 2), ('c code', 2), ('clean', 2), ('csharp', 2), ('dumb', 2), ('faster', 2), ('improve', 2), ('iterative', 2), ('java-8', 2), ('kotlin-solution', 2), ('oneliner', 2), ('quick sort', 2), ('quicksort', 2), ('readable', 2), ('rust', 2), ('scala', 2), ('short c++ code', 2), ('space-compexity', 2), ('time-limit-exceeded', 2), ('two pointer', 2), ('two pointer approach', 2), ('while-loop', 2), ('#easy-understand', 1), ('#java', 1), ('#java #easy-understand', 1), ('#javascript', 1), ('#mergesort', 1), ('#python3', 1), ('#sort', 1), ('100', 1), ('2 line', 1), ('2 pointer', 1), ('2 pointer approach', 1), ('2-pointer approach', 1), ('2lines', 1), ('2pointer', 1), ('2pointers', 1), ('3 lines python', 1), ('3 pointer', 1), ('7 lines', 1), ('88', 1), ('accepted solution', 1), ('algorithms', 1), ('amazon phone interview', 1), ('answer', 1), ('approach', 1), ('array sort', 1), ('basics', 1), ('beats', 1), ('beats 100', 1), ('best', 1), ('best-submission', 1), ('bitonic', 1), ('brute-force', 1), ('c++11', 1), ('clarification', 1), ('clean solution', 1), ('clean-efficient-code', 1), ('cleanest', 1), ('clear c++ code', 1), ('clearly', 1), ('code golf', 1), ('comment', 1), ('concise', 1), ('cpp soltuion', 1), ('cpp-solution', 1), ('different-oj-local', 1), ('divide and conquer', 1), ('easy code', 1), ('easy solution', 1), ('easy to understand', 1), ('easy undestanding', 1), ('easy-implementation', 1), ('easy-understsand', 1), ('efficient', 1), ('elegent', 1), ('es6', 1), ('expalanation', 1), ('explaination', 1), ('explained solution', 1), ('explanation', 1), ('explanation of logic', 1), ('explanation with logic', 1), ('explanatory comments', 1), ('facebook-interview', 1), ('faster than 100', 1), ('faster than 100.00', 1), ('faster than 75', 1), ('faster than 87', 1), ('fastest c++ solution', 1), ('fastest java slution', 1), ('flattenthecurve', 1), ('fold', 1), ('foldleft', 1), ('golf', 1), ('good variable names', 1), ('google interview', 1), ('hashmap java', 1), ('help', 1), ('help needed', 1), ('higher order functions', 1), ('hot', 1), ('image', 1), ('in-place operation', 1), ('incorrect-test-case', 1), ('indexoutofbound', 1), ('inplacemerge', 1), ('interview', 1), ('intuitive', 1), ('iteration', 1), ('java 100', 1), ('java on', 1), ('java solution', 1), ('java-fillfromlast', 1), ('javascrip', 1), ('javascript-solution', 1), ('javascriptes6', 1), ('js javascript', 1), ('kotlinvim', 1), ('leetcode', 1), ('leetcode-issue-only', 1), ('library', 1), ('linear', 1), ('linear-time', 1), ('loops', 1), ('maxtomin', 1), ('meiyaowen', 1), ('merge sorted linkedlist', 1), ('merge two sorted arrays', 1), ('merge-two-sorted-arrays', 1), ('mergesortedarrays', 1), ('mergetwolists', 1), ('min heap', 1), ('min-heap', 1), ('multiple pointer', 1), ('multiset', 1), ('native', 1), ('o1 space', 1), ('on', 1), ('one line', 1), ('one pass', 1), ('one-liner', 1), ('one-loop', 1), ('one-pass', 1), ('optimized', 1), ('php solution', 1), ('pointer', 1), ('pointer approach', 1), ('pointer operation', 1), ('priority queue', 1), ('python 2', 1), ('pythonic', 1), ('question need help', 1), ('question-not-clear', 1), ('recursion', 1), ('recursive', 1), ('recusion', 1), ('right-shift', 1), ('run-time-error', 1), ('rust vec', 1), ('saravana', 1), ('sequence', 1), ('series', 1), ('share-solution', 1), ('short code', 1), ('shortest solution', 1), ('simpe', 1), ('simple and elegant', 1), ('simple clear c++ solution', 1), ('simple-solution', 1), ('single-loop', 1), ('slicing', 1), ('smallest', 1), ('socialdistancing', 1), ('solution by python', 1), ('solution-cpp', 1), ('solution-python', 1), ('solution-sharing-cpp', 1), ('solved', 1), ('something', 1), ('sort-function', 1), ('sorted', 1), ('sorted-array', 1), ('splice', 1), ('stars move the article up', 1), ('stayhome', 1), ('stl vector', 1), ('straight-forward', 1), ('structured code', 1), ('suggestion', 1), ('swap', 1), ('swift5', 1), ('swiftsolution', 1), ('test case', 1), ('test-case-bug', 1), ('thought process', 1), ('three-pointers', 1), ('time-complexity', 1), ('two pointer technique', 1), ('two-lines', 1), ('twopointer', 1), ('typescript', 1), ('understandable', 1), ('very simple', 1), ('video-explaination', 1), ('video-explanation', 1), ('visual aid', 1), ('works-on-my-machine', 1), ('wrong', 1)]"
87,Scramble String,https://leetcode.com/problems/scramble-string,"We can scramble a string s to get a string t using the following algorithm:


	If the length of the string is 1, stop.
	If the length of the string is > 1, do the following:
	
		Split the string into two non-empty substrings at a random index, i.e., if the string is s, divide it to x and y where s = x + y.
		Randomly decide to swap the two substrings or to keep them in the same order. i.e., after this step, s may become s = x + y or s = y + x.
		Apply step 1 recursively on each of the two substrings x and y.
	
	


Given two strings s1 and s2 of the same length, return true if s2 is a scrambled string of s1, otherwise, return false.","['string', 'dynamic-programming']",Hard,783,812,355680,123836,[],"[('java', 16), ('c++', 14), ('python', 14), ('dynamic programming', 11), ('cpp', 10), ('dynamic-programming', 9), ('memoization', 9), ('recursion', 9), ('recursive', 8), ('dp', 6), ('python 3', 4), ('solution', 4), ('java-solution', 3), ('mcm pattern', 3), ('python3', 3), ('test-case', 3), ('wrong-answer', 3), ('c#', 2), ('cpp solution', 2), ('easy-to-understand', 2), ('recurision', 2), ('string', 2), ('#c++', 1), ('#dynamic-programming', 1), ('#memoization', 1), ('#recursion', 1), ('0ms', 1), ('100 beat', 1), ('1l', 1), ('1liner', 1), ('20ms', 1), ('4ms', 1), ('bf1l', 1), ('bottom up dp', 1), ('bottom-up-algorithm', 1), ('bottomup', 1), ('c++17', 1), ('cache', 1), ('description-disambiguation', 1), ('dp-top-down', 1), ('dynamic programmin', 1), ('easiest', 1), ('explained', 1), ('further-optimization', 1), ('hash', 1), ('hashmap', 1), ('javascript', 1), ('javascript solution', 1), ('judge-problem', 1), ('map-stl', 1), ('memoisation', 1), ('memoized', 1), ('memorized-dfs', 1), ('memory+dfs', 1), ('oneline', 1), ('priority queue', 1), ('run-code-working', 1), ('scramblestring', 1), ('short', 1), ('solution-sharing-cpp', 1), ('space-complexity', 1), ('submit-fail', 1), ('template method', 1), ('testcase-wrong', 1), ('time-complexity', 1), ('time-limit-exceeded', 1), ('top-down', 1), ('trick', 1), ('works-on-my-machine', 1), ('wrong test case', 1)]"
86,Partition List,https://leetcode.com/problems/partition-list,"Given the head of a linked list and a value x, partition it such that all nodes less than x come before nodes greater than or equal to x.

You should preserve the original relative order of the nodes in each of the two partitions.","['linked-list', 'two-pointers']",Medium,2245,404,614034,275778,[],"[('java', 52), ('c++', 35), ('cpp', 33), ('python', 29), ('linked-list', 21), ('javascript', 20), ('python 3', 18), ('java-solution', 16), ('two-pointers', 14), ('c#', 8), ('cpp solution', 8), ('easy-to-understand', 8), ('easy-understand', 7), ('easy-understanding', 7), ('linkedlist', 7), ('linkedlists', 7), ('python3', 6), ('simple', 6), ('simple solution', 6), ('solution', 6), ('time-limit-exceeded', 6), ('accepted', 5), ('clean code', 5), ('easy', 5), ('linked list', 5), ('memory-limit-exceeded', 5), ('constant space', 4), ('dummy-head', 4), ('intuitive', 4), ('linear time', 4), ('one pass solution', 4), ('time-complexity', 4), ('two pointers', 4), ('wrong-answer', 4), ('0ms', 3), ('2 pointer', 3), ('constant-space', 3), ('easytounderstand', 3), ('explained', 3), ('fast and simple', 3), ('go', 3), ('golang', 3), ('golang-solution', 3), ('improve', 3), ('iterative', 3), ('java ac solution', 3), ('javascript solution', 3), ('list', 3), ('one-pass', 3), ('recursion', 3), ('swift', 3), ('vector', 3), ('c', 2), ('c++ code', 2), ('comments-added', 2), ('cpp easy', 2), ('easy-undestand', 2), ('in-place', 2), ('linked lists', 2), ('partition list', 2), ('partitionlist', 2), ('performance', 2), ('pointer', 2), ('runtime-error', 2), ('short', 2), ('space-complexity', 2), ('two', 2), ('two pointer', 2), ('#linkedlist', 1), ('#python', 1), ('100', 1), ('100 faster', 1), ('100 speed', 1), ('an7one', 1), ('array-of-pointers', 1), ('best-submission', 1), ('brute force', 1), ('bubble-sort', 1), ('c code', 1), ('c programming', 1), ('c-code', 1), ('c-programming', 1), ('c++ easy to understand', 1), ('c++ solution', 1), ('challenge', 1), ('commented', 1), ('constant memory', 1), ('copy', 1), ('double-pointer', 1), ('dummy', 1), ('dummy-node', 1), ('easy solution', 1), ('easy to understand', 1), ('easy-understsand', 1), ('easysolution', 1), ('efficient', 1), ('extra memory', 1), ('fast', 1), ('go-solution', 1), ('golang solution', 1), ('inplace', 1), ('java solution', 1), ('javascript recursive', 1), ('javasolution', 1), ('js', 1), ('kotlinvim', 1), ('linear-scan', 1), ('linked list traversal', 1), ('linked-lists', 1), ('linklist', 1), ('microsoft', 1), ('microsoft-india', 1), ('most-efficient', 1), ('onepass', 1), ('optimisation', 1), ('output', 1), ('pointer of pointer', 1), ('pointers', 1), ('python2', 1), ('queue', 1), ('readable', 1), ('recursive', 1), ('reference', 1), ('ruby', 1), ('run-time-error', 1), ('sandeepkumar', 1), ('short code', 1), ('shorter', 1), ('solution-python', 1), ('solution-sharing-cpp', 1), ('space o1', 1), ('stacks', 1), ('straight-forward', 1), ('test', 1), ('traversal', 1), ('typescript', 1), ('video-explanation', 1), ('visualization', 1), ('while', 1)]"
85,Maximal Rectangle,https://leetcode.com/problems/maximal-rectangle,"Given a rows x cols binary matrix filled with 0's and 1's, find the largest rectangle containing only 1's and return its area.","['array', 'hash-table', 'dynamic-programming', 'stack']",Hard,4165,89,567769,226153,"[""Largest Rectangle in Histogram"", ""Maximal Square""]","[('java', 23), ('c++', 17), ('stack', 17), ('cpp', 16), ('dynamic programming', 14), ('python', 13), ('dynamic-programming', 11), ('stacks', 9), ('histogram', 8), ('dp', 7), ('javascript', 7), ('python 3', 7), ('java-solution', 5), ('c#', 4), ('solution', 4), ('wrong-answer', 4), ('golang', 3), ('python3', 3), ('#dynamic-programming', 2), ('easy', 2), ('easy-understand', 2), ('easy-understanding', 2), ('error', 2), ('explanation', 2), ('matrix', 2), ('monotonic stack', 2), ('solution-sharing-cpp', 2), ('time-complexity', 2), ('#array', 1), ('#c++', 1), ('#cpp', 1), ('#easy-understanding', 1), ('#easysolution', 1), ('#fastest', 1), ('#hash table', 1), ('#stacks', 1), ('beating-100-submissions', 1), ('bfs', 1), ('binary-search', 1), ('brutal force optmized', 1), ('c++ code', 1), ('comments-added', 1), ('cpp doubt', 1), ('cpp easy', 1), ('cpp solution', 1), ('divideconquer', 1), ('easy-to-understand', 1), ('easy-undestand', 1), ('explained', 1), ('explanations', 1), ('help', 1), ('linear time', 1), ('maximal rectangle', 1), ('maximal-rectangle', 1), ('missing-test-case', 1), ('prefix sum', 1), ('recursion', 1), ('ruby', 1), ('run-time-error', 1), ('runtime-error', 1), ('rust', 1), ('simple', 1), ('solution-sharing-c', 1), ('stack-simulation', 1), ('swift', 1), ('test-case', 1), ('testcase-wrong', 1), ('tests', 1), ('thinking process', 1), ('using-leetcode-84', 1), ('works-on-my-machine', 1)]"
84,Largest Rectangle in Histogram,https://leetcode.com/problems/largest-rectangle-in-histogram,"Given an array of integers heights representing the histogram's bar height where the width of each bar is 1, return the area of the largest rectangle in the histogram.","['array', 'stack']",Hard,5697,112,949967,356672,"[""Maximal Rectangle"", ""Maximum Score of a Good Subarray""]","[('stack', 62), ('c++', 45), ('cpp', 40), ('stacks', 36), ('java', 29), ('python', 23), ('javascript', 15), ('python 3', 13), ('python3', 10), ('cpp solution', 9), ('divide and conquer', 9), ('java-solution', 9), ('monotonic stack', 7), ('solution', 7), ('stack-based', 7), ('c#', 6), ('dynamic programming', 6), ('easy-understanding', 6), ('time-limit-exceeded', 6), ('linear time', 5), ('explained', 4), ('histogram', 4), ('monotone stack', 4), ('simple', 4), ('easy-to-understand', 3), ('rust', 3), ('segment-tree', 3), ('swift', 3), ('#stack', 2), ('cpp easy', 2), ('divideconquer', 2), ('dynamic-programming', 2), ('easy-understand', 2), ('easytounderstand', 2), ('explanation of logic', 2), ('golang', 2), ('improve', 2), ('linear', 2), ('next smallest element', 2), ('run-time-error', 2), ('segment tree', 2), ('short', 2), ('simple clear c++ solution', 2), ('solution-sharing-cpp', 2), ('#bruteforce', 1), ('1-liner', 1), ('1l', 1), ('1line', 1), ('84', 1), ('accepted', 1), ('accpected', 1), ('algorithms', 1), ('beginner friendly', 1), ('best-submission', 1), ('bf1l', 1), ('brute force to optimal', 1), ('brute-force', 1), ('bug-timeout', 1), ('c', 1), ('c++ code', 1), ('c++ monotonic stack', 1), ('cartesian-tree', 1), ('clean', 1), ('comments-added', 1), ('compile-error', 1), ('cpp doubt', 1), ('custom-testcase', 1), ('different approach', 1), ('divide and concur', 1), ('divide-and-conquer', 1), ('doubt', 1), ('doubts', 1), ('easiest', 1), ('easy', 1), ('easy understanding', 1), ('easyunderstand', 1), ('efficient solution', 1), ('es6', 1), ('explanations', 1), ('gkt', 1), ('golang solution', 1), ('google', 1), ('greedy', 1), ('help needed', 1), ('invariant', 1), ('iterative', 1), ('java ac solution', 1), ('kotlin', 1), ('largestrectangle', 1), ('line14', 1), ('linear-time', 1), ('linear-time-space', 1), ('math', 1), ('math-proof', 1), ('microsoft-india', 1), ('missing-test-case', 1), ('monostack', 1), ('nextsmaller', 1), ('nlogn', 1), ('non-descending stack', 1), ('nsl', 1), ('nsr', 1), ('oneline', 1), ('optimal', 1), ('pre-process', 1), ('priority queue', 1), ('python2', 1), ('recursive', 1), ('recursively', 1), ('recusion', 1), ('reverse-sorted', 1), ('ruby', 1), ('runtime-error', 1), ('salesforce', 1), ('sorted', 1), ('sparse table', 1), ('sparse-table', 1), ('stack from array', 1), ('test-case', 1), ('test-cases', 1), ('time-complexity', 1), ('tle', 1), ('two-pointers', 1), ('typescript', 1), ('updowndota', 1), ('video-explanation', 1), ('works-on-my-machine', 1), ('wrong-answer', 1), ('xjq', 1)]"
83,Remove Duplicates from Sorted List,https://leetcode.com/problems/remove-duplicates-from-sorted-list,"Given the head of a sorted linked list, delete all duplicates such that each element appears only once. Return the linked list sorted as well.",['linked-list'],Easy,2471,147,1254218,586548,"[""Remove Duplicates from Sorted List II"", ""Remove Duplicates From an Unsorted Linked List""]","[('java', 89), ('cpp', 58), ('python', 57), ('c++', 44), ('python 3', 36), ('solution', 32), ('javascript', 26), ('iterative', 21), ('linked-list', 21), ('java-solution', 20), ('easy-understanding', 19), ('python3', 17), ('c', 16), ('simple', 14), ('linkedlists', 13), ('easy', 12), ('easy-understand', 12), ('recursion', 12), ('cpp solution', 11), ('golang', 11), ('linked list', 10), ('easy-to-understand', 9), ('recursive', 9), ('c#', 8), ('two-pointers', 7), ('wrong-answer', 7), ('easytounderstand', 6), ('ruby', 6), ('short', 6), ('0ms', 5), ('duplicates', 5), ('linkedlist', 5), ('simple solution', 5), ('swift', 5), ('c++ code', 4), ('easiest', 4), ('easy-undestand', 4), ('explained', 4), ('fast', 4), ('kotlin', 4), ('recursively', 4), ('time-limit-exceeded', 4), ('beginner friendly', 3), ('constant space', 3), ('fast and simple', 3), ('fastest', 3), ('go', 3), ('iteration', 3), ('pointer', 3), ('remove duplicates', 3), ('remove-duplicates-from-sorted', 3), ('run-time-error', 3), ('test-case', 3), ('#python', 2), ('100 faster runtime', 2), ('beats 100', 2), ('c code', 2), ('constant-space', 2), ('cpp-solution', 2), ('deleteduplicates', 2), ('dictionary', 2), ('easy to understand', 2), ('go-solution', 2), ('golang-solution', 2), ('improve', 2), ('iterative traversal', 2), ('iteratively', 2), ('js', 2), ('linear time', 2), ('memory-release', 2), ('python2', 2), ('runtime-error', 2), ('solution-sharing-cpp', 2), ('swift5', 2), ('#c++', 1), ('#cpp', 1), ('#fast', 1), ('#javascript', 1), ('#linkedlist', 1), ('#set', 1), ('0ms-solution', 1), ('100 faster', 1), ('1ms', 1), ('5 lines', 1), ('accepted', 1), ('advice', 1), ('algorithm', 1), ('api', 1), ('array', 1), ('c programming', 1), ('c# solutions', 1), ('c++ iterative sol', 1), ('c++14', 1), ('clean', 1), ('clean code', 1), ('code', 1), ('comments', 1), ('compile-error', 1), ('concise', 1), ('cool', 1), ('cpp easy', 1), ('data structure', 1), ('delete duplicate', 1), ('delete-node-in-linkedlist', 1), ('dictonary', 1), ('dummy-head', 1), ('duplicate', 1), ('easy solution', 1), ('easy to read', 1), ('easy understand', 1), ('expained', 1), ('explained solution', 1), ('explanation', 1), ('explanation with code', 1), ('fast-solution', 1), ('faster', 1), ('faster than 100.00', 1), ('forward traversal', 1), ('general', 1), ('go lang', 1), ('great', 1), ('hash table', 1), ('help', 1), ('hint', 1), ('hints', 1), ('i want get a star', 1), ('in place', 1), ('in-place', 1), ('input', 1), ('interview', 1), ('iterate', 1), ('iterator', 1), ('iteratve', 1), ('itereative', 1), ('java ac solution', 1), ('java-8', 1), ('javascrip', 1), ('kotlinvim', 1), ('leetcode-library', 1), ('linear', 1), ('linear-time', 1), ('linear-traversal', 1), ('list', 1), ('loops', 1), ('memory leak', 1), ('memory-release-problem', 1), ('microsoft', 1), ('one pass', 1), ('one-pass', 1), ('php', 1), ('php solution', 1), ('pointers', 1), ('pyhton3', 1), ('question', 1), ('quick', 1), ('rajawatbanna', 1), ('recursive approach', 1), ('recursive solution', 1), ('recursiveley', 1), ('recurssion', 1), ('remove', 1), ('remove duplicate', 1), ('removeduplicates', 1), ('rust', 1), ('sets', 1), ('shorter', 1), ('simple-solution', 1), ('simpler', 1), ('single pass', 1), ('slidingwindow', 1), ('slow fast pointer', 1), ('solition-sharing', 1), ('solution-sharing-python', 1), ('sorted', 1), ('sorted-array', 1), ('sortedlisti', 1), ('step by step explanation', 1), ('stl', 1), ('straight-forward', 1), ('success', 1), ('syntax', 1), ('temp', 1), ('timeout', 1), ('two', 1), ('two pointer approach', 1), ('two-pointer', 1), ('unordermap', 1), ('vector', 1), ('vmware', 1), ('with comments', 1)]"
82,Remove Duplicates from Sorted List II,https://leetcode.com/problems/remove-duplicates-from-sorted-list-ii,"Given the head of a sorted linked list, delete all nodes that have duplicate numbers, leaving only distinct numbers from the original list. Return the linked list sorted as well.",['linked-list'],Medium,2880,126,828235,328354,"[""Remove Duplicates from Sorted List"", ""Remove Duplicates From an Unsorted Linked List""]","[('java', 72), ('cpp', 56), ('python', 48), ('c++', 46), ('linked-list', 30), ('easy-understanding', 24), ('iterative', 23), ('java-solution', 23), ('python 3', 22), ('javascript', 18), ('recursive', 16), ('solution', 16), ('dummy-head', 13), ('easy-understand', 12), ('python3', 12), ('simple', 11), ('cpp solution', 9), ('linear time', 8), ('c#', 7), ('golang', 7), ('recursion', 7), ('accepted', 6), ('easy-undestand', 6), ('iteration', 6), ('c++ code', 5), ('easy', 5), ('hashmap', 5), ('javascript solution', 5), ('linked list', 5), ('linkedlists', 5), ('recurision', 5), ('short', 5), ('swift', 5), ('two-pointers', 5), ('0ms', 4), ('c', 4), ('easy-to-understand', 4), ('easytounderstand', 4), ('explanation', 4), ('java ac solution', 4), ('js', 4), ('pointer', 4), ('python2', 4), ('simple solution', 4), ('constant memory', 3), ('constant space', 3), ('constant-space', 3), ('go', 3), ('javascrip', 3), ('linkedlist', 3), ('pointers', 3), ('remove-duplicates-from-sorted', 3), ('scala', 3), ('2 pointers', 2), ('c++ iterative sol', 2), ('concise', 2), ('cpp clear', 2), ('deleteduplicates', 2), ('dummy', 2), ('dummy-node', 2), ('dummyhead', 2), ('duplicates', 2), ('explained', 2), ('faster', 2), ('golang-solution', 2), ('improve', 2), ('iterative way', 2), ('linear-time', 2), ('list', 2), ('map', 2), ('microsoft', 2), ('one-pass', 2), ('optimal', 2), ('removeduplicates', 2), ('ruby', 2), ('short c++ code', 2), ('vmware', 2), ('wrong-answer', 2), ('#82', 1), ('#dummy-head', 1), ('#javascript', 1), ('#remove duplicates', 1), ('0ms-solution', 1), ('100 faster', 1), ('100 faster runtime', 1), ('100 memory', 1), ('100 space', 1), ('100 speed', 1), ('2 pointer', 1), ('2-pointer', 1), ('2-pointers', 1), ('2pointer', 1), ('2pointers', 1), ('accepted solution', 1), ('array', 1), ('beginner friendly', 1), ('best-submission', 1), ('brute force', 1), ('c++ solution', 1), ('c++11', 1), ('case class', 1), ('clean code', 1), ('clean-code', 1), ('clear', 1), ('clear thought process', 1), ('commented', 1), ('comments', 1), ('comments-added', 1), ('complexity analysis', 1), ('confused', 1), ('count', 1), ('cpp easy', 1), ('cpp question', 1), ('cpp solu', 1), ('dictonary', 1), ('double-pointers', 1), ('doubts', 1), ('dynamic-programming', 1), ('easy to undersstand', 1), ('easy to understand', 1), ('easy understanding', 1), ('easy undestanding', 1), ('eckotan', 1), ('efficient', 1), ('efficient solution', 1), ('elegant solution', 1), ('error', 1), ('esay-understand', 1), ('explain', 1), ('explanation with code', 1), ('fast', 1), ('faster than 100.00', 1), ('filter', 1), ('flag', 1), ('generator', 1), ('go-solution', 1), ('hash set', 1), ('hash table', 1), ('hashset', 1), ('hashtable', 1), ('help me', 1), ('illustration', 1), ('in place', 1), ('in-place', 1), ('interview', 1), ('intuitive', 1), ('ios', 1), ('iterative approach', 1), ('iteratively', 1), ('java solution', 1), ('java solution sharing', 1), ('keep it simple', 1), ('kotlin', 1), ('linear', 1), ('linear memory', 1), ('linear-traversal', 1), ('linked-lists', 1), ('linkedhashmap', 1), ('logic explained', 1), ('medium', 1), ('memory leak', 1), ('memory optimized', 1), ('memory usage', 1), ('modern', 1), ('nlogn', 1), ('no extra space', 1), ('no-extra-space', 1), ('one pass', 1), ('one pass solution', 1), ('one-pointer', 1), ('pattern matching', 1), ('pointer-to-pointer', 1), ('pop', 1), ('python3.8', 1), ('rajawatbanna', 1), ('recursive easy', 1), ('recursive-descent', 1), ('recursively', 1), ('remove duplicates', 1), ('runtime-error', 1), ('sets', 1), ('share java solution', 1), ('simpe', 1), ('simple clear c++ solution', 1), ('simple python solution', 1), ('solution-sharing-cpp', 1), ('solution-sharing-python', 1), ('sortedlistii', 1), ('sorting', 1), ('space o1', 1), ('stack', 1), ('tail-call', 1), ('tail-recursion', 1), ('tail-recursive', 1), ('tailrec', 1), ('temp', 1), ('testcase-wrong', 1), ('three-pointers', 1), ('time limit', 1), ('two pointer technique', 1), ('two pointers', 1), ('two-pointer', 1), ('typescript', 1), ('ugly', 1), ('unordered map', 1), ('unorderedset', 1), ('verbose', 1), ('video-explaination', 1), ('video-explanation', 1), ('warming-up', 1), ('well-commented', 1), ('while', 1), ('while loop', 1), ('while-loop', 1), ('with-explanation', 1)]"
81,Search in Rotated Sorted Array II,https://leetcode.com/problems/search-in-rotated-sorted-array-ii,"There is an integer array nums sorted in non-decreasing order (not necessarily with distinct values).

Before being passed to your function, nums is rotated at an unknown pivot index k (0 <= k < nums.length) such that the resulting array is [nums[k], nums[k+1], ..., nums[n-1], nums[0], nums[1], ..., nums[k-1]] (0-indexed). For example, [0,1,2,4,4,4,5,6,6,7] might be rotated at pivot index 5 and become [4,5,6,6,7,0,1,2,4,4].

Given the array nums after the rotation and an integer target, return true if target is in nums, or false if it is not in nums.","['array', 'binary-search']",Medium,2091,580,897946,302929,"[""Search in Rotated Sorted Array""]","[('binary-search', 53), ('java', 29), ('python', 29), ('c++', 25), ('binary search', 24), ('cpp', 19), ('python 3', 17), ('python3', 16), ('javascript', 15), ('binarysearch', 8), ('solution', 7), ('java-solution', 6), ('simple', 6), ('c', 5), ('easy-understand', 5), ('easy-understanding', 5), ('c#', 4), ('javascript solution', 4), ('time-complexity', 4), ('cpp solution', 3), ('golang', 3), ('one-liner', 3), ('recursion', 3), ('array', 2), ('binary-search-explanation', 2), ('cpp easy', 2), ('easy-to-understand', 2), ('efficient solution', 2), ('explanation with code', 2), ('iterative', 2), ('pivot', 2), ('python2', 2), ('pythonpython3', 2), ('recursive', 2), ('swift', 2), ('testcase-wrong', 2), ('time complexity', 2), ('wrong-answer', 2), ('0ms', 1), ('100', 1), ('100 faster', 1), ('accepted', 1), ('analysis', 1), ('backtracking', 1), ('beats 100', 1), ('beats 95 percent', 1), ('beginner friendly', 1), ('big o', 1), ('binary seach', 1), ('binary-serach', 1), ('bisect', 1), ('c# solution', 1), ('c++ solution', 1), ('cheeky', 1), ('clean code', 1), ('commentary', 1), ('commented', 1), ('constant-space', 1), ('cplusplus', 1), ('cpp-solution', 1), ('difficulty', 1), ('duplicates', 1), ('easy to understant', 1), ('easy understanding', 1), ('easy-solition', 1), ('easy-undesrtanding', 1), ('easy-undestand', 1), ('easytounderstand', 1), ('explained', 1), ('facebook interview', 1), ('fast-solution', 1), ('go', 1), ('go-solution', 1), ('golang-solution', 1), ('hard', 1), ('help', 1), ('help needed', 1), ('improve', 1), ('intuitive', 1), ('ios', 1), ('java ac solution', 1), ('javascript recursive', 1), ('js', 1), ('linear seach', 1), ('linear search', 1), ('linear time', 1), ('linear-time', 1), ('log n', 1), ('medium', 1), ('mod', 1), ('modular', 1), ('modular arithmetic', 1), ('non-recursive', 1), ('one liner', 1), ('oneline', 1), ('python-set', 1), ('readable', 1), ('rotated array', 1), ('rotatedsortedarrayii', 1), ('ruby', 1), ('search', 1), ('search-in-rotated-sorted-array', 1), ('set', 1), ('sets', 1), ('short', 1), ('short-and-sweet', 1), ('simple clear c++ solution', 1), ('simplest', 1), ('solution-sharing-cpp', 1), ('sort', 1), ('stl', 1), ('straight-forward', 1), ('test-case', 1), ('very-easy', 1), ('video', 1), ('video explanation', 1), ('well-explained', 1), ('wrong answer', 1), ('xjq', 1)]"
80,Remove Duplicates from Sorted Array II,https://leetcode.com/problems/remove-duplicates-from-sorted-array-ii,"Given a sorted array nums, remove the duplicates in-place such that duplicates appeared at most twice and return the new length.

Do not allocate extra space for another array; you must do this by modifying the input array in-place with O(1) extra memory.

Clarification:

Confused why the returned value is an integer, but your answer is an array?

Note that the input array is passed in by reference, which means a modification to the input array will be known to the caller.

Internally you can think of this:


// nums is passed in by reference. (i.e., without making a copy)
int len = removeDuplicates(nums);

// any modification to nums in your function would be known by the caller.
// using the length returned by your function, it prints the first len elements.
for (int i = 0; i < len; i++) {
    print(nums[i]);
}","['array', 'two-pointers']",Medium,1835,789,702333,326411,"[""Remove Duplicates from Sorted Array""]","[('java', 53), ('python', 45), ('c++', 39), ('cpp', 38), ('python 3', 32), ('two-pointers', 31), ('javascript', 26), ('solution', 15), ('easy-understanding', 14), ('cpp solution', 12), ('java-solution', 12), ('python3', 12), ('c#', 10), ('simple', 10), ('wrong-answer', 10), ('two pointers', 9), ('easy-understand', 8), ('linear time', 8), ('two-pointer', 8), ('array', 7), ('works-on-my-machine', 7), ('easy-to-understand', 6), ('golang', 6), ('javascript solution', 6), ('short', 6), ('constant-space', 5), ('easy', 5), ('explained', 5), ('accepted', 4), ('c++ code', 4), ('duplicates', 4), ('easytounderstand', 4), ('fastest', 4), ('simple solution', 4), ('constant space', 3), ('easy to understand', 3), ('easy-undestand', 3), ('golang-solution', 3), ('in-place', 3), ('iterative', 3), ('pointer', 3), ('python2', 3), ('remove duplicates', 3), ('run-time-error', 3), ('simplest', 3), ('swift', 3), ('vector', 3), ('2 pointers', 2), ('analysis', 2), ('beginners', 2), ('c', 2), ('constant memory', 2), ('counter', 2), ('easy understand', 2), ('error', 2), ('fast-solution', 2), ('improve', 2), ('javascrip', 2), ('kotlin', 2), ('learning', 2), ('linear-time', 2), ('optimal', 2), ('php', 2), ('php solution', 2), ('ruby', 2), ('solution-sharing-cpp', 2), ('time-complexity', 2), ('#cpp', 1), ('100 speed', 1), ('1ms', 1), ('2 pointer', 1), ('2-pointer', 1), ('2pointer', 1), ('2pointers', 1), ('algorithm', 1), ('algorithms', 1), ('array-sort', 1), ('arrays', 1), ('basics', 1), ('beats 100', 1), ('beginnerfriendly', 1), ('binary search', 1), ('binary-search', 1), ('bug', 1), ('clean', 1), ('clean code', 1), ('collections', 1), ('commented', 1), ('comments added', 1), ('compact', 1), ('complexity', 1), ('count', 1), ('cpp easy', 1), ('csharp', 1), ('debugging', 1), ('dictionary', 1), ('doubt', 1), ('doubts', 1), ('easiest', 1), ('easy solution', 1), ('easy to understandd', 1), ('easy-implementation', 1), ('efficient', 1), ('erase method', 1), ('explaination', 1), ('explanation of logic', 1), ('fast and simple', 1), ('faster than 100.00', 1), ('fastest c++ solution', 1), ('for-loop', 1), ('fun', 1), ('general', 1), ('generalized', 1), ('go', 1), ('go lang', 1), ('go-solution', 1), ('hash table', 1), ('hashing', 1), ('hashmap', 1), ('implementation', 1), ('inefficient', 1), ('inplace', 1), ('intuitive', 1), ('iteration', 1), ('java ac solution', 1), ('js', 1), ('ktimes', 1), ('lambda', 1), ('least-memory', 1), ('linear-scan', 1), ('lineartime', 1), ('list', 1), ('map', 1), ('maps', 1), ('memory', 1), ('microsoft', 1), ('need help', 1), ('no-extra-space', 1), ('notcodegolf', 1), ('o1 space', 1), ('o1space', 1), ('problem analysis', 1), ('proof', 1), ('pyhton', 1), ('runtimeerror', 1), ('rust', 1), ('shorter', 1), ('simple approach', 1), ('simple clear c++ solution', 1), ('simple-solution', 1), ('simpler', 1), ('single pass', 1), ('sliding window', 1), ('slidingwindow', 1), ('slow', 1), ('solution c++', 1), ('solution-share', 1), ('solution-sharing-c', 1), ('solved', 1), ('sort', 1), ('sorting', 1), ('space-complexity-1', 1), ('splice', 1), ('stl', 1), ('swift5', 1), ('testcase-wrong', 1), ('three-pointers', 1), ('time complexity', 1), ('time-complexity-n', 1), ('two pass', 1), ('two pointer', 1), ('two pointer technique', 1), ('two-pointer method', 1), ('twopointer', 1), ('understandable', 1), ('unordered map', 1), ('video explanation', 1), ('video-explanation', 1), ('well-commented', 1), ('while-loop', 1), ('with explanation', 1), ('with-explanation', 1), ('wrong-answer-javascript', 1), ('wrong-execution-result', 1)]"
79,Word Search,https://leetcode.com/problems/word-search,"Given an m x n grid of characters board and a string word, return true if word exists in the grid.

The word can be constructed from letters of sequentially adjacent cells, where adjacent cells are horizontally or vertically neighboring. The same letter cell may not be used more than once.","['array', 'backtracking']",Medium,5572,245,1749855,653108,"[""Word Search II""]","[('dfs', 132), ('backtracking', 114), ('java', 80), ('python', 66), ('cpp', 43), ('python 3', 36), ('c++', 35), ('recursion', 31), ('javascript', 28), ('time-limit-exceeded', 25), ('python3', 21), ('java-solution', 16), ('dfs simple solution', 11), ('depth first search', 10), ('easy-understand', 10), ('golang', 10), ('dfs recursive', 8), ('easy-undestand', 8), ('c#', 7), ('cpp solution', 7), ('easy-understanding', 7), ('solution', 7), ('time-complexity', 7), ('back tracking', 6), ('tle', 6), ('accepted', 5), ('dfs solution', 5), ('recursive', 5), ('swift', 5), ('wrong-answer', 5), ('backtrack', 4), ('bfs', 4), ('help', 4), ('improve', 4), ('scala', 4), ('simple', 4), ('word search', 4), ('word-search', 4), ('backtracing', 3), ('c', 3), ('easytounderstand', 3), ('explained', 3), ('memoization', 3), ('recusion', 3), ('simple solution', 3), ('test-case', 3), ('trie', 3), ('#dfs', 2), ('backtracking dfs', 2), ('c++ solution', 2), ('c++11', 2), ('clean code', 2), ('commented', 2), ('cpp easy', 2), ('dfs with memo', 2), ('dfs-recursive', 2), ('easy', 2), ('easy to understand', 2), ('easy-solition', 2), ('explanation', 2), ('go', 2), ('golang-solution', 2), ('graph', 2), ('java ac solution', 2), ('javascript solution', 2), ('recursive-dfs', 2), ('ruby', 2), ('rust', 2), ('time', 2), ('tries', 2), ('wrong answer', 2), ('#backtracking', 1), ('#helpneeded', 1), ('#java', 1), ('#python 3', 1), ('#python3', 1), ('#recursion', 1), ('100', 1), ('95 faster', 1), ('accepted solution', 1), ('amazon', 1), ('avnish', 1), ('backtacking', 1), ('backtrace', 1), ('backtrakcing', 1), ('beginner friendly', 1), ('bfs simple solution', 1), ('bfs tle', 1), ('bfs-dfs', 1), ('bug', 1), ('clean code with comments', 1), ('clear solution', 1), ('comments added', 1), ('commetend', 1), ('compilation', 1), ('complexity', 1), ('concise', 1), ('concise-solution', 1), ('constant-space', 1), ('cpp doubt', 1), ('cpp-solution', 1), ('csharp', 1), ('depth-first-search', 1), ('detailed', 1), ('detailed explanation', 1), ('dfs-bfs', 1), ('dfs-bottomup', 1), ('dfs-non-recursive', 1), ('dfs-topdown', 1), ('dfs-tree', 1), ('different-oj-local', 1), ('doubts', 1), ('dshah14', 1), ('easy peasy', 1), ('easy-to-understand', 1), ('es6', 1), ('expalanation', 1), ('explained solution', 1), ('explanation of logic', 1), ('fast-solution', 1), ('faster', 1), ('fastest', 1), ('generator', 1), ('go-solution', 1), ('google interview', 1), ('help me', 1), ('help needed', 1), ('how-to-enhance', 1), ('immutable', 1), ('intial validator', 1), ('islands', 1), ('iteration', 1), ('iterative', 1), ('iterative solution', 1), ('iterative-backtracking', 1), ('iteratively', 1), ('java solution', 1), ('javascrip', 1), ('js', 1), ('js javascript', 1), ('kotlin', 1), ('kotlinvim', 1), ('memo', 1), ('memory-limit-exceeded', 1), ('minimalism', 1), ('non-recursive', 1), ('peymannp', 1), ('problem', 1), ('pyhton', 1), ('python2', 1), ('python3.8', 1), ('pythonic', 1), ('pythonpython3', 1), ('question', 1), ('readable', 1), ('run-time-error', 1), ('runtime', 1), ('short', 1), ('short code', 1), ('short solution', 1), ('short-circuit', 1), ('simple clear c++ solution', 1), ('simple recursive solution and', 1), ('solution-sharing-cpp', 1), ('space', 1), ('suggestion', 1), ('test-case-bug', 1), ('testcase-wrong', 1), ('time complexity', 1), ('tle solved', 1), ('typescript', 1), ('video', 1), ('video-explanation', 1), ('well-commented', 1), ('wordsearch', 1), ('works-on-my-machine', 1), ('wrong-comment', 1), ('wrong-instruction', 1), ('wrong-test-cases', 1), ('xjq', 1), ('youtube', 1)]"
78,Subsets,https://leetcode.com/problems/subsets,"Given an integer array nums of unique elements, return all possible subsets (the power set).

The solution set must not contain duplicate subsets. Return the solution in any order.","['array', 'backtracking', 'bit-manipulation']",Medium,5674,112,1152772,759339,"[""Subsets II"", ""Generalized Abbreviation"", ""Letter Case Permutation""]","[('backtracking', 130), ('python', 102), ('java', 100), ('c++', 78), ('recursion', 78), ('cpp', 66), ('javascript', 44), ('python 3', 42), ('bit manipulation', 32), ('dfs', 28), ('recursive', 27), ('iterative', 25), ('subsets', 25), ('python3', 24), ('solution', 23), ('bit-manipulation', 20), ('java-solution', 19), ('easy-understanding', 17), ('cpp solution', 15), ('simple', 14), ('subset', 14), ('easy-understand', 13), ('golang', 13), ('easy', 12), ('swift', 12), ('simple solution', 11), ('bfs', 10), ('c#', 10), ('fast', 10), ('c++ code', 8), ('iteratively', 8), ('recusion', 8), ('easy-undestand', 7), ('fast and simple', 7), ('improve', 6), ('time-complexity', 6), ('0ms', 5), ('bitwise', 5), ('cpp easy', 5), ('dfs simple solution', 5), ('easy-to-understand', 5), ('one-liner', 5), ('recursively', 5), ('short', 5), ('accepted', 4), ('backtracing', 4), ('bitset', 4), ('clean code', 4), ('combination', 4), ('easiest', 4), ('easytounderstand', 4), ('fast-solution', 4), ('itertools', 4), ('recurision', 4), ('time-limit-exceeded', 4), ('wrong-answer', 4), ('100 faster', 3), ('100 speed', 3), ('back tracking', 3), ('backtrack', 3), ('bit-mask', 3), ('bitmanipulation', 3), ('bitmasking', 3), ('c', 3), ('c++ recursive solution', 3), ('comments', 3), ('dynamic-programming', 3), ('fastest', 3), ('golang-solution', 3), ('iterative solution', 3), ('java ac solution', 3), ('javasccript', 3), ('one-line', 3), ('powerset', 3), ('ruby', 3), ('scala', 3), ('simple clear c++ solution', 3), ('typescript', 3), ('#bit-manipulation', 2), ('0ms runtime', 2), ('algorithms', 2), ('beats 97', 2), ('beats 98 pc', 2), ('bit mask', 2), ('bit masking', 2), ('bitmask', 2), ('bitwise operation', 2), ('breadth first search', 2), ('breadth-first-search', 2), ('c++11', 2), ('combinations', 2), ('commented', 2), ('complexity-analysis', 2), ('dfs solution', 2), ('dryrun', 2), ('easy to understand', 2), ('es6', 2), ('explaination', 2), ('explanation', 2), ('explanation of logic', 2), ('facebook', 2), ('faster than 100.00', 2), ('for loops', 2), ('go', 2), ('immutable', 2), ('iteration', 2), ('iterative way', 2), ('java simple', 2), ('javascript solution', 2), ('js', 2), ('kotlin', 2), ('math', 2), ('one line', 2), ('oneline', 2), ('queue', 2), ('recursive solution', 2), ('sets', 2), ('share-solution', 2), ('solution-sharing-cpp', 2), ('solution-sharing-python', 2), ('test-case', 2), ('testcase-wrong', 2), ('time-limit-exceeded-java', 2), ('#bfs', 1), ('#easy-understand', 1), ('#python', 1), ('1-line', 1), ('100', 1), ('100 memory', 1), ('100 space', 1), ('3-solutions', 1), ('8ms', 1), ('90+faster', 1), ('accepted solution', 1), ('algorithm', 1), ('apna college', 1), ('array', 1), ('arrays', 1), ('back-tracking', 1), ('backtracking dfs', 1), ('backward recursion', 1), ('basic', 1), ('beats 100 percent', 1), ('beginner friendly', 1), ('best java solution', 1), ('best-submission', 1), ('binary', 1), ('binary-tree', 1), ('bit', 1), ('bit manupilation', 1), ('c code', 1), ('c++ bitoperations', 1), ('c++ iterative sol', 1), ('c++ power set', 1), ('c++ solution', 1), ('c++14', 1), ('c++code', 1), ('cascading', 1), ('cascadingapporach', 1), ('chinese', 1), ('clean', 1), ('clean-code', 1), ('clear', 1), ('combinatories', 1), ('commetend', 1), ('compilation', 1), ('compile-error', 1), ('complexity', 1), ('constant-space', 1), ('cpp doubt', 1), ('csharp', 1), ('deepcopy', 1), ('depth first search', 1), ('detailed explanation', 1), ('dfs recursive', 1), ('divide and conquer', 1), ('divideconquer', 1), ('doubt', 1), ('doubts', 1), ('dynamic programming', 1), ('easy to read', 1), ('easy-understsand', 1), ('easysolution', 1), ('efficient solution', 1), ('exceeded', 1), ('explain', 1), ('explained', 1), ('explained solution', 1), ('explanation with logic', 1), ('facebook-india', 1), ('faceebook', 1), ('failed', 1), ('faster than 98', 1), ('fasterthan100', 1), ('fastest java slution', 1), ('follow-up', 1), ('fp', 1), ('functional', 1), ('functional programming', 1), ('functional-programming', 1), ('generator-function', 1), ('go-solution', 1), ('hybrid', 1), ('illustration', 1), ('interview', 1), ('intuitive', 1), ('intutive', 1), ('iterative approch', 1), ('iterative-dfs', 1), ('iteratve-recursive', 1), ('java bit-manipulation', 1), ('java solution', 1), ('javascrip', 1), ('javascriptes6', 1), ('jizhi', 1), ('k1ch', 1), ('kotlinvim', 1), ('less memory', 1), ('lexicographical order', 1), ('limit', 1), ('lisp', 1), ('list operations', 1), ('lists', 1), ('loops', 1), ('mathematics', 1), ('memoization', 1), ('memory-limit-exceeded', 1), ('memory-limited-exceeded', 1), ('mle', 1), ('no extra space', 1), ('non-recursive', 1), ('one pass', 1), ('oneliner', 1), ('pass-by-reference', 1), ('pass-by-value', 1), ('permutations', 1), ('php', 1), ('php solution', 1), ('power', 1), ('prime', 1), ('problem-discussion', 1), ('products', 1), ('ptyhon3', 1), ('pyhton', 1), ('python2', 1), ('python3.8', 1), ('question need help', 1), ('readability', 1), ('reccursion', 1), ('reccursive', 1), ('recursion formula', 1), ('recursion palindrome', 1), ('recursive-dfs', 1), ('recusive', 1), ('redable', 1), ('return-value', 1), ('reusable-template', 1), ('runtime-error', 1), ('rust', 1), ('scheme', 1), ('self-explanatory', 1), ('set of vector', 1), ('short c++ code', 1), ('shortes', 1), ('shortest', 1), ('sicp', 1), ('solition-sharing', 1), ('solution-sharing-swift', 1), ('somal', 1), ('sorting', 1), ('stack', 1), ('straight-forward', 1), ('subsequence', 1), ('swiftsolution', 1), ('tail-call', 1), ('tail-recursion', 1), ('test-case-too-weak', 1), ('testcase-missing', 1), ('thinking process', 1), ('three-lines', 1), ('time complexity', 1), ('tree', 1), ('ultra easy', 1), ('upvote', 1), ('vector-of-vector', 1), ('vectors', 1), ('video explanation', 1), ('video-explanation', 1), ('without recursive', 1), ('wrong-execution-result', 1), ('xjq', 1), ('youtube', 1)]"
77,Combinations,https://leetcode.com/problems/combinations,"Given two integers n and k, return all possible combinations of k numbers out of the range [1, n].

You may return the answer in any order.",['backtracking'],Medium,2215,82,622037,362210,"[""Combination Sum"", ""Permutations""]","[('backtracking', 89), ('java', 53), ('python', 39), ('cpp', 37), ('recursion', 32), ('c++', 31), ('python 3', 26), ('javascript', 21), ('dfs', 18), ('solution', 18), ('recursive', 14), ('easy-understand', 13), ('golang', 7), ('python3', 6), ('bit-manipulation', 5), ('easy', 5), ('easy-understanding', 5), ('easy-undestand', 5), ('iterative', 5), ('c#', 4), ('combination', 4), ('easy-to-understand', 4), ('java-solution', 4), ('short', 4), ('backtrack', 3), ('commented', 3), ('fast and simple', 3), ('simple', 3), ('time-complexity', 3), ('wrong-answer', 3), ('#cpp', 2), ('#easy-understanding', 2), ('accepted', 2), ('backtracing', 2), ('bfs', 2), ('bit-operation', 2), ('c', 2), ('c++ code', 2), ('combinations', 2), ('dynamic-programming', 2), ('easiest', 2), ('easytounderstand', 2), ('faster', 2), ('go', 2), ('iteratively', 2), ('itertools', 2), ('js', 2), ('memoization', 2), ('non-recursive', 2), ('one-liner', 2), ('php', 2), ('run-time-error', 2), ('rust', 2), ('simple solution', 2), ('#backtracking', 1), ('#c++', 1), ('#dfs', 1), ('#dynamic-programming', 1), ('#easy', 1), ('#easysolution', 1), ('#fast', 1), ('#google', 1), ('#java #countnsay', 1), ('#recursion', 1), ('#simplecode', 1), ('0ms', 1), ('algorithms', 1), ('answer', 1), ('arrays', 1), ('back tracking', 1), ('back-tracking', 1), ('backrtracking', 1), ('beginners', 1), ('best-submission', 1), ('bit', 1), ('bitmask', 1), ('bitmasking', 1), ('breadth-first-search', 1), ('breath first search', 1), ('c code', 1), ('combanitorics', 1), ('csharp', 1), ('depth-first-search', 1), ('detailed explanation', 1), ('dfs recursive', 1), ('dfs solution', 1), ('dfs-topdown', 1), ('different-oj-local', 1), ('dp', 1), ('dynamic programming', 1), ('easy to understand', 1), ('easy understanding', 1), ('easy-undesrtanding', 1), ('easytoundersatand', 1), ('efficient', 1), ('efficient solution', 1), ('examples', 1), ('explained solution', 1), ('explanation', 1), ('fast', 1), ('fast-solution', 1), ('generator-function', 1), ('golang-solution', 1), ('improve', 1), ('java simple', 1), ('javascript solution', 1), ('js javascript', 1), ('kotlin', 1), ('kotlinvim', 1), ('lambda', 1), ('math', 1), ('missing-test-case', 1), ('mrmagician', 1), ('oj-tle-judgement-problem', 1), ('one liner', 1), ('oneline', 1), ('optimizations', 1), ('output-limit-exceeded', 1), ('php solution', 1), ('pyhton3', 1), ('python2', 1), ('readable', 1), ('recrusive', 1), ('recurision', 1), ('recursive easy', 1), ('recursive lines clean', 1), ('recursive-descent', 1), ('recursively', 1), ('ruby', 1), ('sandeepkumar', 1), ('scala', 1), ('short code', 1), ('solution-javascript', 1), ('solution-sharing-cpp', 1), ('solution-sharing-python', 1), ('space-complexity', 1), ('straight-forward', 1), ('template', 1), ('time', 1), ('time-limit-exceeded', 1), ('tle', 1), ('video-explanation', 1), ('well-explained', 1), ('xjq', 1)]"
76,Minimum Window Substring,https://leetcode.com/problems/minimum-window-substring,"Given two strings s and t, return the minimum window in s which will contain all the characters in t. If there is no such window in s that covers all characters in t, return the empty string """".

Note that If there is such a window, it is guaranteed that there will always be only one unique minimum window in s.","['hash-table', 'two-pointers', 'string', 'sliding-window']",Hard,6490,437,1453901,527899,"[""Substring with Concatenation of All Words"", ""Minimum Size Subarray Sum"", ""Sliding Window Maximum"", ""Permutation in String"", ""Smallest Range Covering Elements from K Lists"", ""Minimum Window Subsequence""]","[('java', 63), ('python', 42), ('sliding-window', 38), ('slidingwindow', 37), ('hashmap', 29), ('python 3', 24), ('cpp', 22), ('c++', 21), ('javascript', 18), ('two-pointers', 16), ('java-solution', 14), ('python3', 11), ('sliding window', 10), ('solution', 8), ('c#', 7), ('easy-understand', 6), ('substring', 6), ('easy-understanding', 5), ('explained', 5), ('window', 5), ('wrong-answer', 5), ('array', 4), ('easy', 4), ('slide window', 4), ('time-complexity', 4), ('two-pointer', 4), ('#sliding-window', 3), ('accepted', 3), ('comments', 3), ('easy-undestand', 3), ('easytounderstand', 3), ('explanation', 3), ('golang', 3), ('kotlin', 3), ('map', 3), ('python2', 3), ('readable', 3), ('scala', 3), ('swift', 3), ('#java', 2), ('concise', 2), ('cpp solution', 2), ('dictionary', 2), ('hashing', 2), ('improve', 2), ('java ac solution', 2), ('javascript solution', 2), ('js', 2), ('linear-time', 2), ('minimum window substring', 2), ('php', 2), ('ruby', 2), ('rust', 2), ('short', 2), ('sliding', 2), ('sliding window algorithm', 2), ('solution-sharing-cpp', 2), ('testcase-wrong', 2), ('time-limit-exceeded', 2), ('typescript', 2), ('well-commented', 2), ('#c++', 1), ('#cpp', 1), ('#easy-understand', 1), ('#easysolution', 1), ('#facebook', 1), ('#google', 1), ('#hashmap', 1), ('#java-solution', 1), ('#javascript', 1), ('#on', 1), ('#twopointerapproach', 1), ('#video', 1), ('#video-explanation', 1), ('#video-solution', 1), ('2 pointer', 1), ('2 pointers', 1), ('2pointers', 1), ('beat 98', 1), ('best-submission', 1), ('bit manipulation.', 1), ('bit-manipulation', 1), ('bonus question', 1), ('brute force', 1), ('brute-force', 1), ('c', 1), ('c code', 1), ('c# problems', 1), ('c# solution', 1), ('c++ code', 1), ('c++ hash', 1), ('c++11', 1), ('clean code', 1), ('commented', 1), ('compare maps', 1), ('counter', 1), ('cpp doubt', 1), ('cpp with explanation', 1), ('description-disambiguation', 1), ('detailed thinking step', 1), ('dynamic-programming', 1), ('easy undestanding', 1), ('easy-to-read', 1), ('easy-to-understand', 1), ('easy-understsand', 1), ('easytoundersatand', 1), ('es6', 1), ('explained solution', 1), ('explanation with code', 1), ('explanation with logic', 1), ('fast', 1), ('fast and simple', 1), ('go-solution', 1), ('golang-solution', 1), ('greedy approach', 1), ('hash', 1), ('hashtable', 1), ('in-place', 1), ('interesting question', 1), ('java solution', 1), ('java11', 1), ('javacript', 1), ('kmp', 1), ('kotlinvim', 1), ('linked-list', 1), ('linkedin', 1), ('linkedlist', 1), ('linkedlists', 1), ('linq', 1), ('lookup', 1), ('minwindowsubstring', 1), ('mock interview', 1), ('naive', 1), ('need-help', 1), ('object-oriented', 1), ('one pass hash map', 1), ('oop', 1), ('optimal', 1), ('php solution', 1), ('precise', 1), ('python 2', 1), ('pythonpython3', 1), ('question need help', 1), ('recursively', 1), ('recusion', 1), ('self-explanatory', 1), ('set', 1), ('short answer', 1), ('short code', 1), ('sliding hash', 1), ('slow-performance', 1), ('space-optimized', 1), ('sql', 1), ('string-searching', 1), ('strings', 1), ('swift5', 1), ('tsql', 1), ('two pointer technique', 1), ('two pointers', 1), ('twopointer', 1), ('uber interview', 1), ('understandable', 1), ('unordered map', 1), ('vector', 1), ('video', 1), ('wrong', 1), ('youtube', 1), ('zea7ot', 1), ('zoho', 1)]"
75,Sort Colors,https://leetcode.com/problems/sort-colors,"Given an array nums with n objects colored red, white, or blue, sort them in-place so that objects of the same color are adjacent, with the colors in the order red, white, and blue.

We will use the integers 0, 1, and 2 to represent the color red, white, and blue, respectively.","['array', 'two-pointers', 'sort']",Medium,5244,301,1335338,667808,"[""Sort List"", ""Wiggle Sort"", ""Wiggle Sort II""]","[('java', 101), ('cpp', 84), ('c++', 82), ('python', 75), ('one-pass', 43), ('javascript', 38), ('python 3', 37), ('constant space', 33), ('java-solution', 31), ('one pass', 27), ('python3', 20), ('cpp solution', 19), ('dutch national flag', 19), ('two-pointers', 19), ('easy-understanding', 18), ('solution', 18), ('constant-space', 14), ('easy', 11), ('easy-understand', 11), ('one pass solution', 11), ('0ms', 10), ('c#', 10), ('cpp easy', 10), ('explained', 10), ('dutch flag method', 9), ('characters', 8), ('easy-undestand', 8), ('leetcode 340', 8), ('linear time', 8), ('simple', 8), ('100 faster', 7), ('quick sort', 7), ('sort', 7), ('sort color', 7), ('sorting', 7), ('time-complexity', 7), ('two-pointer', 7), ('3 way partitioning', 6), ('c', 6), ('c++ code', 6), ('easy code', 6), ('eric programming leetcode', 6), ('golang', 6), ('javascript solution', 6), ('leetcode sliding window', 6), ('onepass', 6), ('programming leetcode', 6), ('array', 5), ('in-place', 5), ('swift', 5), ('clean code', 4), ('commented', 4), ('dutch-national-flag', 4), ('easy-to-understand', 4), ('easytounderstand', 4), ('one-liner', 4), ('quicksort', 4), ('scala', 4), ('two pointers', 4), ('100 speed', 3), ('3 pointers', 3), ('3-way', 3), ('accepted', 3), ('c++11', 3), ('counter', 3), ('counting-sort', 3), ('explanation', 3), ('fast', 3), ('fast and simple', 3), ('fastest', 3), ('hashmap', 3), ('invariant', 3), ('one liner', 3), ('partition', 3), ('pointers', 3), ('rust', 3), ('short', 3), ('single pass', 3), ('sort-color', 3), ('swap', 3), ('two pass', 3), ('two-pass', 3), ('#java #easy-understand', 2), ('#sort', 2), ('0 ms', 2), ('1 pass', 2), ('c++ solution', 2), ('comments added', 2), ('concise', 2), ('constant', 2), ('constant memory', 2), ('count-sort', 2), ('csharp', 2), ('dnf', 2), ('easiest', 2), ('easysolution', 2), ('easyunderstanding', 2), ('explanations', 2), ('fasterthan100', 2), ('go', 2), ('help', 2), ('intuitive', 2), ('kotlin', 2), ('linear', 2), ('linear-time', 2), ('merge sort', 2), ('o1space', 2), ('one-loop', 2), ('pointer', 2), ('pyhton3', 2), ('quicksort-partition', 2), ('ruby', 2), ('run time error', 2), ('runtime', 2), ('runtime-error', 2), ('short code', 2), ('simple solution', 2), ('sorted array', 2), ('space-complexity', 2), ('switch-case', 2), ('tle', 2), ('typescript', 2), ('works-on-my-machine', 2), ('wrong-answer', 2), ('#array', 1), ('#c++', 1), ('#counting-sort', 1), ('#cpp', 1), ('#easy-understanding', 1), ('#microsoft', 1), ('#python', 1), ('#python 3', 1), ('#python3', 1), ('#twopointer', 1), ('#twopointerapproach', 1), ('0ms-solution', 1), ('100 bst', 1), ('100 faster cpp', 1), ('2 pointer', 1), ('2 pointers', 1), ('2pass', 1), ('2pointers', 1), ('3 pointer', 1), ('3-pointers', 1), ('3pointer', 1), ('3ways', 1), ('accepted 0ms', 1), ('amazon', 1), ('amazon interview', 1), ('array-sort', 1), ('awesome samriddhi', 1), ('beats 100', 1), ('beginner friendly', 1), ('binary search', 1), ('binary-search', 1), ('bubble sort', 1), ('bubble-sort', 1), ('bucket-sort', 1), ('c++ ac', 1), ('c++ easy to understand', 1), ('c++solution', 1), ('clean', 1), ('cleanest', 1), ('clear-understanding', 1), ('code with explanation', 1), ('color', 1), ('comments', 1), ('constant-space-iterative', 1), ('count', 1), ('count sort', 1), ('counting algorithm', 1), ('counting sort', 1), ('cpp doubt', 1), ('cpp-solution', 1), ('defaultdict', 1), ('detailed explanation', 1), ('diagram', 1), ('easy to unders', 1), ('easy to understand', 1), ('easy understanding', 1), ('easy-implementation', 1), ('easytoundersatand', 1), ('easytounderstamd', 1), ('error', 1), ('es6', 1), ('explanation of logic', 1), ('facebook intern', 1), ('faceebook', 1), ('faster', 1), ('faster than 100', 1), ('faster than 100.00', 1), ('fastest java slution', 1), ('fastest solution', 1), ('flagpoleproblem', 1), ('frequency table', 1), ('frequencycounting', 1), ('fuck noobs', 1), ('generalized', 1), ('github', 1), ('go-solution', 1), ('golang-solution', 1), ('google interview', 1), ('google phone screen', 1), ('hash table', 1), ('hash-function', 1), ('improvement-needed', 1), ('iteration', 1), ('iterator', 1), ('java ac solution', 1), ('java simple', 1), ('java-8', 1), ('js', 1), ('kotlinvim', 1), ('less than 39mb', 1), ('lsd', 1), ('map-stl', 1), ('merge-sort', 1), ('mrmgaician', 1), ('multiset', 1), ('noob approach', 1), ('number-sort', 1), ('one', 1), ('one line', 1), ('one line answer', 1), ('oneline', 1), ('oneliner', 1), ('optimal solution', 1), ('other-solutions', 1), ('overflow', 1), ('palentir', 1), ('pass', 1), ('perl', 1), ('php', 1), ('pivot', 1), ('prove', 1), ('python2', 1), ('pythonic', 1), ('pythonpython3', 1), ('question-not-clear', 1), ('quick-sort', 1), ('recursion', 1), ('recursive', 1), ('recursively', 1), ('recusive', 1), ('ritik', 1), ('samsung', 1), ('selection sort', 1), ('short solution', 1), ('shorter', 1), ('simple clear c++ solution', 1), ('simplest', 1), ('singleline', 1), ('solution-sharing-cpp', 1), ('sort-function', 1), ('space-efficient', 1), ('stl', 1), ('swif', 1), ('switch', 1), ('testcase-wrong', 1), ('three pointer', 1), ('three pointers', 1), ('three solutions', 1), ('three-pointer', 1), ('three-pointers', 1), ('three-way-partition', 1), ('triple pointer', 1), ('two', 1), ('two passes', 1), ('two pointer', 1), ('two pointer technique', 1), ('understandable', 1), ('updowndota', 1), ('upvote', 1), ('very easy', 1), ('video explanation', 1), ('video-explanation', 1), ('well-explained', 1), ('whileloop', 1)]"
74,Search a 2D Matrix,https://leetcode.com/problems/search-a-2d-matrix,"Write an efficient algorithm that searches for a value in an m x n matrix. This matrix has the following properties:


	Integers in each row are sorted from left to right.
	The first integer of each row is greater than the last integer of the previous row.","['array', 'binary-search']",Medium,3181,195,1158344,443442,"[""Search a 2D Matrix II""]","[('binary-search', 176), ('java', 109), ('python', 66), ('c++', 64), ('cpp', 60), ('python 3', 50), ('binary search', 43), ('java-solution', 34), ('javascript', 29), ('binarysearch', 27), ('python3', 22), ('solution', 18), ('easy', 15), ('easy-understanding', 14), ('matrix', 13), ('simple', 12), ('c#', 10), ('cpp solution', 10), ('golang', 8), ('iterative', 8), ('c', 7), ('fast', 7), ('short', 7), ('simple solution', 7), ('time-complexity', 7), ('easy-undestand', 6), ('javascript solution', 5), ('recursion', 5), ('stl', 5), ('easy-to-understand', 4), ('easy-understand', 4), ('explained', 4), ('go', 4), ('java ac solution', 4), ('search a 2d matrix', 4), ('2d-array', 3), ('beats 100', 3), ('bisect', 3), ('easytounderstand', 3), ('efficient solution', 3), ('explained solution', 3), ('fast and simple', 3), ('fastest', 3), ('golang-solution', 3), ('js', 3), ('recursive', 3), ('ruby', 3), ('swift', 3), ('#binarysearch', 2), ('100 faster runtime', 2), ('array', 2), ('binary search algorithm', 2), ('c++ code', 2), ('clean code', 2), ('cpp easy', 2), ('double pointer', 2), ('easy understanding', 2), ('easy undestanding', 2), ('error', 2), ('explanations', 2), ('fast-solution', 2), ('go-solution', 2), ('help needed', 2), ('iteratively', 2), ('java solution', 2), ('kotlin', 2), ('linear search', 2), ('linear time', 2), ('performance', 2), ('php', 2), ('simple clear c++ solution', 2), ('solution-javascript', 2), ('test-case-too-weak', 2), ('time-limit-exceeded', 2), ('vector', 2), ('#binary-search', 1), ('#iteration', 1), ('#java', 1), ('#linearsearch', 1), ('#python', 1), ('#python 3', 1), ('01 memory', 1), ('0ms', 1), ('100 faster', 1), ('100 faster cpp', 1), ('100 speed', 1), ('1ms', 1), ('8ms', 1), ('ac solution', 1), ('accepted', 1), ('algorithms', 1), ('array traversing', 1), ('awesome samriddhi', 1), ('beat 100', 1), ('beginner friendly', 1), ('beginners', 1), ('best explaination', 1), ('binary seach', 1), ('binary search c++', 1), ('binary search tree', 1), ('binary-search-explanation', 1), ('binarysearh', 1), ('binay search', 1), ('bisection search', 1), ('bottom up approach', 1), ('c programming', 1), ('c++ binary-search', 1), ('c++ solution', 1), ('ceiling of an element', 1), ('codedecks', 1), ('commnted', 1), ('compact', 1), ('constant-space', 1), ('constant-space-iterative', 1), ('cpp doubt', 1), ('different approaches', 1), ('divid and conquer', 1), ('divide and conquer', 1), ('divide-and-conquer', 1), ('dshah14', 1), ('easiest', 1), ('easy sloution', 1), ('editorial', 1), ('efficient', 1), ('empty vector', 1), ('es6', 1), ('expalanation', 1), ('explain', 1), ('explaination', 1), ('explanation', 1), ('explanation of logic', 1), ('facebook', 1), ('fastest java slution', 1), ('fastest search', 1), ('for', 1), ('for loop', 1), ('golang solution', 1), ('hashmap', 1), ('improve', 1), ('java-8', 1), ('java8', 1), ('js javascript', 1), ('kotlinvim', 1), ('linear seach', 1), ('log mn', 1), ('logarithmic time', 1), ('logical thinking', 1), ('logn', 1), ('loop', 1), ('lowerbound', 1), ('matrix-search', 1), ('medium', 1), ('most fast', 1), ('no binary', 1), ('on+m', 1), ('optimal solution', 1), ('optimisation', 1), ('optimized', 1), ('other-solutions', 1), ('pointer', 1), ('problem', 1), ('pyhton', 1), ('python2', 1), ('python3.8', 1), ('readable', 1), ('recurision', 1), ('recursively', 1), ('ritik', 1), ('run time error', 1), ('run-time-error', 1), ('runtime-error', 1), ('scala', 1), ('searching', 1), ('set', 1), ('shortest', 1), ('single loop', 1), ('slow', 1), ('solution-sharing-cpp', 1), ('solution-sharing-python', 1), ('space o1', 1), ('space-complexity', 1), ('staircase search', 1), ('std', 1), ('stl algorithms', 1), ('straight-forward', 1), ('suggestion', 1), ('swift5', 1), ('test-suite', 1), ('three-lines', 1), ('time complexity', 1), ('time m+n', 1), ('two pointers', 1), ('two-methods', 1), ('two-pointer', 1), ('understandable', 1), ('vector 2d', 1), ('video solution', 1), ('video-explanation', 1), ('without binary search', 1), ('works-on-my-machine', 1), ('wrong-answer', 1), ('young-tableau', 1)]"
73,Set Matrix Zeroes,https://leetcode.com/problems/set-matrix-zeroes,"Given an m x n matrix. If an element is 0, set its entire row and column to 0. Do it in-place.

Follow up:


	A straight forward solution using O(mn) space is probably a bad idea.
	A simple improvement uses O(m + n) space, but still not the best solution.
	Could you devise a constant space solution?",['array'],Medium,3376,367,945551,422707,"[""Game of Life""]","[('python', 49), ('java', 46), ('constant-space', 27), ('c++', 26), ('cpp', 25), ('javascript', 24), ('python 3', 22), ('constant space', 13), ('python3', 13), ('easy-understanding', 12), ('solution', 12), ('easy-undestand', 9), ('space-complexity', 9), ('cpp solution', 8), ('matrix', 8), ('c#', 7), ('in-place', 7), ('easy-understand', 6), ('golang', 6), ('simple', 6), ('time-complexity', 6), ('easy', 5), ('wrong-answer', 5), ('accepted', 4), ('array', 4), ('easy-to-understand', 4), ('java-solution', 4), ('ruby', 4), ('bfs', 3), ('go-solution', 3), ('golang-solution', 3), ('set matrix zeroes', 3), ('simple solution', 3), ('swift', 3), ('100 speed', 2), ('best-submission', 2), ('bfs python', 2), ('boolean', 2), ('c', 2), ('cpp easy', 2), ('easytounderstand', 2), ('efficient solution', 2), ('explanation', 2), ('fast', 2), ('fast and simple', 2), ('go', 2), ('javascript solution', 2), ('js', 2), ('o1', 2), ('optimal', 2), ('python2', 2), ('run-time-error', 2), ('set-matrix-zeroes', 2), ('time-complexity-o', 2), ('video', 2), ('youtube', 2), ('#const-space', 1), ('#java', 1), ('#javascript', 1), ('0n', 1), ('100 beat', 1), ('100 faster', 1), ('100 space', 1), ('10ms', 1), ('1ms', 1), ('1ms runtime', 1), ('algorithm', 1), ('amazon', 1), ('amazon interview', 1), ('analysis', 1), ('array of set', 1), ('bad description', 1), ('bit', 1), ('bit-mask', 1), ('brilliant-idea', 1), ('brute force', 1), ('c++ code', 1), ('c++ easy to understand', 1), ('ccti', 1), ('coding challenge', 1), ('concise-solution', 1), ('constant memory', 1), ('constant-space-iterative', 1), ('csharp', 1), ('dfs', 1), ('easy to read', 1), ('easy to understand', 1), ('easy to understandd', 1), ('easy understanding', 1), ('easysolution', 1), ('elegant', 1), ('expalanation', 1), ('explaination', 1), ('explanations', 1), ('fast-solution', 1), ('google', 1), ('google interview', 1), ('hashtable', 1), ('help', 1), ('helper functions', 1), ('idea', 1), ('illustration', 1), ('images', 1), ('improve', 1), ('in-place operation', 1), ('in-space', 1), ('inplace', 1), ('interview question', 1), ('iterative', 1), ('java simple', 1), ('kotlin', 1), ('kotlinvim', 1), ('leetcode', 1), ('linear memory', 1), ('must-do', 1), ('o1space', 1), ('optimal solution', 1), ('optimized', 1), ('performance', 1), ('php', 1), ('php solution', 1), ('pyhton3', 1), ('python3.8', 1), ('pythonpython3', 1), ('queue', 1), ('readable', 1), ('recursion', 1), ('runtime-error', 1), ('set', 1), ('setmatrixzeroes', 1), ('sets', 1), ('short', 1), ('short code', 1), ('simple clear c++ solution', 1), ('simplesweet', 1), ('solution c++', 1), ('solution-javascript', 1), ('solution-python', 1), ('solution-sharing-cpp', 1), ('space-efficient', 1), ('space-optimized', 1), ('test-case', 1), ('time-limit-exceeded', 1), ('traversal', 1), ('two-pointers', 1), ('unorderedmap', 1), ('vector', 1), ('vector 2d', 1), ('works-on-my-machine', 1), ('xjq', 1), ('zeromatrix', 1)]"
72,Edit Distance,https://leetcode.com/problems/edit-distance,"Given two strings word1 and word2, return the minimum number of operations required to convert word1 to word2.

You have the following three operations permitted on a word:


	Insert a character
	Delete a character
	Replace a character","['string', 'dynamic-programming']",Hard,5531,66,744574,352023,"[""One Edit Distance"", ""Delete Operation for Two Strings"", ""Minimum ASCII Delete Sum for Two Strings"", ""Uncrossed Lines""]","[('dynamic programming', 104), ('dynamic-programming', 52), ('java', 50), ('python', 45), ('memoization', 34), ('c++', 33), ('cpp', 33), ('dp', 31), ('recursion', 18), ('python 3', 15), ('javascript', 12), ('solution', 12), ('edit-distance', 11), ('python3', 9), ('c#', 8), ('easy-understanding', 8), ('java-solution', 8), ('levenshtein distance', 8), ('edit distance', 7), ('recursive', 7), ('top down dp', 7), ('cpp solution', 6), ('levenshtein', 5), ('scala', 5), ('bottom up', 4), ('c++ code', 4), ('easy-understand', 4), ('levenshtein-distance', 4), ('tabulation', 4), ('accepted', 3), ('backtracking', 3), ('explanation of logic', 3), ('python2', 3), ('time-complexity', 3), ('top-down', 3), ('beginner friendly', 2), ('bottom-up', 2), ('bottomup', 2), ('c# dp', 2), ('clean code', 2), ('comments', 2), ('comments added', 2), ('cpp easy', 2), ('d++', 2), ('distance', 2), ('dp-programming', 2), ('dpp', 2), ('dynamic programing', 2), ('dynamic programmin', 2), ('explaination', 2), ('explained', 2), ('fast-solution', 2), ('golang', 2), ('javascript solution', 2), ('kotlin', 2), ('medium', 2), ('php', 2), ('pyhton 3', 2), ('simple solution', 2), ('time-limit-exceeded', 2), ('tle', 2), ('top down', 2), ('video', 2), ('wrong test case', 2), ('zea7ot', 2), ('#72', 1), ('1-d', 1), ('2d dynamic programming', 1), ('2d-array', 1), ('2d-dp', 1), ('ac', 1), ('ac solution', 1), ('algorithms', 1), ('beats 100', 1), ('beats 90', 1), ('bottom up approach', 1), ('bottom up dp', 1), ('bottom-up approach', 1), ('bottom-up-algorithm', 1), ('bottoms-up', 1), ('c++ dynamic programming', 1), ('c++ solution', 1), ('clarification', 1), ('concise', 1), ('consice', 1), ('cplusplus', 1), ('cpp-solution', 1), ('csharp', 1), ('detailed explanation', 1), ('dfs', 1), ('dfs simple solution', 1), ('dp python', 1), ('dp-2d', 1), ('dp-techqique', 1), ('dyanmic programming', 1), ('easiest', 1), ('easy to understand', 1), ('easy-to-understand', 1), ('easy-undestand', 1), ('easytounderstand', 1), ('edit', 1), ('explanation with code', 1), ('explanation with logic', 1), ('explanations', 1), ('fast', 1), ('fast and simple', 1), ('full-solution', 1), ('functional', 1), ('functional programming', 1), ('give stars and subscribe', 1), ('go', 1), ('golang-solution', 1), ('golf', 1), ('improve', 1), ('interview', 1), ('iteration', 1), ('iterative', 1), ('iteratively', 1), ('itereative', 1), ('java ac solution', 1), ('java8', 1), ('javascript recursive', 1), ('js', 1), ('lcs', 1), ('linear space', 1), ('linear-space', 1), ('loop', 1), ('lru-cache', 1), ('matrix', 1), ('memoisation', 1), ('memorization', 1), ('memoziation', 1), ('need-help', 1), ('nonrecursive', 1), ('one-edit-distance', 1), ('optimal substructure', 1), ('pictorial', 1), ('picture explanation', 1), ('pyhton', 1), ('python dp', 1), ('pythonpython3', 1), ('recurrance', 1), ('recursion memoization', 1), ('recursion palindrome', 1), ('recursive dp', 1), ('recursive-dfs', 1), ('recursively', 1), ('recusion', 1), ('review', 1), ('ruby', 1), ('rust', 1), ('share-solution', 1), ('short', 1), ('simple', 1), ('simple clear c++ solution', 1), ('solution-sharing-c', 1), ('solution-sharing-cpp', 1), ('space optimized', 1), ('space-compexity', 1), ('space-complexity', 1), ('space-optimized', 1), ('step by step', 1), ('swift', 1), ('tabular', 1), ('test-case', 1), ('top-down dp', 1), ('topdown', 1), ('video explaination', 1), ('video-explanation', 1), ('well-explained', 1), ('with explanation', 1), ('wrong', 1), ('wrong-test-cases', 1)]"
71,Simplify Path,https://leetcode.com/problems/simplify-path,"Given a string path, which is an absolute path (starting with a slash '/') to a file or directory in a Unix-style file system, convert it to the simplified canonical path.

In a Unix-style file system, a period '.' refers to the current directory, a double period '..' refers to the directory up a level, and any multiple consecutive slashes (i.e. '//') are treated as a single slash '/'. For this problem, any other format of periods such as '...' are treated as file/directory names.

The canonical path should have the following format:


	The path starts with a single slash '/'.
	Any two directories are separated by a single slash '/'.
	The path does not end with a trailing '/'.
	The path only contains the directories on the path from the root directory to the target file or directory (i.e., no period '.' or double period '..')


Return the simplified canonical path.","['string', 'stack']",Medium,358,103,789197,276479,[],"[('stack', 67), ('java', 44), ('python', 35), ('c++', 28), ('cpp', 20), ('stacks', 18), ('javascript', 17), ('solution', 13), ('easy-understanding', 12), ('python 3', 12), ('java-solution', 11), ('c#', 9), ('deque', 9), ('golang', 9), ('simple', 7), ('explained', 6), ('python3', 6), ('accepted', 5), ('cpp solution', 5), ('string', 5), ('easy', 4), ('stack-based', 4), ('swift', 4), ('video-explanation', 4), ('easy-to-understand', 3), ('easy-understand', 3), ('fast', 3), ('go', 3), ('interview', 3), ('rust', 3), ('stringbuilder', 3), ('#stack', 2), ('c', 2), ('clean code', 2), ('constant-space', 2), ('easytounderstand', 2), ('fast-solution', 2), ('kotlin', 2), ('list', 2), ('ruby', 2), ('simplifypath', 2), ('string-operation', 2), ('stringstream', 2), ('xjq', 2), ('#easysolution', 1), ('#java-solution', 1), ('#python', 1), ('#python 3', 1), ('#stacks', 1), ('100 faster', 1), ('100 space', 1), ('5ms', 1), ('99.63 faster', 1), ('beats 100', 1), ('beats 98', 1), ('benchmark', 1), ('c++ solution', 1), ('commented', 1), ('comments-added', 1), ('detailed explanation', 1), ('dictionaries', 1), ('dynamic-programming', 1), ('easiest', 1), ('east-understanding', 1), ('easy code', 1), ('easy java solution', 1), ('easy sloution', 1), ('easy to understand', 1), ('easy-undestand', 1), ('easysolution', 1), ('explain', 1), ('facebook phone interview', 1), ('functional', 1), ('functional-programming', 1), ('go lang', 1), ('go-solution', 1), ('golang-solution', 1), ('improve', 1), ('inplace', 1), ('iter', 1), ('iterator', 1), ('javascript solution', 1), ('js', 1), ('js javascript', 1), ('kotlinvim', 1), ('less memory', 1), ('linear time', 1), ('linq', 1), ('microsoft', 1), ('most efficient solution', 1), ('nutanix', 1), ('one pass', 1), ('optimal', 1), ('optimisation', 1), ('os', 1), ('path', 1), ('pattern-matching', 1), ('performance', 1), ('php', 1), ('pointers', 1), ('question-not-clear', 1), ('rajawatbanna', 1), ('regex', 1), ('regexp', 1), ('scala', 1), ('simplesolution', 1), ('simply-path', 1), ('single-pass', 1), ('solution-sharing-cpp', 1), ('split', 1), ('split-list', 1), ('split-string', 1), ('stack-implementation', 1), ('stackoverflow', 1), ('stars move the article up', 1), ('string manipulation', 1), ('string parsing', 1), ('stringbuffer', 1), ('strings', 1), ('test', 1), ('test-case', 1), ('test-cases', 1), ('time-complexity', 1), ('trees', 1), ('two-pass', 1), ('two-pointers', 1), ('typescript', 1), ('unix-path', 1), ('vec', 1), ('vector', 1), ('wrong-answer', 1)]"
70,Climbing Stairs,https://leetcode.com/problems/climbing-stairs,"You are climbing a staircase. It takes n steps to reach the top.

Each time you can either climb 1 or 2 steps. In how many distinct ways can you climb to the top?",['dynamic-programming'],Easy,6448,207,1943057,948626,"[""Min Cost Climbing Stairs"", ""Fibonacci Number"", ""N-th Tribonacci Number""]","[('dynamic programming', 169), ('java', 116), ('python', 101), ('c++', 89), ('memoization', 81), ('dynamic-programming', 78), ('cpp', 70), ('dp', 63), ('fibonacci', 51), ('python 3', 50), ('recursion', 45), ('javascript', 43), ('solution', 32), ('python3', 30), ('java-solution', 23), ('c#', 18), ('fibonacci sequence', 15), ('recursive', 15), ('golang', 14), ('c', 13), ('c++ code', 13), ('fast', 13), ('cpp solution', 12), ('easy', 12), ('tabulation', 12), ('fibonacci-pattern', 11), ('simple', 11), ('easy-understand', 10), ('easy-understanding', 10), ('short', 10), ('swift', 10), ('dp-techqique', 9), ('climbing stairs', 8), ('easy-undestand', 8), ('combinatorics', 7), ('golang-solution', 7), ('iterative', 7), ('easy to understand', 6), ('javascript solution', 6), ('math', 6), ('ruby', 6), ('climbstairs', 5), ('combination', 5), ('constant space', 5), ('dp-programming', 5), ('easy-to-understand', 5), ('fast and simple', 5), ('kotlin', 5), ('linear time', 5), ('rust', 5), ('simple solution', 5), ('time-limit-exceeded', 5), ('100 speed', 4), ('bottom up', 4), ('bottom-up', 4), ('c++ solution', 4), ('constant-space', 4), ('csharp', 4), ('easiest', 4), ('easytounderstand', 4), ('fast-solution', 4), ('improve', 4), ('java ac solution', 4), ('oneliner', 4), ('permutations', 4), ('python2', 4), ('scala', 4), ('0ms-solution', 3), ('beats 100', 3), ('beginner friendly', 3), ('bottom-up-algorithm', 3), ('cache', 3), ('dfs', 3), ('dynamic programmin', 3), ('explained', 3), ('faster than 100.00', 3), ('fibonacci-number', 3), ('go', 3), ('go lang', 3), ('hashmap', 3), ('javascript recursive', 3), ('js', 3), ('memoziation', 3), ('o1', 3), ('run-time-error', 3), ('top down', 3), ('top-down dp', 3), ('wrong-answer', 3), ('#javascript', 2), ('#recursive', 2), ('0ms', 2), ('100 faster runtime', 2), ('accepted', 2), ('algorithm', 2), ('amazon', 2), ('array', 2), ('bottoms-up', 2), ('bottomup', 2), ('climbing-stairs', 2), ('climbingstairs', 2), ('closed-form', 2), ('combinations', 2), ('combinatories', 2), ('cpp easy', 2), ('dyanmic programming', 2), ('dynamic programing', 2), ('efficient', 2), ('explaination', 2), ('explained solution', 2), ('fibonaccisequence', 2), ('formula', 2), ('go-solution', 2), ('Intel', 2), ('intutive', 2), ('iteratively', 2), ('javascrip', 2), ('map', 2), ('maths', 2), ('matrix', 2), ('matrix exponentiation', 2), ('memo', 2), ('memorization', 2), ('oneline', 2), ('optimal', 2), ('permutation', 2), ('python combinatorics', 2), ('recursion memoization', 2), ('recursion palindrome', 2), ('recursion-power-logn', 2), ('recursive dp', 2), ('recurssion', 2), ('runtime-error', 2), ('short code', 2), ('simple clear c++ solution', 2), ('simplest', 2), ('solution-sharing-cpp', 2), ('time-complexity', 2), ('top down dp', 2), ('top-down', 2), ('understandable', 2), ('upvote', 2), ('#c', 1), ('#c++', 1), ('#dp', 1), ('#dynamic-programming', 1), ('#memoization', 1), ('#recursion', 1), ('0ms runtime', 1), ('100', 1), ('100 faster', 1), ('100 memory', 1), ('100 time', 1), ('1ms', 1), ('2 pointers', 1), ('2 steps', 1), ('2 variable approach', 1), ('5 liner', 1), ('5 lines', 1), ('70', 1), ('alternatives', 1), ('and', 1), ('answer', 1), ('approach', 1), ('awesome samriddhi', 1), ('backtrack', 1), ('basic concept', 1), ('basicmath', 1), ('best explaination', 1), ('best time complexity', 1), ('biginteger', 1), ('binomial coefficient', 1), ('bothdpandmemoziation', 1), ('botton-up dp', 1), ('c code', 1), ('c plus plus', 1), ('c++ easy to understand', 1), ('c++11', 1), ('caching', 1), ('check', 1), ('clean', 1), ('closure', 1), ('codingtuting', 1), ('combination of n', 1), ('comments', 1), ('comments added', 1), ('compile-error', 1), ('concise', 1), ('constant time', 1), ('constant-time', 1), ('contest', 1), ('cool', 1), ('cplusplus', 1), ('cpp soltuion', 1), ('cpp-functional', 1), ('cpp-solution', 1), ('description-disambiguation', 1), ('dictionairy', 1), ('dictionary', 1), ('dictonary', 1), ('divideconquer', 1), ('dp python', 1), ('dp top down', 1), ('dynamic', 1), ('dynamic-allocation', 1), ('dynamicprogramming', 1), ('dynammic programming', 1), ('easy code', 1), ('easy to read', 1), ('easy understand', 1), ('easy understanding', 1), ('easy undestanding', 1), ('easy-understsand', 1), ('easytoundersatand', 1), ('efficient solution', 1), ('error', 1), ('es6', 1), ('esay', 1), ('esay-understand', 1), ('expalnation', 1), ('explanation with logic', 1), ('factorial', 1), ('fast solution', 1), ('fast-matrix-exponentiation', 1), ('faster', 1), ('fasterthan100', 1), ('fastest', 1), ('fastest c++ solution', 1), ('fibo', 1), ('fresher', 1), ('github', 1), ('google', 1), ('great', 1), ('help', 1), ('historic', 1), ('ios', 1), ('iterative solution', 1), ('iterative-solution', 1), ('iteratve-recursive', 1), ('java solution', 1), ('javasciprt', 1), ('jigneshpanchal', 1), ('js javascript', 1), ('language', 1), ('leetcode-only', 1), ('linear-time', 1), ('logarithmic time', 1), ('logn', 1), ('lru-cache', 1), ('math-solution', 1), ('mathematic', 1), ('mathematical solution', 1), ('mathematics', 1), ('meiyaowen', 1), ('memoized', 1), ('memory-efficient', 1), ('memory-limit-exceeded', 1), ('morgan stanley', 1), ('mrmagician', 1), ('no recursion', 1), ('nodejs', 1), ('non-recursion', 1), ('non-recursive', 1), ('one line', 1), ('one loop', 1), ('one-liner', 1), ('onelinecode', 1), ('optimized', 1), ('php', 1), ('php solution', 1), ('precomputation', 1), ('python3.8', 1), ('racket', 1), ('readability', 1), ('readable', 1), ('recrusive', 1), ('recurision', 1), ('recurrence', 1), ('recursion formula', 1), ('recursion stack', 1), ('recursive solution', 1), ('recursive-dfs', 1), ('recursive-solution', 1), ('recusion', 1), ('ritik', 1), ('runtime', 1), ('sandeepkumar', 1), ('self-explanatory', 1), ('shortest', 1), ('simpe', 1), ('simple python solution', 1), ('simple-solution', 1), ('single pass', 1), ('sliding window', 1), ('smallest', 1), ('solition-sharing', 1), ('solution-javascript', 1), ('solution-python', 1), ('solution-sharing-python', 1), ('space o1', 1), ('space-complexity', 1), ('stack', 1), ('staircase', 1), ('stl', 1), ('swift5', 1), ('tail-recursion', 1), ('three-lines', 1), ('triple step', 1), ('typescript', 1), ('ultra easy', 1), ('using', 1), ('very easy to understand', 1), ('video', 1), ('video explaination', 1), ('video explanation', 1), ('video solution', 1), ('video-explanation', 1), ('while-loop', 1), ('why not coin change', 1), ('works-on-my-machine', 1)]"
69,Sqrt(x),https://leetcode.com/problems/sqrtx,"Given a non-negative integer x, compute and return the square root of x.

Since the return type is an integer, the decimal digits are truncated, and only the integer part of the result is returned.","['math', 'binary-search']",Easy,1950,2347,2022201,718080,"[""Pow(x, n)"", ""Valid Perfect Square""]","[('binary-search', 85), ('c++', 62), ('java', 59), ('python', 57), ('cpp', 44), ('python 3', 32), ('javascript', 26), ('binary search', 24), ('python3', 24), ('solution', 16), ('binarysearch', 14), ('simple', 11), ('sqrt', 11), ('easy-understand', 10), ('easy-understanding', 10), ('cpp solution', 9), ('golang', 8), ('newtons-method', 8), ('java-solution', 7), ('swift', 7), ('cpp easy', 6), ('easiest', 6), ('easy', 6), ('easytounderstand', 6), ('fast', 6), ('improve', 6), ('sqrtx', 6), ('algorithms', 5), ('c#', 5), ('easy-undestand', 5), ('fast and simple', 5), ('short', 5), ('0ms', 4), ('c', 4), ('c++ code', 4), ('easy-to-understand', 4), ('one-liner', 4), ('simple solution', 4), ('time-complexity', 4), ('explained', 3), ('fast-solution', 3), ('go', 3), ('golang-solution', 3), ('iterative', 3), ('javascript solution', 3), ('kotlin', 3), ('math', 3), ('overflow', 3), ('php', 3), ('ruby', 3), ('square root', 3), ('time-limit-exceeded', 3), ('#javascript', 2), ('#math', 2), ('100 faster runtime', 2), ('accepted', 2), ('bit-manipulation', 2), ('c++ solution', 2), ('c++11', 2), ('clean', 2), ('clean code', 2), ('constant-space', 2), ('error', 2), ('go-solution', 2), ('js', 2), ('log n', 2), ('logn', 2), ('memory-efficient', 2), ('newton law', 2), ('newton-raphson', 2), ('numerical methods', 2), ('one line', 2), ('one line solution', 2), ('php solution', 2), ('python2', 2), ('scala', 2), ('simplest', 2), ('#binary-search', 1), ('#c++', 1), ('#cpp', 1), ('#fasterthan100percent', 1), ('#java', 1), ('#java #easy-understand', 1), ('#java#sqrtfunction', 1), ('#python', 1), ('#solution', 1), ('#sqrt', 1), ('1 line', 1), ('1 liner', 1), ('1-liner', 1), ('100 bst', 1), ('100 faster', 1), ('100 faster cpp', 1), ('amazon', 1), ('babylonian method', 1), ('beginner friendly', 1), ('best', 1), ('binary search algorithm', 1), ('binary search tree', 1), ('binary-search-explanation', 1), ('binarysearh', 1), ('bit manipulation', 1), ('bitwise operation', 1), ('bottom up', 1), ('c language', 1), ('c++ binary search', 1), ('c++ easy to understand', 1), ('c++code', 1), ('chinese', 1), ('clarification', 1), ('clean-efficient-code', 1), ('cmath', 1), ('cpp clear', 1), ('cpp-solution', 1), ('csharp', 1), ('currying', 1), ('decimal', 1), ('digit-by-digit', 1), ('divide and conquer', 1), ('divideconquer', 1), ('dynamic programming', 1), ('easy to understand', 1), ('easy understand', 1), ('easy-solition', 1), ('easy-understsand', 1), ('explanation', 1), ('explanations4problem', 1), ('facebook', 1), ('faster than 90', 1), ('fastest', 1), ('fastest solution', 1), ('for-loop', 1), ('functional programming', 1), ('functional-programming', 1), ('go lang', 1), ('gradient descent', 1), ('interesting', 1), ('interview', 1), ('iteratively', 1), ('itereative', 1), ('java ac solution', 1), ('javascrip', 1), ('kotllin', 1), ('line', 1), ('log', 1), ('logarithm', 1), ('logarithmic time', 1), ('long-division', 1), ('machine learning', 1), ('maths', 1), ('meiyaowen', 1), ('method', 1), ('microsoft', 1), ('naive', 1), ('naive-solution', 1), ('newton', 1), ('one liner', 1), ('oneline', 1), ('optimized', 1), ('proper-solution', 1), ('pyhton3', 1), ('python3.8', 1), ('python3.9', 1), ('rajawatbanna', 1), ('readable', 1), ('recursion', 1), ('recursively', 1), ('rough estimation', 1), ('short solution', 1), ('simpler', 1), ('smallest', 1), ('smart', 1), ('solution by python', 1), ('solution-javascript', 1), ('solution-share', 1), ('solution-sharing-c', 1), ('solution-sharing-cpp', 1), ('sqrt-n', 1), ('square-root', 1), ('swift5', 1), ('tabulation', 1), ('time-limit-exceeded-java', 1), ('too easy', 1), ('two-different-solutions', 1), ('two-lines', 1), ('understandable', 1), ('using while loop', 1), ('video', 1), ('works-on-my-machine', 1), ('zero-liner', 1)]"
68,Text Justification,https://leetcode.com/problems/text-justification,"Given an array of words and a width maxWidth, format the text such that each line has exactly maxWidth characters and is fully (left and right) justified.

You should pack your words in a greedy approach; that is, pack as many words as you can in each line. Pad extra spaces ' ' when necessary so that each line has exactly maxWidth characters.

Extra spaces between words should be distributed as evenly as possible. If the number of spaces on a line do not divide evenly between words, the empty slots on the left will be assigned more spaces than the slots on the right.

For the last line of text, it should be left justified and no extra space is inserted between words.

Note:


	A word is defined as a character sequence consisting of non-space characters only.
	Each word's length is guaranteed to be greater than 0 and not exceed maxWidth.
	The input array words contains at least one word.",['string'],Hard,1016,1981,560304,170332,"[""Rearrange Spaces Between Words""]","[('java', 38), ('python', 33), ('cpp', 25), ('python 3', 16), ('solution', 16), ('easy-understand', 13), ('javascript', 11), ('easy-undestand', 10), ('c++', 9), ('c#', 8), ('wrong-answer', 7), ('easy', 5), ('greedy', 5), ('easy-to-understand', 4), ('java-solution', 4), ('text-justfication', 4), ('text-justification', 4), ('accepted', 3), ('dynamic-programming', 3), ('explained', 3), ('python3', 3), ('recursive', 3), ('string', 3), ('test-case', 3), ('testcase-wrong', 3), ('0ms', 2), ('100 speed', 2), ('beats 100', 2), ('clean', 2), ('clean code', 2), ('commented', 2), ('csharp', 2), ('easy-understanding', 2), ('fast', 2), ('golang', 2), ('google', 2), ('iterative', 2), ('justification', 2), ('linkedin', 2), ('mle', 2), ('ruby', 2), ('simple clear c++ solution', 2), ('simple solution', 2), ('straight-forward', 2), ('swift', 2), ('two-pointers', 2), ('100 beat', 1), ('100 faster', 1), ('100 memory', 1), ('100 space', 1), ('amazon', 1), ('auston', 1), ('beating-100-submissions', 1), ('brute-force', 1), ('bug', 1), ('bytedance', 1), ('c++14', 1), ('comments', 1), ('concise', 1), ('cpp solution', 1), ('databricks', 1), ('deque', 1), ('design', 1), ('detailed explanation', 1), ('dynam', 1), ('efficient', 1), ('explained solution', 1), ('faster', 1), ('faster than 99.41', 1), ('generalized', 1), ('golang-solution', 1), ('greedy approach', 1), ('implementation', 1), ('improve', 1), ('input', 1), ('iterator', 1), ('javascript solution', 1), ('js', 1), ('karat', 1), ('kotlin', 1), ('line', 1), ('linear time', 1), ('long', 1), ('loops', 1), ('memory-limit-exceeded', 1), ('oop', 1), ('optimized', 1), ('php', 1), ('php solution', 1), ('python2', 1), ('queue', 1), ('readable', 1), ('recursion', 1), ('robinhood', 1), ('run-time-error', 1), ('scala', 1), ('shooter', 1), ('short code', 1), ('simple', 1), ('simplest', 1), ('simulation', 1), ('solution-python', 1), ('solution-sharing-cpp', 1), ('solved', 1), ('straightforward', 1), ('stringbuilder', 1), ('test', 1), ('text', 1), ('twilio', 1), ('two-pointer', 1), ('uber', 1), ('understandable', 1), ('vague', 1), ('video', 1), ('video explaination', 1), ('well explained', 1), ('well-explained', 1), ('word-length-larger-than-l', 1), ('youtube', 1)]"
67,Add Binary,https://leetcode.com/problems/add-binary,"Given two binary strings a and b, return their sum as a binary string.","['math', 'string']",Easy,2739,341,1258439,597359,"[""Add Two Numbers"", ""Multiply Strings"", ""Plus One"", ""Add to Array-Form of Integer""]","[('python', 102), ('java', 85), ('python 3', 57), ('cpp', 54), ('c++', 47), ('javascript', 40), ('python3', 32), ('solution', 32), ('easy-understand', 21), ('simple', 19), ('easy-undestand', 17), ('easy-understanding', 16), ('one-liner', 15), ('cpp solution', 13), ('c#', 12), ('golang', 12), ('java-solution', 11), ('simple solution', 9), ('binary', 8), ('bit-manipulation', 8), ('easy', 7), ('fast', 7), ('short', 7), ('add binary', 6), ('bit manipulation', 6), ('c', 6), ('easy-to-understand', 6), ('string', 6), ('c++ code', 5), ('constant-space', 5), ('javascript solution', 5), ('add-binary', 4), ('bitwise', 4), ('bitwise operation', 4), ('cpp easy', 4), ('cpp-solution', 4), ('easiest', 4), ('explained', 4), ('fast and simple', 4), ('fast-solution', 4), ('go', 4), ('improve', 4), ('python2', 4), ('rust', 4), ('self-explanatory', 4), ('swift', 4), ('wrong-answer', 4), ('1 line', 3), ('accepted', 3), ('addition', 3), ('biginteger', 3), ('clean code', 3), ('csharp', 3), ('easytounderstand', 3), ('implementation', 3), ('math', 3), ('one line', 3), ('pythonic', 3), ('ruby', 3), ('solution-python', 3), ('stringbuilder', 3), ('time-complexity', 3), ('two-pointers', 3), ('#javascript', 2), ('0ms', 2), ('100 faster', 2), ('answer', 2), ('bit', 2), ('c++ solution', 2), ('clean-efficient-code', 2), ('clear', 2), ('commented', 2), ('cpp 100', 2), ('deque', 2), ('efficient', 2), ('efficient solution', 2), ('explanation of logic', 2), ('faster', 2), ('fastest', 2), ('go-solution', 2), ('golang-solution', 2), ('hashmap', 2), ('iterative', 2), ('java simple', 2), ('js', 2), ('kotlin', 2), ('linear time', 2), ('linear-complexity', 2), ('linear-time', 2), ('optimal', 2), ('python3.8', 2), ('pythonpython3', 2), ('recursion', 2), ('runtime-error', 2), ('stack-based', 2), ('stl', 2), ('string-operation', 2), ('test-case', 2), ('#accepted', 1), ('#easy-understand', 1), ('0 ms', 1), ('1 liner', 1), ('100', 1), ('100 space', 1), ('100 speed', 1), ('194', 1), ('2 pointers', 1), ('3lines', 1), ('4 liner', 1), ('40ms', 1), ('67', 1), ('add', 1), ('add strings', 1), ('addtwonumbers', 1), ('ascii', 1), ('basic approach', 1), ('beats 100', 1), ('beginner friendly', 1), ('best-submission', 1), ('bigint', 1), ('binary add', 1), ('binary-operation', 1), ('binray', 1), ('bit-by-bit-computation', 1), ('bit-operation', 1), ('bit-shift', 1), ('bitset', 1), ('bitwise-operators', 1), ('bloomberg', 1), ('c++ iterative sol', 1), ('carry', 1), ('character', 1), ('clarity', 1), ('commentary', 1), ('commented code', 1), ('comments', 1), ('concise', 1), ('decimal', 1), ('direct', 1), ('easy code', 1), ('easy to understand', 1), ('easy understanding', 1), ('easy undestanding', 1), ('easy-peasy', 1), ('easysolution', 1), ('efficiency', 1), ('elegant', 1), ('elegant solution', 1), ('explanations', 1), ('explanatory comments', 1), ('facebook', 1), ('faceebook', 1), ('fastest java slution', 1), ('fstring', 1), ('fun', 1), ('genuine code', 1), ('goalng', 1), ('heap-memory', 1), ('help me', 1), ('if-else', 1), ('improved', 1), ('inbuilt functions', 1), ('incorrect-test-case', 1), ('integer to string', 1), ('intuitive', 1), ('iterative way', 1), ('java ac solution', 1), ('java solution', 1), ('javacript', 1), ('keep it simple', 1), ('leetcode 67', 1), ('lifehack', 1), ('linear space', 1), ('linear-space', 1), ('linear-time-space', 1), ('logic', 1), ('math-solution', 1), ('maths', 1), ('minimalism', 1), ('move', 1), ('murod turaev', 1), ('no-extra-space', 1), ('noeffort', 1), ('number-format-exception', 1), ('numberformatexception', 1), ('numbers', 1), ('o n', 1), ('one pass', 1), ('one-line', 1), ('padding', 1), ('php', 1), ('php solution', 1), ('pyhton3', 1), ('python3.9', 1), ('pythpn3', 1), ('pyton3', 1), ('rajat', 1), ('readable', 1), ('recursive', 1), ('recursive solution', 1), ('regex', 1), ('remainder', 1), ('run-time-error', 1), ('saravana', 1), ('shortest', 1), ('simple python solution', 1), ('simple to understand', 1), ('simple-solution', 1), ('simpler', 1), ('simplesolution', 1), ('single line', 1), ('smallest', 1), ('solution-javascript', 1), ('solution-sharing-python', 1), ('stringbuilder in java', 1), ('sum', 1), ('sum of two integers', 1), ('swift5', 1), ('testcase-wrong', 1), ('time-limit-exceeded', 1), ('tiny', 1), ('tricks', 1), ('type-cast', 1), ('unique approach', 1), ('unit-test', 1), ('vector', 1), ('very simple', 1), ('well-explained', 1), ('well-named variables', 1), ('while-loop', 1), ('works-on-my-machine', 1), ('wrong-test-cases', 1), ('xor', 1)]"
66,Plus One,https://leetcode.com/problems/plus-one,"Given a non-empty array of decimal digits representing a non-negative integer, increment one to the integer.

The digits are stored such that the most significant digit is at the head of the list, and each element in the array contains a single digit.

You may assume the integer does not contain any leading zero, except the number 0 itself.",['array'],Easy,2313,3185,1959025,826918,"[""Multiply Strings"", ""Add Binary"", ""Plus One Linked List"", ""Add to Array-Form of Integer""]","[('python', 151), ('java', 123), ('python 3', 88), ('c++', 77), ('cpp', 76), ('javascript', 56), ('python3', 52), ('solution', 37), ('easy-understanding', 33), ('java-solution', 29), ('simple', 24), ('array', 20), ('golang', 20), ('simple solution', 18), ('plusone', 15), ('swift', 15), ('cpp solution', 14), ('easy', 14), ('plus one', 14), ('plus-one', 14), ('c#', 12), ('easy-understand', 12), ('easy-undestand', 11), ('0ms', 10), ('recursion', 10), ('easytounderstand', 9), ('golang-solution', 9), ('javascript solution', 9), ('c++ code', 8), ('explained', 8), ('go', 8), ('one-liner', 8), ('cpp easy', 7), ('easy-to-understand', 7), ('go-solution', 7), ('js', 7), ('short', 7), ('wrong-answer', 7), ('c', 6), ('fast and simple', 6), ('kotlin', 6), ('100 speed', 5), ('fastest', 5), ('ruby', 5), ('vector', 5), ('accepted', 4), ('arrays', 4), ('c++11', 4), ('efficient', 4), ('fast', 4), ('functional', 4), ('improve', 4), ('iteration', 4), ('linear time', 4), ('list', 4), ('math', 4), ('php', 4), ('recursive', 4), ('reduce', 4), ('run-time-error', 4), ('rust', 4), ('simplest', 4), ('solution-sharing-python', 4), ('#easy-understanding', 3), ('c++ solution', 3), ('comments', 3), ('easy solution', 3), ('easy understanding', 3), ('efficient solution', 3), ('explanation of logic', 3), ('fast-solution', 3), ('functional programming', 3), ('inplace', 3), ('oneline', 3), ('scala', 3), ('short code', 3), ('solution-python', 3), ('solution-sharing-cpp', 3), ('stack', 3), ('stl', 3), ('time-complexity', 3), ('#c++', 2), ('#python', 2), ('#python3', 2), ('0ms-solution', 2), ('100', 2), ('100 faster runtime', 2), ('100 memory', 2), ('beginner friendly', 2), ('biginteger', 2), ('c code', 2), ('carry', 2), ('carry-in-addition', 2), ('clean code', 2), ('concise-solution', 2), ('constant-space', 2), ('conversion', 2), ('easiest', 2), ('east-to-understand', 2), ('easysolution', 2), ('faster than 100.00', 2), ('functional-programming', 2), ('in-place', 2), ('iterative way', 2), ('java ac solution', 2), ('java simple', 2), ('javascipt', 2), ('kotllin', 2), ('list comprehension', 2), ('loop', 2), ('mathematical', 2), ('oneliner', 2), ('optimal', 2), ('php solution', 2), ('recusion', 2), ('reverse', 2), ('short solution', 2), ('string', 2), ('vector-operation', 2), ('while-loop', 2), ('works-on-my-machine', 2), ('#100percentfaster', 1), ('#90faster', 1), ('#cpp', 1), ('#easysolution', 1), ('#java', 1), ('#java #easy-understand', 1), ('#javascript', 1), ('#list', 1), ('#python 3', 1), ('0ms runtime', 1), ('1 line', 1), ('100 fast', 1), ('100 faster', 1), ('100 space', 1), ('100faster', 1), ('13 lines', 1), ('3ms', 1), ('4 lines', 1), ('4ms', 1), ('accepted solution', 1), ('addition', 1), ('amazon', 1), ('array functions', 1), ('array greedy', 1), ('arraylist', 1), ('beats 100', 1), ('beats 100 percent', 1), ('beginnerfriendly', 1), ('beginners', 1), ('bigint', 1), ('bool', 1), ('brute-force', 1), ('bug', 1), ('c#-solution', 1), ('c++ recursive solution', 1), ('cast', 1), ('chhikara', 1), ('clean', 1), ('collection', 1), ('commented', 1), ('comments added', 1), ('comments-added', 1), ('commetend', 1), ('constant memory', 1), ('constant space', 1), ('constant time', 1), ('convert to int', 1), ('count', 1), ('cpp doubt', 1), ('cpp-solution', 1), ('direct', 1), ('dynamic memory', 1), ('easy code', 1), ('easy sloution', 1), ('easy to read', 1), ('easy to understand', 1), ('easy to understant', 1), ('easy understand', 1), ('easy understandcpp', 1), ('easy-implementation', 1), ('easytoundersatand', 1), ('es6', 1), ('expalanation', 1), ('explained solution', 1), ('explanation', 1), ('faster', 1), ('faster than 81.54', 1), ('fastest java slution', 1), ('function composition', 1), ('github', 1), ('go lang', 1), ('google', 1), ('google interview', 1), ('half adder', 1), ('heap-buffer-overflow', 1), ('heap-memory', 1), ('help', 1), ('help needed', 1), ('implementaion', 1), ('implementation', 1), ('integer', 1), ('interview', 1), ('intuitive', 1), ('ios', 1), ('iterative', 1), ('iteratively', 1), ('iterators', 1), ('java solution', 1), ('java-8', 1), ('javacript', 1), ('javasacript', 1), ('javascritp', 1), ('javscript', 1), ('kotlin-solution', 1), ('learning', 1), ('linear complexity', 1), ('linear space', 1), ('linear-time', 1), ('lists', 1), ('map', 1), ('mathematics', 1), ('maths', 1), ('mathworks', 1), ('microsoft', 1), ('minimalizm', 1), ('modulo', 1), ('n time', 1), ('no extra memory', 1), ('no lambda function', 1), ('no modulo', 1), ('no-math', 1), ('non-copy-paste', 1), ('one line', 1), ('one line solution', 1), ('one-pass', 1), ('online-assessment', 1), ('optimised', 1), ('optimized', 1), ('other-solutions', 1), ('path', 1), ('pointer', 1), ('problem', 1), ('ptyhon', 1), ('ptyhon3', 1), ('pulse', 1), ('python bivector', 1), ('python2', 1), ('python3.9', 1), ('pythonic', 1), ('recurision', 1), ('recursive easy', 1), ('recursively', 1), ('right', 1), ('rookie', 1), ('runtime-error', 1), ('simple clear c++ solution', 1), ('simple implementation', 1), ('simple logic', 1), ('simple python solution', 1), ('simplesolution', 1), ('slicing', 1), ('solution by python', 1), ('solution-javascript', 1), ('spoiler', 1), ('sre', 1), ('stl vector', 1), ('str', 1), ('streams', 1), ('string manipulation', 1), ('string to integer', 1), ('strings manipulation', 1), ('stupid', 1), ('suggestion', 1), ('test-case', 1), ('testcase-wrong', 1), ('time-complexity-o', 1), ('timeout', 1), ('top', 1), ('top questions', 1), ('tricky', 1), ('two-liner', 1), ('two-pointers', 1), ('twopointer', 1), ('type-cast', 1), ('typescript', 1), ('understand', 1), ('understandable', 1), ('unpacking', 1), ('vectors', 1), ('very easy to understand', 1), ('video', 1), ('video explaination', 1), ('video solution', 1), ('video-explanation', 1), ('while', 1), ('working-solution', 1), ('zfill', 1)]"
65,Valid Number,https://leetcode.com/problems/valid-number,"A valid number can be split up into these components (in order):


	A decimal number or an integer.
	(Optional) An 'e' or 'E', followed by an integer.


A decimal number can be split up into these components (in order):


	(Optional) A sign character (either '+' or '-').
	One of the following formats:
	
		At least one digit, followed by a dot '.'.
		At least one digit, followed by a dot '.', followed by at least one digit.
		A dot '.', followed by at least one digit.
	
	


An integer can be split up into these components (in order):


	(Optional) A sign character (either '+' or '-').
	At least one digit.


For example, all the following are valid numbers: [""2"", ""0089"", ""-0.1"", ""+3.14"", ""4."", ""-.9"", ""2e10"", ""-90E3"", ""3e+7"", ""+6e-1"", ""53.5e93"", ""-123.456e789""], while the following are not valid numbers: [""abc"", ""1a"", ""1e"", ""e3"", ""99e2.5"", ""--6"", ""-+3"", ""95a54e53""].

Given a string s, return true if s is a valid number.","['math', 'string']",Hard,2,12,1253302,202047,"[""String to Integer (atoi)""]","[('python', 43), ('java', 34), ('cpp', 30), ('javascript', 24), ('solution', 23), ('regex', 21), ('c++', 19), ('python3', 18), ('accepted', 13), ('easy-understand', 13), ('python 3', 13), ('test-case', 11), ('valid-number', 11), ('state-machine', 9), ('c#', 8), ('regular-expression', 8), ('regular-expression-matching', 7), ('simple solution', 7), ('string', 7), ('dfa', 6), ('fast', 6), ('java-solution', 6), ('fsm', 5), ('rust', 5), ('best-submission', 4), ('easy', 4), ('linear-time', 4), ('parsing', 4), ('testcase-wrong', 4), ('c', 3), ('cpp solution', 3), ('fast-solution', 3), ('golang', 3), ('javascript solution', 3), ('parser', 3), ('regexp', 3), ('short', 3), ('validnumber', 3), ('well-commented', 3), ('100 speed', 2), ('clean', 2), ('clean code', 2), ('commented', 2), ('csharp', 2), ('easiest', 2), ('easy-to-read', 2), ('easytounderstand', 2), ('explanation', 2), ('float', 2), ('number', 2), ('oneline', 2), ('regex expression', 2), ('requirements', 2), ('scala', 2), ('simple', 2), ('solution-sharing-cpp', 2), ('state machine', 2), ('swift', 2), ('try-except', 2), ('wrong-answer', 2), ('0ms', 1), ('100', 1), ('100 space', 1), ('accepted solution', 1), ('ad-hoc', 1), ('adobe', 1), ('automata', 1), ('beating-90-submissions', 1), ('bruteforce', 1), ('c++ solution', 1), ('case', 1), ('cctype', 1), ('clarification', 1), ('clean-efficient-code', 1), ('clear', 1), ('codedayday2', 1), ('confusion', 1), ('cpp-solution', 1), ('csharp exceptions simple', 1), ('description-disambiguation', 1), ('design', 1), ('divide and conquer', 1), ('doubts', 1), ('eafp', 1), ('easily understood', 1), ('easy solution', 1), ('easy to read', 1), ('easy-solition', 1), ('easy-to-understand', 1), ('easy-understanding', 1), ('elegant', 1), ('elegant solution', 1), ('evaluator', 1), ('exception handling', 1), ('explained', 1), ('expression', 1), ('facebook', 1), ('fast and simple', 1), ('faster', 1), ('faster-than-100', 1), ('fasterthan100', 1), ('fastest', 1), ('fewest-line', 1), ('finite', 1), ('finite-state-machine', 1), ('flag', 1), ('fragment', 1), ('fun', 1), ('functional programming', 1), ('golang-solution', 1), ('hack', 1), ('hashset', 1), ('i hate my life', 1), ('idiomatic', 1), ('implementation', 1), ('improve', 1), ('isnan', 1), ('isnumber', 1), ('iterative', 1), ('iterator', 1), ('java ac solution', 1), ('js', 1), ('kotlin', 1), ('lexer', 1), ('limit-exceeded', 1), ('linear time', 1), ('logic-solution', 1), ('machine', 1), ('math', 1), ('memory less than 100', 1), ('memory-efficient', 1), ('missing-test-case', 1), ('num', 1), ('one line', 1), ('one pass', 1), ('oop', 1), ('pattern', 1), ('pattern matching', 1), ('pattern-matching', 1), ('php', 1), ('php solution', 1), ('python2', 1), ('python3.8', 1), ('pythonfunctions', 1), ('pythonpython3', 1), ('question-not-clear', 1), ('recursive', 1), ('regular', 1), ('regular expression', 1), ('run-time-error', 1), ('shortest', 1), ('solu', 1), ('solution by python', 1), ('solution-csharp', 1), ('solution-rust', 1), ('solution-share', 1), ('solution-sharing-c', 1), ('solution-sharingjava', 1), ('spaghetti', 1), ('split', 1), ('state', 1), ('state-transition', 1), ('string-operation', 1), ('stupid-question', 1), ('test-case-too-weak', 1), ('test-cases', 1), ('three-different-solutions', 1), ('time-complexity', 1), ('tokeniser', 1), ('two-lines', 1), ('typeerror', 1), ('uglycode', 1), ('vague', 1), ('valid number', 1), ('video', 1), ('well-explained', 1), ('works-on-my-machine', 1), ('youtube', 1)]"
64,Minimum Path Sum,https://leetcode.com/problems/minimum-path-sum,"Given a m x n grid filled with non-negative numbers, find a path from top left to bottom right, which minimizes the sum of all numbers along its path.

Note: You can only move either down or right at any point in time.","['array', 'dynamic-programming']",Medium,4626,84,941938,533384,"[""Unique Paths"", ""Dungeon Game"", ""Cherry Pickup""]","[('dynamic programming', 161), ('dp', 99), ('java', 98), ('dynamic-programming', 80), ('python', 70), ('c++', 64), ('cpp', 57), ('python 3', 45), ('javascript', 32), ('memoization', 31), ('java-solution', 28), ('easy-understanding', 26), ('python3', 26), ('recursion', 22), ('golang', 14), ('cpp solution', 13), ('easy-to-understand', 13), ('solution', 12), ('bottom-up-algorithm', 11), ('simple solution', 10), ('in-place', 9), ('dfs', 8), ('c#', 7), ('c++ code', 7), ('easy-understand', 7), ('easy-undestand', 7), ('easytounderstand', 7), ('recursive', 7), ('tabulation', 7), ('dp-techqique', 6), ('javascript solution', 6), ('bottom up', 5), ('explaination', 5), ('explained', 5), ('simple', 5), ('top down dp', 5), ('accepted', 4), ('dijkstra', 4), ('dijkstras algorithm', 4), ('easy', 4), ('easy to understand', 4), ('go', 4), ('golang-solution', 4), ('iterative', 4), ('matrix', 4), ('priority queue', 4), ('rust', 4), ('bottom-up', 3), ('constant space', 3), ('dp-programming', 3), ('dyanmic programming', 3), ('dynamic programmin', 3), ('heap', 3), ('improve', 3), ('java ac solution', 3), ('js', 3), ('kotlin', 3), ('short', 3), ('space-complexity', 3), ('space-efficient', 3), ('swift', 3), ('top-down dp', 3), ('#dynamic-programming', 2), ('accepted solution', 2), ('basic', 2), ('best-submission', 2), ('bfs', 2), ('bottomup', 2), ('clarification', 2), ('clean code', 2), ('commented', 2), ('comments-added', 2), ('constant memory', 2), ('constant-space', 2), ('csharp', 2), ('djikstra', 2), ('djiktras', 2), ('easiest', 2), ('easily understood', 2), ('easysolution', 2), ('fast', 2), ('fast and simple', 2), ('faster', 2), ('fastest', 2), ('go-solution', 2), ('inplace', 2), ('minimum path sum', 2), ('python2', 2), ('recurision', 2), ('recursive solution', 2), ('scala', 2), ('simplest', 2), ('#javascript', 1), ('#python', 1), ('100 memory', 1), ('100 speed', 1), ('2 solutions', 1), ('2d-array', 1), ('2d-dp', 1), ('30-day leetcode challenge', 1), ('8 lines', 1), ('8ms', 1), ('amazon', 1), ('array', 1), ('backtracking', 1), ('beat', 1), ('beats 100', 1), ('beginners', 1), ('bottom up approach', 1), ('bottom up dp', 1), ('breadth first search', 1), ('breadth first traversal', 1), ('breadth-first-search', 1), ('brute force', 1), ('bug-test-case', 1), ('buttom-up', 1), ('c++ dynamic programming', 1), ('c++ solution', 1), ('c++solution', 1), ('clean', 1), ('clearsolution', 1), ('comments', 1), ('compile-error', 1), ('concise', 1), ('cpp easy', 1), ('cpp-solution', 1), ('depth first search', 1), ('description', 1), ('dfs simple solution', 1), ('dfs-memo', 1), ('dijksta', 1), ('dijkstras', 1), ('dijsktra', 1), ('doubt', 1), ('doubts', 1), ('dp bottom up', 1), ('dp made easy', 1), ('dp top down', 1), ('dp-top-down', 1), ('dshah14', 1), ('dtw', 1), ('dynammic programming', 1), ('easiest solution', 1), ('easy solution', 1), ('easy-implementation', 1), ('easy-solition', 1), ('easy-solution', 1), ('efficient', 1), ('efficient solution', 1), ('es6', 1), ('example', 1), ('explained solution', 1), ('explanation', 1), ('explanation with code', 1), ('facebook', 1), ('fadi17', 1), ('graph', 1), ('greedy', 1), ('grid', 1), ('heavily commented', 1), ('hindi', 1), ('implementation', 1), ('in place', 1), ('internal-error', 1), ('intmax', 1), ('iterate', 1), ('izaac', 1), ('java solution', 1), ('javasacript', 1), ('javscript', 1), ('learn skills', 1), ('linear time', 1), ('lru cache', 1), ('maths', 1), ('memory optimized', 1), ('memoziation', 1), ('minimalizm', 1), ('mrmagician', 1), ('no extra space', 1), ('no recursion', 1), ('noob to pro', 1), ('o1 space', 1), ('on2', 1), ('optimal substructure', 1), ('optimized', 1), ('overflow', 1), ('path-sum', 1), ('path-tracking', 1), ('paths', 1), ('php', 1), ('php solution', 1), ('python3.8', 1), ('pythonic', 1), ('pythonpython3', 1), ('quadratic time', 1), ('question', 1), ('questions', 1), ('rajat', 1), ('readable code', 1), ('recursive dp', 1), ('recursive lines clean', 1), ('recusion', 1), ('ruby', 1), ('run time error', 1), ('run-time-error', 1), ('sequential thought', 1), ('short code', 1), ('shortestpath', 1), ('simple clear c++ solution', 1), ('simplesolution', 1), ('sksama', 1), ('solution c++', 1), ('solution-sharing-cpp', 1), ('space optimized', 1), ('space-optimized', 1), ('stl', 1), ('straightforward', 1), ('sum of digits', 1), ('tabulated version', 1), ('time-complexity', 1), ('time-limit-exceeded', 1), ('top-down', 1), ('topdown', 1), ('typescript', 1), ('upvote', 1), ('vector', 1), ('video explanation', 1), ('video-explanation', 1), ('with without dp', 1), ('without moving restriction', 1), ('wrong-answer', 1), ('xjq', 1), ('zea7ot', 1)]"
63,Unique Paths II,https://leetcode.com/problems/unique-paths-ii,"A robot is located at the top-left corner of a m x n grid (marked 'Start' in the diagram below).

The robot can only move either down or right at any point in time. The robot is trying to reach the bottom-right corner of the grid (marked 'Finish' in the diagram below).

Now consider if some obstacles are added to the grids. How many unique paths would there be?

An obstacle and space is marked as 1 and 0 respectively in the grid.","['array', 'dynamic-programming']",Medium,2839,297,1062223,380718,"[""Unique Paths"", ""Unique Paths III""]","[('dynamic programming', 136), ('java', 75), ('dp', 70), ('dynamic-programming', 56), ('c++', 54), ('python', 48), ('cpp', 34), ('memoization', 30), ('python 3', 24), ('javascript', 20), ('java-solution', 17), ('easy-understanding', 16), ('python3', 12), ('solution', 12), ('dfs', 9), ('easy-understand', 9), ('recursion', 9), ('golang', 8), ('top down dp', 8), ('c#', 7), ('c++ code', 5), ('ruby', 5), ('backtracking', 4), ('comments', 4), ('explained', 4), ('fast and simple', 4), ('javascript solution', 4), ('js', 4), ('recursive', 4), ('rust', 4), ('simple solution', 4), ('swift', 4), ('tabulation', 4), ('wrong-answer', 4), ('100 speed', 3), ('accepted', 3), ('bottom-up', 3), ('bottom-up-algorithm', 3), ('cpp solution', 3), ('dp-techqique', 3), ('dynamic programmin', 3), ('easy-to-understand', 3), ('explanation', 3), ('go', 3), ('golang-solution', 3), ('in-place', 3), ('simple', 3), ('space-complexity', 3), ('test-case', 3), ('unique paths ii', 3), ('#dynamic-programming', 2), ('bottom up', 2), ('clean code', 2), ('commented', 2), ('cpp easy', 2), ('easy-undestand', 2), ('easytounderstand', 2), ('fastest', 2), ('intuitive', 2), ('itereative', 2), ('php', 2), ('pythonic', 2), ('readable', 2), ('scala', 2), ('top down', 2), ('topdown', 2), ('typescript', 2), ('works-on-my-machine', 2), ('#63', 1), ('#iterative', 1), ('#java', 1), ('#javascript', 1), ('#python', 1), ('#tabulation', 1), ('0ms', 1), ('1-liner', 1), ('100 faster runtime', 1), ('100 space', 1), ('2019', 1), ('2d-array', 1), ('array nesting', 1), ('awesome samriddhi', 1), ('beginner friendly', 1), ('best explaination', 1), ('best-submission', 1), ('bf1l', 1), ('bfs', 1), ('bottoms-up', 1), ('breadth first search', 1), ('breadth first traversal', 1), ('bug', 1), ('c', 1), ('c code', 1), ('c++ dynamic programming', 1), ('c++ iterative sol', 1), ('c++ recursive solution', 1), ('c++ solution', 1), ('c++11', 1), ('challenge-me-python-solution-w', 1), ('clean-code', 1), ('clear', 1), ('clear-understanding', 1), ('commetend', 1), ('concise', 1), ('concise-solution', 1), ('constant space', 1), ('constant-space', 1), ('csharp', 1), ('depth-first-search', 1), ('dfs simple solution', 1), ('dfs-tree', 1), ('doubts', 1), ('dp pattern', 1), ('dyanmic programming', 1), ('easiest', 1), ('easy', 1), ('easy solution', 1), ('easy to understand', 1), ('easy to understandd', 1), ('easy understanding', 1), ('easysolution', 1), ('edgecases', 1), ('editorial', 1), ('explanations', 1), ('facebook', 1), ('fast', 1), ('faster than 100.00', 1), ('for loop', 1), ('for-loop', 1), ('goalng', 1), ('grid', 1), ('grid-dp', 1), ('hindi', 1), ('idea', 1), ('incorrect-test-case', 1), ('inplace', 1), ('interview experience', 1), ('interview-friendly', 1), ('intutive', 1), ('iteration', 1), ('iterative', 1), ('iteratively', 1), ('java ac solution', 1), ('javascrip', 1), ('kotlin', 1), ('low memory', 1), ('matrix', 1), ('matrix-search', 1), ('meiyaowen', 1), ('memorisation', 1), ('memorization', 1), ('no extra space', 1), ('oneliner', 1), ('overflow', 1), ('php solution', 1), ('pull dp', 1), ('pyhton', 1), ('quadratic time', 1), ('recurision', 1), ('ritik', 1), ('sasuke214', 1), ('self explanatory', 1), ('short solution', 1), ('simple clear c++ solution', 1), ('single pass', 1), ('sksama', 1), ('sliding window', 1), ('solution-share', 1), ('solution-sharing-cpp', 1), ('space optimized', 1), ('space-efficient', 1), ('stl', 1), ('swift5', 1), ('testcase-wrong', 1), ('time package', 1), ('time-complexity-o', 1), ('time-cost', 1), ('time-limit-exceeded', 1), ('tle', 1), ('top-down', 1), ('top-down dp', 1), ('two approaches', 1), ('ultra simple', 1), ('unique path', 1), ('unique paths 2', 1), ('unique value', 1), ('unique-paths-ii', 1), ('unique-paths-ii cpp solution', 1), ('upvote', 1), ('video-explanation', 1), ('well-commented', 1), ('wrong', 1), ('wrong output', 1)]"
62,Unique Paths,https://leetcode.com/problems/unique-paths,"A robot is located at the top-left corner of a m x n grid (marked 'Start' in the diagram below).

The robot can only move either down or right at any point in time. The robot is trying to reach the bottom-right corner of the grid (marked 'Finish' in the diagram below).

How many possible unique paths are there?","['array', 'dynamic-programming']",Medium,5011,244,1121092,633282,"[""Unique Paths II"", ""Minimum Path Sum"", ""Dungeon Game""]","[('dynamic programming', 248), ('java', 132), ('c++', 94), ('dp', 87), ('python', 87), ('cpp', 77), ('dynamic-programming', 77), ('python 3', 50), ('math', 40), ('memoization', 38), ('recursion', 36), ('javascript', 28), ('java-solution', 26), ('easy-understanding', 23), ('python3', 23), ('cpp solution', 22), ('solution', 20), ('combination', 18), ('c++ code', 15), ('easy-undestand', 15), ('golang', 15), ('easy', 14), ('easy-understand', 13), ('combinatorics', 12), ('unique paths', 8), ('binomial coefficient', 7), ('c#', 7), ('recurision', 7), ('recursive', 7), ('simple', 7), ('swift', 7), ('bottom-up-algorithm', 6), ('dp-techqique', 6), ('factorial', 6), ('math-solution', 6), ('ruby', 6), ('top down dp', 6), ('unique-paths', 6), ('c', 5), ('cpp easy', 5), ('dp-programming', 5), ('easy-to-understand', 5), ('easytounderstand', 5), ('explained', 5), ('explanation', 5), ('go', 5), ('iterative', 5), ('pascals triangle', 5), ('simple solution', 5), ('tabulation', 5), ('top-down dp', 5), ('0ms', 4), ('backtracking', 4), ('bottom up', 4), ('combinatories', 4), ('dfs', 4), ('fast and simple', 4), ('fastest', 4), ('golang-solution', 4), ('memoziation', 4), ('permutations', 4), ('python2', 4), ('python3.8', 4), ('recursive dp', 4), ('recusion', 4), ('rust', 4), ('time-limit-exceeded', 4), ('100 speed', 3), ('2d-array', 3), ('beginner friendly', 3), ('bottom up approach', 3), ('bottomup', 3), ('combinations', 3), ('commented', 3), ('cpp-solution', 3), ('dp c++', 3), ('dynammic programming', 3), ('easy understanding', 3), ('formula', 3), ('java ac solution', 3), ('mathematics', 3), ('php', 3), ('recursive easy', 3), ('#dynamic-programming', 2), ('#math', 2), ('100', 2), ('100 faster', 2), ('accepted', 2), ('all solutions', 2), ('beats 100', 2), ('best', 2), ('biginteger', 2), ('bottom up dp', 2), ('bottom-up', 2), ('c code', 2), ('c++ easy to understand', 2), ('clear', 2), ('comments', 2), ('confused', 2), ('constant-space', 2), ('detailed', 2), ('discrete math', 2), ('dynamic programmin', 2), ('dynamicprogramming', 2), ('easiest', 2), ('easy sloution', 2), ('easy to understand', 2), ('easysolution', 2), ('fast', 2), ('go lang', 2), ('google', 2), ('iteration', 2), ('js', 2), ('kotlin', 2), ('linear time', 2), ('mathematical solution', 2), ('maths', 2), ('memo', 2), ('memorization', 2), ('oneliner', 2), ('overflow', 2), ('permutation', 2), ('probability', 2), ('pythonpython3', 2), ('recursively', 2), ('scala', 2), ('short', 2), ('solution-sharing-python', 2), ('space-efficient', 2), ('swift5', 2), ('test-case', 2), ('time-complexity', 2), ('tle', 2), ('topdown', 2), ('unique path', 2), ('upvote', 2), ('vector', 2), ('video-explanation', 2), ('well-explained', 2), ('#bottom-up', 1), ('#c++', 1), ('#cpp', 1), ('#dfs', 1), ('#dp', 1), ('#javascript', 1), ('#maths', 1), ('#memoization', 1), ('#python', 1), ('#python 3', 1), ('#recursion', 1), ('0 ms solution', 1), ('100 memory', 1), ('100 space', 1), ('1d array', 1), ('2darray', 1), ('4 liner', 1), ('5 liner', 1), ('ac solution', 1), ('algebra', 1), ('amazon', 1), ('analytics', 1), ('approach and code', 1), ('array', 1), ('beginnerfriendly', 1), ('best explaination', 1), ('best-submission', 1), ('better', 1), ('bfs', 1), ('bruteforce', 1), ('c# dp', 1), ('c++code', 1), ('clean-code', 1), ('combanitorics', 1), ('combination-sum', 1), ('commentary', 1), ('comments-added', 1), ('constant space', 1), ('constant time', 1), ('cpp soltuion', 1), ('custom-testcase', 1), ('data compression', 1), ('default dict', 1), ('detailed explanation', 1), ('discussion', 1), ('dp c', 1), ('dp java', 1), ('dp made easy', 1), ('dp pattern', 1), ('dps', 1), ('dyanmic programming', 1), ('easy code', 1), ('easy solution', 1), ('easy to understandd', 1), ('easy-solition', 1), ('easy-solution', 1), ('easy-understsand', 1), ('easytoundersatand', 1), ('elegant solution', 1), ('exception', 1), ('explaination', 1), ('explanation of logic', 1), ('explanations', 1), ('faceebook', 1), ('fast-solution', 1), ('faster than 100', 1), ('fastest solution', 1), ('forward dp', 1), ('general-solution', 1), ('go-lang', 1), ('go-solution', 1), ('grid', 1), ('grid-dp', 1), ('grid-travaler', 1), ('help', 1), ('help me', 1), ('improve', 1), ('inplace', 1), ('intuitive', 1), ('iterative approch', 1), ('java memory usage', 1), ('java operator precedence', 1), ('java solution', 1), ('javascipt', 1), ('kotllin', 1), ('lattice', 1), ('linear space', 1), ('linear-time', 1), ('lists', 1), ('logical', 1), ('loop', 1), ('map', 1), ('mathematical', 1), ('matrix', 1), ('matrix-search', 1), ('memoisation', 1), ('memoized', 1), ('microsoft', 1), ('mrmagician', 1), ('neat-explanation', 1), ('nodp', 1), ('optimal', 1), ('optimizations', 1), ('optimized', 1), ('php solution', 1), ('pruning', 1), ('pure mathematics', 1), ('push dp', 1), ('pyhton', 1), ('pyhton3', 1), ('python dfs', 1), ('pythonic', 1), ('quadratic time', 1), ('questionable-test-case', 1), ('readable', 1), ('recursive solution', 1), ('scipy', 1), ('self explanatory', 1), ('share-solution', 1), ('shorter', 1), ('simple clear c++ solution', 1), ('simple-solution', 1), ('simplesolution', 1), ('simplest', 1), ('sliding window', 1), ('solution-cpp', 1), ('solution-share', 1), ('solution-sharing-cpp', 1), ('solution-sharingjava', 1), ('soultion-sharing', 1), ('space', 1), ('space-complexity', 1), ('stl', 1), ('sweetandsour', 1), ('time', 1), ('time complexity', 1), ('top down', 1), ('top-down', 1), ('typescript', 1), ('ultra simple', 1), ('unique-paths cpp solution', 1), ('video explanation', 1), ('without dp', 1), ('wrong-answer', 1)]"
61,Rotate List,https://leetcode.com/problems/rotate-list,"Given the head of a linked list, rotate the list to the right by k places.","['linked-list', 'two-pointers']",Medium,2326,1151,1166842,373609,"[""Rotate Array"", ""Split Linked List in Parts""]","[('java', 71), ('python', 70), ('c++', 52), ('cpp', 38), ('linked-list', 38), ('python 3', 33), ('two-pointers', 25), ('javascript', 21), ('easy-understanding', 17), ('java-solution', 15), ('linked list', 15), ('rotate linked list', 13), ('cpp solution', 12), ('easy-understand', 12), ('python3', 12), ('solution', 10), ('linkedlists', 9), ('c', 8), ('c#', 8), ('easy', 8), ('easy-to-understand', 7), ('linkedlist', 7), ('easy-undestand', 6), ('golang', 6), ('javascript solution', 6), ('100 speed', 5), ('easytounderstand', 5), ('time-limit-exceeded', 5), ('comments', 4), ('csharp', 4), ('explained', 4), ('explanation of logic', 4), ('fastest', 4), ('iteration', 4), ('linear time', 4), ('list', 4), ('python2', 4), ('recursion', 4), ('simple solution', 4), ('0ms', 3), ('c programming', 3), ('constant space', 3), ('constant-space', 3), ('cpp easy', 3), ('efficent approach', 3), ('linked-lists', 3), ('ruby', 3), ('two pointers', 3), ('100 faster', 2), ('amazon', 2), ('array', 2), ('c code', 2), ('c++ code', 2), ('circular linked list', 2), ('commented', 2), ('cycle', 2), ('deque', 2), ('efficient', 2), ('explanation', 2), ('fast-solution', 2), ('go', 2), ('golang-solution', 2), ('intuitive', 2), ('java ac solution', 2), ('java solution', 2), ('javascrip', 2), ('linked list simple', 2), ('linked lists', 2), ('linked-list-cycle', 2), ('linklist', 2), ('php', 2), ('php solution', 2), ('pointer', 2), ('rotate list', 2), ('run-time-error', 2), ('rust', 2), ('simple', 2), ('swift', 2), ('time-complexity', 2), ('#easy solution', 1), ('#java', 1), ('100', 1), ('100 memory', 1), ('2 pointers', 1), ('2pointer', 1), ('61. rotate list', 1), ('8ms', 1), ('accepted', 1), ('algorithm', 1), ('algorithms', 1), ('beginner friendly', 1), ('best-submission', 1), ('big o of n', 1), ('break-and-link', 1), ('c++ iterative sol', 1), ('c++ solution', 1), ('c++11', 1), ('circular-linked-list', 1), ('clean-code', 1), ('clear', 1), ('commentary', 1), ('comments-added', 1), ('commetend', 1), ('constant memory', 1), ('cplusplus', 1), ('cpp+', 1), ('creative', 1), ('description-disambiguation', 1), ('dfs solution', 1), ('diagram', 1), ('double-linked-list', 1), ('dummy', 1), ('easiest', 1), ('easy understand', 1), ('easy undestanding', 1), ('eckotan', 1), ('explain', 1), ('explained solution', 1), ('explanations', 1), ('fast and simple', 1), ('fast and slow ptrs', 1), ('faster than 100.00', 1), ('functional-programming', 1), ('github', 1), ('go-solution', 1), ('hare and turtle', 1), ('hare-and-turtle', 1), ('improve', 1), ('in-place', 1), ('in-place operation', 1), ('iterative', 1), ('iterative-solution', 1), ('java simple', 1), ('javasacript', 1), ('kotlin', 1), ('kotlinvim', 1), ('kth from end', 1), ('linear', 1), ('link-and-break', 1), ('linked list cycle', 1), ('linked list iteration', 1), ('linked list traversal', 1), ('list rotation', 1), ('memory-efficient', 1), ('memory-limit-exceeded', 1), ('modulus', 1), ('naive', 1), ('nodes', 1), ('o n', 1), ('one traversal', 1), ('one-loop', 1), ('optimal', 1), ('optimized', 1), ('pythonpython3', 1), ('readable', 1), ('recrusive', 1), ('recurision', 1), ('recursive', 1), ('reverse linked list', 1), ('reversestl', 1), ('rotate', 1), ('rotatelist', 1), ('rotation', 1), ('sandeepkumar', 1), ('short', 1), ('simple approach', 1), ('simple clear c++ solution', 1), ('single traversal', 1), ('slow', 1), ('solution-javascript', 1), ('solution-sharing-cpp', 1), ('solution-sharingjava', 1), ('solutionsharing', 1), ('space-optimized', 1), ('stack', 1), ('stack-based', 1), ('stl', 1), ('swap', 1), ('time-limit-exceeded-java', 1), ('tortoise and hare', 1), ('tortoise-and-hare-algo', 1), ('tortoise-hare', 1), ('trick', 1), ('two pointer technique', 1), ('two-pointer', 1), ('two-scan', 1), ('typescript', 1), ('vector', 1), ('video explaination', 1), ('video explanation', 1), ('video solution', 1), ('video-explanation', 1), ('well-explained', 1), ('wrong-answer', 1)]"
60,Permutation Sequence,https://leetcode.com/problems/permutation-sequence,"The set [1, 2, 3, ..., n] contains a total of n! unique permutations.

By listing and labeling all of the permutations in order, we get the following sequence for n = 3:


	""123""
	""132""
	""213""
	""231""
	""312""
	""321""


Given n and k, return the kth permutation sequence.","['math', 'backtracking']",Hard,2200,364,566994,224940,"[""Next Permutation"", ""Permutations""]","[('cpp', 37), ('python', 37), ('c++', 30), ('java', 30), ('solution', 18), ('python 3', 17), ('math', 15), ('permutations', 13), ('backtracking', 11), ('cpp solution', 10), ('iterative', 9), ('python3', 9), ('javascript', 8), ('factorial', 5), ('permutation', 5), ('recursion', 5), ('simple solution', 5), ('c#', 4), ('c++ code', 4), ('easy-undestand', 4), ('java-solution', 4), ('c++ iterative sol', 3), ('c++ solution', 3), ('dfs', 3), ('easy-understanding', 3), ('explained', 3), ('golang', 3), ('java ac solution', 3), ('js', 3), ('short', 3), ('time-complexity', 3), ('#backtracking', 2), ('0ms', 2), ('accepted', 2), ('algorithm', 2), ('backtrack', 2), ('c++ recursive solution', 2), ('commented', 2), ('cpp easy', 2), ('easy-understand', 2), ('fast', 2), ('fast-solution', 2), ('functional programming', 2), ('interview', 2), ('linear time', 2), ('mathematic', 2), ('maths', 2), ('nextpermutation', 2), ('recurision', 2), ('recursive', 2), ('run-time-error', 2), ('scala', 2), ('simple', 2), ('stl', 2), ('string', 2), ('swift', 2), ('tle', 2), ('#backtracking-template', 1), ('#c++', 1), ('#cpp', 1), ('#dfs', 1), ('#easy-understanding', 1), ('#itertools', 1), ('#java', 1), ('#python', 1), ('100 faster runtime', 1), ('100 space', 1), ('100 speed', 1), ('60', 1), ('accpected', 1), ('answer', 1), ('array', 1), ('back tracking', 1), ('back-tracking', 1), ('backtacking', 1), ('backtracing', 1), ('best-submission', 1), ('big o of n', 1), ('binary search', 1), ('binary-indexed-tree', 1), ('binary-search', 1), ('bit-manipulation', 1), ('c', 1), ('c++ ac', 1), ('c++code', 1), ('clear explanation', 1), ('combinatorics', 1), ('combinatories', 1), ('complexity-analysis', 1), ('constant-space', 1), ('cpp-solution', 1), ('csharp', 1), ('dynamic programming', 1), ('easiest', 1), ('easy sloution', 1), ('easy understanding', 1), ('easy undestanding', 1), ('easy-to-understand', 1), ('easytounderstand', 1), ('examplain', 1), ('explained solution', 1), ('explanation', 1), ('explanation of logic', 1), ('explanations', 1), ('factodaric', 1), ('factoradic', 1), ('faster than 100.00', 1), ('faster-than-100', 1), ('fastest', 1), ('generator', 1), ('go-solution', 1), ('golang-solution', 1), ('hashtable', 1), ('heap', 1), ('help-wanted', 1), ('improve', 1), ('intuitive', 1), ('iteration', 1), ('iterative solution', 1), ('iteratively', 1), ('iteratve', 1), ('itertools.permutations', 1), ('javascript solution', 1), ('kotlin', 1), ('linear', 1), ('linear memory', 1), ('linkedlist', 1), ('mathematics', 1), ('much-needed', 1), ('needimprovement', 1), ('number system', 1), ('numbertheory', 1), ('one-liner', 1), ('oneliner', 1), ('overflow', 1), ('pattern', 1), ('permutation sequence', 1), ('pictorial', 1), ('python python3', 1), ('python2', 1), ('pythonic', 1), ('pythonpython3', 1), ('quotient-remainder', 1), ('recusion', 1), ('ruby', 1), ('runtime-error', 1), ('rust', 1), ('short c++ code', 1), ('solution-cpp', 1), ('solution-explaining', 1), ('solution-share', 1), ('solution-sharing-c', 1), ('solution-sharing-cpp', 1), ('straight', 1), ('time-limit-exceeded', 1), ('updowndota', 1), ('video', 1), ('video explaination', 1), ('video solution', 1), ('well-commented', 1), ('while', 1), ('works-on-my-machine', 1), ('xjq', 1)]"
59,Spiral Matrix II,https://leetcode.com/problems/spiral-matrix-ii,"Given a positive integer n, generate an n x n matrix filled with elements from 1 to n2 in spiral order.",['array'],Medium,1638,131,429075,250502,"[""Spiral Matrix"", ""Spiral Matrix III""]","[('java', 86), ('c++', 51), ('cpp', 50), ('python', 45), ('python 3', 26), ('javascript', 22), ('simple', 22), ('solution', 22), ('java-solution', 20), ('easy-understand', 19), ('easy-understanding', 17), ('cpp solution', 12), ('easy-to-understand', 10), ('easy-undestand', 10), ('python3', 9), ('explained', 8), ('matrix', 7), ('recursion', 7), ('fast', 6), ('intuitive', 5), ('swift', 5), ('100 speed', 4), ('c#', 4), ('c++ code', 4), ('clear', 4), ('dfs', 4), ('easy', 4), ('improve', 4), ('recursive', 4), ('short', 4), ('spiral', 4), ('array', 3), ('beats 100', 3), ('fast and simple', 3), ('golang', 3), ('iterative', 3), ('iteratively', 3), ('spiral-matrix-2', 3), ('wrong-answer', 3), ('0ms', 2), ('100 faster', 2), ('100 memory', 2), ('accepted', 2), ('brute-force', 2), ('clean', 2), ('comments-added', 2), ('concise', 2), ('easytounderstand', 2), ('fasterthan100', 2), ('fastest solution', 2), ('iterate', 2), ('iteration', 2), ('java ac solution', 2), ('javascript solution', 2), ('loop', 2), ('php', 2), ('ruby', 2), ('run-time-error', 2), ('rust', 2), ('simple clear c++ solution', 2), ('solution-sharing-cpp', 2), ('space-efficient', 2), ('spiral-traversal', 2), ('wrong', 2), ('#apple', 1), ('#array', 1), ('#c++', 1), ('#cpp', 1), ('#easy-understanding', 1), ('#easysolution', 1), ('#easytounderstand', 1), ('#fast', 1), ('#google-interview', 1), ('100 faster cpp', 1), ('100 space', 1), ('amazon', 1), ('answer', 1), ('arrays', 1), ('basic', 1), ('beginner friendly', 1), ('best', 1), ('best-submission', 1), ('better', 1), ('c', 1), ('c++ easy to understand', 1), ('c++ solution', 1), ('comments added', 1), ('constant-space', 1), ('cpp doubt', 1), ('cpp easy', 1), ('dfs iterative', 1), ('dfs-iterative', 1), ('different solutions', 1), ('easiest', 1), ('easy understand', 1), ('easy understanding', 1), ('easy-solition', 1), ('es2015', 1), ('explanation', 1), ('explanation of logic', 1), ('fast-solution', 1), ('fastest java solution', 1), ('for blondes', 1), ('for-loop', 1), ('give stars and subscribe', 1), ('google-intern', 1), ('graph theory', 1), ('graph traversal', 1), ('greedy', 1), ('intutive', 1), ('iterative solution', 1), ('iterators', 1), ('itereative', 1), ('javascrip', 1), ('javasript', 1), ('kotlin', 1), ('kotlinvim', 1), ('layer', 1), ('linear time', 1), ('matrix-traverse', 1), ('microsoft', 1), ('naive-solution', 1), ('navigation', 1), ('number54', 1), ('optimized', 1), ('other-solutions', 1), ('parameterization', 1), ('pattern', 1), ('php solution', 1), ('python2', 1), ('queue', 1), ('rajat', 1), ('recursive solution', 1), ('rotate-image', 1), ('runtime-error', 1), ('self explanatory', 1), ('selfexplained', 1), ('short c++ code', 1), ('simple java solution', 1), ('simple logic', 1), ('simple solution', 1), ('simulation', 1), ('sipral', 1), ('soliton', 1), ('solution-cpp', 1), ('solution-javascript', 1), ('solution-sharing-python', 1), ('spiralmatrixii', 1), ('sprial', 1), ('stars move the article up', 1), ('state machine', 1), ('state-transition', 1), ('swift5', 1), ('time-complexity', 1), ('ultra simple', 1), ('upvote', 1), ('visualization', 1), ('whileloop', 1), ('works-on-my-machine', 1), ('wrong-test-cases', 1), ('yield', 1), ('zip', 1)]"
58,Length of Last Word,https://leetcode.com/problems/length-of-last-word,"Given a string s consists of some words separated by spaces, return the length of the last word in the string. If the last word does not exist, return 0.

A word is a maximal substring consisting of non-space characters only.",['string'],Easy,1076,3148,1487284,498879,[],"[('java', 111), ('python', 106), ('c++', 76), ('cpp', 67), ('python 3', 64), ('javascript', 39), ('solution', 38), ('easy-understanding', 35), ('python3', 35), ('string', 33), ('java-solution', 28), ('simple', 26), ('golang', 19), ('cpp solution', 17), ('simple solution', 15), ('easy', 14), ('golang-solution', 11), ('0ms', 10), ('c', 10), ('easy-undestand', 10), ('easy-understand', 9), ('c#', 8), ('easytounderstand', 8), ('go-solution', 8), ('kotlin', 8), ('one-liner', 8), ('split', 8), ('swift', 8), ('easy-to-understand', 7), ('go', 7), ('short', 7), ('accepted', 6), ('c++ code', 6), ('cpp easy', 6), ('javascript solution', 6), ('length-of-last-word', 6), ('lengthoflastword', 6), ('one line', 6), ('rust', 6), ('commented', 5), ('linear time', 5), ('explanation', 4), ('fast', 4), ('java ac solution', 4), ('js', 4), ('php', 4), ('regex', 4), ('ruby', 4), ('simplest', 4), ('stringstream', 4), ('beginner friendly', 3), ('c++11', 3), ('comments added', 3), ('constant-space', 3), ('easy understanding', 3), ('explained', 3), ('fast-solution', 3), ('faster than 100.00', 3), ('iterative', 3), ('oneline', 3), ('scala', 3), ('stl', 3), ('string-operation', 3), ('#javascript', 2), ('100', 2), ('c++ solution', 2), ('c++17', 2), ('clean code', 2), ('constant space', 2), ('csharp', 2), ('easy undestanding', 2), ('easy-solition', 2), ('explanation of logic', 2), ('explanations', 2), ('fast and simple', 2), ('fastest', 2), ('functional programming', 2), ('help', 2), ('istringstream', 2), ('java solution', 2), ('linear-time', 2), ('one-pass', 2), ('short code', 2), ('simple clear c++ solution', 2), ('simple-solution', 2), ('streams', 2), ('strings', 2), ('strings manipulation', 2), ('strip', 2), ('time-complexity', 2), ('#python', 1), ('#python3', 1), ('#simple', 1), ('#simplecode', 1), ('0 ms', 1), ('100 bst', 1), ('100 faster cpp', 1), ('100 faster runtime', 1), ('100 percentage fastest', 1), ('2 pointer', 1), ('2 pointer approach', 1), ('2-pointer', 1), ('3ms', 1), ('4line', 1), ('5 lines', 1), ('99 faster', 1), ('ac solution', 1), ('algorithm', 1), ('beat 99.8', 1), ('best', 1), ('brute force', 1), ('c++ iterative sol', 1), ('cheating', 1), ('commented code', 1), ('commentedcppcode', 1), ('cpp 100', 1), ('cpp-solution', 1), ('description-error', 1), ('dynamic programming', 1), ('easy sloution', 1), ('easy to understand', 1), ('easy uderstanding', 1), ('easy understand', 1), ('easysolution', 1), ('efficiency', 1), ('efficient solution', 1), ('elegant', 1), ('enjoy', 1), ('es6', 1), ('exception handling', 1), ('explaination', 1), ('explanatory comments', 1), ('faster', 1), ('faster then 95', 1), ('faster-than-100', 1), ('filter', 1), ('first-time', 1), ('functional', 1), ('functional-programming', 1), ('go lang', 1), ('good variable names', 1), ('greedy', 1), ('heap-buffer-overflow', 1), ('hint', 1), ('hints', 1), ('idiomatic', 1), ('if-else', 1), ('improve', 1), ('in-built function', 1), ('iterative solution', 1), ('iterative traversal', 1), ('iterator', 1), ('java simple', 1), ('lambda', 1), ('lambdas', 1), ('len', 1), ('length', 1), ('linear', 1), ('linq', 1), ('loop', 1), ('map', 1), ('memory-efficient', 1), ('non-copy-paste', 1), ('one-loop', 1), ('option', 1), ('php solution', 1), ('pointer', 1), ('pyhton', 1), ('pyhton3', 1), ('python3.8', 1), ('pythonic', 1), ('pythonpython3', 1), ('reverse', 1), ('rfind', 1), ('run-time', 1), ('runtime error', 1), ('shared-answer', 1), ('simpe', 1), ('simple approach', 1), ('simpler', 1), ('single-line', 1), ('sliding-window', 1), ('solution by python', 1), ('solution-java', 1), ('solution-javascript', 1), ('solution-python', 1), ('solution-sharing-c', 1), ('space complexity', 1), ('space-compexity', 1), ('splitarray', 1), ('state-machine', 1), ('string manipulation', 1), ('string parsing', 1), ('string stream', 1), ('stringtokenizer', 1), ('structured code', 1), ('swift5', 1), ('ternary-operator', 1), ('time complexity', 1), ('tokenize', 1), ('top', 1), ('traversefromback', 1), ('trim', 1), ('two-liner', 1), ('two-pointer', 1), ('two-pointers', 1), ('typescript', 1), ('understandable', 1), ('unit-test', 1), ('very easy to understand', 1), ('word-search-ii', 1), ('wrong-answer', 1)]"
57,Insert Interval,https://leetcode.com/problems/insert-interval,"Given a set of non-overlapping intervals, insert a new interval into the intervals (merge if necessary).

You may assume that the intervals were initially sorted according to their start times.","['array', 'sort']",Medium,2832,246,985690,349482,"[""Merge Intervals"", ""Range Module""]","[('java', 68), ('python', 46), ('c++', 42), ('cpp', 36), ('binary-search', 28), ('python 3', 27), ('python3', 18), ('solution', 16), ('javascript', 15), ('easy-understanding', 13), ('cpp solution', 12), ('explained', 12), ('simple', 11), ('c#', 9), ('java-solution', 8), ('easy-to-understand', 7), ('easy-understand', 7), ('golang', 7), ('interval-merging', 7), ('simple solution', 7), ('easy-undestand', 6), ('greedy', 6), ('time-complexity', 6), ('intervals', 5), ('merge-intervals', 5), ('sorting', 5), ('accepted', 4), ('comments', 4), ('easy', 4), ('golang-solution', 4), ('in-place', 4), ('insert-interval', 4), ('kotlin', 4), ('linear time', 4), ('output-limit-exceeded', 4), ('scala', 4), ('stacks', 4), ('c++ code', 3), ('commented', 3), ('go', 3), ('greedy approach', 3), ('improve', 3), ('insert interval', 3), ('javascript solution', 3), ('linear', 3), ('merge intervals', 3), ('short', 3), ('swift', 3), ('wrong-answer', 3), ('beating-100-submission', 2), ('binary search', 2), ('clean', 2), ('clean-code', 2), ('comments added', 2), ('constant-space', 2), ('easytounderstand', 2), ('explained solution', 2), ('explanations', 2), ('fast-solution', 2), ('inplace', 2), ('insertinterval', 2), ('interval', 2), ('iteration', 2), ('java ac solution', 2), ('logn', 2), ('needhelp', 2), ('php', 2), ('python2', 2), ('ruby', 2), ('rust', 2), ('search', 2), ('sort', 2), ('stl', 2), ('sweep line', 2), ('vector', 2), ('well-commented', 2), ('0ms', 1), ('100 faster runtime', 1), ('100 speed', 1), ('16ms', 1), ('algorithms', 1), ('amazon', 1), ('approach and code', 1), ('approach-explained', 1), ('array-sort', 1), ('beginner friendly', 1), ('best-submission', 1), ('binary', 1), ('binarysearch', 1), ('c', 1), ('clean code', 1), ('clear', 1), ('commentary', 1), ('comments-added', 1), ('concise-solution', 1), ('constant space', 1), ('cpp clear', 1), ('cpp easy', 1), ('csharp', 1), ('easiest', 1), ('easy to read', 1), ('easy to undertsand', 1), ('easy understand', 1), ('easy-peasy', 1), ('easy-understsand', 1), ('easysolution', 1), ('edge-case', 1), ('efficient solution', 1), ('elegant solution', 1), ('es6', 1), ('expalanation', 1), ('fast and simple', 1), ('foldleft', 1), ('functional programming', 1), ('functional-programming', 1), ('give stars and subscribe', 1), ('go-solution', 1), ('google', 1), ('heap', 1), ('inplacemerge', 1), ('insert-interval cpp solution', 1), ('interview-friendly', 1), ('intutive', 1), ('iterate', 1), ('iterative', 1), ('iterative way', 1), ('js', 1), ('kotlinvim', 1), ('lambda', 1), ('linear memory', 1), ('linear-complexity', 1), ('linear-time', 1), ('lines', 1), ('linked-list', 1), ('linkedlist', 1), ('linkedlists', 1), ('list', 1), ('math solution', 1), ('meiyaowen', 1), ('merge', 1), ('merging', 1), ('missing-test-case', 1), ('mix-and-sort', 1), ('new', 1), ('o of n', 1), ('one pass', 1), ('performance', 1), ('php solution', 1), ('queue', 1), ('recursion', 1), ('run-time-error', 1), ('search-insert-position', 1), ('self explanatory', 1), ('simple clear c++ solution', 1), ('simple java solution', 1), ('solution-share', 1), ('solution-sharing-c', 1), ('solution-sharing-cpp', 1), ('space-complexity', 1), ('stack', 1), ('step by step explanation', 1), ('straight-forward', 1), ('straightforward', 1), ('strain', 1), ('suggestion', 1), ('swap', 1), ('sweep-line', 1), ('sweepline', 1), ('two pointers', 1), ('two-methods', 1), ('typescript', 1), ('ultra simple', 1), ('video', 1), ('video-explanation', 1), ('well-explained', 1), ('works-on-my-machine', 1), ('wrong answer', 1), ('xjq', 1), ('youtube', 1)]"
56,Merge Intervals,https://leetcode.com/problems/merge-intervals,"Given an array of intervals where intervals[i] = [starti, endi], merge all overlapping intervals, and return an array of the non-overlapping intervals that cover all the intervals in the input.","['array', 'sort']",Medium,7159,382,2114842,878782,"[""Insert Interval"", ""Meeting Rooms"", ""Meeting Rooms II"", ""Teemo Attacking"", ""Add Bold Tag in String"", ""Range Module"", ""Employee Free Time"", ""Partition Labels"", ""Interval List Intersections""]","[('java', 98), ('c++', 93), ('python', 88), ('cpp', 79), ('sorting', 67), ('python 3', 55), ('javascript', 53), ('sort', 52), ('python3', 33), ('java-solution', 24), ('merge-intervals', 24), ('easy-understanding', 20), ('solution', 18), ('simple', 14), ('golang', 13), ('sorted array', 13), ('c#', 12), ('easy', 12), ('javascript solution', 12), ('easytounderstand', 11), ('simple solution', 11), ('stack', 11), ('swift', 11), ('cpp solution', 10), ('easy-understand', 10), ('short', 10), ('golang-solution', 9), ('easy-undestand', 8), ('interval-merging', 8), ('stacks', 8), ('accepted', 7), ('merge intervals', 7), ('sort-function', 7), ('go-solution', 6), ('nlogn', 6), ('facebook', 5), ('fast and simple', 5), ('merge', 5), ('php', 5), ('ruby', 5), ('rust', 5), ('amazon', 4), ('deque', 4), ('easy-to-understand', 4), ('explained', 4), ('go', 4), ('iterative', 4), ('lambda', 4), ('python2', 4), ('run-time-error', 4), ('runtime-error', 4), ('video explanatiion', 4), ('wrong-answer', 4), ('100 speed', 3), ('c++ solution', 3), ('clean code', 3), ('comments', 3), ('comparator', 3), ('constant space', 3), ('constant-space', 3), ('easiest', 3), ('functional programming', 3), ('google', 3), ('greedy', 3), ('greedy approach', 3), ('improve', 3), ('in-place', 3), ('inplace', 3), ('interval', 3), ('intervals', 3), ('intuitive', 3), ('iterator', 3), ('java solution', 3), ('kotlin', 3), ('linear', 3), ('php solution', 3), ('priority queue', 3), ('simple-solution', 3), ('time-complexity', 3), ('time-limit-exceeded', 3), ('two-pointers', 3), ('vector', 3), ('#sort', 2), ('16ms', 2), ('5ms solution', 2), ('array', 2), ('arrays', 2), ('best-solution', 2), ('binary search', 2), ('c++ code', 2), ('commented', 2), ('cpp easy', 2), ('divideconquer', 2), ('easy to understand', 2), ('easy understanding', 2), ('explained solution', 2), ('fastest', 2), ('heap', 2), ('heapq', 2), ('java ac solution', 2), ('javascrip', 2), ('js', 2), ('linear time', 2), ('map', 2), ('merged', 2), ('mergeintervals', 2), ('priority-queue', 2), ('range', 2), ('readable', 2), ('reduce', 2), ('ritik', 2), ('scala', 2), ('scheduling-problem', 2), ('short solution', 2), ('simple clear c++ solution', 2), ('solution-sharing-cpp', 2), ('two pointers', 2), ('typescript', 2), ('vector-operation', 2), ('video explanation', 2), ('visualization', 2), ('#javascript', 1), ('#kotlin', 1), ('#swift', 1), ('100 beat', 1), ('100 space', 1), ('2019', 1), ('2d-array', 1), ('accepted solution', 1), ('adobe', 1), ('algorithms', 1), ('almost-linear-time', 1), ('approach and code', 1), ('approach-explained', 1), ('array-sort', 1), ('arrays.sort', 1), ('awesome samriddhi', 1), ('awesome-samriddhi', 1), ('beats 100', 1), ('beginner friendly', 1), ('brute force', 1), ('brute-force', 1), ('bug', 1), ('c', 1), ('c#-solution', 1), ('c++ easy to understand', 1), ('c++11', 1), ('clean', 1), ('clear', 1), ('combine', 1), ('comments-added', 1), ('competitive', 1), ('compile-error', 1), ('concept', 1), ('connected components', 1), ('construction', 1), ('cplusplus', 1), ('cpp doubt', 1), ('csharp', 1), ('custom sorting', 1), ('custom-sort', 1), ('description', 1), ('detailed explanation', 1), ('different-oj-local', 1), ('difficulty', 1), ('divid and conquer', 1), ('divide and conquer', 1), ('dynamic programming', 1), ('easily understood', 1), ('east-to-understand', 1), ('easy to read', 1), ('easy-understsand', 1), ('easysolution', 1), ('efficient', 1), ('error', 1), ('es6', 1), ('expalnation', 1), ('explaination', 1), ('explanation of logic', 1), ('faang', 1), ('facebook interview', 1), ('fast', 1), ('fast than 99', 1), ('fast-solution', 1), ('faster than 97', 1), ('faster then 95', 1), ('foldleft', 1), ('function', 1), ('functional-programming', 1), ('give stars and subscribe', 1), ('golang solution', 1), ('goldman sachs', 1), ('hashmap', 1), ('hashmaps', 1), ('india', 1), ('interval merge', 1), ('interview questions', 1), ('intutive', 1), ('java 8', 1), ('javascript brute force', 1), ('keep it simple', 1), ('kotlinvim', 1), ('less memory than 100', 1), ('linear scan', 1), ('linear-time', 1), ('linearithmic', 1), ('linkedlist', 1), ('list comprehension', 1), ('lower-bound', 1), ('memory efficient', 1), ('memory-optimized', 1), ('merge-intervals cpp solution', 1), ('merged interval', 1), ('mergesort', 1), ('merging', 1), ('mix-and-sort', 1), ('naive', 1), ('neat', 1), ('new version', 1), ('nlogn time', 1), ('no-extra-space', 1), ('no-sort', 1), ('onepass', 1), ('optimisation', 1), ('other-solution', 1), ('overlap', 1), ('overlapping', 1), ('override', 1), ('parentheses', 1), ('performance', 1), ('pointer', 1), ('priorityqueue', 1), ('programming', 1), ('pyhton 3', 1), ('python3.8', 1), ('quicksort', 1), ('rajat', 1), ('reference', 1), ('runtime error', 1), ('runtime n log n', 1), ('self explanatory', 1), ('short c++ code', 1), ('simpe', 1), ('simple java solution', 1), ('simplest', 1), ('simulation', 1), ('slide window', 1), ('slidingwindow', 1), ('solition-sharing', 1), ('solution-javascript', 1), ('solution-python', 1), ('solution-rust', 1), ('somal', 1), ('sorted', 1), ('sortlist', 1), ('space', 1), ('space o1', 1), ('space-efficient', 1), ('stars move the article up', 1), ('static', 1), ('stupid', 1), ('sweep line', 1), ('swift5', 1), ('test-case', 1), ('time', 1), ('tree', 1), ('tree map', 1), ('two-pointer', 1), ('ultra simple', 1), ('undefined', 1), ('understandable', 1), ('upvote', 1), ('vector-of-vector', 1), ('video', 1), ('video explaination', 1), ('video solution', 1), ('video-explanation', 1), ('whileloop', 1), ('works-on-my-machine', 1), ('xjq', 1), ('youtube', 1)]"
55,Jump Game,https://leetcode.com/problems/jump-game,"Given an array of non-negative integers nums, you are initially positioned at the first index of the array.

Each element in the array represents your maximum jump length at that position.

Determine if you are able to reach the last index.","['array', 'greedy']",Medium,6181,423,1759826,621232,"[""Jump Game II"", ""Jump Game III""]","[('java', 91), ('greedy', 71), ('python', 66), ('cpp', 59), ('c++', 55), ('easy-understanding', 34), ('javascript', 31), ('solution', 25), ('python 3', 24), ('dynamic programming', 22), ('easy-understand', 19), ('easy-undestand', 19), ('python3', 19), ('greedy approach', 17), ('linear time', 17), ('constant space', 16), ('dp', 16), ('time-complexity', 16), ('cpp solution', 15), ('java-solution', 14), ('simple solution', 13), ('dynamic-programming', 12), ('constant-space', 11), ('easy', 11), ('linear-time', 9), ('short', 9), ('backtracking', 8), ('golang', 8), ('bfs', 7), ('c#', 7), ('c++ code', 7), ('explained', 7), ('recursion', 7), ('easytounderstand', 6), ('jump-game', 6), ('linear', 6), ('accepted', 5), ('easy-to-understand', 5), ('javascript solution', 5), ('simple', 5), ('test-case', 5), ('c', 4), ('fast', 4), ('greedy algorithm', 4), ('iterative', 4), ('memoization', 4), ('optimal', 4), ('rust', 4), ('tle', 4), ('4ms', 3), ('bottom up', 3), ('bottom-up', 3), ('clean code', 3), ('constant memory', 3), ('dfs', 3), ('go', 3), ('golang-solution', 3), ('graph', 3), ('js', 3), ('jumpgame', 3), ('linear memory', 3), ('one pass', 3), ('space-complexity', 3), ('time-limit-exceeded', 3), ('100 speed', 2), ('best', 2), ('best-solution-ever', 2), ('bottom up dp', 2), ('c++ solution', 2), ('c++11', 2), ('commented', 2), ('cpp easy', 2), ('dp python', 2), ('easy understanding', 2), ('faster', 2), ('go lang', 2), ('help', 2), ('intuition', 2), ('iteration', 2), ('java ac solution', 2), ('one-pass', 2), ('onepass', 2), ('optimized', 2), ('ruby', 2), ('simple clear c++ solution', 2), ('single pass', 2), ('solution-sharing-cpp', 2), ('solution-sharing-python', 2), ('swift', 2), ('testcase-wrong', 2), ('two-different-solutions', 2), ('upvote', 2), ('wrong-answer', 2), ('100', 1), ('100 beat', 1), ('100 memory', 1), ('100 space', 1), ('2-pointer', 1), ('algorithms', 1), ('approach and code', 1), ('array', 1), ('array greedy', 1), ('arrays', 1), ('back tracking', 1), ('best explaination', 1), ('best-submission', 1), ('brute force', 1), ('brute-force', 1), ('bruteforce', 1), ('bug report', 1), ('c++ ac', 1), ('challenge-me', 1), ('clean', 1), ('clear', 1), ('clear-understanding', 1), ('comment', 1), ('comments', 1), ('computational-complexity', 1), ('concise-solution', 1), ('constant time', 1), ('coverage-extension', 1), ('cpp-solution', 1), ('csharp', 1), ('depth first search', 1), ('dp made easy', 1), ('easiest solution', 1), ('easy to read', 1), ('easy to understand', 1), ('easy undestanding', 1), ('easy-solution', 1), ('easy-to-read', 1), ('easysolution', 1), ('editorial', 1), ('efficent approach', 1), ('efficient algorithm', 1), ('efficient solution', 1), ('elegant', 1), ('engineering interview', 1), ('exaplanation', 1), ('expalantion', 1), ('explaination', 1), ('explanation', 1), ('explanation of logic', 1), ('explanations', 1), ('fast and simple', 1), ('four-different-solutions', 1), ('give stars and subscribe', 1), ('go-solution', 1), ('graphs', 1), ('gready', 1), ('help needed', 1), ('improve', 1), ('incorrect-test-case', 1), ('interval', 1), ('interval-merging', 1), ('interview', 1), ('intutive', 1), ('iterate', 1), ('javascipt', 1), ('kotlinvim', 1), ('linked-list', 1), ('live coding', 1), ('logic', 1), ('loop', 1), ('low-space', 1), ('memory', 1), ('memory-efficient', 1), ('memory-limit-exceeded', 1), ('mrmgaician', 1), ('not optimized', 1), ('on', 1), ('one-line', 1), ('one-liner', 1), ('one-loop', 1), ('php', 1), ('ptyhon3', 1), ('python2', 1), ('python3.8', 1), ('question', 1), ('recurrance', 1), ('recursion memoization', 1), ('recursive', 1), ('recusion', 1), ('run-time-error', 1), ('scala', 1), ('self explanatory', 1), ('short solution', 1), ('simpe', 1), ('simple approach', 1), ('simple python accepted', 1), ('simplest', 1), ('single loop', 1), ('sliding-window', 1), ('slow', 1), ('solution-python', 1), ('solution-share', 1), ('solution-sharing-c', 1), ('space complexity', 1), ('space optimized', 1), ('story based explanation', 1), ('thinking process', 1), ('time complexity', 1), ('time limit exceeded', 1), ('time-complexity-o', 1), ('topdown', 1), ('true', 1), ('two solutions', 1), ('ultra easy', 1), ('understand', 1), ('valley-and-peak', 1), ('video explanation', 1), ('visual', 1), ('walrus', 1), ('well-commented', 1), ('wrong answer', 1), ('youtube', 1)]"
54,Spiral Matrix,https://leetcode.com/problems/spiral-matrix,"Given an m x n matrix, return all elements of the matrix in spiral order.",['array'],Medium,3772,663,1342051,492510,"[""Spiral Matrix II"", ""Spiral Matrix III""]","[('java', 111), ('python', 91), ('c++', 69), ('cpp', 68), ('python 3', 52), ('solution', 33), ('java-solution', 29), ('javascript', 27), ('easy-understanding', 26), ('easy-undestand', 25), ('easy-understand', 22), ('simple', 22), ('python3', 21), ('easy', 18), ('recursion', 18), ('c#', 17), ('simple solution', 16), ('matrix', 15), ('easytounderstand', 13), ('0ms', 10), ('c++ code', 10), ('cpp solution', 10), ('dfs', 9), ('golang', 9), ('fastest', 8), ('recursive', 7), ('simulation', 7), ('spiral-traversal', 7), ('easy-to-understand', 6), ('explained', 6), ('fast', 6), ('javascript solution', 5), ('spiral', 5), ('swift', 5), ('100 speed', 4), ('array', 4), ('beats 100', 4), ('cpp easy', 4), ('fast and simple', 4), ('fast-solution', 4), ('golang-solution', 4), ('iterative', 4), ('ruby', 4), ('short', 4), ('100 faster', 3), ('100 faster cpp', 3), ('best-submission', 3), ('brute force', 3), ('c', 3), ('c++11', 3), ('easiest', 3), ('easy to understand', 3), ('explanations', 3), ('go', 3), ('intuitive', 3), ('iteration', 3), ('java ac solution', 3), ('matrix rotation', 3), ('optimal', 3), ('pointers', 3), ('readable', 3), ('run-time-error', 3), ('rust', 3), ('simple clear c++ solution', 3), ('spiral matrix', 3), ('#easy-understand', 2), ('#python', 2), ('0ms-solution', 2), ('2darray', 2), ('accepted', 2), ('arrays', 2), ('commented', 2), ('concise-solution', 2), ('constant space', 2), ('direction', 2), ('fasterthan100', 2), ('improve', 2), ('iterator', 2), ('matrix-rotation', 2), ('medium', 2), ('need help', 2), ('optimized', 2), ('php', 2), ('pointer', 2), ('python2', 2), ('pythonpython3', 2), ('recursively', 2), ('runtime-error', 2), ('scala', 2), ('sets', 2), ('solution-cpp', 2), ('solution-python', 2), ('solution-sharing-cpp', 2), ('state-machine', 2), ('switch', 2), ('traversal', 2), ('vector 2d', 2), ('video-explanation', 2), ('#best', 1), ('#dfs', 1), ('#easy', 1), ('#easy-understanding', 1), ('#python 3', 1), ('#python3', 1), ('#recursion', 1), ('100', 1), ('100 faster c++', 1), ('100 faster runtime', 1), ('1ms', 1), ('2d-array', 1), ('4-ifs', 1), ('accepted solution', 1), ('ad-hoc', 1), ('algorithms', 1), ('amazon', 1), ('amazon interview', 1), ('array nesting', 1), ('awesome samriddhi', 1), ('backtracking', 1), ('beating-100-submission', 1), ('beats 100 percent', 1), ('beginner friendly', 1), ('best', 1), ('best-solution', 1), ('bfs', 1), ('bfs simple solution', 1), ('bug', 1), ('c++ cpp', 1), ('c++ iterative sol', 1), ('clean', 1), ('clean code', 1), ('clean solution', 1), ('clear', 1), ('comments added', 1), ('constant memory', 1), ('constant-space', 1), ('cpp 100', 1), ('cpp clear', 1), ('csharp', 1), ('dfs simple solution', 1), ('direct-approach', 1), ('dp', 1), ('easy solution', 1), ('easy to understandd', 1), ('easy understanding', 1), ('easy undestanding', 1), ('easy-peasy', 1), ('easy-solition', 1), ('easyunderstanding', 1), ('efficient', 1), ('efficient solution', 1), ('elegant', 1), ('elegant solution', 1), ('enum', 1), ('explanation', 1), ('explanation with logic', 1), ('faster', 1), ('faster than 100', 1), ('faster than 90', 1), ('funny', 1), ('game', 1), ('generalized', 1), ('generators', 1), ('give stars and subscribe', 1), ('gluttonous', 1), ('go-solution', 1), ('google interview', 1), ('help', 1), ('help me', 1), ('immutable', 1), ('interesting', 1), ('intutive', 1), ('iterative solution', 1), ('iteratively', 1), ('iteratve', 1), ('java-simple-clean-solution', 1), ('javascript recursive', 1), ('kotlin', 1), ('kotlinvim', 1), ('lessspace', 1), ('linear algebra', 1), ('linear time', 1), ('linear-time', 1), ('list-slicing', 1), ('logic', 1), ('long', 1), ('loop', 1), ('matrix traverse', 1), ('matrixwrapper', 1), ('memory-limit-exceeded', 1), ('microsoft', 1), ('most-intuitive', 1), ('neat', 1), ('noob coding', 1), ('numpy', 1), ('object-oriented', 1), ('on', 1), ('one loop', 1), ('optimal approach', 1), ('peeling', 1), ('peymannp', 1), ('php solution', 1), ('pointer approach', 1), ('pyhon', 1), ('quadratic', 1), ('queues', 1), ('readable code', 1), ('ritik', 1), ('saravana', 1), ('self explanatory', 1), ('self-explanatory', 1), ('short c++ code', 1), ('short solution', 1), ('simpe', 1), ('simple c code', 1), ('simplest', 1), ('simplesweet', 1), ('single loop', 1), ('snake', 1), ('solution-rust', 1), ('solution-share', 1), ('solution-sharing-c', 1), ('solution-sharing-python', 1), ('solution-sharingjava', 1), ('sorting', 1), ('space-efficient', 1), ('spiral-matrix', 1), ('spiral-matrix cpp solution', 1), ('spiralmatrixii', 1), ('sprial', 1), ('stars move the article up', 1), ('straight-forward', 1), ('straightforward', 1), ('swift5', 1), ('switch-case', 1), ('tailrec', 1), ('template', 1), ('transpose', 1), ('tricky', 1), ('two-different-solutions', 1), ('typescript', 1), ('ultra simple', 1), ('understand', 1), ('upvote', 1), ('vector', 1), ('video explaination', 1), ('video explanation', 1), ('visual', 1), ('visualization', 1), ('with comments', 1), ('with-explanation', 1), ('wrong-answer', 1)]"
53,Maximum Subarray,https://leetcode.com/problems/maximum-subarray,"Given an integer array nums, find the contiguous subarray (containing at least one number) which has the largest sum and return its sum.","['array', 'divide-and-conquer', 'dynamic-programming']",Easy,11697,564,2924012,1401600,"[""Best Time to Buy and Sell Stock"", ""Maximum Product Subarray"", ""Degree of an Array"", ""Longest Turbulent Subarray"", ""Maximum Absolute Sum of Any Subarray"", ""Maximum Subarray Sum After One Operation""]","[('java', 140), ('python', 95), ('c++', 92), ('cpp', 89), ('dynamic programming', 76), ('javascript', 51), ('dynamic-programming', 48), ('python 3', 48), ('java-solution', 44), ('kadanes algorithm', 40), ('divide and conquer', 38), ('dp', 38), ('kadane algorithm', 35), ('python3', 35), ('kadanes algo', 34), ('kadane', 25), ('solution', 23), ('golang', 21), ('easy-understanding', 19), ('easy', 17), ('explained', 17), ('divideconquer', 15), ('c#', 14), ('cpp solution', 14), ('kadane-algorithm', 14), ('linear time', 13), ('maximum subarray', 12), ('easy-understand', 11), ('simple', 11), ('c', 10), ('c++ code', 10), ('easy code', 10), ('maximum-subarry', 10), ('short', 10), ('easy-undestand', 9), ('greedy', 9), ('video', 9), ('cpp easy', 8), ('go', 8), ('simple solution', 8), ('subarray', 8), ('golang-solution', 7), ('iterative', 7), ('kadens algorithm', 7), ('0ms', 6), ('array', 6), ('easy-to-understand', 6), ('go-solution', 6), ('javascript solution', 6), ('kadanes', 6), ('maxsubarray', 6), ('swift', 6), ('100 faster', 5), ('brute force', 5), ('comments', 5), ('constant-space', 5), ('maximum sub array sum', 5), ('python2', 5), ('100 speed', 4), ('accepted', 4), ('fast', 4), ('fast and simple', 4), ('kotlin', 4), ('linear-time', 4), ('recursive', 4), ('ruby', 4), ('simple clear c++ solution', 4), ('time-complexity', 4), ('brute force to optimal', 3), ('brute-force', 3), ('c++ solution', 3), ('constant space', 3), ('csharp', 3), ('divide-and-conquer', 3), ('easytounderstand', 3), ('explanation', 3), ('explanation of logic', 3), ('explanations', 3), ('facebook', 3), ('fast-solution', 3), ('java solution', 3), ('maximum', 3), ('memoization', 3), ('prefix sum', 3), ('recursion', 3), ('rust', 3), ('simplest', 3), ('solution-python', 3), ('time-limit-exceeded', 3), ('typescript', 3), ('#python3', 2), ('0ms-4ms', 2), ('1-line', 2), ('100', 2), ('100 beat', 2), ('100 faster runtime', 2), ('8ms', 2), ('algorithm', 2), ('algorithms', 2), ('amazon', 2), ('backtracking', 2), ('beginner friendly', 2), ('c++ hash', 2), ('clean code with comments', 2), ('commented', 2), ('cpp-solution', 2), ('divid and conquer', 2), ('divide-conquer', 2), ('dividedconquer', 2), ('dp-techqique', 2), ('easiest', 2), ('easy to understand', 2), ('efficient solution', 2), ('error', 2), ('for-loop', 2), ('greedy approach', 2), ('iterative traversal', 2), ('iteratively', 2), ('java ac solution', 2), ('java-8', 2), ('kadens algo', 2), ('kandane', 2), ('kedanes algorithm', 2), ('microsoft', 2), ('optimal', 2), ('public int maxsubarrayint', 2), ('recurision', 2), ('scala', 2), ('short code', 2), ('simple-solution', 2), ('slide window', 2), ('sliding window', 2), ('solution by python', 2), ('solution-sharing-cpp', 2), ('space-efficient', 2), ('time complexity', 2), ('top-down dp', 2), ('two-pointers', 2), ('video-explanation', 2), ('youtube', 2), ('#dynamic-programming', 1), ('#java', 1), ('#javascript', 1), ('#kadanes algorithm', 1), ('#wikipedia', 1), ('0ms runtime', 1), ('100 memory', 1), ('100 space', 1), ('100 time', 1), ('2 variable approach', 1), ('90 faster', 1), ('advanced', 1), ('algos explained', 1), ('algosexplained', 1), ('awesome samriddhi', 1), ('beating-100-submissions', 1), ('beats 100 percent', 1), ('begginer friendly', 1), ('begineer friendly', 1), ('beginners', 1), ('best-submission', 1), ('big o of n', 1), ('binary-search', 1), ('bottom up', 1), ('bottom up dp', 1), ('bruteforce', 1), ('c#-solution', 1), ('c++ dynamic programming', 1), ('c++14', 1), ('clean', 1), ('clean code', 1), ('coding interview', 1), ('commentary', 1), ('comments-added', 1), ('compile', 1), ('compile-error', 1), ('concise', 1), ('concise-solution', 1), ('constant memory', 1), ('contiguous-array', 1), ('cpp code', 1), ('detail explaination', 1), ('dive-and-conquer', 1), ('dp c++', 1), ('dp-programming', 1), ('dp-top-down', 1), ('dyanmic programming', 1), ('dynamic', 1), ('dynamic programmin', 1), ('dynammic programming', 1), ('easiest solution', 1), ('easy java solution', 1), ('easy sloution', 1), ('efficient approach', 1), ('effiecinet', 1), ('elegant', 1), ('es6', 1), ('expalanation', 1), ('explained solution', 1), ('explanation with logic', 1), ('faster', 1), ('fasterthan100', 1), ('fastest', 1), ('fold', 1), ('follow-up', 1), ('for loops', 1), ('functional programming', 1), ('geeksforgeeks', 1), ('goldman sachs', 1), ('google', 1), ('greedy algorithm', 1), ('help needed', 1), ('immutable', 1), ('improve', 1), ('incorrect-test-case', 1), ('induction rule', 1), ('intuitive', 1), ('ios', 1), ('java dynamic programming', 1), ('javascrip', 1), ('javscript', 1), ('js', 1), ('kandane approach', 1), ('kedanes', 1), ('kotlinvim', 1), ('linear', 1), ('max sum', 1), ('maximum-sub-array', 1), ('meiyaowen', 1), ('memoziation', 1), ('neat', 1), ('nlogn time', 1), ('no dp', 1), ('non-kadane', 1), ('non-recursion', 1), ('o-n2', 1), ('objective-c', 1), ('on linear', 1), ('on time', 1), ('one pass solution', 1), ('one-liner', 1), ('optimization', 1), ('partialsum', 1), ('paypal', 1), ('performance', 1), ('php', 1), ('php solution', 1), ('python-2', 1), ('python-3', 1), ('pythonpython3', 1), ('pythonsolution', 1), ('quadratic', 1), ('recusion', 1), ('ritik', 1), ('sachin singh', 1), ('self-explanatory', 1), ('sequence', 1), ('series', 1), ('simple approach', 1), ('sliding window algorithm', 1), ('sliding-window', 1), ('slidingwindow', 1), ('slow-performance', 1), ('slowest c++', 1), ('solution-javascript', 1), ('somal', 1), ('space-optimized', 1), ('step by step', 1), ('stl', 1), ('stock', 1), ('subsequence', 1), ('substring', 1), ('ternary-operator', 1), ('test-case', 1), ('testcase-wrong', 1), ('thought-process', 1), ('time-complexity-o', 1), ('top down', 1), ('tracking number', 1), ('understandable', 1), ('vector', 1), ('video explaination', 1), ('video explanation', 1), ('well-explained', 1), ('window-sliding', 1), ('wrong answer', 1), ('wrong-answer', 1), ('wronganswer', 1), ('xjq', 1)]"
52,N-Queens II,https://leetcode.com/problems/n-queens-ii,"The n-queens puzzle is the problem of placing n queens on an n x n chessboard such that no two queens attack each other.

Given an integer n, return the number of distinct solutions to the n-queens puzzle.",['backtracking'],Hard,818,182,265172,161199,"[""N-Queens""]","[('backtracking', 63), ('java', 32), ('c++', 25), ('cpp', 24), ('dfs', 21), ('python', 17), ('recursion', 14), ('recursive', 11), ('easy-understand', 10), ('python 3', 9), ('python3', 7), ('bitwise', 5), ('c++ code', 5), ('easy-understanding', 5), ('golang', 5), ('javascript', 5), ('simple', 5), ('backtrack', 4), ('bit manipulation', 4), ('java-solution', 4), ('backtracing', 3), ('best-submission', 3), ('c#', 3), ('easy-undestand', 3), ('nqueens', 3), ('short code', 3), ('solution', 3), ('0ms-solution', 2), ('back tracking', 2), ('bit-manipulation', 2), ('bitmasking', 2), ('cpp solution', 2), ('easy', 2), ('easy to understand', 2), ('fast-solution', 2), ('improve', 2), ('iterative', 2), ('rust', 2), ('short', 2), ('simple approach', 2), ('space-efficient', 2), ('swift', 2), ('upvote', 2), ('#backtracking', 1), ('#comments', 1), ('#detailed', 1), ('#dfs', 1), ('0ms', 1), ('100', 1), ('100 faster', 1), ('100 memory', 1), ('100 space', 1), ('100 speed', 1), ('array', 1), ('backtacking', 1), ('backtrace', 1), ('backtracking template', 1), ('bit operation', 1), ('bit-mask', 1), ('bitwise operation', 1), ('c++ easy to understand', 1), ('c++ summary of related problem', 1), ('c++code', 1), ('clarification', 1), ('clean code', 1), ('constant-space', 1), ('cpp-solution', 1), ('csharp', 1), ('dfs-bfs', 1), ('dynamic programming', 1), ('easy-understsand', 1), ('explained', 1), ('explanation of logic', 1), ('explanations', 1), ('explanations4problem', 1), ('fast', 1), ('fast and simple', 1), ('faster', 1), ('faster than 95.46', 1), ('fastest', 1), ('fastest solution', 1), ('fun', 1), ('go', 1), ('go lang', 1), ('intutive', 1), ('iteratively', 1), ('java bit-manipulation', 1), ('kotlin', 1), ('linked-list', 1), ('list comprehension', 1), ('mrmagician', 1), ('non-recursive', 1), ('php', 1), ('php solution', 1), ('readable', 1), ('recursively', 1), ('self explanatory', 1), ('share-solution', 1), ('simple clear c++ solution', 1), ('simple-solution', 1), ('solution-sharing-cpp', 1), ('stupid', 1), ('time-limit-exceeded', 1), ('tle', 1), ('ultra simple', 1), ('well-commented', 1), ('with-comments', 1), ('works-on-my-machine', 1), ('wrong-answer', 1), ('wrong-judge', 1)]"
51,N-Queens,https://leetcode.com/problems/n-queens,"The n-queens puzzle is the problem of placing n queens on an n x n chessboard such that no two queens attack each other.

Given an integer n, return all distinct solutions to the n-queens puzzle.

Each solution contains a distinct board configuration of the n-queens' placement, where 'Q' and '.' both indicate a queen and an empty space, respectively.",['backtracking'],Hard,2882,107,500203,252456,"[""N-Queens II"", ""Grid Illumination""]","[('backtracking', 112), ('java', 60), ('c++', 35), ('cpp', 31), ('python', 30), ('dfs', 24), ('solution', 19), ('recursive', 16), ('easy-understand', 15), ('java-solution', 12), ('python 3', 11), ('javascript', 10), ('python3', 10), ('recursion', 9), ('golang', 7), ('easy-understanding', 6), ('easy-undestand', 6), ('n-queens', 5), ('backtracing', 4), ('c#', 4), ('error', 4), ('fast-solution', 4), ('time-limit-exceeded', 4), ('wrong-answer', 4), ('backtrack', 3), ('bit manipulation', 3), ('clean code', 3), ('go', 3), ('iterative', 3), ('nqueens', 3), ('recurision', 3), ('recursively', 3), ('swift', 3), ('backrtracking', 2), ('bitmap', 2), ('comments', 2), ('comments-added', 2), ('easy-understsand', 2), ('explained solution', 2), ('help', 2), ('improve', 2), ('intuitive', 2), ('javascript backtrack', 2), ('n queen', 2), ('recusion', 2), ('ruby', 2), ('run-time-error', 2), ('scala', 2), ('solution-sharing-cpp', 2), ('sql', 2), ('tsql', 2), ('100 beat', 1), ('51', 1), ('accepted', 1), ('back tracking', 1), ('back-tracking', 1), ('backtacking', 1), ('backtrace', 1), ('best-submission', 1), ('bfs', 1), ('bit masking', 1), ('bit operation', 1), ('bit-manipulation', 1), ('branch and bound', 1), ('bug report', 1), ('c++ code', 1), ('c++11', 1), ('chess', 1), ('clean solution', 1), ('commented', 1), ('compiler-error', 1), ('cpp solution', 1), ('csharp', 1), ('debug', 1), ('debugging', 1), ('depth first search', 1), ('detailed explanation', 1), ('dfs-tree', 1), ('easiest', 1), ('easy', 1), ('easy to understand', 1), ('easy-to-understand', 1), ('easytounderstand', 1), ('explain', 1), ('explained', 1), ('explanation', 1), ('explanations', 1), ('faceebook', 1), ('fastest', 1), ('fp', 1), ('functional-programming', 1), ('generator', 1), ('global-variables', 1), ('golang-solution', 1), ('hashset', 1), ('hashtable', 1), ('haskell', 1), ('heavily commented', 1), ('intutive', 1), ('iteration', 1), ('java ac solution', 1), ('kotlin', 1), ('kotlinvim', 1), ('leetcode', 1), ('leetcode-issue-only', 1), ('less-memory', 1), ('limit-exceeded', 1), ('memory', 1), ('memory-release', 1), ('n-queens cpp solution', 1), ('output-limit-exceeded', 1), ('permutation', 1), ('permutations', 1), ('php', 1), ('php solution', 1), ('problem', 1), ('pyhton', 1), ('python2', 1), ('question-error', 1), ('quick', 1), ('readability', 1), ('runtime', 1), ('runtime-error', 1), ('rust', 1), ('self explanatory', 1), ('serialization', 1), ('shorter', 1), ('simple', 1), ('simple clear c++ solution', 1), ('simple solution', 1), ('solution-python', 1), ('solution-sharing-c', 1), ('solution-sharing-java', 1), ('solution-sharing-python', 1), ('soultion-sharing', 1), ('stdstack', 1), ('stl', 1), ('t-sql', 1), ('test-case', 1), ('trick', 1), ('ultra simple', 1), ('upvote', 1), ('very easy to understand', 1), ('video', 1), ('xjq', 1)]"
50,"Pow(x, n)",https://leetcode.com/problems/powx-n,"Implement pow(x, n), which calculates x raised to the power n (i.e., xn).","['math', 'binary-search']",Medium,2334,3777,2016562,627455,"[""Sqrt(x)"", ""Super Pow""]","[('java', 62), ('c++', 57), ('recursion', 55), ('cpp', 50), ('python', 41), ('python 3', 24), ('recursive', 20), ('javascript', 19), ('python3', 16), ('solution', 16), ('iterative', 15), ('java-solution', 13), ('cpp solution', 11), ('easy-undestand', 11), ('accepted', 10), ('easy', 10), ('easy-understanding', 10), ('binary exponentiation', 9), ('c++ code', 9), ('c#', 8), ('golang', 8), ('logarithmic time', 8), ('0ms', 7), ('binary-search', 7), ('divide and conquer', 7), ('test-case', 7), ('fast-solution', 6), ('math', 6), ('one-liner', 6), ('pow', 6), ('swift', 6), ('time-limit-exceeded', 6), ('cpp easy', 5), ('dynamic programming', 5), ('power', 5), ('recurision', 5), ('recursive easy', 5), ('short', 5), ('go', 4), ('go-solution', 4), ('simple', 4), ('time-complexity', 4), ('100 faster', 3), ('binary search', 3), ('bit manipulation', 3), ('detailed explanation', 3), ('dynamic-programming', 3), ('fast', 3), ('fasterthan100', 3), ('golang-solution', 3), ('logn', 3), ('memoization', 3), ('overflow', 3), ('php', 3), ('recursion-power-logn', 3), ('recursively', 3), ('rust', 3), ('shortest', 3), ('simple solution', 3), ('1 line', 2), ('100 speed', 2), ('binarysearch', 2), ('c', 2), ('c++ easy to understand', 2), ('c++ solution', 2), ('cheating', 2), ('clean code', 2), ('cpp doubt', 2), ('divide-and-conquer', 2), ('double', 2), ('dp', 2), ('easy-to-understand', 2), ('easytounderstand', 2), ('efficient', 2), ('error', 2), ('explained', 2), ('fast and simple', 2), ('google', 2), ('help needed', 2), ('iteratively', 2), ('logarithmic-space', 2), ('math.pow', 2), ('optimal', 2), ('php solution', 2), ('recursive solution', 2), ('run-time-error', 2), ('scala', 2), ('simpe', 2), ('solution-sharing-cpp', 2), ('stack-over-flow', 2), ('tail-recursive', 2), ('typescript', 2), ('#java', 1), ('0ms runtime', 1), ('0ms-solution', 1), ('1-liner', 1), ('100 faster cpp', 1), ('100 memory', 1), ('100 space', 1), ('1line', 1), ('1ms', 1), ('50', 1), ('99.41', 1), ('algorithms', 1), ('backtracking', 1), ('beating-100-submission', 1), ('beats 100', 1), ('beginner friendly', 1), ('binary', 1), ('binary-exponentation', 1), ('binary-tree', 1), ('bit-manipulation', 1), ('bitmanipulation', 1), ('bitset', 1), ('bitwise', 1), ('bitwise operation', 1), ('boundary condition', 1), ('brute-force', 1), ('bug', 1), ('c# solutions', 1), ('c++ iterative sol', 1), ('c++ recursive solution', 1), ('c++ soln', 1), ('clear-understanding', 1), ('closure', 1), ('commented', 1), ('comments', 1), ('compile-error', 1), ('complexity', 1), ('cool', 1), ('cplusplus', 1), ('cpp with explanation', 1), ('cpp-solution', 1), ('difficulty', 1), ('dive-and-conquer', 1), ('divideconquer', 1), ('doubts', 1), ('easiest', 1), ('easy cpp', 1), ('easy to understand', 1), ('easy to understandd', 1), ('easy-understand', 1), ('explained solution', 1), ('explanation', 1), ('exponential searches', 1), ('exponentiationbysquaring', 1), ('facebook', 1), ('fast slow pointer', 1), ('fastest', 1), ('functional-programming', 1), ('help', 1), ('improve', 1), ('inbuiltfunctions', 1), ('issue', 1), ('iterative solution', 1), ('iterative vs recursive', 1), ('iterator', 1), ('iteratve-recursive', 1), ('java ac solution', 1), ('java recursion', 1), ('javascipt', 1), ('javascrip', 1), ('javascript solution', 1), ('javasript', 1), ('joke', 1), ('js', 1), ('kotlinvim', 1), ('log', 1), ('log n', 1), ('logic exlpained', 1), ('loop', 1), ('loops', 1), ('mantissa', 1), ('math power', 1), ('mathematical', 1), ('medium', 1), ('meiyaowen', 1), ('not recursion', 1), ('number', 1), ('offical answer', 1), ('one line', 1), ('overflow fix', 1), ('perl', 1), ('power of two', 1), ('poweroftwo', 1), ('pyhon', 1), ('python3.8', 1), ('question-not-clear', 1), ('readability', 1), ('recrusion', 1), ('recurrance', 1), ('recurrence', 1), ('recusion', 1), ('recusive', 1), ('report', 1), ('reverse-bits', 1), ('runtime-error', 1), ('shared-answer', 1), ('simple clear c++ solution', 1), ('simplest', 1), ('solution c++', 1), ('solution-javascript', 1), ('solution-python', 1), ('solution-sharing-c', 1), ('sqrt', 1), ('stack diagram', 1), ('submission', 1), ('ternary operator', 1), ('testcase-wrong', 1), ('too easy', 1), ('top down dp', 1), ('trick', 1), ('two-pointers', 1), ('understanding', 1), ('video', 1), ('works-on-my-machine', 1), ('wrong answer', 1), ('wrong-answer', 1), ('xjq', 1), ('youtube', 1)]"
49,Group Anagrams,https://leetcode.com/problems/group-anagrams,"Given an array of strings strs, group the anagrams together. You can return the answer in any order.

An Anagram is a word or phrase formed by rearranging the letters of a different word or phrase, typically using all the original letters exactly once.","['hash-table', 'string']",Medium,5332,231,1516403,908741,"[""Valid Anagram"", ""Group Shifted Strings""]","[('python', 91), ('java', 90), ('hashmap', 78), ('c++', 55), ('cpp', 51), ('javascript', 50), ('python 3', 35), ('anagrams', 32), ('solution', 28), ('python3', 27), ('map', 21), ('c#', 19), ('java-solution', 17), ('easy-understanding', 15), ('sorting', 15), ('easy-undestand', 14), ('cpp solution', 13), ('dictionary', 13), ('easy-understand', 13), ('hash table', 11), ('swift', 11), ('unordered map', 11), ('easytounderstand', 9), ('hashing', 9), ('simple', 9), ('dictonary', 8), ('easy-to-understand', 8), ('string', 8), ('hashtable', 7), ('ruby', 7), ('simple solution', 7), ('easy', 6), ('improve', 6), ('javascript solution', 6), ('sort', 6), ('time-complexity', 6), ('accepted', 5), ('c++ code', 5), ('fast', 5), ('hash', 5), ('prime', 5), ('solution-sharing-cpp', 5), ('commented', 4), ('cpp easy', 4), ('defaultdict', 4), ('golang', 4), ('kotlin', 4), ('output-limit-exceeded', 4), ('short', 4), ('short solution', 4), ('vector', 4), ('anagram', 3), ('c', 3), ('explanation', 3), ('hash-function', 3), ('hashmap and sorting', 3), ('linear time', 3), ('linq', 3), ('one-liner', 3), ('scala', 3), ('short code', 3), ('time-limit-exceeded', 3), ('unorderedmap', 3), ('wrong-answer', 3), ('c++ hash', 2), ('c++ solution', 2), ('clean code', 2), ('comments-added', 2), ('concise-solution', 2), ('count-sort', 2), ('cpp doubt', 2), ('csharp', 2), ('dictionaries', 2), ('easiest', 2), ('easy understand', 2), ('efficiency', 2), ('error', 2), ('es6', 2), ('explained', 2), ('fast-solution', 2), ('go', 2), ('golang-solution', 2), ('groupanagrams', 2), ('java ac solution', 2), ('java solution', 2), ('java8', 2), ('lambda', 2), ('list', 2), ('lists', 2), ('microsoft', 2), ('no sort', 2), ('optimized', 2), ('php', 2), ('prime factorization', 2), ('prime numbers', 2), ('rust', 2), ('shorter', 2), ('sorted', 2), ('space-complexity', 2), ('stream', 2), ('typescript', 2), ('works-on-my-machine', 2), ('#dictionary', 1), ('#easy', 1), ('#easy-understand', 1), ('#javascript', 1), ('#python', 1), ('100 memory', 1), ('100 percentage fastest', 1), ('2 pass', 1), ('6ms', 1), ('90+', 1), ('algorithms', 1), ('amazon', 1), ('array', 1), ('arraylist', 1), ('ascii', 1), ('begineer', 1), ('beginner', 1), ('beginner friendly', 1), ('beginnerfriendly', 1), ('beginners', 1), ('brute force', 1), ('brute force solution', 1), ('bucket', 1), ('buckets', 1), ('bugs', 1), ('c# string', 1), ('c++11', 1), ('c++14', 1), ('clarification', 1), ('clear', 1), ('comparator', 1), ('concise', 1), ('constant-space', 1), ('count', 1), ('counting', 1), ('counting-array', 1), ('counting-sort', 1), ('cpp short solution', 1), ('cpp with explanation', 1), ('cpp-solution', 1), ('detailed explanation', 1), ('dfs', 1), ('dictionary c#', 1), ('dictionary comprehension', 1), ('dictionary features', 1), ('different approach', 1), ('different-oj-local', 1), ('discussion', 1), ('documentation', 1), ('easy solution', 1), ('easy-understsand', 1), ('easysolution', 1), ('efficient', 1), ('efficient solution', 1), ('encoding', 1), ('explaination', 1), ('fast and simple', 1), ('faster than 99.89', 1), ('faster then 95', 1), ('follow up', 1), ('frequency-count', 1), ('fun', 1), ('functional-programming', 1), ('give stars if you like', 1), ('go-solution', 1), ('goldmansachs', 1), ('group by', 1), ('hack', 1), ('hash function', 1), ('hash map', 1), ('hashcode', 1), ('hasher', 1), ('help', 1), ('how-to-approach', 1), ('how-to-enhance', 1), ('immutable', 1), ('iterative', 1), ('iterator', 1), ('java 8', 1), ('javasccript', 1), ('javasolution', 1), ('kotlinvim', 1), ('lenskart', 1), ('limit-exceeded', 1), ('linear', 1), ('linear memory', 1), ('linear-time', 1), ('map-stl', 1), ('maths', 1), ('memory', 1), ('mindset', 1), ('more-fast', 1), ('needimprovement', 1), ('nklogk', 1), ('no map', 1), ('no mapping', 1), ('nosort', 1), ('numbers', 1), ('one line', 1), ('one liner', 1), ('one-line', 1), ('one-loop', 1), ('oneline', 1), ('oneliner', 1), ('optimal', 1), ('ordered map', 1), ('php solution', 1), ('prime-number', 1), ('primes', 1), ('python2', 1), ('python3.8', 1), ('qsort', 1), ('raviinroorkee', 1), ('readable', 1), ('reduce', 1), ('saravana', 1), ('self-explanatory', 1), ('set', 1), ('simpe', 1), ('simple clear c++ solution', 1), ('simple explanation', 1), ('simple python solution', 1), ('solution c++', 1), ('solution-java', 1), ('solution-javascript', 1), ('solution-python', 1), ('solution-share', 1), ('solution-sharing-c', 1), ('solutions', 1), ('solved', 1), ('sort-function', 1), ('sorted-array', 1), ('space', 1), ('speed', 1), ('standard-library', 1), ('streams', 1), ('string-sorting', 1), ('strings manipulation', 1), ('swift5', 1), ('test', 1), ('test-case', 1), ('test-cases', 1), ('three-lines', 1), ('time-complexity-o', 1), ('tle', 1), ('trie', 1), ('unique solution', 1), ('unordermap', 1), ('valid anagram', 1), ('vector-of-vector', 1), ('video explaination', 1), ('video explanation', 1), ('whiteboard', 1), ('with-explanation', 1), ('without sorting', 1), ('word-pattern', 1)]"
48,Rotate Image,https://leetcode.com/problems/rotate-image,"You are given an n x n 2D matrix representing an image, rotate the image by 90 degrees (clockwise).

You have to rotate the image in-place, which means you have to modify the input 2D matrix directly. DO NOT allocate another 2D matrix and do the rotation.",['array'],Medium,4903,340,946288,579221,[],"[('java', 112), ('c++', 82), ('python', 82), ('cpp', 80), ('python 3', 51), ('javascript', 48), ('transpose', 42), ('java-solution', 32), ('in-place', 29), ('rotate-image', 26), ('easy-understanding', 23), ('solution', 22), ('cpp solution', 15), ('python3', 15), ('easy', 14), ('matrix', 12), ('easy-undestand', 11), ('simple', 11), ('swap', 11), ('c#', 9), ('matrix-rotation', 9), ('recursion', 9), ('accepted', 8), ('easytounderstand', 8), ('golang', 8), ('c', 7), ('c++ code', 7), ('cpp easy', 7), ('easy-to-understand', 7), ('fastest', 7), ('golang-solution', 7), ('javascript solution', 7), ('matrix rotate', 7), ('simple solution', 7), ('100 speed', 6), ('easy-understand', 6), ('reverse', 6), ('ruby', 6), ('0ms', 5), ('100 space', 5), ('array', 5), ('constant-space', 5), ('fast and simple', 5), ('fast-solution', 5), ('go', 5), ('js', 5), ('swift', 5), ('transpose matrix', 5), ('2d-array', 4), ('explained', 4), ('go-solution', 4), ('math', 4), ('recursive', 4), ('rust', 4), ('short', 4), ('swapping', 4), ('c++ solution', 3), ('c++11', 3), ('clean code', 3), ('comments added', 3), ('constant space', 3), ('cpp-solution', 3), ('easy to understand', 3), ('es6', 3), ('fasterthan100', 3), ('inplace', 3), ('iterative', 3), ('matrix rotation', 3), ('mirror', 3), ('python2', 3), ('rotateimage', 3), ('scala', 3), ('swap-in-place', 3), ('#easy-understanding', 2), ('100 faster cpp', 2), ('100 faster runtime', 2), ('arrays', 2), ('best-submission', 2), ('commented', 2), ('commented code', 2), ('csharp', 2), ('easiest', 2), ('efficient', 2), ('efficient solution', 2), ('explaination', 2), ('fast', 2), ('grid', 2), ('image', 2), ('improve', 2), ('java ac solution', 2), ('linear time', 2), ('reverse array', 2), ('reverse list', 2), ('reversed', 2), ('rotate', 2), ('rotate image', 2), ('rotation', 2), ('share-solution', 2), ('shortest', 2), ('simple clear c++ solution', 2), ('simple-solution', 2), ('stack', 2), ('time-complexity', 2), ('typescript', 2), ('vector', 2), ('wrong-answer', 2), ('#c++', 1), ('#codeboy', 1), ('#in-place', 1), ('#javascript', 1), ('#python', 1), ('#python 3', 1), ('0ms runtime', 1), ('10 lines', 1), ('100 beat', 1), ('100 faster', 1), ('100 faster c++', 1), ('100 memory', 1), ('100 percentage fastest', 1), ('48', 1), ('4ms', 1), ('8 lines', 1), ('ac solution', 1), ('algorithm', 1), ('amazon', 1), ('anticlockwise', 1), ('approach and code', 1), ('awesome samriddhi', 1), ('begginer friendly', 1), ('best-solution', 1), ('bitwise', 1), ('c++ easy solution', 1), ('c++ easy to understand', 1), ('c++ iterative sol', 1), ('c++ swap', 1), ('c++17', 1), ('clean', 1), ('clean-code', 1), ('clearly', 1), ('comments-added', 1), ('cpp 100', 1), ('cpp code', 1), ('detailed explanation', 1), ('dfs', 1), ('dfs-recursive', 1), ('divide and conquer', 1), ('easiest solution', 1), ('easy sloution', 1), ('easy understanding', 1), ('easysolution', 1), ('enum', 1), ('explanation', 1), ('explanation with logic', 1), ('facebook', 1), ('faster', 1), ('faster than 100', 1), ('faster than 99', 1), ('fastest c++ solution', 1), ('fastest solution', 1), ('flip', 1), ('flipimage', 1), ('fold', 1), ('for-loop', 1), ('functional-programming', 1), ('go lang', 1), ('google', 1), ('graph', 1), ('hashmap', 1), ('imagerotation', 1), ('iterate', 1), ('iteration', 1), ('iterative solution', 1), ('iteratively', 1), ('itereative', 1), ('java simple', 1), ('java-8', 1), ('javascriptes6', 1), ('kotlinvim', 1), ('linear-time', 1), ('list-comprehension', 1), ('lol', 1), ('martix', 1), ('mate', 1), ('medium', 1), ('memory-limit-exceeded', 1), ('modified', 1), ('myfirst', 1), ('no-extra-space', 1), ('non-recursive', 1), ('numpy', 1), ('o1 space complexity', 1), ('o1space', 1), ('one-liner', 1), ('one-pass', 1), ('oneline', 1), ('oneliner', 1), ('optimal', 1), ('optimal solution', 1), ('optimisation', 1), ('performance', 1), ('peymannp', 1), ('php', 1), ('php solution', 1), ('place', 1), ('pointer', 1), ('proper-solution', 1), ('python3.3', 1), ('python3.8', 1), ('python3.9', 1), ('pythonic', 1), ('question', 1), ('quick', 1), ('readable', 1), ('readable code', 1), ('reversal algorithm', 1), ('ritik', 1), ('runtime-error', 1), ('shit', 1), ('short solution', 1), ('simple c++', 1), ('simpler', 1), ('simplesolution', 1), ('simplest-efficient-solution', 1), ('solution-python', 1), ('solution-sharing-cpp', 1), ('solution-sharing-java', 1), ('solution-sharingjava', 1), ('space-complexity', 1), ('speed', 1), ('stars move the article up', 1), ('stl algorithms', 1), ('straight-forward', 1), ('swap value', 1), ('sweetandsour', 1), ('symmetrically', 1), ('testcase-wrong', 1), ('three-lines', 1), ('transform', 1), ('traversal', 1), ('trigonometric function', 1), ('two lines solution', 1), ('two pointer technique', 1), ('vector 2d', 1), ('very easy to understand', 1), ('video', 1), ('well-commented', 1), ('with documentation', 1), ('xjq', 1), ('zip', 1)]"
47,Permutations II,https://leetcode.com/problems/permutations-ii,"Given a collection of numbers, nums, that might contain duplicates, return all possible unique permutations in any order.",['backtracking'],Medium,2935,78,904415,452129,"[""Next Permutation"", ""Permutations"", ""Palindrome Permutation II"", ""Number of Squareful Arrays""]","[('backtracking', 103), ('java', 64), ('python', 55), ('cpp', 36), ('c++', 34), ('javascript', 32), ('recursion', 32), ('python 3', 25), ('dfs', 18), ('python3', 14), ('solution', 14), ('easy-understand', 12), ('java-solution', 11), ('time-limit-exceeded', 10), ('c#', 9), ('permutation', 8), ('recursive', 8), ('simple', 8), ('cpp solution', 7), ('easy-understanding', 7), ('golang', 7), ('permutations', 7), ('permutations ii', 7), ('easy', 5), ('easy-to-understand', 5), ('hashmap', 5), ('iterative', 5), ('back tracking', 4), ('c++ code', 4), ('dfs simple solution', 4), ('easy-undestand', 4), ('fast-solution', 4), ('js', 4), ('map', 4), ('output-limit-exceeded', 4), ('permutationii', 4), ('ruby', 4), ('accepted', 3), ('easytounderstand', 3), ('fast', 3), ('hash table', 3), ('hashset', 3), ('itertools', 3), ('non-recursion', 3), ('one-liner', 3), ('recurision', 3), ('recusion', 3), ('set', 3), ('short', 3), ('algorithms', 2), ('array', 2), ('backtrack', 2), ('c++11', 2), ('compile-error', 2), ('cpp easy', 2), ('csharp', 2), ('duplicate', 2), ('dynamic-programming', 2), ('easy to understand', 2), ('explained', 2), ('fast and simple', 2), ('go-solution', 2), ('golang-solution', 2), ('improve', 2), ('intuitive', 2), ('itereative', 2), ('java ac solution', 2), ('java solution', 2), ('javascript solution', 2), ('javascriptes6', 2), ('keep it simple', 2), ('limit-exceeded', 2), ('nextpermutation', 2), ('oneline', 2), ('php', 2), ('pruning', 2), ('python2', 2), ('rust', 2), ('somal', 2), ('stl', 2), ('time-limit-exceeded-java', 2), ('tle', 2), ('trie-dfs', 2), ('video', 2), ('#backtracking', 1), ('#help', 1), ('#itertools', 1), ('#javascript', 1), ('#python', 1), ('#python #sets', 1), ('annotated', 1), ('back-tracking', 1), ('backtracking template', 1), ('best-submission', 1), ('bfs', 1), ('c++ recursion', 1), ('c++ solution', 1), ('clean', 1), ('clean code', 1), ('collections', 1), ('commented', 1), ('comments', 1), ('comments-added', 1), ('compilation', 1), ('cplusplus', 1), ('depth first search', 1), ('depth-first-search', 1), ('dfs recursive', 1), ('dictionaries', 1), ('difficulty', 1), ('documented', 1), ('dynamic programming', 1), ('easy sloution', 1), ('easy to understant', 1), ('easy undestanding', 1), ('easy-understsand', 1), ('es6', 1), ('exceeded', 1), ('explantion', 1), ('faster', 1), ('frequency', 1), ('generator', 1), ('hard', 1), ('hash-table', 1), ('heaps algorithm', 1), ('help', 1), ('intuition', 1), ('ite', 1), ('iteratively', 1), ('javacript', 1), ('javascrip', 1), ('js javascript', 1), ('json', 1), ('json error', 1), ('kotlin', 1), ('kotlinvim', 1), ('lazy', 1), ('limit', 1), ('linked-list', 1), ('list-slicing', 1), ('medium', 1), ('memoization', 1), ('memoziation', 1), ('merge', 1), ('missing-edge-case', 1), ('mrmagician', 1), ('no-recursion', 1), ('non-recursive', 1), ('one-line', 1), ('output', 1), ('pass-by-reference', 1), ('photo', 1), ('php solution', 1), ('picture', 1), ('ptyhon', 1), ('pythonic', 1), ('question-not-clear', 1), ('reccursive', 1), ('recursion memoization', 1), ('recursion stack', 1), ('recursively', 1), ('recusive', 1), ('runtime-error', 1), ('solution c++', 1), ('solution-cpp', 1), ('solution-python', 1), ('solution-share', 1), ('solution-sharing-c', 1), ('solution-sharing-cpp', 1), ('stack', 1), ('stl algorithms', 1), ('swap', 1), ('swift', 1), ('template', 1), ('time-complexity', 1), ('trie', 1), ('typescript', 1), ('unordered-set', 1), ('unorderedset', 1), ('unordermap', 1), ('upvote', 1), ('visualization', 1), ('well-commented', 1), ('without-set', 1), ('wrong-answer', 1), ('yield return', 1), ('youtube', 1)]"
46,Permutations,https://leetcode.com/problems/permutations,"Given an array nums of distinct integers, return all the possible permutations. You can return the answer in any order.",['backtracking'],Medium,5890,134,1195331,804631,"[""Next Permutation"", ""Permutations II"", ""Permutation Sequence"", ""Combinations""]","[('backtracking', 158), ('java', 100), ('python', 96), ('recursion', 77), ('c++', 59), ('cpp', 59), ('javascript', 55), ('python 3', 49), ('dfs', 34), ('recursive', 32), ('python3', 25), ('solution', 25), ('golang', 19), ('permutations', 18), ('permutation', 16), ('easy-understand', 15), ('easy-understanding', 15), ('java-solution', 10), ('bfs', 9), ('c#', 9), ('c++ code', 8), ('recurision', 8), ('back tracking', 7), ('recusion', 7), ('stl', 7), ('js', 6), ('accepted', 5), ('backtacking', 5), ('dfs simple solution', 5), ('easy', 5), ('explanation', 5), ('go', 5), ('golang-solution', 5), ('iterative', 5), ('short', 5), ('simple', 5), ('backtrack', 4), ('cpp solution', 4), ('dynamic programming', 4), ('easy-undestand', 4), ('explained', 4), ('fast-solution', 4), ('improve', 4), ('kotlin', 4), ('python2', 4), ('recursively', 4), ('ruby', 4), ('scala', 4), ('swift', 4), ('video', 4), ('wrong-answer', 4), ('array', 3), ('backrtracking', 3), ('backtracing', 3), ('c++14', 3), ('clean code', 3), ('commented', 3), ('dp', 3), ('dynamic-programming', 3), ('go-solution', 3), ('itertools.permutations', 3), ('queue', 3), ('recursive solution', 3), ('rust', 3), ('simplest', 3), ('solution-python', 3), ('time-complexity', 3), ('typescript', 3), ('#python', 2), ('#recursion', 2), ('0ms', 2), ('beginner friendly', 2), ('best-submission', 2), ('breadth first search', 2), ('c++ recursion', 2), ('c++11', 2), ('compile-error', 2), ('detailed explanation', 2), ('easiest', 2), ('easy-to-understand', 2), ('explain', 2), ('explaination', 2), ('fastest', 2), ('hashset', 2), ('immutable', 2), ('iteratve', 2), ('java solution', 2), ('javascript recursive', 2), ('javascript solution', 2), ('nextpermutation', 2), ('non-recursive', 2), ('one-liner', 2), ('python3.8', 2), ('pythonpython3', 2), ('recurrance', 2), ('recursive easy', 2), ('run-time-error', 2), ('runtime-error', 2), ('short solution', 2), ('string', 2), ('test-case', 2), ('video-explanation', 2), ('#0ms', 1), ('#itertools', 1), ('#java', 1), ('#javascript', 1), ('#permutation', 1), ('1 line', 1), ('2 solutions', 1), ('2ms', 1), ('95 space', 1), ('99.98 faster', 1), ('adjacency graph', 1), ('back-tracking', 1), ('backtracking dfs', 1), ('beats 97', 1), ('beginnerfriendly', 1), ('bit-vector', 1), ('bitmask', 1), ('bottom up dp', 1), ('breadth-first-search', 1), ('brute force', 1), ('c', 1), ('c++ recursive solution', 1), ('clean solution', 1), ('clean-code', 1), ('clean-efficient-code', 1), ('comments-added', 1), ('confusion', 1), ('constant-space', 1), ('cplusplus', 1), ('cpp easy', 1), ('cpp short solution', 1), ('cpp-solution', 1), ('csharp', 1), ('description', 1), ('dfs simple', 1), ('dfs-tree', 1), ('diagrams', 1), ('divid and conquer', 1), ('divide and conquer', 1), ('doubts', 1), ('dynamic', 1), ('easy solution', 1), ('easy to read', 1), ('easy to underatnd', 1), ('easy to understand', 1), ('easy understand', 1), ('easy understanding', 1), ('easy-solition', 1), ('easy-undesrtanding', 1), ('easytoundersatand', 1), ('easytounderstand', 1), ('erase method', 1), ('error', 1), ('fast', 1), ('fastest java solution', 1), ('fastest solution', 1), ('feedback', 1), ('generalizable', 1), ('generator', 1), ('generator-function', 1), ('generators', 1), ('go lang', 1), ('heaps algorithm', 1), ('help me', 1), ('help needed', 1), ('how-to-approach', 1), ('how-to-enhance', 1), ('intution', 1), ('iterative approch', 1), ('iteratively', 1), ('iterator', 1), ('java ac solution', 1), ('javacript', 1), ('javasacript', 1), ('javascrip', 1), ('keep it simple', 1), ('knuths permutation algo', 1), ('kotlinvim', 1), ('leetcode-only', 1), ('linkedlist', 1), ('linklist', 1), ('list-comprehension', 1), ('maps', 1), ('memory optimization', 1), ('mindset', 1), ('missing-test-case', 1), ('non-backtrack', 1), ('non-backtracking', 1), ('non-recursion', 1), ('nonrecursive', 1), ('noob', 1), ('one liner', 1), ('oneline', 1), ('optimal', 1), ('output-limit-exceeded', 1), ('php', 1), ('php solution', 1), ('please', 1), ('programming', 1), ('pyton', 1), ('question', 1), ('questions', 1), ('reccursion', 1), ('recursion formula', 1), ('recursive approach', 1), ('recursive-dfs', 1), ('set', 1), ('sets', 1), ('shared-answer', 1), ('short code', 1), ('shortes', 1), ('similar-problems', 1), ('simple solution', 1), ('simple-solution', 1), ('solution by python', 1), ('solution-share', 1), ('solution-sharing-c', 1), ('solution-sharing-cpp', 1), ('sorting', 1), ('stl algorithms', 1), ('subsetsum', 1), ('swap-in-place', 1), ('swift5', 1), ('tail-recursion', 1), ('template', 1), ('testcase-wrong', 1), ('time-complexity-o', 1), ('top-down', 1), ('vector', 1), ('video explaination', 1), ('video link', 1), ('visualization', 1), ('works-on-my-machine', 1)]"
45,Jump Game II,https://leetcode.com/problems/jump-game-ii,"Given an array of non-negative integers nums, you are initially positioned at the first index of the array.

Each element in the array represents your maximum jump length at that position.

Your goal is to reach the last index in the minimum number of jumps.

You can assume that you can always reach the last index.","['array', 'greedy']",Medium,4046,176,1048489,334177,"[""Jump Game"", ""Jump Game III""]","[('greedy', 57), ('java', 48), ('c++', 39), ('cpp', 39), ('python', 38), ('dynamic programming', 36), ('python 3', 20), ('greedy approach', 17), ('dp', 14), ('bfs', 13), ('dynamic-programming', 13), ('python3', 13), ('easy-understanding', 12), ('java-solution', 10), ('javascript', 10), ('short', 8), ('time-limit-exceeded', 7), ('cpp solution', 6), ('easy', 6), ('comments', 5), ('linear time', 5), ('simple', 5), ('100 speed', 4), ('c#', 4), ('cpp easy', 4), ('easy-understand', 4), ('golang', 4), ('solution', 4), ('test-case', 4), ('algorithms', 3), ('constant-space', 3), ('easy-to-understand', 3), ('greedy algorithm', 3), ('jump-game-ii', 3), ('python2', 3), ('simple solution', 3), ('stack', 3), ('#java', 2), ('100 space', 2), ('binary-search', 2), ('breadth first search', 2), ('breadth-first-search', 2), ('c', 2), ('c++ code', 2), ('constant space', 2), ('csharp', 2), ('dp-programming', 2), ('easy-undestand', 2), ('efficient', 2), ('explaination', 2), ('explained', 2), ('explained solution', 2), ('explanation of logic', 2), ('fasterthan100', 2), ('fastest', 2), ('jumpgameii', 2), ('memoization', 2), ('on', 2), ('optimal', 2), ('queue', 2), ('recursion', 2), ('recursive', 2), ('ruby', 2), ('swift', 2), ('time limit exceeded', 2), ('time-complexity', 2), ('upvote', 2), ('well-explained', 2), ('wrong-answer', 2), ('#greedy', 1), ('#help', 1), ('#python 3', 1), ('#tle', 1), ('0ms', 1), ('100 faster', 1), ('100 faster cpp', 1), ('99 fast', 1), ('accepted', 1), ('algos explained', 1), ('answer', 1), ('approach and code', 1), ('awesome samriddhi', 1), ('backtracking', 1), ('beating-100-submission', 1), ('beating-100-submissions', 1), ('best-solution-ever', 1), ('best-submission', 1), ('bfs python', 1), ('bottoms-up', 1), ('brute force', 1), ('brute-force', 1), ('c++ easy to understand', 1), ('c++ iterative sol', 1), ('c++ solution', 1), ('cartesian-tree', 1), ('check', 1), ('commentary', 1), ('commented', 1), ('commentedcppcode', 1), ('comments added', 1), ('compile-error', 1), ('concise', 1), ('detail', 1), ('dfs', 1), ('dijkstra', 1), ('dp made easy', 1), ('dp-techqique', 1), ('early stopping', 1), ('easiest', 1), ('easy sloution', 1), ('easy understand', 1), ('easytoundersatand', 1), ('easytounderstand', 1), ('efficient solution', 1), ('explanation', 1), ('explanations', 1), ('faster', 1), ('fully commented', 1), ('fully explained', 1), ('generator', 1), ('go', 1), ('go-solution', 1), ('golang-solution', 1), ('greedy algorithms', 1), ('improve', 1), ('interval', 1), ('intuitive', 1), ('intutive', 1), ('iterate', 1), ('iteration', 1), ('javascrip', 1), ('javascript solution', 1), ('jump-game', 1), ('jumpgame', 1), ('kotlin', 1), ('kotlin-solution', 1), ('linear-time', 1), ('local-optima', 1), ('logic explained', 1), ('logic explained clearly', 1), ('memoisation', 1), ('memory-optimized', 1), ('mrmagician', 1), ('nlogn time', 1), ('optimisation', 1), ('optimized', 1), ('optimized solution', 1), ('performance', 1), ('php', 1), ('printingpath', 1), ('proof', 1), ('recursion memoization', 1), ('reverse', 1), ('ritik', 1), ('rust', 1), ('scala', 1), ('self explanatory', 1), ('sequence', 1), ('series', 1), ('simple clear c++ solution', 1), ('simple-solution', 1), ('sliding window', 1), ('smallest', 1), ('solution-sharing-c', 1), ('solution-sharing-cpp', 1), ('spicy', 1), ('stack-implementation', 1), ('testcase-wrong', 1), ('thinking process', 1), ('tle', 1), ('tle solved', 1), ('top down dp', 1), ('two-pointer', 1), ('two-pointers', 1), ('ultra simple', 1), ('understand', 1), ('using dp approach', 1), ('very easy to understand', 1), ('video explaination', 1), ('visualization', 1), ('with comments', 1), ('works-on-my-machine', 1)]"
44,Wildcard Matching,https://leetcode.com/problems/wildcard-matching,"Given an input string (s) and a pattern (p), implement wildcard pattern matching with support for '?' and '*' where:


	'?' Matches any single character.
	'*' Matches any sequence of characters (including the empty sequence).


The matching should cover the entire input string (not partial).","['string', 'dynamic-programming', 'backtracking', 'greedy']",Hard,2913,141,1173419,300406,"[""Regular Expression Matching""]","[('dynamic programming', 50), ('java', 37), ('python', 31), ('cpp', 28), ('dynamic-programming', 23), ('c++', 19), ('dp', 19), ('memoization', 16), ('javascript', 12), ('python 3', 9), ('solution', 8), ('easy-understand', 7), ('recursion', 7), ('golang', 6), ('time-complexity', 6), ('run-time-error', 5), ('tabulation', 5), ('time-limit-exceeded', 5), ('works-on-my-machine', 5), ('wrong-answer', 5), ('c#', 4), ('constant-space', 4), ('easy-understanding', 4), ('java-solution', 4), ('python3', 4), ('string', 4), ('error', 3), ('go', 3), ('greedy', 3), ('memorization', 3), ('runtime', 3), ('test-case', 3), ('testcase-wrong', 3), ('top down dp', 3), ('accepted', 2), ('best-submission', 2), ('bottom up', 2), ('bottom-up', 2), ('c', 2), ('cpp solution', 2), ('dfs', 2), ('easytounderstand', 2), ('fast', 2), ('kotlin', 2), ('matching', 2), ('nfa', 2), ('non-recursive', 2), ('recursive', 2), ('regex', 2), ('regular-expression', 2), ('runtime-error', 2), ('swift', 2), ('topdown', 2), ('awesome samriddhi', 1), ('backrtracking', 1), ('backtracing', 1), ('backtracking', 1), ('bit-manipulation', 1), ('bottomup', 1), ('brute-force', 1), ('c++ code', 1), ('c++ easy to understand', 1), ('c++ solution', 1), ('chinese', 1), ('clean', 1), ('commented', 1), ('consice', 1), ('depth first search', 1), ('detailed', 1), ('detailed explanation', 1), ('dfs-bottomup', 1), ('documentation', 1), ('dp-programming', 1), ('dp-techqique', 1), ('drewbie', 1), ('duplicated-question', 1), ('dynamic progr', 1), ('easy solution', 1), ('easy-to-understand', 1), ('expalnation', 1), ('explanation', 1), ('fast-solution', 1), ('go-solution', 1), ('incomplete-testcases', 1), ('iterative', 1), ('iterative approch', 1), ('iteratively', 1), ('javascript solution', 1), ('keep it simple', 1), ('kmp', 1), ('limit-exceeded', 1), ('linear memory', 1), ('memory', 1), ('memory-search', 1), ('memoziation', 1), ('not', 1), ('optimized', 1), ('pointer', 1), ('problem', 1), ('pseudocode', 1), ('python dp', 1), ('question', 1), ('question-not-clear', 1), ('recursion memoization', 1), ('recursive easy', 1), ('recursive-dfs', 1), ('request-for-explanation', 1), ('ritik', 1), ('ruby', 1), ('scala', 1), ('short', 1), ('short code', 1), ('simple clear c++ solution', 1), ('simple-solution', 1), ('solution-explaining', 1), ('solution-sharing-c', 1), ('solution-sharing-cpp', 1), ('space-complexity', 1), ('top down approach', 1), ('top-down', 1), ('trick', 1), ('two', 1), ('two-pointers', 1), ('typescript', 1), ('wildcard', 1)]"
43,Multiply Strings,https://leetcode.com/problems/multiply-strings,"Given two non-negative integers num1 and num2 represented as strings, return the product of num1 and num2, also represented as a string.

Note: You must not use any built-in BigInteger library or convert the inputs to integer directly.","['math', 'string']",Medium,2468,990,1039855,366274,"[""Add Two Numbers"", ""Plus One"", ""Add Binary"", ""Add Strings""]","[('python', 85), ('python 3', 41), ('java', 37), ('cpp', 27), ('python3', 18), ('solution', 18), ('c++', 16), ('javascript', 16), ('accepted', 13), ('easy-understanding', 10), ('easy-undestand', 9), ('easy-understand', 8), ('easy', 7), ('java-solution', 7), ('biginteger', 6), ('simple', 6), ('c#', 5), ('easiest', 5), ('wrong-answer', 5), ('commented', 4), ('cpp solution', 4), ('golang-solution', 4), ('javascript solution', 4), ('math', 4), ('multiply-strings', 4), ('string', 4), ('c++ code', 3), ('cpp-solution', 3), ('easy-to-understand', 3), ('explanation of logic', 3), ('fast', 3), ('short', 3), ('simple solution', 3), ('time-limit-exceeded', 3), ('beginner friendly', 2), ('best-submission', 2), ('c', 2), ('constant-space', 2), ('detailed explanation', 2), ('dynamic-programming', 2), ('easiest solution', 2), ('easy-solition', 2), ('example', 2), ('fast and simple', 2), ('golang', 2), ('karatsuba-algorithm', 2), ('list comprehension', 2), ('one-liner', 2), ('rust', 2), ('solution-python', 2), ('solution-sharing-python', 2), ('string-operation', 2), ('test-case', 2), ('time-complexity', 2), ('works-on-my-machine', 2), ('100', 1), ('100 memory', 1), ('100 speed', 1), ('3ms', 1), ('95percentile', 1), ('answer', 1), ('ascii-art', 1), ('atoi', 1), ('bit-manipulation', 1), ('c++14', 1), ('class-based', 1), ('clean code', 1), ('clearsolution', 1), ('compile-error', 1), ('cpp doubt', 1), ('cpp easy', 1), ('csharp', 1), ('dictionaries', 1), ('dictonary', 1), ('digit', 1), ('divide-and-conquer', 1), ('divideconquer', 1), ('easy-undesrtanding', 1), ('easytoundersatand', 1), ('easytounderstand', 1), ('elementary', 1), ('esay-understand', 1), ('explanation', 1), ('fast-solution', 1), ('for loop', 1), ('fun', 1), ('general', 1), ('go-solution', 1), ('google', 1), ('hashmap', 1), ('ieee-floating-point', 1), ('implementation', 1), ('improve', 1), ('incomplete-testcases', 1), ('integer', 1), ('internal-error', 1), ('invariant', 1), ('iterative', 1), ('java ac solution', 1), ('java solution', 1), ('kotlinvim', 1), ('leetcode-issue-only', 1), ('lesstime', 1), ('linkedlists', 1), ('list', 1), ('listnode', 1), ('long-multiplication', 1), ('math-solution', 1), ('medium', 1), ('meiyaowen', 1), ('memory', 1), ('microsoft', 1), ('more-fast', 1), ('murod turaev', 1), ('n+m', 1), ('nagativevalue', 1), ('one', 1), ('oneliner', 1), ('ord', 1), ('php', 1), ('php solution', 1), ('pseudocode', 1), ('python-dictionary', 1), ('python2', 1), ('python3.8', 1), ('quick multiplication', 1), ('recursive', 1), ('request-for-explanation', 1), ('run-time-error', 1), ('short code', 1), ('simple clear c++ solution', 1), ('simplesolution', 1), ('simplest solution', 1), ('single line', 1), ('solution-sharing-cpp', 1), ('stl', 1), ('string-integer', 1), ('stringbuilder', 1), ('strings', 1), ('swift', 1), ('testcase-wrong', 1), ('tle', 1), ('underflow-infinity', 1), ('vector', 1), ('well-commented', 1), ('well-explained', 1), ('without built-in', 1), ('xjq', 1)]"
42,Trapping Rain Water,https://leetcode.com/problems/trapping-rain-water,"Given n non-negative integers representing an elevation map where the width of each bar is 1, compute how much water it can trap after raining.","['array', 'two-pointers', 'dynamic-programming', 'stack']",Hard,10970,165,1413297,731935,"[""Container With Most Water"", ""Product of Array Except Self"", ""Trapping Rain Water II"", ""Pour Water""]","[('java', 88), ('python', 65), ('dynamic programming', 50), ('python 3', 42), ('cpp', 41), ('c++', 39), ('javascript', 32), ('two-pointers', 32), ('java-solution', 26), ('easy-understanding', 18), ('python3', 16), ('solution', 15), ('easy-understand', 12), ('stacks', 12), ('two-pointer', 11), ('golang', 10), ('stack', 10), ('cpp solution', 9), ('dp', 9), ('easy-to-understand', 9), ('linear time', 9), ('c#', 8), ('constant space', 8), ('simple', 8), ('rust', 7), ('two pointers', 7), ('accepted', 6), ('array', 6), ('brute-force', 6), ('constant-space', 6), ('easy', 6), ('golang-solution', 6), ('ruby', 6), ('trapping-rain-water', 6), ('2 pointers', 5), ('easytounderstand', 5), ('kotlin', 5), ('pointer', 5), ('2 pointer', 4), ('brute force', 4), ('c', 4), ('easy-undestand', 4), ('go', 4), ('intuitive', 4), ('simple solution', 4), ('stack-based', 4), ('swift', 4), ('time-complexity', 4), ('2pointers', 3), ('amazon', 3), ('c++ code', 3), ('commented', 3), ('comments', 3), ('dynamic-programming', 3), ('explained', 3), ('go-solution', 3), ('greedy', 3), ('iterate', 3), ('java solution', 3), ('javascript solution', 3), ('linear-time', 3), ('php', 3), ('recursion', 3), ('short', 3), ('time-limit-exceeded', 3), ('trapping rain water', 3), ('wrong-answer', 3), ('1ms', 2), ('accumulate', 2), ('arrays', 2), ('c++11', 2), ('cpp clear', 2), ('cpp easy', 2), ('explanation', 2), ('fast-solution', 2), ('goldmansachs', 2), ('iterative', 2), ('linear', 2), ('linear memory', 2), ('prefix sum', 2), ('python2', 2), ('recursive', 2), ('simple clear c++ solution', 2), ('straight-forward', 2), ('time-complexity-o', 2), ('two', 2), ('two pointer technique', 2), ('two-pointer method', 2), ('video', 2), ('video explaination', 2), ('#best', 1), ('#easy', 1), ('#easy-understand', 1), ('#easy-understanding', 1), ('#javascript', 1), ('100 speed', 1), ('3ms-runtime', 1), ('90+faster', 1), ('adobe', 1), ('algorithm', 1), ('amazon interview', 1), ('answer', 1), ('apl', 1), ('apple', 1), ('apple-interview', 1), ('array functions', 1), ('array programming', 1), ('best-submission', 1), ('binary search', 1), ('bloomberg', 1), ('c plus plus', 1), ('c++ easy', 1), ('c++ solution', 1), ('clean code', 1), ('clean code with comments', 1), ('clear', 1), ('commented code', 1), ('comments added', 1), ('comments-added', 1), ('concise', 1), ('concise-solution', 1), ('constant memory', 1), ('constant-time', 1), ('cplusplus', 1), ('cpp with explanation', 1), ('deque', 1), ('divide-and-conquer', 1), ('double-pointers', 1), ('easiest', 1), ('easy to understand', 1), ('easy understand', 1), ('easy understanding', 1), ('easy undestanding', 1), ('easy-solition', 1), ('efficient', 1), ('elegant', 1), ('explaination', 1), ('explained solution', 1), ('explanation of logic', 1), ('explanations', 1), ('facebook', 1), ('facebook 2 pointers', 1), ('facebook-interview', 1), ('fast', 1), ('faster', 1), ('faster than 99.66', 1), ('fp', 1), ('functional', 1), ('give stars and subscribe', 1), ('gkt', 1), ('go lang', 1), ('golang solution', 1), ('google', 1), ('google interview', 1), ('hard', 1), ('heap', 1), ('heapq', 1), ('help', 1), ('help needed', 1), ('illustration', 1), ('improve', 1), ('interview question', 1), ('iterator', 1), ('itertools', 1), ('java simple', 1), ('javascrip', 1), ('javascript brute force', 1), ('javasript', 1), ('js', 1), ('kadanes', 1), ('kotlin-solution', 1), ('kotlinvim', 1), ('level-order', 1), ('linear-complexity', 1), ('linear-time-space', 1), ('mathematical', 1), ('maximum', 1), ('memory less than 100', 1), ('microsoft-india', 1), ('monotone stack', 1), ('monotonicarray', 1), ('multiple-ways', 1), ('no extra memory', 1), ('no pointer', 1), ('on', 1), ('one pass', 1), ('one-loop', 1), ('one-pass', 1), ('one-stack', 1), ('optimized', 1), ('oracle', 1), ('other-solutions', 1), ('peak finding', 1), ('php solution', 1), ('preprocessing', 1), ('pseudocode', 1), ('pyhton3', 1), ('qualcomm', 1), ('question', 1), ('question need help', 1), ('quick', 1), ('rain', 1), ('readable', 1), ('recursive solution', 1), ('run-time-error', 1), ('running sum', 1), ('scala', 1), ('short code', 1), ('short solution', 1), ('simulation', 1), ('sliding window', 1), ('solution-cpp', 1), ('solution-sharing-python', 1), ('stars move the article up', 1), ('stl', 1), ('suffix array', 1), ('suffix-sum', 1), ('swift5', 1), ('test case generator', 1), ('test cases', 1), ('trapping', 1), ('two pointer approach', 1), ('two-pass', 1), ('two-sides', 1), ('typescript', 1), ('unique', 1), ('using two pointers', 1), ('variable', 1), ('vector', 1), ('video-explanation', 1), ('visualization', 1), ('water', 1), ('well-commented', 1), ('without-recursion', 1), ('withoutdp', 1), ('works-on-my-machine', 1), ('youtube', 1), ('zip', 1)]"
41,First Missing Positive,https://leetcode.com/problems/first-missing-positive,"Given an unsorted integer array nums, find the smallest missing positive integer.",['array'],Hard,5642,986,1397334,476335,"[""Missing Number"", ""Find the Duplicate Number"", ""Find All Numbers Disappeared in an Array"", ""Couples Holding Hands""]","[('python', 106), ('java', 91), ('c++', 77), ('python 3', 63), ('cpp', 62), ('constant space', 56), ('javascript', 40), ('easy-understanding', 31), ('python3', 27), ('linear time', 24), ('constant-space', 22), ('solution', 22), ('cpp solution', 19), ('java-solution', 19), ('simple solution', 13), ('set', 12), ('time-complexity', 12), ('golang', 11), ('array', 10), ('easytounderstand', 10), ('space-complexity', 10), ('c#', 8), ('easy-understand', 8), ('explained', 8), ('first-missing-positive', 8), ('c', 7), ('cyclic-sort', 7), ('easy', 7), ('fast', 7), ('hashset', 7), ('0ms', 6), ('accepted', 6), ('c++ code', 6), ('cpp easy', 6), ('java ac solution', 6), ('sets', 6), ('sorting', 6), ('arrays', 5), ('easy-undestand', 5), ('go', 5), ('kotlin', 5), ('ruby', 5), ('short', 5), ('stl', 5), ('while-loop', 5), ('cycle sort', 4), ('cyclic sort', 4), ('javascript solution', 4), ('js', 4), ('linear', 4), ('linear-time', 4), ('simple', 4), ('sort', 4), ('swap', 4), ('swift', 4), ('#java', 3), ('4ms', 3), ('bit-manipulation', 3), ('commented', 3), ('easy-to-understand', 3), ('fast-solution', 3), ('golang-solution', 3), ('in-place', 3), ('php', 3), ('short code', 3), ('sorted array', 3), ('space-complexity-1', 3), ('video-explanation', 3), ('#best', 2), ('#constantspace', 2), ('#easy-understanding', 2), ('#javascript', 2), ('100 speed', 2), ('1ms', 2), ('amazon interview', 2), ('array-sort', 2), ('arraylist', 2), ('beats 100', 2), ('best-submission', 2), ('binary-search', 2), ('bitmask', 2), ('bitset', 2), ('bucket', 2), ('bucket-sort', 2), ('c code', 2), ('comments', 2), ('constant', 2), ('cpp-solution', 2), ('csharp', 2), ('dictionary', 2), ('easy to understand', 2), ('easy-peasy', 2), ('efficient solution', 2), ('explaination', 2), ('explanation', 2), ('fast and simple', 2), ('faster than 100.00', 2), ('fastest', 2), ('go-solution', 2), ('hash table', 2), ('hashmap', 2), ('heapify', 2), ('index', 2), ('inplace', 2), ('map', 2), ('optimal', 2), ('php solution', 2), ('python2', 2), ('python3.8', 2), ('pythonpython3', 2), ('runtime', 2), ('runtime-error', 2), ('rust', 2), ('self-explanatory', 2), ('short c++ code', 2), ('slow', 2), ('solution-sharing-c', 2), ('swap-in-place', 2), ('swapping', 2), ('swift5', 2), ('test-case', 2), ('testcase-wrong', 2), ('time-complexity-o', 2), ('time-limit-exceeded', 2), ('typescript', 2), ('vector', 2), ('#c++', 1), ('#concise', 1), ('#cpp', 1), ('#easiest', 1), ('#easy', 1), ('#fastest', 1), ('#hashmap', 1), ('#java #easy-understand', 1), ('#map', 1), ('#python', 1), ('#python #hard', 1), ('#simplest', 1), ('#videoexplanation', 1), ('0 ms solution', 1), ('100 beat', 1), ('100 faster', 1), ('100 faster runtime', 1), ('100 memory', 1), ('2 ways', 1), ('2ms', 1), ('5 lines', 1), ('8 lines', 1), ('99.64', 1), ('99.81', 1), ('algorithms', 1), ('amazon sde2', 1), ('arrangements', 1), ('array greedy', 1), ('backtracking', 1), ('bad', 1), ('beats 99', 1), ('beats-100', 1), ('beginner friendly', 1), ('best practices', 1), ('best-solution-ever', 1), ('big o of n', 1), ('bit manipulation', 1), ('bitwise', 1), ('bitwise operation', 1), ('boolean', 1), ('bucket sort', 1), ('buckets', 1), ('bug', 1), ('bugs', 1), ('c++ easy to understand', 1), ('c++ set', 1), ('c++ solution', 1), ('c++11', 1), ('c++17', 1), ('cheeky', 1), ('chinese', 1), ('clarification', 1), ('clean code', 1), ('clever', 1), ('code', 1), ('commentary', 1), ('comments-added', 1), ('comparison-of-linear-sorts', 1), ('complexity', 1), ('concise', 1), ('constant memory', 1), ('constant-space-iterative', 1), ('correct', 1), ('counting algorithm', 1), ('defaultdict', 1), ('detailed-explanation', 1), ('dict', 1), ('done', 1), ('dutch-national-flag', 1), ('dynamic-programming', 1), ('easiest', 1), ('easy solution', 1), ('easy understanding', 1), ('efficient', 1), ('elegant', 1), ('error', 1), ('examples', 1), ('explained solution', 1), ('explanation of logic', 1), ('faster than 100', 1), ('fastest c++ solution', 1), ('filter', 1), ('first', 1), ('first missing positive', 1), ('firstmissingpositive', 1), ('fist missing positive', 1), ('floyd cycle', 1), ('floyd cycle detection', 1), ('floyd-algorithm', 1), ('functional', 1), ('functional-programming', 1), ('generator expressions', 1), ('golang solution', 1), ('google interview question', 1), ('hard', 1), ('hard problems', 1), ('hash set', 1), ('heap', 1), ('heapsort', 1), ('help needed', 1), ('in-place operation', 1), ('incorrect-test-case', 1), ('iteration', 1), ('iterator', 1), ('java easy to understand', 1), ('java-8', 1), ('javascrip', 1), ('lambda expression', 1), ('linear-time-space', 1), ('linertime', 1), ('list', 1), ('logic', 1), ('logic exlpained', 1), ('logical thinking', 1), ('map-stl', 1), ('mapping', 1), ('math', 1), ('missing', 1), ('most efficient solution', 1), ('new-cases', 1), ('no extra space', 1), ('no-swap', 1), ('number theory', 1), ('o of n', 1), ('offset', 1), ('one-liner', 1), ('oneline', 1), ('oneliner', 1), ('ordered sets', 1), ('overflow', 1), ('partition', 1), ('positive', 1), ('priority-queue', 1), ('problem-solving', 1), ('pseudocode', 1), ('pythonic', 1), ('qsort', 1), ('quick select', 1), ('rajat', 1), ('reduce', 1), ('running', 1), ('scala', 1), ('search', 1), ('simpe', 1), ('simplesolution', 1), ('simplest', 1), ('software engineering', 1), ('solution-cpp', 1), ('solution-sharing-cpp', 1), ('solution-sharing-python', 1), ('sort-function', 1), ('space-efficient', 1), ('stack', 1), ('step by step explanation', 1), ('step-wise', 1), ('straight-forward', 1), ('swap sort', 1), ('table', 1), ('tabulation', 1), ('thinking process', 1), ('thought-process', 1), ('traverse', 1), ('treeset', 1), ('trick', 1), ('tricky', 1), ('ttime-complexity', 1), ('two pass', 1), ('two passes', 1), ('type', 1), ('union find', 1), ('very simple', 1), ('video explanation', 1), ('video solution', 1), ('walrus', 1), ('well-commented', 1), ('whileloop', 1), ('wierd', 1), ('wrong output', 1), ('yield', 1)]"
40,Combination Sum II,https://leetcode.com/problems/combination-sum-ii,"Given a collection of candidate numbers (candidates) and a target number (target), find all unique combinations in candidates where the candidate numbers sum to target.

Each number in candidates may only be used once in the combination.

Note: The solution set must not contain duplicate combinations.","['array', 'backtracking']",Medium,2727,88,802604,405710,"[""Combination Sum""]","[('backtracking', 100), ('java', 60), ('python', 42), ('cpp', 34), ('c++', 29), ('python 3', 26), ('dfs', 25), ('recursion', 25), ('easy-understand', 19), ('javascript', 18), ('solution', 17), ('recursive', 16), ('simple', 9), ('cpp solution', 8), ('java-solution', 8), ('golang', 7), ('improve', 7), ('python3', 7), ('back tracking', 6), ('c#', 5), ('dynamic programming', 5), ('easy-understanding', 5), ('sorting', 5), ('bfs', 4), ('depth first search', 4), ('dfs simple solution', 4), ('dynamic-programming', 4), ('easytounderstand', 4), ('golang-solution', 4), ('combination-sum', 3), ('commented', 3), ('easy-to-understand', 3), ('fast-solution', 3), ('java solution', 3), ('simple solution', 3), ('time-complexity', 3), ('time-limit-exceeded', 3), ('accepted', 2), ('arrays', 2), ('back-tracking', 2), ('backtrack', 2), ('best-submission', 2), ('c', 2), ('c++11', 2), ('combination sum ii', 2), ('csharp', 2), ('easy', 2), ('easy-undestand', 2), ('go', 2), ('iterative', 2), ('non-recursive', 2), ('reccursion', 2), ('recurision', 2), ('recursive easy', 2), ('rust', 2), ('swift', 2), ('video-explanation', 2), ('#backtracking', 1), ('#c++', 1), ('#cpp', 1), ('#easy-understand', 1), ('#easysolution', 1), ('#simplecode', 1), ('10ms', 1), ('2 ms solution', 1), ('algorithm', 1), ('array', 1), ('backtacking', 1), ('backtracing', 1), ('backtracking dfs', 1), ('beating-90-submissions', 1), ('binary-search', 1), ('c code', 1), ('c++ recursive solution', 1), ('clarification', 1), ('clean', 1), ('clear', 1), ('combination', 1), ('combination sum', 1), ('combination-sum-ii', 1), ('combinations', 1), ('comments added', 1), ('compilation', 1), ('concise', 1), ('counter', 1), ('cpp easy', 1), ('detailed explanation', 1), ('dfs recursive', 1), ('dfs solution', 1), ('dfs-recursive', 1), ('dp', 1), ('easy to understandd', 1), ('es6', 1), ('esay-uderstand', 1), ('explain', 1), ('explained', 1), ('explanation', 1), ('fast', 1), ('fast and simple', 1), ('faster', 1), ('follow-up', 1), ('go-solution', 1), ('illustration', 1), ('javascript recursive', 1), ('javascript solution', 1), ('knapsack', 1), ('kotlin', 1), ('kotlinvim', 1), ('meiyaowen', 1), ('memoization', 1), ('neat', 1), ('neat-explanation', 1), ('nonrecursive', 1), ('other-solutions', 1), ('php', 1), ('php solution', 1), ('pruning', 1), ('pseudocode', 1), ('recursion palindrome', 1), ('recursive-dfs', 1), ('recursively', 1), ('recusion', 1), ('remove duplicates', 1), ('sandeepkumar', 1), ('set', 1), ('sets', 1), ('short', 1), ('solution-javascript', 1), ('solution-python', 1), ('solution-share', 1), ('solution-sharing-cpp', 1), ('space-efficient', 1), ('subsets', 1), ('subsetsum', 1), ('swift5', 1), ('test-case', 1), ('unique', 1), ('video description', 1), ('video interview', 1), ('video link', 1), ('video solution', 1), ('works-on-my-machine', 1), ('wrong-answer', 1)]"
39,Combination Sum,https://leetcode.com/problems/combination-sum,"Given an array of distinct integers candidates and a target integer target, return a list of all unique combinations of candidates where the chosen numbers sum to target. You may return the combinations in any order.

The same number may be chosen from candidates an unlimited number of times. Two combinations are unique if the frequency of at least one of the chosen numbers is different.

It is guaranteed that the number of unique combinations that sum up to target is less than 150 combinations for the given input.","['array', 'backtracking']",Medium,5884,150,1208010,724350,"[""Letter Combinations of a Phone Number"", ""Combination Sum II"", ""Combinations"", ""Combination Sum III"", ""Factor Combinations"", ""Combination Sum IV""]","[('backtracking', 188), ('python', 99), ('java', 77), ('c++', 65), ('recursion', 55), ('cpp', 52), ('python 3', 46), ('dfs', 44), ('javascript', 37), ('solution', 28), ('python3', 22), ('dynamic programming', 21), ('golang', 16), ('recursive', 16), ('easy-understand', 15), ('easy-understanding', 14), ('dp', 13), ('java-solution', 13), ('cpp solution', 12), ('dynamic-programming', 11), ('simple', 9), ('c#', 8), ('backtracing', 7), ('easy-to-understand', 7), ('golang-solution', 7), ('combination sum', 6), ('combination-sum', 6), ('easy', 6), ('easytounderstand', 6), ('recusion', 6), ('wrong-answer', 6), ('back tracking', 5), ('bfs', 5), ('easy-undestand', 5), ('explained', 5), ('test-case', 5), ('cpp easy', 4), ('dfs simple solution', 4), ('fast', 4), ('go', 4), ('incorrect-test-case', 4), ('javascript solution', 4), ('memoization', 4), ('non-recursive', 4), ('scala', 4), ('swift', 4), ('accepted', 3), ('backtrack', 3), ('combination', 3), ('commented', 3), ('easysolution', 3), ('improve', 3), ('kotlin', 3), ('output-limit-exceeded', 3), ('recurision', 3), ('ruby', 3), ('simple solution', 3), ('sort', 3), ('sorted array', 3), ('#javascript', 2), ('array', 2), ('arrays', 2), ('backrtracking', 2), ('c++ code', 2), ('depth first search', 2), ('dfs solution', 2), ('divide and conquer', 2), ('explained solution', 2), ('fast and simple', 2), ('fast-solution', 2), ('hashing', 2), ('js', 2), ('knapsack', 2), ('one liner', 2), ('python2', 2), ('recursion formula', 2), ('recursively', 2), ('runtime-error', 2), ('rust', 2), ('short', 2), ('solution-sharing-cpp', 2), ('testcase-wrong', 2), ('time-complexity', 2), ('video-explanation', 2), ('works-on-my-machine', 2), ('#dynamic-programming', 1), ('1ms', 1), ('algosexplained', 1), ('amazon', 1), ('back', 1), ('back-tracking', 1), ('backtacking', 1), ('backtracking dfs', 1), ('beginner', 1), ('beginner friendly', 1), ('best-submission', 1), ('bottom up', 1), ('bottom up dp', 1), ('c', 1), ('c code', 1), ('c++ solution', 1), ('clean', 1), ('clean code', 1), ('coin-change', 1), ('combination sum i', 1), ('combinationsum', 1), ('comments', 1), ('comments-added', 1), ('commetend', 1), ('compile-error', 1), ('complexity', 1), ('concise', 1), ('corner-case', 1), ('cplusplus', 1), ('cpp-solution', 1), ('csharp', 1), ('deep-first-search', 1), ('detailed explanation', 1), ('dfs recursive', 1), ('dictionary', 1), ('dp python', 1), ('dp-programming', 1), ('dps', 1), ('duplicate', 1), ('dyanmic programming', 1), ('easy sloution', 1), ('easy understanding', 1), ('efficient solution', 1), ('elegant', 1), ('elegant solution', 1), ('examples', 1), ('explaination', 1), ('explanation', 1), ('explanations', 1), ('functional', 1), ('go-solution', 1), ('google', 1), ('hashing algorithm', 1), ('heavily commented', 1), ('help', 1), ('illustration', 1), ('iteration', 1), ('java solution', 1), ('javascrip', 1), ('javascript recursive', 1), ('keep it simple', 1), ('knap', 1), ('kotlinvim', 1), ('leetcode-issue-only', 1), ('leetcode-wrong', 1), ('malloc', 1), ('mediocre', 1), ('meiyaowen', 1), ('memoisation', 1), ('memory-limit-exceeded', 1), ('missing-test-case', 1), ('nlogn', 1), ('php', 1), ('pruning', 1), ('pseudocode', 1), ('python bfs', 1), ('pythonpython3', 1), ('pythonsolution', 1), ('question need help', 1), ('realloc', 1), ('recursion palindrome', 1), ('recursive easy', 1), ('recursive solution', 1), ('recurson', 1), ('run-time-error', 1), ('sandeepkumar', 1), ('sets', 1), ('shortcircuit', 1), ('simple clear c++ solution', 1), ('solution by python', 1), ('solution-python', 1), ('solution-share', 1), ('sorting', 1), ('space', 1), ('space analysis', 1), ('stack', 1), ('stacks', 1), ('template', 1), ('time', 1), ('time analysis', 1), ('time complexity', 1), ('time-limit-exceeded', 1), ('tree traversal', 1), ('typescript', 1), ('unbounded knapsack', 1), ('vector', 1), ('very easy to understand', 1), ('video', 1), ('video explanation', 1), ('video solution', 1), ('youtube', 1)]"
38,Count and Say,https://leetcode.com/problems/count-and-say,"The count-and-say sequence is a sequence of digit strings defined by the recursive formula:


	countAndSay(1) = ""1""
	countAndSay(n) is the way you would ""say"" the digit string from countAndSay(n-1), which is then converted into a different digit string.


To determine how you ""say"" a digit string, split it into the minimal number of groups so that each group is a contiguous section all of the same character. Then for each group, say the number of characters, then say the character. To convert the saying into a digit string, replace the counts with a number and concatenate every saying.

For example, the saying and conversion for digit string ""3322251"":

Given a positive integer n, return the nth term of the count-and-say sequence.",['string'],Medium,404,1446,1075677,498783,"[""Encode and Decode Strings"", ""String Compression""]","[('java', 107), ('python', 83), ('cpp', 49), ('python 3', 49), ('recursion', 46), ('javascript', 34), ('solution', 33), ('c++', 30), ('recursive', 30), ('iterative', 26), ('easy-understand', 21), ('easy-understanding', 20), ('python3', 17), ('simple', 14), ('wrong-answer', 14), ('golang', 13), ('c#', 11), ('count-and-say', 10), ('easy-undestand', 9), ('string', 9), ('cpp solution', 8), ('easy', 8), ('go', 7), ('java-solution', 7), ('short', 7), ('testcase-wrong', 7), ('count and say', 6), ('fast-solution', 6), ('golang-solution', 6), ('easy-to-understand', 5), ('fast', 5), ('simple solution', 5), ('swift', 5), ('test-case', 5), ('0ms', 4), ('100 speed', 4), ('accepted', 4), ('iterative solution', 4), ('recursive easy', 4), ('time-complexity', 4), ('answer', 3), ('commented', 3), ('constant-space', 3), ('dynamic programming', 3), ('easy to understand', 3), ('efficient', 3), ('explained', 3), ('go-solution', 3), ('kotlin', 3), ('php', 3), ('python2', 3), ('recurision', 3), ('regex', 3), ('ruby', 3), ('time-limit-exceeded', 3), ('#easy-understanding', 2), ('#java #countnsay', 2), ('#javascript', 2), ('100 memory', 2), ('100 space', 2), ('accepted solution', 2), ('brute force', 2), ('c++ code', 2), ('chinese', 2), ('cpp-solution', 2), ('dp', 2), ('es6', 2), ('explanation', 2), ('hard coded', 2), ('improve', 2), ('incorrect-test-case', 2), ('itereative', 2), ('java ac solution', 2), ('map', 2), ('optimal', 2), ('performance', 2), ('php solution', 2), ('readable', 2), ('runtime-error', 2), ('scala', 2), ('short code', 2), ('sliding window', 2), ('sliding-window', 2), ('solution-java', 2), ('stringbuilder', 2), ('stringstream', 2), ('switch-case', 2), ('two-pointers', 2), ('#codeboy', 1), ('#easy-understand', 1), ('#explanation', 1), ('#iterative', 1), ('#java', 1), ('#python', 1), ('#python 3', 1), ('0ms-solution', 1), ('1 liner', 1), ('100', 1), ('100 beat', 1), ('100 faster', 1), ('38. count and say', 1), ('4 liner', 1), ('90 faster', 1), ('99 faster', 1), ('backtracking', 1), ('basic', 1), ('beginner friendly', 1), ('best-submission', 1), ('brute-force', 1), ('c', 1), ('c++ recursion', 1), ('clean', 1), ('clear explanation', 1), ('commented code', 1), ('common sense', 1), ('concise', 1), ('constant space', 1), ('constant time', 1), ('csharp', 1), ('description-disambiguation', 1), ('dontcareaboutmemory', 1), ('easiest', 1), ('easy understand', 1), ('easy-solition', 1), ('easytounderstand', 1), ('elegant', 1), ('elegant solution', 1), ('explain', 1), ('facebook', 1), ('fastest', 1), ('feedback', 1), ('fold', 1), ('foldleft', 1), ('function composition', 1), ('functional', 1), ('funny', 1), ('groupby', 1), ('help', 1), ('hint', 1), ('hourly', 1), ('i-good', 1), ('indentation', 1), ('intuitive', 1), ('intutive', 1), ('item', 1), ('iterate', 1), ('iteration', 1), ('iterative approch', 1), ('iterative way', 1), ('iteratively', 1), ('java 8', 1), ('javascript recursive', 1), ('javascript solution', 1), ('js', 1), ('kotlinvim', 1), ('less space than 100', 1), ('linear-time', 1), ('lookuptable', 1), ('loop', 1), ('loop-invariant', 1), ('loops', 1), ('memoization', 1), ('memory', 1), ('memory less than 100', 1), ('modular', 1), ('non-recursive', 1), ('nonrecursive', 1), ('observations', 1), ('one line', 1), ('problem-bad', 1), ('proof', 1), ('python deque', 1), ('pythonic', 1), ('queue', 1), ('recursive approach', 1), ('recursive-descent', 1), ('recurssion', 1), ('recusion', 1), ('recusive', 1), ('regexp', 1), ('regular-expression-matching', 1), ('run-length-encoding', 1), ('runtime', 1), ('rust', 1), ('self explanatory', 1), ('sequence', 1), ('share-solution', 1), ('simple logic', 1), ('simple python accepted', 1), ('simple python solution', 1), ('simulation', 1), ('slidingwindow', 1), ('solution-python', 1), ('solution-sharing-cpp', 1), ('solution-sharing-java', 1), ('solution-sharing-python', 1), ('speed', 1), ('stack', 1), ('stack-based', 1), ('stacks', 1), ('stl', 1), ('string compression', 1), ('string-to-integer', 1), ('stringbuffer', 1), ('tail-recursion', 1), ('test', 1), ('thinking process', 1), ('thinkoutofthebox', 1), ('trivial', 1), ('two pointer technique', 1), ('typescript', 1), ('ultra easy', 1), ('unit-test', 1), ('upvote', 1), ('valid', 1), ('very easy', 1), ('video explaination', 1), ('well-commented', 1), ('while loop', 1), ('with comments', 1), ('wrong', 1), ('yolo', 1)]"
37,Sudoku Solver,https://leetcode.com/problems/sudoku-solver,"Write a program to solve a Sudoku puzzle by filling the empty cells.

A sudoku solution must satisfy all of the following rules:


	Each of the digits 1-9 must occur exactly once in each row.
	Each of the digits 1-9 must occur exactly once in each column.
	Each of the digits 1-9 must occur exactly once in each of the 9 3x3 sub-boxes of the grid.


The '.' character indicates empty cells.","['hash-table', 'backtracking']",Hard,2737,104,497770,235717,"[""Valid Sudoku"", ""Unique Paths III""]","[('backtracking', 116), ('java', 47), ('python', 46), ('dfs', 33), ('cpp', 31), ('c++', 26), ('python3', 13), ('javascript', 12), ('recursion', 11), ('python 3', 10), ('easy-understand', 9), ('solution', 8), ('c#', 6), ('golang', 6), ('java-solution', 6), ('recursive', 6), ('simple', 6), ('time-limit-exceeded', 6), ('sudoku', 5), ('sudoku solver', 5), ('back tracking', 4), ('bit manipulation', 4), ('bit-manipulation', 4), ('easy-understanding', 4), ('golang-solution', 4), ('hash table', 4), ('improve', 4), ('sudoku-solver', 4), ('backtracing', 3), ('clear', 3), ('constraint-satisfaction', 3), ('easy-to-understand', 3), ('fast and simple', 3), ('fast-solution', 3), ('readable', 3), ('scala', 3), ('wrong-answer', 3), ('100 speed', 2), ('backtrack', 2), ('basic', 2), ('clean code', 2), ('comments-added', 2), ('cpp solution', 2), ('dancing link', 2), ('depth first search', 2), ('depth-first-search', 2), ('dfs solution', 2), ('easy', 2), ('easy-undestand', 2), ('explanation', 2), ('fast', 2), ('go', 2), ('go lang', 2), ('go-solution', 2), ('hashset', 2), ('hashtable', 2), ('intuitive', 2), ('modular', 2), ('reactive-network', 2), ('stack', 2), ('2d-boolean-arrays', 1), ('4 ms', 1), ('4ms', 1), ('8ms', 1), ('a.b.rudra', 1), ('ac-3', 1), ('accepted', 1), ('aritifical-intelligence', 1), ('backrtracking', 1), ('beat 97', 1), ('beginner friendly', 1), ('best-submission', 1), ('bfs', 1), ('bit masking', 1), ('bit-mask', 1), ('bitmasks', 1), ('bitwise', 1), ('bitwise-operators', 1), ('boolean-array', 1), ('brute-force', 1), ('c', 1), ('c programming', 1), ('c++ recursive solution', 1), ('c++ summary of related problem', 1), ('clean', 1), ('clean-code', 1), ('comments', 1), ('comments added', 1), ('compilation-error', 1), ('compile-error', 1), ('compiler-error', 1), ('complexity analysis', 1), ('concise', 1), ('concise-solution', 1), ('cpp doubt', 1), ('csharp', 1), ('datastructure', 1), ('debug', 1), ('dfs recursive', 1), ('dfs-in-order', 1), ('dictonary', 1), ('different', 1), ('easiest', 1), ('easy2understand', 1), ('efficiency', 1), ('error', 1), ('explained', 1), ('explanation with logic', 1), ('explanations', 1), ('go-lang', 1), ('hash-table', 1), ('hashmap', 1), ('heuristic', 1), ('internal-error', 1), ('interview', 1), ('intutive', 1), ('iteratively', 1), ('java solution using dfs', 1), ('javascrip', 1), ('javascript solution', 1), ('javascriptes6', 1), ('js', 1), ('kotlin', 1), ('linked-list', 1), ('lte', 1), ('optimized', 1), ('pre-process', 1), ('proper-variable-names', 1), ('pythonic', 1), ('recurision', 1), ('recursive easy', 1), ('recursive solution', 1), ('recusion', 1), ('rust', 1), ('self explanatory', 1), ('set', 1), ('simple clear c++ solution', 1), ('simple solution', 1), ('simplest-efficient-solution', 1), ('solution-sharing-cpp', 1), ('sort', 1), ('sorted', 1), ('space-efficient', 1), ('straightforward', 1), ('test-cases', 1), ('time-complexity', 1), ('typescript', 1), ('ultra simple', 1), ('unicorn', 1), ('upvote', 1), ('well-commented', 1), ('well-explained', 1), ('with explanation', 1), ('wrong-solution', 1)]"
36,Valid Sudoku,https://leetcode.com/problems/valid-sudoku,"Determine if a 9 x 9 Sudoku board is valid. Only the filled cells need to be validated according to the following rules:


	Each row must contain the digits 1-9 without repetition.
	Each column must contain the digits 1-9 without repetition.
	Each of the nine 3 x 3 sub-boxes of the grid must contain the digits 1-9 without repetition.


Note:


	A Sudoku board (partially filled) could be valid but is not necessarily solvable.
	Only the filled cells need to be validated according to the mentioned rules.",['hash-table'],Medium,2521,562,926731,472646,"[""Sudoku Solver""]","[('java', 76), ('python', 66), ('cpp', 41), ('c++', 35), ('python 3', 30), ('solution', 28), ('javascript', 25), ('easy-understanding', 22), ('hashset', 20), ('java-solution', 15), ('sudoku', 13), ('wrong-answer', 11), ('python3', 10), ('short', 10), ('c#', 9), ('easy-understand', 9), ('golang', 9), ('hashmap', 9), ('bit manipulation', 7), ('easytounderstand', 7), ('set', 7), ('sets', 7), ('simple', 7), ('testcase-wrong', 7), ('bit-manipulation', 6), ('clear', 6), ('easy', 6), ('easy-undestand', 6), ('array', 5), ('go', 5), ('simple solution', 5), ('iterative', 4), ('map', 4), ('rust', 4), ('swift', 4), ('time-complexity', 4), ('valid-sudoku', 4), ('100 memory', 3), ('accepted', 3), ('bitset', 3), ('brute force', 3), ('c', 3), ('commented', 3), ('cpp solution', 3), ('easy-to-understand', 3), ('error', 3), ('fast-solution', 3), ('go-solution', 3), ('hash table', 3), ('hashing', 3), ('ruby', 3), ('run-time-error', 3), ('test-case', 3), ('#python 3', 2), ('100 space', 2), ('100 speed', 2), ('1ms', 2), ('backtracking', 2), ('brutal force optmized', 2), ('c++ code', 2), ('clean code', 2), ('constant-space', 2), ('dhan', 2), ('easiest', 2), ('explained', 2), ('fast and simple', 2), ('fastest', 2), ('golang-solution', 2), ('iteration', 2), ('js javascript', 2), ('optimal', 2), ('payo', 2), ('php', 2), ('php solution', 2), ('prem', 2), ('python2', 2), ('ratan', 2), ('straight-forward', 2), ('string', 2), ('swift5', 2), ('valid', 2), ('valid sudoku', 2), ('works-on-my-machine', 2), ('#easy-understanding', 1), ('#easysolution', 1), ('#hashset', 1), ('#javascript', 1), ('#python', 1), ('0ms', 1), ('100', 1), ('100 faster runtime', 1), ('100 time', 1), ('15ms', 1), ('1ms runtime', 1), ('2d-array', 1), ('4ms', 1), ('amazon sde2', 1), ('array nesting', 1), ('array of set', 1), ('arrays c++', 1), ('basic', 1), ('beating-100-submission', 1), ('bit masking', 1), ('bit-mask', 1), ('bit-shift', 1), ('bitmask', 1), ('boolean-array', 1), ('bugs', 1), ('c programming', 1), ('c++11', 1), ('case', 1), ('clear solution', 1), ('commented code', 1), ('compile', 1), ('compile-error', 1), ('complexity analysis', 1), ('cpp easy', 1), ('cpp-solution', 1), ('csharp', 1), ('defaultdict', 1), ('design', 1), ('dfs', 1), ('dictionary', 1), ('dictonary', 1), ('easy understand', 1), ('easy understanding', 1), ('eclipse', 1), ('efficient', 1), ('fast', 1), ('fast-matrix-exp', 1), ('faster than 90', 1), ('faster than 97', 1), ('fasterthan100', 1), ('find', 1), ('flag', 1), ('follow up solved', 1), ('for loop', 1), ('functions', 1), ('further-optimization', 1), ('games', 1), ('golang solution', 1), ('hash set', 1), ('hunger', 1), ('interesting', 1), ('intutive', 1), ('iterative solution', 1), ('java ac solution', 1), ('java-8', 1), ('javasacript', 1), ('javascript brute force', 1), ('javascript solution', 1), ('js', 1), ('kotlin', 1), ('less memory', 1), ('less than 96', 1), ('linear', 1), ('linear-time', 1), ('linq', 1), ('list comprehension', 1), ('map in c++', 1), ('mathematical', 1), ('mockingjay', 1), ('new-idea', 1), ('numpy', 1), ('object-array', 1), ('one pass', 1), ('one-loop', 1), ('one-pass', 1), ('oneline', 1), ('optimized', 1), ('part', 1), ('prime numbers', 1), ('pythonic', 1), ('pythonpython3', 1), ('quick', 1), ('readable', 1), ('reduce', 1), ('runtime-error', 1), ('scala', 1), ('self-explanatory', 1), ('share-solution', 1), ('single pass', 1), ('solution-java', 1), ('solution-python', 1), ('solution-sharing', 1), ('solution-sharing-cpp', 1), ('space-complexity', 1), ('struct', 1), ('sudoku solver', 1), ('test', 1), ('typescript', 1), ('ultra simple', 1), ('understandable', 1), ('unique', 1), ('unordered map', 1), ('unordered-set', 1), ('unorderedset', 1), ('upvote', 1), ('watch', 1), ('wrong output', 1), ('wrong-execution-result', 1), ('wrong-judgement', 1), ('zip', 1)]"
35,Search Insert Position,https://leetcode.com/problems/search-insert-position,"Given a sorted array of distinct integers and a target value, return the index if the target is found. If not, return the index where it would be if it were inserted in order.","['array', 'binary-search']",Easy,3452,293,1896914,813617,"[""First Bad Version""]","[('binary-search', 178), ('java', 144), ('python', 125), ('binarysearch', 67), ('c++', 61), ('python 3', 61), ('cpp', 60), ('java-solution', 48), ('javascript', 46), ('binary search', 42), ('python3', 42), ('solution', 31), ('easy-understanding', 29), ('c++ code', 16), ('golang', 16), ('cpp solution', 14), ('c#', 13), ('easy', 13), ('simple solution', 13), ('easy-understand', 12), ('easy-undestand', 11), ('javascript solution', 10), ('simple', 10), ('swift', 10), ('easy-to-understand', 9), ('go', 9), ('stl', 9), ('c', 8), ('easytounderstand', 8), ('golang-solution', 8), ('one-liner', 8), ('0ms', 7), ('recursion', 7), ('rust', 7), ('search-insert-position', 7), ('array', 6), ('go-solution', 6), ('iterative', 6), ('search insert position', 6), ('short', 6), ('100 faster', 5), ('fast', 5), ('javascrip', 5), ('js', 5), ('kotlin', 5), ('logn', 5), ('recursive', 5), ('ruby', 5), ('searchinsertposition', 5), ('arrays', 4), ('bisect', 4), ('csharp', 4), ('java ac solution', 4), ('linear time', 4), ('lower-bound', 4), ('one line', 4), ('time-complexity', 4), ('#python 3', 3), ('100 memory', 3), ('binarysearh', 3), ('brute force', 3), ('c++11', 3), ('clean code', 3), ('cpp easy', 3), ('fast and simple', 3), ('fast-solution', 3), ('if-else', 3), ('iteratively', 3), ('javscript', 3), ('logarithmic time', 3), ('lowerbound', 3), ('php', 3), ('short code', 3), ('simplest', 3), ('#easy-understanding', 2), ('#easysolution', 2), ('#java', 2), ('#python', 2), ('#searchinsert', 2), ('1 line', 2), ('100', 2), ('100 speed', 2), ('accepted', 2), ('beginner friendly', 2), ('binary-search-tree', 2), ('c code', 2), ('comments-added', 2), ('constant memory', 2), ('easiest', 2), ('exception handling', 2), ('fastest', 2), ('first-insert-position', 2), ('go lang', 2), ('java simple', 2), ('linear', 2), ('linear search', 2), ('nodejs', 2), ('oneline', 2), ('php solution', 2), ('python2', 2), ('recurision', 2), ('recursively', 2), ('scala', 2), ('shortest', 2), ('solution-sharing-cpp', 2), ('understandable', 2), ('vector', 2), ('while-iterative', 2), ('whileloop', 2), ('#amazon', 1), ('#array', 1), ('#binarysearch', 1), ('#easy', 1), ('#easy-understand', 1), ('#efficient', 1), ('#java-solution', 1), ('#javascript', 1), ('0ms-4ms', 1), ('1-line', 1), ('100 space', 1), ('100faster', 1), ('2-line', 1), ('3 lines', 1), ('4 lines', 1), ('4ms', 1), ('awesome samriddhi', 1), ('basic', 1), ('basic approach', 1), ('basics', 1), ('beautiful', 1), ('begineer', 1), ('best', 1), ('best java solution', 1), ('best-solution', 1), ('best-solution-ever', 1), ('best-submission', 1), ('binary search algorithm', 1), ('binary search tree', 1), ('binary-search-algorithm', 1), ('binary-search-explanation', 1), ('binary-sesarch', 1), ('binary-tree', 1), ('bisect-python', 1), ('brute-force', 1), ('bruteforce', 1), ('built in function', 1), ('c++ c++ solution', 1), ('c++ easy solution', 1), ('c++ easy to understand', 1), ('c++ solution', 1), ('c++14', 1), ('ceil', 1), ('clever', 1), ('commented code', 1), ('comments', 1), ('constant space', 1), ('constant-space', 1), ('cpp soltuion', 1), ('cpp-solution', 1), ('divide and conquer', 1), ('doubts', 1), ('dynamic-programming', 1), ('easy solution', 1), ('easy-implementation', 1), ('easy-solition', 1), ('easy-solution', 1), ('easy-to-read', 1), ('easysolution', 1), ('elegant', 1), ('exception', 1), ('explained', 1), ('explained solution', 1), ('explanation of logic', 1), ('faster', 1), ('faster than 100.00', 1), ('for', 1), ('for-loop', 1), ('fun', 1), ('functional', 1), ('golang solution', 1), ('if condition', 1), ('if else', 1), ('ifelse', 1), ('index', 1), ('index-value', 1), ('inorder-traversal', 1), ('insert', 1), ('insertion', 1), ('insertion sort', 1), ('iteration', 1), ('iterative way', 1), ('iteratve-recursive', 1), ('java-2-line', 1), ('javacript', 1), ('kotllin', 1), ('less is more', 1), ('lodash', 1), ('loop', 1), ('loops', 1), ('lower bound', 1), ('memory', 1), ('modern c++', 1), ('morris-traversal', 1), ('non-copy-paste', 1), ('one line solution', 1), ('optimal', 1), ('pseudocode', 1), ('python bfs', 1), ('python3.8', 1), ('pythonpython3', 1), ('readable', 1), ('recursive approach', 1), ('recusion', 1), ('reduce', 1), ('ritik', 1), ('search', 1), ('search for position', 1), ('search-insert', 1), ('searching', 1), ('self-explanatory', 1), ('set', 1), ('simpe', 1), ('simple c', 1), ('simple clear c++ solution', 1), ('simple-solution', 1), ('solution by python', 1), ('solution-python', 1), ('solution-sharing-python', 1), ('sorted', 1), ('sorted array', 1), ('spectacular', 1), ('std', 1), ('std algorithm', 1), ('stl algorithms', 1), ('stl vector', 1), ('straight-forward', 1), ('swift5', 1), ('tailrec', 1), ('thinking process', 1), ('three-lines', 1), ('time-limit-exceeded', 1), ('trick', 1), ('two solutions', 1), ('two-different-solutions', 1), ('two-lines', 1), ('two-pointer', 1), ('vector-operation', 1), ('very-easy', 1), ('video explanation', 1), ('video solution', 1), ('video-explanation', 1), ('while', 1), ('while loop', 1), ('while-loop', 1)]"
34,Find First and Last Position of Element in Sorted Array,https://leetcode.com/problems/find-first-and-last-position-of-element-in-sorted-array,"Given an array of integers nums sorted in ascending order, find the starting and ending position of a given target value.

If target is not found in the array, return [-1, -1].

Follow up: Could you write an algorithm with O(log n) runtime complexity?","['array', 'binary-search']",Medium,5513,209,1861219,703470,"[""First Bad Version""]","[('binary-search', 275), ('java', 187), ('python', 106), ('binary search', 100), ('c++', 85), ('cpp', 80), ('binarysearch', 69), ('python 3', 56), ('javascript', 46), ('java-solution', 45), ('easy-understanding', 37), ('solution', 30), ('python3', 29), ('logn', 17), ('c#', 15), ('easy-undestand', 15), ('easy-to-understand', 14), ('cpp solution', 13), ('easytounderstand', 12), ('simple solution', 12), ('easy', 11), ('easy-understand', 11), ('recursion', 11), ('lower-bound', 10), ('stl', 10), ('fastest', 9), ('golang', 9), ('simple', 9), ('ruby', 8), ('swift', 8), ('array', 7), ('c++ code', 7), ('upperbound', 7), ('bisect', 6), ('c', 6), ('iterative', 6), ('python2', 6), ('recursive', 6), ('time-complexity', 6), ('0ms', 5), ('binarysearh', 5), ('go', 5), ('javascript solution', 5), ('clean', 4), ('cpp easy', 4), ('easy understanding', 4), ('fast', 4), ('fast and simple', 4), ('fast-solution', 4), ('golang-solution', 4), ('log', 4), ('log n', 4), ('logarithmic time', 4), ('lowerbound', 4), ('search', 4), ('simplest', 4), ('stl algorithms', 4), ('upper-bound', 4), ('#binarysearch', 3), ('100 faster runtime', 3), ('accepted', 3), ('amazon interview', 3), ('an7one', 3), ('clean code', 3), ('comments', 3), ('detailed explanation', 3), ('explaination', 3), ('explained', 3), ('explanation', 3), ('faceebook', 3), ('faster', 3), ('go-solution', 3), ('java solution', 3), ('js', 3), ('linear seach', 3), ('linear time', 3), ('non-recursive', 3), ('rust', 3), ('solution-sharing-cpp', 3), ('two-pointers', 3), ('#javascript', 2), ('#python', 2), ('100', 2), ('100 space', 2), ('100 speed', 2), ('34', 2), ('ac solution', 2), ('binary', 2), ('binary search algorithm', 2), ('binary-search-explanation', 2), ('binary-sesarch', 2), ('brute force', 2), ('commented', 2), ('complexity', 2), ('complexity analysis', 2), ('constant-space', 2), ('cpp doubt', 2), ('divide and conquer', 2), ('divideconquer', 2), ('easiest', 2), ('easy to understand', 2), ('easy-solition', 2), ('easysolution', 2), ('efficient', 2), ('enum', 2), ('equalrange', 2), ('faster than 100.00', 2), ('fasterthan100', 2), ('google', 2), ('improve', 2), ('kotlin', 2), ('linear scan', 2), ('logarithmic-time', 2), ('one-pass', 2), ('optimal', 2), ('php', 2), ('readable', 2), ('recursive easy', 2), ('recursively', 2), ('recusion', 2), ('runtime-error', 2), ('scala', 2), ('search-for-a-range', 2), ('simple clear c++ solution', 2), ('sorted array', 2), ('typescript', 2), ('upper bound', 2), ('vector', 2), ('wrong-answer', 2), ('#binary-search', 1), ('#codegirl', 1), ('#easy-understanding', 1), ('#java', 1), ('#thinking-process', 1), ('100 faster', 1), ('1ms runtime', 1), ('2 pointer', 1), ('2 pointers', 1), ('3linessolution', 1), ('3ms', 1), ('4ms', 1), ('7-lines', 1), ('99', 1), ('algorithms', 1), ('amazon', 1), ('answer', 1), ('approach', 1), ('arraylist', 1), ('arrays', 1), ('awesome samriddhi', 1), ('backtracking', 1), ('beats 100', 1), ('beauty', 1), ('beginner', 1), ('beginner friendly', 1), ('best-solution-ever', 1), ('binary sea', 1), ('binary search c++', 1), ('binary search logic', 1), ('bound', 1), ('c++ easy to understand', 1), ('c++ recursive solution', 1), ('cheating', 1), ('clean clode', 1), ('clear', 1), ('comment', 1), ('commentary', 1), ('comments added', 1), ('comments-added', 1), ('complexity-analysis', 1), ('concise', 1), ('cpp soltuion', 1), ('cpp-solution', 1), ('csharp', 1), ('deque', 1), ('divide and concur', 1), ('divide-and-conquer', 1), ('divideandconquer', 1), ('dry', 1), ('east to understand', 1), ('easy undestanding', 1), ('efficient approach', 1), ('efficient solution', 1), ('epi', 1), ('es6', 1), ('explained solution', 1), ('explanation with code', 1), ('explanation with logic', 1), ('facebook', 1), ('faster than 100', 1), ('faster than 95.46', 1), ('fastest java slution', 1), ('fastest solution', 1), ('firstandlastpositioninarr', 1), ('firstlastposofelement', 1), ('flipkart', 1), ('for loop', 1), ('full detailed explanation', 1), ('function', 1), ('further-optimization', 1), ('hashmap', 1), ('help', 1), ('idea', 1), ('intuitive', 1), ('iteration', 1), ('java binary search', 1), ('java easy to understand', 1), ('java simple', 1), ('java-8', 1), ('java-reverse-integer', 1), ('java-script', 1), ('javasccript', 1), ('javascript recursive', 1), ('joke', 1), ('keep it simple', 1), ('kotlinvim', 1), ('linear', 1), ('linear search', 1), ('linear-time', 1), ('logarithm', 1), ('logical thinking', 1), ('lower', 1), ('malj', 1), ('map', 1), ('memory efficient', 1), ('microsoft', 1), ('modern c++', 1), ('mrmagician', 1), ('multiset', 1), ('must-see', 1), ('Netflix', 1), ('non-recursion', 1), ('o log n', 1), ('ologn', 1), ('ologn + n', 1), ('one binary search', 1), ('one pass', 1), ('one-liner', 1), ('oneline', 1), ('pair', 1), ('pedantic', 1), ('perl', 1), ('pyhton 3', 1), ('queue and stack', 1), ('real-world-scenario', 1), ('recurrance', 1), ('recursive solution', 1), ('reducecomparison', 1), ('return-value', 1), ('reverse-list', 1), ('ritik', 1), ('run-time-error', 1), ('runtime analysis', 1), ('search for position', 1), ('searching', 1), ('self explanatory', 1), ('selfexplained', 1), ('share-solution', 1), ('shared-answer', 1), ('short', 1), ('shortest-distance', 1), ('simpe', 1), ('slow', 1), ('solition-sharing', 1), ('solution-c', 1), ('solution-python', 1), ('sorting', 1), ('speed', 1), ('stack', 1), ('standard-library', 1), ('stars move the article up', 1), ('stl vector', 1), ('straight', 1), ('straightforward', 1), ('swift5', 1), ('symmetric', 1), ('test-case-too-weak', 1), ('time complexity', 1), ('time-complexity-o', 1), ('tow-pointers', 1), ('two pointer', 1), ('two pointer technique', 1), ('two pointers', 1), ('uber-onsite', 1), ('uditkotecha', 1), ('understandable', 1), ('unordered map', 1), ('very easy to understand', 1), ('video', 1), ('visual', 1), ('whileloop', 1), ('with documentation', 1), ('without binary search', 1), ('works-on-my-machine', 1), ('youtube', 1)]"
33,Search in Rotated Sorted Array,https://leetcode.com/problems/search-in-rotated-sorted-array,"There is an integer array nums sorted in ascending order (with distinct values).

Prior to being passed to your function, nums is rotated at an unknown pivot index k (0 <= k < nums.length) such that the resulting array is [nums[k], nums[k+1], ..., nums[n-1], nums[0], nums[1], ..., nums[k-1]] (0-indexed). For example, [0,1,2,4,5,6,7] might be rotated at pivot index 3 and become [4,5,6,7,0,1,2].

Given the array nums after the rotation and an integer target, return the index of target if it is in nums, or -1 if it is not in nums.","['array', 'binary-search']",Medium,7536,661,2703312,978937,"[""Search in Rotated Sorted Array II"", ""Find Minimum in Rotated Sorted Array""]","[('binary-search', 178), ('java', 113), ('python', 88), ('binary search', 78), ('c++', 67), ('binarysearch', 60), ('cpp', 60), ('python 3', 46), ('javascript', 39), ('java-solution', 31), ('python3', 26), ('easy-understanding', 20), ('c#', 18), ('solution', 15), ('cpp solution', 14), ('recursion', 14), ('easy-undestand', 13), ('easy-understand', 12), ('easy', 11), ('golang', 10), ('c++ code', 8), ('easytounderstand', 7), ('simple', 7), ('0ms', 6), ('binarysearh', 6), ('ruby', 6), ('simple solution', 6), ('swift', 6), ('two-pointers', 6), ('array', 5), ('cpp easy', 5), ('js', 5), ('logn', 5), ('pivot', 5), ('recursive', 5), ('0 ms', 4), ('c', 4), ('csharp', 4), ('easy-to-understand', 4), ('kotlin', 4), ('rotated-sorted-array', 4), ('time-complexity', 4), ('100 faster', 3), ('100 speed', 3), ('accepted solution', 3), ('beats 100', 3), ('binary-search-explanation', 3), ('commented', 3), ('divide and conquer', 3), ('explanation', 3), ('fast', 3), ('fast-solution', 3), ('fastest', 3), ('go', 3), ('idea', 3), ('iterative', 3), ('javascript solution', 3), ('optimal', 3), ('python2', 3), ('rotated binary search', 3), ('rotated sorted array', 3), ('search', 3), ('short', 3), ('simple clear c++ solution', 3), ('zea7ot', 3), ('#python', 2), ('100', 2), ('100 faster runtime', 2), ('33', 2), ('arrays', 2), ('avnish', 2), ('beats 100 percent', 2), ('binary', 2), ('bisect', 2), ('clean', 2), ('clean code', 2), ('clean-efficient-code', 2), ('concise-solution', 2), ('explaination', 2), ('explanation with logic', 2), ('faster', 2), ('golang-solution', 2), ('help', 2), ('improve', 2), ('java solution', 2), ('javascrip', 2), ('js javascript', 2), ('keep it simple', 2), ('linear seach', 2), ('recursively', 2), ('recusion', 2), ('rust', 2), ('scala', 2), ('shared-answer', 2), ('simplesolution', 2), ('stl', 2), ('wrong-answer', 2), ('#easysolution', 1), ('#javascript', 1), ('#linearsearch', 1), ('#python 3', 1), ('#shortestsolution', 1), ('#solution', 1), ('0ms-solution', 1), ('100 bst', 1), ('100 memory', 1), ('accepted', 1), ('almost 1-liner', 1), ('amazon', 1), ('and', 1), ('beauty', 1), ('begineer', 1), ('beginner friendly', 1), ('beginners level', 1), ('best explaination', 1), ('best-solution', 1), ('best-solution-ever', 1), ('best-submission', 1), ('binary sear', 1), ('binary search algorithm', 1), ('binary search c++', 1), ('binary search logic', 1), ('binary-tree', 1), ('bug', 1), ('c++ binary-search', 1), ('c++ solution', 1), ('check', 1), ('clean-code', 1), ('code with explanation', 1), ('comment', 1), ('comments added', 1), ('comments-added', 1), ('constant-space', 1), ('correct-test', 1), ('cpp-solution', 1), ('detailed', 1), ('detailed explanation', 1), ('dict', 1), ('distance', 1), ('divid and conquer', 1), ('divide-and-conquer', 1), ('easy understanding', 1), ('easy-solition', 1), ('easysolution', 1), ('efficient solution', 1), ('explained', 1), ('explanation with code', 1), ('facebook', 1), ('fast and simple', 1), ('faster than 100.00', 1), ('faster than 90', 1), ('faster then 95', 1), ('fasterthan100', 1), ('fastest solution', 1), ('find', 1), ('functional', 1), ('functions', 1), ('go-solution', 1), ('google', 1), ('heap', 1), ('help me', 1), ('help needed', 1), ('if-else', 1), ('intuition', 1), ('ios', 1), ('iterative way', 1), ('iteratively', 1), ('iterator', 1), ('javacript', 1), ('kotlinvim', 1), ('lambda', 1), ('linear search', 1), ('linear-search', 1), ('logarithmic time', 1), ('loop-detection', 1), ('lowerbound', 1), ('microsoft', 1), ('mrmagician', 1), ('not binary-search', 1), ('object oriented solution', 1), ('one binary search', 1), ('one line', 1), ('one liner', 1), ('one pass', 1), ('one pass solution', 1), ('one-liner', 1), ('oneliner', 1), ('oop', 1), ('original', 1), ('parition', 1), ('partition', 1), ('partition point', 1), ('perl', 1), ('php', 1), ('php solution', 1), ('please', 1), ('pseudocode', 1), ('python-3', 1), ('quick', 1), ('readability', 1), ('readable', 1), ('recursive solution', 1), ('recusrive', 1), ('red-black-tree', 1), ('rotate-array', 1), ('runtime', 1), ('searach in rotated array', 1), ('search-in-rotated-sorted-array', 1), ('searching', 1), ('selfexplained', 1), ('silly', 1), ('simple logic', 1), ('simplest', 1), ('solution-python', 1), ('solution-sharing-cpp', 1), ('solution-sharing-python', 1), ('sorted', 1), ('stars move the article up', 1), ('stl algorithms', 1), ('stl vector', 1), ('stuck', 1), ('suggestion', 1), ('test-case', 1), ('time-limit-exceeded', 1), ('treemap', 1), ('two passes', 1), ('understandable', 1), ('upperbound', 1), ('upvote', 1), ('video', 1), ('video explaination', 1), ('video explanation', 1), ('video-explanation', 1), ('visualization', 1), ('xor', 1), ('youtube', 1), ('zip', 1)]"
32,Longest Valid Parentheses,https://leetcode.com/problems/longest-valid-parentheses,"Given a string containing just the characters '(' and ')', find the length of the longest valid (well-formed) parentheses substring.","['string', 'dynamic-programming']",Hard,5122,188,1245045,372771,"[""Valid Parentheses""]","[('java', 50), ('stack', 50), ('cpp', 45), ('c++', 39), ('python', 34), ('dynamic-programming', 23), ('dynamic programming', 21), ('stacks', 20), ('easy-understanding', 12), ('dp', 11), ('javascript', 11), ('solution', 11), ('python 3', 10), ('python3', 8), ('simple', 8), ('easy', 7), ('constant space', 6), ('easy-to-understand', 6), ('accepted', 5), ('c', 5), ('clean code', 5), ('go', 5), ('java-solution', 5), ('linear time', 5), ('wrong-answer', 5), ('cpp solution', 4), ('golang', 4), ('stack-based', 4), ('c#', 3), ('comments-added', 3), ('easy to understand', 3), ('easy-understand', 3), ('explained', 3), ('longest-valid-parentheses', 3), ('parentheses', 3), ('scala', 3), ('short', 3), ('test-case', 3), ('time-limit-exceeded', 3), ('works-on-my-machine', 3), ('100 speed', 2), ('best-submission', 2), ('easytounderstand', 2), ('explanation', 2), ('hashmap', 2), ('memoization', 2), ('no stack', 2), ('one-pass', 2), ('recursively', 2), ('ruby', 2), ('sliding-window', 2), ('string', 2), ('testcase-wrong', 2), ('two-pointers', 2), ('typescript', 2), ('video-explanation', 2), ('0ms', 1), ('100 beat', 1), ('4ms', 1), ('amazon', 1), ('array', 1), ('array easy', 1), ('beat 90', 1), ('best', 1), ('big o of n', 1), ('bitwise operation', 1), ('bool', 1), ('c++ code', 1), ('clean clode', 1), ('comment', 1), ('commented', 1), ('commetend', 1), ('compile-error', 1), ('concise', 1), ('constant-space', 1), ('cpp doubt', 1), ('cpp easy', 1), ('cpp-functional', 1), ('cpp-solution', 1), ('data structures', 1), ('dfs', 1), ('different-oj-local', 1), ('dp c++', 1), ('dp-techqique', 1), ('easiest', 1), ('easy soluton', 1), ('easy-undestand', 1), ('efficient solution', 1), ('explanations', 1), ('fastest', 1), ('gkt', 1), ('help', 1), ('immutable', 1), ('incorrect-test-case', 1), ('interval', 1), ('interval-merging', 1), ('intervals', 1), ('intuitive', 1), ('iterative', 1), ('javascrip', 1), ('js', 1), ('kotlinvim', 1), ('lambda', 1), ('left and right', 1), ('leftpassrightpass', 1), ('linear space', 1), ('longestvalidparentheses', 1), ('memorized-dfs', 1), ('memory-limit-exceeded', 1), ('monotonic stack', 1), ('nlogn', 1), ('no dp', 1), ('no extra space', 1), ('no-stack', 1), ('novice', 1), ('one pointer', 1), ('one-loop', 1), ('optimal', 1), ('pointer', 1), ('python2', 1), ('pytyhon', 1), ('recursion', 1), ('regular expression', 1), ('regular-expression-matching', 1), ('runtime-error', 1), ('rust', 1), ('share-solution', 1), ('short c++ code', 1), ('simple java solution', 1), ('simple solution', 1), ('single pass', 1), ('solution-explaining', 1), ('solution-share', 1), ('solution-sharing-c', 1), ('solution-sharing-python', 1), ('solved', 1), ('space optimized', 1), ('stack python', 1), ('stl', 1), ('string-operation', 1), ('swift', 1), ('tail-recursive', 1), ('tailrec', 1), ('time-complexity', 1), ('time-limit-exceeded-java', 1), ('trapping-rain-water', 1), ('two counter', 1), ('twopointers', 1), ('ultra easy', 1), ('vague', 1), ('valid-parentheses', 1), ('vector', 1), ('very easy', 1), ('weird', 1), ('without dp', 1), ('without stack', 1), ('without-stack', 1)]"
31,Next Permutation,https://leetcode.com/problems/next-permutation,"Implement next permutation, which rearranges numbers into the lexicographically next greater permutation of numbers.

If such an arrangement is not possible, it must rearrange it as the lowest possible order (i.e., sorted in ascending order).

The replacement must be in place and use only constant extra memory.",['array'],Medium,5409,1856,1492869,506672,"[""Permutations"", ""Permutations II"", ""Permutation Sequence"", ""Palindrome Permutation II""]","[('c++', 64), ('python', 61), ('cpp', 57), ('java', 50), ('easy-understand', 24), ('python 3', 21), ('javascript', 18), ('easy-understanding', 17), ('solution', 16), ('cpp solution', 12), ('python3', 12), ('array', 10), ('c#', 10), ('easy-to-understand', 10), ('linear time', 10), ('easy-undestand', 8), ('easy', 7), ('nextpermutation', 7), ('stl', 7), ('explained', 6), ('golang', 6), ('permutations', 6), ('binary-search', 5), ('c++ code', 4), ('c++11', 4), ('fast', 4), ('fastest', 4), ('java-solution', 4), ('permutation', 4), ('short', 4), ('simple solution', 4), ('wrong-answer', 4), ('best-submission', 3), ('binary search', 3), ('c++ solution', 3), ('constant space', 3), ('cpp easy', 3), ('easy understand', 3), ('explained solution', 3), ('golang-solution', 3), ('iterative', 3), ('lexicographical order', 3), ('next permutation', 3), ('ruby', 3), ('sort', 3), ('sorting', 3), ('swift', 3), ('time-complexity', 3), ('two-pointers', 3), ('video-explanation', 3), ('works-on-my-machine', 3), ('0ms', 2), ('accepted', 2), ('backtracking', 2), ('beginner friendly', 2), ('binarysearch', 2), ('constant memory', 2), ('constant-space', 2), ('easiest', 2), ('easytounderstand', 2), ('explanation', 2), ('explanation of logic', 2), ('explanation with code', 2), ('fasterthan100', 2), ('go-solution', 2), ('help', 2), ('in-place', 2), ('inplace', 2), ('interviews', 2), ('intuitive', 2), ('java ac solution', 2), ('php', 2), ('readable', 2), ('reverse', 2), ('rust', 2), ('simple', 2), ('solution-cpp', 2), ('solution-sharing-cpp', 2), ('space-non', 2), ('stl algorithms', 2), ('swap', 2), ('swapping', 2), ('well-explained', 2), ('1 liner', 1), ('100', 1), ('100 faster runtime', 1), ('1liner', 1), ('2 pointers', 1), ('advice', 1), ('amazon', 1), ('backward', 1), ('beat 93', 1), ('beats 100 percent', 1), ('bisect', 1), ('bug in leetcode', 1), ('bytedance', 1), ('c', 1), ('c++ ac', 1), ('c++ easy to understand', 1), ('c++ stl', 1), ('c++ summary of related problem', 1), ('c++17', 1), ('carry-in-addition', 1), ('clean code', 1), ('combinatorics', 1), ('commentary', 1), ('commented', 1), ('comments-added', 1), ('commetend', 1), ('compile-error', 1), ('concise', 1), ('cpp eas', 1), ('cpp-solution', 1), ('csharp', 1), ('debug', 1), ('detailed explanation', 1), ('detailed-explanation', 1), ('easy to understand', 1), ('efficient', 1), ('efficient solution', 1), ('explanations4problem', 1), ('factorial number system', 1), ('fast-solution', 1), ('faster than 100.00', 1), ('fastest java solution', 1), ('fastest python solution', 1), ('fastest solution', 1), ('for-loop', 1), ('go', 1), ('good-variable-names', 1), ('google interview', 1), ('heap', 1), ('help needed', 1), ('idea', 1), ('implementation', 1), ('invariant', 1), ('iterative way', 1), ('javascript solution', 1), ('js', 1), ('judge-problem', 1), ('knuths permutation algo', 1), ('kotlinvim', 1), ('linear-time', 1), ('list', 1), ('math', 1), ('maths', 1), ('microsoft', 1), ('modular', 1), ('nlogn', 1), ('one line solution', 1), ('one-loop', 1), ('optimisation', 1), ('optimization process', 1), ('optimized', 1), ('pattern', 1), ('performance', 1), ('php solution', 1), ('problem', 1), ('pseudocode', 1), ('python3.8', 1), ('question-not-clear', 1), ('rajat', 1), ('recursion', 1), ('recusion', 1), ('redirect21', 1), ('replace', 1), ('run-time-error', 1), ('runtime-error', 1), ('saravana', 1), ('scala', 1), ('scope', 1), ('simple array', 1), ('simple language', 1), ('simple python accepted', 1), ('slow', 1), ('solutionsharing', 1), ('sort-function', 1), ('sorted array', 1), ('space-complexity', 1), ('stack', 1), ('standard algorithms', 1), ('string-operation', 1), ('suggestion', 1), ('techbacker', 1), ('test-case', 1), ('test-cases', 1), ('testcase', 1), ('testcase-wrong', 1), ('testcases', 1), ('theory', 1), ('tips', 1), ('two-pointer', 1), ('updowndota', 1), ('video', 1), ('video solution', 1), ('well-commented', 1), ('why', 1), ('wrong-execution-result', 1)]"
30,Substring with Concatenation of All Words,https://leetcode.com/problems/substring-with-concatenation-of-all-words,"You are given a string s and an array of strings words of the same length. Return all starting indices of substring(s) in s that is a concatenation of each word in words exactly once, in any order, and without any intervening characters.

You can return the answer in any order.","['hash-table', 'two-pointers', 'string']",Hard,1231,1465,775579,204994,"[""Minimum Window Substring""]","[('java', 26), ('python', 26), ('cpp', 18), ('hashmap', 14), ('javascript', 12), ('sliding-window', 12), ('slidingwindow', 12), ('solution', 11), ('c++', 10), ('python 3', 10), ('time-limit-exceeded', 9), ('python3', 7), ('improve', 6), ('test-case', 6), ('missing-test-case', 5), ('c#', 4), ('time-complexity', 4), ('two-pointers', 4), ('counter', 3), ('easy-understanding', 3), ('golang', 3), ('hashing', 3), ('java-solution', 3), ('recursion', 3), ('run-time-error', 3), ('unordered map', 3), ('works-on-my-machine', 3), ('accepted', 2), ('c++11', 2), ('commented', 2), ('cpp-solution', 2), ('easiest', 2), ('easy', 2), ('easy-to-understand', 2), ('explained', 2), ('fast-solution', 2), ('golang-solution', 2), ('hash', 2), ('hashtable', 2), ('incorrect-test-case', 2), ('java ac solution', 2), ('javascript solution', 2), ('linear-time', 2), ('map', 2), ('sliding window', 2), ('string', 2), ('strings', 2), ('tle', 2), ('trie', 2), ('two-pointer', 2), ('#explanation', 1), ('#hashmaps', 1), ('#python', 1), ('2 pointers', 1), ('answer', 1), ('arraylist', 1), ('brute force', 1), ('bug', 1), ('bug-test-case', 1), ('c++ code', 1), ('checksum', 1), ('clear', 1), ('confusion', 1), ('constant-space', 1), ('cpp solution', 1), ('deque', 1), ('dynamic-programming', 1), ('east to understand', 1), ('easy-understand', 1), ('easytounderstand', 1), ('explanations4problem', 1), ('facebook', 1), ('go', 1), ('hash table', 1), ('hash-function', 1), ('hashset', 1), ('help', 1), ('hittable', 1), ('in-place', 1), ('input', 1), ('java8', 1), ('kotlin', 1), ('large-input', 1), ('linear time', 1), ('map-stl', 1), ('naive', 1), ('one-pass', 1), ('performance', 1), ('permutations', 1), ('php', 1), ('php solution', 1), ('pointer', 1), ('python2', 1), ('question', 1), ('question-not-clear', 1), ('queue', 1), ('readable', 1), ('rolling', 1), ('ruby', 1), ('rust', 1), ('short', 1), ('simple', 1), ('simplest', 1), ('sliding', 1), ('solution c++', 1), ('solution-python', 1), ('solution-sharing-cpp', 1), ('sorted-hash', 1), ('stringview', 1), ('substring', 1), ('substring pattern', 1), ('substring-with-concatenation-o', 1), ('substwithconcatofwords', 1), ('succint-explanation', 1), ('testcase error', 1), ('testcase-wrong', 1), ('three-lines', 1), ('trie-dfs', 1), ('tries', 1), ('understandable', 1), ('unorderedmultiset', 1), ('unorderedset', 1), ('wrong', 1), ('wrong-test-cases', 1)]"
29,Divide Two Integers,https://leetcode.com/problems/divide-two-integers,"Given two integers dividend and divisor, divide two integers without using multiplication, division, and mod operator.

Return the quotient after dividing dividend by divisor.

The integer division should truncate toward zero, which means losing its fractional part. For example, truncate(8.345) = 8 and truncate(-2.7335) = -2.

Note: Assume we are dealing with an environment that could only store integers within the 32-bit signed integer range: [−231, 231 − 1]. For this problem, assume that your function returns 231 − 1 when the division result overflows.","['math', 'binary-search']",Medium,1769,6862,2151318,364492,[],"[('java', 55), ('python', 47), ('cpp', 33), ('c++', 28), ('solution', 27), ('javascript', 24), ('python 3', 24), ('bit-manipulation', 16), ('easy-understand', 15), ('java-solution', 15), ('binary-search', 14), ('python3', 12), ('bit manipulation', 11), ('easy-undestand', 11), ('time-limit-exceeded', 9), ('wrong-answer', 8), ('overflow', 7), ('binary search', 6), ('c', 6), ('c#', 6), ('easy-to-understand', 6), ('cpp solution', 5), ('division', 5), ('easy-understanding', 5), ('explained', 5), ('simple', 5), ('swift', 5), ('bit-shift', 4), ('bitwise operation', 4), ('easy', 4), ('easytounderstand', 4), ('golang', 4), ('python2', 4), ('test-case', 4), ('clean code', 3), ('easy-solition', 3), ('explained solution', 3), ('fast and simple', 3), ('go', 3), ('golang-solution', 3), ('java ac solution', 3), ('log', 3), ('math', 3), ('recursion', 3), ('short', 3), ('simple clear c++ solution', 3), ('simple solution', 3), ('0ms', 2), ('binary', 2), ('bitwise', 2), ('clarification', 2), ('clear', 2), ('cpp-solution', 2), ('csharp', 2), ('divideconquer', 2), ('fast-solution', 2), ('fastest', 2), ('incorrect-test-case-python-bug', 2), ('int', 2), ('integer division', 2), ('interview', 2), ('iterative', 2), ('java solution', 2), ('mathematical', 2), ('missing-test-case', 2), ('no long', 2), ('one-liner', 2), ('pyhton3', 2), ('recursive', 2), ('ruby', 2), ('rust', 2), ('testcase-wrong', 2), ('#csharp', 1), ('#javascript', 1), ('#python', 1), ('0ms runtime', 1), ('100 faster', 1), ('100 faster runtime', 1), ('100 speed', 1), ('3ms', 1), ('accepted', 1), ('amazon', 1), ('anti log', 1), ('asahiocean', 1), ('best-submission', 1), ('binary-tree', 1), ('bit manupilation', 1), ('bit-operation', 1), ('bitmanipulation', 1), ('bits', 1), ('bitwise operator', 1), ('bitwise operators', 1), ('bitwise-operators', 1), ('c++ code', 1), ('c++ solution', 1), ('c++14', 1), ('cases', 1), ('clean-code', 1), ('clean-efficient-code', 1), ('commented', 1), ('complexity', 1), ('concise', 1), ('constant-time', 1), ('detailed explanation', 1), ('divide', 1), ('divide-two-integers', 1), ('dividetwointegers', 1), ('easiest', 1), ('easy to understand', 1), ('eazy', 1), ('efficient solution', 1), ('error in solution', 1), ('examples', 1), ('explain', 1), ('explanation', 1), ('explanation with code', 1), ('exponential searches', 1), ('faster than 100.00', 1), ('faster than 99.02', 1), ('go-solution', 1), ('greedy approach', 1), ('higher order functions', 1), ('improve', 1), ('incomplete-testcases', 1), ('incorrect-test-case', 1), ('integer-division', 1), ('integer-overflow', 1), ('iteration', 1), ('java 8', 1), ('java bit-manipulation', 1), ('java solution sharing', 1), ('java-big-integer', 1), ('javascript solution', 1), ('js', 1), ('js javascript', 1), ('kotlinvim', 1), ('kotllin', 1), ('lines', 1), ('list', 1), ('log mn', 1), ('log n', 1), ('logarithm', 1), ('logarithmic time', 1), ('logarithms', 1), ('logartihm', 1), ('logn', 1), ('long division', 1), ('long-division', 1), ('microsoft', 1), ('new', 1), ('new method', 1), ('no long data type', 1), ('no-long-int', 1), ('no-type-cast', 1), ('not used till now', 1), ('optimisation', 1), ('overflow fix', 1), ('performance', 1), ('rajawatbanna', 1), ('recursive solution', 1), ('recursively', 1), ('redirect21', 1), ('respect', 1), ('runtime-error', 1), ('scala', 1), ('simple python accepted', 1), ('simple-solution', 1), ('simplest', 1), ('solution-sharing-cpp', 1), ('solution-sharing-java', 1), ('straight forward', 1), ('time limit exceeded solve', 1), ('time-complexity', 1), ('tle', 1), ('tree', 1), ('try-catch', 1), ('typescript', 1), ('very easy to understand', 1), ('video-explanation', 1), ('week test case', 1), ('works-on-my-machine', 1), ('xjq', 1)]"
28,Implement strStr(),https://leetcode.com/problems/implement-strstr,"Implement strStr().

Return the index of the first occurrence of needle in haystack, or -1 if needle is not part of haystack.

Clarification:

What should we return when needle is an empty string? This is a great question to ask during an interview.

For the purpose of this problem, we will return 0 when needle is an empty string. This is consistent to C's strstr() and Java's indexOf().","['two-pointers', 'string']",Easy,2323,2369,2455286,869551,"[""Shortest Palindrome"", ""Repeated Substring Pattern""]","[('java', 129), ('python', 128), ('cpp', 69), ('python 3', 63), ('javascript', 51), ('c++', 48), ('kmp', 47), ('python3', 41), ('java-solution', 35), ('string', 33), ('solution', 23), ('golang', 22), ('easy-understanding', 19), ('kmp algorithm', 19), ('easy', 18), ('strstr', 18), ('c', 16), ('rabin-karp', 14), ('cpp solution', 12), ('easy-understand', 12), ('c#', 11), ('easy-undestand', 11), ('golang-solution', 11), ('simple', 11), ('swift', 11), ('easy-to-understand', 10), ('easytounderstand', 9), ('rabin karp algorithm', 9), ('0ms', 8), ('100 faster', 8), ('clean code', 8), ('go', 8), ('rust', 8), ('stl', 8), ('two-pointers', 8), ('brute-force', 7), ('cpp easy', 7), ('fast and simple', 7), ('fast-solution', 7), ('find', 7), ('go-solution', 7), ('javascript solution', 7), ('one-liner', 7), ('short', 7), ('simple solution', 7), ('string-searching', 7), ('sunday', 7), ('time-complexity', 7), ('python2', 6), ('accepted', 5), ('boyer-moore', 5), ('c++ code', 5), ('cpp-solution', 5), ('js', 5), ('one line', 5), ('rolling-hash', 5), ('solution-sharing-cpp', 5), ('string-operation', 5), ('easiest', 4), ('go lang', 4), ('improve', 4), ('iterative', 4), ('kotlin', 4), ('recursive', 4), ('substring', 4), ('z-algorithm', 4), ('0ms runtime', 3), ('1 line', 3), ('100 speed', 3), ('c++ solution', 3), ('c++11', 3), ('comments-added', 3), ('concise', 3), ('fast', 3), ('fastest', 3), ('index', 3), ('indexof', 3), ('linear-time', 3), ('ruby', 3), ('run-time-error', 3), ('string search', 3), ('strings', 3), ('0 ms', 2), ('beginnerfriendly', 2), ('brute force', 2), ('bug', 2), ('comments added', 2), ('constant-space', 2), ('dp', 2), ('easy undestanding', 2), ('for-loop', 2), ('hash', 2), ('hashmap', 2), ('haystack', 2), ('help needed', 2), ('if-else', 2), ('knuth morris pratt', 2), ('one-pass', 2), ('pointer', 2), ('pyhton3', 2), ('pythonpython3', 2), ('readable', 2), ('recursion', 2), ('scala', 2), ('slidingwindow', 2), ('split', 2), ('sunday algorithm', 2), ('test-case', 2), ('two pointers', 2), ('very easy to understand', 2), ('wrong-answer', 2), ('#easy-understanding', 1), ('#fast', 1), ('#javascript', 1), ('#python', 1), ('#python3', 1), ('#simple', 1), ('#two-pointers', 1), ('1 liner', 1), ('100', 1), ('100 space', 1), ('1liner', 1), ('2 line', 1), ('2-line', 1), ('accepted solution', 1), ('algorithm', 1), ('algorithms', 1), ('amazon', 1), ('array', 1), ('arraylist', 1), ('beats 100', 1), ('beautifulcode', 1), ('beginner', 1), ('best solution', 1), ('best space complexity', 1), ('best-solution-ever', 1), ('bfs', 1), ('bug in leetcode', 1), ('bug report', 1), ('bug-test-case', 1), ('c code', 1), ('c++14', 1), ('c++17', 1), ('cheating', 1), ('clear explanation', 1), ('commented', 1), ('commented code', 1), ('corner-case', 1), ('cpp doubt', 1), ('cpp with explanation', 1), ('cpp-functional', 1), ('detailed', 1), ('dynamic-programming', 1), ('easy code', 1), ('easy to understand', 1), ('easy-implementation', 1), ('easy-solition', 1), ('easy-solution', 1), ('elegant', 1), ('explained', 1), ('explained solution', 1), ('explanation', 1), ('facebook', 1), ('faster than 100.00', 1), ('faster than 99', 1), ('find-string', 1), ('full explained', 1), ('fully-commented', 1), ('further-optimization', 1), ('give stars and subscribe', 1), ('go-lang', 1), ('graph', 1), ('hash-function', 1), ('heavily commented', 1), ('helpful', 1), ('implement strstr', 1), ('indexof method', 1), ('iterator', 1), ('izaac', 1), ('java ac solution', 1), ('java solution sharing', 1), ('java-simple-clean-solution', 1), ('java-twolines', 1), ('javasacript', 1), ('javascipt', 1), ('kip', 1), ('kotlinvim', 1), ('leetcode-library', 1), ('linear-space', 1), ('lol', 1), ('loops', 1), ('math', 1), ('memory-efficient', 1), ('microsoft', 1), ('n', 1), ('naive', 1), ('native strstr', 1), ('needimprovement', 1), ('needle', 1), ('needle in a haystack', 1), ('no-indexof', 1), ('no-recursion', 1), ('no-substring', 1), ('non-copy-paste', 1), ('oneline', 1), ('onelinecode', 1), ('optimized', 1), ('pattern-matching', 1), ('performance question', 1), ('php', 1), ('php solution', 1), ('pi function', 1), ('prime', 1), ('pruning', 1), ('python-3', 1), ('python3.8', 1), ('question', 1), ('queue', 1), ('quick', 1), ('rabin-karp-algorithm', 1), ('recursive solution', 1), ('reduce', 1), ('regex', 1), ('regular-expression', 1), ('rolling hash', 1), ('runtime', 1), ('searching', 1), ('short code', 1), ('short solution', 1), ('shortest', 1), ('simpe', 1), ('simple and elegant', 1), ('simple python solution', 1), ('simple-solution', 1), ('simplest', 1), ('slicing', 1), ('sliding-window', 1), ('solution c++', 1), ('solution-python', 1), ('solved', 1), ('str', 1), ('straight-forward', 1), ('string slicing', 1), ('substr', 1), ('ternary-operator', 1), ('time complexity', 1), ('time-limit-exceeded', 1), ('time-optimized', 1), ('top', 1), ('try-catch', 1), ('two pointer approach', 1), ('two-pointer-approach', 1), ('unit-test', 1), ('very simple', 1), ('video explanation', 1), ('window', 1), ('window-sliding', 1), ('wrong testcase', 1), ('xjq', 1), ('z-array', 1), ('zea7ot', 1)]"
27,Remove Element,https://leetcode.com/problems/remove-element,"Given an array nums and a value val, remove all instances of that value in-place and return the new length.

Do not allocate extra space for another array, you must do this by modifying the input array in-place with O(1) extra memory.

The order of elements can be changed. It doesn't matter what you leave beyond the new length.

Clarification:

Confused why the returned value is an integer but your answer is an array?

Note that the input array is passed in by reference, which means a modification to the input array will be known to the caller as well.

Internally you can think of this:


// nums is passed in by reference. (i.e., without making a copy)
int len = removeElement(nums, val);

// any modification to nums in your function would be known by the caller.
// using the length returned by your function, it prints the first len elements.
for (int i = 0; i < len; i++) {
    print(nums[i]);
}","['array', 'two-pointers']",Easy,2103,3511,1693175,839338,"[""Remove Duplicates from Sorted Array"", ""Remove Linked List Elements"", ""Move Zeroes""]","[('python', 93), ('java', 90), ('c++', 70), ('cpp', 70), ('python 3', 51), ('javascript', 45), ('python3', 36), ('solution', 35), ('remove-element', 25), ('two-pointers', 22), ('golang', 21), ('swift', 19), ('java-solution', 18), ('0ms', 16), ('cpp solution', 16), ('easy-understanding', 15), ('array', 14), ('easy', 13), ('c', 12), ('short', 11), ('c#', 10), ('constant-space', 10), ('easy-understand', 10), ('go', 10), ('golang-solution', 10), ('in-place', 10), ('simple', 10), ('easy-undestand', 9), ('javascript solution', 9), ('remove element', 9), ('two-pointer', 9), ('fast', 8), ('stl', 8), ('accepted', 7), ('easytounderstand', 7), ('simple solution', 7), ('wrong-answer', 7), ('arrays', 6), ('c++ code', 6), ('kotlin', 6), ('rust', 6), ('vector', 6), ('100 speed', 5), ('csharp', 5), ('easiest', 5), ('easy-to-understand', 5), ('fast and simple', 5), ('fast-solution', 5), ('python2', 5), ('100 faster runtime', 4), ('improve', 4), ('inplace', 4), ('js', 4), ('remove', 4), ('removeelement', 4), ('ruby', 4), ('swap', 4), ('time-complexity', 4), ('two pointer', 4), ('two pointers', 4), ('c++11', 3), ('erase', 3), ('fastest', 3), ('go-solution', 3), ('php', 3), ('readable', 3), ('run-time-error', 3), ('simple clear c++ solution', 3), ('simplest', 3), ('swap value', 3), ('works-on-my-machine', 3), ('100', 2), ('100 faster', 2), ('100 faster cpp', 2), ('100 space', 2), ('accepted solution', 2), ('algorithm', 2), ('amazon', 2), ('array-manipulation', 2), ('beginner friendly', 2), ('c code', 2), ('c++ solution', 2), ('c++14', 2), ('commented code', 2), ('comments-added', 2), ('cpp doubt', 2), ('cpp easy', 2), ('erase method', 2), ('explained solution', 2), ('go lang', 2), ('incorrect-test-case', 2), ('iteration', 2), ('iterative', 2), ('javascrip', 2), ('linear time', 2), ('linear-search', 2), ('linear-time', 2), ('list', 2), ('one-liner', 2), ('php solution', 2), ('pointers', 2), ('rust vec', 2), ('shorter', 2), ('stl algorithms', 2), ('twopointers', 2), ('vector-operation', 2), ('while-loop', 2), ('#c++', 1), ('#cpp', 1), ('#easy-understand', 1), ('#erase', 1), ('#java', 1), ('#javascript', 1), ('#two-pointers', 1), ('1 liner', 1), ('1-liner', 1), ('100 memory', 1), ('100fast', 1), ('2 liner', 1), ('2 pointer approach', 1), ('2 ways', 1), ('2pointers', 1), ('4ms', 1), ('5ms', 1), ('7.2mb', 1), ('accepter', 1), ('array nesting', 1), ('backward', 1), ('beat 97', 1), ('beats 100', 1), ('beats100', 1), ('beginner', 1), ('best', 1), ('binary-search', 1), ('bugs', 1), ('c# solutions', 1), ('clean', 1), ('clean code', 1), ('clean-code', 1), ('clear', 1), ('clear solution', 1), ('code for beginners', 1), ('comments', 1), ('concise', 1), ('concise-solution', 1), ('constant space', 1), ('cplusplus', 1), ('cpp-functional', 1), ('def removenum', 1), ('delete', 1), ('double-pointers', 1), ('duplicates', 1), ('dutch-national-flag', 1), ('easiest solution', 1), ('efficient', 1), ('efficient solution', 1), ('element', 1), ('empty', 1), ('erratic', 1), ('error', 1), ('esay-understand', 1), ('explained', 1), ('explanation', 1), ('explanation of logic', 1), ('explanation with logic', 1), ('explanations', 1), ('fast-matrix-exp', 1), ('faster than 100.00', 1), ('faster than 75', 1), ('for comprehension', 1), ('for loop', 1), ('four-line-code', 1), ('golang solution', 1), ('goto', 1), ('goto-considered-harmful', 1), ('goto-considered-useful', 1), ('heap', 1), ('help', 1), ('help needed', 1), ('in place', 1), ('in-place operation', 1), ('indexof', 1), ('iterative solution', 1), ('iterator', 1), ('iterators', 1), ('javasccript', 1), ('javascipt', 1), ('javascript recursive', 1), ('js javascript', 1), ('justification', 1), ('kotlin-solution', 1), ('kotlinvim', 1), ('least', 1), ('less memory', 1), ('less time', 1), ('linear', 1), ('linear-space', 1), ('list-comprehension', 1), ('memory less than 100', 1), ('memory optimized', 1), ('mistake', 1), ('move-zeroes', 1), ('needimprovement', 1), ('no branching', 1), ('no extra space', 1), ('non-copy-paste', 1), ('one pointer', 1), ('oneline', 1), ('optimal', 1), ('perl', 1), ('pointer arithmetic', 1), ('pop', 1), ('python bfs', 1), ('pythonsolution', 1), ('pytyhon', 1), ('rajawatbanna', 1), ('recursion', 1), ('recursive', 1), ('recusion', 1), ('remove duplicates', 1), ('return-value', 1), ('runtime', 1), ('runtimeerror', 1), ('saawal', 1), ('selection', 1), ('short code', 1), ('short solution', 1), ('simple python accepted', 1), ('simple python solution', 1), ('slidingwindow', 1), ('solution-c', 1), ('solution-python', 1), ('solution-ruby', 1), ('solution-sharing-cpp', 1), ('solution-sharing-python', 1), ('solved', 1), ('sorted array', 1), ('splice', 1), ('stack', 1), ('standard algorithms', 1), ('standard-library', 1), ('std algorithm', 1), ('stl vector', 1), ('swift5', 1), ('swiftsolution', 1), ('test-case', 1), ('testcase-wrong', 1), ('time complexity', 1), ('time-complexity n', 1), ('two', 1), ('two pointer technique', 1), ('twopointer', 1), ('typescript', 1), ('understandable', 1), ('video explanation', 1), ('well-commented', 1), ('whileloop', 1), ('without extra space', 1)]"
26,Remove Duplicates from Sorted Array,https://leetcode.com/problems/remove-duplicates-from-sorted-array,"Given a sorted array nums, remove the duplicates in-place such that each element appears only once and returns the new length.

Do not allocate extra space for another array, you must do this by modifying the input array in-place with O(1) extra memory.

Clarification:

Confused why the returned value is an integer but your answer is an array?

Note that the input array is passed in by reference, which means a modification to the input array will be known to the caller as well.

Internally you can think of this:


// nums is passed in by reference. (i.e., without making a copy)
int len = removeDuplicates(nums);

// any modification to nums in your function would be known by the caller.
// using the length returned by your function, it prints the first len elements.
for (int i = 0; i < len; i++) {
    print(nums[i]);
}","['array', 'two-pointers']",Easy,3827,6913,3000890,1406888,"[""Remove Element"", ""Remove Duplicates from Sorted Array II""]","[('java', 112), ('python', 100), ('c++', 69), ('python 3', 66), ('cpp', 64), ('javascript', 56), ('solution', 37), ('python3', 31), ('java-solution', 29), ('two-pointers', 28), ('remove duplicates', 19), ('wrong-answer', 19), ('cpp solution', 18), ('golang', 18), ('simple', 18), ('easy-understanding', 17), ('array', 16), ('c', 16), ('c#', 15), ('simple solution', 15), ('constant-space', 12), ('golang-solution', 12), ('easy-understand', 11), ('swift', 11), ('c++ code', 10), ('easy', 10), ('linear time', 10), ('easy-to-understand', 9), ('go', 9), ('cpp easy', 8), ('short', 8), ('constant space', 7), ('easytounderstand', 7), ('go-solution', 7), ('in-place', 7), ('kotlin', 7), ('linear-time', 7), ('two-pointer', 7), ('explained', 6), ('javascript solution', 6), ('stl', 6), ('two pointers', 6), ('accepted', 5), ('c code', 5), ('js', 5), ('output-limit-exceeded', 5), ('time-complexity', 5), ('twopointer', 5), ('works-on-my-machine', 5), ('arrays', 4), ('cpp-solution', 4), ('csharp', 4), ('duplicates', 4), ('easy-undestand', 4), ('fast', 4), ('removeduplicates', 4), ('ruby', 4), ('set', 4), ('sorted array', 4), ('test-case', 4), ('#javascript', 3), ('2 pointer', 3), ('commented', 3), ('easiest', 3), ('fast-solution', 3), ('faster', 3), ('improve', 3), ('issue', 3), ('rust', 3), ('scala', 3), ('sets', 3), ('short code', 3), ('slow', 3), ('vector', 3), ('0ms', 2), ('c++11', 2), ('clean code', 2), ('commentary', 2), ('comments', 2), ('compile-error', 2), ('constant memory', 2), ('cpp doubt', 2), ('duplicate', 2), ('easy to understand', 2), ('efficient', 2), ('fastest', 2), ('go lang', 2), ('help', 2), ('iteration', 2), ('java ac solution', 2), ('java solution', 2), ('kotlin-solution', 2), ('lists', 2), ('not working', 2), ('one-loop', 2), ('optimal', 2), ('php', 2), ('pointer', 2), ('question', 2), ('recursive', 2), ('remove', 2), ('remove duplicate', 2), ('remove-duplicates', 2), ('run-time-error', 2), ('runtime-error', 2), ('simple-solution', 2), ('solution by python', 2), ('solution-sharing-cpp', 2), ('two pointer', 2), ('video', 2), ('#easy-understand', 1), ('#java', 1), ('#js', 1), ('#simplecode', 1), ('#twopointer', 1), ('#twopointerapproach', 1), ('100', 1), ('100 memory', 1), ('100 speed', 1), ('1ms', 1), ('2 pointer approach', 1), ('2 pointers', 1), ('2pointers', 1), ('82.80faster', 1), ('9', 1), ('amazon', 1), ('amazon intern', 1), ('array easy', 1), ('arraylist', 1), ('basic-approach', 1), ('beats 100', 1), ('beats 98 pc', 1), ('begginer', 1), ('beginner', 1), ('beginner friendly', 1), ('binary search', 1), ('binary-search', 1), ('broken', 1), ('broken-tests', 1), ('bruteforce', 1), ('c++ set', 1), ('c++ solution', 1), ('clean', 1), ('code', 1), ('collections', 1), ('commented code', 1), ('comments added', 1), ('comments-added', 1), ('concise', 1), ('concise-solution', 1), ('constant-space-iterative', 1), ('count', 1), ('cpp clear', 1), ('cpp-functional', 1), ('deleteduplicates', 1), ('dictionary', 1), ('double-pointers', 1), ('duplicade', 1), ('easiest solution', 1), ('easily understood', 1), ('easy code', 1), ('easy understand', 1), ('easy understanding', 1), ('easy-solition', 1), ('easysolution', 1), ('efficient approach', 1), ('efficient solution', 1), ('error', 1), ('explaination', 1), ('explanation of logic', 1), ('explanation with code', 1), ('facebook-interview', 1), ('faceebook', 1), ('failed', 1), ('faster than 100.00', 1), ('faster than 97.42', 1), ('faster then 95', 1), ('fold', 1), ('for loops', 1), ('fp', 1), ('friendly', 1), ('google', 1), ('google interview', 1), ('google-india', 1), ('helpful comments', 1), ('i dont know why this is wrong', 1), ('if-else', 1), ('incorrect', 1), ('incorrect-test-case', 1), ('inplace', 1), ('intuitive', 1), ('iterative', 1), ('iterative way', 1), ('javasccript', 1), ('javascrip', 1), ('javascript arrays', 1), ('javascriptes6', 1), ('js javascript', 1), ('kotlinvim', 1), ('leetcode site', 1), ('leetcode-issue-only', 1), ('less memory', 1), ('lessmemory', 1), ('linear seach', 1), ('linear-complexity', 1), ('list', 1), ('list-slicing', 1), ('loops', 1), ('memory', 1), ('microsoft', 1), ('microsoft-india', 1), ('move-zeroes', 1), ('movezeroes', 1), ('multiple pointer', 1), ('neat-explanation', 1), ('newbie', 1), ('one pass', 1), ('one-liner', 1), ('one-pass', 1), ('optimized', 1), ('output', 1), ('partition', 1), ('perl', 1), ('pointer arithmetic', 1), ('pointer2pointer', 1), ('pointers', 1), ('pop', 1), ('problem', 1), ('problem understanding', 1), ('python perfomance', 1), ('python2', 1), ('pythonpython3', 1), ('rajawatbanna', 1), ('readable', 1), ('recursion', 1), ('remove element', 1), ('self-explanatory', 1), ('short answer', 1), ('simple approach', 1), ('simple c', 1), ('simple c code', 1), ('simple python accepted', 1), ('simple python solution', 1), ('simplest', 1), ('slowfast pointers', 1), ('solution c++', 1), ('solution-php', 1), ('solution-python', 1), ('solution-ruby', 1), ('solved', 1), ('sorted', 1), ('sorted set', 1), ('sorting', 1), ('space', 1), ('space complexity', 1), ('space o1', 1), ('speed', 1), ('stackoverflow', 1), ('straightforward', 1), ('success', 1), ('swap', 1), ('swift5', 1), ('swiftsolution', 1), ('test-cases', 1), ('time', 1), ('time complexity', 1), ('time-limit-exceeded', 1), ('tips', 1), ('treeset', 1), ('two pointer fast', 1), ('two pointer technique', 1), ('understandable', 1), ('very easy to understand', 1), ('video-explanation', 1), ('walmart', 1), ('while', 1), ('while-loop', 1), ('whileloop', 1)]"
25,Reverse Nodes in k-Group,https://leetcode.com/problems/reverse-nodes-in-k-group,"Given a linked list, reverse the nodes of a linked list k at a time and return its modified list.

k is a positive integer and is less than or equal to the length of the linked list. If the number of nodes is not a multiple of k then left-out nodes, in the end, should remain as it is.

Follow up:


	Could you solve the problem in O(1) extra memory space?
	You may not alter the values in the list's nodes, only nodes itself may be changed.",['linked-list'],Hard,3574,401,761185,347093,"[""Swap Nodes in Pairs"", ""Swapping Nodes in a Linked List""]","[('java', 93), ('iterative', 57), ('python', 53), ('c++', 51), ('cpp', 46), ('recursion', 31), ('linked-list', 29), ('python 3', 27), ('javascript', 18), ('recursive', 18), ('java-solution', 16), ('python3', 14), ('easy-understanding', 13), ('reverse list', 12), ('solution', 12), ('c#', 10), ('linkedlists', 10), ('easy-understand', 9), ('easy-undestand', 9), ('constant-space', 8), ('cpp solution', 8), ('simple', 8), ('easy-to-understand', 7), ('iteratively', 7), ('non-recursive', 7), ('fast-solution', 6), ('c', 5), ('golang', 5), ('iteration', 5), ('js', 5), ('stack', 5), ('0ms', 4), ('c++ code', 4), ('comments', 4), ('constant space', 4), ('recursively', 4), ('simple solution', 4), ('swift', 4), ('time-complexity', 4), ('100 speed', 3), ('accepted', 3), ('deque', 3), ('easy', 3), ('in-place', 3), ('javascript solution', 3), ('linear time', 3), ('linked list', 3), ('one-pass', 3), ('reverse-nodes-in-k-group', 3), ('stack-based', 3), ('stacks', 3), ('100 faster runtime', 2), ('clear', 2), ('comments added', 2), ('constant memory', 2), ('dummy-node', 2), ('easytounderstand', 2), ('explained', 2), ('fast', 2), ('fastest', 2), ('go', 2), ('go-solution', 2), ('improve', 2), ('intuitive', 2), ('iterative solution', 2), ('iteratve', 2), ('java ac solution', 2), ('linear-time', 2), ('linked lists', 2), ('listnode', 2), ('no-extra-space', 2), ('norecursion', 2), ('pointer', 2), ('pointers', 2), ('python2', 2), ('recursive approach', 2), ('recusion', 2), ('reverse linked list', 2), ('reverse-list', 2), ('space-complexity', 2), ('two-pointers', 2), ('#linkedlist', 1), ('#reverselist', 1), ('0ms-solution', 1), ('10 lines', 1), ('100 faster', 1), ('16ms', 1), ('1ms', 1), ('4 ms', 1), ('8ms', 1), ('90+', 1), ('90+faster', 1), ('ac solution', 1), ('adobe', 1), ('amazon', 1), ('array', 1), ('array of nodes', 1), ('arrays', 1), ('beat 99.7', 1), ('c++ recursive solution', 1), ('c++ solution', 1), ('c++11', 1), ('clean-efficient-code', 1), ('comments-added', 1), ('cpp easy', 1), ('cpp-solution', 1), ('easy to understant', 1), ('easy understanding', 1), ('easy undestanding', 1), ('easy-peasy', 1), ('easy-solition', 1), ('efficient', 1), ('esy sol', 1), ('explanation', 1), ('extra-space', 1), ('golang solution', 1), ('golang-solution', 1), ('hard problems', 1), ('help', 1), ('industry', 1), ('iterative traversal', 1), ('iterative-solution', 1), ('java solution sharing', 1), ('javascrip', 1), ('javascript recursive', 1), ('js javascript', 1), ('k-group', 1), ('kotlinvim', 1), ('linked list simple', 1), ('linkedlist', 1), ('linklist', 1), ('microsoft', 1), ('microsoft-india', 1), ('no recursion', 1), ('non-recursion', 1), ('notes', 1), ('one pass solution', 1), ('papercode', 1), ('pointer approach', 1), ('pointer-to-pointer', 1), ('pythonic', 1), ('queue', 1), ('raviinroorkee', 1), ('recurision', 1), ('recursive solution', 1), ('recusrive', 1), ('reverse', 1), ('reverse a linked list', 1), ('reverse link list', 1), ('reverselist', 1), ('ruby', 1), ('sandeepkumar', 1), ('sentinel node', 1), ('short code', 1), ('short python code', 1), ('short solution', 1), ('shorter', 1), ('shortest', 1), ('simple clear c++ solution', 1), ('simple-solution', 1), ('simplest', 1), ('single pass', 1), ('sliding window', 1), ('smart enough', 1), ('solution-javascript', 1), ('solution-sharing-cpp', 1), ('space o1', 1), ('statck', 1), ('success', 1), ('swift5', 1), ('syntax', 1), ('video', 1), ('video explaination', 1), ('video interview', 1), ('video solution', 1), ('well commented', 1), ('well-commented', 1), ('well-explained', 1), ('with-explanation', 1), ('wrong-answer', 1), ('wrong-template', 1), ('youtube', 1)]"
24,Swap Nodes in Pairs,https://leetcode.com/problems/swap-nodes-in-pairs,"Given a linked list, swap every two adjacent nodes and return its head.","['linked-list', 'recursion']",Medium,3575,208,1124291,603832,"[""Reverse Nodes in k-Group"", ""Swapping Nodes in a Linked List""]","[('java', 144), ('c++', 94), ('cpp', 76), ('recursion', 72), ('python', 64), ('iterative', 57), ('linked-list', 40), ('java-solution', 38), ('python 3', 34), ('javascript', 28), ('recursive', 27), ('solution', 26), ('python3', 24), ('easy-understanding', 22), ('linkedlists', 18), ('golang', 17), ('easy', 13), ('easy-to-understand', 13), ('easy-understand', 12), ('golang-solution', 12), ('c#', 11), ('constant-space', 10), ('cpp solution', 10), ('linked list', 9), ('simple', 9), ('0ms', 8), ('c', 8), ('swap nodes in pairs', 8), ('accepted', 7), ('linear time', 7), ('c++ code', 6), ('clean code', 6), ('cpp easy', 6), ('easytounderstand', 6), ('linked lists', 6), ('linkedlist', 6), ('pointer', 6), ('simple solution', 6), ('easy-undestand', 5), ('fast-solution', 5), ('go', 5), ('iteratively', 5), ('javascript solution', 5), ('recursively', 5), ('short', 5), ('swapping', 5), ('100 space', 4), ('100 speed', 4), ('csharp', 4), ('explained', 4), ('fast and simple', 4), ('iteration', 4), ('java ac solution', 4), ('recurision', 4), ('ruby', 4), ('swift', 4), ('100 faster', 3), ('100 faster runtime', 3), ('3 pointer', 3), ('constant memory', 3), ('explanation', 3), ('fast', 3), ('go-solution', 3), ('iterative way', 3), ('recursive solution', 3), ('recusion', 3), ('swap', 3), ('two-pointers', 3), ('0 ms', 2), ('0ms runtime', 2), ('100 memory', 2), ('2 pointer', 2), ('3 pointers', 2), ('3-pointers', 2), ('algorithm', 2), ('amazon', 2), ('c code', 2), ('c++11', 2), ('clean solution', 2), ('constant space', 2), ('cpp-solution', 2), ('easy understanding', 2), ('efficient', 2), ('es6', 2), ('explanation of logic', 2), ('faster', 2), ('fasterthan100', 2), ('fastest', 2), ('improve', 2), ('inplace', 2), ('intuitive', 2), ('iterate', 2), ('iterative solution', 2), ('iterator', 2), ('itereative', 2), ('java solution', 2), ('js', 2), ('linear-time', 2), ('multiple assignment', 2), ('python2', 2), ('pythonpython3', 2), ('recursive easy', 2), ('run-time-error', 2), ('solution-sharing-cpp', 2), ('stack', 2), ('swap value', 2), ('swapnodes', 2), ('swapnodesinpairs', 2), ('time-complexity', 2), ('understand', 2), ('wrong-answer', 2), ('#easy-understand', 1), ('#fasterthan100percent', 1), ('#go', 1), ('#golang', 1), ('#javascript', 1), ('#recursion', 1), ('100', 1), ('100 faster cpp', 1), ('100fast', 1), ('100faster', 1), ('2 pointers', 1), ('3 solutions', 1), ('4ms', 1), ('99 faster', 1), ('99 memory', 1), ('99.81', 1), ('99.98 faster', 1), ('array', 1), ('beating-100-submissions', 1), ('begginer friendly', 1), ('beginners', 1), ('best', 1), ('best code', 1), ('c programming', 1), ('c++ recursive solution', 1), ('c++ solution', 1), ('c++17', 1), ('c++fast', 1), ('clarification', 1), ('clean-code', 1), ('commented', 1), ('computer-science', 1), ('diagram', 1), ('divide-and-conquer', 1), ('drawing', 1), ('dummy-node', 1), ('easiest', 1), ('easy to understand', 1), ('easy undestanding', 1), ('eckotan', 1), ('efficiency', 1), ('efficient solution', 1), ('explain', 1), ('explained solution', 1), ('fake node', 1), ('fastest c++ solution', 1), ('garbage collection', 1), ('github', 1), ('grammar', 1), ('interview-friendly', 1), ('iteration vs recursion', 1), ('iterative approch', 1), ('iterative vs recursive', 1), ('itertools', 1), ('java 8', 1), ('java simple', 1), ('java-8', 1), ('javascrip', 1), ('kotlin', 1), ('kotlinvim', 1), ('linear memory', 1), ('linertime', 1), ('linked-list-reverse', 1), ('linked-lists', 1), ('linklist', 1), ('linklist swapped', 1), ('loop', 1), ('memory optimized', 1), ('microsoft', 1), ('microsoft-india', 1), ('mrmagician', 1), ('no modifying value', 1), ('no-value-change', 1), ('non-recursive', 1), ('note swap', 1), ('pass-by-reference', 1), ('php', 1), ('pointer approach', 1), ('pointer manipulation', 1), ('pointer reference', 1), ('pointer-to-pointer', 1), ('pointers', 1), ('ptyhon3', 1), ('pyhton3', 1), ('python-solution', 1), ('python3.8', 1), ('pythonic', 1), ('question-not-clear', 1), ('readable', 1), ('reccursion', 1), ('recurrance', 1), ('recurrence', 1), ('recursion fibonacci', 1), ('recursion palindrome', 1), ('recursion vs iteration', 1), ('recursive vs iterative', 1), ('reference', 1), ('reverse list', 1), ('rust', 1), ('sandeepkumar', 1), ('sentinel-node', 1), ('short c++ code', 1), ('shortest', 1), ('simple java', 1), ('simple-solution', 1), ('simplesolution', 1), ('simplest', 1), ('single pass', 1), ('single pointer', 1), ('slow learners', 1), ('solution-share', 1), ('swift5', 1), ('switch', 1), ('test-case', 1), ('testcase-wrong', 1), ('time limit exceeded', 1), ('tle', 1), ('two', 1), ('two pointers', 1), ('typescript', 1), ('typescript javascript', 1), ('understandable', 1), ('upvote', 1), ('video', 1), ('video explanation', 1), ('video solution', 1), ('while-loop', 1), ('whileloop', 1), ('wrong', 1), ('zip longest', 1)]"
23,Merge k Sorted Lists,https://leetcode.com/problems/merge-k-sorted-lists,"You are given an array of k linked-lists lists, each linked-list is sorted in ascending order.

Merge all the linked-lists into one sorted linked-list and return it.","['linked-list', 'divide-and-conquer', 'heap']",Hard,7051,355,2017073,871260,"[""Merge Two Sorted Lists"", ""Ugly Number II""]","[('java', 119), ('python', 100), ('cpp', 99), ('c++', 81), ('priority queue', 64), ('python 3', 49), ('javascript', 45), ('priority-queue', 45), ('heap', 44), ('divide and conquer', 43), ('java-solution', 26), ('heapq', 23), ('merge-k-sorted-lists', 23), ('solution', 23), ('min-heap', 22), ('divideconquer', 21), ('python3', 21), ('mergesort', 20), ('min heap', 19), ('c#', 18), ('linked-list', 18), ('easy-understanding', 17), ('minheap', 17), ('cpp solution', 14), ('linkedlists', 14), ('easy-understand', 12), ('golang', 11), ('recursion', 11), ('simple', 11), ('easy', 10), ('javascript solution', 9), ('simple solution', 9), ('c', 8), ('go', 8), ('priorityqueue', 8), ('recursive', 8), ('swift', 8), ('easy-undestand', 7), ('sorting', 7), ('accepted', 6), ('cpp easy', 6), ('easy-to-understand', 6), ('explained', 6), ('heaps', 6), ('kotlin', 6), ('linked list', 6), ('merge', 6), ('time-limit-exceeded', 6), ('linkedlist', 5), ('merge sort', 5), ('time-complexity', 5), ('binary-search', 4), ('brute force', 4), ('brute-force', 4), ('c++ code', 4), ('commented', 4), ('divid and conquer', 4), ('go-solution', 4), ('heapsort', 4), ('improve', 4), ('iterative', 4), ('map', 4), ('merge sorted linkedlist', 4), ('merge-sort', 4), ('queue', 4), ('ruby', 4), ('run-time-error', 4), ('array-sort', 3), ('c++11', 3), ('counting-sort', 3), ('easytounderstand', 3), ('error', 3), ('explained solution', 3), ('fast and simple', 3), ('golang-solution', 3), ('help', 3), ('java ac solution', 3), ('linked-lists', 3), ('merge two lists', 3), ('multiset', 3), ('optimal', 3), ('php', 3), ('python2', 3), ('rust', 3), ('time-complexity-o', 3), ('typescript', 3), ('vector', 3), ('#python', 2), ('beats 100', 2), ('c code', 2), ('c# sortedset', 2), ('c++ easy to understand', 2), ('c++ iterative sol', 2), ('c++14', 2), ('clean code', 2), ('compile-error', 2), ('constant space', 2), ('counting sort', 2), ('csharp', 2), ('dictionary', 2), ('divide-and-conquer', 2), ('divide-conquer', 2), ('divideandconquer', 2), ('dividedconquer', 2), ('easiest', 2), ('explanation', 2), ('explanation of logic', 2), ('fast', 2), ('fast-solution', 2), ('hard problems', 2), ('hashmap', 2), ('heaps algorithm', 2), ('javascrip', 2), ('lambda', 2), ('linked lists', 2), ('list', 2), ('memory-limit-exceeded', 2), ('merge-two-sorted-lists', 2), ('mergeklists', 2), ('merging', 2), ('microsoft', 2), ('multimap', 2), ('nlogk', 2), ('pythonpython3', 2), ('recurision', 2), ('recursively', 2), ('reduce', 2), ('short', 2), ('solution-sharing-python', 2), ('sort', 2), ('sort-function', 2), ('stars move the article up', 2), ('tle', 2), ('video', 2), ('video explaination', 2), ('video-explanation', 2), ('#easy', 1), ('#heap', 1), ('#javascript', 1), ('#merge', 1), ('#min heap', 1), ('100 faster runtime', 1), ('100 memory', 1), ('100 space', 1), ('100 speed', 1), ('3ms-runtime', 1), ('90+ solution', 1), ('99.73 faster', 1), ('accepted solution', 1), ('amazon', 1), ('array', 1), ('arraylist', 1), ('arrays', 1), ('awesome samriddhi', 1), ('beating-100-submissions', 1), ('binary heap', 1), ('binary tree', 1), ('bottom-up', 1), ('bottomup', 1), ('bubble-sort', 1), ('c programming', 1), ('c-code', 1), ('c-programming', 1), ('c++ solution', 1), ('c99', 1), ('chinese', 1), ('clean', 1), ('clear', 1), ('clrs', 1), ('comments-added', 1), ('comparator', 1), ('count-sort', 1), ('cplusplus', 1), ('data structure', 1), ('data structures', 1), ('easy-solition', 1), ('efficient solution', 1), ('expalanation', 1), ('explaination', 1), ('explanations', 1), ('facebook', 1), ('faster than 100.00', 1), ('faster than 96', 1), ('fastest', 1), ('for blondes', 1), ('fun', 1), ('functor', 1), ('generator', 1), ('google', 1), ('hard', 1), ('hard problem', 1), ('illegalargumentexception', 1), ('improvement-needed', 1), ('in-place', 1), ('inplace', 1), ('insort', 1), ('interview', 1), ('interviews', 1), ('intuitive', 1), ('iterative approch', 1), ('iteratively', 1), ('java solution', 1), ('java-8', 1), ('javascript brute force', 1), ('javascript recursive', 1), ('js', 1), ('k merge sorted list', 1), ('kotlinvim', 1), ('leetcode-issue-only', 1), ('len', 1), ('linear time', 1), ('linear-space', 1), ('listnode', 1), ('lists', 1), ('loop', 1), ('map in c++', 1), ('maxheap', 1), ('merge-intervals', 1), ('merge-lists', 1), ('mergek', 1), ('mergeksortedlists', 1), ('mergesortedarrays', 1), ('mergetwolists', 1), ('microsoft onsite', 1), ('min-heaps', 1), ('naive', 1), ('naive-solution', 1), ('need help', 1), ('non-recursion', 1), ('non-recursive', 1), ('nutanix', 1), ('o1', 1), ('ojerror', 1), ('performance', 1), ('php solution', 1), ('pointer', 1), ('pyhton', 1), ('python-compile-erroe', 1), ('python3.8', 1), ('pythonic', 1), ('pyton', 1), ('question need help', 1), ('queue and linkedlist', 1), ('rajawatbanna', 1), ('readable code', 1), ('recursion palindrome', 1), ('recursive approach', 1), ('recursive solution', 1), ('recusion', 1), ('ritik', 1), ('runtime', 1), ('runtime-error', 1), ('scala', 1), ('self-explanatory', 1), ('set', 1), ('shopee', 1), ('short code', 1), ('short solution', 1), ('simple approach', 1), ('simple clear c++ solution', 1), ('solution-sharing-cpp', 1), ('solution-sharing-java', 1), ('sorted', 1), ('sorted array', 1), ('sorteddictionary', 1), ('space', 1), ('space-complexity-1', 1), ('space-efficient', 1), ('stack', 1), ('stl', 1), ('swappairs', 1), ('syntax', 1), ('test-case', 1), ('time', 1), ('time-limit-exceeded-c', 1), ('timsort', 1), ('too easy', 1), ('treemap', 1), ('tricky', 1), ('tuple', 1), ('two pointer', 1), ('two pointer technique', 1), ('two-pointers', 1), ('unordered set', 1), ('unordered-set', 1), ('unorderedset', 1), ('updowndota', 1), ('video explanation', 1), ('visual-studio', 1), ('winner-tree', 1), ('without priority queue', 1), ('works-on-my-machine', 1), ('wrong', 1), ('wrong-answer', 1), ('xjq', 1), ('youtube', 1)]"
22,Generate Parentheses,https://leetcode.com/problems/generate-parentheses,"Given n pairs of parentheses, write a function to generate all combinations of well-formed parentheses.","['string', 'backtracking']",Medium,7676,328,1102974,727245,"[""Letter Combinations of a Phone Number"", ""Valid Parentheses""]","[('backtracking', 152), ('java', 109), ('python', 101), ('recursion', 82), ('cpp', 72), ('c++', 65), ('python 3', 46), ('javascript', 41), ('dfs', 37), ('easy-understand', 31), ('python3', 28), ('recursive', 27), ('solution', 24), ('easy-understanding', 20), ('iterative', 19), ('java-solution', 19), ('simple', 17), ('easy-undestand', 16), ('cpp solution', 15), ('bfs', 12), ('dynamic programming', 12), ('c#', 11), ('easy', 10), ('easytounderstand', 10), ('golang', 10), ('recusion', 10), ('wrong-answer', 10), ('backtrack', 9), ('dynamic-programming', 9), ('easy-to-understand', 8), ('stack', 8), ('string', 8), ('swift', 8), ('c++ code', 7), ('explained', 7), ('recurision', 7), ('back tracking', 6), ('backtracing', 5), ('bit-manipulation', 5), ('golang-solution', 5), ('scala', 5), ('short', 5), ('simple solution', 5), ('stringbuilder', 5), ('time-complexity', 5), ('0ms', 4), ('clean code', 4), ('cpp easy', 4), ('easy-understsand', 4), ('fast', 4), ('generate-parantheses', 4), ('javascript solution', 4), ('non-recursive', 4), ('stacks', 4), ('typescript', 4), ('#recursion', 3), ('accepted', 3), ('best-submission', 3), ('commented', 3), ('compile-error', 3), ('detailed explanation', 3), ('dfs simple solution', 3), ('dp', 3), ('easy solution', 3), ('fast-solution', 3), ('fastest', 3), ('go', 3), ('go-solution', 3), ('kotlin', 3), ('memoization', 3), ('no recursion', 3), ('non-recursion', 3), ('queue', 3), ('recursive solution', 3), ('recursively', 3), ('recusive', 3), ('ruby', 3), ('works-on-my-machine', 3), ('0ms runtime', 2), ('best explaination', 2), ('bitmasking', 2), ('brute force', 2), ('brute-force', 2), ('c', 2), ('catalan', 2), ('catalan numbers', 2), ('comments-added', 2), ('csharp', 2), ('easy to understand', 2), ('easy-to-read', 2), ('efficient', 2), ('elegant solution', 2), ('error', 2), ('explain', 2), ('explanation', 2), ('explanations', 2), ('generate parentheses', 2), ('hashset', 2), ('improve', 2), ('java ac solution', 2), ('memory', 2), ('parentheses', 2), ('recursive-dfs', 2), ('rust', 2), ('sets', 2), ('solution-sharing-python', 2), ('video', 2), ('well-explained', 2), ('wrong answer', 2), ('#backtracking', 1), ('#dp', 1), ('#dynamic-programming', 1), ('#easy-understanding', 1), ('#fasterthan100percent', 1), ('#go', 1), ('#golang', 1), ('#java', 1), ('#java #recursion', 1), ('#javascript', 1), ('#recursive', 1), ('#ruby', 1), ('#simple', 1), ('#video-explanation', 1), ('#videoexplanation', 1), ('0 ms solution', 1), ('0ms-solution', 1), ('100', 1), ('100 faster', 1), ('100 speed', 1), ('1ms', 1), ('99 faster', 1), ('accepted solution', 1), ('accepted solution using dfs', 1), ('ad7one', 1), ('aditya-verma', 1), ('auxiliary buffer', 1), ('backend', 1), ('backrtracking', 1), ('backtracking dfs', 1), ('backward recursion', 1), ('base', 1), ('beating-100-submission', 1), ('beating-90-submissions', 1), ('beats 100', 1), ('best', 1), ('bfs python', 1), ('binary', 1), ('binary-operation', 1), ('bit manipulation', 1), ('bitset', 1), ('bitwise', 1), ('bottom up approach', 1), ('breadth first search', 1), ('breadth-first-search', 1), ('bruteforce', 1), ('c+', 1), ('c++ generate parentheses', 1), ('c++ recursive solution', 1), ('char', 1), ('clean', 1), ('combination', 1), ('comments', 1), ('commetend', 1), ('compile', 1), ('concise', 1), ('cpp-solution', 1), ('dfs-iterative', 1), ('dfs-non-recursive', 1), ('different-oj-local', 1), ('direct-approach', 1), ('discussion', 1), ('divideconquer', 1), ('easiest', 1), ('easy implementation', 1), ('easy to read', 1), ('easy understand', 1), ('easy-solition', 1), ('easysolution', 1), ('easytoundersatand', 1), ('easyunderstand', 1), ('editorial', 1), ('efficient solution', 1), ('es6', 1), ('explanation of logic', 1), ('explanation simple', 1), ('fast and simple', 1), ('faster than 99.66', 1), ('fastest c++ solution', 1), ('forward tracking', 1), ('generate-parentheses', 1), ('give stars if you like', 1), ('golang solution', 1), ('hashmap', 1), ('hedge fund', 1), ('help', 1), ('help me', 1), ('help needed', 1), ('ida', 1), ('index', 1), ('interview-friendly', 1), ('intuition', 1), ('intutive', 1), ('issue', 1), ('iteration', 1), ('iterative way', 1), ('iteratively', 1), ('itereative', 1), ('itertools product', 1), ('keep it simple', 1), ('kotlinvim', 1), ('lambda expression', 1), ('lexicographical order', 1), ('logical', 1), ('loop', 1), ('loops', 1), ('low memory', 1), ('map', 1), ('math', 1), ('memory allocation', 1), ('memory-limit-exceeded', 1), ('memory-search', 1), ('neat', 1), ('nice', 1), ('noob coding', 1), ('one line', 1), ('one-liner', 1), ('oop', 1), ('optimized', 1), ('output-order', 1), ('pair', 1), ('parantheses', 1), ('pattern-matching', 1), ('permutations', 1), ('php', 1), ('pyhton', 1), ('python bfs', 1), ('python deque', 1), ('python2', 1), ('question', 1), ('recursion formula', 1), ('recursion palindrome', 1), ('recursive easy', 1), ('recursive tree', 1), ('recusrive', 1), ('request-for-explanation', 1), ('self explanatory', 1), ('set', 1), ('short code', 1), ('simple python accepted', 1), ('simple-solution', 1), ('simpler', 1), ('simplest', 1), ('solution-sharing', 1), ('solution-sharing-c', 1), ('space-efficient', 1), ('strings', 1), ('subsequences', 1), ('succinct', 1), ('swapping', 1), ('template', 1), ('test-case', 1), ('testcase-wrong', 1), ('the', 1), ('time', 1), ('tree', 1), ('typescript javascript', 1), ('ultra simple', 1), ('understanding', 1), ('updowndota', 1), ('upvote', 1), ('valid-parentheses', 1), ('video explanation', 1), ('video-explanation', 1), ('vs2012', 1), ('well-commented', 1), ('xjq', 1)]"
21,Merge Two Sorted Lists,https://leetcode.com/problems/merge-two-sorted-lists,Merge two sorted linked lists and return it as a sorted list. The list should be made by splicing together the nodes of the first two lists.,"['linked-list', 'recursion']",Easy,6632,765,2480950,1403125,"[""Merge k Sorted Lists"", ""Merge Sorted Array"", ""Sort List"", ""Shortest Word Distance II"", ""Add Two Polynomials Represented as Linked Lists""]","[('java', 147), ('python', 97), ('cpp', 94), ('c++', 88), ('iterative', 74), ('linked-list', 55), ('python 3', 52), ('javascript', 50), ('recursion', 49), ('java-solution', 42), ('python3', 40), ('solution', 31), ('easy-understanding', 30), ('linkedlists', 28), ('golang', 27), ('recursive', 26), ('c', 24), ('cpp solution', 18), ('simple', 18), ('linked list', 16), ('go', 14), ('iteratively', 13), ('swift', 13), ('easy', 11), ('easy-undestand', 11), ('simple solution', 11), ('c#', 10), ('easy-to-understand', 10), ('linkedlist', 10), ('0ms', 9), ('c++ code', 9), ('go-solution', 9), ('golang-solution', 9), ('linear time', 9), ('merge sorted linkedlist', 9), ('csharp', 8), ('easy-understand', 8), ('easytounderstand', 8), ('merge', 8), ('short', 8), ('clean code', 7), ('cpp easy', 7), ('fast', 7), ('rust', 7), ('constant-space', 6), ('error', 6), ('iteration', 6), ('python2', 6), ('accepted', 5), ('fast and simple', 5), ('in-place', 5), ('merge linked list', 5), ('ruby', 5), ('100 speed', 4), ('c code', 4), ('clean', 4), ('fastest', 4), ('linear-time', 4), ('list', 4), ('merge sort', 4), ('merge-sort', 4), ('merge-two-sorted-lists', 4), ('mergetwolists', 4), ('mergetwosortedlists', 4), ('recursively', 4), ('sorting', 4), ('#javascript', 3), ('amazon', 3), ('c programming', 3), ('c++11', 3), ('commented', 3), ('constant space', 3), ('dummy-head', 3), ('explained', 3), ('improve', 3), ('iterative approch', 3), ('iterative way', 3), ('javascrip', 3), ('javascript solution', 3), ('js', 3), ('kotlin', 3), ('linked lists', 3), ('linked-lists', 3), ('merge two lists', 3), ('mergesort', 3), ('sorted', 3), ('sorted list', 3), ('time-complexity', 3), ('time-limit-exceeded', 3), ('wrong-answer', 3), ('#python', 2), ('#python3', 2), ('100 faster', 2), ('answer', 2), ('beginner friendly', 2), ('clean clode', 2), ('cplusplus', 2), ('data structures', 2), ('dummy-node', 2), ('easy to understand', 2), ('faster', 2), ('faster than 100.00', 2), ('fasterthan100', 2), ('iterate', 2), ('iterative solution', 2), ('linear memory', 2), ('linklist', 2), ('listnode', 2), ('lists', 2), ('merge two sorted list', 2), ('merged', 2), ('non-recursive', 2), ('one-pass', 2), ('optimized', 2), ('priority queue', 2), ('question-not-clear', 2), ('readable', 2), ('recurision', 2), ('recursion formula', 2), ('resursive', 2), ('run-time-error', 2), ('scala', 2), ('simple clear c++ solution', 2), ('solution-python', 2), ('sort', 2), ('stl', 2), ('two pointers', 2), ('two-pointers', 2), ('typescript', 2), ('understandable', 2), ('vector', 2), ('while', 2), ('while-loop', 2), ('#codegirl', 1), ('#easy-understanding', 1), ('#easysolution', 1), ('#in place', 1), ('#iterative', 1), ('#linkedlist', 1), ('10 liner', 1), ('100', 1), ('100 faster cpp', 1), ('100 faster runtime', 1), ('2pointers', 1), ('4ms', 1), ('94', 1), ('accepted solution', 1), ('asahiocean', 1), ('basic concept', 1), ('beginner', 1), ('beginners', 1), ('beginners level', 1), ('best', 1), ('best-submission', 1), ('binary-search', 1), ('binary-tree', 1), ('bubble-sort', 1), ('c#-solution', 1), ('c+', 1), ('c++ solution', 1), ('clean code with comments', 1), ('coding', 1), ('commented code', 1), ('comments added', 1), ('comments-added', 1), ('compact', 1), ('compile', 1), ('concise-solution', 1), ('constant-space-iterative', 1), ('copy', 1), ('cpp short solution', 1), ('cpp-functional', 1), ('cpp-solution', 1), ('debug', 1), ('different solutions', 1), ('easiest', 1), ('easy solution', 1), ('easy to read', 1), ('easy to underatnd', 1), ('easy-to-read', 1), ('easy-understsand', 1), ('easysolution', 1), ('efficent approach', 1), ('efficiency', 1), ('efficient', 1), ('efficient approach', 1), ('efficient solution', 1), ('elegant', 1), ('english', 1), ('error message', 1), ('expalanation', 1), ('explanation', 1), ('explanation with code', 1), ('fast-solution', 1), ('faster then 95', 1), ('forwardlist', 1), ('fully commented', 1), ('fully-explained', 1), ('functional-programming', 1), ('github', 1), ('go lang', 1), ('goalng solution', 1), ('golang solution', 1), ('heap', 1), ('heapsort', 1), ('help', 1), ('help me', 1), ('help-wanted', 1), ('idiomatic', 1), ('implementation', 1), ('inplace', 1), ('interviews', 1), ('itereative', 1), ('java ac solution', 1), ('java simple', 1), ('javacript', 1), ('javascriptes6', 1), ('kotlin-solution', 1), ('kotllin', 1), ('leetcode', 1), ('linear complexity', 1), ('linked', 1), ('linked-list-merge', 1), ('linking', 1), ('meiyaowen', 1), ('memory-efficient-solution', 1), ('memory-limit-exceeded', 1), ('merge intervals', 1), ('merge list', 1), ('merge sor', 1), ('merge-k-sorted-lists', 1), ('merge-sorted-array', 1), ('merging', 1), ('microsoft', 1), ('microsoft-india', 1), ('modified-bubble-sort', 1), ('no extra space', 1), ('no recursion', 1), ('no-extra-space', 1), ('no-recursive', 1), ('nodejs', 1), ('non-recursion', 1), ('o-n', 1), ('o1 space', 1), ('on', 1), ('one pass', 1), ('optimised', 1), ('peymannp', 1), ('php', 1), ('pointer-to-pointer', 1), ('portugues', 1), ('problem', 1), ('pure-c', 1), ('pyhon', 1), ('python 2', 1), ('python solution', 1), ('questions', 1), ('rajawatbanna', 1), ('recurrance', 1), ('recursive easy', 1), ('recursive solution', 1), ('recurssion', 1), ('recusion', 1), ('recusive', 1), ('reduce stack use', 1), ('runtime-error', 1), ('short code', 1), ('simple approach', 1), ('simple python solution', 1), ('single', 1), ('single pass', 1), ('singly-linked-list', 1), ('slicing', 1), ('smart', 1), ('solution c++', 1), ('solution-java', 1), ('solution-sharing-cpp', 1), ('sort-function', 1), ('space', 1), ('space-complexity-1', 1), ('splice', 1), ('stack', 1), ('stars move the article up', 1), ('step by step explanation', 1), ('success', 1), ('tail-call', 1), ('test-case', 1), ('testcase-wrong', 1), ('tests', 1), ('time', 1), ('time-limit-exceeded-java', 1), ('tree', 1), ('two', 1), ('two pointer', 1), ('two pointer technique', 1), ('two-star', 1), ('video', 1), ('video-explanation', 1), ('visualization', 1), ('while loop', 1), ('works-on-my-machine', 1), ('wrong', 1), ('yahoo', 1)]"
20,Valid Parentheses,https://leetcode.com/problems/valid-parentheses,"Given a string s containing just the characters '(', ')', '{', '}', '[' and ']', determine if the input string is valid.

An input string is valid if:


	Open brackets must be closed by the same type of brackets.
	Open brackets must be closed in the correct order.","['string', 'stack']",Easy,7356,301,3502806,1402764,"[""Generate Parentheses"", ""Longest Valid Parentheses"", ""Remove Invalid Parentheses"", ""Check If Word Is Valid After Substitutions""]","[('stack', 207), ('java', 170), ('c++', 126), ('stacks', 122), ('python', 119), ('cpp', 116), ('javascript', 82), ('python 3', 80), ('solution', 55), ('python3', 39), ('java-solution', 38), ('golang', 28), ('easy-understanding', 26), ('easy', 25), ('valid-parentheses', 24), ('stack-based', 23), ('cpp solution', 19), ('valid parentheses', 19), ('easy-undestand', 18), ('c#', 17), ('easy-understand', 17), ('hashmap', 17), ('c++ code', 16), ('simple', 16), ('string', 15), ('swift', 15), ('golang-solution', 14), ('0ms', 13), ('go', 13), ('javascript solution', 13), ('c', 12), ('ruby', 12), ('cpp easy', 10), ('hash table', 10), ('linear time', 10), ('map', 10), ('rust', 10), ('simple solution', 10), ('go-solution', 9), ('parentheses', 9), ('explained', 8), ('js', 8), ('accepted', 7), ('dictionary', 7), ('fast', 7), ('short', 7), ('wrong-answer', 7), ('100 speed', 6), ('clean code', 6), ('easy-to-understand', 6), ('easytounderstand', 6), ('fast and simple', 6), ('scala', 6), ('solution-python', 6), ('#stack', 5), ('ascii', 5), ('c++11', 5), ('cpp-solution', 5), ('deque', 5), ('error', 5), ('es6', 5), ('kotlin', 5), ('stl', 5), ('switch-case', 5), ('video-explanation', 5), ('100 faster runtime', 4), ('array', 4), ('dictonary', 4), ('explanation', 4), ('fast-solution', 4), ('improve', 4), ('readable', 4), ('swift5', 4), ('100 faster', 3), ('1ms', 3), ('accepted solution', 3), ('beginner friendly', 3), ('c++ stack', 3), ('clean-efficient-code', 3), ('comments', 3), ('easy understanding', 3), ('faster than 100.00', 3), ('fastest', 3), ('iteration', 3), ('recursion', 3), ('replace', 3), ('runtime-error', 3), ('switch', 3), ('testcase-wrong', 3), ('time-complexity', 3), ('typescript', 3), ('works-on-my-machine', 3), ('#c++', 2), ('#cpp', 2), ('#java', 2), ('#python 3', 2), ('#valid parentheses', 2), ('0 ms', 2), ('0ms-solution', 2), ('100 memory', 2), ('amazon', 2), ('amazon interview', 2), ('balanced-paranthesis', 2), ('bracket pair', 2), ('brackets', 2), ('concise', 2), ('concise-solution', 2), ('constant-space', 2), ('cplusplus', 2), ('cpp doubt', 2), ('csharp', 2), ('easiest', 2), ('easy to understand', 2), ('easy understand', 2), ('efficient', 2), ('efficient solution', 2), ('explain', 2), ('explanation with logic', 2), ('faceebook', 2), ('faster than 98.75', 2), ('for loop', 2), ('functional-programming', 2), ('help needed', 2), ('if-else', 2), ('iterative', 2), ('java ac solution', 2), ('java solution', 2), ('java-8', 2), ('js javascript', 2), ('linear', 2), ('linear time complexity', 2), ('loops', 2), ('memory usage', 2), ('missing-test-case', 2), ('no stack', 2), ('optimal', 2), ('parantheses', 2), ('php', 2), ('pop', 2), ('python2', 2), ('pythonpython3', 2), ('recursive-descent', 2), ('simplest', 2), ('solution by python', 2), ('solution-sharing-cpp', 2), ('space', 2), ('space-complexity', 2), ('stack javascript', 2), ('stack-implementation', 2), ('string-operation', 2), ('test-case', 2), ('valid-parenthesis', 2), ('validate', 2), ('video interview', 2), ('well-commented', 2), ('#easy', 1), ('#easy-understand', 1), ('#facebook', 1), ('#google', 1), ('#java #easy-understand', 1), ('#java-solution', 1), ('#python', 1), ('#recursion', 1), ('#recursive', 1), ('#shortestsolution', 1), ('#stacks', 1), ('#switch', 1), ('1 ms', 1), ('100', 1), ('100 space', 1), ('99', 1), ('99 faster', 1), ('amazon online assesment', 1), ('arrays', 1), ('asiano1conqueror', 1), ('atony', 1), ('backtracking', 1), ('bapofall', 1), ('begineer', 1), ('best', 1), ('bestsolution', 1), ('binary-search', 1), ('binary-tree', 1), ('bitwise', 1), ('bloomberg', 1), ('bool', 1), ('c code', 1), ('c# stack', 1), ('c#-solution', 1), ('c++ iterative sol', 1), ('c++ map', 1), ('c++ solution', 1), ('char compare', 1), ('char comparison', 1), ('character array', 1), ('character compare', 1), ('character comparison', 1), ('clean', 1), ('clean clode', 1), ('clean solution', 1), ('clear-understanding', 1), ('commented', 1), ('commented code', 1), ('comments-added', 1), ('confused', 1), ('constant memory', 1), ('constant space', 1), ('cpp error', 1), ('data structure', 1), ('detailed', 1), ('doubly linked list', 1), ('easy to follow code', 1), ('easy-peasy', 1), ('easy-solition', 1), ('easy-solution', 1), ('easy-to-read', 1), ('easysolution', 1), ('editorial', 1), ('elegant', 1), ('error in question', 1), ('error in solution', 1), ('explanation of logic', 1), ('explanation with code', 1), ('facebook', 1), ('faster', 1), ('faster than 100', 1), ('faster than 97', 1), ('fasterthan100', 1), ('fastest c++ solution', 1), ('flipkart', 1), ('for-each', 1), ('for-loop', 1), ('functional', 1), ('functional programming', 1), ('github', 1), ('go lang', 1), ('golag', 1), ('google onsite', 1), ('grammar', 1), ('hash', 1), ('hashmaps', 1), ('hashtable', 1), ('help', 1), ('help me', 1), ('immutable', 1), ('improvement-needed', 1), ('interview experience', 1), ('intuitive', 1), ('iterator', 1), ('java 8', 1), ('java-9', 1), ('javasccript', 1), ('javascrip', 1), ('javascript-solution', 1), ('javascritp', 1), ('javscript', 1), ('leetcode-issue-only', 1), ('less memory', 1), ('less than 99.97', 1), ('letter of the law', 1), ('linear memory', 1), ('linear-space', 1), ('linear-time', 1), ('linkedlist', 1), ('list', 1), ('magic', 1), ('map in c++', 1), ('mapping', 1), ('matching', 1), ('math', 1), ('minimal', 1), ('minor quibble', 1), ('minstack', 1), ('most efficient solution', 1), ('no-stack', 1), ('node-operation', 1), ('nostack', 1), ('one-liner', 1), ('optimisation', 1), ('overly precise', 1), ('palindrome', 1), ('paraenthesis', 1), ('parser', 1), ('pass', 1), ('performance', 1), ('permutation', 1), ('problem', 1), ('programming', 1), ('pseudocode', 1), ('pyhton', 1), ('python deque', 1), ('python3.8', 1), ('pythonic', 1), ('question', 1), ('queue', 1), ('racket', 1), ('rajawatbanna', 1), ('readability', 1), ('recusion', 1), ('reduce', 1), ('reference', 1), ('regex', 1), ('regular-expression', 1), ('regx', 1), ('reqexp', 1), ('scalable', 1), ('sets', 1), ('short code', 1), ('short solution', 1), ('shorter', 1), ('shortest solution', 1), ('single', 1), ('single-pass', 1), ('solution-cpp', 1), ('solution-javascript', 1), ('solution-sharingjava', 1), ('solutions', 1), ('stack python', 1), ('stackoverflow', 1), ('stackusingqueues', 1), ('stdin', 1), ('straight-forward', 1), ('strings', 1), ('submit-fail', 1), ('tail-recursion', 1), ('tail-recursive', 1), ('tailrec', 1), ('test', 1), ('time', 1), ('trade-off', 1), ('trick', 1), ('unit-test', 1), ('unordermap', 1), ('valid', 1), ('vec', 1), ('vmware', 1), ('well-explained', 1), ('without', 1), ('without stack', 1), ('zea7ot', 1)]"
19,Remove Nth Node From End of List,https://leetcode.com/problems/remove-nth-node-from-end-of-list,"Given the head of a linked list, remove the nth node from the end of the list and return its head.

Follow up: Could you do this in one pass?","['linked-list', 'two-pointers']",Medium,5312,306,2383406,862861,"[""Swapping Nodes in a Linked List"", ""Delete N Nodes After M Nodes of a Linked List""]","[('java', 139), ('c++', 107), ('cpp', 89), ('python', 89), ('one-pass', 55), ('two-pointers', 49), ('java-solution', 47), ('linked-list', 40), ('python 3', 39), ('javascript', 37), ('recursion', 33), ('python3', 30), ('solution', 27), ('one pass solution', 23), ('easy-understanding', 21), ('linked list', 20), ('one pass', 19), ('linkedlists', 18), ('cpp solution', 17), ('c', 15), ('easy', 15), ('0ms', 13), ('simple', 13), ('two pointers', 13), ('linear time', 12), ('recursive', 12), ('easy-to-understand', 11), ('easy-understand', 11), ('c++ code', 10), ('golang', 10), ('accepted', 9), ('c#', 9), ('linkedlist', 9), ('onepass', 9), ('constant-space', 8), ('dummy-head', 8), ('fast-solution', 8), ('go', 8), ('iterative', 8), ('remove nth node', 7), ('two-pointer', 7), ('easy-undestand', 6), ('java ac solution', 6), ('kotlin', 6), ('one-loop', 6), ('single pass', 6), ('100 speed', 5), ('easy to understand', 5), ('explained', 5), ('hashmap', 5), ('ruby', 5), ('run-time-error', 5), ('short', 5), ('stack', 5), ('two pointer', 5), ('wrong-answer', 5), ('clean code', 4), ('commented', 4), ('constant space', 4), ('cpp easy', 4), ('explanation', 4), ('fast and simple', 4), ('golang-solution', 4), ('linked-lists', 4), ('pointer', 4), ('scala', 4), ('simple solution', 4), ('solution-sharing-cpp', 4), ('swift', 4), ('100 space', 3), ('2 pointers', 3), ('delete-node-in-linkedlist', 3), ('fast', 3), ('java solution', 3), ('recusion', 3), ('runner', 3), ('slow fast pointer', 3), ('two pass', 3), ('4ms', 2), ('backtracking', 2), ('beats 100', 2), ('beginner friendly', 2), ('c code', 2), ('c programming', 2), ('c++ solution', 2), ('clear explanation', 2), ('comments-added', 2), ('concise', 2), ('constant memory', 2), ('cpp soltuion', 2), ('csharp', 2), ('delete', 2), ('dummy-node', 2), ('easiest', 2), ('easy sloution', 2), ('easy to read', 2), ('easytounderstand', 2), ('efficiency', 2), ('error', 2), ('explanation of logic', 2), ('explanations', 2), ('fastest', 2), ('go-solution', 2), ('improve', 2), ('javascript solution', 2), ('js', 2), ('linked lists', 2), ('linklist', 2), ('list', 2), ('map', 2), ('optimal', 2), ('python3.8', 2), ('readable', 2), ('recursive solution', 2), ('removenthnode', 2), ('runtime-error', 2), ('rust', 2), ('share-solution', 2), ('simple clear c++ solution', 2), ('simple java solution', 2), ('single-pass', 2), ('straight-forward', 2), ('youtube', 2), ('#fasterthan100percent', 1), ('#go', 1), ('#golang', 1), ('#javascript', 1), ('#linkedlist', 1), ('#onepass', 1), ('1-pass', 1), ('100', 1), ('100 faster', 1), ('100 faster runtime', 1), ('100 memory', 1), ('12ms', 1), ('2 passes', 1), ('2 pointer', 1), ('2-pass', 1), ('2-pointer approach', 1), ('2pointers', 1), ('3 solutions', 1), ('94', 1), ('99 faster', 1), ('99.5 faster', 1), ('99.66', 1), ('accepted 0ms', 1), ('accepted solution', 1), ('algosexplained', 1), ('alternative solution', 1), ('amazon', 1), ('array', 1), ('arraylist', 1), ('arrays', 1), ('awesome samriddhi', 1), ('beating-100-submission', 1), ('beats 95', 1), ('best-solution', 1), ('brute force', 1), ('c++ easy to understand', 1), ('c++ iterative sol', 1), ('c++ recursive solution', 1), ('c++11', 1), ('c++solution', 1), ('c99', 1), ('clean', 1), ('clear solution', 1), ('comments added', 1), ('compiler', 1), ('complexity analysis', 1), ('concept first', 1), ('concise-solution', 1), ('constant-time', 1), ('cool', 1), ('count', 1), ('cpp doubt', 1), ('csh', 1), ('delay', 1), ('description', 1), ('detailed explanation', 1), ('discussion', 1), ('dummyhead', 1), ('easiest solution', 1), ('east to understand', 1), ('easy to undersstand', 1), ('easy understand', 1), ('easy understanding', 1), ('easy undestanding', 1), ('easy-solition', 1), ('easy-understsand', 1), ('easysolution', 1), ('efficient', 1), ('efficient approach', 1), ('efficient solution', 1), ('example', 1), ('explain', 1), ('explained solution', 1), ('explaines', 1), ('explanation with code', 1), ('fast and slow ptrs', 1), ('faster', 1), ('faster than 100', 1), ('faster than 99.4', 1), ('faster than 99.8', 1), ('fewest-line', 1), ('functional-programming', 1), ('github', 1), ('go-solutiong', 1), ('hare and turtle', 1), ('hare-and-turtle', 1), ('help-wanted', 1), ('if-else', 1), ('implementation', 1), ('interview-friendly', 1), ('interviews', 1), ('iterate', 1), ('iteration', 1), ('iterative way', 1), ('iteratve-recursive', 1), ('javascript recursive', 1), ('js javascript', 1), ('keep it simple', 1), ('kotlinvim', 1), ('least', 1), ('leetcode-playground', 1), ('less space than 100.00', 1), ('linear-complexity', 1), ('linear-time', 1), ('link', 1), ('listnode', 1), ('lists', 1), ('medium', 1), ('memory', 1), ('memory efficient', 1), ('memory optimized', 1), ('mrmagician', 1), ('naive solution', 1), ('neat', 1), ('no-memory-leaks', 1), ('non-copy-paste', 1), ('notes', 1), ('optimisation', 1), ('performance', 1), ('php', 1), ('php solution', 1), ('pointer of pointer', 1), ('pointers', 1), ('python super fast sol', 1), ('python2', 1), ('question', 1), ('question need help', 1), ('real-one-pass', 1), ('recurision', 1), ('recursive approach', 1), ('remove element', 1), ('remove-element', 1), ('remove-nth-node-from-end-of-li', 1), ('ritik', 1), ('safe', 1), ('sentinel', 1), ('sentinel-node', 1), ('shared-answer', 1), ('short code', 1), ('simpe', 1), ('simple approach', 1), ('simplesolution', 1), ('simpleunderstanding', 1), ('single pointer', 1), ('slow and fast pointers', 1), ('solution c++', 1), ('solution-cpp', 1), ('solution-explaining', 1), ('solution-java', 1), ('solution-python', 1), ('solved', 1), ('space', 1), ('space-efficient', 1), ('speed', 1), ('stacks', 1), ('stars move the article up', 1), ('step by step explanation', 1), ('stl', 1), ('swift5', 1), ('tail-recursion', 1), ('tailrec', 1), ('test case issue', 1), ('testcase-wrong', 1), ('time', 1), ('time-complexity', 1), ('tortoise and hare', 1), ('tortoise-hare', 1), ('two pointer approach', 1), ('two-pointer method', 1), ('two-star', 1), ('twopointer', 1), ('typescript', 1), ('understandable', 1), ('upvote', 1), ('video', 1), ('video solution', 1), ('window slide', 1), ('with explanation', 1), ('with-explanation', 1), ('works-on-my-machine', 1), ('you can actually read it', 1)]"
18,4Sum,https://leetcode.com/problems/4sum,"Given an array nums of n integers, return an array of all the unique quadruplets [nums[a], nums[b], nums[c], nums[d]] such that:


	0 <= a, b, c, d < n
	a, b, c, and d are distinct.
	nums[a] + nums[b] + nums[c] + nums[d] == target


You may return the answer in any order.","['array', 'hash-table', 'two-pointers']",Medium,3233,409,1163714,409792,"[""Two Sum"", ""3Sum"", ""4Sum II""]","[('java', 53), ('cpp', 38), ('python', 35), ('c++', 27), ('4sum', 25), ('two-pointers', 22), ('solution', 20), ('python 3', 16), ('python3', 16), ('javascript', 15), ('easy-understand', 14), ('easy-understanding', 11), ('time-limit-exceeded', 10), ('easy-undestand', 8), ('3sum', 6), ('java-solution', 6), ('ksum', 6), ('time-complexity', 6), ('c#', 5), ('golang', 5), ('hashmap', 5), ('javascript solution', 5), ('simple', 5), ('2sum', 4), ('backtracking', 4), ('best-submission', 4), ('easy-to-understand', 4), ('explanation', 4), ('improve', 4), ('set', 4), ('binary search', 3), ('binary-search', 3), ('cpp easy', 3), ('cpp solution', 3), ('fast', 3), ('four-sum', 3), ('hashing', 3), ('kotlin', 3), ('output-limit-exceeded', 3), ('pointer', 3), ('2pointers', 2), ('c++ code', 2), ('commented', 2), ('compile-error', 2), ('dictionary', 2), ('different-oj-local', 2), ('easy', 2), ('easytounderstand', 2), ('error', 2), ('fast-solution', 2), ('go-solution', 2), ('golang-solution', 2), ('hashtable', 2), ('iterative', 2), ('itereative', 2), ('java ac solution', 2), ('javascript recursive', 2), ('k-sum', 2), ('lower bound', 2), ('n-sum', 2), ('nsum', 2), ('proof', 2), ('pruning', 2), ('python2', 2), ('recursive', 2), ('sets', 2), ('simple clear c++ solution', 2), ('simple solution', 2), ('solution-python', 2), ('sort', 2), ('sorting', 2), ('swift', 2), ('testcase-wrong', 2), ('two pointer technique', 2), ('two pointers', 2), ('two sum', 2), ('two-pointer', 2), ('twopointer', 2), ('twosum', 2), ('well-commented', 2), ('wrong-answer', 2), ('#java', 1), ('2 pointer approach', 1), ('2 pointers', 1), ('2pointer', 1), ('3-sum', 1), ('4-sum', 1), ('4sum ii', 1), ('accepted', 1), ('akku', 1), ('amazon', 1), ('analysis', 1), ('binarysearch', 1), ('bruteforce', 1), ('c', 1), ('c++ cpp', 1), ('c++ easy to understand', 1), ('clarification', 1), ('clean code', 1), ('combination', 1), ('comments', 1), ('comments-added', 1), ('concise', 1), ('constant space', 1), ('constant-space', 1), ('csharp', 1), ('design', 1), ('detailed explanation', 1), ('dfs', 1), ('divide and conquer', 1), ('double-pointers', 1), ('dp', 1), ('dynamic-programming', 1), ('easy understanding', 1), ('easy-code', 1), ('efficient solution', 1), ('esay-uderstand', 1), ('explained solution', 1), ('fast and simple', 1), ('fastest', 1), ('foursome', 1), ('general', 1), ('go', 1), ('google', 1), ('hashset', 1), ('intuitive', 1), ('iteratve-recursive', 1), ('leetcode', 1), ('leetcode-issue-only', 1), ('leetcode-library', 1), ('less momery', 1), ('linq', 1), ('lists', 1), ('lower-bound', 1), ('map-stl', 1), ('math', 1), ('meet-in-the-middle', 1), ('no recursion', 1), ('on2logn', 1), ('one-liner', 1), ('optimized', 1), ('pass', 1), ('php', 1), ('php solution', 1), ('pointers', 1), ('python3.8', 1), ('quicksort', 1), ('readable', 1), ('reno', 1), ('ruby', 1), ('runtime-error', 1), ('rust', 1), ('self-explanatory', 1), ('simple for loop', 1), ('simple-solution', 1), ('simpler', 1), ('sliding', 1), ('solution-cpp', 1), ('sorted array', 1), ('stl vector', 1), ('straight-forward', 1), ('subset sum', 1), ('super', 1), ('test-case', 1), ('time-limit-exceeded-java', 1), ('tle', 1), ('two pointer', 1), ('twosums', 1), ('unorderedmap', 1), ('video-explanation', 1), ('web', 1), ('works-on-my-machine', 1), ('xjq', 1)]"
17,Letter Combinations of a Phone Number,https://leetcode.com/problems/letter-combinations-of-a-phone-number,"Given a string containing digits from 2-9 inclusive, return all possible letter combinations that the number could represent. Return the answer in any order.

A mapping of digit to letters (just like on the telephone buttons) is given below. Note that 1 does not map to any letters.","['string', 'backtracking', 'depth-first-search', 'recursion']",Medium,5944,524,1656117,828843,"[""Generate Parentheses"", ""Combination Sum"", ""Binary Watch""]","[('backtracking', 160), ('java', 147), ('python', 146), ('recursion', 119), ('c++', 110), ('cpp', 91), ('python 3', 74), ('javascript', 64), ('dfs', 59), ('python3', 49), ('recursive', 35), ('iterative', 31), ('solution', 29), ('bfs', 22), ('easy-understanding', 22), ('simple', 22), ('c#', 21), ('golang', 21), ('easy-understand', 17), ('java-solution', 17), ('go', 16), ('easy', 15), ('hashmap', 14), ('simple solution', 14), ('easy-to-understand', 12), ('golang-solution', 12), ('swift', 12), ('queue', 11), ('c', 10), ('cpp solution', 10), ('easy-undestand', 10), ('backtrack', 9), ('string', 9), ('back tracking', 8), ('c++ code', 8), ('dfs simple solution', 8), ('fast', 8), ('map', 8), ('recurision', 8), ('clean code', 7), ('itertools', 7), ('recusion', 7), ('csharp', 6), ('easytounderstand', 6), ('fastest', 6), ('go-solution', 6), ('memoization', 6), ('recursively', 6), ('ruby', 6), ('scala', 6), ('0ms', 5), ('comments', 5), ('deque', 5), ('explained', 5), ('fast and simple', 5), ('improve', 5), ('iteration', 5), ('javascript recursive', 5), ('kotlin', 5), ('short', 5), ('dynamic programming', 4), ('iteratively', 4), ('itertools product', 4), ('javascript solution', 4), ('js', 4), ('python2', 4), ('recursive solution', 4), ('solution-python', 4), ('stringbuilder', 4), ('#recursive', 3), ('100 speed', 3), ('accepted', 3), ('array', 3), ('backtacking', 3), ('commented', 3), ('cpp easy', 3), ('letter-combination-phone-numbe', 3), ('list', 3), ('list comprehension', 3), ('recursive easy', 3), ('simple clear c++ solution', 3), ('straightforward', 3), ('vector', 3), ('video-explanation', 3), ('#backtracking', 2), ('#iterative', 2), ('1ms', 2), ('backtracing', 2), ('beats-100', 2), ('brute force', 2), ('c++ iterative sol', 2), ('c++ solution', 2), ('c++11', 2), ('c++14', 2), ('combination', 2), ('combinations', 2), ('data structures', 2), ('depth first search', 2), ('depth-first-search', 2), ('dictionary', 2), ('divide and conquer', 2), ('efficient', 2), ('error', 2), ('faster than 100.00', 2), ('flatmap', 2), ('for loop', 2), ('generator', 2), ('golang solution', 2), ('hash table', 2), ('iterative way', 2), ('lettercombinations', 2), ('linq', 2), ('list-comprehension', 2), ('memory optimized', 2), ('performance', 2), ('permutation', 2), ('php', 2), ('product', 2), ('pythonic', 2), ('recusrive', 2), ('reduce', 2), ('rust', 2), ('stack', 2), ('straight-forward', 2), ('typescript', 2), ('works-on-my-machine', 2), ('wrong-answer', 2), ('#bfs', 1), ('#c++', 1), ('#cpp', 1), ('#dfs', 1), ('#easy-understand', 1), ('#fast', 1), ('#fasterthan100percent', 1), ('#go', 1), ('#golang', 1), ('#java', 1), ('#javascript', 1), ('#python3', 1), ('#ruby', 1), ('100 faster', 1), ('100 faster cpp', 1), ('amazon sde 1', 1), ('arraylist', 1), ('atony', 1), ('back-tracking', 1), ('backrtracking', 1), ('backtrace', 1), ('backtracking dfs', 1), ('backtracking template', 1), ('backward recursion', 1), ('basic', 1), ('beats 100', 1), ('beginner friendly', 1), ('best-submission', 1), ('bottom-up-algorithm', 1), ('breath first search', 1), ('brute-force', 1), ('bug', 1), ('build', 1), ('builtin', 1), ('c+', 1), ('c++ recursion', 1), ('c++17', 1), ('cartesian-product', 1), ('clean', 1), ('clean-code', 1), ('clean-efficient-code', 1), ('cleanest', 1), ('clear', 1), ('code for beginners', 1), ('code with explanation', 1), ('codingtuting', 1), ('combinatorics', 1), ('combinators', 1), ('comments added', 1), ('comments-added', 1), ('compile-error', 1), ('concise', 1), ('concise-solution', 1), ('debug', 1), ('detailed', 1), ('dfs recursive', 1), ('dfs solution', 1), ('dfs-bfs', 1), ('dfs-recursive', 1), ('dictionary c#', 1), ('dictonary', 1), ('division', 1), ('dp', 1), ('dynamic-programming', 1), ('easiest', 1), ('easy to undersstand', 1), ('easy to understand', 1), ('easy understand', 1), ('easy understanding', 1), ('easy-solition', 1), ('easysolution', 1), ('edge-case', 1), ('efficient solution', 1), ('es6', 1), ('explanation', 1), ('explanation of logic', 1), ('facebook', 1), ('fast than 100', 1), ('fast-solution', 1), ('faster', 1), ('faster than 100', 1), ('faster than 50', 1), ('faster than 95.46', 1), ('fastest c solution', 1), ('fastest python solution', 1), ('feedback', 1), ('for-loop', 1), ('fp', 1), ('frequent', 1), ('fun', 1), ('functional', 1), ('functional-programming', 1), ('functions', 1), ('functools', 1), ('greedy', 1), ('hash', 1), ('hash map', 1), ('help', 1), ('help needed', 1), ('implementation', 1), ('interesting', 1), ('interview help', 1), ('intuitive', 1), ('intutive', 1), ('iterate', 1), ('iterative approch', 1), ('iterative-solution', 1), ('iterator', 1), ('iteratve', 1), ('java 8', 1), ('java-8', 1), ('javascript backtrack', 1), ('javscript', 1), ('jigneshpanchal', 1), ('js javascript', 1), ('keep it simple', 1), ('kotlinvim', 1), ('kotllin', 1), ('lazy', 1), ('lettercombophonenumber', 1), ('linked-list', 1), ('lodash', 1), ('loop', 1), ('loops', 1), ('map-reduce', 1), ('map-stl', 1), ('maps', 1), ('microsoft', 1), ('mining', 1), ('mrmagician', 1), ('mutable', 1), ('n-queens', 1), ('naive solution', 1), ('non-iterative', 1), ('non-recursion', 1), ('nonrecursive', 1), ('norecursion', 1), ('numeral system', 1), ('one-liner', 1), ('oneline', 1), ('opnion', 1), ('optimisation', 1), ('optimised', 1), ('pattern', 1), ('permutations', 1), ('precise', 1), ('preorder traversal', 1), ('python-3', 1), ('python3.8', 1), ('pythonpython3', 1), ('recurioon', 1), ('recursion-tree', 1), ('recursive lines clean', 1), ('recursive-descent', 1), ('rescursion', 1), ('run-time-error', 1), ('sasuke214', 1), ('self explanatory', 1), ('self-explanatory', 1), ('short code', 1), ('shorter', 1), ('shortestdistancecharacter', 1), ('simple approach', 1), ('simple python accepted', 1), ('slim-shady', 1), ('solition-sharing', 1), ('solution-sharing-cpp', 1), ('solution-sharing-python', 1), ('stacks', 1), ('string manipulation', 1), ('string parsing', 1), ('strings', 1), ('subsets', 1), ('substring', 1), ('sweetandsour', 1), ('tail-recursive', 1), ('tailrec', 1), ('telephone number combins', 1), ('test-case', 1), ('testcase-wrong', 1), ('time complexity', 1), ('top', 1), ('top-down', 1), ('trie', 1), ('two-lines', 1), ('ultra simple', 1), ('upvote', 1), ('video', 1), ('video solution', 1), ('whiteboard', 1), ('working-solution', 1), ('wrong answer', 1), ('wrong output', 1), ('yield', 1), ('yield return', 1), ('zea7ot', 1)]"
16,3Sum Closest,https://leetcode.com/problems/3sum-closest,"Given an array nums of n integers and an integer target, find three integers in nums such that the sum is closest to target. Return the sum of the three integers. You may assume that each input would have exactly one solution.","['array', 'two-pointers']",Medium,3191,172,1247729,578433,"[""3Sum"", ""3Sum Smaller""]","[('java', 46), ('two-pointers', 37), ('c++', 32), ('cpp', 30), ('python', 29), ('javascript', 19), ('solution', 15), ('java-solution', 12), ('python 3', 12), ('easy-understand', 11), ('python3', 10), ('easy-understanding', 8), ('golang', 8), ('wrong-answer', 8), ('two pointer technique', 6), ('cpp solution', 5), ('go', 5), ('go-solution', 5), ('golang-solution', 5), ('time-complexity', 5), ('time-limit-exceeded', 5), ('3sumclosest', 4), ('array', 4), ('c#', 4), ('c++ code', 4), ('easy-undestand', 4), ('kotlin', 4), ('test-case', 4), ('two pointers', 4), ('two-pointer', 4), ('binary-search', 3), ('closest3sum', 3), ('pointer', 3), ('short', 3), ('simple solution', 3), ('swift', 3), ('twopointer', 3), ('2pointers', 2), ('3sum', 2), ('arrays', 2), ('commented', 2), ('dp', 2), ('dynamic programming', 2), ('easy', 2), ('esay-understand', 2), ('explaination', 2), ('explained solution', 2), ('fast', 2), ('fast-solution', 2), ('fastest', 2), ('java ac solution', 2), ('javascript solution', 2), ('memoization', 2), ('php', 2), ('question', 2), ('simple', 2), ('sorting', 2), ('sortingplus2pointer', 2), ('three pointers', 2), ('three-sum', 2), ('two', 2), ('works-on-my-machine', 2), ('2 pointers', 1), ('2pointer', 1), ('3sum closest', 1), ('3sumclosestc++', 1), ('90+faster', 1), ('9ms', 1), ('accepted', 1), ('algorithm', 1), ('amazon', 1), ('array-sort', 1), ('asahiocean', 1), ('ask', 1), ('beat 97', 1), ('beating-90-submissions', 1), ('brute force', 1), ('c', 1), ('c-3sum', 1), ('c++ iterative sol', 1), ('c++ solution', 1), ('c++11', 1), ('clean code', 1), ('clear', 1), ('closest', 1), ('commented code', 1), ('comments', 1), ('constant-space', 1), ('cpp c++', 1), ('cpp easy', 1), ('csharp', 1), ('easy undestanding', 1), ('easy-to-understand', 1), ('easytounderstand', 1), ('explained', 1), ('explanation', 1), ('explanation of logic', 1), ('facebook', 1), ('faster than 99.4', 1), ('fuck noobs', 1), ('general solution', 1), ('hashtable', 1), ('improve', 1), ('intuition', 1), ('intutive', 1), ('iterative', 1), ('java solution', 1), ('kotlinvim', 1), ('lte', 1), ('microsoft', 1), ('missing-test-case', 1), ('needimprovement', 1), ('optimal', 1), ('php solution', 1), ('raviinroorkee', 1), ('readable', 1), ('recursive', 1), ('recusion', 1), ('rust', 1), ('saravana', 1), ('selfexplained', 1), ('sliding', 1), ('solution c++', 1), ('solution-javascript', 1), ('solution-python', 1), ('solution-sharing-cpp', 1), ('sort', 1), ('sort-function', 1), ('sorted', 1), ('speed', 1), ('three-pointers', 1), ('tle', 1), ('tow-pointers', 1), ('two pointer approach', 1), ('ultra easy', 1), ('vector', 1), ('why look so bad', 1), ('xjq', 1)]"
15,3Sum,https://leetcode.com/problems/3sum,"Given an integer array nums, return all the triplets [nums[i], nums[j], nums[k]] such that i != j, i != k, and j != k, and nums[i] + nums[j] + nums[k] == 0.

Notice that the solution set must not contain duplicate triplets.","['array', 'two-pointers']",Medium,10314,1061,4504601,1277901,"[""Two Sum"", ""3Sum Closest"", ""4Sum"", ""3Sum Smaller""]","[('python', 109), ('java', 102), ('two-pointers', 63), ('3sum', 59), ('python 3', 59), ('c++', 53), ('cpp', 51), ('time-limit-exceeded', 42), ('javascript', 40), ('solution', 32), ('python3', 25), ('java-solution', 21), ('easy-understanding', 16), ('easy-understand', 12), ('hashmap', 12), ('output-limit-exceeded', 12), ('easy-undestand', 11), ('time-complexity', 11), ('explained', 10), ('swift', 9), ('three-sum', 9), ('simple', 8), ('tle', 8), ('two pointers', 8), ('c#', 7), ('c++ code', 7), ('easy', 7), ('golang', 7), ('hash table', 7), ('set', 7), ('sorting', 7), ('constant space', 6), ('cpp solution', 6), ('pointer', 6), ('two-pointer', 6), ('2pointers', 5), ('3-sum', 5), ('c', 5), ('dictionary', 5), ('easy-to-understand', 5), ('hashset', 5), ('kotlin', 5), ('sets', 5), ('sort', 5), ('time limit exceeded', 5), ('time-limit-exceeded-java', 5), ('using 3 pointers', 5), ('#3sum', 4), ('2sum', 4), ('binary search', 4), ('binary-search', 4), ('comments', 4), ('csharp', 4), ('easytounderstand', 4), ('golang-solution', 4), ('javascrip', 4), ('two-sum', 4), ('twopointer', 4), ('twosum', 4), ('wrong-answer', 4), ('error', 3), ('explaination', 3), ('fast', 3), ('fast and simple', 3), ('help me', 3), ('python2', 3), ('test-case', 3), ('two pointer technique', 3), ('#time-limit-exceeded', 2), ('#timelimitexceeded', 2), ('2 pointer', 2), ('2 pointers', 2), ('accepted', 2), ('amazon', 2), ('array', 2), ('binarysearch', 2), ('c++17', 2), ('cache', 2), ('commented', 2), ('comments-added', 2), ('dp', 2), ('explanation of logic', 2), ('facebook', 2), ('fast-solution', 2), ('go', 2), ('improve', 2), ('java ac solution', 2), ('java lists', 2), ('java sets', 2), ('javascript solution', 2), ('js', 2), ('problem', 2), ('question', 2), ('readable', 2), ('recursion', 2), ('runtime', 2), ('rust', 2), ('scala', 2), ('short', 2), ('simple clear c++ solution', 2), ('simple solution', 2), ('solution-sharing-python', 2), ('two pointer', 2), ('video', 2), ('video-explanation', 2), ('works-on-my-machine', 2), ('#array', 1), ('#problem #c solution #bug', 1), ('#twopointerapproach', 1), ('15', 1), ('2 pointer approach', 1), ('3 pointer', 1), ('3sumclosest', 1), ('59ms', 1), ('acceptd', 1), ('accepted solution', 1), ('airbnb', 1), ('algorithm', 1), ('array-sort', 1), ('asahiocean', 1), ('backtracking', 1), ('beginner friendly', 1), ('best-submission', 1), ('bfs', 1), ('brute force', 1), ('brute force to optimal', 1), ('brute-force', 1), ('bruteforce', 1), ('bug', 1), ('c#-solution', 1), ('c++ hash', 1), ('c++ iterative sol', 1), ('c++ solution', 1), ('c++14', 1), ('cannot run', 1), ('clean', 1), ('clean code', 1), ('clean-code', 1), ('clear solution', 1), ('clear-understanding', 1), ('collections', 1), ('commentary', 1), ('confusion', 1), ('constant-space', 1), ('cplusplus', 1), ('cpp doubt', 1), ('cpp easy', 1), ('cpp-solution', 1), ('csh', 1), ('defaultdict', 1), ('detailed explanation', 1), ('detailed-explanation', 1), ('dict', 1), ('double-pointers', 1), ('doubts', 1), ('dynamic programming', 1), ('easy to read', 1), ('easy to undersstand', 1), ('easy to understand', 1), ('easy understanding', 1), ('easy-solition', 1), ('efficient', 1), ('efficient solution', 1), ('exceeded', 1), ('explain', 1), ('explained solution', 1), ('explanation', 1), ('explanations', 1), ('explication', 1), ('faster', 1), ('faster than 95.46', 1), ('flag', 1), ('for-loop', 1), ('function', 1), ('generator', 1), ('generic-solution', 1), ('give stars if you like', 1), ('go-solution', 1), ('golag', 1), ('google', 1), ('help-wanted', 1), ('implementation', 1), ('interview experience', 1), ('interview-tips', 1), ('intuition based solution', 1), ('intuitive', 1), ('iteration', 1), ('iterative', 1), ('itertools', 1), ('izaac', 1), ('javasccript', 1), ('javascriptes6', 1), ('js javascript', 1), ('kotlinvim', 1), ('latest', 1), ('limit', 1), ('limit-exceeded', 1), ('linkedin', 1), ('loop', 1), ('lte', 1), ('map', 1), ('meiyaowen', 1), ('memoization', 1), ('memory limit', 1), ('memory optimized', 1), ('most-efficient', 1), ('mrmagician', 1), ('multiple solutions', 1), ('n2', 1), ('needhelp', 1), ('no-sort', 1), ('nohashmap', 1), ('nosort', 1), ('o-n2', 1), ('off-topic', 1), ('optimal', 1), ('optimization', 1), ('oracle', 1), ('output', 1), ('output limit exceeded', 1), ('overflow', 1), ('problem15', 1), ('put', 1), ('python 2', 1), ('python3.8', 1), ('quadratic', 1), ('quick sort', 1), ('recursive', 1), ('reduction', 1), ('return-value', 1), ('ruby', 1), ('run time error', 1), ('run-time-error', 1), ('runtime error', 1), ('runtime-error', 1), ('saravana', 1), ('selfexplained', 1), ('sliding-window', 1), ('solution-csharp', 1), ('solution-python', 1), ('solution-sharing-cpp', 1), ('sort-function', 1), ('stl', 1), ('sum', 1), ('swift5', 1), ('test-case-bug', 1), ('testcase-wrong-and-not', 1), ('testcases', 1), ('three pointers', 1), ('time complexity', 1), ('time-complexity-o', 1), ('time-limit-exceeded-py', 1), ('time-optimized', 1), ('timeout', 1), ('top questions', 1), ('tuple', 1), ('two pointer approach', 1), ('typescript', 1), ('unordered map', 1), ('unorderedset', 1), ('unordermap', 1), ('upvote', 1), ('vector', 1), ('vedantu', 1), ('video explaination', 1), ('video solution', 1), ('well-commented', 1), ('werfree', 1), ('without set', 1), ('without sort', 1), ('wrong output', 1), ('wrong-test-cases', 1)]"
14,Longest Common Prefix,https://leetcode.com/problems/longest-common-prefix,"Write a function to find the longest common prefix string amongst an array of strings.

If there is no common prefix, return an empty string """".",['string'],Easy,4075,2225,2788708,1012205,[],"[('java', 129), ('python', 124), ('c++', 75), ('python 3', 72), ('cpp', 71), ('javascript', 52), ('solution', 48), ('java-solution', 40), ('python3', 39), ('easy-understanding', 34), ('string', 25), ('longest common prefix', 23), ('trie', 21), ('golang', 18), ('c#', 16), ('simple', 16), ('easy', 15), ('longest-common-prefix', 15), ('easy-to-understand', 12), ('rust', 12), ('easy-understand', 11), ('easy-undestand', 11), ('swift', 11), ('accepted', 10), ('c', 10), ('cpp solution', 10), ('go', 10), ('golang-solution', 10), ('zip', 10), ('simple solution', 9), ('c++ code', 8), ('sorting', 8), ('fast', 7), ('short', 7), ('binary-search', 6), ('go-solution', 6), ('python2', 6), ('vertical-scan', 6), ('0ms', 5), ('cpp easy', 5), ('divideconquer', 5), ('fast and simple', 5), ('string-operation', 5), ('time-complexity', 5), ('tries', 5), ('wrong-answer', 5), ('algorithms', 4), ('c++ solution', 4), ('cpp-solution', 4), ('divide and conquer', 4), ('go lang', 4), ('javascript solution', 4), ('kotlin', 4), ('prefix', 4), ('readable', 4), ('recursion', 4), ('ruby', 4), ('strings', 4), ('substring', 4), ('#python', 3), ('#python 3', 3), ('100 speed', 3), ('c code', 3), ('csharp', 3), ('easiest', 3), ('functional programming', 3), ('linear-time', 3), ('optimal', 3), ('php', 3), ('reduce', 3), ('run-time-error', 3), ('runtime-error', 3), ('set', 3), ('simple java solution', 3), ('sort', 3), ('trie-tree', 3), ('#easy-understanding', 2), ('0ms runtime', 2), ('100 faster', 2), ('1ms', 2), ('algorithm', 2), ('answer', 2), ('arrays', 2), ('brute force', 2), ('brute-force', 2), ('c++11', 2), ('clean code', 2), ('commented', 2), ('comments', 2), ('concise-solution', 2), ('easy to understand', 2), ('easy-peasy', 2), ('easy-solition', 2), ('easytounderstand', 2), ('efficient', 2), ('explained', 2), ('fast-solution', 2), ('fastest', 2), ('helper function', 2), ('hindi', 2), ('improve', 2), ('index', 2), ('intutive', 2), ('iteration', 2), ('iterative', 2), ('linq', 2), ('longestcommonprefix', 2), ('loop', 2), ('one-liner', 2), ('python3.8', 2), ('pythonpython3', 2), ('recursive', 2), ('scala', 2), ('sets', 2), ('simpler', 2), ('solution-python', 2), ('straightforward', 2), ('string-searching', 2), ('testcase-wrong', 2), ('time-complexity-o', 2), ('vector', 2), ('vertical scaning', 2), ('video-explanation', 2), ('#codeboy', 1), ('#easysolution', 1), ('#explained', 1), ('#hashmap', 1), ('#java', 1), ('#javascript', 1), ('#python3', 1), ('#pythonic', 1), ('#trie', 1), ('14. longest common prefix', 1), ('1ms runtime', 1), ('2 solutions', 1), ('2ms', 1), ('3ms', 1), ('99 memory', 1), ('aba', 1), ('abab', 1), ('algorithm-explained', 1), ('array', 1), ('arraylist', 1), ('asahiocean', 1), ('average', 1), ('beginner friendly', 1), ('beginners level', 1), ('bfs', 1), ('binary search', 1), ('binarysearch', 1), ('c programming', 1), ('c# solution', 1), ('c++14', 1), ('c++17', 1), ('char', 1), ('clean', 1), ('clean-code', 1), ('commentary', 1), ('comments added', 1), ('common prefix', 1), ('constant-space', 1), ('cpp doubt', 1), ('data structures', 1), ('data-structure', 1), ('defaultdict', 1), ('divide-and-conquer', 1), ('divide-conquer', 1), ('dividedconquer', 1), ('easy code', 1), ('easy java solution', 1), ('easy python', 1), ('easy-to-read', 1), ('easy-understsand', 1), ('easysolution', 1), ('efficiency', 1), ('enjoy', 1), ('esay-understand', 1), ('expel', 1), ('explaination', 1), ('explanation', 1), ('explanation of logic', 1), ('explanation with code', 1), ('explanation with logic', 1), ('faster than 100.00', 1), ('faster than 95.46', 1), ('faster then 95', 1), ('fasterthan100', 1), ('find', 1), ('for-loop', 1), ('functional', 1), ('functions', 1), ('go-lang', 1), ('go-solutiong', 1), ('golang solution', 1), ('goldman-sachs', 1), ('google', 1), ('heap-buffer-overflow', 1), ('help needed', 1), ('horizontal-scan', 1), ('indexoutofbound', 1), ('india', 1), ('intiution', 1), ('intuition based solution', 1), ('issue', 1), ('iteratively', 1), ('itertools', 1), ('java simple', 1), ('java solution', 1), ('javascipt', 1), ('javascrip', 1), ('join', 1), ('js', 1), ('js javascript', 1), ('kotlinvim', 1), ('label loop', 1), ('lcm', 1), ('lcp', 1), ('lcp-array', 1), ('less than 96.46', 1), ('linear', 1), ('linear search', 1), ('linear time', 1), ('logical', 1), ('longest', 1), ('longest common substring', 1), ('longest prefix', 1), ('longest-co', 1), ('map-stl', 1), ('min length', 1), ('naive approach', 1), ('no lambda function', 1), ('null', 1), ('one line', 1), ('oneliner', 1), ('optimized', 1), ('output', 1), ('python3.9', 1), ('pythonic', 1), ('rajawatbanna', 1), ('recursive easy', 1), ('recursive solution', 1), ('recursively', 1), ('roman to integer', 1), ('rune-time-error', 1), ('runtime error', 1), ('scanning', 1), ('self-explanatory', 1), ('short code', 1), ('shortest', 1), ('shortest solution', 1), ('simpe', 1), ('simple and elegant', 1), ('simple c# solution', 1), ('simple clear c++ solution', 1), ('simple python accepted', 1), ('simple python solution', 1), ('simple-solution', 1), ('simplest', 1), ('slow', 1), ('solution by python', 1), ('solution-sharing-cpp', 1), ('solution-sharing-python', 1), ('sorted', 1), ('space', 1), ('space-complexity', 1), ('startswith', 1), ('stl', 1), ('streams', 1), ('string parsing', 1), ('string-slicing', 1), ('stringbuilder in java', 1), ('substr', 1), ('substrings', 1), ('swift5', 1), ('swiftsolution', 1), ('ternary-search', 1), ('thoughts', 1), ('trie-dfs', 1), ('two-methods', 1), ('ultra simple', 1), ('understandable', 1), ('unit-test', 1), ('vertical', 1), ('vertical scanning', 1), ('very easy to understand', 1), ('wooni', 1), ('works-on-my-machine', 1), ('xjq', 1), ('zea7ot', 1)]"
13,Roman to Integer,https://leetcode.com/problems/roman-to-integer,"Roman numerals are represented by seven different symbols: I, V, X, L, C, D and M.


Symbol       Value
I             1
V             5
X             10
L             50
C             100
D             500
M             1000

For example, 2 is written as II in Roman numeral, just two one's added together. 12 is written as XII, which is simply X + II. The number 27 is written as XXVII, which is XX + V + II.

Roman numerals are usually written largest to smallest from left to right. However, the numeral for four is not IIII. Instead, the number four is written as IV. Because the one is before the five we subtract it making four. The same principle applies to the number nine, which is written as IX. There are six instances where subtraction is used:


	I can be placed before V (5) and X (10) to make 4 and 9. 
	X can be placed before L (50) and C (100) to make 40 and 90. 
	C can be placed before D (500) and M (1000) to make 400 and 900.


Given a roman numeral, convert it to an integer.","['math', 'string']",Easy,503,47,1694868,967581,"[""Integer to Roman""]","[('java', 139), ('python', 119), ('c++', 87), ('python 3', 85), ('javascript', 82), ('cpp', 54), ('simple', 44), ('python3', 43), ('solution', 43), ('roman to integer', 35), ('romantointeger', 34), ('java-solution', 33), ('easy-understanding', 31), ('hashmap', 28), ('c#', 27), ('easy', 24), ('c', 23), ('easy-understand', 22), ('simple solution', 22), ('cpp solution', 21), ('golang', 21), ('swift', 16), ('easy-undestand', 12), ('golang-solution', 12), ('romantoint', 12), ('rust', 12), ('cpp easy', 10), ('dictionary', 10), ('map', 10), ('roman-integer', 10), ('ruby', 10), ('improve', 9), ('string', 9), ('easy-to-understand', 8), ('fast', 8), ('go', 8), ('javascript solution', 8), ('kotlin', 8), ('switch-case', 8), ('accepted', 7), ('c++ code', 7), ('fast-solution', 7), ('iterative', 7), ('brute force', 6), ('clean', 6), ('fast and simple', 6), ('if-else', 6), ('recursion', 6), ('scala', 6), ('typescript', 6), ('easytounderstand', 5), ('js', 5), ('roman', 5), ('short', 5), ('0ms', 4), ('c code', 4), ('clean code', 4), ('csharp', 4), ('dictonary', 4), ('easiest', 4), ('math', 4), ('pythonpython3', 4), ('solution-sharing-cpp', 4), ('unordered map', 4), ('#python', 3), ('100', 3), ('100 speed', 3), ('array', 3), ('c++ solution', 3), ('concise', 3), ('cpp clear', 3), ('efficient', 3), ('error', 3), ('explained', 3), ('functional programming', 3), ('go lang', 3), ('go-solution', 3), ('hash table', 3), ('iteration', 3), ('linear', 3), ('linear time', 3), ('linear-time', 3), ('map-stl', 3), ('reduce', 3), ('regex', 3), ('switch', 3), ('unordermap', 3), ('video-explanation', 3), ('wrong-answer', 3), ('#easy-understand', 2), ('#java', 2), ('beginner', 2), ('beginnerfriendly', 2), ('bruteforce', 2), ('c# solution', 2), ('c++11', 2), ('clean-code', 2), ('constant-space', 2), ('dict', 2), ('easy understanding', 2), ('explain', 2), ('explanation of logic', 2), ('faster', 2), ('fastest', 2), ('for loop', 2), ('functional', 2), ('help', 2), ('iteratively', 2), ('javascrip', 2), ('javascript-solution', 2), ('list', 2), ('memory optimized', 2), ('optimal', 2), ('pattern-matching', 2), ('python2', 2), ('pythonic', 2), ('recursive', 2), ('short code', 2), ('simpe', 2), ('simplest', 2), ('stack', 2), ('strings', 2), ('switch case', 2), ('testcase-wrong', 2), ('time-complexity', 2), ('treemap', 2), ('typescript javascript', 2), ('works-on-my-machine', 2), ('#easysolution', 1), ('#explanation', 1), ('#hashmaps', 1), ('#java-solution', 1), ('#javascript', 1), ('#rom', 1), ('#romantointeger', 1), ('#string-manipulation', 1), ('#top', 1), ('0ms runtime', 1), ('100 faster', 1), ('100 memory', 1), ('100 space', 1), ('12ms runtime', 1), ('2 lines', 1), ('3linessolution', 1), ('3ms', 1), ('3ms-runtime', 1), ('4ms', 1), ('95 per faster', 1), ('accepted solution', 1), ('algorithm', 1), ('algorithms', 1), ('amazon', 1), ('asahiocean', 1), ('attractor', 1), ('backward', 1), ('backwards', 1), ('bad', 1), ('beating-90-submissions', 1), ('binary-tree', 1), ('bug', 1), ('bug report', 1), ('c-solution', 1), ('c# solutions', 1), ('c++ easy to understand', 1), ('c++ hash', 1), ('c++ simple', 1), ('c++code', 1), ('case statement', 1), ('char', 1), ('clean solution', 1), ('clear solution', 1), ('clearly', 1), ('closure', 1), ('code', 1), ('commented', 1), ('comments', 1), ('comments added', 1), ('compile', 1), ('complexity-analysis', 1), ('constant space', 1), ('data structures', 1), ('dictionaries', 1), ('dictionary c#', 1), ('dictionary mapping', 1), ('doesnt work', 1), ('dynamic programming', 1), ('easy code', 1), ('easy sloution', 1), ('easy to understand', 1), ('easy undestanding', 1), ('easy-to-read', 1), ('easy-understsand', 1), ('efficiency', 1), ('efficient solution', 1), ('enum', 1), ('enumeration', 1), ('error message', 1), ('es6', 1), ('eval', 1), ('explaination', 1), ('explained solution', 1), ('explanations', 1), ('facebook', 1), ('faster than 100', 1), ('faster than 100.00', 1), ('faster than 98.5', 1), ('fastest c solution', 1), ('fastest solution', 1), ('flag', 1), ('for-loop', 1), ('fp', 1), ('functional-programming', 1), ('funny', 1), ('github', 1), ('greedy approach', 1), ('gucigang', 1), ('help me', 1), ('hint', 1), ('immutable', 1), ('immutable-values', 1), ('implementation', 1), ('improvement-needed', 1), ('incorrect-test-case', 1), ('index', 1), ('intutive', 1), ('iterators', 1), ('java recursion', 1), ('java8', 1), ('javasacript', 1), ('javascript brute force', 1), ('javascriptes6', 1), ('kotlin-solution', 1), ('kotlinvim', 1), ('lambda expression', 1), ('leetcode', 1), ('leetcodewars4', 1), ('less memory', 1), ('list comprehension', 1), ('loop', 1), ('loop method', 1), ('maps', 1), ('memory usage', 1), ('memory-search', 1), ('microsoft', 1), ('missing-test-case', 1), ('needimprovement', 1), ('nguyenvanuyn96', 1), ('nohash', 1), ('o1 time', 1), ('object', 1), ('one line', 1), ('one line solution', 1), ('one liner', 1), ('one loop', 1), ('one pass', 1), ('one-line', 1), ('one-liner', 1), ('one-loop', 1), ('one-pass', 1), ('oneliner', 1), ('optimization', 1), ('order of execution', 1), ('performance', 1), ('php', 1), ('pyhton3', 1), ('python3.8', 1), ('question', 1), ('range', 1), ('readable', 1), ('recusion', 1), ('redirect21', 1), ('regexp', 1), ('regular-expression', 1), ('reverse string', 1), ('reverse traversal', 1), ('reverse-string', 1), ('scanleft', 1), ('self explanatory', 1), ('self-explanatory', 1), ('sequential', 1), ('short c++ code', 1), ('simple clear c++ solution', 1), ('simple java solution', 1), ('simpler', 1), ('solution-javascript', 1), ('solution-python', 1), ('solution-sharing', 1), ('solution-sharing-java', 1), ('solved', 1), ('soultion', 1), ('space-complexity', 1), ('stacks', 1), ('state-machine', 1), ('stl', 1), ('string functions', 1), ('string-operation', 1), ('string-searching', 1), ('swift5', 1), ('ternary-operator', 1), ('test-case', 1), ('test-cases', 1), ('traverse', 1), ('typescript solution', 1), ('ultra simple', 1), ('unit-test', 1), ('unorderedmap', 1), ('very-intuitive', 1), ('video', 1), ('video explanation', 1), ('well-commented', 1), ('while', 1), ('while loop', 1), ('while-loop', 1), ('whileloop', 1), ('zip', 1)]"
12,Integer to Roman,https://leetcode.com/problems/integer-to-roman,"Roman numerals are represented by seven different symbols: I, V, X, L, C, D and M.


Symbol       Value
I             1
V             5
X             10
L             50
C             100
D             500
M             1000

For example, 2 is written as II in Roman numeral, just two one's added together. 12 is written as XII, which is simply X + II. The number 27 is written as XXVII, which is XX + V + II.

Roman numerals are usually written largest to smallest from left to right. However, the numeral for four is not IIII. Instead, the number four is written as IV. Because the one is before the five we subtract it making four. The same principle applies to the number nine, which is written as IX. There are six instances where subtraction is used:


	I can be placed before V (5) and X (10) to make 4 and 9. 
	X can be placed before L (50) and C (100) to make 40 and 90. 
	C can be placed before D (500) and M (1000) to make 400 and 900.


Given an integer, convert it to a roman numeral.","['math', 'string']",Medium,1731,3145,843970,482832,"[""Roman to Integer"", ""Integer to English Words""]","[('python', 68), ('java', 65), ('c++', 54), ('cpp', 47), ('javascript', 45), ('python 3', 39), ('solution', 33), ('easy-understanding', 23), ('python3', 21), ('c#', 17), ('simple', 15), ('easy-to-understand', 12), ('java-solution', 12), ('easy', 11), ('c', 10), ('golang', 10), ('integer to roman', 10), ('cpp solution', 9), ('easy-understand', 9), ('easy-undestand', 8), ('simple solution', 8), ('swift', 8), ('clean code', 6), ('golang-solution', 6), ('fast', 5), ('go', 5), ('hashmap', 5), ('if-else', 5), ('php', 5), ('recursion', 5), ('rust', 5), ('simple clear c++ solution', 5), ('commented', 4), ('integer-to-roman', 4), ('iterative', 4), ('kotlin', 4), ('map', 4), ('recursive', 4), ('ruby', 4), ('treemap', 4), ('typescript', 4), ('video-explanation', 4), ('arrays', 3), ('binary-search', 3), ('c++ solution', 3), ('csharp', 3), ('easy to understand', 3), ('easytounderstand', 3), ('explained', 3), ('fast and simple', 3), ('fast-solution', 3), ('go-solution', 3), ('js', 3), ('math', 3), ('string', 3), ('answer', 2), ('brute force', 2), ('c code', 2), ('c++ code', 2), ('clean', 2), ('constant space', 2), ('constant time', 2), ('cpp-solution', 2), ('dictonary', 2), ('fastest', 2), ('generalizable', 2), ('improve', 2), ('interview', 2), ('inttoroman', 2), ('iteration', 2), ('iterator', 2), ('linear time', 2), ('python2', 2), ('roman', 2), ('roman-integer', 2), ('scala', 2), ('short', 2), ('short code', 2), ('straightforward', 2), ('wrong-answer', 2), ('#constantspace', 1), ('#constanttime', 1), ('#fast', 1), ('#go', 1), ('#golang', 1), ('#java-solution', 1), ('#optimize', 1), ('#python', 1), ('#python 3', 1), ('0ms', 1), ('32ms', 1), ('3ms', 1), ('40ms', 1), ('90+faster', 1), ('99', 1), ('accepted', 1), ('algorithms', 1), ('amazon', 1), ('array', 1), ('asahiocean', 1), ('beginner friendly', 1), ('beginnerfriendly', 1), ('best-solution', 1), ('best-submission', 1), ('binary-tree', 1), ('binarysearch', 1), ('bisect-python', 1), ('bug', 1), ('c# solutions', 1), ('c++ map', 1), ('c++11', 1), ('cache', 1), ('clean-code', 1), ('clear solution', 1), ('closure', 1), ('comments', 1), ('comments-added', 1), ('complex', 1), ('concise', 1), ('consise', 1), ('constant-space', 1), ('cpp easy', 1), ('dictionaries', 1), ('dictionary', 1), ('dictionary c#', 1), ('dictionary features', 1), ('difficult', 1), ('digit', 1), ('divide and conquer', 1), ('divmod', 1), ('dp', 1), ('easiest', 1), ('easiest solution', 1), ('easily understood', 1), ('east to understand', 1), ('easy understand', 1), ('easy understanding', 1), ('efficient solution', 1), ('elegent', 1), ('enumeration', 1), ('examples', 1), ('expand', 1), ('explained solution', 1), ('explanation', 1), ('explanation of logic', 1), ('facebook', 1), ('faster then 95', 1), ('feedback', 1), ('functional', 1), ('further-optimisation', 1), ('generalized', 1), ('greedy', 1), ('greedy approach', 1), ('hacky', 1), ('hashmaps', 1), ('help me', 1), ('if else', 1), ('index', 1), ('integer', 1), ('intuition', 1), ('intutive', 1), ('iteratively', 1), ('izaac', 1), ('java solution', 1), ('javasacript', 1), ('javascript solution', 1), ('lexicographical order', 1), ('linkedhashmap', 1), ('logarithmic time', 1), ('logical', 1), ('matching', 1), ('memory', 1), ('microsoft', 1), ('modern', 1), ('nguyenvanuyn96', 1), ('no-hardcoding', 1), ('number system', 1), ('one pointer', 1), ('one-liner', 1), ('oneliner', 1), ('oop', 1), ('optimisation', 1), ('palindrome-check', 1), ('performance', 1), ('priority queue', 1), ('pyhton', 1), ('pyhton 3', 1), ('pythonsolution', 1), ('readable', 1), ('recursion stack', 1), ('recusion', 1), ('red-black-tree', 1), ('replace', 1), ('roman to integer', 1), ('scalable', 1), ('self explanatory', 1), ('self-explanatory', 1), ('simple python accepted', 1), ('simplesolution', 1), ('smart', 1), ('solution-python', 1), ('solution-sharing-cpp', 1), ('solution-sharingjava', 1), ('solved', 1), ('stack', 1), ('string-operation', 1), ('stringbuilder', 1), ('switch case', 1), ('switch-case', 1), ('thinking process', 1), ('three-lines', 1), ('time-complexity', 1), ('time-complexity-o', 1), ('timeout', 1), ('top', 1), ('trick', 1), ('tuple', 1), ('tuples', 1), ('typescript javascript', 1), ('ultra simple', 1), ('upvote', 1), ('verbose', 1), ('video solution', 1), ('well-explained', 1), ('with explanation', 1), ('without hardcoding', 1), ('wooni', 1), ('works-on-my-machine', 1)]"
11,Container With Most Water,https://leetcode.com/problems/container-with-most-water,"Given n non-negative integers a1, a2, ..., an , where each represents a point at coordinate (i, ai). n vertical lines are drawn such that the two endpoints of the line i is at (i, ai) and (i, 0). Find two lines, which, together with the x-axis forms a container, such that the container contains the most water.

Notice that you may not slant the container.","['array', 'two-pointers']",Medium,9275,707,1759954,931820,"[""Trapping Rain Water""]","[('two-pointers', 93), ('java', 72), ('cpp', 62), ('c++', 57), ('python', 56), ('python 3', 39), ('two-pointer', 29), ('javascript', 28), ('python3', 25), ('two pointers', 24), ('java-solution', 19), ('easy-understanding', 18), ('solution', 15), ('golang', 12), ('easy-understand', 11), ('cpp solution', 10), ('easy', 10), ('simple', 10), ('c#', 9), ('container-with-most-water', 8), ('swift', 8), ('video-explanation', 8), ('golang-solution', 7), ('greedy', 7), ('javascript solution', 7), ('c', 6), ('explained', 6), ('go', 6), ('linear time', 6), ('proof', 6), ('ruby', 6), ('two pointer', 6), ('twopointer', 6), ('array', 5), ('brute force', 5), ('c++ code', 5), ('cpp-solution', 5), ('easy-to-understand', 5), ('easy-undestand', 5), ('pointers', 5), ('simple solution', 5), ('2 pointers', 4), ('commetend', 4), ('cpp easy', 4), ('easytounderstand', 4), ('explaination', 4), ('greedy approach', 4), ('pointer', 4), ('rust', 4), ('scala', 4), ('two pointer technique', 4), ('2 pointer', 3), ('brute force to optimal', 3), ('c++ solution', 3), ('clear', 3), ('container with most water', 3), ('dynamic programming', 3), ('fast', 3), ('go-solution', 3), ('kotlin', 3), ('linear', 3), ('linear-time', 3), ('php', 3), ('readable', 3), ('simple clear c++ solution', 3), ('twopointers', 3), ('2-pointers', 2), ('arrays', 2), ('best-submission', 2), ('binary-search', 2), ('chinese', 2), ('clean code', 2), ('dp', 2), ('explanation', 2), ('fast and simple', 2), ('improve', 2), ('iterator', 2), ('javascrip', 2), ('performance', 2), ('php solution', 2), ('python2', 2), ('recursive', 2), ('recusion', 2), ('short', 2), ('time-complexity', 2), ('two pointer approach', 2), ('#golang', 1), ('#java', 1), ('2 pointer approach', 1), ('2pointer', 1), ('2pointers', 1), ('3ms', 1), ('algorithms', 1), ('amazon', 1), ('array nesting', 1), ('asahiocean', 1), ('beating-90-submissions', 1), ('begineer friendly', 1), ('beginner friendly', 1), ('best', 1), ('brute-force', 1), ('c code', 1), ('c programming', 1), ('c# solutions', 1), ('c#-solution', 1), ('c++14', 1), ('clean code with comments', 1), ('clean-code', 1), ('clear-understanding', 1), ('closure', 1), ('code comments', 1), ('commentary', 1), ('commented', 1), ('concise', 1), ('concise-solution', 1), ('constant-space', 1), ('csharp', 1), ('detailed explanation', 1), ('diagram', 1), ('different-oj-local', 1), ('double-pointers', 1), ('doubts', 1), ('dp python', 1), ('drewbie', 1), ('dynamic-programming', 1), ('easy solution', 1), ('easy to understand', 1), ('easy understand', 1), ('easy-understsand', 1), ('enjoy', 1), ('exaplanation', 1), ('explained solution', 1), ('explanation of logic', 1), ('facebook', 1), ('faceebook', 1), ('faster than 96', 1), ('fold', 1), ('fp', 1), ('google', 1), ('google-india', 1), ('greedy algorithm', 1), ('haha', 1), ('hashmap', 1), ('help', 1), ('immutable-values', 1), ('improved', 1), ('intuition', 1), ('intuitive', 1), ('ios', 1), ('iteration', 1), ('java ac solution', 1), ('java easy to understand', 1), ('javacript', 1), ('javascipt', 1), ('js', 1), ('js javascript', 1), ('kadane algorithm', 1), ('kotlinvim', 1), ('linear complexity', 1), ('logical', 1), ('math.min', 1), ('max', 1), ('maxheap', 1), ('maximum', 1), ('microsoft-india', 1), ('minimalism', 1), ('missing-test-case', 1), ('new-idea', 1), ('nlogn', 1), ('observations', 1), ('one pass', 1), ('one-liner', 1), ('optimal solution', 1), ('optimisation', 1), ('optimized', 1), ('priority queue', 1), ('pyhton3', 1), ('racket', 1), ('scan-line', 1), ('shortest', 1), ('simple approach', 1), ('single pass', 1), ('slow', 1), ('solution c++', 1), ('solution-python', 1), ('space complexity', 1), ('straightforward', 1), ('tail-recursive', 1), ('tailrec', 1), ('test-case', 1), ('thoughts', 1), ('time complexity', 1), ('time limit exceeded', 1), ('time-cost', 1), ('time-limit-exceeded', 1), ('tle', 1), ('two', 1), ('two-poinnters', 1), ('two-pointer method', 1), ('typescript', 1), ('uttasargacodes', 1), ('video explanation', 1), ('water', 1), ('wrong-answer', 1)]"
10,Regular Expression Matching,https://leetcode.com/problems/regular-expression-matching,"Given an input string (s) and a pattern (p), implement regular expression matching with support for '.' and '*' where: 


	'.' Matches any single character.​​​​
	'*' Matches zero or more of the preceding element.


The matching should cover the entire input string (not partial).","['string', 'dynamic-programming', 'backtracking']",Hard,5702,846,1942971,534356,"[""Wildcard Matching""]","[('dynamic programming', 68), ('java', 51), ('python', 49), ('cpp', 40), ('dynamic-programming', 39), ('c++', 31), ('javascript', 22), ('solution', 22), ('recursion', 21), ('python 3', 20), ('dp', 18), ('wrong-answer', 17), ('memoization', 16), ('test-case', 14), ('regex', 13), ('python3', 10), ('regular-expression-matching', 10), ('java-solution', 9), ('recursive', 9), ('testcase-wrong', 9), ('easy-understanding', 8), ('golang', 8), ('c#', 7), ('backtracking', 6), ('easy-understand', 6), ('easy-undestand', 5), ('golang-solution', 5), ('simple', 5), ('simple solution', 5), ('time-complexity', 5), ('top down dp', 5), ('comments-added', 4), ('easy', 4), ('easytounderstand', 4), ('nfa', 4), ('regexmatch', 4), ('regular-expression', 4), ('rust', 4), ('short', 4), ('swift', 4), ('time-limit-exceeded', 4), ('brute force', 3), ('c++ code', 3), ('cpp solution', 3), ('dfa', 3), ('improve', 3), ('ruby', 3), ('top down', 3), ('works-on-my-machine', 3), ('accepted', 2), ('best-submission', 2), ('bfs', 2), ('bottom up', 2), ('bottom-up-algorithm', 2), ('c++ dynamic programming', 2), ('cpp easy', 2), ('dfs', 2), ('different-oj-local', 2), ('explaination', 2), ('fastest', 2), ('greedy', 2), ('iteration', 2), ('kotlin', 2), ('minimal', 2), ('one-liner', 2), ('python2', 2), ('recurision', 2), ('regx', 2), ('run-time-error', 2), ('simplest', 2), ('solution-sharing-c', 2), ('solution-sharing-cpp', 2), ('state-machine', 2), ('tabular', 2), ('video', 2), ('1-liner', 1), ('1ms', 1), ('automata', 1), ('awesome samriddhi', 1), ('backward', 1), ('bottom-up', 1), ('c', 1), ('c++ dp', 1), ('cheating', 1), ('clarification', 1), ('clean code', 1), ('cleanest', 1), ('code', 1), ('commented', 1), ('comments', 1), ('complexity', 1), ('deque', 1), ('dfs-topdown', 1), ('discussion', 1), ('doubt', 1), ('dp java', 1), ('dp python', 1), ('dp-techqique', 1), ('drewbie', 1), ('easy solution', 1), ('easy to read', 1), ('easy to understandd', 1), ('easy-to-understand', 1), ('edge-case', 1), ('explained', 1), ('explanation', 1), ('explanation of logic', 1), ('explanations', 1), ('fast', 1), ('fast and simple', 1), ('fast-solution', 1), ('feedback', 1), ('finite state machine', 1), ('finite-state-machine', 1), ('follow-up', 1), ('fun', 1), ('go', 1), ('go-solution', 1), ('golang solution', 1), ('graph', 1), ('help needed', 1), ('immutable', 1), ('incorrect-test-case', 1), ('invalid test case', 1), ('invalid testcase', 1), ('iterative', 1), ('javasciprt', 1), ('javascript recursive', 1), ('javascript solution', 1), ('js', 1), ('leetcode', 1), ('leetcodeadmin', 1), ('linear memory', 1), ('logic explained clearly', 1), ('memoized', 1), ('memoziation', 1), ('one line', 1), ('optimal', 1), ('parser', 1), ('pattern', 1), ('pattern-based', 1), ('performance', 1), ('php', 1), ('picture explanation', 1), ('purpose-of-question', 1), ('pyhton', 1), ('python3.8', 1), ('pythonpython3', 1), ('query', 1), ('question', 1), ('question-not-clear', 1), ('recursion memoization', 1), ('recursive solution', 1), ('recursive-descent', 1), ('recursively', 1), ('recusion', 1), ('regex expression', 1), ('regexp', 1), ('regular expression', 1), ('request-for-explanation', 1), ('runtime-error', 1), ('scala', 1), ('search', 1), ('share-solution', 1), ('short code', 1), ('simpe', 1), ('simple and elegant', 1), ('simple python solution', 1), ('single line', 1), ('singlelinecode', 1), ('slow', 1), ('smallest-good-base', 1), ('solition-sharing', 1), ('solution-explaining', 1), ('solution-share', 1), ('solution-sharing-python', 1), ('space-complexity', 1), ('string', 1), ('string-operation', 1), ('strings', 1), ('tabulation', 1), ('test case', 1), ('test-cases', 1), ('thinking process', 1), ('time-limit-exceeded-java', 1), ('tle', 1), ('top down approach', 1), ('top-down', 1), ('topdown', 1), ('utf8', 1), ('well-commented', 1), ('with-explanation', 1), ('wrong-test-cases', 1), ('xjq', 1), ('z-algorithm', 1)]"
9,Palindrome Number,https://leetcode.com/problems/palindrome-number,"Given an integer x, return true if x is palindrome integer.

An integer is a palindrome when it reads the same backward as forward. For example, 121 is palindrome while 123 is not.",['math'],Easy,3251,1731,2484091,1246559,"[""Palindrome Linked List""]","[('python', 105), ('java', 92), ('javascript', 74), ('python 3', 65), ('palindrome', 59), ('cpp', 51), ('solution', 37), ('c++', 35), ('java-solution', 26), ('python3', 26), ('accepted', 25), ('easy-understand', 19), ('easy-understanding', 19), ('palindrome-check', 18), ('simple', 15), ('golang', 14), ('easy', 12), ('palindromenumber python3', 10), ('swift', 10), ('c', 9), ('c#', 9), ('cpp solution', 9), ('javascript solution', 9), ('simple solution', 9), ('easy-to-understand', 8), ('go', 8), ('palindrome number', 8), ('rust', 7), ('c++ code', 6), ('easy-undestand', 6), ('fast', 6), ('fast-solution', 6), ('go-solution', 6), ('golang-solution', 6), ('js', 6), ('ruby', 6), ('scala', 6), ('string', 6), ('easytounderstand', 5), ('fast and simple', 5), ('kotlin', 5), ('number', 5), ('one-liner', 5), ('python2', 5), ('short', 5), ('space-complexity', 5), ('c++ solution', 4), ('constant-space', 4), ('cpp easy', 4), ('deque', 4), ('explained', 4), ('extra-space', 4), ('improve', 4), ('math', 4), ('no-extra-space', 4), ('python3.8', 4), ('beginnerfriendly', 3), ('csharp', 3), ('integer to string', 3), ('iterative', 3), ('java ac solution', 3), ('java solution', 3), ('less memory', 3), ('overflow', 3), ('pythonpython3', 3), ('recursion', 3), ('reverse', 3), ('reverse integer', 3), ('solution by python', 3), ('wrong-answer', 3), ('#easy-understand', 2), ('#javascript', 2), ('#palindromenumber', 2), ('0 space', 2), ('array', 2), ('c code', 2), ('c++11', 2), ('clarification', 2), ('clean code', 2), ('complexity', 2), ('doubts', 2), ('easy-solition', 2), ('easysolution', 2), ('es6', 2), ('explanations', 2), ('fastest', 2), ('integer', 2), ('ispalindrome', 2), ('javascrip', 2), ('js javascript', 2), ('math-solution', 2), ('modulo', 2), ('o1space', 2), ('palindrome number swift', 2), ('palindromenumber java', 2), ('pallindrome', 2), ('php', 2), ('question-not-clear', 2), ('reversed', 2), ('short solution', 2), ('simpler', 2), ('simplest', 2), ('space-efficient', 2), ('test-case', 2), ('time-complexity', 2), ('two-pointers', 2), ('video explanation', 2), ('without string', 2), ('#c++', 1), ('#java', 1), ('#java-solution', 1), ('#pallindrome', 1), ('#python 3', 1), ('#python3', 1), ('#ruby', 1), ('#scala', 1), ('0 ms', 1), ('0ms', 1), ('0ms-4ms', 1), ('0ms-solution', 1), ('1 line', 1), ('1-line', 1), ('1-line solution', 1), ('100 beat', 1), ('100 speed', 1), ('100fast', 1), ('15ms', 1), ('2 lines', 1), ('3-liner', 1), ('78ms', 1), ('99.98 faster', 1), ('accenture', 1), ('accepted solution', 1), ('asahiocean', 1), ('attractor', 1), ('avnish', 1), ('awesome-answer-ruby', 1), ('basic', 1), ('beginner', 1), ('beginner friendly', 1), ('broken', 1), ('broken-tests', 1), ('brute-force', 1), ('builtin', 1), ('c#-solution', 1), ('c++ easy solution', 1), ('case', 1), ('clean code with comments', 1), ('clean solution', 1), ('clean-code', 1), ('clear', 1), ('clear solution', 1), ('commented', 1), ('comments', 1), ('compile-error', 1), ('constant space', 1), ('constant time', 1), ('constant-time', 1), ('convert', 1), ('cool', 1), ('cpp doubt', 1), ('cpp-easy', 1), ('cpp-solution', 1), ('didi', 1), ('different', 1), ('digit-extraction', 1), ('divmod', 1), ('easiest', 1), ('easiest solution', 1), ('easy solution', 1), ('easy to understand', 1), ('easy undestanding', 1), ('easy-to-read', 1), ('efficiency', 1), ('efficient', 1), ('f-strings', 1), ('fabiantorrestech', 1), ('faster', 1), ('faster-than-100', 1), ('fastest java slution', 1), ('follow-up', 1), ('functional', 1), ('github', 1), ('go lang', 1), ('go-lang', 1), ('help', 1), ('helpful', 1), ('if-else', 1), ('java-8', 1), ('kotllin', 1), ('leetcode', 1), ('leetcode problem 9', 1), ('leetcode-library', 1), ('linear-time', 1), ('logartihm', 1), ('logic explained', 1), ('loop', 1), ('mask', 1), ('math power', 1), ('maths', 1), ('memory optimized', 1), ('minimalism', 1), ('no string', 1), ('non-copy-paste', 1), ('ologn', 1), ('oneliner', 1), ('optimal', 1), ('optimization', 1), ('palindrom', 1), ('palindrome c#', 1), ('palindrome number c++', 1), ('palindrome-number', 1), ('palindromenumber', 1), ('palindromenumber scala', 1), ('performance', 1), ('perl', 1), ('php solution', 1), ('pointers', 1), ('pyhton', 1), ('questions', 1), ('queue', 1), ('recurision', 1), ('recursive', 1), ('regex', 1), ('regular expression', 1), ('reverseinteger', 1), ('self-descriptive', 1), ('sharingsolution accepted', 1), ('simple and elegant', 1), ('simple clear c++ solution', 1), ('simple-solution', 1), ('slicing', 1), ('solution-cpp', 1), ('solution-python', 1), ('solution-sharing-cpp', 1), ('solution-sharing-java', 1), ('solved', 1), ('space o1', 1), ('stack', 1), ('straight-forward', 1), ('string-operation', 1), ('string-to-integer', 1), ('strings', 1), ('suggestion', 1), ('sultion', 1), ('summary', 1), ('swift5', 1), ('ternary-operator', 1), ('test', 1), ('testcase-wrong', 1), ('time', 1), ('time complexity', 1), ('time-complexity-o', 1), ('time-limit-exceeded', 1), ('too easy', 1), ('two-pointer', 1), ('two-pointer method', 1), ('typescript', 1), ('uglycode', 1), ('video explaination', 1), ('video-explanation', 1), ('visual', 1), ('wrongdatatype', 1), ('xjq', 1)]"
8,String to Integer (atoi),https://leetcode.com/problems/string-to-integer-atoi,"Implement the myAtoi(string s) function, which converts a string to a 32-bit signed integer (similar to C/C++'s atoi function).

The algorithm for myAtoi(string s) is as follows:


	Read in and ignore any leading whitespace.
	Check if the next character (if not already at the end of the string) is '-' or '+'. Read this character in if it is either. This determines if the final result is negative or positive respectively. Assume the result is positive if neither is present.
	Read in next the characters until the next non-digit charcter or the end of the input is reached. The rest of the string is ignored.
	Convert these digits into an integer (i.e. ""123"" -> 123, ""0032"" -> 32). If no digits were read, then the integer is 0. Change the sign as necessary (from step 2).
	If the integer is out of the 32-bit signed integer range [-231, 231 - 1], then clamp the integer so that it remains in the range. Specifically, integers less than -231 should be clamped to -231, and integers greater than 231 - 1 should be clamped to 231 - 1.
	Return the integer as the final result.


Note:


	Only the space character ' ' is considered a whitespace character.
	Do not ignore any characters other than the leading whitespace or the rest of the string after the digits.","['math', 'string']",Medium,240,617,4618705,727908,"[""Reverse Integer"", ""Valid Number""]","[('java', 84), ('python', 80), ('cpp', 71), ('c++', 50), ('javascript', 44), ('atoi', 42), ('python 3', 40), ('solution', 35), ('test-case', 21), ('python3', 19), ('regex', 19), ('java-solution', 18), ('simple', 18), ('golang', 17), ('wrong-answer', 17), ('testcase-wrong', 15), ('simple solution', 12), ('c', 11), ('c#', 11), ('cpp solution', 11), ('easy-understand', 11), ('fast', 11), ('easy', 10), ('easy-understanding', 10), ('golang-solution', 10), ('rust', 10), ('string', 10), ('easy-undestand', 9), ('string-to-integer', 9), ('swift', 9), ('go', 8), ('ruby', 8), ('csharp', 7), ('easy-to-understand', 7), ('easytounderstand', 7), ('go-solution', 7), ('regexp', 7), ('regular-expression', 7), ('c++ code', 6), ('explained', 6), ('fast and simple', 6), ('run-time-error', 6), ('works-on-my-machine', 6), ('accepted', 5), ('javascript solution', 5), ('overflow', 5), ('php', 5), ('stringstream', 5), ('0ms', 4), ('fast-solution', 4), ('js', 4), ('string-to-atoi', 4), ('clean code', 3), ('commented', 3), ('dfa', 3), ('error', 3), ('fastest', 3), ('fsm', 3), ('integer', 3), ('linear time', 3), ('one-liner', 3), ('simple clear c++ solution', 3), ('state-machine', 3), ('string to integer', 3), ('100 faster', 2), ('100 faster cpp', 2), ('100 speed', 2), ('4ms', 2), ('atoi regex', 2), ('best-solution-ever', 2), ('best-submission', 2), ('comments', 2), ('concise', 2), ('cpp easy', 2), ('cpp-solution', 2), ('if-else', 2), ('improve', 2), ('incorrect-test-case', 2), ('int', 2), ('interview', 2), ('iterative', 2), ('javascrip', 2), ('kotlin', 2), ('myatoi', 2), ('python2', 2), ('question-not-clear', 2), ('regexmatch', 2), ('regular expression', 2), ('scala', 2), ('short', 2), ('string-operation', 2), ('stringtointeger', 2), ('time-complexity', 2), ('wrong-test-cases', 2), ('#fasterthan100percent', 1), ('#go', 1), ('#golang', 1), ('#javascript', 1), ('#python3', 1), ('#regex', 1), ('#stringtointeger', 1), ('100 beat', 1), ('100 memory', 1), ('100 space', 1), ('3ms', 1), ('9ms', 1), ('amazon', 1), ('answer', 1), ('asahiocean', 1), ('ascii', 1), ('beats 100 percent', 1), ('best practices', 1), ('best-solution', 1), ('biginteger', 1), ('bug report', 1), ('c programming', 1), ('c++ solution', 1), ('c++17', 1), ('c++code', 1), ('check', 1), ('clarification', 1), ('clean', 1), ('clean-code', 1), ('clear explanation', 1), ('closure', 1), ('code smell', 1), ('commentary', 1), ('comments-added', 1), ('compile', 1), ('compilers', 1), ('concise-solution', 1), ('constant memory', 1), ('constant space', 1), ('cool', 1), ('cpp with explanation', 1), ('destructuring', 1), ('detailed explanation', 1), ('different', 1), ('double', 1), ('dynamic-programming', 1), ('easy to understand', 1), ('easy understand', 1), ('easy understanding', 1), ('easy undestanding', 1), ('easy-to-read', 1), ('efficient', 1), ('exception', 1), ('explanation of logic', 1), ('explanations', 1), ('expression', 1), ('faster than 100.00', 1), ('fastest c++ solution', 1), ('fastest java solution', 1), ('fp', 1), ('fromchars', 1), ('god line', 1), ('hashmaps', 1), ('help', 1), ('help me', 1), ('idiomatic', 1), ('immutable', 1), ('implementation', 1), ('input', 1), ('interviews', 1), ('intmax', 1), ('iterative solution', 1), ('iterator', 1), ('java ac solution', 1), ('joke', 1), ('js javascript', 1), ('kotlinvim', 1), ('leetcode compiler error', 1), ('leetcode-issue-only', 1), ('linear-time', 1), ('medium', 1), ('missing-test-case', 1), ('modern c++', 1), ('nan', 1), ('no regex', 1), ('offical answer', 1), ('one line', 1), ('out of range', 1), ('parseint', 1), ('parsing', 1), ('pattern-matching', 1), ('perl', 1), ('php solution', 1), ('pointer', 1), ('problem', 1), ('problem-8', 1), ('pyhton', 1), ('python3.8', 1), ('pythonsolution', 1), ('question', 1), ('quick', 1), ('quick-bench', 1), ('readability', 1), ('readable', 1), ('readable code', 1), ('real-solution', 1), ('recursion', 1), ('recursive-descent', 1), ('regex expression', 1), ('regular', 1), ('regular-expression-matching', 1), ('result', 1), ('reverse-polish-notation', 1), ('runtime-error', 1), ('shortest', 1), ('simple python solution', 1), ('smallest', 1), ('solution by python', 1), ('solution-python', 1), ('solution-share', 1), ('solution-sharing-c', 1), ('solution-sharing-cpp', 1), ('space analysis', 1), ('string-integer', 1), ('stringbuilder', 1), ('strings manipulation', 1), ('stringview', 1), ('tailrec', 1), ('test-case-bug', 1), ('test-cases', 1), ('time-complexity-o', 1), ('time-limit-exceeded', 1), ('trick', 1), ('tricky', 1), ('try', 1), ('try-catch', 1), ('try-except', 1), ('vague', 1), ('video', 1), ('weight', 1), ('well-commented', 1), ('why', 1), ('with explanation', 1), ('without long datatype', 1), ('xjq', 1)]"
7,Reverse Integer,https://leetcode.com/problems/reverse-integer,"Given a signed 32-bit integer x, return x with its digits reversed. If reversing x causes the value to go outside the signed 32-bit integer range [-231, 231 - 1], then return 0.

Assume the environment does not allow you to store 64-bit integers (signed or unsigned).",['math'],Easy,4644,7112,5773187,1499842,"[""String to Integer (atoi)"", ""Reverse Bits""]","[('python', 124), ('java', 107), ('python 3', 80), ('cpp', 78), ('c++', 70), ('javascript', 69), ('solution', 53), ('reverse-integer', 40), ('python3', 39), ('reverse integer', 35), ('java-solution', 33), ('golang', 25), ('easy-understand', 24), ('easy-understanding', 21), ('swift', 21), ('overflow', 20), ('c', 18), ('c#', 16), ('go', 16), ('easy', 15), ('simple', 15), ('cpp solution', 14), ('easy-undestand', 14), ('reverseinteger', 13), ('golang-solution', 12), ('ruby', 12), ('wrong-answer', 12), ('fast-solution', 11), ('short', 11), ('0ms', 10), ('rust', 10), ('test-case', 10), ('csharp', 9), ('fast', 9), ('fast and simple', 9), ('go-solution', 9), ('string-operation', 9), ('simple solution', 8), ('accepted', 7), ('c++ code', 7), ('fastest', 7), ('kotlin', 7), ('reverse', 7), ('string', 7), ('easy-to-understand', 6), ('javascript solution', 6), ('cpp-solution', 5), ('js', 5), ('math', 5), ('php', 5), ('python2', 5), ('testcase-wrong', 5), ('c code', 4), ('easytounderstand', 4), ('improve', 4), ('integer', 4), ('queue', 4), ('solution c++', 4), ('solution-python', 4), ('#javascript', 3), ('0ms-solution', 3), ('100 faster', 3), ('1ms', 3), ('c++ solution', 3), ('constant-space', 3), ('cpp easy', 3), ('easiest', 3), ('easy to understand', 3), ('faster than 100.00', 3), ('ios', 3), ('one-liner', 3), ('overflow fix', 3), ('recursion', 3), ('reverse string', 3), ('run-time-error', 3), ('straight-forward', 3), ('test', 3), ('typescript', 3), ('100', 2), ('100 faster cpp', 2), ('100 faster runtime', 2), ('4ms', 2), ('best', 2), ('c++11', 2), ('clean', 2), ('clean code', 2), ('commented', 2), ('comments-added', 2), ('concise', 2), ('easy understanding', 2), ('efficent approach', 2), ('efficient solution', 2), ('exception handling', 2), ('explanation', 2), ('explanation of logic', 2), ('faster than 100', 2), ('fastest c++ solution', 2), ('fastest solution', 2), ('go lang', 2), ('help needed', 2), ('incorrect-test-case', 2), ('integer to string', 2), ('java-reverse-integer', 2), ('javascipt', 2), ('memory optimized', 2), ('number-format-exception', 2), ('performance', 2), ('python3.8', 2), ('recursive', 2), ('reverse integer 32bit', 2), ('reversed', 2), ('scala', 2), ('short solution', 2), ('simple python accepted', 2), ('solution by python', 2), ('solution-sharing-cpp', 2), ('stack', 2), ('string slicing', 2), ('stringstream', 2), ('swiftsolution', 2), ('video', 2), ('works-on-my-machine', 2), ('youtube', 2), ('#clean', 1), ('#compilererror', 1), ('#easy-understanding', 1), ('#expectedvalueerror', 1), ('#integer', 1), ('#java', 1), ('#python', 1), ('#python 3', 1), ('#reverseint', 1), ('#solution', 1), ('0ms runtime', 1), ('0ms-8ms', 1), ('100 space', 1), ('100faster', 1), ('1ms runtime', 1), ('2.2mb', 1), ('20ms', 1), ('2ms', 1), ('90+', 1), ('ac solution', 1), ('algorithms', 1), ('analysis', 1), ('approach', 1), ('attractor', 1), ('basic', 1), ('beating-90-submissions', 1), ('beats 100', 1), ('beats 98 pc', 1), ('beginnerfriendly', 1), ('best explaination', 1), ('best-submission', 1), ('bit-length', 1), ('brute force', 1), ('bruteforce', 1), ('bug', 1), ('bugs', 1), ('c# solution', 1), ('c++ solution simple', 1), ('c++20', 1), ('c++solution', 1), ('cleanest', 1), ('clear explanation', 1), ('code with explanation', 1), ('comments', 1), ('comperator operator', 1), ('complexity', 1), ('concise-solution', 1), ('constant-time', 1), ('cool', 1), ('cpp doubt', 1), ('different-oj-runcode', 1), ('digits', 1), ('dirty', 1), ('divmod', 1), ('easy-solition', 1), ('easy-understsand', 1), ('efficiency', 1), ('efficient', 1), ('elegant', 1), ('elegant solution', 1), ('enter a longest title title', 1), ('enumerate', 1), ('es6', 1), ('example', 1), ('explained', 1), ('explanation with code', 1), ('explanations', 1), ('extensions', 1), ('f-strings', 1), ('fast than 97.08', 1), ('faster', 1), ('faster than 80', 1), ('faster than 95', 1), ('faster than 99', 1), ('faster then 95', 1), ('faster-than-100', 1), ('fastest java solution', 1), ('for-loop', 1), ('functional programming', 1), ('functions', 1), ('github', 1), ('go-lang', 1), ('golang solution', 1), ('idiomatic', 1), ('imcomplete-testcases', 1), ('imperative', 1), ('inefficient', 1), ('integer revers', 1), ('interview', 1), ('iterative', 1), ('java ac solution', 1), ('java solution', 1), ('java8', 1), ('js javascript', 1), ('kotlinvim', 1), ('kotllin', 1), ('less space than 100.00', 1), ('linear time', 1), ('linear-time', 1), ('logarithmic time', 1), ('logical', 1), ('long', 1), ('lookup', 1), ('loops', 1), ('malj', 1), ('math trick', 1), ('memory efficient', 1), ('minimal', 1), ('mod', 1), ('modern c++', 1), ('modulus', 1), ('most-common solution', 1), ('needimprovement', 1), ('new', 1), ('no-long', 1), ('no-recursion', 1), ('no-stack', 1), ('number theory', 1), ('oneline', 1), ('oneliner', 1), ('optimal', 1), ('optimisation', 1), ('palindromenumber python3', 1), ('parameter', 1), ('parseint', 1), ('pointer', 1), ('possible-bug', 1), ('problem solving', 1), ('Problems', 1), ('py3', 1), ('pyhton', 1), ('pythonic', 1), ('pythonpython3', 1), ('readable', 1), ('recursively', 1), ('resverse-integer', 1), ('return-value', 1), ('revers integer', 1), ('reverse integer in java', 1), ('reverse-32-bit-int', 1), ('reverse-string', 1), ('reversestring', 1), ('review', 1), ('runtime-error', 1), ('shift operators', 1), ('short code', 1), ('shortest', 1), ('should more effective', 1), ('simple c code', 1), ('simple java solution', 1), ('single-line', 1), ('single-pass', 1), ('smallest', 1), ('solution-javascript', 1), ('solution-ruby', 1), ('solution-share', 1), ('solution-sharing-python', 1), ('stacks', 1), ('stl', 1), ('stoi', 1), ('str', 1), ('string builder', 1), ('string reverse', 1), ('string-to-integer', 1), ('strings', 1), ('swift5', 1), ('switch', 1), ('system design', 1), ('tail-recursive', 1), ('thanksgiving', 1), ('thought-process', 1), ('time-complexity', 1), ('tips', 1), ('try-catch', 1), ('typescript javascript', 1), ('unchecked', 1), ('underflow', 1), ('understandable', 1), ('using string reverse', 1), ('very fast', 1), ('video explanation', 1), ('well explained', 1), ('well-commented', 1), ('while', 1), ('while-loop', 1), ('with explanation', 1), ('without-long', 1), ('wooni', 1), ('wrong', 1), ('wrong answer', 1), ('wrong test case', 1), ('wrong-answer-ruby', 1), ('zea7ot', 1)]"
6,ZigZag Conversion,https://leetcode.com/problems/zigzag-conversion,"The string ""PAYPALISHIRING"" is written in a zigzag pattern on a given number of rows like this: (you may want to display this pattern in a fixed font for better legibility)


P   A   H   N
A P L S I I G
Y   I   R


And then read line by line: ""PAHNAPLSIIGYIR""

Write the code that will take a string and make this conversion given a number of rows:


string convert(string s, int numRows);",['string'],Medium,2331,5780,1476708,566826,[],"[('java', 95), ('python', 63), ('cpp', 53), ('solution', 49), ('javascript', 33), ('python 3', 33), ('c++', 32), ('zigzag-conversion', 27), ('easy-understand', 23), ('simple', 22), ('python3', 14), ('wrong-answer', 13), ('zigzag', 12), ('string', 11), ('accepted', 10), ('golang', 10), ('java-solution', 9), ('run-time-error', 9), ('runtime-error', 9), ('memory-limit-exceeded', 8), ('easy', 7), ('easy-understanding', 7), ('easy-undestand', 7), ('output-limit-exceeded', 7), ('swift', 7), ('cpp solution', 6), ('short', 6), ('works-on-my-machine', 6), ('easy-to-understand', 5), ('fast-solution', 5), ('golang-solution', 5), ('hashmap', 5), ('javascript solution', 5), ('simple solution', 5), ('time-complexity', 5), ('clean code', 4), ('improve', 4), ('java-zigzag', 4), ('rust', 4), ('time-limit-exceeded', 4), ('video-explanation', 4), ('answer', 3), ('c#', 3), ('commented', 3), ('comments', 3), ('constant-space', 3), ('cpp-solution', 3), ('easytounderstand', 3), ('explanations', 3), ('go', 3), ('math', 3), ('paypal', 3), ('ruby', 3), ('#python 3', 2), ('array', 2), ('c', 2), ('cpp easy', 2), ('csharp', 2), ('error', 2), ('explanation', 2), ('fast and simple', 2), ('functional-programming', 2), ('go-solution', 2), ('intuitive', 2), ('kotlin', 2), ('linear time', 2), ('linear-time', 2), ('map', 2), ('one pass', 2), ('pyhton', 2), ('python2', 2), ('question-not-clear', 2), ('readable', 2), ('scala', 2), ('simplest', 2), ('simulation', 2), ('solution-python', 2), ('test-case', 2), ('testcase-wrong', 2), ('tle', 2), ('unique solution', 2), ('#easy-understand', 1), ('#python', 1), ('0ms', 1), ('0ms-4ms', 1), ('0ms-solution', 1), ('100', 1), ('100 memory', 1), ('2d-array', 1), ('accepted solution', 1), ('ad-hoc', 1), ('algorithm', 1), ('best-submission', 1), ('bfs', 1), ('breadth-first-search', 1), ('bucket-sort', 1), ('bugs', 1), ('c++ code', 1), ('c++ cycle', 1), ('c++ solution', 1), ('c++11', 1), ('clarification', 1), ('clarity', 1), ('clean-efficient-code', 1), ('clear', 1), ('comment', 1), ('commentary', 1), ('confuse-answer', 1), ('cplusplus', 1), ('cpp question', 1), ('design', 1), ('detailed explanation', 1), ('dictonary', 1), ('different-oj-local', 1), ('difficulty', 1), ('documentation', 1), ('drewbie', 1), ('easiest solution', 1), ('easy to understand', 1), ('efficiency', 1), ('examplain', 1), ('exceeded', 1), ('explained', 1), ('explanation with logic', 1), ('fast', 1), ('flags', 1), ('fp', 1), ('further-optimization', 1), ('hashing algorithm', 1), ('immutable', 1), ('index', 1), ('intutive', 1), ('iteration', 1), ('iterative', 1), ('itertools', 1), ('javascrip', 1), ('js', 1), ('limit', 1), ('list', 1), ('memory', 1), ('memory-efficient', 1), ('no fancy methods', 1), ('ole', 1), ('other-solutions', 1), ('output', 1), ('output limit exceeded', 1), ('pattern', 1), ('pythonpython3', 1), ('recursion', 1), ('reduce', 1), ('self explanatory', 1), ('self-explanatory', 1), ('sequence', 1), ('shortest', 1), ('simple and elegant', 1), ('simple and readable', 1), ('simple clear c++ solution', 1), ('simple python accepted', 1), ('slowest python', 1), ('solution-sharing-cpp', 1), ('solution-sharing-python', 1), ('sorting', 1), ('stacks', 1), ('string-operation', 1), ('stringbuilder', 1), ('strings', 1), ('stringview', 1), ('swift5', 1), ('system error', 1), ('time-limit-exceeded-java', 1), ('two-methods', 1), ('ultra simple', 1), ('upvote', 1), ('vector', 1), ('vector 2d', 1), ('video solution', 1), ('visualization', 1), ('well-commented', 1), ('well-explained', 1), ('wrong-test-cases', 1), ('zig zag', 1), ('zigzag traversal', 1), ('zigzaglevelorder', 1)]"
5,Longest Palindromic Substring,https://leetcode.com/problems/longest-palindromic-substring,"Given a string s, return the longest palindromic substring in s.","['string', 'dynamic-programming']",Medium,10558,681,4181970,1284418,"[""Shortest Palindrome"", ""Palindrome Permutation"", ""Palindrome Pairs"", ""Longest Palindromic Subsequence"", ""Palindromic Substrings""]","[('java', 110), ('python', 106), ('dynamic programming', 94), ('c++', 74), ('cpp', 65), ('python 3', 58), ('javascript', 48), ('dp', 43), ('time-limit-exceeded', 30), ('dynamic-programming', 28), ('solution', 25), ('easy-understanding', 20), ('java-solution', 20), ('python3', 20), ('manachers-algorithm', 18), ('string', 18), ('palindrome', 17), ('time-complexity', 17), ('c#', 15), ('cpp solution', 14), ('manacher', 14), ('easy-undestand', 13), ('simple', 13), ('longest-palindrome-substr', 12), ('wrong-answer', 12), ('golang', 11), ('manacher-algorithm', 11), ('easy', 9), ('easy-to-understand', 9), ('tle', 9), ('brute force', 8), ('go', 8), ('javascript solution', 8), ('c++ code', 7), ('rust', 7), ('video-explanation', 7), ('comments-added', 6), ('golang-solution', 6), ('recursion', 6), ('two-pointers', 6), ('clean code', 5), ('commented', 5), ('easiest', 5), ('easy-understand', 5), ('error', 5), ('expand', 5), ('hash', 5), ('hashmap', 5), ('improve', 5), ('iterative', 5), ('slidingwindow', 5), ('time-complexity-o', 5), ('works-on-my-machine', 5), ('c', 4), ('center expansion', 4), ('constant space', 4), ('constant-space', 4), ('csharp', 4), ('easytounderstand', 4), ('go-solution', 4), ('help', 4), ('kotlin', 4), ('memory-limit-exceeded', 4), ('scala', 4), ('simple clear c++ solution', 4), ('simple solution', 4), ('swift', 4), ('test-case', 4), ('time limit exceeded', 4), ('brute-force', 3), ('comments', 3), ('dp-techqique', 3), ('explanation', 3), ('fast and simple', 3), ('help me', 3), ('help needed', 3), ('lcs', 3), ('longest palindrome', 3), ('longest-palindromic-substring', 3), ('readable', 3), ('ruby', 3), ('run-time-error', 3), ('short', 3), ('two pointers', 3), ('#dynamic programming', 2), ('#javascript', 2), ('8ms', 2), ('best-submission', 2), ('bottoms-up', 2), ('bug report', 2), ('c# solutions', 2), ('c++11', 2), ('complexity-analysis', 2), ('cpp easy', 2), ('detailed explanation', 2), ('dp-programming', 2), ('easysolution', 2), ('efficient solution', 2), ('explaination', 2), ('fan out', 2), ('fast-solution', 2), ('golang solution', 2), ('java ac solution', 2), ('longest common substring', 2), ('matrix', 2), ('performance', 2), ('pointer', 2), ('pythonpython3', 2), ('quadratic', 2), ('sliding-window', 2), ('solution by python', 2), ('solution-python', 2), ('solution-sharing-cpp', 2), ('stl', 2), ('substring', 2), ('time complexity', 2), ('timeout', 2), ('two-pointer', 2), ('well-explained', 2), ('window-sliding', 2), ('#4000ms', 1), ('#cpp', 1), ('#dynamic-programming', 1), ('#go', 1), ('#golang', 1), ('#memoization', 1), ('#optimize', 1), ('#python3', 1), ('#recursion', 1), ('0ms', 1), ('0ms runtime', 1), ('100 faster', 1), ('100 memory', 1), ('100 speed', 1), ('1ms runtime', 1), ('2', 1), ('2-pointer', 1), ('2-pointers', 1), ('2mb', 1), ('4 ms', 1), ('accepted', 1), ('accepted solution', 1), ('algorithms', 1), ('amazon sde 1', 1), ('answer', 1), ('approach-explained', 1), ('array', 1), ('awesome samriddhi', 1), ('beginner friendly', 1), ('best c++', 1), ('best explaination', 1), ('bfs', 1), ('binary search', 1), ('bottom up', 1), ('bottom up dp', 1), ('bottom-up', 1), ('bottomup', 1), ('bruteforce', 1), ('buffer-overflow', 1), ('bug fixing', 1), ('c++ solution', 1), ('c++14', 1), ('c++solution', 1), ('char compare', 1), ('clean clode', 1), ('code', 1), ('code comments', 1), ('compact', 1), ('compare', 1), ('complexity analysis', 1), ('constant time', 1), ('constant-space-iterative', 1), ('cpp error', 1), ('cpp soltuion', 1), ('cpp-functional', 1), ('cppsolution', 1), ('debug', 1), ('dfs', 1), ('dict', 1), ('dictionary', 1), ('different solutions', 1), ('divide and conquer', 1), ('divide-and-conquer', 1), ('dp approach', 1), ('dp c++', 1), ('dp pattern', 1), ('dynamic programmin', 1), ('dynaminc programming', 1), ('easiest solution', 1), ('easy code', 1), ('easy cpp', 1), ('easy sloution', 1), ('easy to follow', 1), ('easy to read', 1), ('easy to understand', 1), ('easy understanding', 1), ('easy-solition', 1), ('easy-to-read', 1), ('easytoundersatand', 1), ('edge-case', 1), ('elegant solution', 1), ('error in solution', 1), ('error message', 1), ('evolution', 1), ('exception', 1), ('expalanation', 1), ('expanding', 1), ('expansion', 1), ('expansion around center', 1), ('explain', 1), ('explained', 1), ('explained solution', 1), ('explanations', 1), ('facebook', 1), ('factorial', 1), ('fan out technique', 1), ('fast', 1), ('faster than 99.41', 1), ('fastest', 1), ('for loop', 1), ('fp', 1), ('futures', 1), ('g++', 1), ('gcc', 1), ('generate-allpalindromes', 1), ('google interview', 1), ('greedy', 1), ('hash-function', 1), ('heap-buffer-overflow', 1), ('heap-memory', 1), ('heap-overflow', 1), ('image', 1), ('immutable', 1), ('incorrect-test-case', 1), ('interview', 1), ('interview preparation', 1), ('iterative solution', 1), ('iterative traversal', 1), ('java-8', 1), ('javascipt', 1), ('js', 1), ('kotlinvim', 1), ('leetcode-wrong', 1), ('linear', 1), ('linear time', 1), ('linear-space', 1), ('linear-time', 1), ('longest', 1), ('longestpalindromicsubstr', 1), ('lps', 1), ('manachars algorithm', 1), ('manachers algorithm', 1), ('manchers', 1), ('memoization', 1), ('memoized', 1), ('memory-limited-exceeded', 1), ('missing-test-case', 1), ('neat', 1), ('negative-index', 1), ('nlogn time', 1), ('ojerror', 1), ('on2', 1), ('optimal', 1), ('optimisation', 1), ('output limit exceeded', 1), ('parallel', 1), ('php', 1), ('problem', 1), ('problem analysis', 1), ('push dp', 1), ('pyhton 3', 1), ('python3.8', 1), ('questions', 1), ('recurrance', 1), ('recursion palindrome', 1), ('recursive solution', 1), ('recusion', 1), ('refactoring', 1), ('reusable', 1), ('ritik', 1), ('runtime', 1), ('runtime-error', 1), ('runtimeerror', 1), ('search', 1), ('share-solution', 1), ('short code', 1), ('shorter', 1), ('simple python accepted', 1), ('simple soultion', 1), ('simplesolution', 1), ('simplest', 1), ('simulation', 1), ('solution-sharing-python', 1), ('space', 1), ('space o1', 1), ('space-compexity', 1), ('space-complexity', 1), ('space-efficient', 1), ('stackoverflow', 1), ('stars move the article up', 1), ('string hashing', 1), ('string slicing', 1), ('string-operation', 1), ('stringbuilder', 1), ('strings', 1), ('submit-fail', 1), ('suffix-array', 1), ('tabular', 1), ('tabulation', 1), ('time', 1), ('time exceed error', 1), ('timelimit', 1), ('ting', 1), ('top-down dp', 1), ('two pointer technique', 1), ('typescript', 1), ('vector', 1), ('video', 1), ('video solution', 1), ('well commented', 1)]"
4,Median of Two Sorted Arrays,https://leetcode.com/problems/median-of-two-sorted-arrays,"Given two sorted arrays nums1 and nums2 of size m and n respectively, return the median of the two sorted arrays.","['array', 'binary-search', 'divide-and-conquer']",Hard,9883,1510,2935894,926576,[],"[('java', 93), ('python', 82), ('c++', 73), ('cpp', 70), ('binary-search', 59), ('python 3', 56), ('javascript', 50), ('python3', 36), ('java-solution', 32), ('easy-understanding', 23), ('solution', 21), ('medianoftwosortedarrays', 17), ('median', 14), ('binary search', 13), ('mergesort', 13), ('simple', 13), ('easy', 12), ('javascript solution', 12), ('merge', 12), ('time-complexity', 12), ('binarysearch', 11), ('c', 11), ('golang', 11), ('simple solution', 11), ('rust', 10), ('c#', 9), ('wrong-answer', 9), ('cpp solution', 8), ('median-of-two-sorted-arrays', 8), ('sorted array', 8), ('java ac solution', 7), ('merge sort', 7), ('merge-sort', 7), ('easy-to-understand', 6), ('fast', 6), ('cpp easy', 5), ('divide and conquer', 5), ('easy-undestand', 5), ('easytounderstand', 5), ('fast-solution', 5), ('go', 5), ('golang-solution', 5), ('iterative', 5), ('linear time', 5), ('merged', 5), ('ruby', 5), ('run-time-error', 5), ('scala', 5), ('swift', 5), ('c++ code', 4), ('fast and simple', 4), ('go-solution', 4), ('js', 4), ('logarithmic time', 4), ('median-arrays', 4), ('short', 4), ('test-case', 4), ('video-explanation', 4), ('0ms', 3), ('array', 3), ('arrays', 3), ('brute force', 3), ('easiest', 3), ('easysolution', 3), ('javascrip', 3), ('optimal', 3), ('recursive', 3), ('sorting', 3), ('stl', 3), ('test-cases', 3), ('two pointers', 3), ('two-pointers', 3), ('understandable', 3), ('vector', 3), ('100 memory', 2), ('100 space', 2), ('accepted solution', 2), ('answer', 2), ('begineer', 2), ('best', 2), ('bisect', 2), ('brute-force', 2), ('c++ easy to understand', 2), ('c++-easy', 2), ('clean', 2), ('comments-added', 2), ('complexity', 2), ('constant-space', 2), ('cpp-easy', 2), ('easy code', 2), ('easy-understand', 2), ('faster than 100', 2), ('fastest', 2), ('fp', 2), ('golang solution', 2), ('hard', 2), ('heap-buffer-overflow', 2), ('improve', 2), ('iteration', 2), ('iterator', 2), ('kotlin', 2), ('leetcode', 2), ('log', 2), ('maxheap', 2), ('novel approach', 2), ('python3.8', 2), ('pythonpython3', 2), ('readable', 2), ('recursion', 2), ('solution-python', 2), ('solution-sharing-cpp', 2), ('time complexity', 2), ('time-limit-exceeded', 2), ('typescript', 2), ('vectors', 2), ('while-loop', 2), ('works-on-my-machine', 2), ('#explained', 1), ('#java', 1), ('#java #countnsay', 1), ('#java #easy-understand', 1), ('#java-solution', 1), ('#java#sqrtfunction', 1), ('0ms-4ms', 1), ('0ms-solution', 1), ('100 faster runtime', 1), ('100 fastest', 1), ('100 speed', 1), ('2 pointer', 1), ('2mb', 1), ('2ms', 1), ('3ms', 1), ('4', 1), ('4 liner', 1), ('6ms', 1), ('accepted', 1), ('advice needed', 1), ('algorithm', 1), ('algorithms', 1), ('amazon', 1), ('and', 1), ('array-sort', 1), ('asahiocean', 1), ('atoi', 1), ('beat 99.7', 1), ('beautiful', 1), ('beginner friendly', 1), ('best explaination', 1), ('binarysearh', 1), ('bisect-python', 1), ('bitwise operation', 1), ('brute force to optimal', 1), ('bug report', 1), ('buy', 1), ('c# solutions', 1), ('c++ easy solution', 1), ('c++ solution', 1), ('c++14', 1), ('c++solution', 1), ('chaining hash map', 1), ('clean code', 1), ('clear', 1), ('clear solution', 1), ('clear-understanding', 1), ('commented', 1), ('comments', 1), ('commetend', 1), ('compile-error', 1), ('constant memory', 1), ('constant space', 1), ('construction', 1), ('cool', 1), ('coroutines', 1), ('count10', 1), ('cplusplus', 1), ('cpp dfs 1-line', 1), ('cpp doubt', 1), ('cpp-solution', 1), ('csharp', 1), ('cute', 1), ('detailed explanation', 1), ('divide-conquer', 1), ('divideconquer', 1), ('doubts', 1), ('dynamic-programming', 1), ('easiest solution', 1), ('east-to-understand', 1), ('easy to read', 1), ('easy to understand', 1), ('easy to understant', 1), ('easy understand', 1), ('easy-implementation', 1), ('easy-solution', 1), ('ecmascript', 1), ('efficiency', 1), ('efficient', 1), ('elegant', 1), ('enjoy', 1), ('error', 1), ('es6', 1), ('explaination', 1), ('explanation of logic', 1), ('explanation with code', 1), ('faster than 98', 1), ('faster than 99.66', 1), ('faster then 95', 1), ('findkth', 1), ('findmediansortedarrays', 1), ('function', 1), ('google', 1), ('great', 1), ('heap', 1), ('heapq', 1), ('help', 1), ('im bad at coding', 1), ('insertion sort', 1), ('insertion-sort-list', 1), ('interval', 1), ('intuitive', 1), ('iterators', 1), ('itereative', 1), ('java solution', 1), ('java solution sharing', 1), ('java-8', 1), ('javascriptes6', 1), ('javsacript', 1), ('js javascript', 1), ('kotlinvim', 1), ('kotllin', 1), ('kth smallest', 1), ('lazy', 1), ('lazysoul', 1), ('less than 96.46', 1), ('less-memory', 1), ('linked-list', 1), ('logartihm', 1), ('logm', 1), ('logn', 1), ('lol', 1), ('luck', 1), ('mediun', 1), ('merge and sort', 1), ('merge intervals', 1), ('merge-k-sorted-lists', 1), ('merging', 1), ('mergingsort', 1), ('microsoft', 1), ('middle', 1), ('min', 1), ('minheap', 1), ('newbie', 1), ('nlog', 1), ('no memory usage', 1), ('noloop', 1), ('non-recursive', 1), ('om + n', 1), ('optimized', 1), ('partition list', 1), ('perl', 1), ('php', 1), ('pointer', 1), ('pointers', 1), ('priorityqueue', 1), ('python-easy-solution', 1), ('question', 1), ('quick-select', 1), ('rank', 1), ('runtime-error', 1), ('self-explanatory', 1), ('sell', 1), ('sets', 1), ('short code', 1), ('shortest', 1), ('simple and easy', 1), ('simple clear c++ solution', 1), ('simple python solution', 1), ('solution-sharing-c', 1), ('solution-sharing-python', 1), ('sorry', 1), ('sort', 1), ('sorted-array', 1), ('sortings', 1), ('space-efficient', 1), ('sqlist', 1), ('stars move the article up', 1), ('statistics', 1), ('stl algorithms', 1), ('stock', 1), ('stream', 1), ('swift5', 1), ('test-case-too-weak', 1), ('testcase-wrong', 1), ('tough', 1), ('two pointer technique', 1), ('two-sorted-arrays', 1), ('twopointer', 1), ('verbose', 1), ('very easy to understand', 1), ('video', 1), ('video explanation', 1), ('video solution', 1), ('vmware', 1), ('with comments', 1), ('without binary search', 1), ('without recursion', 1), ('without-recursion', 1), ('wrong', 1), ('youtube', 1), ('zip', 1)]"
3,Longest Substring Without Repeating Characters,https://leetcode.com/problems/longest-substring-without-repeating-characters,"Given a string s, find the length of the longest substring without repeating characters.","['hash-table', 'two-pointers', 'string', 'sliding-window']",Medium,14112,730,6823656,2157560,"[""Longest Substring with At Most Two Distinct Characters"", ""Longest Substring with At Most K Distinct Characters"", ""Subarrays with K Different Integers"", ""Maximum Erasure Value""]","[('java', 183), ('python', 149), ('c++', 118), ('cpp', 104), ('slidingwindow', 93), ('javascript', 89), ('python 3', 80), ('hashmap', 74), ('sliding-window', 74), ('java-solution', 63), ('sliding window', 46), ('python3', 36), ('solution', 35), ('two-pointers', 31), ('easy-understanding', 26), ('c#', 25), ('cpp solution', 24), ('golang', 22), ('c', 17), ('swift', 17), ('dynamic-programming', 16), ('simple', 15), ('time-limit-exceeded', 14), ('easy', 13), ('linear time', 13), ('map', 13), ('hashset', 12), ('ruby', 12), ('easy-to-understand', 11), ('string', 11), ('two-pointer', 11), ('array', 10), ('go', 10), ('hashtable', 10), ('kotlin', 10), ('set', 10), ('cpp easy', 9), ('golang-solution', 9), ('sets', 9), ('time-complexity', 9), ('video-explanation', 9), ('c++ code', 8), ('linear', 8), ('substring', 8), ('unordered map', 8), ('commented', 7), ('easytounderstand', 7), ('hash table', 7), ('javascript solution', 7), ('optimized', 7), ('queue', 7), ('wrong-answer', 7), ('easy-understand', 6), ('fast and simple', 6), ('hashing', 6), ('longest-substring-without-repe', 6), ('short', 6), ('simple solution', 6), ('slide window', 6), ('accepted', 5), ('dictionary', 5), ('easy-undestand', 5), ('explained', 5), ('fast-solution', 5), ('fastest', 5), ('go-solution', 5), ('longest-substring', 5), ('python2', 5), ('run-time-error', 5), ('rust', 5), ('stl', 5), ('two pointers', 5), ('#hashmap', 4), ('4ms', 4), ('comments-added', 4), ('fast', 4), ('js', 4), ('linear-time', 4), ('list', 4), ('longest substring', 4), ('one-loop', 4), ('optimal', 4), ('runtime-error', 4), ('scala', 4), ('test-case', 4), ('testcase-wrong', 4), ('clean code', 3), ('concise-solution', 3), ('csharp', 3), ('dp', 3), ('dynamic programming', 3), ('error', 3), ('help', 3), ('java ac solution', 3), ('longestsubstring', 3), ('pythonpython3', 3), ('single pass', 3), ('sliding', 3), ('solution-sharing-cpp', 3), ('string-operation', 3), ('substrings', 3), ('twopointer', 3), ('unordered set', 3), ('unorderedmap', 3), ('unorderedset', 3), ('video', 3), ('video explanation', 3), ('#easy-understand', 2), ('#java', 2), ('#javascript', 2), ('#sliding-window', 2), ('2pointer', 2), ('amazon', 2), ('beginner friendly', 2), ('bit manipulation', 2), ('bitset', 2), ('c++ set', 2), ('c++ solution', 2), ('clean', 2), ('constant space', 2), ('constant-space', 2), ('cpp-solution', 2), ('deque', 2), ('detailed', 2), ('dictionaries', 2), ('dictonary', 2), ('easy understand', 2), ('efficient', 2), ('efficient solution', 2), ('explanations', 2), ('go lang', 2), ('hash', 2), ('hash map', 2), ('help needed', 2), ('iteration', 2), ('java solution', 2), ('linear-time-space', 2), ('linkedhashset', 2), ('longest', 2), ('maps', 2), ('math', 2), ('on', 2), ('php', 2), ('pointers', 2), ('python-index-dictionary', 2), ('python3.8', 2), ('simple logic', 2), ('simple-solution', 2), ('sliding hash', 2), ('sliding window algorithm', 2), ('solution-sharing-python', 2), ('stack', 2), ('swift5', 2), ('test-cases', 2), ('typescript', 2), ('window-sliding', 2), ('#hashset', 1), ('#readable', 1), ('#singleiteration', 1), ('#two-pointers', 1), ('#twopointerapproach', 1), ('0ms', 1), ('2 pointer', 1), ('2-pointer', 1), ('38mb', 1), ('3ms-runtime', 1), ('5 ms', 1), ('5ms', 1), ('60', 1), ('79ms', 1), ('95 per faster', 1), ('accepted solution', 1), ('addresstable', 1), ('aditya-verma', 1), ('alibaba', 1), ('all-cases-passed', 1), ('answer', 1), ('any', 1), ('arraylist', 1), ('arrays', 1), ('asahiocean', 1), ('ascii', 1), ('ascii-art', 1), ('backtracking', 1), ('baidu', 1), ('beats 80 pc', 1), ('beats 98 pc', 1), ('beginner', 1), ('beginnerfriendly', 1), ('best explaination', 1), ('best java solution', 1), ('best solution', 1), ('best-solution-ever', 1), ('best-submission', 1), ('binary-search', 1), ('bit mask', 1), ('bit masking', 1), ('bit operation', 1), ('bitmask', 1), ('bitwise operation', 1), ('brutal force optmized', 1), ('brute force', 1), ('brute-force', 1), ('bug', 1), ('bug report', 1), ('c code', 1), ('c#-solution', 1), ('c++14', 1), ('c++solution', 1), ('character compare', 1), ('codingtuting', 1), ('commented code', 1), ('commetend', 1), ('compile-error', 1), ('consice', 1), ('cool', 1), ('counter', 1), ('cplusplus', 1), ('cpp with explanation', 1), ('detailed explanation', 1), ('detailed-explanation', 1), ('dict', 1), ('dictionary c#', 1), ('dictionary comprehension', 1), ('didi', 1), ('dp c++', 1), ('dp-techqique', 1), ('duplicate', 1), ('easiest', 1), ('easiest solution', 1), ('east-understanding', 1), ('easy to understand', 1), ('easy understanding', 1), ('easy-solution', 1), ('easy-to-read', 1), ('easy-understsand', 1), ('emoji', 1), ('esay-understand', 1), ('explain', 1), ('explaination', 1), ('explanation', 1), ('explanied', 1), ('faster', 1), ('faster than 99.80', 1), ('five-different-solutions', 1), ('follow up solved', 1), ('for loops', 1), ('fp', 1), ('frequency count', 1), ('give stars if you like', 1), ('go-solutiong', 1), ('golang solution', 1), ('google', 1), ('hash set', 1), ('hash-table', 1), ('hasing', 1), ('heap-buffer-overflow', 1), ('help me', 1), ('idiomtic', 1), ('incorrect-test-case', 1), ('interview', 1), ('intuitive', 1), ('iterator', 1), ('java simple', 1), ('javacript', 1), ('javasciprt', 1), ('javascriptes6', 1), ('jigneshpanchal', 1), ('js javascript', 1), ('kadane algorithm', 1), ('keep it simple', 1), ('kmp', 1), ('kotlin-solution', 1), ('last index', 1), ('lengthoflongestsubstring', 1), ('less than 39mb', 1), ('linear complexity', 1), ('linear memory', 1), ('linear space', 1), ('linked list', 1), ('linkedlist', 1), ('logical thinking', 1), ('long', 1), ('lookup', 1), ('loop based', 1), ('loops', 1), ('map in c++', 1), ('math.max', 1), ('medium', 1), ('meituan', 1), ('meiyaowen', 1), ('memoization', 1), ('memory limit', 1), ('memory optimization', 1), ('memory-limit-exceeded', 1), ('modern', 1), ('naive', 1), ('no-max', 1), ('no-repeat', 1), ('none', 1), ('object', 1), ('offerpie', 1), ('one-pass', 1), ('oneliner', 1), ('optimized window', 1), ('ordered sets', 1), ('performance', 1), ('performance question', 1), ('php solution', 1), ('pointer2pointer', 1), ('problem', 1), ('problem-statement', 1), ('pyhton 3', 1), ('pyhton3', 1), ('python 2', 1), ('python-dictionary', 1), ('pyton', 1), ('query', 1), ('question', 1), ('readable', 1), ('recursion', 1), ('reduce', 1), ('rune-time-error', 1), ('scanleft', 1), ('self-explanatory', 1), ('short code', 1), ('short solution', 1), ('shorter', 1), ('shy', 1), ('simpe', 1), ('simple clear c++ solution', 1), ('simple python accepted', 1), ('simplest', 1), ('single for loop', 1), ('slicing', 1), ('sliding-window-maximum', 1), ('solution-python', 1), ('solution-sharing-java', 1), ('solution-sharingjava', 1), ('space-complexity', 1), ('space-non', 1), ('straight-forward', 1), ('streams', 1), ('string parsing', 1), ('string-searching', 1), ('string-to-integer', 1), ('strings', 1), ('submit-fail', 1), ('substring pattern', 1), ('super-easy', 1), ('swift5.3', 1), ('syntax', 1), ('tdd', 1), ('tencent', 1), ('test case issue', 1), ('time complexity', 1), ('time limit exceeded', 1), ('time-limit-exceeded-c++', 1), ('time-limit-exceeded-java', 1), ('tle', 1), ('top', 1), ('toutiao', 1), ('two pointer', 1), ('two pointer technique', 1), ('two+pointers', 1), ('understanding', 1), ('unicode', 1), ('unodered-map', 1), ('vectors', 1), ('video solution', 1), ('while-loop', 1), ('why', 1), ('window', 1), ('with comments', 1), ('works-on-my-machine', 1), ('wrong', 1), ('wrong answer', 1), ('wrong test case', 1), ('wrong-answer-ruby', 1), ('xjq', 1), ('youtube', 1)]"
2,Add Two Numbers,https://leetcode.com/problems/add-two-numbers,"You are given two non-empty linked lists representing two non-negative integers. The digits are stored in reverse order, and each of their nodes contains a single digit. Add the two numbers and return the sum as a linked list.

You may assume the two numbers do not contain any leading zero, except the number 0 itself.","['linked-list', 'math', 'recursion']",Medium,11580,2758,5315081,1905586,"[""Multiply Strings"", ""Add Binary"", ""Sum of Two Integers"", ""Add Strings"", ""Add Two Numbers II"", ""Add to Array-Form of Integer"", ""Add Two Polynomials Represented as Linked Lists""]","[('java', 151), ('python', 133), ('c++', 94), ('python 3', 88), ('cpp', 87), ('javascript', 78), ('linked-list', 75), ('recursion', 57), ('python3', 54), ('java-solution', 42), ('solution', 40), ('easy-understanding', 30), ('recursive', 29), ('linkedlists', 25), ('swift', 24), ('c', 23), ('simple', 23), ('linked list', 22), ('add two numbers', 21), ('c#', 21), ('cpp solution', 21), ('easy-understand', 21), ('golang', 20), ('add-two-numbers', 19), ('addtwonumbers', 19), ('iterative', 17), ('run-time-error', 17), ('easy-to-understand', 15), ('ruby', 14), ('rust', 13), ('simple solution', 13), ('improve', 12), ('wrong-answer', 12), ('c++ code', 11), ('linkedlist', 11), ('easy', 10), ('linked lists', 10), ('clean code', 8), ('constant space', 8), ('easytounderstand', 8), ('fast-solution', 8), ('go', 8), ('kotlin', 8), ('video-explanation', 8), ('go-solution', 7), ('javascript solution', 7), ('scala', 7), ('short', 7), ('test-case', 7), ('csharp', 6), ('inplace', 6), ('js', 6), ('python2', 6), ('recusion', 6), ('time-complexity', 6), ('works-on-my-machine', 6), ('easy-undestand', 5), ('fast', 5), ('golang-solution', 5), ('in-place', 5), ('iteration', 5), ('linear time', 5), ('linked-lists', 5), ('math', 5), ('runtime-error', 5), ('typescript', 5), ('video explanation', 5), ('accepted', 4), ('commented', 4), ('comments', 4), ('comments-added', 4), ('constant-space', 4), ('easy to understand', 4), ('explained', 4), ('fast and simple', 4), ('fastest', 4), ('help', 4), ('listnode', 4), ('optimal', 4), ('#python', 3), ('100', 3), ('100 speed', 3), ('1ms runtime', 3), ('add', 3), ('beginner', 3), ('concise', 3), ('cpp easy', 3), ('error', 3), ('explanation of logic', 3), ('faster', 3), ('java ac solution', 3), ('one-pass', 3), ('optimized', 3), ('recurision', 3), ('recursive solution', 3), ('recursively', 3), ('runtime', 3), ('single pass', 3), ('singly-linked-list', 3), ('sum', 3), ('time-limit-exceeded', 3), ('two', 3), ('.net', 2), ('#javascript', 2), ('#linkedlist', 2), ('#recursion', 2), ('0ms', 2), ('90 faster', 2), ('90+', 2), ('90+ solution', 2), ('90+faster', 2), ('add two numbers ii', 2), ('addition', 2), ('beginner friendly', 2), ('best solution in c++', 2), ('bigint', 2), ('biginteger', 2), ('c code', 2), ('c-code', 2), ('c++ solution', 2), ('c++11', 2), ('c++17', 2), ('clear solution', 2), ('compile-error', 2), ('cpp doubt', 2), ('dummy-head', 2), ('dummy-node', 2), ('easy to understandd', 2), ('efficient solution', 2), ('explaination', 2), ('explained solution', 2), ('faster than 99.80', 2), ('feedback', 2), ('fp', 2), ('generator', 2), ('go lang', 2), ('intuitive', 2), ('iterative way', 2), ('javascrip', 2), ('javscript', 2), ('linear-time', 2), ('list', 2), ('memory-limit-exceeded', 2), ('most efficient solution', 2), ('most optimized', 2), ('must-read', 2), ('no extra space', 2), ('numberformatexception', 2), ('numbers', 2), ('php', 2), ('python error', 2), ('return-value', 2), ('simple approach', 2), ('simple clear c++ solution', 2), ('solution-cpp', 2), ('solved', 2), ('space o1', 2), ('string', 2), ('two-pointers', 2), ('typescript javascript', 2), ('video', 2), ('while loop', 2), ('why', 2), ('wrong answer', 2), ('#easy-understand', 1), ('#iterative', 1), ('#java', 1), ('#python 3', 1), ('#python3', 1), ('100 faster', 1), ('100 memory', 1), ('100 space', 1), ('11lines', 1), ('1560', 1), ('16ms', 1), ('1ms', 1), ('2 pointers', 1), ('2 solutions', 1), ('2ms', 1), ('3 pointers', 1), ('3-liner', 1), ('36ms', 1), ('95 per faster', 1), ('abstraction', 1), ('add number', 1), ('add numbers', 1), ('add-digits', 1), ('addtwonum', 1), ('alibaba', 1), ('amazon', 1), ('and', 1), ('answer', 1), ('array', 1), ('asahiocean', 1), ('awkward', 1), ('baidu', 1), ('basics', 1), ('beating-90-submissions', 1), ('beats', 1), ('beats 100', 1), ('beats 98', 1), ('begineer', 1), ('beginnerfriendly', 1), ('best explaination', 1), ('best java solution', 1), ('best-solution-ever', 1), ('binary-tree', 1), ('bug in leetcode', 1), ('bug-test-case', 1), ('c programming', 1), ('c-programming', 1), ('c-solution', 1), ('c++ iterative sol', 1), ('c++14', 1), ('c++easy-understanding', 1), ('c++solution', 1), ('carry', 1), ('clean', 1), ('clean-code', 1), ('cleansing', 1), ('clear python solution', 1), ('coding comic', 1), ('coding interview', 1), ('codingninja', 1), ('codingtuting', 1), ('commentary', 1), ('consice', 1), ('constant memory', 1), ('cpp-solution', 1), ('cycle detection', 1), ('debug', 1), ('does', 1), ('doubt', 1), ('easiest', 1), ('easy solution', 1), ('easy to read', 1), ('easy understand', 1), ('easy understanding', 1), ('eckotan', 1), ('efficient', 1), ('efficient approach', 1), ('elementary', 1), ('enumerable', 1), ('exception handling', 1), ('explanation', 1), ('explanation with code', 1), ('explanations', 1), ('facebook', 1), ('facebook intern', 1), ('facebook-india', 1), ('failed', 1), ('faster than 100', 1), ('faster than 100.00', 1), ('faster than 90', 1), ('faster then 95', 1), ('form', 1), ('functors', 1), ('github', 1), ('give stars if you like', 1), ('goto', 1), ('goto-considered-harmful', 1), ('hack', 1), ('hacks', 1), ('help needed', 1), ('helpful comments', 1), ('hindi', 1), ('hinglish', 1), ('idiomatic', 1), ('ienumerator', 1), ('improvement-needed', 1), ('in place', 1), ('inbuilt method', 1), ('incorrect-expected-output', 1), ('incorrect-test-case', 1), ('int', 1), ('interview', 1), ('invalid test case', 1), ('iterate', 1), ('iteratively', 1), ('iteratve', 1), ('itereative', 1), ('java 8', 1), ('java-8', 1), ('javascript recursive', 1), ('jigneshpanchal', 1), ('js javascript', 1), ('kotlin-solution', 1), ('kotlinvim', 1), ('lazysoul', 1), ('leetchadcode', 1), ('leetcode', 1), ('leetcode-library', 1), ('less than 39mb', 1), ('linear memory', 1), ('linear-space', 1), ('link list', 1), ('linked', 1), ('linked list iteration', 1), ('linked-list-cycle', 1), ('linklist', 1), ('lists', 1), ('loop', 1), ('map', 1), ('memory', 1), ('memory efficient', 1), ('memory optimized', 1), ('memory-allocation', 1), ('memory-efficient', 1), ('memory-limited-exceeded', 1), ('microsoft', 1), ('missing-test-case', 1), ('naive', 1), ('naive approach', 1), ('newbie', 1), ('not', 1), ('null', 1), ('o-n', 1), ('object-oriented design', 1), ('offerpie', 1), ('or', 1), ('palantir', 1), ('pattern matching', 1), ('php solution', 1), ('pointer', 1), ('pointers', 1), ('programming', 1), ('pthon', 1), ('pythno3', 1), ('python 2', 1), ('python3.8', 1), ('pythonpython3', 1), ('question', 1), ('question need help', 1), ('queue', 1), ('quite-slow', 1), ('rajawatbanna', 1), ('raviinroorkee', 1), ('reasoning', 1), ('recurrance', 1), ('resursive', 1), ('reverse list', 1), ('run time error', 1), ('sandeepkumar', 1), ('self-explanatory', 1), ('sentinel-node', 1), ('shopee', 1), ('short c++ code', 1), ('short code', 1), ('simplest', 1), ('singapore', 1), ('single-linked-list', 1), ('solutio', 1), ('solution-python', 1), ('solution-sharing-cpp', 1), ('solutionsharing', 1), ('space', 1), ('space-efficient', 1), ('stack', 1), ('straight forward', 1), ('straightforward', 1), ('string concatenation', 1), ('string-operation', 1), ('strings', 1), ('swift5', 1), ('swiftsolution', 1), ('tail-pointer', 1), ('tail-recursion', 1), ('tail-recursive', 1), ('tailrec', 1), ('tdd', 1), ('tencent', 1), ('ternary-operator', 1), ('test-cases', 1), ('testcase', 1), ('testcase-wrong', 1), ('testcases', 1), ('this', 1), ('time', 1), ('time-complexity-o', 1), ('tle', 1), ('top', 1), ('two pointers', 1), ('two sum', 1), ('two-sum', 1), ('twopointer', 1), ('twosum', 1), ('unclear', 1), ('unoptimized-structure', 1), ('video explaination', 1), ('video-explaination', 1), ('weird', 1), ('while', 1), ('while-loop', 1), ('whileloop', 1), ('with explanation', 1), ('without-creating-node', 1), ('work', 1), ('wrong', 1), ('wrong-answer-java', 1), ('youtube', 1), ('zip longest', 1)]"
1,Two Sum,https://leetcode.com/problems/two-sum,"Given an array of integers nums and an integer target, return indices of the two numbers such that they add up to target.

You may assume that each input would have exactly one solution, and you may not use the same element twice.

You can return the answer in any order.","['array', 'hash-table']",Easy,20627,723,8895087,4164335,"[""3Sum"", ""4Sum"", ""Two Sum II - Input array is sorted"", ""Two Sum III - Data structure design"", ""Subarray Sum Equals K"", ""Two Sum IV - Input is a BST"", ""Two Sum Less Than K"", ""Max Number of K-Sum Pairs"", ""Count Good Meals""]","[('python', 164), ('java', 130), ('hashmap', 116), ('cpp', 98), ('javascript', 93), ('c++', 91), ('python 3', 88), ('two-sum', 59), ('python3', 50), ('solution', 43), ('two sum', 40), ('java-solution', 37), ('map', 34), ('hash table', 32), ('golang', 30), ('array', 28), ('c', 28), ('c#', 28), ('hashtable', 27), ('rust', 22), ('run-time-error', 21), ('swift', 21), ('twosum', 21), ('wrong-answer', 20), ('cpp solution', 19), ('javascript solution', 19), ('time-limit-exceeded', 19), ('dictionary', 18), ('easy', 18), ('ruby', 18), ('time-complexity', 17), ('youtube', 16), ('amazon', 15), ('easy-understanding', 15), ('facebook', 14), ('hashset', 14), ('two sum cpp', 14), ('2sum', 13), ('go', 13), ('improve', 13), ('list', 13), ('brute force', 12), ('easy-undestand', 12), ('microsoft', 12), ('accepted', 11), ('scala', 11), ('works-on-my-machine', 11), ('binary-search', 10), ('c++ code', 10), ('test-case', 10), ('kotlin', 9), ('testcase-wrong', 9), ('unorderedmap', 9), ('video explanation', 9), ('video-explanation', 9), ('fast and simple', 8), ('golang-solution', 8), ('simple', 8), ('stl', 8), ('cpp easy', 7), ('dictonary', 7), ('go-solution', 7), ('two sum python', 7), ('unordered map', 7), ('c code', 6), ('clean code', 6), ('error', 6), ('hash', 6), ('hashing', 6), ('js javascript', 6), ('linear time', 6), ('python3.8', 6), ('two-pointers', 6), ('typescript', 6), ('wrong', 6), ('csharp', 5), ('easiest', 5), ('efficient', 5), ('fast-solution', 5), ('functional', 5), ('hashing algorithm', 5), ('js', 5), ('php', 5), ('python2', 5), ('short', 5), ('simple solution', 5), ('video', 5), ('binary-tree', 4), ('cpp-solution', 4), ('easy-understand', 4), ('javascript brute force', 4), ('nlogn', 4), ('runtime', 4), ('runtime-error', 4), ('uthash', 4), ('vector', 4), ('video solution', 4), ('#two-sum', 3), ('2 pointer approach', 3), ('algorithm', 3), ('binary search', 3), ('brute-force', 3), ('c# problems', 3), ('c# solutions', 3), ('c++ hash', 3), ('clarification', 3), ('commented', 3), ('compiler', 3), ('complexity', 3), ('dict', 3), ('dictionaries', 3), ('doubts', 3), ('easy-to-understand', 3), ('failed', 3), ('fast', 3), ('functional-programming', 3), ('hash map', 3), ('help', 3), ('java ac solution', 3), ('linear', 3), ('linear-time', 3), ('loop', 3), ('one pass solution', 3), ('optimal', 3), ('set', 3), ('solved', 3), ('sort', 3), ('sorted', 3), ('two pointers', 3), ('video explaination', 3), ('#array', 2), ('#easy-understand', 2), ('#hashmap', 2), ('#python', 2), ('#python 3', 2), ('#two sum', 2), ('accepted solution', 2), ('arrays', 2), ('beginners', 2), ('brute force to optimal', 2), ('bug report', 2), ('c-solution', 2), ('c++ solution', 2), ('c++11', 2), ('code', 2), ('comments-added', 2), ('concise-solution', 2), ('detailed explanation', 2), ('dictionary c#', 2), ('easy code', 2), ('easy to understand', 2), ('easytounderstand', 2), ('efficient solution', 2), ('enumerate', 2), ('es6', 2), ('fastest', 2), ('for-loop', 2), ('google', 2), ('hash-table', 2), ('help me', 2), ('index', 2), ('iterator', 2), ('java 8', 2), ('javacript', 2), ('leetcode', 2), ('map-stl', 2), ('n', 2), ('naivesolution', 2), ('nlogn time', 2), ('one pass hash map', 2), ('one-pass', 2), ('output-limit-exceeded', 2), ('performance', 2), ('php solution', 2), ('pointers', 2), ('question-not-clear', 2), ('recursive', 2), ('simple c code', 2), ('solution-ruby', 2), ('solution-sharing-cpp', 2), ('solution-sharing-python', 2), ('sorting', 2), ('space-complexity', 2), ('straight-forward', 2), ('sum of two integers', 2), ('swiftsolution', 2), ('syntax', 2), ('tejas dalvi', 2), ('test', 2), ('tow sum', 2), ('two sum c', 2), ('two sum javascript', 2), ('twosums', 2), ('video link', 2), ('wrong answer', 2), ('#c', 1), ('#cpp', 1), ('#csharp', 1), ('#dictionary', 1), ('#dsa', 1), ('#easy', 1), ('#java', 1), ('#java8', 1), ('#javascript', 1), ('#lessspace', 1), ('#problem #c solution #bug', 1), ('#readable', 1), ('#singleiteration', 1), ('#sum', 1), ('#twosum', 1), ('0ms', 1), ('0ms-4ms', 1), ('0ms-solution', 1), ('1-line', 1), ('10 lines', 1), ('100 faster', 1), ('100 faster runtime', 1), ('100 space', 1), ('100 speed', 1), ('2 lines', 1), ('2 pointers', 1), ('4 liner', 1), ('90+', 1), ('90+ solution', 1), ('90+faster', 1), ('abap', 1), ('algo', 1), ('algorithm-explained', 1), ('algorithms', 1), ('algosexplained', 1), ('alibaba', 1), ('amazon intern', 1), ('amazon interview', 1), ('amazon sde', 1), ('analysis', 1), ('answers-not-saved', 1), ('array two sum', 1), ('arraylist', 1), ('attractor', 1), ('backtracking', 1), ('bad', 1), ('baidu', 1), ('basic', 1), ('basics', 1), ('beating-100-submission', 1), ('beats 98', 1), ('beats 98 pc', 1), ('beats 99', 1), ('begineer', 1), ('beginner', 1), ('beginner friendly', 1), ('beginnerfriendly', 1), ('best cpp solution', 1), ('best explaination', 1), ('best java solution', 1), ('best solution', 1), ('best space complexity', 1), ('best-solution-ever', 1), ('best-submission', 1), ('bfs', 1), ('bisection search', 1), ('bitset', 1), ('boost', 1), ('bottoms-up', 1), ('break', 1), ('buffer-overflow', 1), ('bug', 1), ('bug-timeout', 1), ('c language', 1), ('c programming', 1), ('c# solution', 1), ('c#-solution', 1), ('c++17', 1), ('case', 1), ('clean', 1), ('codedecks', 1), ('coding comic', 1), ('compile-error', 1), ('compose', 1), ('computational-complexity', 1), ('computer sciences', 1), ('concise', 1), ('correct-test', 1), ('cplusplus', 1), ('cpp doubt', 1), ('csh', 1), ('curry', 1), ('db2', 1), ('description-disambiguation', 1), ('detailed', 1), ('dichotomy', 1), ('different approach', 1), ('disappearance', 1), ('dll', 1), ('doubleloopimplementation', 1), ('dynamic programming', 1), ('easy undestanding', 1), ('easy-solition', 1), ('easy-understsand', 1), ('email', 1), ('exhaustive-search', 1), ('explaination', 1), ('explanation', 1), ('facebook-interview', 1), ('faster', 1), ('faster than 90', 1), ('fastest solution', 1), ('feedback', 1), ('file', 1), ('follow-up', 1), ('fp', 1), ('full detailed explanation', 1), ('functional programming', 1), ('general', 1), ('generic-solution', 1), ('ghetto hack', 1), ('github', 1), ('google interview', 1), ('google-phone-interview', 1), ('hangouts', 1), ('hash-function', 1), ('hashmaps', 1), ('hasmap', 1), ('head', 1), ('heap', 1), ('heap-buffer-overflow', 1), ('heap-overflow', 1), ('help needed', 1), ('helpful comments', 1), ('hide locked problems', 1), ('illustrated', 1), ('immutable', 1), ('import', 1), ('incorrect solution', 1), ('indices', 1), ('input', 1), ('input-error', 1), ('intuitive', 1), ('iteration', 1), ('iterative', 1), ('java solution', 1), ('java11', 1), ('javasciprt', 1), ('javascrip', 1), ('javascript object', 1), ('javascript recursive', 1), ('javascript two sum', 1), ('javascriptes6', 1), ('kotlin-solution', 1), ('last', 1), ('leetcode 394', 1), ('leetcode-only', 1), ('less memory', 1), ('linear space', 1), ('linear-space', 1), ('linear-time-space', 1), ('lists', 1), ('logn', 1), ('loops', 1), ('low memory', 1), ('malj', 1), ('memory', 1), ('memory-limit-exceeded', 1), ('memory-limited-exceeded', 1), ('merge-sort', 1), ('mergesort', 1), ('microsoft azure', 1), ('minimalism', 1), ('mock', 1), ('most optimal', 1), ('multimap', 1), ('murod turaev', 1), ('must-read', 1), ('mysql', 1), ('naive-solution', 1), ('nested loops', 1), ('new-language', 1), ('newbie', 1), ('nutanix', 1), ('o1 time', 1), ('object', 1), ('objective-c', 1), ('objects', 1), ('offerpie', 1), ('offers', 1), ('oj-function-error', 1), ('on', 1), ('one loop', 1), ('one pass', 1), ('one-liner', 1), ('onepass', 1), ('online-judge', 1), ('online-judge-question', 1), ('optimal approach', 1), ('optimized', 1), ('pair sum', 1), ('pairs', 1), ('palindrome', 1), ('pending', 1), ('problem', 1), ('programming', 1), ('pyhton3', 1), ('pythonic', 1), ('pythonpython3', 1), ('pythonsolution', 1), ('qucik-sort', 1), ('racket', 1), ('radix-sort', 1), ('rajawatbanna', 1), ('recursion', 1), ('reduce', 1), ('return-value', 1), ('reverse-polish-notation', 1), ('roman to integer', 1), ('roman-integer', 1), ('romantointeger', 1), ('rune-time-error', 1), ('self explanatory', 1), ('server', 1), ('set intersection', 1), ('shortest', 1), ('simple clear c++ solution', 1), ('simple python solution', 1), ('simple-solution', 1), ('single pass', 1), ('sliding-window', 1), ('slidingwindow', 1), ('solition-sharing', 1), ('solution-javascript', 1), ('solution-python', 1), ('solution-sharing-c', 1), ('solution-sharing-swift', 1), ('solution-sharingjava', 1), ('sorted dictionary', 1), ('soultion-sharing-swift', 1), ('space o1', 1), ('space-compexity', 1), ('speed', 1), ('sql', 1), ('status', 1), ('stdmap', 1), ('stdvector', 1), ('stochastic', 1), ('submit', 1), ('sum', 1), ('summary-ranges', 1), ('swift5', 1), ('target', 1), ('target-sum', 1), ('tencent', 1), ('test case issue', 1), ('test-case-validation', 1), ('test-cases', 1), ('testcase', 1), ('testcase error', 1), ('testcase-wrong-and-not', 1), ('thank you', 1), ('time complexity', 1), ('time-limit-exceeded-java', 1), ('traversal', 1), ('tree', 1), ('tutorial for beginners', 1), ('two pointer', 1), ('two solutions', 1), ('two sum video solution', 1), ('two-different-solutions', 1), ('two-pass', 1), ('two-pointer', 1), ('two0sum', 1), ('typeerror', 1), ('ugly', 1), ('ultra simple', 1), ('undefined', 1), ('unique', 1), ('unit', 1), ('unordered maps', 1), ('unorderedmultipmap', 1), ('upvote', 1), ('using array', 1), ('valid', 1), ('valid-parentheses', 1), ('vectors', 1), ('verification', 1), ('version', 1), ('walkthrough', 1), ('whiteboard', 1), ('whiteboard explanation', 1), ('with-explanation', 1), ('withnotes', 1), ('without map', 1), ('word-ladder', 1), ('wrong output', 1), ('wrong-answer-ruby', 1), ('xinerd', 1)]"
